/*
   TunisGL.h
       A Public domain ANSI C (C89) compliant GL/GLES extension wrangler

   Generated using GLBrebis on Thu, 30 Aug 2018 18:58:16 GMT
   https://github.com/mchiasson/GLBrebis

   NO WARRANTY IMPLIED; USE AT YOUR OWN RISK

   Suports the following OpenGL contexts:
     - OpenGL 1.0
     - OpenGL 1.1
     - OpenGL 1.2
     - OpenGL 1.3
     - OpenGL 1.4
     - OpenGL 1.5
     - OpenGL 2.0
     - OpenGL 2.1
     - OpenGL 3.0
     - OpenGL 3.1
     - OpenGL 3.2
     - OpenGL 3.3
     - OpenGL 4.0
     - OpenGL 4.1
     - OpenGL 4.2
     - OpenGL 4.3
     - OpenGL 4.4
     - OpenGL 4.5
     - OpenGL 4.6
     - OpenGL ES CM 1.0
     - OpenGL ES 2.0
     - OpenGL ES 3.1
     - OpenGL ES 3.2
     - OpenGL SC 2.0 (unverified)
     - WebGL (Emscripten in either asm.js or wasm format)

   Do this:

     #define TUNIS_GL_IMPLEMENTATION

   before you include this file in *one* C or C++ file to create the implementation.
     // i.e. it should look like this:
     #include ...
     #include ...
     #include ...
     #define TUNIS_GL_IMPLEMENTATION
     #include "TunisGL.h"

   Before you can use any GL or GLES functions from this header make sure to
   call tunisGLInit() soon after creating your GL or GLES context, and make sure
   that it returns KHRONOS_TRUE. To  clean up the loaded function pointer table
   and close any opened GL/GLES library handle opened by this wrangler, you can
   call tunisGLShutdown().

LICENSE

------------------------------------------------------------------------------
This software is available under 2 licenses -- choose whichever you prefer.
------------------------------------------------------------------------------
ALTERNATIVE A - MIT License
Copyright (c) 2017-2018 Mathieu-Andr√© Chiasson
Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
of the Software, and to permit persons to whom the Software is furnished to do
so, subject to the following conditions:
The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
------------------------------------------------------------------------------
ALTERNATIVE B - Public Domain (www.unlicense.org)
This is free and unencumbered software released into the public domain.
Anyone is free to copy, modify, publish, use, compile, sell, or distribute this
software, either in source code form or as a compiled binary, for any purpose,
commercial or non-commercial, and by any means.
In jurisdictions that recognize copyright laws, the author or authors of this
software dedicate any and all copyright interest in the software to the public
domain. We make this dedication for the benefit of the public at large and to
the detriment of our heirs and successors. We intend this dedication to be an
overt act of relinquishment in perpetuity of all present and future rights to
this software under copyright law.
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
------------------------------------------------------------------------------
*/

#ifndef _TUNIS_GL_H_
#define _TUNIS_GL_H_ 1

/*******************************************************************************
 * FOLLOWING SECTION IS FROM KHR/khrplatform.h, available here:
 * https://www.khronos.org/registry/EGL/api/KHR/khrplatform.h
 ******************************************************************************/
#ifndef __khrplatform_h_
#define __khrplatform_h_

/*
** Copyright (c) 2008-2018 The Khronos Group Inc.
**
** Permission is hereby granted, free of charge, to any person obtaining a
** copy of this software and/or associated documentation files (the
** "Materials"), to deal in the Materials without restriction, including
** without limitation the rights to use, copy, modify, merge, publish,
** distribute, sublicense, and/or sell copies of the Materials, and to
** permit persons to whom the Materials are furnished to do so, subject to
** the following conditions:
**
** The above copyright notice and this permission notice shall be included
** in all copies or substantial portions of the Materials.
**
** THE MATERIALS ARE PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
** EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
** MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
** IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
** CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
** TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
** MATERIALS OR THE USE OR OTHER DEALINGS IN THE MATERIALS.
*/

/* Khronos platform-specific types and definitions.
 *
 * The master copy of khrplatform.h is maintained in the Khronos EGL
 * Registry repository at https://github.com/KhronosGroup/EGL-Registry
 * The last semantic modification to khrplatform.h was at commit ID:
 *      67a3e0864c2d75ea5287b9f3d2eb74a745936692
 *
 * Adopters may modify this file to suit their platform. Adopters are
 * encouraged to submit platform specific modifications to the Khronos
 * group so that they can be included in future versions of this file.
 * Please submit changes by filing pull requests or issues on
 * the EGL Registry repository linked above.
 *
 *
 * See the Implementer's Guidelines for information about where this file
 * should be located on your system and for more details of its use:
 *    http://www.khronos.org/registry/implementers_guide.pdf
 *
 * This file should be included as
 *        #include <KHR/khrplatform.h>
 * by Khronos client API header files that use its types and defines.
 *
 * The types in khrplatform.h should only be used to define API-specific types.
 *
 * Types defined in khrplatform.h:
 *    khronos_int8_t              signed   8  bit
 *    khronos_uint8_t             unsigned 8  bit
 *    khronos_int16_t             signed   16 bit
 *    khronos_uint16_t            unsigned 16 bit
 *    khronos_int32_t             signed   32 bit
 *    khronos_uint32_t            unsigned 32 bit
 *    khronos_int64_t             signed   64 bit
 *    khronos_uint64_t            unsigned 64 bit
 *    khronos_intptr_t            signed   same number of bits as a pointer
 *    khronos_uintptr_t           unsigned same number of bits as a pointer
 *    khronos_ssize_t             signed   size
 *    khronos_usize_t             unsigned size
 *    khronos_float_t             signed   32 bit floating point
 *    khronos_time_ns_t           unsigned 64 bit time in nanoseconds
 *    khronos_utime_nanoseconds_t unsigned time interval or absolute time in
 *                                         nanoseconds
 *    khronos_stime_nanoseconds_t signed time interval in nanoseconds
 *    khronos_boolean_enum_t      enumerated boolean type. This should
 *      only be used as a base type when a client API's boolean type is
 *      an enum. Client APIs which use an integer or other type for
 *      booleans cannot use this as the base type for their boolean.
 *
 * Tokens defined in khrplatform.h:
 *
 *    KHRONOS_FALSE, KHRONOS_TRUE Enumerated boolean false/true values.
 *
 *    KHRONOS_SUPPORT_INT64 is 1 if 64 bit integers are supported; otherwise 0.
 *    KHRONOS_SUPPORT_FLOAT is 1 if floats are supported; otherwise 0.
 *
 * Calling convention macros defined in this file:
 *    KHRONOS_APICALL
 *    KHRONOS_APIENTRY
 *    KHRONOS_APIATTRIBUTES
 *
 * These may be used in function prototypes as:
 *
 *      KHRONOS_APICALL void KHRONOS_APIENTRY funcname(
 *                                  int arg1,
 *                                  int arg2) KHRONOS_APIATTRIBUTES;
 */

/*-------------------------------------------------------------------------
 * Definition of KHRONOS_APICALL
 *-------------------------------------------------------------------------
 * This precedes the return type of the function in the function prototype.
 */
#if defined(_WIN32) && !defined(__SCITECH_SNAP__)
#   define KHRONOS_APICALL __declspec(dllimport)
#elif defined (__SYMBIAN32__)
#   define KHRONOS_APICALL IMPORT_C
#elif defined(__ANDROID__)
#   define KHRONOS_APICALL __attribute__((visibility("default")))
#else
#   define KHRONOS_APICALL
#endif

/*-------------------------------------------------------------------------
 * Definition of KHRONOS_APIENTRY
 *-------------------------------------------------------------------------
 * This follows the return type of the function  and precedes the function
 * name in the function prototype.
 */
#if defined(_WIN32) && !defined(_WIN32_WCE) && !defined(__SCITECH_SNAP__)
    /* Win32 but not WinCE */
#   define KHRONOS_APIENTRY __stdcall
#else
#   define KHRONOS_APIENTRY
#endif

/*-------------------------------------------------------------------------
 * Definition of KHRONOS_APIATTRIBUTES
 *-------------------------------------------------------------------------
 * This follows the closing parenthesis of the function prototype arguments.
 */
#if defined (__ARMCC_2__)
#define KHRONOS_APIATTRIBUTES __softfp
#else
#define KHRONOS_APIATTRIBUTES
#endif

/*-------------------------------------------------------------------------
 * basic type definitions
 *-----------------------------------------------------------------------*/
#if (defined(__STDC_VERSION__) && __STDC_VERSION__ >= 199901L) || defined(__GNUC__) || defined(__SCO__) || defined(__USLC__)


/*
 * Using <stdint.h>
 */
#include <stdint.h>
typedef int32_t                 khronos_int32_t;
typedef uint32_t                khronos_uint32_t;
typedef int64_t                 khronos_int64_t;
typedef uint64_t                khronos_uint64_t;
#define KHRONOS_SUPPORT_INT64   1
#define KHRONOS_SUPPORT_FLOAT   1

#elif defined(__VMS ) || defined(__sgi)

/*
 * Using <inttypes.h>
 */
#include <inttypes.h>
typedef int32_t                 khronos_int32_t;
typedef uint32_t                khronos_uint32_t;
typedef int64_t                 khronos_int64_t;
typedef uint64_t                khronos_uint64_t;
#define KHRONOS_SUPPORT_INT64   1
#define KHRONOS_SUPPORT_FLOAT   1

#elif defined(_WIN32) && !defined(__SCITECH_SNAP__)

/*
 * Win32
 */
typedef __int32                 khronos_int32_t;
typedef unsigned __int32        khronos_uint32_t;
typedef __int64                 khronos_int64_t;
typedef unsigned __int64        khronos_uint64_t;
#define KHRONOS_SUPPORT_INT64   1
#define KHRONOS_SUPPORT_FLOAT   1

#elif defined(__sun__) || defined(__digital__)

/*
 * Sun or Digital
 */
typedef int                     khronos_int32_t;
typedef unsigned int            khronos_uint32_t;
#if defined(__arch64__) || defined(_LP64)
typedef long int                khronos_int64_t;
typedef unsigned long int       khronos_uint64_t;
#else
typedef long long int           khronos_int64_t;
typedef unsigned long long int  khronos_uint64_t;
#endif /* __arch64__ */
#define KHRONOS_SUPPORT_INT64   1
#define KHRONOS_SUPPORT_FLOAT   1

#elif 0

/*
 * Hypothetical platform with no float or int64 support
 */
typedef int                     khronos_int32_t;
typedef unsigned int            khronos_uint32_t;
#define KHRONOS_SUPPORT_INT64   0
#define KHRONOS_SUPPORT_FLOAT   0

#else

/*
 * Generic fallback
 */
#include <stdint.h>
typedef int32_t                 khronos_int32_t;
typedef uint32_t                khronos_uint32_t;
typedef int64_t                 khronos_int64_t;
typedef uint64_t                khronos_uint64_t;
#define KHRONOS_SUPPORT_INT64   1
#define KHRONOS_SUPPORT_FLOAT   1

#endif


/*
 * Types that are (so far) the same on all platforms
 */
typedef signed   char          khronos_int8_t;
typedef unsigned char          khronos_uint8_t;
typedef signed   short int     khronos_int16_t;
typedef unsigned short int     khronos_uint16_t;

/*
 * Types that differ between LLP64 and LP64 architectures - in LLP64,
 * pointers are 64 bits, but 'long' is still 32 bits. Win64 appears
 * to be the only LLP64 architecture in current use.
 */
#ifdef _WIN64
typedef signed   long long int khronos_intptr_t;
typedef unsigned long long int khronos_uintptr_t;
typedef signed   long long int khronos_ssize_t;
typedef unsigned long long int khronos_usize_t;
#else
typedef signed   long  int     khronos_intptr_t;
typedef unsigned long  int     khronos_uintptr_t;
typedef signed   long  int     khronos_ssize_t;
typedef unsigned long  int     khronos_usize_t;
#endif

#if KHRONOS_SUPPORT_FLOAT
/*
 * Float type
 */
typedef          float         khronos_float_t;
#endif

#if KHRONOS_SUPPORT_INT64
/* Time types
 *
 * These types can be used to represent a time interval in nanoseconds or
 * an absolute Unadjusted System Time.  Unadjusted System Time is the number
 * of nanoseconds since some arbitrary system event (e.g. since the last
 * time the system booted).  The Unadjusted System Time is an unsigned
 * 64 bit value that wraps back to 0 every 584 years.  Time intervals
 * may be either signed or unsigned.
 */
typedef khronos_uint64_t       khronos_utime_nanoseconds_t;
typedef khronos_int64_t        khronos_stime_nanoseconds_t;
#endif

/*
 * Dummy value used to pad enum types to 32 bits.
 */
#ifndef KHRONOS_MAX_ENUM
#define KHRONOS_MAX_ENUM 0x7FFFFFFF
#endif

/*
 * Enumerated boolean type
 *
 * Values other than zero should be considered to be true.  Therefore
 * comparisons should not be made against KHRONOS_TRUE.
 */
typedef enum {
    KHRONOS_FALSE = 0,
    KHRONOS_TRUE  = 1,
    KHRONOS_BOOLEAN_ENUM_FORCE_SIZE = KHRONOS_MAX_ENUM
} khronos_boolean_enum_t;

#endif /* __khrplatform_h_ */

/*******************************************************************************
 * END OF KHR/khrplatform.h SECTION
 ******************************************************************************/


#if defined(__glu_h__)
#error "GL/glu.h cannot be included before TunisGL.h"
#endif

#if defined(__gl_h_)
#error "GL/gl.h cannot be included before TunisGL.h"
#endif

#if defined(__gl2_h_)
#error "GL/gl2.h cannot be included before TunisGL.h"
#endif

#if defined(__glcorearb_h_)
#error "GL/glcorearb.h cannot be included before TunisGL.h"
#endif

#if defined(__gl20_h_)
#error "GLES2/gl2.h cannot be included before TunisGL.h"
#endif

#if defined(__gl_es20_h_)
#error "OpenGLES/ES2/gl.h cannot be included before TunisGL.h"
#endif

#if defined(__gl30_h_)
#error "GLES3/gl3.h cannot be included before TunisGL.h"
#endif

#if defined(__gl_es30_h_)
#error "OpenGLES/ES3/gl.h cannot be included before TunisGL.h"
#endif

#if defined(__gl31_h_)
#error "GLES3/gl31.h cannot be included before TunisGL.h"
#endif

#if defined(__gl32_h_)
#error "GLES3/gl32.h cannot be included before TunisGL.h"
#endif

#if defined(__glext_h_)
#error "GL/glext.h cannot be included before TunisGL.h"
#endif

#if defined(__gl2ext_h_)
#error "GL/glext.h cannot be included before TunisGL.h"
#endif

#if defined(__gl_es20ext_h_)
#error "OpenGLES/ES2/glext.h cannot be included before TunisGL.h"
#endif

#if defined(__gl_es30ext_h_)
#error "OpenGLES/ES3/glext.h cannot be included before TunisGL.h"
#endif

#if defined(__gltypes_h_)
#error "gltypes.h cannot be included before TunisGL.h"
#endif

#define __gl_h_ 1
#define __gl2_h_ 1
#define __glcorearb_h_ 1
#define __gl20_h_ 1
#define __gl_es20_h_ 1
#define __gl30_h_ 1
#define __gl_es30_h_ 1
#define __gl31_h_ 1
#define __gl32_h_ 1
#define __glext_h_ 1
#define __gl2ext_h_ 1
#define __gl_es20ext_h_ 1
#define __gl_es30ext_h_ 1
#define __gltypes_h_ 1

#if defined(_WIN32) && !defined(__CYGWIN__)
    #define WIN32_LEAN_AND_MEAN 1
    #include <Windows.h>
    #undef WIN32_LEAN_AND_MEAN
#endif

#if !defined(TUNIS_FORCE_INLINE)
    #if defined(_MSC_VER)
        #define TUNIS_FORCE_INLINE __forceinline
    #elif ( (defined(__GNUC__) && (__GNUC__ >= 4) ) || defined(__clang__) )
        #define TUNIS_FORCE_INLINE __attribute__((always_inline)) static __inline__
    #else
        #define TUNIS_FORCE_INLINE static inline
    #endif
#endif

/* GL and GL ES Definitions */
#define GL_NEXT_BUFFER_NV -2
#define GL_SKIP_COMPONENTS4_NV -3
#define GL_SKIP_COMPONENTS3_NV -4
#define GL_SKIP_COMPONENTS2_NV -5
#define GL_SKIP_COMPONENTS1_NV -6
#define GL_FALSE 0
#define GL_LAYOUT_DEFAULT_INTEL 0
#define GL_NONE 0
#define GL_NONE_OES 0
#define GL_NO_ERROR 0
#define GL_ZERO 0
#define GL_KTX_FRONT_REGION 0x0
#define GL_CLOSE_PATH_NV 0x00
#define GL_POINTS 0x0000
#define GL_TERMINATE_SEQUENCE_COMMAND_NV 0x0000
#define GL_PERFQUERY_SINGLE_CONTEXT_INTEL 0x00000000
#define GL_2X_BIT_ATI 0x00000001
#define GL_CLIENT_PIXEL_STORE_BIT 0x00000001
#define GL_COLOR_BUFFER_BIT0_QCOM 0x00000001
#define GL_CONTEXT_CORE_PROFILE_BIT 0x00000001
#define GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT 0x00000001
#define GL_CURRENT_BIT 0x00000001
#define GL_FOVEATION_ENABLE_BIT_QCOM 0x00000001
#define GL_PERFQUERY_GLOBAL_CONTEXT_INTEL 0x00000001
#define GL_QUERY_DEPTH_PASS_EVENT_BIT_AMD 0x00000001
#define GL_RED_BIT_ATI 0x00000001
#define GL_SYNC_FLUSH_COMMANDS_BIT 0x00000001
#define GL_SYNC_FLUSH_COMMANDS_BIT_APPLE 0x00000001
#define GL_TEXTURE_DEFORMATION_BIT_SGIX 0x00000001
#define GL_TEXTURE_STORAGE_SPARSE_BIT_AMD 0x00000001
#define GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT 0x00000001
#define GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT_EXT 0x00000001
#define GL_VERTEX_SHADER_BIT 0x00000001
#define GL_VERTEX_SHADER_BIT_EXT 0x00000001
#define GL_4X_BIT_ATI 0x00000002
#define GL_CLIENT_VERTEX_ARRAY_BIT 0x00000002
#define GL_COLOR_BUFFER_BIT1_QCOM 0x00000002
#define GL_COMP_BIT_ATI 0x00000002
#define GL_CONTEXT_COMPATIBILITY_PROFILE_BIT 0x00000002
#define GL_CONTEXT_FLAG_DEBUG_BIT 0x00000002
#define GL_CONTEXT_FLAG_DEBUG_BIT_KHR 0x00000002
#define GL_ELEMENT_ARRAY_BARRIER_BIT 0x00000002
#define GL_ELEMENT_ARRAY_BARRIER_BIT_EXT 0x00000002
#define GL_FOVEATION_SCALED_BIN_METHOD_BIT_QCOM 0x00000002
#define GL_FRAGMENT_SHADER_BIT 0x00000002
#define GL_FRAGMENT_SHADER_BIT_EXT 0x00000002
#define GL_GEOMETRY_DEFORMATION_BIT_SGIX 0x00000002
#define GL_GREEN_BIT_ATI 0x00000002
#define GL_POINT_BIT 0x00000002
#define GL_QUERY_DEPTH_FAIL_EVENT_BIT_AMD 0x00000002
#define GL_8X_BIT_ATI 0x00000004
#define GL_BLUE_BIT_ATI 0x00000004
#define GL_COLOR_BUFFER_BIT2_QCOM 0x00000004
#define GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT 0x00000004
#define GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT_ARB 0x00000004
#define GL_GEOMETRY_SHADER_BIT 0x00000004
#define GL_GEOMETRY_SHADER_BIT_EXT 0x00000004
#define GL_GEOMETRY_SHADER_BIT_OES 0x00000004
#define GL_LINE_BIT 0x00000004
#define GL_NEGATE_BIT_ATI 0x00000004
#define GL_QUERY_STENCIL_FAIL_EVENT_BIT_AMD 0x00000004
#define GL_UNIFORM_BARRIER_BIT 0x00000004
#define GL_UNIFORM_BARRIER_BIT_EXT 0x00000004
#define GL_VERTEX23_BIT_PGI 0x00000004
#define GL_BIAS_BIT_ATI 0x00000008
#define GL_COLOR_BUFFER_BIT3_QCOM 0x00000008
#define GL_CONTEXT_FLAG_NO_ERROR_BIT 0x00000008
#define GL_CONTEXT_FLAG_NO_ERROR_BIT_KHR 0x00000008
#define GL_HALF_BIT_ATI 0x00000008
#define GL_POLYGON_BIT 0x00000008
#define GL_QUERY_DEPTH_BOUNDS_FAIL_EVENT_BIT_AMD 0x00000008
#define GL_TESS_CONTROL_SHADER_BIT 0x00000008
#define GL_TESS_CONTROL_SHADER_BIT_EXT 0x00000008
#define GL_TESS_CONTROL_SHADER_BIT_OES 0x00000008
#define GL_TEXTURE_FETCH_BARRIER_BIT 0x00000008
#define GL_TEXTURE_FETCH_BARRIER_BIT_EXT 0x00000008
#define GL_VERTEX4_BIT_PGI 0x00000008
#define GL_COLOR_BUFFER_BIT4_QCOM 0x00000010
#define GL_CONTEXT_FLAG_PROTECTED_CONTENT_BIT_EXT 0x00000010
#define GL_POLYGON_STIPPLE_BIT 0x00000010
#define GL_QUARTER_BIT_ATI 0x00000010
#define GL_SHADER_GLOBAL_ACCESS_BARRIER_BIT_NV 0x00000010
#define GL_TESS_EVALUATION_SHADER_BIT 0x00000010
#define GL_TESS_EVALUATION_SHADER_BIT_EXT 0x00000010
#define GL_TESS_EVALUATION_SHADER_BIT_OES 0x00000010
#define GL_COLOR_BUFFER_BIT5_QCOM 0x00000020
#define GL_COMPUTE_SHADER_BIT 0x00000020
#define GL_EIGHTH_BIT_ATI 0x00000020
#define GL_PIXEL_MODE_BIT 0x00000020
#define GL_SHADER_IMAGE_ACCESS_BARRIER_BIT 0x00000020
#define GL_SHADER_IMAGE_ACCESS_BARRIER_BIT_EXT 0x00000020
#define GL_COLOR_BUFFER_BIT6_QCOM 0x00000040
#define GL_COMMAND_BARRIER_BIT 0x00000040
#define GL_COMMAND_BARRIER_BIT_EXT 0x00000040
#define GL_LIGHTING_BIT 0x00000040
#define GL_SATURATE_BIT_ATI 0x00000040
#define GL_COLOR_BUFFER_BIT7_QCOM 0x00000080
#define GL_FOG_BIT 0x00000080
#define GL_PIXEL_BUFFER_BARRIER_BIT 0x00000080
#define GL_PIXEL_BUFFER_BARRIER_BIT_EXT 0x00000080
#define GL_DEPTH_BUFFER_BIT 0x00000100
#define GL_DEPTH_BUFFER_BIT0_QCOM 0x00000100
#define GL_TEXTURE_UPDATE_BARRIER_BIT 0x00000100
#define GL_TEXTURE_UPDATE_BARRIER_BIT_EXT 0x00000100
#define GL_ACCUM_BUFFER_BIT 0x00000200
#define GL_BUFFER_UPDATE_BARRIER_BIT 0x00000200
#define GL_BUFFER_UPDATE_BARRIER_BIT_EXT 0x00000200
#define GL_DEPTH_BUFFER_BIT1_QCOM 0x00000200
#define GL_DEPTH_BUFFER_BIT2_QCOM 0x00000400
#define GL_FRAMEBUFFER_BARRIER_BIT 0x00000400
#define GL_FRAMEBUFFER_BARRIER_BIT_EXT 0x00000400
#define GL_STENCIL_BUFFER_BIT 0x00000400
#define GL_DEPTH_BUFFER_BIT3_QCOM 0x00000800
#define GL_TRANSFORM_FEEDBACK_BARRIER_BIT 0x00000800
#define GL_TRANSFORM_FEEDBACK_BARRIER_BIT_EXT 0x00000800
#define GL_VIEWPORT_BIT 0x00000800
#define GL_ATOMIC_COUNTER_BARRIER_BIT 0x00001000
#define GL_ATOMIC_COUNTER_BARRIER_BIT_EXT 0x00001000
#define GL_DEPTH_BUFFER_BIT4_QCOM 0x00001000
#define GL_TRANSFORM_BIT 0x00001000
#define GL_DEPTH_BUFFER_BIT5_QCOM 0x00002000
#define GL_ENABLE_BIT 0x00002000
#define GL_SHADER_STORAGE_BARRIER_BIT 0x00002000
#define GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT 0x00004000
#define GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT_EXT 0x00004000
#define GL_COLOR_BUFFER_BIT 0x00004000
#define GL_DEPTH_BUFFER_BIT6_QCOM 0x00004000
#define GL_COVERAGE_BUFFER_BIT_NV 0x00008000
#define GL_DEPTH_BUFFER_BIT7_QCOM 0x00008000
#define GL_HINT_BIT 0x00008000
#define GL_QUERY_BUFFER_BARRIER_BIT 0x00008000
#define GL_LINES 0x0001
#define GL_MAP_READ_BIT 0x0001
#define GL_MAP_READ_BIT_EXT 0x0001
#define GL_NOP_COMMAND_NV 0x0001
#define GL_RESTART_SUN 0x0001
#define GL_TRACE_OPERATIONS_BIT_MESA 0x0001
#define GL_COLOR3_BIT_PGI 0x00010000
#define GL_EVAL_BIT 0x00010000
#define GL_FONT_X_MIN_BOUNDS_BIT_NV 0x00010000
#define GL_STENCIL_BUFFER_BIT0_QCOM 0x00010000
#define GL_DRAW_ELEMENTS_COMMAND_NV 0x0002
#define GL_LINE_LOOP 0x0002
#define GL_MAP_WRITE_BIT 0x0002
#define GL_MAP_WRITE_BIT_EXT 0x0002
#define GL_REPLACE_MIDDLE_SUN 0x0002
#define GL_TRACE_PRIMITIVES_BIT_MESA 0x0002
#define GL_COLOR4_BIT_PGI 0x00020000
#define GL_FONT_Y_MIN_BOUNDS_BIT_NV 0x00020000
#define GL_LIST_BIT 0x00020000
#define GL_STENCIL_BUFFER_BIT1_QCOM 0x00020000
#define GL_DRAW_ARRAYS_COMMAND_NV 0x0003
#define GL_LINE_STRIP 0x0003
#define GL_REPLACE_OLDEST_SUN 0x0003
#define GL_DRAW_ELEMENTS_STRIP_COMMAND_NV 0x0004
#define GL_MAP_INVALIDATE_RANGE_BIT 0x0004
#define GL_MAP_INVALIDATE_RANGE_BIT_EXT 0x0004
#define GL_TRACE_ARRAYS_BIT_MESA 0x0004
#define GL_TRIANGLES 0x0004
#define GL_EDGEFLAG_BIT_PGI 0x00040000
#define GL_FONT_X_MAX_BOUNDS_BIT_NV 0x00040000
#define GL_STENCIL_BUFFER_BIT2_QCOM 0x00040000
#define GL_TEXTURE_BIT 0x00040000
#define GL_DRAW_ARRAYS_STRIP_COMMAND_NV 0x0005
#define GL_TRIANGLE_STRIP 0x0005
#define GL_DRAW_ELEMENTS_INSTANCED_COMMAND_NV 0x0006
#define GL_TRIANGLE_FAN 0x0006
#define GL_DRAW_ARRAYS_INSTANCED_COMMAND_NV 0x0007
#define GL_QUADS 0x0007
#define GL_QUADS_EXT 0x0007
#define GL_QUADS_OES 0x0007
#define GL_ELEMENT_ADDRESS_COMMAND_NV 0x0008
#define GL_MAP_INVALIDATE_BUFFER_BIT 0x0008
#define GL_MAP_INVALIDATE_BUFFER_BIT_EXT 0x0008
#define GL_QUAD_STRIP 0x0008
#define GL_TRACE_TEXTURES_BIT_MESA 0x0008
#define GL_FONT_Y_MAX_BOUNDS_BIT_NV 0x00080000
#define GL_INDEX_BIT_PGI 0x00080000
#define GL_SCISSOR_BIT 0x00080000
#define GL_STENCIL_BUFFER_BIT3_QCOM 0x00080000
#define GL_ATTRIBUTE_ADDRESS_COMMAND_NV 0x0009
#define GL_POLYGON 0x0009
#define GL_LINES_ADJACENCY 0x000A
#define GL_LINES_ADJACENCY_ARB 0x000A
#define GL_LINES_ADJACENCY_EXT 0x000A
#define GL_LINES_ADJACENCY_OES 0x000A
#define GL_UNIFORM_ADDRESS_COMMAND_NV 0x000A
#define GL_BLEND_COLOR_COMMAND_NV 0x000B
#define GL_LINE_STRIP_ADJACENCY 0x000B
#define GL_LINE_STRIP_ADJACENCY_ARB 0x000B
#define GL_LINE_STRIP_ADJACENCY_EXT 0x000B
#define GL_LINE_STRIP_ADJACENCY_OES 0x000B
#define GL_STENCIL_REF_COMMAND_NV 0x000C
#define GL_TRIANGLES_ADJACENCY 0x000C
#define GL_TRIANGLES_ADJACENCY_ARB 0x000C
#define GL_TRIANGLES_ADJACENCY_EXT 0x000C
#define GL_TRIANGLES_ADJACENCY_OES 0x000C
#define GL_LINE_WIDTH_COMMAND_NV 0x000D
#define GL_TRIANGLE_STRIP_ADJACENCY 0x000D
#define GL_TRIANGLE_STRIP_ADJACENCY_ARB 0x000D
#define GL_TRIANGLE_STRIP_ADJACENCY_EXT 0x000D
#define GL_TRIANGLE_STRIP_ADJACENCY_OES 0x000D
#define GL_PATCHES 0x000E
#define GL_PATCHES_EXT 0x000E
#define GL_PATCHES_OES 0x000E
#define GL_POLYGON_OFFSET_COMMAND_NV 0x000E
#define GL_ALPHA_REF_COMMAND_NV 0x000F
#define GL_MAP_FLUSH_EXPLICIT_BIT 0x0010
#define GL_MAP_FLUSH_EXPLICIT_BIT_EXT 0x0010
#define GL_TRACE_PIXELS_BIT_MESA 0x0010
#define GL_VIEWPORT_COMMAND_NV 0x0010
#define GL_FONT_UNITS_PER_EM_BIT_NV 0x00100000
#define GL_MAT_AMBIENT_BIT_PGI 0x00100000
#define GL_STENCIL_BUFFER_BIT4_QCOM 0x00100000
#define GL_SCISSOR_COMMAND_NV 0x0011
#define GL_FRONT_FACE_COMMAND_NV 0x0012
#define GL_MAP_UNSYNCHRONIZED_BIT 0x0020
#define GL_MAP_UNSYNCHRONIZED_BIT_EXT 0x0020
#define GL_TRACE_ERRORS_BIT_MESA 0x0020
#define GL_FONT_ASCENDER_BIT_NV 0x00200000
#define GL_MAT_AMBIENT_AND_DIFFUSE_BIT_PGI 0x00200000
#define GL_STENCIL_BUFFER_BIT5_QCOM 0x00200000
#define GL_MAP_PERSISTENT_BIT 0x0040
#define GL_MAP_PERSISTENT_BIT_EXT 0x0040
#define GL_FONT_DESCENDER_BIT_NV 0x00400000
#define GL_MAT_DIFFUSE_BIT_PGI 0x00400000
#define GL_STENCIL_BUFFER_BIT6_QCOM 0x00400000
#define GL_MAP_COHERENT_BIT 0x0080
#define GL_MAP_COHERENT_BIT_EXT 0x0080
#define GL_FONT_HEIGHT_BIT_NV 0x00800000
#define GL_MAT_EMISSION_BIT_PGI 0x00800000
#define GL_STENCIL_BUFFER_BIT7_QCOM 0x00800000
#define GL_BOLD_BIT_NV 0x01
#define GL_GLYPH_WIDTH_BIT_NV 0x01
#define GL_ACCUM 0x0100
#define GL_DYNAMIC_STORAGE_BIT 0x0100
#define GL_DYNAMIC_STORAGE_BIT_EXT 0x0100
#define GL_FONT_MAX_ADVANCE_WIDTH_BIT_NV 0x01000000
#define GL_MAT_COLOR_INDEXES_BIT_PGI 0x01000000
#define GL_MULTISAMPLE_BUFFER_BIT0_QCOM 0x01000000
#define GL_LOAD 0x0101
#define GL_RETURN 0x0102
#define GL_MULT 0x0103
#define GL_ADD 0x0104
#define GL_GLYPH_HEIGHT_BIT_NV 0x02
#define GL_ITALIC_BIT_NV 0x02
#define GL_MOVE_TO_NV 0x02
#define GL_CLIENT_STORAGE_BIT 0x0200
#define GL_CLIENT_STORAGE_BIT_EXT 0x0200
#define GL_NEVER 0x0200
#define GL_FONT_MAX_ADVANCE_HEIGHT_BIT_NV 0x02000000
#define GL_MAT_SHININESS_BIT_PGI 0x02000000
#define GL_MULTISAMPLE_BUFFER_BIT1_QCOM 0x02000000
#define GL_LESS 0x0201
#define GL_EQUAL 0x0202
#define GL_LEQUAL 0x0203
#define GL_GREATER 0x0204
#define GL_NOTEQUAL 0x0205
#define GL_GEQUAL 0x0206
#define GL_ALWAYS 0x0207
#define GL_RELATIVE_MOVE_TO_NV 0x03
#define GL_SRC_COLOR 0x0300
#define GL_ONE_MINUS_SRC_COLOR 0x0301
#define GL_SRC_ALPHA 0x0302
#define GL_ONE_MINUS_SRC_ALPHA 0x0303
#define GL_DST_ALPHA 0x0304
#define GL_ONE_MINUS_DST_ALPHA 0x0305
#define GL_DST_COLOR 0x0306
#define GL_ONE_MINUS_DST_COLOR 0x0307
#define GL_SRC_ALPHA_SATURATE 0x0308
#define GL_SRC_ALPHA_SATURATE_EXT 0x0308
#define GL_GLYPH_HORIZONTAL_BEARING_X_BIT_NV 0x04
#define GL_LINE_TO_NV 0x04
#define GL_FRONT_LEFT 0x0400
#define GL_SPARSE_STORAGE_BIT_ARB 0x0400
#define GL_FONT_UNDERLINE_POSITION_BIT_NV 0x04000000
#define GL_MAT_SPECULAR_BIT_PGI 0x04000000
#define GL_MULTISAMPLE_BUFFER_BIT2_QCOM 0x04000000
#define GL_FRONT_RIGHT 0x0401
#define GL_BACK_LEFT 0x0402
#define GL_BACK_RIGHT 0x0403
#define GL_FRONT 0x0404
#define GL_BACK 0x0405
#define GL_LEFT 0x0406
#define GL_RIGHT 0x0407
#define GL_FRONT_AND_BACK 0x0408
#define GL_AUX0 0x0409
#define GL_AUX1 0x040A
#define GL_AUX2 0x040B
#define GL_AUX3 0x040C
#define GL_RELATIVE_LINE_TO_NV 0x05
#define GL_INVALID_ENUM 0x0500
#define GL_INVALID_VALUE 0x0501
#define GL_INVALID_OPERATION 0x0502
#define GL_STACK_OVERFLOW 0x0503
#define GL_STACK_OVERFLOW_KHR 0x0503
#define GL_STACK_UNDERFLOW 0x0504
#define GL_STACK_UNDERFLOW_KHR 0x0504
#define GL_OUT_OF_MEMORY 0x0505
#define GL_INVALID_FRAMEBUFFER_OPERATION 0x0506
#define GL_INVALID_FRAMEBUFFER_OPERATION_EXT 0x0506
#define GL_INVALID_FRAMEBUFFER_OPERATION_OES 0x0506
#define GL_CONTEXT_LOST 0x0507
#define GL_CONTEXT_LOST_KHR 0x0507
#define GL_HORIZONTAL_LINE_TO_NV 0x06
#define GL_2D 0x0600
#define GL_3D 0x0601
#define GL_3D_COLOR 0x0602
#define GL_3D_COLOR_TEXTURE 0x0603
#define GL_4D_COLOR_TEXTURE 0x0604
#define GL_RELATIVE_HORIZONTAL_LINE_TO_NV 0x07
#define GL_PASS_THROUGH_TOKEN 0x0700
#define GL_POINT_TOKEN 0x0701
#define GL_LINE_TOKEN 0x0702
#define GL_POLYGON_TOKEN 0x0703
#define GL_BITMAP_TOKEN 0x0704
#define GL_DRAW_PIXEL_TOKEN 0x0705
#define GL_COPY_PIXEL_TOKEN 0x0706
#define GL_LINE_RESET_TOKEN 0x0707
#define GL_GLYPH_HORIZONTAL_BEARING_Y_BIT_NV 0x08
#define GL_VERTICAL_LINE_TO_NV 0x08
#define GL_EXP 0x0800
#define GL_LGPU_SEPARATE_STORAGE_BIT_NVX 0x0800
#define GL_PER_GPU_STORAGE_BIT_NV 0x0800
#define GL_FONT_UNDERLINE_THICKNESS_BIT_NV 0x08000000
#define GL_MULTISAMPLE_BUFFER_BIT3_QCOM 0x08000000
#define GL_NORMAL_BIT_PGI 0x08000000
#define GL_EXP2 0x0801
#define GL_RELATIVE_VERTICAL_LINE_TO_NV 0x09
#define GL_CW 0x0900
#define GL_CCW 0x0901
#define GL_QUADRATIC_CURVE_TO_NV 0x0A
#define GL_COEFF 0x0A00
#define GL_ORDER 0x0A01
#define GL_DOMAIN 0x0A02
#define GL_RELATIVE_QUADRATIC_CURVE_TO_NV 0x0B
#define GL_CURRENT_COLOR 0x0B00
#define GL_CURRENT_INDEX 0x0B01
#define GL_CURRENT_NORMAL 0x0B02
#define GL_CURRENT_TEXTURE_COORDS 0x0B03
#define GL_CURRENT_RASTER_COLOR 0x0B04
#define GL_CURRENT_RASTER_INDEX 0x0B05
#define GL_CURRENT_RASTER_TEXTURE_COORDS 0x0B06
#define GL_CURRENT_RASTER_POSITION 0x0B07
#define GL_CURRENT_RASTER_POSITION_VALID 0x0B08
#define GL_CURRENT_RASTER_DISTANCE 0x0B09
#define GL_POINT_SMOOTH 0x0B10
#define GL_POINT_SIZE 0x0B11
#define GL_POINT_SIZE_RANGE 0x0B12
#define GL_SMOOTH_POINT_SIZE_RANGE 0x0B12
#define GL_POINT_SIZE_GRANULARITY 0x0B13
#define GL_SMOOTH_POINT_SIZE_GRANULARITY 0x0B13
#define GL_LINE_SMOOTH 0x0B20
#define GL_LINE_WIDTH 0x0B21
#define GL_LINE_WIDTH_RANGE 0x0B22
#define GL_SMOOTH_LINE_WIDTH_RANGE 0x0B22
#define GL_LINE_WIDTH_GRANULARITY 0x0B23
#define GL_SMOOTH_LINE_WIDTH_GRANULARITY 0x0B23
#define GL_LINE_STIPPLE 0x0B24
#define GL_LINE_STIPPLE_PATTERN 0x0B25
#define GL_LINE_STIPPLE_REPEAT 0x0B26
#define GL_LIST_MODE 0x0B30
#define GL_MAX_LIST_NESTING 0x0B31
#define GL_LIST_BASE 0x0B32
#define GL_LIST_INDEX 0x0B33
#define GL_POLYGON_MODE 0x0B40
#define GL_POLYGON_MODE_NV 0x0B40
#define GL_POLYGON_SMOOTH 0x0B41
#define GL_POLYGON_STIPPLE 0x0B42
#define GL_EDGE_FLAG 0x0B43
#define GL_CULL_FACE 0x0B44
#define GL_CULL_FACE_MODE 0x0B45
#define GL_FRONT_FACE 0x0B46
#define GL_LIGHTING 0x0B50
#define GL_LIGHT_MODEL_LOCAL_VIEWER 0x0B51
#define GL_LIGHT_MODEL_TWO_SIDE 0x0B52
#define GL_LIGHT_MODEL_AMBIENT 0x0B53
#define GL_SHADE_MODEL 0x0B54
#define GL_COLOR_MATERIAL_FACE 0x0B55
#define GL_COLOR_MATERIAL_PARAMETER 0x0B56
#define GL_COLOR_MATERIAL 0x0B57
#define GL_FOG 0x0B60
#define GL_FOG_INDEX 0x0B61
#define GL_FOG_DENSITY 0x0B62
#define GL_FOG_START 0x0B63
#define GL_FOG_END 0x0B64
#define GL_FOG_MODE 0x0B65
#define GL_FOG_COLOR 0x0B66
#define GL_DEPTH_RANGE 0x0B70
#define GL_DEPTH_TEST 0x0B71
#define GL_DEPTH_WRITEMASK 0x0B72
#define GL_DEPTH_CLEAR_VALUE 0x0B73
#define GL_DEPTH_FUNC 0x0B74
#define GL_ACCUM_CLEAR_VALUE 0x0B80
#define GL_STENCIL_TEST 0x0B90
#define GL_STENCIL_CLEAR_VALUE 0x0B91
#define GL_STENCIL_FUNC 0x0B92
#define GL_STENCIL_VALUE_MASK 0x0B93
#define GL_STENCIL_FAIL 0x0B94
#define GL_STENCIL_PASS_DEPTH_FAIL 0x0B95
#define GL_STENCIL_PASS_DEPTH_PASS 0x0B96
#define GL_STENCIL_REF 0x0B97
#define GL_STENCIL_WRITEMASK 0x0B98
#define GL_MATRIX_MODE 0x0BA0
#define GL_NORMALIZE 0x0BA1
#define GL_VIEWPORT 0x0BA2
#define GL_MODELVIEW0_STACK_DEPTH_EXT 0x0BA3
#define GL_MODELVIEW_STACK_DEPTH 0x0BA3
#define GL_PATH_MODELVIEW_STACK_DEPTH_NV 0x0BA3
#define GL_PATH_PROJECTION_STACK_DEPTH_NV 0x0BA4
#define GL_PROJECTION_STACK_DEPTH 0x0BA4
#define GL_TEXTURE_STACK_DEPTH 0x0BA5
#define GL_MODELVIEW0_MATRIX_EXT 0x0BA6
#define GL_MODELVIEW_MATRIX 0x0BA6
#define GL_PATH_MODELVIEW_MATRIX_NV 0x0BA6
#define GL_PATH_PROJECTION_MATRIX_NV 0x0BA7
#define GL_PROJECTION_MATRIX 0x0BA7
#define GL_TEXTURE_MATRIX 0x0BA8
#define GL_ATTRIB_STACK_DEPTH 0x0BB0
#define GL_CLIENT_ATTRIB_STACK_DEPTH 0x0BB1
#define GL_ALPHA_TEST 0x0BC0
#define GL_ALPHA_TEST_QCOM 0x0BC0
#define GL_ALPHA_TEST_FUNC 0x0BC1
#define GL_ALPHA_TEST_FUNC_QCOM 0x0BC1
#define GL_ALPHA_TEST_REF 0x0BC2
#define GL_ALPHA_TEST_REF_QCOM 0x0BC2
#define GL_DITHER 0x0BD0
#define GL_BLEND_DST 0x0BE0
#define GL_BLEND_SRC 0x0BE1
#define GL_BLEND 0x0BE2
#define GL_LOGIC_OP_MODE 0x0BF0
#define GL_INDEX_LOGIC_OP 0x0BF1
#define GL_LOGIC_OP 0x0BF1
#define GL_COLOR_LOGIC_OP 0x0BF2
#define GL_CUBIC_CURVE_TO_NV 0x0C
#define GL_AUX_BUFFERS 0x0C00
#define GL_DRAW_BUFFER 0x0C01
#define GL_DRAW_BUFFER_EXT 0x0C01
#define GL_READ_BUFFER 0x0C02
#define GL_READ_BUFFER_EXT 0x0C02
#define GL_READ_BUFFER_NV 0x0C02
#define GL_SCISSOR_BOX 0x0C10
#define GL_SCISSOR_TEST 0x0C11
#define GL_INDEX_CLEAR_VALUE 0x0C20
#define GL_INDEX_WRITEMASK 0x0C21
#define GL_COLOR_CLEAR_VALUE 0x0C22
#define GL_COLOR_WRITEMASK 0x0C23
#define GL_INDEX_MODE 0x0C30
#define GL_RGBA_MODE 0x0C31
#define GL_DOUBLEBUFFER 0x0C32
#define GL_STEREO 0x0C33
#define GL_RENDER_MODE 0x0C40
#define GL_PERSPECTIVE_CORRECTION_HINT 0x0C50
#define GL_POINT_SMOOTH_HINT 0x0C51
#define GL_LINE_SMOOTH_HINT 0x0C52
#define GL_POLYGON_SMOOTH_HINT 0x0C53
#define GL_FOG_HINT 0x0C54
#define GL_TEXTURE_GEN_S 0x0C60
#define GL_TEXTURE_GEN_T 0x0C61
#define GL_TEXTURE_GEN_R 0x0C62
#define GL_TEXTURE_GEN_Q 0x0C63
#define GL_PIXEL_MAP_I_TO_I 0x0C70
#define GL_PIXEL_MAP_S_TO_S 0x0C71
#define GL_PIXEL_MAP_I_TO_R 0x0C72
#define GL_PIXEL_MAP_I_TO_G 0x0C73
#define GL_PIXEL_MAP_I_TO_B 0x0C74
#define GL_PIXEL_MAP_I_TO_A 0x0C75
#define GL_PIXEL_MAP_R_TO_R 0x0C76
#define GL_PIXEL_MAP_G_TO_G 0x0C77
#define GL_PIXEL_MAP_B_TO_B 0x0C78
#define GL_PIXEL_MAP_A_TO_A 0x0C79
#define GL_PIXEL_MAP_I_TO_I_SIZE 0x0CB0
#define GL_PIXEL_MAP_S_TO_S_SIZE 0x0CB1
#define GL_PIXEL_MAP_I_TO_R_SIZE 0x0CB2
#define GL_PIXEL_MAP_I_TO_G_SIZE 0x0CB3
#define GL_PIXEL_MAP_I_TO_B_SIZE 0x0CB4
#define GL_PIXEL_MAP_I_TO_A_SIZE 0x0CB5
#define GL_PIXEL_MAP_R_TO_R_SIZE 0x0CB6
#define GL_PIXEL_MAP_G_TO_G_SIZE 0x0CB7
#define GL_PIXEL_MAP_B_TO_B_SIZE 0x0CB8
#define GL_PIXEL_MAP_A_TO_A_SIZE 0x0CB9
#define GL_UNPACK_SWAP_BYTES 0x0CF0
#define GL_UNPACK_LSB_FIRST 0x0CF1
#define GL_UNPACK_ROW_LENGTH 0x0CF2
#define GL_UNPACK_ROW_LENGTH_EXT 0x0CF2
#define GL_UNPACK_SKIP_ROWS 0x0CF3
#define GL_UNPACK_SKIP_ROWS_EXT 0x0CF3
#define GL_UNPACK_SKIP_PIXELS 0x0CF4
#define GL_UNPACK_SKIP_PIXELS_EXT 0x0CF4
#define GL_UNPACK_ALIGNMENT 0x0CF5
#define GL_RELATIVE_CUBIC_CURVE_TO_NV 0x0D
#define GL_PACK_SWAP_BYTES 0x0D00
#define GL_PACK_LSB_FIRST 0x0D01
#define GL_PACK_ROW_LENGTH 0x0D02
#define GL_PACK_SKIP_ROWS 0x0D03
#define GL_PACK_SKIP_PIXELS 0x0D04
#define GL_PACK_ALIGNMENT 0x0D05
#define GL_MAP_COLOR 0x0D10
#define GL_MAP_STENCIL 0x0D11
#define GL_INDEX_SHIFT 0x0D12
#define GL_INDEX_OFFSET 0x0D13
#define GL_RED_SCALE 0x0D14
#define GL_RED_BIAS 0x0D15
#define GL_ZOOM_X 0x0D16
#define GL_ZOOM_Y 0x0D17
#define GL_GREEN_SCALE 0x0D18
#define GL_GREEN_BIAS 0x0D19
#define GL_BLUE_SCALE 0x0D1A
#define GL_BLUE_BIAS 0x0D1B
#define GL_ALPHA_SCALE 0x0D1C
#define GL_ALPHA_BIAS 0x0D1D
#define GL_DEPTH_SCALE 0x0D1E
#define GL_DEPTH_BIAS 0x0D1F
#define GL_MAX_EVAL_ORDER 0x0D30
#define GL_MAX_LIGHTS 0x0D31
#define GL_MAX_CLIP_DISTANCES 0x0D32
#define GL_MAX_CLIP_DISTANCES_APPLE 0x0D32
#define GL_MAX_CLIP_DISTANCES_EXT 0x0D32
#define GL_MAX_CLIP_PLANES 0x0D32
#define GL_MAX_CLIP_PLANES_IMG 0x0D32
#define GL_MAX_TEXTURE_SIZE 0x0D33
#define GL_MAX_PIXEL_MAP_TABLE 0x0D34
#define GL_MAX_ATTRIB_STACK_DEPTH 0x0D35
#define GL_MAX_MODELVIEW_STACK_DEPTH 0x0D36
#define GL_PATH_MAX_MODELVIEW_STACK_DEPTH_NV 0x0D36
#define GL_MAX_NAME_STACK_DEPTH 0x0D37
#define GL_MAX_PROJECTION_STACK_DEPTH 0x0D38
#define GL_PATH_MAX_PROJECTION_STACK_DEPTH_NV 0x0D38
#define GL_MAX_TEXTURE_STACK_DEPTH 0x0D39
#define GL_MAX_VIEWPORT_DIMS 0x0D3A
#define GL_MAX_CLIENT_ATTRIB_STACK_DEPTH 0x0D3B
#define GL_SUBPIXEL_BITS 0x0D50
#define GL_INDEX_BITS 0x0D51
#define GL_RED_BITS 0x0D52
#define GL_GREEN_BITS 0x0D53
#define GL_BLUE_BITS 0x0D54
#define GL_ALPHA_BITS 0x0D55
#define GL_DEPTH_BITS 0x0D56
#define GL_STENCIL_BITS 0x0D57
#define GL_ACCUM_RED_BITS 0x0D58
#define GL_ACCUM_GREEN_BITS 0x0D59
#define GL_ACCUM_BLUE_BITS 0x0D5A
#define GL_ACCUM_ALPHA_BITS 0x0D5B
#define GL_NAME_STACK_DEPTH 0x0D70
#define GL_AUTO_NORMAL 0x0D80
#define GL_MAP1_COLOR_4 0x0D90
#define GL_MAP1_INDEX 0x0D91
#define GL_MAP1_NORMAL 0x0D92
#define GL_MAP1_TEXTURE_COORD_1 0x0D93
#define GL_MAP1_TEXTURE_COORD_2 0x0D94
#define GL_MAP1_TEXTURE_COORD_3 0x0D95
#define GL_MAP1_TEXTURE_COORD_4 0x0D96
#define GL_MAP1_VERTEX_3 0x0D97
#define GL_MAP1_VERTEX_4 0x0D98
#define GL_MAP2_COLOR_4 0x0DB0
#define GL_MAP2_INDEX 0x0DB1
#define GL_MAP2_NORMAL 0x0DB2
#define GL_MAP2_TEXTURE_COORD_1 0x0DB3
#define GL_MAP2_TEXTURE_COORD_2 0x0DB4
#define GL_MAP2_TEXTURE_COORD_3 0x0DB5
#define GL_MAP2_TEXTURE_COORD_4 0x0DB6
#define GL_MAP2_VERTEX_3 0x0DB7
#define GL_MAP2_VERTEX_4 0x0DB8
#define GL_MAP1_GRID_DOMAIN 0x0DD0
#define GL_MAP1_GRID_SEGMENTS 0x0DD1
#define GL_MAP2_GRID_DOMAIN 0x0DD2
#define GL_MAP2_GRID_SEGMENTS 0x0DD3
#define GL_TEXTURE_1D 0x0DE0
#define GL_TEXTURE_2D 0x0DE1
#define GL_FEEDBACK_BUFFER_POINTER 0x0DF0
#define GL_FEEDBACK_BUFFER_SIZE 0x0DF1
#define GL_FEEDBACK_BUFFER_TYPE 0x0DF2
#define GL_SELECTION_BUFFER_POINTER 0x0DF3
#define GL_SELECTION_BUFFER_SIZE 0x0DF4
#define GL_SMOOTH_QUADRATIC_CURVE_TO_NV 0x0E
#define GL_RELATIVE_SMOOTH_QUADRATIC_CURVE_TO_NV 0x0F
#define GL_KTX_BACK_REGION 0x1
#define GL_GLYPH_HORIZONTAL_BEARING_ADVANCE_BIT_NV 0x10
#define GL_SMOOTH_CUBIC_CURVE_TO_NV 0x10
#define GL_GLYPH_HAS_KERNING_BIT_NV 0x100
#define GL_TEXTURE_WIDTH 0x1000
#define GL_FONT_HAS_KERNING_BIT_NV 0x10000000
#define GL_MULTISAMPLE_BUFFER_BIT4_QCOM 0x10000000
#define GL_TEXCOORD1_BIT_PGI 0x10000000
#define GL_TEXTURE_HEIGHT 0x1001
#define GL_TEXTURE_COMPONENTS 0x1003
#define GL_TEXTURE_INTERNAL_FORMAT 0x1003
#define GL_TEXTURE_BORDER_COLOR 0x1004
#define GL_TEXTURE_BORDER_COLOR_EXT 0x1004
#define GL_TEXTURE_BORDER_COLOR_NV 0x1004
#define GL_TEXTURE_BORDER_COLOR_OES 0x1004
#define GL_TEXTURE_BORDER 0x1005
#define GL_TEXTURE_TARGET 0x1006
#define GL_RELATIVE_SMOOTH_CUBIC_CURVE_TO_NV 0x11
#define GL_DONT_CARE 0x1100
#define GL_FASTEST 0x1101
#define GL_NICEST 0x1102
#define GL_SMALL_CCW_ARC_TO_NV 0x12
#define GL_AMBIENT 0x1200
#define GL_DIFFUSE 0x1201
#define GL_SPECULAR 0x1202
#define GL_POSITION 0x1203
#define GL_SPOT_DIRECTION 0x1204
#define GL_SPOT_EXPONENT 0x1205
#define GL_SPOT_CUTOFF 0x1206
#define GL_CONSTANT_ATTENUATION 0x1207
#define GL_LINEAR_ATTENUATION 0x1208
#define GL_QUADRATIC_ATTENUATION 0x1209
#define GL_RELATIVE_SMALL_CCW_ARC_TO_NV 0x13
#define GL_COMPILE 0x1300
#define GL_COMPILE_AND_EXECUTE 0x1301
#define GL_SMALL_CW_ARC_TO_NV 0x14
#define GL_BYTE 0x1400
#define GL_UNSIGNED_BYTE 0x1401
#define GL_SHORT 0x1402
#define GL_UNSIGNED_SHORT 0x1403
#define GL_INT 0x1404
#define GL_UNSIGNED_INT 0x1405
#define GL_FLOAT 0x1406
#define GL_2_BYTES 0x1407
#define GL_2_BYTES_NV 0x1407
#define GL_3_BYTES 0x1408
#define GL_3_BYTES_NV 0x1408
#define GL_4_BYTES 0x1409
#define GL_4_BYTES_NV 0x1409
#define GL_DOUBLE 0x140A
#define GL_DOUBLE_EXT 0x140A
#define GL_HALF_APPLE 0x140B
#define GL_HALF_FLOAT 0x140B
#define GL_HALF_FLOAT_ARB 0x140B
#define GL_HALF_FLOAT_NV 0x140B
#define GL_FIXED 0x140C
#define GL_FIXED_OES 0x140C
#define GL_INT64_ARB 0x140E
#define GL_INT64_NV 0x140E
#define GL_UNSIGNED_INT64_ARB 0x140F
#define GL_UNSIGNED_INT64_NV 0x140F
#define GL_RELATIVE_SMALL_CW_ARC_TO_NV 0x15
#define GL_CLEAR 0x1500
#define GL_AND 0x1501
#define GL_AND_REVERSE 0x1502
#define GL_COPY 0x1503
#define GL_AND_INVERTED 0x1504
#define GL_NOOP 0x1505
#define GL_XOR 0x1506
#define GL_XOR_NV 0x1506
#define GL_OR 0x1507
#define GL_NOR 0x1508
#define GL_EQUIV 0x1509
#define GL_INVERT 0x150A
#define GL_OR_REVERSE 0x150B
#define GL_COPY_INVERTED 0x150C
#define GL_OR_INVERTED 0x150D
#define GL_NAND 0x150E
#define GL_SET 0x150F
#define GL_LARGE_CCW_ARC_TO_NV 0x16
#define GL_EMISSION 0x1600
#define GL_SHININESS 0x1601
#define GL_AMBIENT_AND_DIFFUSE 0x1602
#define GL_COLOR_INDEXES 0x1603
#define GL_RELATIVE_LARGE_CCW_ARC_TO_NV 0x17
#define GL_MODELVIEW 0x1700
#define GL_MODELVIEW0_ARB 0x1700
#define GL_MODELVIEW0_EXT 0x1700
#define GL_PATH_MODELVIEW_NV 0x1700
#define GL_PATH_PROJECTION_NV 0x1701
#define GL_PROJECTION 0x1701
#define GL_TEXTURE 0x1702
#define GL_LARGE_CW_ARC_TO_NV 0x18
#define GL_COLOR 0x1800
#define GL_COLOR_EXT 0x1800
#define GL_DEPTH 0x1801
#define GL_DEPTH_EXT 0x1801
#define GL_STENCIL 0x1802
#define GL_STENCIL_EXT 0x1802
#define GL_RELATIVE_LARGE_CW_ARC_TO_NV 0x19
#define GL_COLOR_INDEX 0x1900
#define GL_STENCIL_INDEX 0x1901
#define GL_STENCIL_INDEX_OES 0x1901
#define GL_DEPTH_COMPONENT 0x1902
#define GL_RED 0x1903
#define GL_RED_EXT 0x1903
#define GL_RED_NV 0x1903
#define GL_GREEN 0x1904
#define GL_GREEN_NV 0x1904
#define GL_BLUE 0x1905
#define GL_BLUE_NV 0x1905
#define GL_ALPHA 0x1906
#define GL_RGB 0x1907
#define GL_RGBA 0x1908
#define GL_LUMINANCE 0x1909
#define GL_LUMINANCE_ALPHA 0x190A
#define GL_RASTER_POSITION_UNCLIPPED_IBM 0x19262
#define GL_CONIC_CURVE_TO_NV 0x1A
#define GL_BITMAP 0x1A00
#define GL_PREFER_DOUBLEBUFFER_HINT_PGI 0x1A1F8
#define GL_CONSERVE_MEMORY_HINT_PGI 0x1A1FD
#define GL_RECLAIM_MEMORY_HINT_PGI 0x1A1FE
#define GL_NATIVE_GRAPHICS_HANDLE_PGI 0x1A202
#define GL_NATIVE_GRAPHICS_BEGIN_HINT_PGI 0x1A203
#define GL_NATIVE_GRAPHICS_END_HINT_PGI 0x1A204
#define GL_ALWAYS_FAST_HINT_PGI 0x1A20C
#define GL_ALWAYS_SOFT_HINT_PGI 0x1A20D
#define GL_ALLOW_DRAW_OBJ_HINT_PGI 0x1A20E
#define GL_ALLOW_DRAW_WIN_HINT_PGI 0x1A20F
#define GL_ALLOW_DRAW_FRG_HINT_PGI 0x1A210
#define GL_ALLOW_DRAW_MEM_HINT_PGI 0x1A211
#define GL_STRICT_DEPTHFUNC_HINT_PGI 0x1A216
#define GL_STRICT_LIGHTING_HINT_PGI 0x1A217
#define GL_STRICT_SCISSOR_HINT_PGI 0x1A218
#define GL_FULL_STIPPLE_HINT_PGI 0x1A219
#define GL_CLIP_NEAR_HINT_PGI 0x1A220
#define GL_CLIP_FAR_HINT_PGI 0x1A221
#define GL_WIDE_LINE_HINT_PGI 0x1A222
#define GL_BACK_NORMALS_HINT_PGI 0x1A223
#define GL_VERTEX_DATA_HINT_PGI 0x1A22A
#define GL_VERTEX_CONSISTENT_HINT_PGI 0x1A22B
#define GL_MATERIAL_SIDE_HINT_PGI 0x1A22C
#define GL_MAX_VERTEX_HINT_PGI 0x1A22D
#define GL_RELATIVE_CONIC_CURVE_TO_NV 0x1B
#define GL_POINT 0x1B00
#define GL_POINT_NV 0x1B00
#define GL_LINE 0x1B01
#define GL_LINE_NV 0x1B01
#define GL_FILL 0x1B02
#define GL_FILL_NV 0x1B02
#define GL_RENDER 0x1C00
#define GL_FEEDBACK 0x1C01
#define GL_SELECT 0x1C02
#define GL_FLAT 0x1D00
#define GL_SMOOTH 0x1D01
#define GL_KEEP 0x1E00
#define GL_REPLACE 0x1E01
#define GL_INCR 0x1E02
#define GL_DECR 0x1E03
#define GL_VENDOR 0x1F00
#define GL_RENDERER 0x1F01
#define GL_VERSION 0x1F02
#define GL_EXTENSIONS 0x1F03
#define GL_KTX_Z_REGION 0x2
#define GL_GLYPH_VERTICAL_BEARING_X_BIT_NV 0x20
#define GL_EXTERNAL_STORAGE_BIT_NVX 0x2000
#define GL_S 0x2000
#define GL_FONT_NUM_GLYPH_INDICES_BIT_NV 0x20000000
#define GL_MULTISAMPLE_BIT 0x20000000
#define GL_MULTISAMPLE_BIT_3DFX 0x20000000
#define GL_MULTISAMPLE_BIT_ARB 0x20000000
#define GL_MULTISAMPLE_BIT_EXT 0x20000000
#define GL_MULTISAMPLE_BUFFER_BIT5_QCOM 0x20000000
#define GL_TEXCOORD2_BIT_PGI 0x20000000
#define GL_T 0x2001
#define GL_R 0x2002
#define GL_Q 0x2003
#define GL_MODULATE 0x2100
#define GL_DECAL 0x2101
#define GL_TEXTURE_ENV_MODE 0x2200
#define GL_TEXTURE_ENV_COLOR 0x2201
#define GL_TEXTURE_ENV 0x2300
#define GL_EYE_LINEAR 0x2400
#define GL_EYE_LINEAR_NV 0x2400
#define GL_OBJECT_LINEAR 0x2401
#define GL_OBJECT_LINEAR_NV 0x2401
#define GL_SPHERE_MAP 0x2402
#define GL_TEXTURE_GEN_MODE 0x2500
#define GL_TEXTURE_GEN_MODE_OES 0x2500
#define GL_OBJECT_PLANE 0x2501
#define GL_EYE_PLANE 0x2502
#define GL_NEAREST 0x2600
#define GL_LINEAR 0x2601
#define GL_NEAREST_MIPMAP_NEAREST 0x2700
#define GL_LINEAR_MIPMAP_NEAREST 0x2701
#define GL_NEAREST_MIPMAP_LINEAR 0x2702
#define GL_LINEAR_MIPMAP_LINEAR 0x2703
#define GL_TEXTURE_MAG_FILTER 0x2800
#define GL_TEXTURE_MIN_FILTER 0x2801
#define GL_TEXTURE_WRAP_S 0x2802
#define GL_TEXTURE_WRAP_T 0x2803
#define GL_CLAMP 0x2900
#define GL_REPEAT 0x2901
#define GL_POLYGON_OFFSET_UNITS 0x2A00
#define GL_POLYGON_OFFSET_POINT 0x2A01
#define GL_POLYGON_OFFSET_POINT_NV 0x2A01
#define GL_POLYGON_OFFSET_LINE 0x2A02
#define GL_POLYGON_OFFSET_LINE_NV 0x2A02
#define GL_R3_G3_B2 0x2A10
#define GL_V2F 0x2A20
#define GL_V3F 0x2A21
#define GL_C4UB_V2F 0x2A22
#define GL_C4UB_V3F 0x2A23
#define GL_C3F_V3F 0x2A24
#define GL_N3F_V3F 0x2A25
#define GL_C4F_N3F_V3F 0x2A26
#define GL_T2F_V3F 0x2A27
#define GL_T4F_V4F 0x2A28
#define GL_T2F_C4UB_V3F 0x2A29
#define GL_T2F_C3F_V3F 0x2A2A
#define GL_T2F_N3F_V3F 0x2A2B
#define GL_T2F_C4F_N3F_V3F 0x2A2C
#define GL_T4F_C4F_N3F_V4F 0x2A2D
#define GL_KTX_STENCIL_REGION 0x3
#define GL_CLIP_DISTANCE0 0x3000
#define GL_CLIP_DISTANCE0_APPLE 0x3000
#define GL_CLIP_DISTANCE0_EXT 0x3000
#define GL_CLIP_PLANE0 0x3000
#define GL_CLIP_PLANE0_IMG 0x3000
#define GL_CLIP_DISTANCE1 0x3001
#define GL_CLIP_DISTANCE1_APPLE 0x3001
#define GL_CLIP_DISTANCE1_EXT 0x3001
#define GL_CLIP_PLANE1 0x3001
#define GL_CLIP_PLANE1_IMG 0x3001
#define GL_CLIP_DISTANCE2 0x3002
#define GL_CLIP_DISTANCE2_APPLE 0x3002
#define GL_CLIP_DISTANCE2_EXT 0x3002
#define GL_CLIP_PLANE2 0x3002
#define GL_CLIP_PLANE2_IMG 0x3002
#define GL_CLIP_DISTANCE3 0x3003
#define GL_CLIP_DISTANCE3_APPLE 0x3003
#define GL_CLIP_DISTANCE3_EXT 0x3003
#define GL_CLIP_PLANE3 0x3003
#define GL_CLIP_PLANE3_IMG 0x3003
#define GL_CLIP_DISTANCE4 0x3004
#define GL_CLIP_DISTANCE4_APPLE 0x3004
#define GL_CLIP_DISTANCE4_EXT 0x3004
#define GL_CLIP_PLANE4 0x3004
#define GL_CLIP_PLANE4_IMG 0x3004
#define GL_CLIP_DISTANCE5 0x3005
#define GL_CLIP_DISTANCE5_APPLE 0x3005
#define GL_CLIP_DISTANCE5_EXT 0x3005
#define GL_CLIP_PLANE5 0x3005
#define GL_CLIP_PLANE5_IMG 0x3005
#define GL_CLIP_DISTANCE6 0x3006
#define GL_CLIP_DISTANCE6_APPLE 0x3006
#define GL_CLIP_DISTANCE6_EXT 0x3006
#define GL_CLIP_DISTANCE7 0x3007
#define GL_CLIP_DISTANCE7_APPLE 0x3007
#define GL_CLIP_DISTANCE7_EXT 0x3007
#define GL_GLYPH_VERTICAL_BEARING_Y_BIT_NV 0x40
#define GL_LIGHT0 0x4000
#define GL_MULTISAMPLE_BUFFER_BIT6_QCOM 0x40000000
#define GL_TEXCOORD3_BIT_PGI 0x40000000
#define GL_LIGHT1 0x4001
#define GL_LIGHT2 0x4002
#define GL_LIGHT3 0x4003
#define GL_LIGHT4 0x4004
#define GL_LIGHT5 0x4005
#define GL_LIGHT6 0x4006
#define GL_LIGHT7 0x4007
#define GL_GLYPH_VERTICAL_BEARING_ADVANCE_BIT_NV 0x80
#define GL_ABGR_EXT 0x8000
#define GL_MULTISAMPLE_BUFFER_BIT7_QCOM 0x80000000
#define GL_TEXCOORD4_BIT_PGI 0x80000000
#define GL_CONSTANT_COLOR 0x8001
#define GL_CONSTANT_COLOR_EXT 0x8001
#define GL_ONE_MINUS_CONSTANT_COLOR 0x8002
#define GL_ONE_MINUS_CONSTANT_COLOR_EXT 0x8002
#define GL_CONSTANT_ALPHA 0x8003
#define GL_CONSTANT_ALPHA_EXT 0x8003
#define GL_ONE_MINUS_CONSTANT_ALPHA 0x8004
#define GL_ONE_MINUS_CONSTANT_ALPHA_EXT 0x8004
#define GL_BLEND_COLOR 0x8005
#define GL_BLEND_COLOR_EXT 0x8005
#define GL_FUNC_ADD 0x8006
#define GL_FUNC_ADD_EXT 0x8006
#define GL_FUNC_ADD_OES 0x8006
#define GL_MIN 0x8007
#define GL_MIN_EXT 0x8007
#define GL_MAX 0x8008
#define GL_MAX_EXT 0x8008
#define GL_BLEND_EQUATION 0x8009
#define GL_BLEND_EQUATION_EXT 0x8009
#define GL_BLEND_EQUATION_OES 0x8009
#define GL_BLEND_EQUATION_RGB 0x8009
#define GL_BLEND_EQUATION_RGB_EXT 0x8009
#define GL_BLEND_EQUATION_RGB_OES 0x8009
#define GL_FUNC_SUBTRACT 0x800A
#define GL_FUNC_SUBTRACT_EXT 0x800A
#define GL_FUNC_SUBTRACT_OES 0x800A
#define GL_FUNC_REVERSE_SUBTRACT 0x800B
#define GL_FUNC_REVERSE_SUBTRACT_EXT 0x800B
#define GL_FUNC_REVERSE_SUBTRACT_OES 0x800B
#define GL_CMYK_EXT 0x800C
#define GL_CMYKA_EXT 0x800D
#define GL_PACK_CMYK_HINT_EXT 0x800E
#define GL_UNPACK_CMYK_HINT_EXT 0x800F
#define GL_CONVOLUTION_1D 0x8010
#define GL_CONVOLUTION_1D_EXT 0x8010
#define GL_CONVOLUTION_2D 0x8011
#define GL_CONVOLUTION_2D_EXT 0x8011
#define GL_SEPARABLE_2D 0x8012
#define GL_SEPARABLE_2D_EXT 0x8012
#define GL_CONVOLUTION_BORDER_MODE 0x8013
#define GL_CONVOLUTION_BORDER_MODE_EXT 0x8013
#define GL_CONVOLUTION_FILTER_SCALE 0x8014
#define GL_CONVOLUTION_FILTER_SCALE_EXT 0x8014
#define GL_CONVOLUTION_FILTER_BIAS 0x8015
#define GL_CONVOLUTION_FILTER_BIAS_EXT 0x8015
#define GL_REDUCE 0x8016
#define GL_REDUCE_EXT 0x8016
#define GL_CONVOLUTION_FORMAT 0x8017
#define GL_CONVOLUTION_FORMAT_EXT 0x8017
#define GL_CONVOLUTION_WIDTH 0x8018
#define GL_CONVOLUTION_WIDTH_EXT 0x8018
#define GL_CONVOLUTION_HEIGHT 0x8019
#define GL_CONVOLUTION_HEIGHT_EXT 0x8019
#define GL_MAX_CONVOLUTION_WIDTH 0x801A
#define GL_MAX_CONVOLUTION_WIDTH_EXT 0x801A
#define GL_MAX_CONVOLUTION_HEIGHT 0x801B
#define GL_MAX_CONVOLUTION_HEIGHT_EXT 0x801B
#define GL_POST_CONVOLUTION_RED_SCALE 0x801C
#define GL_POST_CONVOLUTION_RED_SCALE_EXT 0x801C
#define GL_POST_CONVOLUTION_GREEN_SCALE 0x801D
#define GL_POST_CONVOLUTION_GREEN_SCALE_EXT 0x801D
#define GL_POST_CONVOLUTION_BLUE_SCALE 0x801E
#define GL_POST_CONVOLUTION_BLUE_SCALE_EXT 0x801E
#define GL_POST_CONVOLUTION_ALPHA_SCALE 0x801F
#define GL_POST_CONVOLUTION_ALPHA_SCALE_EXT 0x801F
#define GL_POST_CONVOLUTION_RED_BIAS 0x8020
#define GL_POST_CONVOLUTION_RED_BIAS_EXT 0x8020
#define GL_POST_CONVOLUTION_GREEN_BIAS 0x8021
#define GL_POST_CONVOLUTION_GREEN_BIAS_EXT 0x8021
#define GL_POST_CONVOLUTION_BLUE_BIAS 0x8022
#define GL_POST_CONVOLUTION_BLUE_BIAS_EXT 0x8022
#define GL_POST_CONVOLUTION_ALPHA_BIAS 0x8023
#define GL_POST_CONVOLUTION_ALPHA_BIAS_EXT 0x8023
#define GL_HISTOGRAM 0x8024
#define GL_HISTOGRAM_EXT 0x8024
#define GL_PROXY_HISTOGRAM 0x8025
#define GL_PROXY_HISTOGRAM_EXT 0x8025
#define GL_HISTOGRAM_WIDTH 0x8026
#define GL_HISTOGRAM_WIDTH_EXT 0x8026
#define GL_HISTOGRAM_FORMAT 0x8027
#define GL_HISTOGRAM_FORMAT_EXT 0x8027
#define GL_HISTOGRAM_RED_SIZE 0x8028
#define GL_HISTOGRAM_RED_SIZE_EXT 0x8028
#define GL_HISTOGRAM_GREEN_SIZE 0x8029
#define GL_HISTOGRAM_GREEN_SIZE_EXT 0x8029
#define GL_HISTOGRAM_BLUE_SIZE 0x802A
#define GL_HISTOGRAM_BLUE_SIZE_EXT 0x802A
#define GL_HISTOGRAM_ALPHA_SIZE 0x802B
#define GL_HISTOGRAM_ALPHA_SIZE_EXT 0x802B
#define GL_HISTOGRAM_LUMINANCE_SIZE 0x802C
#define GL_HISTOGRAM_LUMINANCE_SIZE_EXT 0x802C
#define GL_HISTOGRAM_SINK 0x802D
#define GL_HISTOGRAM_SINK_EXT 0x802D
#define GL_MINMAX 0x802E
#define GL_MINMAX_EXT 0x802E
#define GL_MINMAX_FORMAT 0x802F
#define GL_MINMAX_FORMAT_EXT 0x802F
#define GL_MINMAX_SINK 0x8030
#define GL_MINMAX_SINK_EXT 0x8030
#define GL_TABLE_TOO_LARGE 0x8031
#define GL_TABLE_TOO_LARGE_EXT 0x8031
#define GL_UNSIGNED_BYTE_3_3_2 0x8032
#define GL_UNSIGNED_BYTE_3_3_2_EXT 0x8032
#define GL_UNSIGNED_SHORT_4_4_4_4 0x8033
#define GL_UNSIGNED_SHORT_4_4_4_4_EXT 0x8033
#define GL_UNSIGNED_SHORT_5_5_5_1 0x8034
#define GL_UNSIGNED_SHORT_5_5_5_1_EXT 0x8034
#define GL_UNSIGNED_INT_8_8_8_8 0x8035
#define GL_UNSIGNED_INT_8_8_8_8_EXT 0x8035
#define GL_UNSIGNED_INT_10_10_10_2 0x8036
#define GL_UNSIGNED_INT_10_10_10_2_EXT 0x8036
#define GL_POLYGON_OFFSET_EXT 0x8037
#define GL_POLYGON_OFFSET_FILL 0x8037
#define GL_POLYGON_OFFSET_FACTOR 0x8038
#define GL_POLYGON_OFFSET_FACTOR_EXT 0x8038
#define GL_POLYGON_OFFSET_BIAS_EXT 0x8039
#define GL_RESCALE_NORMAL 0x803A
#define GL_RESCALE_NORMAL_EXT 0x803A
#define GL_ALPHA4 0x803B
#define GL_ALPHA4_EXT 0x803B
#define GL_ALPHA8 0x803C
#define GL_ALPHA8_EXT 0x803C
#define GL_ALPHA8_OES 0x803C
#define GL_ALPHA12 0x803D
#define GL_ALPHA12_EXT 0x803D
#define GL_ALPHA16 0x803E
#define GL_ALPHA16_EXT 0x803E
#define GL_LUMINANCE4 0x803F
#define GL_LUMINANCE4_EXT 0x803F
#define GL_LUMINANCE8 0x8040
#define GL_LUMINANCE8_EXT 0x8040
#define GL_LUMINANCE8_OES 0x8040
#define GL_LUMINANCE12 0x8041
#define GL_LUMINANCE12_EXT 0x8041
#define GL_LUMINANCE16 0x8042
#define GL_LUMINANCE16_EXT 0x8042
#define GL_LUMINANCE4_ALPHA4 0x8043
#define GL_LUMINANCE4_ALPHA4_EXT 0x8043
#define GL_LUMINANCE4_ALPHA4_OES 0x8043
#define GL_LUMINANCE6_ALPHA2 0x8044
#define GL_LUMINANCE6_ALPHA2_EXT 0x8044
#define GL_LUMINANCE8_ALPHA8 0x8045
#define GL_LUMINANCE8_ALPHA8_EXT 0x8045
#define GL_LUMINANCE8_ALPHA8_OES 0x8045
#define GL_LUMINANCE12_ALPHA4 0x8046
#define GL_LUMINANCE12_ALPHA4_EXT 0x8046
#define GL_LUMINANCE12_ALPHA12 0x8047
#define GL_LUMINANCE12_ALPHA12_EXT 0x8047
#define GL_LUMINANCE16_ALPHA16 0x8048
#define GL_LUMINANCE16_ALPHA16_EXT 0x8048
#define GL_INTENSITY 0x8049
#define GL_INTENSITY_EXT 0x8049
#define GL_INTENSITY4 0x804A
#define GL_INTENSITY4_EXT 0x804A
#define GL_INTENSITY8 0x804B
#define GL_INTENSITY8_EXT 0x804B
#define GL_INTENSITY12 0x804C
#define GL_INTENSITY12_EXT 0x804C
#define GL_INTENSITY16 0x804D
#define GL_INTENSITY16_EXT 0x804D
#define GL_RGB2_EXT 0x804E
#define GL_RGB4 0x804F
#define GL_RGB4_EXT 0x804F
#define GL_RGB5 0x8050
#define GL_RGB5_EXT 0x8050
#define GL_RGB8 0x8051
#define GL_RGB8_EXT 0x8051
#define GL_RGB8_OES 0x8051
#define GL_RGB10 0x8052
#define GL_RGB10_EXT 0x8052
#define GL_RGB12 0x8053
#define GL_RGB12_EXT 0x8053
#define GL_RGB16 0x8054
#define GL_RGB16_EXT 0x8054
#define GL_RGBA2 0x8055
#define GL_RGBA2_EXT 0x8055
#define GL_RGBA4 0x8056
#define GL_RGBA4_EXT 0x8056
#define GL_RGBA4_OES 0x8056
#define GL_RGB5_A1 0x8057
#define GL_RGB5_A1_EXT 0x8057
#define GL_RGB5_A1_OES 0x8057
#define GL_RGBA8 0x8058
#define GL_RGBA8_EXT 0x8058
#define GL_RGBA8_OES 0x8058
#define GL_RGB10_A2 0x8059
#define GL_RGB10_A2_EXT 0x8059
#define GL_RGBA12 0x805A
#define GL_RGBA12_EXT 0x805A
#define GL_RGBA16 0x805B
#define GL_RGBA16_EXT 0x805B
#define GL_TEXTURE_RED_SIZE 0x805C
#define GL_TEXTURE_RED_SIZE_EXT 0x805C
#define GL_TEXTURE_GREEN_SIZE 0x805D
#define GL_TEXTURE_GREEN_SIZE_EXT 0x805D
#define GL_TEXTURE_BLUE_SIZE 0x805E
#define GL_TEXTURE_BLUE_SIZE_EXT 0x805E
#define GL_TEXTURE_ALPHA_SIZE 0x805F
#define GL_TEXTURE_ALPHA_SIZE_EXT 0x805F
#define GL_TEXTURE_LUMINANCE_SIZE 0x8060
#define GL_TEXTURE_LUMINANCE_SIZE_EXT 0x8060
#define GL_TEXTURE_INTENSITY_SIZE 0x8061
#define GL_TEXTURE_INTENSITY_SIZE_EXT 0x8061
#define GL_REPLACE_EXT 0x8062
#define GL_PROXY_TEXTURE_1D 0x8063
#define GL_PROXY_TEXTURE_1D_EXT 0x8063
#define GL_PROXY_TEXTURE_2D 0x8064
#define GL_PROXY_TEXTURE_2D_EXT 0x8064
#define GL_TEXTURE_TOO_LARGE_EXT 0x8065
#define GL_TEXTURE_PRIORITY 0x8066
#define GL_TEXTURE_PRIORITY_EXT 0x8066
#define GL_TEXTURE_RESIDENT 0x8067
#define GL_TEXTURE_RESIDENT_EXT 0x8067
#define GL_TEXTURE_1D_BINDING_EXT 0x8068
#define GL_TEXTURE_BINDING_1D 0x8068
#define GL_TEXTURE_2D_BINDING_EXT 0x8069
#define GL_TEXTURE_BINDING_2D 0x8069
#define GL_TEXTURE_3D_BINDING_EXT 0x806A
#define GL_TEXTURE_3D_BINDING_OES 0x806A
#define GL_TEXTURE_BINDING_3D 0x806A
#define GL_TEXTURE_BINDING_3D_OES 0x806A
#define GL_PACK_SKIP_IMAGES 0x806B
#define GL_PACK_SKIP_IMAGES_EXT 0x806B
#define GL_PACK_IMAGE_HEIGHT 0x806C
#define GL_PACK_IMAGE_HEIGHT_EXT 0x806C
#define GL_UNPACK_SKIP_IMAGES 0x806D
#define GL_UNPACK_SKIP_IMAGES_EXT 0x806D
#define GL_UNPACK_IMAGE_HEIGHT 0x806E
#define GL_UNPACK_IMAGE_HEIGHT_EXT 0x806E
#define GL_TEXTURE_3D 0x806F
#define GL_TEXTURE_3D_EXT 0x806F
#define GL_TEXTURE_3D_OES 0x806F
#define GL_PROXY_TEXTURE_3D 0x8070
#define GL_PROXY_TEXTURE_3D_EXT 0x8070
#define GL_TEXTURE_DEPTH 0x8071
#define GL_TEXTURE_DEPTH_EXT 0x8071
#define GL_TEXTURE_WRAP_R 0x8072
#define GL_TEXTURE_WRAP_R_EXT 0x8072
#define GL_TEXTURE_WRAP_R_OES 0x8072
#define GL_MAX_3D_TEXTURE_SIZE 0x8073
#define GL_MAX_3D_TEXTURE_SIZE_EXT 0x8073
#define GL_MAX_3D_TEXTURE_SIZE_OES 0x8073
#define GL_VERTEX_ARRAY 0x8074
#define GL_VERTEX_ARRAY_EXT 0x8074
#define GL_VERTEX_ARRAY_KHR 0x8074
#define GL_NORMAL_ARRAY 0x8075
#define GL_NORMAL_ARRAY_EXT 0x8075
#define GL_COLOR_ARRAY 0x8076
#define GL_COLOR_ARRAY_EXT 0x8076
#define GL_INDEX_ARRAY 0x8077
#define GL_INDEX_ARRAY_EXT 0x8077
#define GL_TEXTURE_COORD_ARRAY 0x8078
#define GL_TEXTURE_COORD_ARRAY_EXT 0x8078
#define GL_EDGE_FLAG_ARRAY 0x8079
#define GL_EDGE_FLAG_ARRAY_EXT 0x8079
#define GL_VERTEX_ARRAY_SIZE 0x807A
#define GL_VERTEX_ARRAY_SIZE_EXT 0x807A
#define GL_VERTEX_ARRAY_TYPE 0x807B
#define GL_VERTEX_ARRAY_TYPE_EXT 0x807B
#define GL_VERTEX_ARRAY_STRIDE 0x807C
#define GL_VERTEX_ARRAY_STRIDE_EXT 0x807C
#define GL_VERTEX_ARRAY_COUNT_EXT 0x807D
#define GL_NORMAL_ARRAY_TYPE 0x807E
#define GL_NORMAL_ARRAY_TYPE_EXT 0x807E
#define GL_NORMAL_ARRAY_STRIDE 0x807F
#define GL_NORMAL_ARRAY_STRIDE_EXT 0x807F
#define GL_NORMAL_ARRAY_COUNT_EXT 0x8080
#define GL_COLOR_ARRAY_SIZE 0x8081
#define GL_COLOR_ARRAY_SIZE_EXT 0x8081
#define GL_COLOR_ARRAY_TYPE 0x8082
#define GL_COLOR_ARRAY_TYPE_EXT 0x8082
#define GL_COLOR_ARRAY_STRIDE 0x8083
#define GL_COLOR_ARRAY_STRIDE_EXT 0x8083
#define GL_COLOR_ARRAY_COUNT_EXT 0x8084
#define GL_INDEX_ARRAY_TYPE 0x8085
#define GL_INDEX_ARRAY_TYPE_EXT 0x8085
#define GL_INDEX_ARRAY_STRIDE 0x8086
#define GL_INDEX_ARRAY_STRIDE_EXT 0x8086
#define GL_INDEX_ARRAY_COUNT_EXT 0x8087
#define GL_TEXTURE_COORD_ARRAY_SIZE 0x8088
#define GL_TEXTURE_COORD_ARRAY_SIZE_EXT 0x8088
#define GL_TEXTURE_COORD_ARRAY_TYPE 0x8089
#define GL_TEXTURE_COORD_ARRAY_TYPE_EXT 0x8089
#define GL_TEXTURE_COORD_ARRAY_STRIDE 0x808A
#define GL_TEXTURE_COORD_ARRAY_STRIDE_EXT 0x808A
#define GL_TEXTURE_COORD_ARRAY_COUNT_EXT 0x808B
#define GL_EDGE_FLAG_ARRAY_STRIDE 0x808C
#define GL_EDGE_FLAG_ARRAY_STRIDE_EXT 0x808C
#define GL_EDGE_FLAG_ARRAY_COUNT_EXT 0x808D
#define GL_VERTEX_ARRAY_POINTER 0x808E
#define GL_VERTEX_ARRAY_POINTER_EXT 0x808E
#define GL_NORMAL_ARRAY_POINTER 0x808F
#define GL_NORMAL_ARRAY_POINTER_EXT 0x808F
#define GL_COLOR_ARRAY_POINTER 0x8090
#define GL_COLOR_ARRAY_POINTER_EXT 0x8090
#define GL_INDEX_ARRAY_POINTER 0x8091
#define GL_INDEX_ARRAY_POINTER_EXT 0x8091
#define GL_TEXTURE_COORD_ARRAY_POINTER 0x8092
#define GL_TEXTURE_COORD_ARRAY_POINTER_EXT 0x8092
#define GL_EDGE_FLAG_ARRAY_POINTER 0x8093
#define GL_EDGE_FLAG_ARRAY_POINTER_EXT 0x8093
#define GL_INTERLACE_SGIX 0x8094
#define GL_DETAIL_TEXTURE_2D_SGIS 0x8095
#define GL_DETAIL_TEXTURE_2D_BINDING_SGIS 0x8096
#define GL_LINEAR_DETAIL_SGIS 0x8097
#define GL_LINEAR_DETAIL_ALPHA_SGIS 0x8098
#define GL_LINEAR_DETAIL_COLOR_SGIS 0x8099
#define GL_DETAIL_TEXTURE_LEVEL_SGIS 0x809A
#define GL_DETAIL_TEXTURE_MODE_SGIS 0x809B
#define GL_DETAIL_TEXTURE_FUNC_POINTS_SGIS 0x809C
#define GL_MULTISAMPLE 0x809D
#define GL_MULTISAMPLE_ARB 0x809D
#define GL_MULTISAMPLE_EXT 0x809D
#define GL_MULTISAMPLE_SGIS 0x809D
#define GL_SAMPLE_ALPHA_TO_COVERAGE 0x809E
#define GL_SAMPLE_ALPHA_TO_COVERAGE_ARB 0x809E
#define GL_SAMPLE_ALPHA_TO_MASK_EXT 0x809E
#define GL_SAMPLE_ALPHA_TO_MASK_SGIS 0x809E
#define GL_SAMPLE_ALPHA_TO_ONE 0x809F
#define GL_SAMPLE_ALPHA_TO_ONE_ARB 0x809F
#define GL_SAMPLE_ALPHA_TO_ONE_EXT 0x809F
#define GL_SAMPLE_ALPHA_TO_ONE_SGIS 0x809F
#define GL_SAMPLE_COVERAGE 0x80A0
#define GL_SAMPLE_COVERAGE_ARB 0x80A0
#define GL_SAMPLE_MASK_EXT 0x80A0
#define GL_SAMPLE_MASK_SGIS 0x80A0
#define GL_1PASS_EXT 0x80A1
#define GL_1PASS_SGIS 0x80A1
#define GL_2PASS_0_EXT 0x80A2
#define GL_2PASS_0_SGIS 0x80A2
#define GL_2PASS_1_EXT 0x80A3
#define GL_2PASS_1_SGIS 0x80A3
#define GL_4PASS_0_EXT 0x80A4
#define GL_4PASS_0_SGIS 0x80A4
#define GL_4PASS_1_EXT 0x80A5
#define GL_4PASS_1_SGIS 0x80A5
#define GL_4PASS_2_EXT 0x80A6
#define GL_4PASS_2_SGIS 0x80A6
#define GL_4PASS_3_EXT 0x80A7
#define GL_4PASS_3_SGIS 0x80A7
#define GL_SAMPLE_BUFFERS 0x80A8
#define GL_SAMPLE_BUFFERS_ARB 0x80A8
#define GL_SAMPLE_BUFFERS_EXT 0x80A8
#define GL_SAMPLE_BUFFERS_SGIS 0x80A8
#define GL_SAMPLES 0x80A9
#define GL_SAMPLES_ARB 0x80A9
#define GL_SAMPLES_EXT 0x80A9
#define GL_SAMPLES_SGIS 0x80A9
#define GL_SAMPLE_COVERAGE_VALUE 0x80AA
#define GL_SAMPLE_COVERAGE_VALUE_ARB 0x80AA
#define GL_SAMPLE_MASK_VALUE_EXT 0x80AA
#define GL_SAMPLE_MASK_VALUE_SGIS 0x80AA
#define GL_SAMPLE_COVERAGE_INVERT 0x80AB
#define GL_SAMPLE_COVERAGE_INVERT_ARB 0x80AB
#define GL_SAMPLE_MASK_INVERT_EXT 0x80AB
#define GL_SAMPLE_MASK_INVERT_SGIS 0x80AB
#define GL_SAMPLE_PATTERN_EXT 0x80AC
#define GL_SAMPLE_PATTERN_SGIS 0x80AC
#define GL_LINEAR_SHARPEN_SGIS 0x80AD
#define GL_LINEAR_SHARPEN_ALPHA_SGIS 0x80AE
#define GL_LINEAR_SHARPEN_COLOR_SGIS 0x80AF
#define GL_SHARPEN_TEXTURE_FUNC_POINTS_SGIS 0x80B0
#define GL_COLOR_MATRIX 0x80B1
#define GL_COLOR_MATRIX_SGI 0x80B1
#define GL_COLOR_MATRIX_STACK_DEPTH 0x80B2
#define GL_COLOR_MATRIX_STACK_DEPTH_SGI 0x80B2
#define GL_MAX_COLOR_MATRIX_STACK_DEPTH 0x80B3
#define GL_MAX_COLOR_MATRIX_STACK_DEPTH_SGI 0x80B3
#define GL_POST_COLOR_MATRIX_RED_SCALE 0x80B4
#define GL_POST_COLOR_MATRIX_RED_SCALE_SGI 0x80B4
#define GL_POST_COLOR_MATRIX_GREEN_SCALE 0x80B5
#define GL_POST_COLOR_MATRIX_GREEN_SCALE_SGI 0x80B5
#define GL_POST_COLOR_MATRIX_BLUE_SCALE 0x80B6
#define GL_POST_COLOR_MATRIX_BLUE_SCALE_SGI 0x80B6
#define GL_POST_COLOR_MATRIX_ALPHA_SCALE 0x80B7
#define GL_POST_COLOR_MATRIX_ALPHA_SCALE_SGI 0x80B7
#define GL_POST_COLOR_MATRIX_RED_BIAS 0x80B8
#define GL_POST_COLOR_MATRIX_RED_BIAS_SGI 0x80B8
#define GL_POST_COLOR_MATRIX_GREEN_BIAS 0x80B9
#define GL_POST_COLOR_MATRIX_GREEN_BIAS_SGI 0x80B9
#define GL_POST_COLOR_MATRIX_BLUE_BIAS 0x80BA
#define GL_POST_COLOR_MATRIX_BLUE_BIAS_SGI 0x80BA
#define GL_POST_COLOR_MATRIX_ALPHA_BIAS 0x80BB
#define GL_POST_COLOR_MATRIX_ALPHA_BIAS_SGI 0x80BB
#define GL_TEXTURE_COLOR_TABLE_SGI 0x80BC
#define GL_PROXY_TEXTURE_COLOR_TABLE_SGI 0x80BD
#define GL_TEXTURE_ENV_BIAS_SGIX 0x80BE
#define GL_SHADOW_AMBIENT_SGIX 0x80BF
#define GL_TEXTURE_COMPARE_FAIL_VALUE_ARB 0x80BF
#define GL_BLEND_DST_RGB 0x80C8
#define GL_BLEND_DST_RGB_EXT 0x80C8
#define GL_BLEND_DST_RGB_OES 0x80C8
#define GL_BLEND_SRC_RGB 0x80C9
#define GL_BLEND_SRC_RGB_EXT 0x80C9
#define GL_BLEND_SRC_RGB_OES 0x80C9
#define GL_BLEND_DST_ALPHA 0x80CA
#define GL_BLEND_DST_ALPHA_EXT 0x80CA
#define GL_BLEND_DST_ALPHA_OES 0x80CA
#define GL_BLEND_SRC_ALPHA 0x80CB
#define GL_BLEND_SRC_ALPHA_EXT 0x80CB
#define GL_BLEND_SRC_ALPHA_OES 0x80CB
#define GL_422_EXT 0x80CC
#define GL_422_REV_EXT 0x80CD
#define GL_422_AVERAGE_EXT 0x80CE
#define GL_422_REV_AVERAGE_EXT 0x80CF
#define GL_COLOR_TABLE 0x80D0
#define GL_COLOR_TABLE_SGI 0x80D0
#define GL_POST_CONVOLUTION_COLOR_TABLE 0x80D1
#define GL_POST_CONVOLUTION_COLOR_TABLE_SGI 0x80D1
#define GL_POST_COLOR_MATRIX_COLOR_TABLE 0x80D2
#define GL_POST_COLOR_MATRIX_COLOR_TABLE_SGI 0x80D2
#define GL_PROXY_COLOR_TABLE 0x80D3
#define GL_PROXY_COLOR_TABLE_SGI 0x80D3
#define GL_PROXY_POST_CONVOLUTION_COLOR_TABLE 0x80D4
#define GL_PROXY_POST_CONVOLUTION_COLOR_TABLE_SGI 0x80D4
#define GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE 0x80D5
#define GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE_SGI 0x80D5
#define GL_COLOR_TABLE_SCALE 0x80D6
#define GL_COLOR_TABLE_SCALE_SGI 0x80D6
#define GL_COLOR_TABLE_BIAS 0x80D7
#define GL_COLOR_TABLE_BIAS_SGI 0x80D7
#define GL_COLOR_TABLE_FORMAT 0x80D8
#define GL_COLOR_TABLE_FORMAT_SGI 0x80D8
#define GL_COLOR_TABLE_WIDTH 0x80D9
#define GL_COLOR_TABLE_WIDTH_SGI 0x80D9
#define GL_COLOR_TABLE_RED_SIZE 0x80DA
#define GL_COLOR_TABLE_RED_SIZE_SGI 0x80DA
#define GL_COLOR_TABLE_GREEN_SIZE 0x80DB
#define GL_COLOR_TABLE_GREEN_SIZE_SGI 0x80DB
#define GL_COLOR_TABLE_BLUE_SIZE 0x80DC
#define GL_COLOR_TABLE_BLUE_SIZE_SGI 0x80DC
#define GL_COLOR_TABLE_ALPHA_SIZE 0x80DD
#define GL_COLOR_TABLE_ALPHA_SIZE_SGI 0x80DD
#define GL_COLOR_TABLE_LUMINANCE_SIZE 0x80DE
#define GL_COLOR_TABLE_LUMINANCE_SIZE_SGI 0x80DE
#define GL_COLOR_TABLE_INTENSITY_SIZE 0x80DF
#define GL_COLOR_TABLE_INTENSITY_SIZE_SGI 0x80DF
#define GL_BGR 0x80E0
#define GL_BGR_EXT 0x80E0
#define GL_BGRA 0x80E1
#define GL_BGRA_EXT 0x80E1
#define GL_BGRA_IMG 0x80E1
#define GL_COLOR_INDEX1_EXT 0x80E2
#define GL_COLOR_INDEX2_EXT 0x80E3
#define GL_COLOR_INDEX4_EXT 0x80E4
#define GL_COLOR_INDEX8_EXT 0x80E5
#define GL_COLOR_INDEX12_EXT 0x80E6
#define GL_COLOR_INDEX16_EXT 0x80E7
#define GL_MAX_ELEMENTS_VERTICES 0x80E8
#define GL_MAX_ELEMENTS_VERTICES_EXT 0x80E8
#define GL_MAX_ELEMENTS_INDICES 0x80E9
#define GL_MAX_ELEMENTS_INDICES_EXT 0x80E9
#define GL_PHONG_WIN 0x80EA
#define GL_PHONG_HINT_WIN 0x80EB
#define GL_FOG_SPECULAR_TEXTURE_WIN 0x80EC
#define GL_TEXTURE_INDEX_SIZE_EXT 0x80ED
#define GL_PARAMETER_BUFFER 0x80EE
#define GL_PARAMETER_BUFFER_ARB 0x80EE
#define GL_PARAMETER_BUFFER_BINDING 0x80EF
#define GL_PARAMETER_BUFFER_BINDING_ARB 0x80EF
#define GL_CLIP_VOLUME_CLIPPING_HINT_EXT 0x80F0
#define GL_DUAL_ALPHA4_SGIS 0x8110
#define GL_DUAL_ALPHA8_SGIS 0x8111
#define GL_DUAL_ALPHA12_SGIS 0x8112
#define GL_DUAL_ALPHA16_SGIS 0x8113
#define GL_DUAL_LUMINANCE4_SGIS 0x8114
#define GL_DUAL_LUMINANCE8_SGIS 0x8115
#define GL_DUAL_LUMINANCE12_SGIS 0x8116
#define GL_DUAL_LUMINANCE16_SGIS 0x8117
#define GL_DUAL_INTENSITY4_SGIS 0x8118
#define GL_DUAL_INTENSITY8_SGIS 0x8119
#define GL_DUAL_INTENSITY12_SGIS 0x811A
#define GL_DUAL_INTENSITY16_SGIS 0x811B
#define GL_DUAL_LUMINANCE_ALPHA4_SGIS 0x811C
#define GL_DUAL_LUMINANCE_ALPHA8_SGIS 0x811D
#define GL_QUAD_ALPHA4_SGIS 0x811E
#define GL_QUAD_ALPHA8_SGIS 0x811F
#define GL_QUAD_LUMINANCE4_SGIS 0x8120
#define GL_QUAD_LUMINANCE8_SGIS 0x8121
#define GL_QUAD_INTENSITY4_SGIS 0x8122
#define GL_QUAD_INTENSITY8_SGIS 0x8123
#define GL_DUAL_TEXTURE_SELECT_SGIS 0x8124
#define GL_QUAD_TEXTURE_SELECT_SGIS 0x8125
#define GL_POINT_SIZE_MIN 0x8126
#define GL_POINT_SIZE_MIN_ARB 0x8126
#define GL_POINT_SIZE_MIN_EXT 0x8126
#define GL_POINT_SIZE_MIN_SGIS 0x8126
#define GL_POINT_SIZE_MAX 0x8127
#define GL_POINT_SIZE_MAX_ARB 0x8127
#define GL_POINT_SIZE_MAX_EXT 0x8127
#define GL_POINT_SIZE_MAX_SGIS 0x8127
#define GL_POINT_FADE_THRESHOLD_SIZE 0x8128
#define GL_POINT_FADE_THRESHOLD_SIZE_ARB 0x8128
#define GL_POINT_FADE_THRESHOLD_SIZE_EXT 0x8128
#define GL_POINT_FADE_THRESHOLD_SIZE_SGIS 0x8128
#define GL_DISTANCE_ATTENUATION_EXT 0x8129
#define GL_DISTANCE_ATTENUATION_SGIS 0x8129
#define GL_POINT_DISTANCE_ATTENUATION 0x8129
#define GL_POINT_DISTANCE_ATTENUATION_ARB 0x8129
#define GL_FOG_FUNC_SGIS 0x812A
#define GL_FOG_FUNC_POINTS_SGIS 0x812B
#define GL_MAX_FOG_FUNC_POINTS_SGIS 0x812C
#define GL_CLAMP_TO_BORDER 0x812D
#define GL_CLAMP_TO_BORDER_ARB 0x812D
#define GL_CLAMP_TO_BORDER_EXT 0x812D
#define GL_CLAMP_TO_BORDER_NV 0x812D
#define GL_CLAMP_TO_BORDER_OES 0x812D
#define GL_CLAMP_TO_BORDER_SGIS 0x812D
#define GL_TEXTURE_MULTI_BUFFER_HINT_SGIX 0x812E
#define GL_CLAMP_TO_EDGE 0x812F
#define GL_CLAMP_TO_EDGE_EXT 0x812F
#define GL_CLAMP_TO_EDGE_SGIS 0x812F
#define GL_PACK_SKIP_VOLUMES_SGIS 0x8130
#define GL_PACK_IMAGE_DEPTH_SGIS 0x8131
#define GL_UNPACK_SKIP_VOLUMES_SGIS 0x8132
#define GL_UNPACK_IMAGE_DEPTH_SGIS 0x8133
#define GL_TEXTURE_4D_SGIS 0x8134
#define GL_PROXY_TEXTURE_4D_SGIS 0x8135
#define GL_TEXTURE_4DSIZE_SGIS 0x8136
#define GL_TEXTURE_WRAP_Q_SGIS 0x8137
#define GL_MAX_4D_TEXTURE_SIZE_SGIS 0x8138
#define GL_PIXEL_TEX_GEN_SGIX 0x8139
#define GL_TEXTURE_MIN_LOD 0x813A
#define GL_TEXTURE_MIN_LOD_SGIS 0x813A
#define GL_TEXTURE_MAX_LOD 0x813B
#define GL_TEXTURE_MAX_LOD_SGIS 0x813B
#define GL_TEXTURE_BASE_LEVEL 0x813C
#define GL_TEXTURE_BASE_LEVEL_SGIS 0x813C
#define GL_TEXTURE_MAX_LEVEL 0x813D
#define GL_TEXTURE_MAX_LEVEL_APPLE 0x813D
#define GL_TEXTURE_MAX_LEVEL_SGIS 0x813D
#define GL_PIXEL_TILE_BEST_ALIGNMENT_SGIX 0x813E
#define GL_PIXEL_TILE_CACHE_INCREMENT_SGIX 0x813F
#define GL_PIXEL_TILE_WIDTH_SGIX 0x8140
#define GL_PIXEL_TILE_HEIGHT_SGIX 0x8141
#define GL_PIXEL_TILE_GRID_WIDTH_SGIX 0x8142
#define GL_PIXEL_TILE_GRID_HEIGHT_SGIX 0x8143
#define GL_PIXEL_TILE_GRID_DEPTH_SGIX 0x8144
#define GL_PIXEL_TILE_CACHE_SIZE_SGIX 0x8145
#define GL_FILTER4_SGIS 0x8146
#define GL_TEXTURE_FILTER4_SIZE_SGIS 0x8147
#define GL_SPRITE_SGIX 0x8148
#define GL_SPRITE_MODE_SGIX 0x8149
#define GL_SPRITE_AXIS_SGIX 0x814A
#define GL_SPRITE_TRANSLATION_SGIX 0x814B
#define GL_SPRITE_AXIAL_SGIX 0x814C
#define GL_SPRITE_OBJECT_ALIGNED_SGIX 0x814D
#define GL_SPRITE_EYE_ALIGNED_SGIX 0x814E
#define GL_TEXTURE_4D_BINDING_SGIS 0x814F
#define GL_IGNORE_BORDER_HP 0x8150
#define GL_CONSTANT_BORDER 0x8151
#define GL_CONSTANT_BORDER_HP 0x8151
#define GL_REPLICATE_BORDER 0x8153
#define GL_REPLICATE_BORDER_HP 0x8153
#define GL_CONVOLUTION_BORDER_COLOR 0x8154
#define GL_CONVOLUTION_BORDER_COLOR_HP 0x8154
#define GL_IMAGE_SCALE_X_HP 0x8155
#define GL_IMAGE_SCALE_Y_HP 0x8156
#define GL_IMAGE_TRANSLATE_X_HP 0x8157
#define GL_IMAGE_TRANSLATE_Y_HP 0x8158
#define GL_IMAGE_ROTATE_ANGLE_HP 0x8159
#define GL_IMAGE_ROTATE_ORIGIN_X_HP 0x815A
#define GL_IMAGE_ROTATE_ORIGIN_Y_HP 0x815B
#define GL_IMAGE_MAG_FILTER_HP 0x815C
#define GL_IMAGE_MIN_FILTER_HP 0x815D
#define GL_IMAGE_CUBIC_WEIGHT_HP 0x815E
#define GL_CUBIC_HP 0x815F
#define GL_AVERAGE_HP 0x8160
#define GL_IMAGE_TRANSFORM_2D_HP 0x8161
#define GL_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP 0x8162
#define GL_PROXY_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP 0x8163
#define GL_OCCLUSION_TEST_HP 0x8165
#define GL_OCCLUSION_TEST_RESULT_HP 0x8166
#define GL_TEXTURE_LIGHTING_MODE_HP 0x8167
#define GL_TEXTURE_POST_SPECULAR_HP 0x8168
#define GL_TEXTURE_PRE_SPECULAR_HP 0x8169
#define GL_LINEAR_CLIPMAP_LINEAR_SGIX 0x8170
#define GL_TEXTURE_CLIPMAP_CENTER_SGIX 0x8171
#define GL_TEXTURE_CLIPMAP_FRAME_SGIX 0x8172
#define GL_TEXTURE_CLIPMAP_OFFSET_SGIX 0x8173
#define GL_TEXTURE_CLIPMAP_VIRTUAL_DEPTH_SGIX 0x8174
#define GL_TEXTURE_CLIPMAP_LOD_OFFSET_SGIX 0x8175
#define GL_TEXTURE_CLIPMAP_DEPTH_SGIX 0x8176
#define GL_MAX_CLIPMAP_DEPTH_SGIX 0x8177
#define GL_MAX_CLIPMAP_VIRTUAL_DEPTH_SGIX 0x8178
#define GL_POST_TEXTURE_FILTER_BIAS_SGIX 0x8179
#define GL_POST_TEXTURE_FILTER_SCALE_SGIX 0x817A
#define GL_POST_TEXTURE_FILTER_BIAS_RANGE_SGIX 0x817B
#define GL_POST_TEXTURE_FILTER_SCALE_RANGE_SGIX 0x817C
#define GL_REFERENCE_PLANE_SGIX 0x817D
#define GL_REFERENCE_PLANE_EQUATION_SGIX 0x817E
#define GL_IR_INSTRUMENT1_SGIX 0x817F
#define GL_INSTRUMENT_BUFFER_POINTER_SGIX 0x8180
#define GL_INSTRUMENT_MEASUREMENTS_SGIX 0x8181
#define GL_LIST_PRIORITY_SGIX 0x8182
#define GL_CALLIGRAPHIC_FRAGMENT_SGIX 0x8183
#define GL_PIXEL_TEX_GEN_Q_CEILING_SGIX 0x8184
#define GL_PIXEL_TEX_GEN_Q_ROUND_SGIX 0x8185
#define GL_PIXEL_TEX_GEN_Q_FLOOR_SGIX 0x8186
#define GL_PIXEL_TEX_GEN_ALPHA_REPLACE_SGIX 0x8187
#define GL_PIXEL_TEX_GEN_ALPHA_NO_REPLACE_SGIX 0x8188
#define GL_PIXEL_TEX_GEN_ALPHA_LS_SGIX 0x8189
#define GL_PIXEL_TEX_GEN_ALPHA_MS_SGIX 0x818A
#define GL_FRAMEZOOM_SGIX 0x818B
#define GL_FRAMEZOOM_FACTOR_SGIX 0x818C
#define GL_MAX_FRAMEZOOM_FACTOR_SGIX 0x818D
#define GL_TEXTURE_LOD_BIAS_S_SGIX 0x818E
#define GL_TEXTURE_LOD_BIAS_T_SGIX 0x818F
#define GL_TEXTURE_LOD_BIAS_R_SGIX 0x8190
#define GL_GENERATE_MIPMAP 0x8191
#define GL_GENERATE_MIPMAP_SGIS 0x8191
#define GL_GENERATE_MIPMAP_HINT 0x8192
#define GL_GENERATE_MIPMAP_HINT_SGIS 0x8192
#define GL_GEOMETRY_DEFORMATION_SGIX 0x8194
#define GL_TEXTURE_DEFORMATION_SGIX 0x8195
#define GL_DEFORMATIONS_MASK_SGIX 0x8196
#define GL_MAX_DEFORMATION_ORDER_SGIX 0x8197
#define GL_FOG_OFFSET_SGIX 0x8198
#define GL_FOG_OFFSET_VALUE_SGIX 0x8199
#define GL_TEXTURE_COMPARE_SGIX 0x819A
#define GL_TEXTURE_COMPARE_OPERATOR_SGIX 0x819B
#define GL_TEXTURE_LEQUAL_R_SGIX 0x819C
#define GL_TEXTURE_GEQUAL_R_SGIX 0x819D
#define GL_DEPTH_COMPONENT16 0x81A5
#define GL_DEPTH_COMPONENT16_ARB 0x81A5
#define GL_DEPTH_COMPONENT16_OES 0x81A5
#define GL_DEPTH_COMPONENT16_SGIX 0x81A5
#define GL_DEPTH_COMPONENT24 0x81A6
#define GL_DEPTH_COMPONENT24_ARB 0x81A6
#define GL_DEPTH_COMPONENT24_OES 0x81A6
#define GL_DEPTH_COMPONENT24_SGIX 0x81A6
#define GL_DEPTH_COMPONENT32 0x81A7
#define GL_DEPTH_COMPONENT32_ARB 0x81A7
#define GL_DEPTH_COMPONENT32_OES 0x81A7
#define GL_DEPTH_COMPONENT32_SGIX 0x81A7
#define GL_ARRAY_ELEMENT_LOCK_FIRST_EXT 0x81A8
#define GL_ARRAY_ELEMENT_LOCK_COUNT_EXT 0x81A9
#define GL_CULL_VERTEX_EXT 0x81AA
#define GL_CULL_VERTEX_EYE_POSITION_EXT 0x81AB
#define GL_CULL_VERTEX_OBJECT_POSITION_EXT 0x81AC
#define GL_IUI_V2F_EXT 0x81AD
#define GL_IUI_V3F_EXT 0x81AE
#define GL_IUI_N3F_V2F_EXT 0x81AF
#define GL_IUI_N3F_V3F_EXT 0x81B0
#define GL_T2F_IUI_V2F_EXT 0x81B1
#define GL_T2F_IUI_V3F_EXT 0x81B2
#define GL_T2F_IUI_N3F_V2F_EXT 0x81B3
#define GL_T2F_IUI_N3F_V3F_EXT 0x81B4
#define GL_INDEX_TEST_EXT 0x81B5
#define GL_INDEX_TEST_FUNC_EXT 0x81B6
#define GL_INDEX_TEST_REF_EXT 0x81B7
#define GL_INDEX_MATERIAL_EXT 0x81B8
#define GL_INDEX_MATERIAL_PARAMETER_EXT 0x81B9
#define GL_INDEX_MATERIAL_FACE_EXT 0x81BA
#define GL_YCRCB_422_SGIX 0x81BB
#define GL_YCRCB_444_SGIX 0x81BC
#define GL_WRAP_BORDER_SUN 0x81D4
#define GL_UNPACK_CONSTANT_DATA_SUNX 0x81D5
#define GL_TEXTURE_CONSTANT_DATA_SUNX 0x81D6
#define GL_TRIANGLE_LIST_SUN 0x81D7
#define GL_REPLACEMENT_CODE_SUN 0x81D8
#define GL_GLOBAL_ALPHA_SUN 0x81D9
#define GL_GLOBAL_ALPHA_FACTOR_SUN 0x81DA
#define GL_TEXTURE_COLOR_WRITEMASK_SGIS 0x81EF
#define GL_EYE_DISTANCE_TO_POINT_SGIS 0x81F0
#define GL_OBJECT_DISTANCE_TO_POINT_SGIS 0x81F1
#define GL_EYE_DISTANCE_TO_LINE_SGIS 0x81F2
#define GL_OBJECT_DISTANCE_TO_LINE_SGIS 0x81F3
#define GL_EYE_POINT_SGIS 0x81F4
#define GL_OBJECT_POINT_SGIS 0x81F5
#define GL_EYE_LINE_SGIS 0x81F6
#define GL_OBJECT_LINE_SGIS 0x81F7
#define GL_LIGHT_MODEL_COLOR_CONTROL 0x81F8
#define GL_LIGHT_MODEL_COLOR_CONTROL_EXT 0x81F8
#define GL_SINGLE_COLOR 0x81F9
#define GL_SINGLE_COLOR_EXT 0x81F9
#define GL_SEPARATE_SPECULAR_COLOR 0x81FA
#define GL_SEPARATE_SPECULAR_COLOR_EXT 0x81FA
#define GL_SHARED_TEXTURE_PALETTE_EXT 0x81FB
#define GL_TEXT_FRAGMENT_SHADER_ATI 0x8200
#define GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING 0x8210
#define GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING_EXT 0x8210
#define GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE 0x8211
#define GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT 0x8211
#define GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE 0x8212
#define GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE 0x8213
#define GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE 0x8214
#define GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE 0x8215
#define GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE 0x8216
#define GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE 0x8217
#define GL_FRAMEBUFFER_DEFAULT 0x8218
#define GL_FRAMEBUFFER_UNDEFINED 0x8219
#define GL_FRAMEBUFFER_UNDEFINED_OES 0x8219
#define GL_DEPTH_STENCIL_ATTACHMENT 0x821A
#define GL_MAJOR_VERSION 0x821B
#define GL_MINOR_VERSION 0x821C
#define GL_NUM_EXTENSIONS 0x821D
#define GL_CONTEXT_FLAGS 0x821E
#define GL_BUFFER_IMMUTABLE_STORAGE 0x821F
#define GL_BUFFER_IMMUTABLE_STORAGE_EXT 0x821F
#define GL_BUFFER_STORAGE_FLAGS 0x8220
#define GL_BUFFER_STORAGE_FLAGS_EXT 0x8220
#define GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED 0x8221
#define GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED_OES 0x8221
#define GL_INDEX 0x8222
#define GL_COMPRESSED_RED 0x8225
#define GL_COMPRESSED_RG 0x8226
#define GL_RG 0x8227
#define GL_RG_EXT 0x8227
#define GL_RG_INTEGER 0x8228
#define GL_R8 0x8229
#define GL_R8_EXT 0x8229
#define GL_R16 0x822A
#define GL_R16_EXT 0x822A
#define GL_RG8 0x822B
#define GL_RG8_EXT 0x822B
#define GL_RG16 0x822C
#define GL_RG16_EXT 0x822C
#define GL_R16F 0x822D
#define GL_R16F_EXT 0x822D
#define GL_R32F 0x822E
#define GL_R32F_EXT 0x822E
#define GL_RG16F 0x822F
#define GL_RG16F_EXT 0x822F
#define GL_RG32F 0x8230
#define GL_RG32F_EXT 0x8230
#define GL_R8I 0x8231
#define GL_R8UI 0x8232
#define GL_R16I 0x8233
#define GL_R16UI 0x8234
#define GL_R32I 0x8235
#define GL_R32UI 0x8236
#define GL_RG8I 0x8237
#define GL_RG8UI 0x8238
#define GL_RG16I 0x8239
#define GL_RG16UI 0x823A
#define GL_RG32I 0x823B
#define GL_RG32UI 0x823C
#define GL_SYNC_CL_EVENT_ARB 0x8240
#define GL_SYNC_CL_EVENT_COMPLETE_ARB 0x8241
#define GL_DEBUG_OUTPUT_SYNCHRONOUS 0x8242
#define GL_DEBUG_OUTPUT_SYNCHRONOUS_ARB 0x8242
#define GL_DEBUG_OUTPUT_SYNCHRONOUS_KHR 0x8242
#define GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH 0x8243
#define GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_ARB 0x8243
#define GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_KHR 0x8243
#define GL_DEBUG_CALLBACK_FUNCTION 0x8244
#define GL_DEBUG_CALLBACK_FUNCTION_ARB 0x8244
#define GL_DEBUG_CALLBACK_FUNCTION_KHR 0x8244
#define GL_DEBUG_CALLBACK_USER_PARAM 0x8245
#define GL_DEBUG_CALLBACK_USER_PARAM_ARB 0x8245
#define GL_DEBUG_CALLBACK_USER_PARAM_KHR 0x8245
#define GL_DEBUG_SOURCE_API 0x8246
#define GL_DEBUG_SOURCE_API_ARB 0x8246
#define GL_DEBUG_SOURCE_API_KHR 0x8246
#define GL_DEBUG_SOURCE_WINDOW_SYSTEM 0x8247
#define GL_DEBUG_SOURCE_WINDOW_SYSTEM_ARB 0x8247
#define GL_DEBUG_SOURCE_WINDOW_SYSTEM_KHR 0x8247
#define GL_DEBUG_SOURCE_SHADER_COMPILER 0x8248
#define GL_DEBUG_SOURCE_SHADER_COMPILER_ARB 0x8248
#define GL_DEBUG_SOURCE_SHADER_COMPILER_KHR 0x8248
#define GL_DEBUG_SOURCE_THIRD_PARTY 0x8249
#define GL_DEBUG_SOURCE_THIRD_PARTY_ARB 0x8249
#define GL_DEBUG_SOURCE_THIRD_PARTY_KHR 0x8249
#define GL_DEBUG_SOURCE_APPLICATION 0x824A
#define GL_DEBUG_SOURCE_APPLICATION_ARB 0x824A
#define GL_DEBUG_SOURCE_APPLICATION_KHR 0x824A
#define GL_DEBUG_SOURCE_OTHER 0x824B
#define GL_DEBUG_SOURCE_OTHER_ARB 0x824B
#define GL_DEBUG_SOURCE_OTHER_KHR 0x824B
#define GL_DEBUG_TYPE_ERROR 0x824C
#define GL_DEBUG_TYPE_ERROR_ARB 0x824C
#define GL_DEBUG_TYPE_ERROR_KHR 0x824C
#define GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR 0x824D
#define GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_ARB 0x824D
#define GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_KHR 0x824D
#define GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR 0x824E
#define GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_ARB 0x824E
#define GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_KHR 0x824E
#define GL_DEBUG_TYPE_PORTABILITY 0x824F
#define GL_DEBUG_TYPE_PORTABILITY_ARB 0x824F
#define GL_DEBUG_TYPE_PORTABILITY_KHR 0x824F
#define GL_DEBUG_TYPE_PERFORMANCE 0x8250
#define GL_DEBUG_TYPE_PERFORMANCE_ARB 0x8250
#define GL_DEBUG_TYPE_PERFORMANCE_KHR 0x8250
#define GL_DEBUG_TYPE_OTHER 0x8251
#define GL_DEBUG_TYPE_OTHER_ARB 0x8251
#define GL_DEBUG_TYPE_OTHER_KHR 0x8251
#define GL_LOSE_CONTEXT_ON_RESET 0x8252
#define GL_LOSE_CONTEXT_ON_RESET_ARB 0x8252
#define GL_LOSE_CONTEXT_ON_RESET_EXT 0x8252
#define GL_LOSE_CONTEXT_ON_RESET_KHR 0x8252
#define GL_GUILTY_CONTEXT_RESET 0x8253
#define GL_GUILTY_CONTEXT_RESET_ARB 0x8253
#define GL_GUILTY_CONTEXT_RESET_EXT 0x8253
#define GL_GUILTY_CONTEXT_RESET_KHR 0x8253
#define GL_INNOCENT_CONTEXT_RESET 0x8254
#define GL_INNOCENT_CONTEXT_RESET_ARB 0x8254
#define GL_INNOCENT_CONTEXT_RESET_EXT 0x8254
#define GL_INNOCENT_CONTEXT_RESET_KHR 0x8254
#define GL_UNKNOWN_CONTEXT_RESET 0x8255
#define GL_UNKNOWN_CONTEXT_RESET_ARB 0x8255
#define GL_UNKNOWN_CONTEXT_RESET_EXT 0x8255
#define GL_UNKNOWN_CONTEXT_RESET_KHR 0x8255
#define GL_RESET_NOTIFICATION_STRATEGY 0x8256
#define GL_RESET_NOTIFICATION_STRATEGY_ARB 0x8256
#define GL_RESET_NOTIFICATION_STRATEGY_EXT 0x8256
#define GL_RESET_NOTIFICATION_STRATEGY_KHR 0x8256
#define GL_PROGRAM_BINARY_RETRIEVABLE_HINT 0x8257
#define GL_PROGRAM_SEPARABLE 0x8258
#define GL_PROGRAM_SEPARABLE_EXT 0x8258
#define GL_ACTIVE_PROGRAM 0x8259
#define GL_ACTIVE_PROGRAM_EXT 0x8259 /* for gles2 */
#define GL_PROGRAM_PIPELINE_BINDING 0x825A
#define GL_PROGRAM_PIPELINE_BINDING_EXT 0x825A
#define GL_MAX_VIEWPORTS 0x825B
#define GL_MAX_VIEWPORTS_NV 0x825B
#define GL_MAX_VIEWPORTS_OES 0x825B
#define GL_VIEWPORT_SUBPIXEL_BITS 0x825C
#define GL_VIEWPORT_SUBPIXEL_BITS_EXT 0x825C
#define GL_VIEWPORT_SUBPIXEL_BITS_NV 0x825C
#define GL_VIEWPORT_SUBPIXEL_BITS_OES 0x825C
#define GL_VIEWPORT_BOUNDS_RANGE 0x825D
#define GL_VIEWPORT_BOUNDS_RANGE_EXT 0x825D
#define GL_VIEWPORT_BOUNDS_RANGE_NV 0x825D
#define GL_VIEWPORT_BOUNDS_RANGE_OES 0x825D
#define GL_LAYER_PROVOKING_VERTEX 0x825E
#define GL_LAYER_PROVOKING_VERTEX_EXT 0x825E
#define GL_LAYER_PROVOKING_VERTEX_OES 0x825E
#define GL_VIEWPORT_INDEX_PROVOKING_VERTEX 0x825F
#define GL_VIEWPORT_INDEX_PROVOKING_VERTEX_EXT 0x825F
#define GL_VIEWPORT_INDEX_PROVOKING_VERTEX_NV 0x825F
#define GL_VIEWPORT_INDEX_PROVOKING_VERTEX_OES 0x825F
#define GL_UNDEFINED_VERTEX 0x8260
#define GL_UNDEFINED_VERTEX_EXT 0x8260
#define GL_UNDEFINED_VERTEX_OES 0x8260
#define GL_NO_RESET_NOTIFICATION 0x8261
#define GL_NO_RESET_NOTIFICATION_ARB 0x8261
#define GL_NO_RESET_NOTIFICATION_EXT 0x8261
#define GL_NO_RESET_NOTIFICATION_KHR 0x8261
#define GL_MAX_COMPUTE_SHARED_MEMORY_SIZE 0x8262
#define GL_MAX_COMPUTE_UNIFORM_COMPONENTS 0x8263
#define GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS 0x8264
#define GL_MAX_COMPUTE_ATOMIC_COUNTERS 0x8265
#define GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS 0x8266
#define GL_COMPUTE_WORK_GROUP_SIZE 0x8267
#define GL_DEBUG_TYPE_MARKER 0x8268
#define GL_DEBUG_TYPE_MARKER_KHR 0x8268
#define GL_DEBUG_TYPE_PUSH_GROUP 0x8269
#define GL_DEBUG_TYPE_PUSH_GROUP_KHR 0x8269
#define GL_DEBUG_TYPE_POP_GROUP 0x826A
#define GL_DEBUG_TYPE_POP_GROUP_KHR 0x826A
#define GL_DEBUG_SEVERITY_NOTIFICATION 0x826B
#define GL_DEBUG_SEVERITY_NOTIFICATION_KHR 0x826B
#define GL_MAX_DEBUG_GROUP_STACK_DEPTH 0x826C
#define GL_MAX_DEBUG_GROUP_STACK_DEPTH_KHR 0x826C
#define GL_DEBUG_GROUP_STACK_DEPTH 0x826D
#define GL_DEBUG_GROUP_STACK_DEPTH_KHR 0x826D
#define GL_MAX_UNIFORM_LOCATIONS 0x826E
#define GL_INTERNALFORMAT_SUPPORTED 0x826F
#define GL_INTERNALFORMAT_PREFERRED 0x8270
#define GL_INTERNALFORMAT_RED_SIZE 0x8271
#define GL_INTERNALFORMAT_GREEN_SIZE 0x8272
#define GL_INTERNALFORMAT_BLUE_SIZE 0x8273
#define GL_INTERNALFORMAT_ALPHA_SIZE 0x8274
#define GL_INTERNALFORMAT_DEPTH_SIZE 0x8275
#define GL_INTERNALFORMAT_STENCIL_SIZE 0x8276
#define GL_INTERNALFORMAT_SHARED_SIZE 0x8277
#define GL_INTERNALFORMAT_RED_TYPE 0x8278
#define GL_INTERNALFORMAT_GREEN_TYPE 0x8279
#define GL_INTERNALFORMAT_BLUE_TYPE 0x827A
#define GL_INTERNALFORMAT_ALPHA_TYPE 0x827B
#define GL_INTERNALFORMAT_DEPTH_TYPE 0x827C
#define GL_INTERNALFORMAT_STENCIL_TYPE 0x827D
#define GL_MAX_WIDTH 0x827E
#define GL_MAX_HEIGHT 0x827F
#define GL_MAX_DEPTH 0x8280
#define GL_MAX_LAYERS 0x8281
#define GL_MAX_COMBINED_DIMENSIONS 0x8282
#define GL_COLOR_COMPONENTS 0x8283
#define GL_DEPTH_COMPONENTS 0x8284
#define GL_STENCIL_COMPONENTS 0x8285
#define GL_COLOR_RENDERABLE 0x8286
#define GL_DEPTH_RENDERABLE 0x8287
#define GL_STENCIL_RENDERABLE 0x8288
#define GL_FRAMEBUFFER_RENDERABLE 0x8289
#define GL_FRAMEBUFFER_RENDERABLE_LAYERED 0x828A
#define GL_FRAMEBUFFER_BLEND 0x828B
#define GL_READ_PIXELS 0x828C
#define GL_READ_PIXELS_FORMAT 0x828D
#define GL_READ_PIXELS_TYPE 0x828E
#define GL_TEXTURE_IMAGE_FORMAT 0x828F
#define GL_TEXTURE_IMAGE_TYPE 0x8290
#define GL_GET_TEXTURE_IMAGE_FORMAT 0x8291
#define GL_GET_TEXTURE_IMAGE_TYPE 0x8292
#define GL_MIPMAP 0x8293
#define GL_MANUAL_GENERATE_MIPMAP 0x8294
#define GL_AUTO_GENERATE_MIPMAP 0x8295
#define GL_COLOR_ENCODING 0x8296
#define GL_SRGB_READ 0x8297
#define GL_SRGB_WRITE 0x8298
#define GL_SRGB_DECODE_ARB 0x8299
#define GL_FILTER 0x829A
#define GL_VERTEX_TEXTURE 0x829B
#define GL_TESS_CONTROL_TEXTURE 0x829C
#define GL_TESS_EVALUATION_TEXTURE 0x829D
#define GL_GEOMETRY_TEXTURE 0x829E
#define GL_FRAGMENT_TEXTURE 0x829F
#define GL_COMPUTE_TEXTURE 0x82A0
#define GL_TEXTURE_SHADOW 0x82A1
#define GL_TEXTURE_GATHER 0x82A2
#define GL_TEXTURE_GATHER_SHADOW 0x82A3
#define GL_SHADER_IMAGE_LOAD 0x82A4
#define GL_SHADER_IMAGE_STORE 0x82A5
#define GL_SHADER_IMAGE_ATOMIC 0x82A6
#define GL_IMAGE_TEXEL_SIZE 0x82A7
#define GL_IMAGE_COMPATIBILITY_CLASS 0x82A8
#define GL_IMAGE_PIXEL_FORMAT 0x82A9
#define GL_IMAGE_PIXEL_TYPE 0x82AA
#define GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST 0x82AC
#define GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST 0x82AD
#define GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE 0x82AE
#define GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE 0x82AF
#define GL_TEXTURE_COMPRESSED_BLOCK_WIDTH 0x82B1
#define GL_TEXTURE_COMPRESSED_BLOCK_HEIGHT 0x82B2
#define GL_TEXTURE_COMPRESSED_BLOCK_SIZE 0x82B3
#define GL_CLEAR_BUFFER 0x82B4
#define GL_TEXTURE_VIEW 0x82B5
#define GL_VIEW_COMPATIBILITY_CLASS 0x82B6
#define GL_FULL_SUPPORT 0x82B7
#define GL_CAVEAT_SUPPORT 0x82B8
#define GL_IMAGE_CLASS_4_X_32 0x82B9
#define GL_IMAGE_CLASS_2_X_32 0x82BA
#define GL_IMAGE_CLASS_1_X_32 0x82BB
#define GL_IMAGE_CLASS_4_X_16 0x82BC
#define GL_IMAGE_CLASS_2_X_16 0x82BD
#define GL_IMAGE_CLASS_1_X_16 0x82BE
#define GL_IMAGE_CLASS_4_X_8 0x82BF
#define GL_IMAGE_CLASS_2_X_8 0x82C0
#define GL_IMAGE_CLASS_1_X_8 0x82C1
#define GL_IMAGE_CLASS_11_11_10 0x82C2
#define GL_IMAGE_CLASS_10_10_10_2 0x82C3
#define GL_VIEW_CLASS_128_BITS 0x82C4
#define GL_VIEW_CLASS_96_BITS 0x82C5
#define GL_VIEW_CLASS_64_BITS 0x82C6
#define GL_VIEW_CLASS_48_BITS 0x82C7
#define GL_VIEW_CLASS_32_BITS 0x82C8
#define GL_VIEW_CLASS_24_BITS 0x82C9
#define GL_VIEW_CLASS_16_BITS 0x82CA
#define GL_VIEW_CLASS_8_BITS 0x82CB
#define GL_VIEW_CLASS_S3TC_DXT1_RGB 0x82CC
#define GL_VIEW_CLASS_S3TC_DXT1_RGBA 0x82CD
#define GL_VIEW_CLASS_S3TC_DXT3_RGBA 0x82CE
#define GL_VIEW_CLASS_S3TC_DXT5_RGBA 0x82CF
#define GL_VIEW_CLASS_RGTC1_RED 0x82D0
#define GL_VIEW_CLASS_RGTC2_RG 0x82D1
#define GL_VIEW_CLASS_BPTC_UNORM 0x82D2
#define GL_VIEW_CLASS_BPTC_FLOAT 0x82D3
#define GL_VERTEX_ATTRIB_BINDING 0x82D4
#define GL_VERTEX_ATTRIB_RELATIVE_OFFSET 0x82D5
#define GL_VERTEX_BINDING_DIVISOR 0x82D6
#define GL_VERTEX_BINDING_OFFSET 0x82D7
#define GL_VERTEX_BINDING_STRIDE 0x82D8
#define GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET 0x82D9
#define GL_MAX_VERTEX_ATTRIB_BINDINGS 0x82DA
#define GL_TEXTURE_VIEW_MIN_LEVEL 0x82DB
#define GL_TEXTURE_VIEW_MIN_LEVEL_EXT 0x82DB
#define GL_TEXTURE_VIEW_MIN_LEVEL_OES 0x82DB
#define GL_TEXTURE_VIEW_NUM_LEVELS 0x82DC
#define GL_TEXTURE_VIEW_NUM_LEVELS_EXT 0x82DC
#define GL_TEXTURE_VIEW_NUM_LEVELS_OES 0x82DC
#define GL_TEXTURE_VIEW_MIN_LAYER 0x82DD
#define GL_TEXTURE_VIEW_MIN_LAYER_EXT 0x82DD
#define GL_TEXTURE_VIEW_MIN_LAYER_OES 0x82DD
#define GL_TEXTURE_VIEW_NUM_LAYERS 0x82DE
#define GL_TEXTURE_VIEW_NUM_LAYERS_EXT 0x82DE
#define GL_TEXTURE_VIEW_NUM_LAYERS_OES 0x82DE
#define GL_TEXTURE_IMMUTABLE_LEVELS 0x82DF
#define GL_BUFFER 0x82E0
#define GL_BUFFER_KHR 0x82E0
#define GL_SHADER 0x82E1
#define GL_SHADER_KHR 0x82E1
#define GL_PROGRAM 0x82E2
#define GL_PROGRAM_KHR 0x82E2
#define GL_QUERY 0x82E3
#define GL_QUERY_KHR 0x82E3
#define GL_PROGRAM_PIPELINE 0x82E4
#define GL_PROGRAM_PIPELINE_KHR 0x82E4
#define GL_MAX_VERTEX_ATTRIB_STRIDE 0x82E5
#define GL_SAMPLER 0x82E6
#define GL_SAMPLER_KHR 0x82E6
#define GL_DISPLAY_LIST 0x82E7
#define GL_MAX_LABEL_LENGTH 0x82E8
#define GL_MAX_LABEL_LENGTH_KHR 0x82E8
#define GL_NUM_SHADING_LANGUAGE_VERSIONS 0x82E9
#define GL_QUERY_TARGET 0x82EA
#define GL_TRANSFORM_FEEDBACK_OVERFLOW 0x82EC
#define GL_TRANSFORM_FEEDBACK_OVERFLOW_ARB 0x82EC
#define GL_TRANSFORM_FEEDBACK_STREAM_OVERFLOW 0x82ED
#define GL_TRANSFORM_FEEDBACK_STREAM_OVERFLOW_ARB 0x82ED
#define GL_VERTICES_SUBMITTED 0x82EE
#define GL_VERTICES_SUBMITTED_ARB 0x82EE
#define GL_PRIMITIVES_SUBMITTED 0x82EF
#define GL_PRIMITIVES_SUBMITTED_ARB 0x82EF
#define GL_VERTEX_SHADER_INVOCATIONS 0x82F0
#define GL_VERTEX_SHADER_INVOCATIONS_ARB 0x82F0
#define GL_TESS_CONTROL_SHADER_PATCHES 0x82F1
#define GL_TESS_CONTROL_SHADER_PATCHES_ARB 0x82F1
#define GL_TESS_EVALUATION_SHADER_INVOCATIONS 0x82F2
#define GL_TESS_EVALUATION_SHADER_INVOCATIONS_ARB 0x82F2
#define GL_GEOMETRY_SHADER_PRIMITIVES_EMITTED 0x82F3
#define GL_GEOMETRY_SHADER_PRIMITIVES_EMITTED_ARB 0x82F3
#define GL_FRAGMENT_SHADER_INVOCATIONS 0x82F4
#define GL_FRAGMENT_SHADER_INVOCATIONS_ARB 0x82F4
#define GL_COMPUTE_SHADER_INVOCATIONS 0x82F5
#define GL_COMPUTE_SHADER_INVOCATIONS_ARB 0x82F5
#define GL_CLIPPING_INPUT_PRIMITIVES 0x82F6
#define GL_CLIPPING_INPUT_PRIMITIVES_ARB 0x82F6
#define GL_CLIPPING_OUTPUT_PRIMITIVES 0x82F7
#define GL_CLIPPING_OUTPUT_PRIMITIVES_ARB 0x82F7
#define GL_SPARSE_BUFFER_PAGE_SIZE_ARB 0x82F8
#define GL_MAX_CULL_DISTANCES 0x82F9
#define GL_MAX_CULL_DISTANCES_EXT 0x82F9
#define GL_MAX_COMBINED_CLIP_AND_CULL_DISTANCES 0x82FA
#define GL_MAX_COMBINED_CLIP_AND_CULL_DISTANCES_EXT 0x82FA
#define GL_CONTEXT_RELEASE_BEHAVIOR 0x82FB
#define GL_CONTEXT_RELEASE_BEHAVIOR_KHR 0x82FB
#define GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH 0x82FC
#define GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH_KHR 0x82FC
#define GL_ROBUST_GPU_TIMEOUT_MS_KHR 0x82FD
#define GL_DEPTH_PASS_INSTRUMENT_SGIX 0x8310
#define GL_DEPTH_PASS_INSTRUMENT_COUNTERS_SGIX 0x8311
#define GL_DEPTH_PASS_INSTRUMENT_MAX_SGIX 0x8312
#define GL_FRAGMENTS_INSTRUMENT_SGIX 0x8313
#define GL_FRAGMENTS_INSTRUMENT_COUNTERS_SGIX 0x8314
#define GL_FRAGMENTS_INSTRUMENT_MAX_SGIX 0x8315
#define GL_CONVOLUTION_HINT_SGIX 0x8316
#define GL_YCRCB_SGIX 0x8318
#define GL_YCRCBA_SGIX 0x8319
#define GL_UNPACK_COMPRESSED_SIZE_SGIX 0x831A
#define GL_PACK_MAX_COMPRESSED_SIZE_SGIX 0x831B
#define GL_PACK_COMPRESSED_SIZE_SGIX 0x831C
#define GL_SLIM8U_SGIX 0x831D
#define GL_SLIM10U_SGIX 0x831E
#define GL_SLIM12S_SGIX 0x831F
#define GL_ALPHA_MIN_SGIX 0x8320
#define GL_ALPHA_MAX_SGIX 0x8321
#define GL_SCALEBIAS_HINT_SGIX 0x8322
#define GL_ASYNC_MARKER_SGIX 0x8329
#define GL_PIXEL_TEX_GEN_MODE_SGIX 0x832B
#define GL_ASYNC_HISTOGRAM_SGIX 0x832C
#define GL_MAX_ASYNC_HISTOGRAM_SGIX 0x832D
#define GL_PIXEL_TRANSFORM_2D_EXT 0x8330
#define GL_PIXEL_MAG_FILTER_EXT 0x8331
#define GL_PIXEL_MIN_FILTER_EXT 0x8332
#define GL_PIXEL_CUBIC_WEIGHT_EXT 0x8333
#define GL_CUBIC_EXT 0x8334
#define GL_AVERAGE_EXT 0x8335
#define GL_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT 0x8336
#define GL_MAX_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT 0x8337
#define GL_PIXEL_TRANSFORM_2D_MATRIX_EXT 0x8338
#define GL_FRAGMENT_MATERIAL_EXT 0x8349
#define GL_FRAGMENT_NORMAL_EXT 0x834A
#define GL_FRAGMENT_COLOR_EXT 0x834C
#define GL_ATTENUATION_EXT 0x834D
#define GL_SHADOW_ATTENUATION_EXT 0x834E
#define GL_TEXTURE_APPLICATION_MODE_EXT 0x834F
#define GL_TEXTURE_LIGHT_EXT 0x8350
#define GL_TEXTURE_MATERIAL_FACE_EXT 0x8351
#define GL_TEXTURE_MATERIAL_PARAMETER_EXT 0x8352
#define GL_PIXEL_TEXTURE_SGIS 0x8353
#define GL_PIXEL_FRAGMENT_RGB_SOURCE_SGIS 0x8354
#define GL_PIXEL_FRAGMENT_ALPHA_SOURCE_SGIS 0x8355
#define GL_PIXEL_GROUP_COLOR_SGIS 0x8356
#define GL_LINE_QUALITY_HINT_SGIX 0x835B
#define GL_ASYNC_TEX_IMAGE_SGIX 0x835C
#define GL_ASYNC_DRAW_PIXELS_SGIX 0x835D
#define GL_ASYNC_READ_PIXELS_SGIX 0x835E
#define GL_MAX_ASYNC_TEX_IMAGE_SGIX 0x835F
#define GL_MAX_ASYNC_DRAW_PIXELS_SGIX 0x8360
#define GL_MAX_ASYNC_READ_PIXELS_SGIX 0x8361
#define GL_UNSIGNED_BYTE_2_3_3_REV 0x8362
#define GL_UNSIGNED_BYTE_2_3_3_REV_EXT 0x8362
#define GL_UNSIGNED_SHORT_5_6_5 0x8363
#define GL_UNSIGNED_SHORT_5_6_5_EXT 0x8363
#define GL_UNSIGNED_SHORT_5_6_5_REV 0x8364
#define GL_UNSIGNED_SHORT_5_6_5_REV_EXT 0x8364
#define GL_UNSIGNED_SHORT_4_4_4_4_REV 0x8365
#define GL_UNSIGNED_SHORT_4_4_4_4_REV_EXT 0x8365
#define GL_UNSIGNED_SHORT_4_4_4_4_REV_IMG 0x8365
#define GL_UNSIGNED_SHORT_1_5_5_5_REV 0x8366
#define GL_UNSIGNED_SHORT_1_5_5_5_REV_EXT 0x8366
#define GL_UNSIGNED_INT_8_8_8_8_REV 0x8367
#define GL_UNSIGNED_INT_8_8_8_8_REV_EXT 0x8367
#define GL_UNSIGNED_INT_2_10_10_10_REV 0x8368
#define GL_UNSIGNED_INT_2_10_10_10_REV_EXT 0x8368
#define GL_TEXTURE_MAX_CLAMP_S_SGIX 0x8369
#define GL_TEXTURE_MAX_CLAMP_T_SGIX 0x836A
#define GL_TEXTURE_MAX_CLAMP_R_SGIX 0x836B
#define GL_MIRRORED_REPEAT 0x8370
#define GL_MIRRORED_REPEAT_ARB 0x8370
#define GL_MIRRORED_REPEAT_IBM 0x8370
#define GL_MIRRORED_REPEAT_OES 0x8370
#define GL_RGB_S3TC 0x83A0
#define GL_RGB4_S3TC 0x83A1
#define GL_RGBA_S3TC 0x83A2
#define GL_RGBA4_S3TC 0x83A3
#define GL_RGBA_DXT5_S3TC 0x83A4
#define GL_RGBA4_DXT5_S3TC 0x83A5
#define GL_VERTEX_PRECLIP_SGIX 0x83EE
#define GL_VERTEX_PRECLIP_HINT_SGIX 0x83EF
#define GL_COMPRESSED_RGB_S3TC_DXT1_EXT 0x83F0
#define GL_COMPRESSED_RGBA_S3TC_DXT1_EXT 0x83F1
#define GL_COMPRESSED_RGBA_S3TC_DXT3_ANGLE 0x83F2
#define GL_COMPRESSED_RGBA_S3TC_DXT3_EXT 0x83F2
#define GL_COMPRESSED_RGBA_S3TC_DXT5_ANGLE 0x83F3
#define GL_COMPRESSED_RGBA_S3TC_DXT5_EXT 0x83F3
#define GL_PARALLEL_ARRAYS_INTEL 0x83F4
#define GL_VERTEX_ARRAY_PARALLEL_POINTERS_INTEL 0x83F5
#define GL_NORMAL_ARRAY_PARALLEL_POINTERS_INTEL 0x83F6
#define GL_COLOR_ARRAY_PARALLEL_POINTERS_INTEL 0x83F7
#define GL_TEXTURE_COORD_ARRAY_PARALLEL_POINTERS_INTEL 0x83F8
#define GL_PERFQUERY_DONOT_FLUSH_INTEL 0x83F9
#define GL_PERFQUERY_FLUSH_INTEL 0x83FA
#define GL_PERFQUERY_WAIT_INTEL 0x83FB
#define GL_BLACKHOLE_RENDER_INTEL 0x83FC
#define GL_CONSERVATIVE_RASTERIZATION_INTEL 0x83FE
#define GL_TEXTURE_MEMORY_LAYOUT_INTEL 0x83FF
#define GL_FRAGMENT_LIGHTING_SGIX 0x8400
#define GL_FRAGMENT_COLOR_MATERIAL_SGIX 0x8401
#define GL_FRAGMENT_COLOR_MATERIAL_FACE_SGIX 0x8402
#define GL_FRAGMENT_COLOR_MATERIAL_PARAMETER_SGIX 0x8403
#define GL_MAX_FRAGMENT_LIGHTS_SGIX 0x8404
#define GL_MAX_ACTIVE_LIGHTS_SGIX 0x8405
#define GL_CURRENT_RASTER_NORMAL_SGIX 0x8406
#define GL_LIGHT_ENV_MODE_SGIX 0x8407
#define GL_FRAGMENT_LIGHT_MODEL_LOCAL_VIEWER_SGIX 0x8408
#define GL_FRAGMENT_LIGHT_MODEL_TWO_SIDE_SGIX 0x8409
#define GL_FRAGMENT_LIGHT_MODEL_AMBIENT_SGIX 0x840A
#define GL_FRAGMENT_LIGHT_MODEL_NORMAL_INTERPOLATION_SGIX 0x840B
#define GL_FRAGMENT_LIGHT0_SGIX 0x840C
#define GL_FRAGMENT_LIGHT1_SGIX 0x840D
#define GL_FRAGMENT_LIGHT2_SGIX 0x840E
#define GL_FRAGMENT_LIGHT3_SGIX 0x840F
#define GL_FRAGMENT_LIGHT4_SGIX 0x8410
#define GL_FRAGMENT_LIGHT5_SGIX 0x8411
#define GL_FRAGMENT_LIGHT6_SGIX 0x8412
#define GL_FRAGMENT_LIGHT7_SGIX 0x8413
#define GL_PACK_RESAMPLE_SGIX 0x842E
#define GL_UNPACK_RESAMPLE_SGIX 0x842F
#define GL_RESAMPLE_DECIMATE_SGIX 0x8430
#define GL_RESAMPLE_REPLICATE_SGIX 0x8433
#define GL_RESAMPLE_ZERO_FILL_SGIX 0x8434
#define GL_TANGENT_ARRAY_EXT 0x8439
#define GL_BINORMAL_ARRAY_EXT 0x843A
#define GL_CURRENT_TANGENT_EXT 0x843B
#define GL_CURRENT_BINORMAL_EXT 0x843C
#define GL_TANGENT_ARRAY_TYPE_EXT 0x843E
#define GL_TANGENT_ARRAY_STRIDE_EXT 0x843F
#define GL_BINORMAL_ARRAY_TYPE_EXT 0x8440
#define GL_BINORMAL_ARRAY_STRIDE_EXT 0x8441
#define GL_TANGENT_ARRAY_POINTER_EXT 0x8442
#define GL_BINORMAL_ARRAY_POINTER_EXT 0x8443
#define GL_MAP1_TANGENT_EXT 0x8444
#define GL_MAP2_TANGENT_EXT 0x8445
#define GL_MAP1_BINORMAL_EXT 0x8446
#define GL_MAP2_BINORMAL_EXT 0x8447
#define GL_NEAREST_CLIPMAP_NEAREST_SGIX 0x844D
#define GL_NEAREST_CLIPMAP_LINEAR_SGIX 0x844E
#define GL_LINEAR_CLIPMAP_NEAREST_SGIX 0x844F
#define GL_FOG_COORDINATE_SOURCE 0x8450
#define GL_FOG_COORDINATE_SOURCE_EXT 0x8450
#define GL_FOG_COORD_SRC 0x8450
#define GL_FOG_COORD 0x8451
#define GL_FOG_COORDINATE 0x8451
#define GL_FOG_COORDINATE_EXT 0x8451
#define GL_FRAGMENT_DEPTH 0x8452
#define GL_FRAGMENT_DEPTH_EXT 0x8452
#define GL_CURRENT_FOG_COORD 0x8453
#define GL_CURRENT_FOG_COORDINATE 0x8453
#define GL_CURRENT_FOG_COORDINATE_EXT 0x8453
#define GL_FOG_COORDINATE_ARRAY_TYPE 0x8454
#define GL_FOG_COORDINATE_ARRAY_TYPE_EXT 0x8454
#define GL_FOG_COORD_ARRAY_TYPE 0x8454
#define GL_FOG_COORDINATE_ARRAY_STRIDE 0x8455
#define GL_FOG_COORDINATE_ARRAY_STRIDE_EXT 0x8455
#define GL_FOG_COORD_ARRAY_STRIDE 0x8455
#define GL_FOG_COORDINATE_ARRAY_POINTER 0x8456
#define GL_FOG_COORDINATE_ARRAY_POINTER_EXT 0x8456
#define GL_FOG_COORD_ARRAY_POINTER 0x8456
#define GL_FOG_COORDINATE_ARRAY 0x8457
#define GL_FOG_COORDINATE_ARRAY_EXT 0x8457
#define GL_FOG_COORD_ARRAY 0x8457
#define GL_COLOR_SUM 0x8458
#define GL_COLOR_SUM_ARB 0x8458
#define GL_COLOR_SUM_EXT 0x8458
#define GL_CURRENT_SECONDARY_COLOR 0x8459
#define GL_CURRENT_SECONDARY_COLOR_EXT 0x8459
#define GL_SECONDARY_COLOR_ARRAY_SIZE 0x845A
#define GL_SECONDARY_COLOR_ARRAY_SIZE_EXT 0x845A
#define GL_SECONDARY_COLOR_ARRAY_TYPE 0x845B
#define GL_SECONDARY_COLOR_ARRAY_TYPE_EXT 0x845B
#define GL_SECONDARY_COLOR_ARRAY_STRIDE 0x845C
#define GL_SECONDARY_COLOR_ARRAY_STRIDE_EXT 0x845C
#define GL_SECONDARY_COLOR_ARRAY_POINTER 0x845D
#define GL_SECONDARY_COLOR_ARRAY_POINTER_EXT 0x845D
#define GL_SECONDARY_COLOR_ARRAY 0x845E
#define GL_SECONDARY_COLOR_ARRAY_EXT 0x845E
#define GL_CURRENT_RASTER_SECONDARY_COLOR 0x845F
#define GL_ALIASED_POINT_SIZE_RANGE 0x846D
#define GL_ALIASED_LINE_WIDTH_RANGE 0x846E
#define GL_SCREEN_COORDINATES_REND 0x8490
#define GL_INVERTED_SCREEN_W_REND 0x8491
#define GL_TEXTURE0 0x84C0
#define GL_TEXTURE0_ARB 0x84C0
#define GL_TEXTURE1 0x84C1
#define GL_TEXTURE1_ARB 0x84C1
#define GL_TEXTURE2 0x84C2
#define GL_TEXTURE2_ARB 0x84C2
#define GL_TEXTURE3 0x84C3
#define GL_TEXTURE3_ARB 0x84C3
#define GL_TEXTURE4 0x84C4
#define GL_TEXTURE4_ARB 0x84C4
#define GL_TEXTURE5 0x84C5
#define GL_TEXTURE5_ARB 0x84C5
#define GL_TEXTURE6 0x84C6
#define GL_TEXTURE6_ARB 0x84C6
#define GL_TEXTURE7 0x84C7
#define GL_TEXTURE7_ARB 0x84C7
#define GL_TEXTURE8 0x84C8
#define GL_TEXTURE8_ARB 0x84C8
#define GL_TEXTURE9 0x84C9
#define GL_TEXTURE9_ARB 0x84C9
#define GL_TEXTURE10 0x84CA
#define GL_TEXTURE10_ARB 0x84CA
#define GL_TEXTURE11 0x84CB
#define GL_TEXTURE11_ARB 0x84CB
#define GL_TEXTURE12 0x84CC
#define GL_TEXTURE12_ARB 0x84CC
#define GL_TEXTURE13 0x84CD
#define GL_TEXTURE13_ARB 0x84CD
#define GL_TEXTURE14 0x84CE
#define GL_TEXTURE14_ARB 0x84CE
#define GL_TEXTURE15 0x84CF
#define GL_TEXTURE15_ARB 0x84CF
#define GL_TEXTURE16 0x84D0
#define GL_TEXTURE16_ARB 0x84D0
#define GL_TEXTURE17 0x84D1
#define GL_TEXTURE17_ARB 0x84D1
#define GL_TEXTURE18 0x84D2
#define GL_TEXTURE18_ARB 0x84D2
#define GL_TEXTURE19 0x84D3
#define GL_TEXTURE19_ARB 0x84D3
#define GL_TEXTURE20 0x84D4
#define GL_TEXTURE20_ARB 0x84D4
#define GL_TEXTURE21 0x84D5
#define GL_TEXTURE21_ARB 0x84D5
#define GL_TEXTURE22 0x84D6
#define GL_TEXTURE22_ARB 0x84D6
#define GL_TEXTURE23 0x84D7
#define GL_TEXTURE23_ARB 0x84D7
#define GL_TEXTURE24 0x84D8
#define GL_TEXTURE24_ARB 0x84D8
#define GL_TEXTURE25 0x84D9
#define GL_TEXTURE25_ARB 0x84D9
#define GL_TEXTURE26 0x84DA
#define GL_TEXTURE26_ARB 0x84DA
#define GL_TEXTURE27 0x84DB
#define GL_TEXTURE27_ARB 0x84DB
#define GL_TEXTURE28 0x84DC
#define GL_TEXTURE28_ARB 0x84DC
#define GL_TEXTURE29 0x84DD
#define GL_TEXTURE29_ARB 0x84DD
#define GL_TEXTURE30 0x84DE
#define GL_TEXTURE30_ARB 0x84DE
#define GL_TEXTURE31 0x84DF
#define GL_TEXTURE31_ARB 0x84DF
#define GL_ACTIVE_TEXTURE 0x84E0
#define GL_ACTIVE_TEXTURE_ARB 0x84E0
#define GL_CLIENT_ACTIVE_TEXTURE 0x84E1
#define GL_CLIENT_ACTIVE_TEXTURE_ARB 0x84E1
#define GL_MAX_TEXTURE_UNITS 0x84E2
#define GL_MAX_TEXTURE_UNITS_ARB 0x84E2
#define GL_PATH_TRANSPOSE_MODELVIEW_MATRIX_NV 0x84E3
#define GL_TRANSPOSE_MODELVIEW_MATRIX 0x84E3
#define GL_TRANSPOSE_MODELVIEW_MATRIX_ARB 0x84E3
#define GL_PATH_TRANSPOSE_PROJECTION_MATRIX_NV 0x84E4
#define GL_TRANSPOSE_PROJECTION_MATRIX 0x84E4
#define GL_TRANSPOSE_PROJECTION_MATRIX_ARB 0x84E4
#define GL_TRANSPOSE_TEXTURE_MATRIX 0x84E5
#define GL_TRANSPOSE_TEXTURE_MATRIX_ARB 0x84E5
#define GL_TRANSPOSE_COLOR_MATRIX 0x84E6
#define GL_TRANSPOSE_COLOR_MATRIX_ARB 0x84E6
#define GL_SUBTRACT 0x84E7
#define GL_SUBTRACT_ARB 0x84E7
#define GL_MAX_RENDERBUFFER_SIZE 0x84E8
#define GL_MAX_RENDERBUFFER_SIZE_EXT 0x84E8
#define GL_MAX_RENDERBUFFER_SIZE_OES 0x84E8
#define GL_COMPRESSED_ALPHA 0x84E9
#define GL_COMPRESSED_ALPHA_ARB 0x84E9
#define GL_COMPRESSED_LUMINANCE 0x84EA
#define GL_COMPRESSED_LUMINANCE_ARB 0x84EA
#define GL_COMPRESSED_LUMINANCE_ALPHA 0x84EB
#define GL_COMPRESSED_LUMINANCE_ALPHA_ARB 0x84EB
#define GL_COMPRESSED_INTENSITY 0x84EC
#define GL_COMPRESSED_INTENSITY_ARB 0x84EC
#define GL_COMPRESSED_RGB 0x84ED
#define GL_COMPRESSED_RGB_ARB 0x84ED
#define GL_COMPRESSED_RGBA 0x84EE
#define GL_COMPRESSED_RGBA_ARB 0x84EE
#define GL_TEXTURE_COMPRESSION_HINT 0x84EF
#define GL_TEXTURE_COMPRESSION_HINT_ARB 0x84EF
#define GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER 0x84F0
#define GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER 0x84F1
#define GL_ALL_COMPLETED_NV 0x84F2
#define GL_FENCE_STATUS_NV 0x84F3
#define GL_FENCE_CONDITION_NV 0x84F4
#define GL_TEXTURE_RECTANGLE 0x84F5
#define GL_TEXTURE_RECTANGLE_ARB 0x84F5
#define GL_TEXTURE_RECTANGLE_NV 0x84F5
#define GL_TEXTURE_BINDING_RECTANGLE 0x84F6
#define GL_TEXTURE_BINDING_RECTANGLE_ARB 0x84F6
#define GL_TEXTURE_BINDING_RECTANGLE_NV 0x84F6
#define GL_PROXY_TEXTURE_RECTANGLE 0x84F7
#define GL_PROXY_TEXTURE_RECTANGLE_ARB 0x84F7
#define GL_PROXY_TEXTURE_RECTANGLE_NV 0x84F7
#define GL_MAX_RECTANGLE_TEXTURE_SIZE 0x84F8
#define GL_MAX_RECTANGLE_TEXTURE_SIZE_ARB 0x84F8
#define GL_MAX_RECTANGLE_TEXTURE_SIZE_NV 0x84F8
#define GL_DEPTH_STENCIL 0x84F9
#define GL_DEPTH_STENCIL_EXT 0x84F9
#define GL_DEPTH_STENCIL_NV 0x84F9
#define GL_DEPTH_STENCIL_OES 0x84F9
#define GL_UNSIGNED_INT_24_8 0x84FA
#define GL_UNSIGNED_INT_24_8_EXT 0x84FA
#define GL_UNSIGNED_INT_24_8_NV 0x84FA
#define GL_UNSIGNED_INT_24_8_OES 0x84FA
#define GL_MAX_TEXTURE_LOD_BIAS 0x84FD
#define GL_MAX_TEXTURE_LOD_BIAS_EXT 0x84FD
#define GL_TEXTURE_MAX_ANISOTROPY 0x84FE
#define GL_TEXTURE_MAX_ANISOTROPY_EXT 0x84FE
#define GL_MAX_TEXTURE_MAX_ANISOTROPY 0x84FF
#define GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT 0x84FF
#define GL_TEXTURE_FILTER_CONTROL 0x8500
#define GL_TEXTURE_FILTER_CONTROL_EXT 0x8500
#define GL_TEXTURE_LOD_BIAS 0x8501
#define GL_TEXTURE_LOD_BIAS_EXT 0x8501
#define GL_MODELVIEW1_STACK_DEPTH_EXT 0x8502
#define GL_COMBINE4_NV 0x8503
#define GL_MAX_SHININESS_NV 0x8504
#define GL_MAX_SPOT_EXPONENT_NV 0x8505
#define GL_MODELVIEW1_MATRIX_EXT 0x8506
#define GL_INCR_WRAP 0x8507
#define GL_INCR_WRAP_EXT 0x8507
#define GL_INCR_WRAP_OES 0x8507
#define GL_DECR_WRAP 0x8508
#define GL_DECR_WRAP_EXT 0x8508
#define GL_DECR_WRAP_OES 0x8508
#define GL_VERTEX_WEIGHTING_EXT 0x8509
#define GL_MODELVIEW1_ARB 0x850A
#define GL_MODELVIEW1_EXT 0x850A
#define GL_CURRENT_VERTEX_WEIGHT_EXT 0x850B
#define GL_VERTEX_WEIGHT_ARRAY_EXT 0x850C
#define GL_VERTEX_WEIGHT_ARRAY_SIZE_EXT 0x850D
#define GL_VERTEX_WEIGHT_ARRAY_TYPE_EXT 0x850E
#define GL_VERTEX_WEIGHT_ARRAY_STRIDE_EXT 0x850F
#define GL_VERTEX_WEIGHT_ARRAY_POINTER_EXT 0x8510
#define GL_NORMAL_MAP 0x8511
#define GL_NORMAL_MAP_ARB 0x8511
#define GL_NORMAL_MAP_EXT 0x8511
#define GL_NORMAL_MAP_NV 0x8511
#define GL_NORMAL_MAP_OES 0x8511
#define GL_REFLECTION_MAP 0x8512
#define GL_REFLECTION_MAP_ARB 0x8512
#define GL_REFLECTION_MAP_EXT 0x8512
#define GL_REFLECTION_MAP_NV 0x8512
#define GL_REFLECTION_MAP_OES 0x8512
#define GL_TEXTURE_CUBE_MAP 0x8513
#define GL_TEXTURE_CUBE_MAP_ARB 0x8513
#define GL_TEXTURE_CUBE_MAP_EXT 0x8513
#define GL_TEXTURE_CUBE_MAP_OES 0x8513
#define GL_TEXTURE_BINDING_CUBE_MAP 0x8514
#define GL_TEXTURE_BINDING_CUBE_MAP_ARB 0x8514
#define GL_TEXTURE_BINDING_CUBE_MAP_EXT 0x8514
#define GL_TEXTURE_BINDING_CUBE_MAP_OES 0x8514
#define GL_TEXTURE_CUBE_MAP_POSITIVE_X 0x8515
#define GL_TEXTURE_CUBE_MAP_POSITIVE_X_ARB 0x8515
#define GL_TEXTURE_CUBE_MAP_POSITIVE_X_EXT 0x8515
#define GL_TEXTURE_CUBE_MAP_POSITIVE_X_OES 0x8515
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_X 0x8516
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_X_ARB 0x8516
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_X_EXT 0x8516
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_X_OES 0x8516
#define GL_TEXTURE_CUBE_MAP_POSITIVE_Y 0x8517
#define GL_TEXTURE_CUBE_MAP_POSITIVE_Y_ARB 0x8517
#define GL_TEXTURE_CUBE_MAP_POSITIVE_Y_EXT 0x8517
#define GL_TEXTURE_CUBE_MAP_POSITIVE_Y_OES 0x8517
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Y 0x8518
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_ARB 0x8518
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_EXT 0x8518
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_OES 0x8518
#define GL_TEXTURE_CUBE_MAP_POSITIVE_Z 0x8519
#define GL_TEXTURE_CUBE_MAP_POSITIVE_Z_ARB 0x8519
#define GL_TEXTURE_CUBE_MAP_POSITIVE_Z_EXT 0x8519
#define GL_TEXTURE_CUBE_MAP_POSITIVE_Z_OES 0x8519
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Z 0x851A
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_ARB 0x851A
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_EXT 0x851A
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_OES 0x851A
#define GL_PROXY_TEXTURE_CUBE_MAP 0x851B
#define GL_PROXY_TEXTURE_CUBE_MAP_ARB 0x851B
#define GL_PROXY_TEXTURE_CUBE_MAP_EXT 0x851B
#define GL_MAX_CUBE_MAP_TEXTURE_SIZE 0x851C
#define GL_MAX_CUBE_MAP_TEXTURE_SIZE_ARB 0x851C
#define GL_MAX_CUBE_MAP_TEXTURE_SIZE_EXT 0x851C
#define GL_MAX_CUBE_MAP_TEXTURE_SIZE_OES 0x851C
#define GL_VERTEX_ARRAY_RANGE_APPLE 0x851D
#define GL_VERTEX_ARRAY_RANGE_NV 0x851D
#define GL_VERTEX_ARRAY_RANGE_LENGTH_APPLE 0x851E
#define GL_VERTEX_ARRAY_RANGE_LENGTH_NV 0x851E
#define GL_VERTEX_ARRAY_RANGE_VALID_NV 0x851F
#define GL_VERTEX_ARRAY_STORAGE_HINT_APPLE 0x851F
#define GL_MAX_VERTEX_ARRAY_RANGE_ELEMENT_NV 0x8520
#define GL_VERTEX_ARRAY_RANGE_POINTER_APPLE 0x8521
#define GL_VERTEX_ARRAY_RANGE_POINTER_NV 0x8521
#define GL_REGISTER_COMBINERS_NV 0x8522
#define GL_VARIABLE_A_NV 0x8523
#define GL_VARIABLE_B_NV 0x8524
#define GL_VARIABLE_C_NV 0x8525
#define GL_VARIABLE_D_NV 0x8526
#define GL_VARIABLE_E_NV 0x8527
#define GL_VARIABLE_F_NV 0x8528
#define GL_VARIABLE_G_NV 0x8529
#define GL_CONSTANT_COLOR0_NV 0x852A
#define GL_CONSTANT_COLOR1_NV 0x852B
#define GL_PRIMARY_COLOR_NV 0x852C
#define GL_SECONDARY_COLOR_NV 0x852D
#define GL_SPARE0_NV 0x852E
#define GL_SPARE1_NV 0x852F
#define GL_DISCARD_NV 0x8530
#define GL_E_TIMES_F_NV 0x8531
#define GL_SPARE0_PLUS_SECONDARY_COLOR_NV 0x8532
#define GL_VERTEX_ARRAY_RANGE_WITHOUT_FLUSH_NV 0x8533
#define GL_MULTISAMPLE_FILTER_HINT_NV 0x8534
#define GL_PER_STAGE_CONSTANTS_NV 0x8535
#define GL_UNSIGNED_IDENTITY_NV 0x8536
#define GL_UNSIGNED_INVERT_NV 0x8537
#define GL_EXPAND_NORMAL_NV 0x8538
#define GL_EXPAND_NEGATE_NV 0x8539
#define GL_HALF_BIAS_NORMAL_NV 0x853A
#define GL_HALF_BIAS_NEGATE_NV 0x853B
#define GL_SIGNED_IDENTITY_NV 0x853C
#define GL_SIGNED_NEGATE_NV 0x853D
#define GL_SCALE_BY_TWO_NV 0x853E
#define GL_SCALE_BY_FOUR_NV 0x853F
#define GL_SCALE_BY_ONE_HALF_NV 0x8540
#define GL_BIAS_BY_NEGATIVE_ONE_HALF_NV 0x8541
#define GL_COMBINER_INPUT_NV 0x8542
#define GL_COMBINER_MAPPING_NV 0x8543
#define GL_COMBINER_COMPONENT_USAGE_NV 0x8544
#define GL_COMBINER_AB_DOT_PRODUCT_NV 0x8545
#define GL_COMBINER_CD_DOT_PRODUCT_NV 0x8546
#define GL_COMBINER_MUX_SUM_NV 0x8547
#define GL_COMBINER_SCALE_NV 0x8548
#define GL_COMBINER_BIAS_NV 0x8549
#define GL_COMBINER_AB_OUTPUT_NV 0x854A
#define GL_COMBINER_CD_OUTPUT_NV 0x854B
#define GL_COMBINER_SUM_OUTPUT_NV 0x854C
#define GL_MAX_GENERAL_COMBINERS_NV 0x854D
#define GL_NUM_GENERAL_COMBINERS_NV 0x854E
#define GL_COLOR_SUM_CLAMP_NV 0x854F
#define GL_COMBINER0_NV 0x8550
#define GL_COMBINER1_NV 0x8551
#define GL_COMBINER2_NV 0x8552
#define GL_COMBINER3_NV 0x8553
#define GL_COMBINER4_NV 0x8554
#define GL_COMBINER5_NV 0x8555
#define GL_COMBINER6_NV 0x8556
#define GL_COMBINER7_NV 0x8557
#define GL_PRIMITIVE_RESTART_NV 0x8558
#define GL_PRIMITIVE_RESTART_INDEX_NV 0x8559
#define GL_FOG_DISTANCE_MODE_NV 0x855A
#define GL_EYE_RADIAL_NV 0x855B
#define GL_EYE_PLANE_ABSOLUTE_NV 0x855C
#define GL_EMBOSS_LIGHT_NV 0x855D
#define GL_EMBOSS_CONSTANT_NV 0x855E
#define GL_EMBOSS_MAP_NV 0x855F
#define GL_RED_MIN_CLAMP_INGR 0x8560
#define GL_GREEN_MIN_CLAMP_INGR 0x8561
#define GL_BLUE_MIN_CLAMP_INGR 0x8562
#define GL_ALPHA_MIN_CLAMP_INGR 0x8563
#define GL_RED_MAX_CLAMP_INGR 0x8564
#define GL_GREEN_MAX_CLAMP_INGR 0x8565
#define GL_BLUE_MAX_CLAMP_INGR 0x8566
#define GL_ALPHA_MAX_CLAMP_INGR 0x8567
#define GL_INTERLACE_READ_INGR 0x8568
#define GL_COMBINE 0x8570
#define GL_COMBINE_ARB 0x8570
#define GL_COMBINE_EXT 0x8570
#define GL_COMBINE_RGB 0x8571
#define GL_COMBINE_RGB_ARB 0x8571
#define GL_COMBINE_RGB_EXT 0x8571
#define GL_COMBINE_ALPHA 0x8572
#define GL_COMBINE_ALPHA_ARB 0x8572
#define GL_COMBINE_ALPHA_EXT 0x8572
#define GL_RGB_SCALE 0x8573
#define GL_RGB_SCALE_ARB 0x8573
#define GL_RGB_SCALE_EXT 0x8573
#define GL_ADD_SIGNED 0x8574
#define GL_ADD_SIGNED_ARB 0x8574
#define GL_ADD_SIGNED_EXT 0x8574
#define GL_INTERPOLATE 0x8575
#define GL_INTERPOLATE_ARB 0x8575
#define GL_INTERPOLATE_EXT 0x8575
#define GL_CONSTANT 0x8576
#define GL_CONSTANT_ARB 0x8576
#define GL_CONSTANT_EXT 0x8576
#define GL_CONSTANT_NV 0x8576
#define GL_PRIMARY_COLOR 0x8577
#define GL_PRIMARY_COLOR_ARB 0x8577
#define GL_PRIMARY_COLOR_EXT 0x8577
#define GL_PREVIOUS 0x8578
#define GL_PREVIOUS_ARB 0x8578
#define GL_PREVIOUS_EXT 0x8578
#define GL_SOURCE0_RGB 0x8580
#define GL_SOURCE0_RGB_ARB 0x8580
#define GL_SOURCE0_RGB_EXT 0x8580
#define GL_SRC0_RGB 0x8580
#define GL_SOURCE1_RGB 0x8581
#define GL_SOURCE1_RGB_ARB 0x8581
#define GL_SOURCE1_RGB_EXT 0x8581
#define GL_SRC1_RGB 0x8581
#define GL_SOURCE2_RGB 0x8582
#define GL_SOURCE2_RGB_ARB 0x8582
#define GL_SOURCE2_RGB_EXT 0x8582
#define GL_SRC2_RGB 0x8582
#define GL_SOURCE3_RGB_NV 0x8583
#define GL_SOURCE0_ALPHA 0x8588
#define GL_SOURCE0_ALPHA_ARB 0x8588
#define GL_SOURCE0_ALPHA_EXT 0x8588
#define GL_SRC0_ALPHA 0x8588
#define GL_SOURCE1_ALPHA 0x8589
#define GL_SOURCE1_ALPHA_ARB 0x8589
#define GL_SOURCE1_ALPHA_EXT 0x8589
#define GL_SRC1_ALPHA 0x8589
#define GL_SRC1_ALPHA_EXT 0x8589
#define GL_SOURCE2_ALPHA 0x858A
#define GL_SOURCE2_ALPHA_ARB 0x858A
#define GL_SOURCE2_ALPHA_EXT 0x858A
#define GL_SRC2_ALPHA 0x858A
#define GL_SOURCE3_ALPHA_NV 0x858B
#define GL_OPERAND0_RGB 0x8590
#define GL_OPERAND0_RGB_ARB 0x8590
#define GL_OPERAND0_RGB_EXT 0x8590
#define GL_OPERAND1_RGB 0x8591
#define GL_OPERAND1_RGB_ARB 0x8591
#define GL_OPERAND1_RGB_EXT 0x8591
#define GL_OPERAND2_RGB 0x8592
#define GL_OPERAND2_RGB_ARB 0x8592
#define GL_OPERAND2_RGB_EXT 0x8592
#define GL_OPERAND3_RGB_NV 0x8593
#define GL_OPERAND0_ALPHA 0x8598
#define GL_OPERAND0_ALPHA_ARB 0x8598
#define GL_OPERAND0_ALPHA_EXT 0x8598
#define GL_OPERAND1_ALPHA 0x8599
#define GL_OPERAND1_ALPHA_ARB 0x8599
#define GL_OPERAND1_ALPHA_EXT 0x8599
#define GL_OPERAND2_ALPHA 0x859A
#define GL_OPERAND2_ALPHA_ARB 0x859A
#define GL_OPERAND2_ALPHA_EXT 0x859A
#define GL_OPERAND3_ALPHA_NV 0x859B
#define GL_PACK_SUBSAMPLE_RATE_SGIX 0x85A0
#define GL_UNPACK_SUBSAMPLE_RATE_SGIX 0x85A1
#define GL_PIXEL_SUBSAMPLE_4444_SGIX 0x85A2
#define GL_PIXEL_SUBSAMPLE_2424_SGIX 0x85A3
#define GL_PIXEL_SUBSAMPLE_4242_SGIX 0x85A4
#define GL_PERTURB_EXT 0x85AE
#define GL_TEXTURE_NORMAL_EXT 0x85AF
#define GL_LIGHT_MODEL_SPECULAR_VECTOR_APPLE 0x85B0
#define GL_TRANSFORM_HINT_APPLE 0x85B1
#define GL_UNPACK_CLIENT_STORAGE_APPLE 0x85B2
#define GL_BUFFER_OBJECT_APPLE 0x85B3
#define GL_STORAGE_CLIENT_APPLE 0x85B4
#define GL_VERTEX_ARRAY_BINDING 0x85B5
#define GL_VERTEX_ARRAY_BINDING_APPLE 0x85B5
#define GL_VERTEX_ARRAY_BINDING_OES 0x85B5
#define GL_TEXTURE_RANGE_LENGTH_APPLE 0x85B7
#define GL_TEXTURE_RANGE_POINTER_APPLE 0x85B8
#define GL_YCBCR_422_APPLE 0x85B9
#define GL_UNSIGNED_SHORT_8_8_APPLE 0x85BA
#define GL_UNSIGNED_SHORT_8_8_MESA 0x85BA
#define GL_UNSIGNED_SHORT_8_8_REV_APPLE 0x85BB
#define GL_UNSIGNED_SHORT_8_8_REV_MESA 0x85BB
#define GL_TEXTURE_STORAGE_HINT_APPLE 0x85BC
#define GL_STORAGE_PRIVATE_APPLE 0x85BD
#define GL_STORAGE_CACHED_APPLE 0x85BE
#define GL_STORAGE_SHARED_APPLE 0x85BF
#define GL_REPLACEMENT_CODE_ARRAY_SUN 0x85C0
#define GL_REPLACEMENT_CODE_ARRAY_TYPE_SUN 0x85C1
#define GL_REPLACEMENT_CODE_ARRAY_STRIDE_SUN 0x85C2
#define GL_REPLACEMENT_CODE_ARRAY_POINTER_SUN 0x85C3
#define GL_R1UI_V3F_SUN 0x85C4
#define GL_R1UI_C4UB_V3F_SUN 0x85C5
#define GL_R1UI_C3F_V3F_SUN 0x85C6
#define GL_R1UI_N3F_V3F_SUN 0x85C7
#define GL_R1UI_C4F_N3F_V3F_SUN 0x85C8
#define GL_R1UI_T2F_V3F_SUN 0x85C9
#define GL_R1UI_T2F_N3F_V3F_SUN 0x85CA
#define GL_R1UI_T2F_C4F_N3F_V3F_SUN 0x85CB
#define GL_SLICE_ACCUM_SUN 0x85CC
#define GL_QUAD_MESH_SUN 0x8614
#define GL_TRIANGLE_MESH_SUN 0x8615
#define GL_VERTEX_PROGRAM_ARB 0x8620
#define GL_VERTEX_PROGRAM_NV 0x8620
#define GL_VERTEX_STATE_PROGRAM_NV 0x8621
#define GL_VERTEX_ATTRIB_ARRAY_ENABLED 0x8622
#define GL_VERTEX_ATTRIB_ARRAY_ENABLED_ARB 0x8622
#define GL_ATTRIB_ARRAY_SIZE_NV 0x8623
#define GL_VERTEX_ATTRIB_ARRAY_SIZE 0x8623
#define GL_VERTEX_ATTRIB_ARRAY_SIZE_ARB 0x8623
#define GL_ATTRIB_ARRAY_STRIDE_NV 0x8624
#define GL_VERTEX_ATTRIB_ARRAY_STRIDE 0x8624
#define GL_VERTEX_ATTRIB_ARRAY_STRIDE_ARB 0x8624
#define GL_ATTRIB_ARRAY_TYPE_NV 0x8625
#define GL_VERTEX_ATTRIB_ARRAY_TYPE 0x8625
#define GL_VERTEX_ATTRIB_ARRAY_TYPE_ARB 0x8625
#define GL_CURRENT_ATTRIB_NV 0x8626
#define GL_CURRENT_VERTEX_ATTRIB 0x8626
#define GL_CURRENT_VERTEX_ATTRIB_ARB 0x8626
#define GL_PROGRAM_LENGTH_ARB 0x8627
#define GL_PROGRAM_LENGTH_NV 0x8627
#define GL_PROGRAM_STRING_ARB 0x8628
#define GL_PROGRAM_STRING_NV 0x8628
#define GL_MODELVIEW_PROJECTION_NV 0x8629
#define GL_IDENTITY_NV 0x862A
#define GL_INVERSE_NV 0x862B
#define GL_TRANSPOSE_NV 0x862C
#define GL_INVERSE_TRANSPOSE_NV 0x862D
#define GL_MAX_PROGRAM_MATRIX_STACK_DEPTH_ARB 0x862E
#define GL_MAX_TRACK_MATRIX_STACK_DEPTH_NV 0x862E
#define GL_MAX_PROGRAM_MATRICES_ARB 0x862F
#define GL_MAX_TRACK_MATRICES_NV 0x862F
#define GL_MATRIX0_NV 0x8630
#define GL_MATRIX1_NV 0x8631
#define GL_MATRIX2_NV 0x8632
#define GL_MATRIX3_NV 0x8633
#define GL_MATRIX4_NV 0x8634
#define GL_MATRIX5_NV 0x8635
#define GL_MATRIX6_NV 0x8636
#define GL_MATRIX7_NV 0x8637
#define GL_CURRENT_MATRIX_STACK_DEPTH_ARB 0x8640
#define GL_CURRENT_MATRIX_STACK_DEPTH_NV 0x8640
#define GL_CURRENT_MATRIX_ARB 0x8641
#define GL_CURRENT_MATRIX_NV 0x8641
#define GL_PROGRAM_POINT_SIZE 0x8642
#define GL_PROGRAM_POINT_SIZE_ARB 0x8642
#define GL_PROGRAM_POINT_SIZE_EXT 0x8642
#define GL_VERTEX_PROGRAM_POINT_SIZE 0x8642
#define GL_VERTEX_PROGRAM_POINT_SIZE_ARB 0x8642
#define GL_VERTEX_PROGRAM_POINT_SIZE_NV 0x8642
#define GL_VERTEX_PROGRAM_TWO_SIDE 0x8643
#define GL_VERTEX_PROGRAM_TWO_SIDE_ARB 0x8643
#define GL_VERTEX_PROGRAM_TWO_SIDE_NV 0x8643
#define GL_PROGRAM_PARAMETER_NV 0x8644
#define GL_ATTRIB_ARRAY_POINTER_NV 0x8645
#define GL_VERTEX_ATTRIB_ARRAY_POINTER 0x8645
#define GL_VERTEX_ATTRIB_ARRAY_POINTER_ARB 0x8645
#define GL_PROGRAM_TARGET_NV 0x8646
#define GL_PROGRAM_RESIDENT_NV 0x8647
#define GL_TRACK_MATRIX_NV 0x8648
#define GL_TRACK_MATRIX_TRANSFORM_NV 0x8649
#define GL_VERTEX_PROGRAM_BINDING_NV 0x864A
#define GL_PROGRAM_ERROR_POSITION_ARB 0x864B
#define GL_PROGRAM_ERROR_POSITION_NV 0x864B
#define GL_OFFSET_TEXTURE_RECTANGLE_NV 0x864C
#define GL_OFFSET_TEXTURE_RECTANGLE_SCALE_NV 0x864D
#define GL_DOT_PRODUCT_TEXTURE_RECTANGLE_NV 0x864E
#define GL_DEPTH_CLAMP 0x864F
#define GL_DEPTH_CLAMP_NV 0x864F
#define GL_VERTEX_ATTRIB_ARRAY0_NV 0x8650
#define GL_VERTEX_ATTRIB_ARRAY1_NV 0x8651
#define GL_VERTEX_ATTRIB_ARRAY2_NV 0x8652
#define GL_VERTEX_ATTRIB_ARRAY3_NV 0x8653
#define GL_VERTEX_ATTRIB_ARRAY4_NV 0x8654
#define GL_VERTEX_ATTRIB_ARRAY5_NV 0x8655
#define GL_VERTEX_ATTRIB_ARRAY6_NV 0x8656
#define GL_VERTEX_ATTRIB_ARRAY7_NV 0x8657
#define GL_VERTEX_ATTRIB_ARRAY8_NV 0x8658
#define GL_VERTEX_ATTRIB_ARRAY9_NV 0x8659
#define GL_VERTEX_ATTRIB_ARRAY10_NV 0x865A
#define GL_VERTEX_ATTRIB_ARRAY11_NV 0x865B
#define GL_VERTEX_ATTRIB_ARRAY12_NV 0x865C
#define GL_VERTEX_ATTRIB_ARRAY13_NV 0x865D
#define GL_VERTEX_ATTRIB_ARRAY14_NV 0x865E
#define GL_VERTEX_ATTRIB_ARRAY15_NV 0x865F
#define GL_MAP1_VERTEX_ATTRIB0_4_NV 0x8660
#define GL_MAP1_VERTEX_ATTRIB1_4_NV 0x8661
#define GL_MAP1_VERTEX_ATTRIB2_4_NV 0x8662
#define GL_MAP1_VERTEX_ATTRIB3_4_NV 0x8663
#define GL_MAP1_VERTEX_ATTRIB4_4_NV 0x8664
#define GL_MAP1_VERTEX_ATTRIB5_4_NV 0x8665
#define GL_MAP1_VERTEX_ATTRIB6_4_NV 0x8666
#define GL_MAP1_VERTEX_ATTRIB7_4_NV 0x8667
#define GL_MAP1_VERTEX_ATTRIB8_4_NV 0x8668
#define GL_MAP1_VERTEX_ATTRIB9_4_NV 0x8669
#define GL_MAP1_VERTEX_ATTRIB10_4_NV 0x866A
#define GL_MAP1_VERTEX_ATTRIB11_4_NV 0x866B
#define GL_MAP1_VERTEX_ATTRIB12_4_NV 0x866C
#define GL_MAP1_VERTEX_ATTRIB13_4_NV 0x866D
#define GL_MAP1_VERTEX_ATTRIB14_4_NV 0x866E
#define GL_MAP1_VERTEX_ATTRIB15_4_NV 0x866F
#define GL_MAP2_VERTEX_ATTRIB0_4_NV 0x8670
#define GL_MAP2_VERTEX_ATTRIB1_4_NV 0x8671
#define GL_MAP2_VERTEX_ATTRIB2_4_NV 0x8672
#define GL_MAP2_VERTEX_ATTRIB3_4_NV 0x8673
#define GL_MAP2_VERTEX_ATTRIB4_4_NV 0x8674
#define GL_MAP2_VERTEX_ATTRIB5_4_NV 0x8675
#define GL_MAP2_VERTEX_ATTRIB6_4_NV 0x8676
#define GL_MAP2_VERTEX_ATTRIB7_4_NV 0x8677
#define GL_PROGRAM_BINDING_ARB 0x8677
#define GL_MAP2_VERTEX_ATTRIB8_4_NV 0x8678
#define GL_MAP2_VERTEX_ATTRIB9_4_NV 0x8679
#define GL_MAP2_VERTEX_ATTRIB10_4_NV 0x867A
#define GL_MAP2_VERTEX_ATTRIB11_4_NV 0x867B
#define GL_MAP2_VERTEX_ATTRIB12_4_NV 0x867C
#define GL_MAP2_VERTEX_ATTRIB13_4_NV 0x867D
#define GL_MAP2_VERTEX_ATTRIB14_4_NV 0x867E
#define GL_MAP2_VERTEX_ATTRIB15_4_NV 0x867F
#define GL_TEXTURE_COMPRESSED_IMAGE_SIZE 0x86A0
#define GL_TEXTURE_COMPRESSED_IMAGE_SIZE_ARB 0x86A0
#define GL_TEXTURE_COMPRESSED 0x86A1
#define GL_TEXTURE_COMPRESSED_ARB 0x86A1
#define GL_NUM_COMPRESSED_TEXTURE_FORMATS 0x86A2
#define GL_NUM_COMPRESSED_TEXTURE_FORMATS_ARB 0x86A2
#define GL_COMPRESSED_TEXTURE_FORMATS 0x86A3
#define GL_COMPRESSED_TEXTURE_FORMATS_ARB 0x86A3
#define GL_MAX_VERTEX_UNITS_ARB 0x86A4
#define GL_MAX_VERTEX_UNITS_OES 0x86A4
#define GL_ACTIVE_VERTEX_UNITS_ARB 0x86A5
#define GL_WEIGHT_SUM_UNITY_ARB 0x86A6
#define GL_VERTEX_BLEND_ARB 0x86A7
#define GL_CURRENT_WEIGHT_ARB 0x86A8
#define GL_WEIGHT_ARRAY_TYPE_ARB 0x86A9
#define GL_WEIGHT_ARRAY_TYPE_OES 0x86A9
#define GL_WEIGHT_ARRAY_STRIDE_ARB 0x86AA
#define GL_WEIGHT_ARRAY_STRIDE_OES 0x86AA
#define GL_WEIGHT_ARRAY_SIZE_ARB 0x86AB
#define GL_WEIGHT_ARRAY_SIZE_OES 0x86AB
#define GL_WEIGHT_ARRAY_POINTER_ARB 0x86AC
#define GL_WEIGHT_ARRAY_POINTER_OES 0x86AC
#define GL_WEIGHT_ARRAY_ARB 0x86AD
#define GL_WEIGHT_ARRAY_OES 0x86AD
#define GL_DOT3_RGB 0x86AE
#define GL_DOT3_RGB_ARB 0x86AE
#define GL_DOT3_RGBA 0x86AF
#define GL_DOT3_RGBA_ARB 0x86AF
#define GL_DOT3_RGBA_IMG 0x86AF
#define GL_COMPRESSED_RGB_FXT1_3DFX 0x86B0
#define GL_COMPRESSED_RGBA_FXT1_3DFX 0x86B1
#define GL_MULTISAMPLE_3DFX 0x86B2
#define GL_SAMPLE_BUFFERS_3DFX 0x86B3
#define GL_SAMPLES_3DFX 0x86B4
#define GL_EVAL_2D_NV 0x86C0
#define GL_EVAL_TRIANGULAR_2D_NV 0x86C1
#define GL_MAP_TESSELLATION_NV 0x86C2
#define GL_MAP_ATTRIB_U_ORDER_NV 0x86C3
#define GL_MAP_ATTRIB_V_ORDER_NV 0x86C4
#define GL_EVAL_FRACTIONAL_TESSELLATION_NV 0x86C5
#define GL_EVAL_VERTEX_ATTRIB0_NV 0x86C6
#define GL_EVAL_VERTEX_ATTRIB1_NV 0x86C7
#define GL_EVAL_VERTEX_ATTRIB2_NV 0x86C8
#define GL_EVAL_VERTEX_ATTRIB3_NV 0x86C9
#define GL_EVAL_VERTEX_ATTRIB4_NV 0x86CA
#define GL_EVAL_VERTEX_ATTRIB5_NV 0x86CB
#define GL_EVAL_VERTEX_ATTRIB6_NV 0x86CC
#define GL_EVAL_VERTEX_ATTRIB7_NV 0x86CD
#define GL_EVAL_VERTEX_ATTRIB8_NV 0x86CE
#define GL_EVAL_VERTEX_ATTRIB9_NV 0x86CF
#define GL_EVAL_VERTEX_ATTRIB10_NV 0x86D0
#define GL_EVAL_VERTEX_ATTRIB11_NV 0x86D1
#define GL_EVAL_VERTEX_ATTRIB12_NV 0x86D2
#define GL_EVAL_VERTEX_ATTRIB13_NV 0x86D3
#define GL_EVAL_VERTEX_ATTRIB14_NV 0x86D4
#define GL_EVAL_VERTEX_ATTRIB15_NV 0x86D5
#define GL_MAX_MAP_TESSELLATION_NV 0x86D6
#define GL_MAX_RATIONAL_EVAL_ORDER_NV 0x86D7
#define GL_MAX_PROGRAM_PATCH_ATTRIBS_NV 0x86D8
#define GL_RGBA_UNSIGNED_DOT_PRODUCT_MAPPING_NV 0x86D9
#define GL_UNSIGNED_INT_S8_S8_8_8_NV 0x86DA
#define GL_UNSIGNED_INT_8_8_S8_S8_REV_NV 0x86DB
#define GL_DSDT_MAG_INTENSITY_NV 0x86DC
#define GL_SHADER_CONSISTENT_NV 0x86DD
#define GL_TEXTURE_SHADER_NV 0x86DE
#define GL_SHADER_OPERATION_NV 0x86DF
#define GL_CULL_MODES_NV 0x86E0
#define GL_OFFSET_TEXTURE_2D_MATRIX_NV 0x86E1
#define GL_OFFSET_TEXTURE_MATRIX_NV 0x86E1
#define GL_OFFSET_TEXTURE_2D_SCALE_NV 0x86E2
#define GL_OFFSET_TEXTURE_SCALE_NV 0x86E2
#define GL_OFFSET_TEXTURE_2D_BIAS_NV 0x86E3
#define GL_OFFSET_TEXTURE_BIAS_NV 0x86E3
#define GL_PREVIOUS_TEXTURE_INPUT_NV 0x86E4
#define GL_CONST_EYE_NV 0x86E5
#define GL_PASS_THROUGH_NV 0x86E6
#define GL_CULL_FRAGMENT_NV 0x86E7
#define GL_OFFSET_TEXTURE_2D_NV 0x86E8
#define GL_DEPENDENT_AR_TEXTURE_2D_NV 0x86E9
#define GL_DEPENDENT_GB_TEXTURE_2D_NV 0x86EA
#define GL_SURFACE_STATE_NV 0x86EB
#define GL_DOT_PRODUCT_NV 0x86EC
#define GL_DOT_PRODUCT_DEPTH_REPLACE_NV 0x86ED
#define GL_DOT_PRODUCT_TEXTURE_2D_NV 0x86EE
#define GL_DOT_PRODUCT_TEXTURE_3D_NV 0x86EF
#define GL_DOT_PRODUCT_TEXTURE_CUBE_MAP_NV 0x86F0
#define GL_DOT_PRODUCT_DIFFUSE_CUBE_MAP_NV 0x86F1
#define GL_DOT_PRODUCT_REFLECT_CUBE_MAP_NV 0x86F2
#define GL_DOT_PRODUCT_CONST_EYE_REFLECT_CUBE_MAP_NV 0x86F3
#define GL_HILO_NV 0x86F4
#define GL_DSDT_NV 0x86F5
#define GL_DSDT_MAG_NV 0x86F6
#define GL_DSDT_MAG_VIB_NV 0x86F7
#define GL_HILO16_NV 0x86F8
#define GL_SIGNED_HILO_NV 0x86F9
#define GL_SIGNED_HILO16_NV 0x86FA
#define GL_SIGNED_RGBA_NV 0x86FB
#define GL_SIGNED_RGBA8_NV 0x86FC
#define GL_SURFACE_REGISTERED_NV 0x86FD
#define GL_SIGNED_RGB_NV 0x86FE
#define GL_SIGNED_RGB8_NV 0x86FF
#define GL_SURFACE_MAPPED_NV 0x8700
#define GL_SIGNED_LUMINANCE_NV 0x8701
#define GL_SIGNED_LUMINANCE8_NV 0x8702
#define GL_SIGNED_LUMINANCE_ALPHA_NV 0x8703
#define GL_SIGNED_LUMINANCE8_ALPHA8_NV 0x8704
#define GL_SIGNED_ALPHA_NV 0x8705
#define GL_SIGNED_ALPHA8_NV 0x8706
#define GL_SIGNED_INTENSITY_NV 0x8707
#define GL_SIGNED_INTENSITY8_NV 0x8708
#define GL_DSDT8_NV 0x8709
#define GL_DSDT8_MAG8_NV 0x870A
#define GL_DSDT8_MAG8_INTENSITY8_NV 0x870B
#define GL_SIGNED_RGB_UNSIGNED_ALPHA_NV 0x870C
#define GL_SIGNED_RGB8_UNSIGNED_ALPHA8_NV 0x870D
#define GL_HI_SCALE_NV 0x870E
#define GL_LO_SCALE_NV 0x870F
#define GL_DS_SCALE_NV 0x8710
#define GL_DT_SCALE_NV 0x8711
#define GL_MAGNITUDE_SCALE_NV 0x8712
#define GL_VIBRANCE_SCALE_NV 0x8713
#define GL_HI_BIAS_NV 0x8714
#define GL_LO_BIAS_NV 0x8715
#define GL_DS_BIAS_NV 0x8716
#define GL_DT_BIAS_NV 0x8717
#define GL_MAGNITUDE_BIAS_NV 0x8718
#define GL_VIBRANCE_BIAS_NV 0x8719
#define GL_TEXTURE_BORDER_VALUES_NV 0x871A
#define GL_TEXTURE_HI_SIZE_NV 0x871B
#define GL_TEXTURE_LO_SIZE_NV 0x871C
#define GL_TEXTURE_DS_SIZE_NV 0x871D
#define GL_TEXTURE_DT_SIZE_NV 0x871E
#define GL_TEXTURE_MAG_SIZE_NV 0x871F
#define GL_MODELVIEW2_ARB 0x8722
#define GL_MODELVIEW3_ARB 0x8723
#define GL_MODELVIEW4_ARB 0x8724
#define GL_MODELVIEW5_ARB 0x8725
#define GL_MODELVIEW6_ARB 0x8726
#define GL_MODELVIEW7_ARB 0x8727
#define GL_MODELVIEW8_ARB 0x8728
#define GL_MODELVIEW9_ARB 0x8729
#define GL_MODELVIEW10_ARB 0x872A
#define GL_MODELVIEW11_ARB 0x872B
#define GL_MODELVIEW12_ARB 0x872C
#define GL_MODELVIEW13_ARB 0x872D
#define GL_MODELVIEW14_ARB 0x872E
#define GL_MODELVIEW15_ARB 0x872F
#define GL_MODELVIEW16_ARB 0x8730
#define GL_MODELVIEW17_ARB 0x8731
#define GL_MODELVIEW18_ARB 0x8732
#define GL_MODELVIEW19_ARB 0x8733
#define GL_MODELVIEW20_ARB 0x8734
#define GL_MODELVIEW21_ARB 0x8735
#define GL_MODELVIEW22_ARB 0x8736
#define GL_MODELVIEW23_ARB 0x8737
#define GL_MODELVIEW24_ARB 0x8738
#define GL_MODELVIEW25_ARB 0x8739
#define GL_MODELVIEW26_ARB 0x873A
#define GL_MODELVIEW27_ARB 0x873B
#define GL_MODELVIEW28_ARB 0x873C
#define GL_MODELVIEW29_ARB 0x873D
#define GL_MODELVIEW30_ARB 0x873E
#define GL_MODELVIEW31_ARB 0x873F
#define GL_DOT3_RGB_EXT 0x8740
#define GL_Z400_BINARY_AMD 0x8740
#define GL_DOT3_RGBA_EXT 0x8741
#define GL_PROGRAM_BINARY_LENGTH 0x8741
#define GL_PROGRAM_BINARY_LENGTH_OES 0x8741
#define GL_MIRROR_CLAMP_ATI 0x8742
#define GL_MIRROR_CLAMP_EXT 0x8742
#define GL_MIRROR_CLAMP_TO_EDGE 0x8743
#define GL_MIRROR_CLAMP_TO_EDGE_ATI 0x8743
#define GL_MIRROR_CLAMP_TO_EDGE_EXT 0x8743
#define GL_MODULATE_ADD_ATI 0x8744
#define GL_MODULATE_SIGNED_ADD_ATI 0x8745
#define GL_MODULATE_SUBTRACT_ATI 0x8746
#define GL_SET_AMD 0x874A
#define GL_REPLACE_VALUE_AMD 0x874B
#define GL_STENCIL_OP_VALUE_AMD 0x874C
#define GL_STENCIL_BACK_OP_VALUE_AMD 0x874D
#define GL_VERTEX_ATTRIB_ARRAY_LONG 0x874E
#define GL_OCCLUSION_QUERY_EVENT_MASK_AMD 0x874F
#define GL_DEPTH_STENCIL_MESA 0x8750
#define GL_UNSIGNED_INT_24_8_MESA 0x8751
#define GL_UNSIGNED_INT_8_24_REV_MESA 0x8752
#define GL_UNSIGNED_SHORT_15_1_MESA 0x8753
#define GL_UNSIGNED_SHORT_1_15_REV_MESA 0x8754
#define GL_TRACE_MASK_MESA 0x8755
#define GL_TRACE_NAME_MESA 0x8756
#define GL_YCBCR_MESA 0x8757
#define GL_PACK_INVERT_MESA 0x8758
#define GL_DEBUG_OBJECT_MESA 0x8759
#define GL_TEXTURE_1D_STACK_MESAX 0x8759
#define GL_DEBUG_PRINT_MESA 0x875A
#define GL_TEXTURE_2D_STACK_MESAX 0x875A
#define GL_DEBUG_ASSERT_MESA 0x875B
#define GL_PROXY_TEXTURE_1D_STACK_MESAX 0x875B
#define GL_PROXY_TEXTURE_2D_STACK_MESAX 0x875C
#define GL_TEXTURE_1D_STACK_BINDING_MESAX 0x875D
#define GL_TEXTURE_2D_STACK_BINDING_MESAX 0x875E
#define GL_PROGRAM_BINARY_FORMAT_MESA 0x875F
#define GL_STATIC_ATI 0x8760
#define GL_DYNAMIC_ATI 0x8761
#define GL_PRESERVE_ATI 0x8762
#define GL_DISCARD_ATI 0x8763
#define GL_BUFFER_SIZE 0x8764
#define GL_BUFFER_SIZE_ARB 0x8764
#define GL_OBJECT_BUFFER_SIZE_ATI 0x8764
#define GL_BUFFER_USAGE 0x8765
#define GL_BUFFER_USAGE_ARB 0x8765
#define GL_OBJECT_BUFFER_USAGE_ATI 0x8765
#define GL_ARRAY_OBJECT_BUFFER_ATI 0x8766
#define GL_ARRAY_OBJECT_OFFSET_ATI 0x8767
#define GL_ELEMENT_ARRAY_ATI 0x8768
#define GL_ELEMENT_ARRAY_TYPE_ATI 0x8769
#define GL_ELEMENT_ARRAY_POINTER_ATI 0x876A
#define GL_MAX_VERTEX_STREAMS_ATI 0x876B
#define GL_VERTEX_STREAM0_ATI 0x876C
#define GL_VERTEX_STREAM1_ATI 0x876D
#define GL_VERTEX_STREAM2_ATI 0x876E
#define GL_VERTEX_STREAM3_ATI 0x876F
#define GL_VERTEX_STREAM4_ATI 0x8770
#define GL_VERTEX_STREAM5_ATI 0x8771
#define GL_VERTEX_STREAM6_ATI 0x8772
#define GL_VERTEX_STREAM7_ATI 0x8773
#define GL_VERTEX_SOURCE_ATI 0x8774
#define GL_BUMP_ROT_MATRIX_ATI 0x8775
#define GL_BUMP_ROT_MATRIX_SIZE_ATI 0x8776
#define GL_BUMP_NUM_TEX_UNITS_ATI 0x8777
#define GL_BUMP_TEX_UNITS_ATI 0x8778
#define GL_DUDV_ATI 0x8779
#define GL_DU8DV8_ATI 0x877A
#define GL_BUMP_ENVMAP_ATI 0x877B
#define GL_BUMP_TARGET_ATI 0x877C
#define GL_VERTEX_SHADER_EXT 0x8780
#define GL_VERTEX_SHADER_BINDING_EXT 0x8781
#define GL_OP_INDEX_EXT 0x8782
#define GL_OP_NEGATE_EXT 0x8783
#define GL_OP_DOT3_EXT 0x8784
#define GL_OP_DOT4_EXT 0x8785
#define GL_OP_MUL_EXT 0x8786
#define GL_OP_ADD_EXT 0x8787
#define GL_OP_MADD_EXT 0x8788
#define GL_OP_FRAC_EXT 0x8789
#define GL_OP_MAX_EXT 0x878A
#define GL_OP_MIN_EXT 0x878B
#define GL_OP_SET_GE_EXT 0x878C
#define GL_OP_SET_LT_EXT 0x878D
#define GL_OP_CLAMP_EXT 0x878E
#define GL_OP_FLOOR_EXT 0x878F
#define GL_OP_ROUND_EXT 0x8790
#define GL_OP_EXP_BASE_2_EXT 0x8791
#define GL_OP_LOG_BASE_2_EXT 0x8792
#define GL_OP_POWER_EXT 0x8793
#define GL_OP_RECIP_EXT 0x8794
#define GL_OP_RECIP_SQRT_EXT 0x8795
#define GL_OP_SUB_EXT 0x8796
#define GL_OP_CROSS_PRODUCT_EXT 0x8797
#define GL_OP_MULTIPLY_MATRIX_EXT 0x8798
#define GL_OP_MOV_EXT 0x8799
#define GL_OUTPUT_VERTEX_EXT 0x879A
#define GL_OUTPUT_COLOR0_EXT 0x879B
#define GL_OUTPUT_COLOR1_EXT 0x879C
#define GL_OUTPUT_TEXTURE_COORD0_EXT 0x879D
#define GL_OUTPUT_TEXTURE_COORD1_EXT 0x879E
#define GL_OUTPUT_TEXTURE_COORD2_EXT 0x879F
#define GL_OUTPUT_TEXTURE_COORD3_EXT 0x87A0
#define GL_OUTPUT_TEXTURE_COORD4_EXT 0x87A1
#define GL_OUTPUT_TEXTURE_COORD5_EXT 0x87A2
#define GL_OUTPUT_TEXTURE_COORD6_EXT 0x87A3
#define GL_OUTPUT_TEXTURE_COORD7_EXT 0x87A4
#define GL_OUTPUT_TEXTURE_COORD8_EXT 0x87A5
#define GL_OUTPUT_TEXTURE_COORD9_EXT 0x87A6
#define GL_OUTPUT_TEXTURE_COORD10_EXT 0x87A7
#define GL_OUTPUT_TEXTURE_COORD11_EXT 0x87A8
#define GL_OUTPUT_TEXTURE_COORD12_EXT 0x87A9
#define GL_OUTPUT_TEXTURE_COORD13_EXT 0x87AA
#define GL_OUTPUT_TEXTURE_COORD14_EXT 0x87AB
#define GL_OUTPUT_TEXTURE_COORD15_EXT 0x87AC
#define GL_OUTPUT_TEXTURE_COORD16_EXT 0x87AD
#define GL_OUTPUT_TEXTURE_COORD17_EXT 0x87AE
#define GL_OUTPUT_TEXTURE_COORD18_EXT 0x87AF
#define GL_OUTPUT_TEXTURE_COORD19_EXT 0x87B0
#define GL_OUTPUT_TEXTURE_COORD20_EXT 0x87B1
#define GL_OUTPUT_TEXTURE_COORD21_EXT 0x87B2
#define GL_OUTPUT_TEXTURE_COORD22_EXT 0x87B3
#define GL_OUTPUT_TEXTURE_COORD23_EXT 0x87B4
#define GL_OUTPUT_TEXTURE_COORD24_EXT 0x87B5
#define GL_OUTPUT_TEXTURE_COORD25_EXT 0x87B6
#define GL_OUTPUT_TEXTURE_COORD26_EXT 0x87B7
#define GL_OUTPUT_TEXTURE_COORD27_EXT 0x87B8
#define GL_OUTPUT_TEXTURE_COORD28_EXT 0x87B9
#define GL_OUTPUT_TEXTURE_COORD29_EXT 0x87BA
#define GL_OUTPUT_TEXTURE_COORD30_EXT 0x87BB
#define GL_OUTPUT_TEXTURE_COORD31_EXT 0x87BC
#define GL_OUTPUT_FOG_EXT 0x87BD
#define GL_SCALAR_EXT 0x87BE
#define GL_VECTOR_EXT 0x87BF
#define GL_MATRIX_EXT 0x87C0
#define GL_VARIANT_EXT 0x87C1
#define GL_INVARIANT_EXT 0x87C2
#define GL_LOCAL_CONSTANT_EXT 0x87C3
#define GL_LOCAL_EXT 0x87C4
#define GL_MAX_VERTEX_SHADER_INSTRUCTIONS_EXT 0x87C5
#define GL_MAX_VERTEX_SHADER_VARIANTS_EXT 0x87C6
#define GL_MAX_VERTEX_SHADER_INVARIANTS_EXT 0x87C7
#define GL_MAX_VERTEX_SHADER_LOCAL_CONSTANTS_EXT 0x87C8
#define GL_MAX_VERTEX_SHADER_LOCALS_EXT 0x87C9
#define GL_MAX_OPTIMIZED_VERTEX_SHADER_INSTRUCTIONS_EXT 0x87CA
#define GL_MAX_OPTIMIZED_VERTEX_SHADER_VARIANTS_EXT 0x87CB
#define GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCAL_CONSTANTS_EXT 0x87CC
#define GL_MAX_OPTIMIZED_VERTEX_SHADER_INVARIANTS_EXT 0x87CD
#define GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCALS_EXT 0x87CE
#define GL_VERTEX_SHADER_INSTRUCTIONS_EXT 0x87CF
#define GL_VERTEX_SHADER_VARIANTS_EXT 0x87D0
#define GL_VERTEX_SHADER_INVARIANTS_EXT 0x87D1
#define GL_VERTEX_SHADER_LOCAL_CONSTANTS_EXT 0x87D2
#define GL_VERTEX_SHADER_LOCALS_EXT 0x87D3
#define GL_VERTEX_SHADER_OPTIMIZED_EXT 0x87D4
#define GL_X_EXT 0x87D5
#define GL_Y_EXT 0x87D6
#define GL_Z_EXT 0x87D7
#define GL_W_EXT 0x87D8
#define GL_NEGATIVE_X_EXT 0x87D9
#define GL_NEGATIVE_Y_EXT 0x87DA
#define GL_NEGATIVE_Z_EXT 0x87DB
#define GL_NEGATIVE_W_EXT 0x87DC
#define GL_ZERO_EXT 0x87DD
#define GL_ONE_EXT 0x87DE
#define GL_NEGATIVE_ONE_EXT 0x87DF
#define GL_NORMALIZED_RANGE_EXT 0x87E0
#define GL_FULL_RANGE_EXT 0x87E1
#define GL_CURRENT_VERTEX_EXT 0x87E2
#define GL_MVP_MATRIX_EXT 0x87E3
#define GL_VARIANT_VALUE_EXT 0x87E4
#define GL_VARIANT_DATATYPE_EXT 0x87E5
#define GL_VARIANT_ARRAY_STRIDE_EXT 0x87E6
#define GL_VARIANT_ARRAY_TYPE_EXT 0x87E7
#define GL_VARIANT_ARRAY_EXT 0x87E8
#define GL_VARIANT_ARRAY_POINTER_EXT 0x87E9
#define GL_INVARIANT_VALUE_EXT 0x87EA
#define GL_INVARIANT_DATATYPE_EXT 0x87EB
#define GL_LOCAL_CONSTANT_VALUE_EXT 0x87EC
#define GL_LOCAL_CONSTANT_DATATYPE_EXT 0x87ED
#define GL_ATC_RGBA_INTERPOLATED_ALPHA_AMD 0x87EE
#define GL_PN_TRIANGLES_ATI 0x87F0
#define GL_MAX_PN_TRIANGLES_TESSELATION_LEVEL_ATI 0x87F1
#define GL_PN_TRIANGLES_POINT_MODE_ATI 0x87F2
#define GL_PN_TRIANGLES_NORMAL_MODE_ATI 0x87F3
#define GL_PN_TRIANGLES_TESSELATION_LEVEL_ATI 0x87F4
#define GL_PN_TRIANGLES_POINT_MODE_LINEAR_ATI 0x87F5
#define GL_PN_TRIANGLES_POINT_MODE_CUBIC_ATI 0x87F6
#define GL_PN_TRIANGLES_NORMAL_MODE_LINEAR_ATI 0x87F7
#define GL_PN_TRIANGLES_NORMAL_MODE_QUADRATIC_ATI 0x87F8
#define GL_3DC_X_AMD 0x87F9
#define GL_3DC_XY_AMD 0x87FA
#define GL_VBO_FREE_MEMORY_ATI 0x87FB
#define GL_TEXTURE_FREE_MEMORY_ATI 0x87FC
#define GL_RENDERBUFFER_FREE_MEMORY_ATI 0x87FD
#define GL_NUM_PROGRAM_BINARY_FORMATS 0x87FE
#define GL_NUM_PROGRAM_BINARY_FORMATS_OES 0x87FE
#define GL_PROGRAM_BINARY_FORMATS 0x87FF
#define GL_PROGRAM_BINARY_FORMATS_OES 0x87FF
#define GL_STENCIL_BACK_FUNC 0x8800
#define GL_STENCIL_BACK_FUNC_ATI 0x8800
#define GL_STENCIL_BACK_FAIL 0x8801
#define GL_STENCIL_BACK_FAIL_ATI 0x8801
#define GL_STENCIL_BACK_PASS_DEPTH_FAIL 0x8802
#define GL_STENCIL_BACK_PASS_DEPTH_FAIL_ATI 0x8802
#define GL_STENCIL_BACK_PASS_DEPTH_PASS 0x8803
#define GL_STENCIL_BACK_PASS_DEPTH_PASS_ATI 0x8803
#define GL_FRAGMENT_PROGRAM_ARB 0x8804
#define GL_PROGRAM_ALU_INSTRUCTIONS_ARB 0x8805
#define GL_PROGRAM_TEX_INSTRUCTIONS_ARB 0x8806
#define GL_PROGRAM_TEX_INDIRECTIONS_ARB 0x8807
#define GL_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB 0x8808
#define GL_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB 0x8809
#define GL_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB 0x880A
#define GL_MAX_PROGRAM_ALU_INSTRUCTIONS_ARB 0x880B
#define GL_MAX_PROGRAM_TEX_INSTRUCTIONS_ARB 0x880C
#define GL_MAX_PROGRAM_TEX_INDIRECTIONS_ARB 0x880D
#define GL_MAX_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB 0x880E
#define GL_MAX_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB 0x880F
#define GL_MAX_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB 0x8810
#define GL_RGBA32F 0x8814
#define GL_RGBA32F_ARB 0x8814
#define GL_RGBA32F_EXT 0x8814
#define GL_RGBA_FLOAT32_APPLE 0x8814
#define GL_RGBA_FLOAT32_ATI 0x8814
#define GL_RGB32F 0x8815
#define GL_RGB32F_ARB 0x8815
#define GL_RGB32F_EXT 0x8815
#define GL_RGB_FLOAT32_APPLE 0x8815
#define GL_RGB_FLOAT32_ATI 0x8815
#define GL_ALPHA32F_ARB 0x8816
#define GL_ALPHA32F_EXT 0x8816
#define GL_ALPHA_FLOAT32_APPLE 0x8816
#define GL_ALPHA_FLOAT32_ATI 0x8816
#define GL_INTENSITY32F_ARB 0x8817
#define GL_INTENSITY_FLOAT32_APPLE 0x8817
#define GL_INTENSITY_FLOAT32_ATI 0x8817
#define GL_LUMINANCE32F_ARB 0x8818
#define GL_LUMINANCE32F_EXT 0x8818
#define GL_LUMINANCE_FLOAT32_APPLE 0x8818
#define GL_LUMINANCE_FLOAT32_ATI 0x8818
#define GL_LUMINANCE_ALPHA32F_ARB 0x8819
#define GL_LUMINANCE_ALPHA32F_EXT 0x8819
#define GL_LUMINANCE_ALPHA_FLOAT32_APPLE 0x8819
#define GL_LUMINANCE_ALPHA_FLOAT32_ATI 0x8819
#define GL_RGBA16F 0x881A
#define GL_RGBA16F_ARB 0x881A
#define GL_RGBA16F_EXT 0x881A
#define GL_RGBA_FLOAT16_APPLE 0x881A
#define GL_RGBA_FLOAT16_ATI 0x881A
#define GL_RGB16F 0x881B
#define GL_RGB16F_ARB 0x881B
#define GL_RGB16F_EXT 0x881B
#define GL_RGB_FLOAT16_APPLE 0x881B
#define GL_RGB_FLOAT16_ATI 0x881B
#define GL_ALPHA16F_ARB 0x881C
#define GL_ALPHA16F_EXT 0x881C
#define GL_ALPHA_FLOAT16_APPLE 0x881C
#define GL_ALPHA_FLOAT16_ATI 0x881C
#define GL_INTENSITY16F_ARB 0x881D
#define GL_INTENSITY_FLOAT16_APPLE 0x881D
#define GL_INTENSITY_FLOAT16_ATI 0x881D
#define GL_LUMINANCE16F_ARB 0x881E
#define GL_LUMINANCE16F_EXT 0x881E
#define GL_LUMINANCE_FLOAT16_APPLE 0x881E
#define GL_LUMINANCE_FLOAT16_ATI 0x881E
#define GL_LUMINANCE_ALPHA16F_ARB 0x881F
#define GL_LUMINANCE_ALPHA16F_EXT 0x881F
#define GL_LUMINANCE_ALPHA_FLOAT16_APPLE 0x881F
#define GL_LUMINANCE_ALPHA_FLOAT16_ATI 0x881F
#define GL_RGBA_FLOAT_MODE_ARB 0x8820
#define GL_RGBA_FLOAT_MODE_ATI 0x8820
#define GL_WRITEONLY_RENDERING_QCOM 0x8823
#define GL_MAX_DRAW_BUFFERS 0x8824
#define GL_MAX_DRAW_BUFFERS_ARB 0x8824
#define GL_MAX_DRAW_BUFFERS_ATI 0x8824
#define GL_MAX_DRAW_BUFFERS_EXT 0x8824
#define GL_MAX_DRAW_BUFFERS_NV 0x8824
#define GL_DRAW_BUFFER0 0x8825
#define GL_DRAW_BUFFER0_ARB 0x8825
#define GL_DRAW_BUFFER0_ATI 0x8825
#define GL_DRAW_BUFFER0_EXT 0x8825
#define GL_DRAW_BUFFER0_NV 0x8825
#define GL_DRAW_BUFFER1 0x8826
#define GL_DRAW_BUFFER1_ARB 0x8826
#define GL_DRAW_BUFFER1_ATI 0x8826
#define GL_DRAW_BUFFER1_EXT 0x8826
#define GL_DRAW_BUFFER1_NV 0x8826
#define GL_DRAW_BUFFER2 0x8827
#define GL_DRAW_BUFFER2_ARB 0x8827
#define GL_DRAW_BUFFER2_ATI 0x8827
#define GL_DRAW_BUFFER2_EXT 0x8827
#define GL_DRAW_BUFFER2_NV 0x8827
#define GL_DRAW_BUFFER3 0x8828
#define GL_DRAW_BUFFER3_ARB 0x8828
#define GL_DRAW_BUFFER3_ATI 0x8828
#define GL_DRAW_BUFFER3_EXT 0x8828
#define GL_DRAW_BUFFER3_NV 0x8828
#define GL_DRAW_BUFFER4 0x8829
#define GL_DRAW_BUFFER4_ARB 0x8829
#define GL_DRAW_BUFFER4_ATI 0x8829
#define GL_DRAW_BUFFER4_EXT 0x8829
#define GL_DRAW_BUFFER4_NV 0x8829
#define GL_DRAW_BUFFER5 0x882A
#define GL_DRAW_BUFFER5_ARB 0x882A
#define GL_DRAW_BUFFER5_ATI 0x882A
#define GL_DRAW_BUFFER5_EXT 0x882A
#define GL_DRAW_BUFFER5_NV 0x882A
#define GL_DRAW_BUFFER6 0x882B
#define GL_DRAW_BUFFER6_ARB 0x882B
#define GL_DRAW_BUFFER6_ATI 0x882B
#define GL_DRAW_BUFFER6_EXT 0x882B
#define GL_DRAW_BUFFER6_NV 0x882B
#define GL_DRAW_BUFFER7 0x882C
#define GL_DRAW_BUFFER7_ARB 0x882C
#define GL_DRAW_BUFFER7_ATI 0x882C
#define GL_DRAW_BUFFER7_EXT 0x882C
#define GL_DRAW_BUFFER7_NV 0x882C
#define GL_DRAW_BUFFER8 0x882D
#define GL_DRAW_BUFFER8_ARB 0x882D
#define GL_DRAW_BUFFER8_ATI 0x882D
#define GL_DRAW_BUFFER8_EXT 0x882D
#define GL_DRAW_BUFFER8_NV 0x882D
#define GL_DRAW_BUFFER9 0x882E
#define GL_DRAW_BUFFER9_ARB 0x882E
#define GL_DRAW_BUFFER9_ATI 0x882E
#define GL_DRAW_BUFFER9_EXT 0x882E
#define GL_DRAW_BUFFER9_NV 0x882E
#define GL_DRAW_BUFFER10 0x882F
#define GL_DRAW_BUFFER10_ARB 0x882F
#define GL_DRAW_BUFFER10_ATI 0x882F
#define GL_DRAW_BUFFER10_EXT 0x882F
#define GL_DRAW_BUFFER10_NV 0x882F
#define GL_DRAW_BUFFER11 0x8830
#define GL_DRAW_BUFFER11_ARB 0x8830
#define GL_DRAW_BUFFER11_ATI 0x8830
#define GL_DRAW_BUFFER11_EXT 0x8830
#define GL_DRAW_BUFFER11_NV 0x8830
#define GL_DRAW_BUFFER12 0x8831
#define GL_DRAW_BUFFER12_ARB 0x8831
#define GL_DRAW_BUFFER12_ATI 0x8831
#define GL_DRAW_BUFFER12_EXT 0x8831
#define GL_DRAW_BUFFER12_NV 0x8831
#define GL_DRAW_BUFFER13 0x8832
#define GL_DRAW_BUFFER13_ARB 0x8832
#define GL_DRAW_BUFFER13_ATI 0x8832
#define GL_DRAW_BUFFER13_EXT 0x8832
#define GL_DRAW_BUFFER13_NV 0x8832
#define GL_DRAW_BUFFER14 0x8833
#define GL_DRAW_BUFFER14_ARB 0x8833
#define GL_DRAW_BUFFER14_ATI 0x8833
#define GL_DRAW_BUFFER14_EXT 0x8833
#define GL_DRAW_BUFFER14_NV 0x8833
#define GL_DRAW_BUFFER15 0x8834
#define GL_DRAW_BUFFER15_ARB 0x8834
#define GL_DRAW_BUFFER15_ATI 0x8834
#define GL_DRAW_BUFFER15_EXT 0x8834
#define GL_DRAW_BUFFER15_NV 0x8834
#define GL_COLOR_CLEAR_UNCLAMPED_VALUE_ATI 0x8835
#define GL_COMPRESSED_LUMINANCE_ALPHA_3DC_ATI 0x8837
#define GL_BLEND_EQUATION_ALPHA 0x883D
#define GL_BLEND_EQUATION_ALPHA_EXT 0x883D
#define GL_BLEND_EQUATION_ALPHA_OES 0x883D
#define GL_SUBSAMPLE_DISTANCE_AMD 0x883F
#define GL_MATRIX_PALETTE_ARB 0x8840
#define GL_MATRIX_PALETTE_OES 0x8840
#define GL_MAX_MATRIX_PALETTE_STACK_DEPTH_ARB 0x8841
#define GL_MAX_PALETTE_MATRICES_ARB 0x8842
#define GL_MAX_PALETTE_MATRICES_OES 0x8842
#define GL_CURRENT_PALETTE_MATRIX_ARB 0x8843
#define GL_CURRENT_PALETTE_MATRIX_OES 0x8843
#define GL_MATRIX_INDEX_ARRAY_ARB 0x8844
#define GL_MATRIX_INDEX_ARRAY_OES 0x8844
#define GL_CURRENT_MATRIX_INDEX_ARB 0x8845
#define GL_MATRIX_INDEX_ARRAY_SIZE_ARB 0x8846
#define GL_MATRIX_INDEX_ARRAY_SIZE_OES 0x8846
#define GL_MATRIX_INDEX_ARRAY_TYPE_ARB 0x8847
#define GL_MATRIX_INDEX_ARRAY_TYPE_OES 0x8847
#define GL_MATRIX_INDEX_ARRAY_STRIDE_ARB 0x8848
#define GL_MATRIX_INDEX_ARRAY_STRIDE_OES 0x8848
#define GL_MATRIX_INDEX_ARRAY_POINTER_ARB 0x8849
#define GL_MATRIX_INDEX_ARRAY_POINTER_OES 0x8849
#define GL_TEXTURE_DEPTH_SIZE 0x884A
#define GL_TEXTURE_DEPTH_SIZE_ARB 0x884A
#define GL_DEPTH_TEXTURE_MODE 0x884B
#define GL_DEPTH_TEXTURE_MODE_ARB 0x884B
#define GL_TEXTURE_COMPARE_MODE 0x884C
#define GL_TEXTURE_COMPARE_MODE_ARB 0x884C
#define GL_TEXTURE_COMPARE_MODE_EXT 0x884C
#define GL_TEXTURE_COMPARE_FUNC 0x884D
#define GL_TEXTURE_COMPARE_FUNC_ARB 0x884D
#define GL_TEXTURE_COMPARE_FUNC_EXT 0x884D
#define GL_COMPARE_REF_DEPTH_TO_TEXTURE_EXT 0x884E
#define GL_COMPARE_REF_TO_TEXTURE 0x884E
#define GL_COMPARE_REF_TO_TEXTURE_EXT 0x884E
#define GL_COMPARE_R_TO_TEXTURE 0x884E
#define GL_COMPARE_R_TO_TEXTURE_ARB 0x884E
#define GL_TEXTURE_CUBE_MAP_SEAMLESS 0x884F
#define GL_OFFSET_PROJECTIVE_TEXTURE_2D_NV 0x8850
#define GL_OFFSET_PROJECTIVE_TEXTURE_2D_SCALE_NV 0x8851
#define GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_NV 0x8852
#define GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_SCALE_NV 0x8853
#define GL_OFFSET_HILO_TEXTURE_2D_NV 0x8854
#define GL_OFFSET_HILO_TEXTURE_RECTANGLE_NV 0x8855
#define GL_OFFSET_HILO_PROJECTIVE_TEXTURE_2D_NV 0x8856
#define GL_OFFSET_HILO_PROJECTIVE_TEXTURE_RECTANGLE_NV 0x8857
#define GL_DEPENDENT_HILO_TEXTURE_2D_NV 0x8858
#define GL_DEPENDENT_RGB_TEXTURE_3D_NV 0x8859
#define GL_DEPENDENT_RGB_TEXTURE_CUBE_MAP_NV 0x885A
#define GL_DOT_PRODUCT_PASS_THROUGH_NV 0x885B
#define GL_DOT_PRODUCT_TEXTURE_1D_NV 0x885C
#define GL_DOT_PRODUCT_AFFINE_DEPTH_REPLACE_NV 0x885D
#define GL_HILO8_NV 0x885E
#define GL_SIGNED_HILO8_NV 0x885F
#define GL_FORCE_BLUE_TO_ONE_NV 0x8860
#define GL_POINT_SPRITE 0x8861
#define GL_POINT_SPRITE_ARB 0x8861
#define GL_POINT_SPRITE_NV 0x8861
#define GL_POINT_SPRITE_OES 0x8861
#define GL_COORD_REPLACE 0x8862
#define GL_COORD_REPLACE_ARB 0x8862
#define GL_COORD_REPLACE_NV 0x8862
#define GL_COORD_REPLACE_OES 0x8862
#define GL_POINT_SPRITE_R_MODE_NV 0x8863
#define GL_PIXEL_COUNTER_BITS_NV 0x8864
#define GL_QUERY_COUNTER_BITS 0x8864
#define GL_QUERY_COUNTER_BITS_ARB 0x8864
#define GL_QUERY_COUNTER_BITS_EXT 0x8864
#define GL_CURRENT_OCCLUSION_QUERY_ID_NV 0x8865
#define GL_CURRENT_QUERY 0x8865
#define GL_CURRENT_QUERY_ARB 0x8865
#define GL_CURRENT_QUERY_EXT 0x8865
#define GL_PIXEL_COUNT_NV 0x8866
#define GL_QUERY_RESULT 0x8866
#define GL_QUERY_RESULT_ARB 0x8866
#define GL_QUERY_RESULT_EXT 0x8866
#define GL_PIXEL_COUNT_AVAILABLE_NV 0x8867
#define GL_QUERY_RESULT_AVAILABLE 0x8867
#define GL_QUERY_RESULT_AVAILABLE_ARB 0x8867
#define GL_QUERY_RESULT_AVAILABLE_EXT 0x8867
#define GL_MAX_FRAGMENT_PROGRAM_LOCAL_PARAMETERS_NV 0x8868
#define GL_MAX_VERTEX_ATTRIBS 0x8869
#define GL_MAX_VERTEX_ATTRIBS_ARB 0x8869
#define GL_VERTEX_ATTRIB_ARRAY_NORMALIZED 0x886A
#define GL_VERTEX_ATTRIB_ARRAY_NORMALIZED_ARB 0x886A
#define GL_MAX_TESS_CONTROL_INPUT_COMPONENTS 0x886C
#define GL_MAX_TESS_CONTROL_INPUT_COMPONENTS_EXT 0x886C
#define GL_MAX_TESS_CONTROL_INPUT_COMPONENTS_OES 0x886C
#define GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS 0x886D
#define GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS_EXT 0x886D
#define GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS_OES 0x886D
#define GL_DEPTH_STENCIL_TO_RGBA_NV 0x886E
#define GL_DEPTH_STENCIL_TO_BGRA_NV 0x886F
#define GL_FRAGMENT_PROGRAM_NV 0x8870
#define GL_MAX_TEXTURE_COORDS 0x8871
#define GL_MAX_TEXTURE_COORDS_ARB 0x8871
#define GL_MAX_TEXTURE_COORDS_NV 0x8871
#define GL_MAX_TEXTURE_IMAGE_UNITS 0x8872
#define GL_MAX_TEXTURE_IMAGE_UNITS_ARB 0x8872
#define GL_MAX_TEXTURE_IMAGE_UNITS_NV 0x8872
#define GL_FRAGMENT_PROGRAM_BINDING_NV 0x8873
#define GL_PROGRAM_ERROR_STRING_ARB 0x8874
#define GL_PROGRAM_ERROR_STRING_NV 0x8874
#define GL_PROGRAM_FORMAT_ASCII_ARB 0x8875
#define GL_PROGRAM_FORMAT_ARB 0x8876
#define GL_WRITE_PIXEL_DATA_RANGE_NV 0x8878
#define GL_READ_PIXEL_DATA_RANGE_NV 0x8879
#define GL_WRITE_PIXEL_DATA_RANGE_LENGTH_NV 0x887A
#define GL_READ_PIXEL_DATA_RANGE_LENGTH_NV 0x887B
#define GL_WRITE_PIXEL_DATA_RANGE_POINTER_NV 0x887C
#define GL_READ_PIXEL_DATA_RANGE_POINTER_NV 0x887D
#define GL_GEOMETRY_SHADER_INVOCATIONS 0x887F
#define GL_GEOMETRY_SHADER_INVOCATIONS_EXT 0x887F
#define GL_GEOMETRY_SHADER_INVOCATIONS_OES 0x887F
#define GL_FLOAT_R_NV 0x8880
#define GL_FLOAT_RG_NV 0x8881
#define GL_FLOAT_RGB_NV 0x8882
#define GL_FLOAT_RGBA_NV 0x8883
#define GL_FLOAT_R16_NV 0x8884
#define GL_FLOAT_R32_NV 0x8885
#define GL_FLOAT_RG16_NV 0x8886
#define GL_FLOAT_RG32_NV 0x8887
#define GL_FLOAT_RGB16_NV 0x8888
#define GL_FLOAT_RGB32_NV 0x8889
#define GL_FLOAT_RGBA16_NV 0x888A
#define GL_FLOAT_RGBA32_NV 0x888B
#define GL_TEXTURE_FLOAT_COMPONENTS_NV 0x888C
#define GL_FLOAT_CLEAR_COLOR_VALUE_NV 0x888D
#define GL_FLOAT_RGBA_MODE_NV 0x888E
#define GL_TEXTURE_UNSIGNED_REMAP_MODE_NV 0x888F
#define GL_DEPTH_BOUNDS_TEST_EXT 0x8890
#define GL_DEPTH_BOUNDS_EXT 0x8891
#define GL_ARRAY_BUFFER 0x8892
#define GL_ARRAY_BUFFER_ARB 0x8892
#define GL_ELEMENT_ARRAY_BUFFER 0x8893
#define GL_ELEMENT_ARRAY_BUFFER_ARB 0x8893
#define GL_ARRAY_BUFFER_BINDING 0x8894
#define GL_ARRAY_BUFFER_BINDING_ARB 0x8894
#define GL_ELEMENT_ARRAY_BUFFER_BINDING 0x8895
#define GL_ELEMENT_ARRAY_BUFFER_BINDING_ARB 0x8895
#define GL_VERTEX_ARRAY_BUFFER_BINDING 0x8896
#define GL_VERTEX_ARRAY_BUFFER_BINDING_ARB 0x8896
#define GL_NORMAL_ARRAY_BUFFER_BINDING 0x8897
#define GL_NORMAL_ARRAY_BUFFER_BINDING_ARB 0x8897
#define GL_COLOR_ARRAY_BUFFER_BINDING 0x8898
#define GL_COLOR_ARRAY_BUFFER_BINDING_ARB 0x8898
#define GL_INDEX_ARRAY_BUFFER_BINDING 0x8899
#define GL_INDEX_ARRAY_BUFFER_BINDING_ARB 0x8899
#define GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING 0x889A
#define GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING_ARB 0x889A
#define GL_EDGE_FLAG_ARRAY_BUFFER_BINDING 0x889B
#define GL_EDGE_FLAG_ARRAY_BUFFER_BINDING_ARB 0x889B
#define GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING 0x889C
#define GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING_ARB 0x889C
#define GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING 0x889D
#define GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING_ARB 0x889D
#define GL_FOG_COORD_ARRAY_BUFFER_BINDING 0x889D
#define GL_WEIGHT_ARRAY_BUFFER_BINDING 0x889E
#define GL_WEIGHT_ARRAY_BUFFER_BINDING_ARB 0x889E
#define GL_WEIGHT_ARRAY_BUFFER_BINDING_OES 0x889E
#define GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING 0x889F
#define GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING_ARB 0x889F
#define GL_PROGRAM_INSTRUCTIONS_ARB 0x88A0
#define GL_MAX_PROGRAM_INSTRUCTIONS_ARB 0x88A1
#define GL_PROGRAM_NATIVE_INSTRUCTIONS_ARB 0x88A2
#define GL_MAX_PROGRAM_NATIVE_INSTRUCTIONS_ARB 0x88A3
#define GL_PROGRAM_TEMPORARIES_ARB 0x88A4
#define GL_MAX_PROGRAM_TEMPORARIES_ARB 0x88A5
#define GL_PROGRAM_NATIVE_TEMPORARIES_ARB 0x88A6
#define GL_MAX_PROGRAM_NATIVE_TEMPORARIES_ARB 0x88A7
#define GL_PROGRAM_PARAMETERS_ARB 0x88A8
#define GL_MAX_PROGRAM_PARAMETERS_ARB 0x88A9
#define GL_PROGRAM_NATIVE_PARAMETERS_ARB 0x88AA
#define GL_MAX_PROGRAM_NATIVE_PARAMETERS_ARB 0x88AB
#define GL_PROGRAM_ATTRIBS_ARB 0x88AC
#define GL_MAX_PROGRAM_ATTRIBS_ARB 0x88AD
#define GL_PROGRAM_NATIVE_ATTRIBS_ARB 0x88AE
#define GL_MAX_PROGRAM_NATIVE_ATTRIBS_ARB 0x88AF
#define GL_PROGRAM_ADDRESS_REGISTERS_ARB 0x88B0
#define GL_MAX_PROGRAM_ADDRESS_REGISTERS_ARB 0x88B1
#define GL_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB 0x88B2
#define GL_MAX_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB 0x88B3
#define GL_MAX_PROGRAM_LOCAL_PARAMETERS_ARB 0x88B4
#define GL_MAX_PROGRAM_ENV_PARAMETERS_ARB 0x88B5
#define GL_PROGRAM_UNDER_NATIVE_LIMITS_ARB 0x88B6
#define GL_TRANSPOSE_CURRENT_MATRIX_ARB 0x88B7
#define GL_READ_ONLY 0x88B8
#define GL_READ_ONLY_ARB 0x88B8
#define GL_WRITE_ONLY 0x88B9
#define GL_WRITE_ONLY_ARB 0x88B9
#define GL_WRITE_ONLY_OES 0x88B9
#define GL_READ_WRITE 0x88BA
#define GL_READ_WRITE_ARB 0x88BA
#define GL_BUFFER_ACCESS 0x88BB
#define GL_BUFFER_ACCESS_ARB 0x88BB
#define GL_BUFFER_ACCESS_OES 0x88BB
#define GL_BUFFER_MAPPED 0x88BC
#define GL_BUFFER_MAPPED_ARB 0x88BC
#define GL_BUFFER_MAPPED_OES 0x88BC
#define GL_BUFFER_MAP_POINTER 0x88BD
#define GL_BUFFER_MAP_POINTER_ARB 0x88BD
#define GL_BUFFER_MAP_POINTER_OES 0x88BD
#define GL_WRITE_DISCARD_NV 0x88BE
#define GL_TIME_ELAPSED 0x88BF
#define GL_TIME_ELAPSED_EXT 0x88BF
#define GL_MATRIX0_ARB 0x88C0
#define GL_MATRIX1_ARB 0x88C1
#define GL_MATRIX2_ARB 0x88C2
#define GL_MATRIX3_ARB 0x88C3
#define GL_MATRIX4_ARB 0x88C4
#define GL_MATRIX5_ARB 0x88C5
#define GL_MATRIX6_ARB 0x88C6
#define GL_MATRIX7_ARB 0x88C7
#define GL_MATRIX8_ARB 0x88C8
#define GL_MATRIX9_ARB 0x88C9
#define GL_MATRIX10_ARB 0x88CA
#define GL_MATRIX11_ARB 0x88CB
#define GL_MATRIX12_ARB 0x88CC
#define GL_MATRIX13_ARB 0x88CD
#define GL_MATRIX14_ARB 0x88CE
#define GL_MATRIX15_ARB 0x88CF
#define GL_MATRIX16_ARB 0x88D0
#define GL_MATRIX17_ARB 0x88D1
#define GL_MATRIX18_ARB 0x88D2
#define GL_MATRIX19_ARB 0x88D3
#define GL_MATRIX20_ARB 0x88D4
#define GL_MATRIX21_ARB 0x88D5
#define GL_MATRIX22_ARB 0x88D6
#define GL_MATRIX23_ARB 0x88D7
#define GL_MATRIX24_ARB 0x88D8
#define GL_MATRIX25_ARB 0x88D9
#define GL_MATRIX26_ARB 0x88DA
#define GL_MATRIX27_ARB 0x88DB
#define GL_MATRIX28_ARB 0x88DC
#define GL_MATRIX29_ARB 0x88DD
#define GL_MATRIX30_ARB 0x88DE
#define GL_MATRIX31_ARB 0x88DF
#define GL_STREAM_DRAW 0x88E0
#define GL_STREAM_DRAW_ARB 0x88E0
#define GL_STREAM_READ 0x88E1
#define GL_STREAM_READ_ARB 0x88E1
#define GL_STREAM_COPY 0x88E2
#define GL_STREAM_COPY_ARB 0x88E2
#define GL_STATIC_DRAW 0x88E4
#define GL_STATIC_DRAW_ARB 0x88E4
#define GL_STATIC_READ 0x88E5
#define GL_STATIC_READ_ARB 0x88E5
#define GL_STATIC_COPY 0x88E6
#define GL_STATIC_COPY_ARB 0x88E6
#define GL_DYNAMIC_DRAW 0x88E8
#define GL_DYNAMIC_DRAW_ARB 0x88E8
#define GL_DYNAMIC_READ 0x88E9
#define GL_DYNAMIC_READ_ARB 0x88E9
#define GL_DYNAMIC_COPY 0x88EA
#define GL_DYNAMIC_COPY_ARB 0x88EA
#define GL_PIXEL_PACK_BUFFER 0x88EB
#define GL_PIXEL_PACK_BUFFER_ARB 0x88EB
#define GL_PIXEL_PACK_BUFFER_EXT 0x88EB
#define GL_PIXEL_PACK_BUFFER_NV 0x88EB
#define GL_PIXEL_UNPACK_BUFFER 0x88EC
#define GL_PIXEL_UNPACK_BUFFER_ARB 0x88EC
#define GL_PIXEL_UNPACK_BUFFER_EXT 0x88EC
#define GL_PIXEL_UNPACK_BUFFER_NV 0x88EC
#define GL_PIXEL_PACK_BUFFER_BINDING 0x88ED
#define GL_PIXEL_PACK_BUFFER_BINDING_ARB 0x88ED
#define GL_PIXEL_PACK_BUFFER_BINDING_EXT 0x88ED
#define GL_PIXEL_PACK_BUFFER_BINDING_NV 0x88ED
#define GL_ETC1_SRGB8_NV 0x88EE
#define GL_PIXEL_UNPACK_BUFFER_BINDING 0x88EF
#define GL_PIXEL_UNPACK_BUFFER_BINDING_ARB 0x88EF
#define GL_PIXEL_UNPACK_BUFFER_BINDING_EXT 0x88EF
#define GL_PIXEL_UNPACK_BUFFER_BINDING_NV 0x88EF
#define GL_DEPTH24_STENCIL8 0x88F0
#define GL_DEPTH24_STENCIL8_EXT 0x88F0
#define GL_DEPTH24_STENCIL8_OES 0x88F0
#define GL_TEXTURE_STENCIL_SIZE 0x88F1
#define GL_TEXTURE_STENCIL_SIZE_EXT 0x88F1
#define GL_STENCIL_TAG_BITS_EXT 0x88F2
#define GL_STENCIL_CLEAR_TAG_VALUE_EXT 0x88F3
#define GL_MAX_PROGRAM_EXEC_INSTRUCTIONS_NV 0x88F4
#define GL_MAX_PROGRAM_CALL_DEPTH_NV 0x88F5
#define GL_MAX_PROGRAM_IF_DEPTH_NV 0x88F6
#define GL_MAX_PROGRAM_LOOP_DEPTH_NV 0x88F7
#define GL_MAX_PROGRAM_LOOP_COUNT_NV 0x88F8
#define GL_SRC1_COLOR 0x88F9
#define GL_SRC1_COLOR_EXT 0x88F9
#define GL_ONE_MINUS_SRC1_COLOR 0x88FA
#define GL_ONE_MINUS_SRC1_COLOR_EXT 0x88FA
#define GL_ONE_MINUS_SRC1_ALPHA 0x88FB
#define GL_ONE_MINUS_SRC1_ALPHA_EXT 0x88FB
#define GL_MAX_DUAL_SOURCE_DRAW_BUFFERS 0x88FC
#define GL_MAX_DUAL_SOURCE_DRAW_BUFFERS_EXT 0x88FC
#define GL_VERTEX_ATTRIB_ARRAY_INTEGER 0x88FD
#define GL_VERTEX_ATTRIB_ARRAY_INTEGER_EXT 0x88FD
#define GL_VERTEX_ATTRIB_ARRAY_INTEGER_NV 0x88FD
#define GL_VERTEX_ATTRIB_ARRAY_DIVISOR 0x88FE
#define GL_VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE 0x88FE
#define GL_VERTEX_ATTRIB_ARRAY_DIVISOR_ARB 0x88FE
#define GL_VERTEX_ATTRIB_ARRAY_DIVISOR_EXT 0x88FE
#define GL_VERTEX_ATTRIB_ARRAY_DIVISOR_NV 0x88FE
#define GL_MAX_ARRAY_TEXTURE_LAYERS 0x88FF
#define GL_MAX_ARRAY_TEXTURE_LAYERS_EXT 0x88FF
#define GL_MIN_PROGRAM_TEXEL_OFFSET 0x8904
#define GL_MIN_PROGRAM_TEXEL_OFFSET_EXT 0x8904
#define GL_MIN_PROGRAM_TEXEL_OFFSET_NV 0x8904
#define GL_MAX_PROGRAM_TEXEL_OFFSET 0x8905
#define GL_MAX_PROGRAM_TEXEL_OFFSET_EXT 0x8905
#define GL_MAX_PROGRAM_TEXEL_OFFSET_NV 0x8905
#define GL_PROGRAM_ATTRIB_COMPONENTS_NV 0x8906
#define GL_PROGRAM_RESULT_COMPONENTS_NV 0x8907
#define GL_MAX_PROGRAM_ATTRIB_COMPONENTS_NV 0x8908
#define GL_MAX_PROGRAM_RESULT_COMPONENTS_NV 0x8909
#define GL_CG_VERTEX_SHADER_EXT 0x890E
#define GL_CG_FRAGMENT_SHADER_EXT 0x890F
#define GL_STENCIL_TEST_TWO_SIDE_EXT 0x8910
#define GL_ACTIVE_STENCIL_FACE_EXT 0x8911
#define GL_MIRROR_CLAMP_TO_BORDER_EXT 0x8912
#define GL_SAMPLES_PASSED 0x8914
#define GL_SAMPLES_PASSED_ARB 0x8914
#define GL_GEOMETRY_LINKED_VERTICES_OUT_EXT 0x8916
#define GL_GEOMETRY_LINKED_VERTICES_OUT_OES 0x8916
#define GL_GEOMETRY_VERTICES_OUT 0x8916
#define GL_GEOMETRY_INPUT_TYPE 0x8917
#define GL_GEOMETRY_LINKED_INPUT_TYPE_EXT 0x8917
#define GL_GEOMETRY_LINKED_INPUT_TYPE_OES 0x8917
#define GL_GEOMETRY_LINKED_OUTPUT_TYPE_EXT 0x8918
#define GL_GEOMETRY_LINKED_OUTPUT_TYPE_OES 0x8918
#define GL_GEOMETRY_OUTPUT_TYPE 0x8918
#define GL_SAMPLER_BINDING 0x8919
#define GL_CLAMP_VERTEX_COLOR 0x891A
#define GL_CLAMP_VERTEX_COLOR_ARB 0x891A
#define GL_CLAMP_FRAGMENT_COLOR 0x891B
#define GL_CLAMP_FRAGMENT_COLOR_ARB 0x891B
#define GL_CLAMP_READ_COLOR 0x891C
#define GL_CLAMP_READ_COLOR_ARB 0x891C
#define GL_FIXED_ONLY 0x891D
#define GL_FIXED_ONLY_ARB 0x891D
#define GL_TESS_CONTROL_PROGRAM_NV 0x891E
#define GL_TESS_EVALUATION_PROGRAM_NV 0x891F
#define GL_FRAGMENT_SHADER_ATI 0x8920
#define GL_REG_0_ATI 0x8921
#define GL_REG_1_ATI 0x8922
#define GL_REG_2_ATI 0x8923
#define GL_REG_3_ATI 0x8924
#define GL_REG_4_ATI 0x8925
#define GL_REG_5_ATI 0x8926
#define GL_REG_6_ATI 0x8927
#define GL_REG_7_ATI 0x8928
#define GL_REG_8_ATI 0x8929
#define GL_REG_9_ATI 0x892A
#define GL_REG_10_ATI 0x892B
#define GL_REG_11_ATI 0x892C
#define GL_REG_12_ATI 0x892D
#define GL_REG_13_ATI 0x892E
#define GL_REG_14_ATI 0x892F
#define GL_REG_15_ATI 0x8930
#define GL_REG_16_ATI 0x8931
#define GL_REG_17_ATI 0x8932
#define GL_REG_18_ATI 0x8933
#define GL_REG_19_ATI 0x8934
#define GL_REG_20_ATI 0x8935
#define GL_REG_21_ATI 0x8936
#define GL_REG_22_ATI 0x8937
#define GL_REG_23_ATI 0x8938
#define GL_REG_24_ATI 0x8939
#define GL_REG_25_ATI 0x893A
#define GL_REG_26_ATI 0x893B
#define GL_REG_27_ATI 0x893C
#define GL_REG_28_ATI 0x893D
#define GL_REG_29_ATI 0x893E
#define GL_REG_30_ATI 0x893F
#define GL_REG_31_ATI 0x8940
#define GL_CON_0_ATI 0x8941
#define GL_CON_1_ATI 0x8942
#define GL_CON_2_ATI 0x8943
#define GL_CON_3_ATI 0x8944
#define GL_CON_4_ATI 0x8945
#define GL_CON_5_ATI 0x8946
#define GL_CON_6_ATI 0x8947
#define GL_CON_7_ATI 0x8948
#define GL_CON_8_ATI 0x8949
#define GL_CON_9_ATI 0x894A
#define GL_CON_10_ATI 0x894B
#define GL_CON_11_ATI 0x894C
#define GL_CON_12_ATI 0x894D
#define GL_CON_13_ATI 0x894E
#define GL_CON_14_ATI 0x894F
#define GL_CON_15_ATI 0x8950
#define GL_CON_16_ATI 0x8951
#define GL_CON_17_ATI 0x8952
#define GL_CON_18_ATI 0x8953
#define GL_CON_19_ATI 0x8954
#define GL_CON_20_ATI 0x8955
#define GL_CON_21_ATI 0x8956
#define GL_CON_22_ATI 0x8957
#define GL_CON_23_ATI 0x8958
#define GL_CON_24_ATI 0x8959
#define GL_CON_25_ATI 0x895A
#define GL_CON_26_ATI 0x895B
#define GL_CON_27_ATI 0x895C
#define GL_CON_28_ATI 0x895D
#define GL_CON_29_ATI 0x895E
#define GL_CON_30_ATI 0x895F
#define GL_CON_31_ATI 0x8960
#define GL_MOV_ATI 0x8961
#define GL_ADD_ATI 0x8963
#define GL_MUL_ATI 0x8964
#define GL_SUB_ATI 0x8965
#define GL_DOT3_ATI 0x8966
#define GL_DOT4_ATI 0x8967
#define GL_MAD_ATI 0x8968
#define GL_LERP_ATI 0x8969
#define GL_CND_ATI 0x896A
#define GL_CND0_ATI 0x896B
#define GL_DOT2_ADD_ATI 0x896C
#define GL_SECONDARY_INTERPOLATOR_ATI 0x896D
#define GL_NUM_FRAGMENT_REGISTERS_ATI 0x896E
#define GL_NUM_FRAGMENT_CONSTANTS_ATI 0x896F
#define GL_NUM_PASSES_ATI 0x8970
#define GL_NUM_INSTRUCTIONS_PER_PASS_ATI 0x8971
#define GL_NUM_INSTRUCTIONS_TOTAL_ATI 0x8972
#define GL_NUM_INPUT_INTERPOLATOR_COMPONENTS_ATI 0x8973
#define GL_NUM_LOOPBACK_COMPONENTS_ATI 0x8974
#define GL_COLOR_ALPHA_PAIRING_ATI 0x8975
#define GL_SWIZZLE_STR_ATI 0x8976
#define GL_SWIZZLE_STQ_ATI 0x8977
#define GL_SWIZZLE_STR_DR_ATI 0x8978
#define GL_SWIZZLE_STQ_DQ_ATI 0x8979
#define GL_SWIZZLE_STRQ_ATI 0x897A
#define GL_SWIZZLE_STRQ_DQ_ATI 0x897B
#define GL_INTERLACE_OML 0x8980
#define GL_INTERLACE_READ_OML 0x8981
#define GL_FORMAT_SUBSAMPLE_24_24_OML 0x8982
#define GL_FORMAT_SUBSAMPLE_244_244_OML 0x8983
#define GL_PACK_RESAMPLE_OML 0x8984
#define GL_UNPACK_RESAMPLE_OML 0x8985
#define GL_RESAMPLE_REPLICATE_OML 0x8986
#define GL_RESAMPLE_ZERO_FILL_OML 0x8987
#define GL_RESAMPLE_AVERAGE_OML 0x8988
#define GL_RESAMPLE_DECIMATE_OML 0x8989
#define GL_POINT_SIZE_ARRAY_TYPE_OES 0x898A
#define GL_POINT_SIZE_ARRAY_STRIDE_OES 0x898B
#define GL_POINT_SIZE_ARRAY_POINTER_OES 0x898C
#define GL_MODELVIEW_MATRIX_FLOAT_AS_INT_BITS_OES 0x898D
#define GL_PROJECTION_MATRIX_FLOAT_AS_INT_BITS_OES 0x898E
#define GL_TEXTURE_MATRIX_FLOAT_AS_INT_BITS_OES 0x898F
#define GL_VERTEX_ATTRIB_MAP1_APPLE 0x8A00
#define GL_VERTEX_ATTRIB_MAP2_APPLE 0x8A01
#define GL_VERTEX_ATTRIB_MAP1_SIZE_APPLE 0x8A02
#define GL_VERTEX_ATTRIB_MAP1_COEFF_APPLE 0x8A03
#define GL_VERTEX_ATTRIB_MAP1_ORDER_APPLE 0x8A04
#define GL_VERTEX_ATTRIB_MAP1_DOMAIN_APPLE 0x8A05
#define GL_VERTEX_ATTRIB_MAP2_SIZE_APPLE 0x8A06
#define GL_VERTEX_ATTRIB_MAP2_COEFF_APPLE 0x8A07
#define GL_VERTEX_ATTRIB_MAP2_ORDER_APPLE 0x8A08
#define GL_VERTEX_ATTRIB_MAP2_DOMAIN_APPLE 0x8A09
#define GL_DRAW_PIXELS_APPLE 0x8A0A
#define GL_FENCE_APPLE 0x8A0B
#define GL_ELEMENT_ARRAY_APPLE 0x8A0C
#define GL_ELEMENT_ARRAY_TYPE_APPLE 0x8A0D
#define GL_ELEMENT_ARRAY_POINTER_APPLE 0x8A0E
#define GL_COLOR_FLOAT_APPLE 0x8A0F
#define GL_UNIFORM_BUFFER 0x8A11
#define GL_BUFFER_SERIALIZED_MODIFY_APPLE 0x8A12
#define GL_BUFFER_FLUSHING_UNMAP_APPLE 0x8A13
#define GL_AUX_DEPTH_STENCIL_APPLE 0x8A14
#define GL_PACK_ROW_BYTES_APPLE 0x8A15
#define GL_UNPACK_ROW_BYTES_APPLE 0x8A16
#define GL_RELEASED_APPLE 0x8A19
#define GL_VOLATILE_APPLE 0x8A1A
#define GL_RETAINED_APPLE 0x8A1B
#define GL_UNDEFINED_APPLE 0x8A1C
#define GL_PURGEABLE_APPLE 0x8A1D
#define GL_RGB_422_APPLE 0x8A1F
#define GL_UNIFORM_BUFFER_BINDING 0x8A28
#define GL_UNIFORM_BUFFER_START 0x8A29
#define GL_UNIFORM_BUFFER_SIZE 0x8A2A
#define GL_MAX_VERTEX_UNIFORM_BLOCKS 0x8A2B
#define GL_MAX_GEOMETRY_UNIFORM_BLOCKS 0x8A2C
#define GL_MAX_GEOMETRY_UNIFORM_BLOCKS_EXT 0x8A2C
#define GL_MAX_GEOMETRY_UNIFORM_BLOCKS_OES 0x8A2C
#define GL_MAX_FRAGMENT_UNIFORM_BLOCKS 0x8A2D
#define GL_MAX_COMBINED_UNIFORM_BLOCKS 0x8A2E
#define GL_MAX_UNIFORM_BUFFER_BINDINGS 0x8A2F
#define GL_MAX_UNIFORM_BLOCK_SIZE 0x8A30
#define GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS 0x8A31
#define GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS 0x8A32
#define GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS_EXT 0x8A32
#define GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS_OES 0x8A32
#define GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS 0x8A33
#define GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT 0x8A34
#define GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH 0x8A35
#define GL_ACTIVE_UNIFORM_BLOCKS 0x8A36
#define GL_UNIFORM_TYPE 0x8A37
#define GL_UNIFORM_SIZE 0x8A38
#define GL_UNIFORM_NAME_LENGTH 0x8A39
#define GL_UNIFORM_BLOCK_INDEX 0x8A3A
#define GL_UNIFORM_OFFSET 0x8A3B
#define GL_UNIFORM_ARRAY_STRIDE 0x8A3C
#define GL_UNIFORM_MATRIX_STRIDE 0x8A3D
#define GL_UNIFORM_IS_ROW_MAJOR 0x8A3E
#define GL_UNIFORM_BLOCK_BINDING 0x8A3F
#define GL_UNIFORM_BLOCK_DATA_SIZE 0x8A40
#define GL_UNIFORM_BLOCK_NAME_LENGTH 0x8A41
#define GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS 0x8A42
#define GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES 0x8A43
#define GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER 0x8A44
#define GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER 0x8A45
#define GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER 0x8A46
#define GL_TEXTURE_SRGB_DECODE_EXT 0x8A48
#define GL_DECODE_EXT 0x8A49
#define GL_SKIP_DECODE_EXT 0x8A4A
#define GL_PROGRAM_PIPELINE_OBJECT_EXT 0x8A4F
#define GL_RGB_RAW_422_APPLE 0x8A51
#define GL_FRAGMENT_SHADER_DISCARDS_SAMPLES_EXT 0x8A52
#define GL_SYNC_OBJECT_APPLE 0x8A53
#define GL_COMPRESSED_SRGB_PVRTC_2BPPV1_EXT 0x8A54
#define GL_COMPRESSED_SRGB_PVRTC_4BPPV1_EXT 0x8A55
#define GL_COMPRESSED_SRGB_ALPHA_PVRTC_2BPPV1_EXT 0x8A56
#define GL_COMPRESSED_SRGB_ALPHA_PVRTC_4BPPV1_EXT 0x8A57
#define GL_FRAGMENT_SHADER 0x8B30
#define GL_FRAGMENT_SHADER_ARB 0x8B30
#define GL_VERTEX_SHADER 0x8B31
#define GL_VERTEX_SHADER_ARB 0x8B31
#define GL_PROGRAM_OBJECT_ARB 0x8B40
#define GL_PROGRAM_OBJECT_EXT 0x8B40
#define GL_SHADER_OBJECT_ARB 0x8B48
#define GL_SHADER_OBJECT_EXT 0x8B48
#define GL_MAX_FRAGMENT_UNIFORM_COMPONENTS 0x8B49
#define GL_MAX_FRAGMENT_UNIFORM_COMPONENTS_ARB 0x8B49
#define GL_MAX_VERTEX_UNIFORM_COMPONENTS 0x8B4A
#define GL_MAX_VERTEX_UNIFORM_COMPONENTS_ARB 0x8B4A
#define GL_MAX_VARYING_COMPONENTS 0x8B4B
#define GL_MAX_VARYING_COMPONENTS_EXT 0x8B4B
#define GL_MAX_VARYING_FLOATS 0x8B4B
#define GL_MAX_VARYING_FLOATS_ARB 0x8B4B
#define GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS 0x8B4C
#define GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB 0x8B4C
#define GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS 0x8B4D
#define GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS_ARB 0x8B4D
#define GL_OBJECT_TYPE_ARB 0x8B4E
#define GL_OBJECT_SUBTYPE_ARB 0x8B4F
#define GL_SHADER_TYPE 0x8B4F
#define GL_FLOAT_VEC2 0x8B50
#define GL_FLOAT_VEC2_ARB 0x8B50
#define GL_FLOAT_VEC3 0x8B51
#define GL_FLOAT_VEC3_ARB 0x8B51
#define GL_FLOAT_VEC4 0x8B52
#define GL_FLOAT_VEC4_ARB 0x8B52
#define GL_INT_VEC2 0x8B53
#define GL_INT_VEC2_ARB 0x8B53
#define GL_INT_VEC3 0x8B54
#define GL_INT_VEC3_ARB 0x8B54
#define GL_INT_VEC4 0x8B55
#define GL_INT_VEC4_ARB 0x8B55
#define GL_BOOL 0x8B56
#define GL_BOOL_ARB 0x8B56
#define GL_BOOL_VEC2 0x8B57
#define GL_BOOL_VEC2_ARB 0x8B57
#define GL_BOOL_VEC3 0x8B58
#define GL_BOOL_VEC3_ARB 0x8B58
#define GL_BOOL_VEC4 0x8B59
#define GL_BOOL_VEC4_ARB 0x8B59
#define GL_FLOAT_MAT2 0x8B5A
#define GL_FLOAT_MAT2_ARB 0x8B5A
#define GL_FLOAT_MAT3 0x8B5B
#define GL_FLOAT_MAT3_ARB 0x8B5B
#define GL_FLOAT_MAT4 0x8B5C
#define GL_FLOAT_MAT4_ARB 0x8B5C
#define GL_SAMPLER_1D 0x8B5D
#define GL_SAMPLER_1D_ARB 0x8B5D
#define GL_SAMPLER_2D 0x8B5E
#define GL_SAMPLER_2D_ARB 0x8B5E
#define GL_SAMPLER_3D 0x8B5F
#define GL_SAMPLER_3D_ARB 0x8B5F
#define GL_SAMPLER_3D_OES 0x8B5F
#define GL_SAMPLER_CUBE 0x8B60
#define GL_SAMPLER_CUBE_ARB 0x8B60
#define GL_SAMPLER_1D_SHADOW 0x8B61
#define GL_SAMPLER_1D_SHADOW_ARB 0x8B61
#define GL_SAMPLER_2D_SHADOW 0x8B62
#define GL_SAMPLER_2D_SHADOW_ARB 0x8B62
#define GL_SAMPLER_2D_SHADOW_EXT 0x8B62
#define GL_SAMPLER_2D_RECT 0x8B63
#define GL_SAMPLER_2D_RECT_ARB 0x8B63
#define GL_SAMPLER_2D_RECT_SHADOW 0x8B64
#define GL_SAMPLER_2D_RECT_SHADOW_ARB 0x8B64
#define GL_FLOAT_MAT2x3 0x8B65
#define GL_FLOAT_MAT2x3_NV 0x8B65
#define GL_FLOAT_MAT2x4 0x8B66
#define GL_FLOAT_MAT2x4_NV 0x8B66
#define GL_FLOAT_MAT3x2 0x8B67
#define GL_FLOAT_MAT3x2_NV 0x8B67
#define GL_FLOAT_MAT3x4 0x8B68
#define GL_FLOAT_MAT3x4_NV 0x8B68
#define GL_FLOAT_MAT4x2 0x8B69
#define GL_FLOAT_MAT4x2_NV 0x8B69
#define GL_FLOAT_MAT4x3 0x8B6A
#define GL_FLOAT_MAT4x3_NV 0x8B6A
#define GL_DELETE_STATUS 0x8B80
#define GL_OBJECT_DELETE_STATUS_ARB 0x8B80
#define GL_COMPILE_STATUS 0x8B81
#define GL_OBJECT_COMPILE_STATUS_ARB 0x8B81
#define GL_LINK_STATUS 0x8B82
#define GL_OBJECT_LINK_STATUS_ARB 0x8B82
#define GL_OBJECT_VALIDATE_STATUS_ARB 0x8B83
#define GL_VALIDATE_STATUS 0x8B83
#define GL_INFO_LOG_LENGTH 0x8B84
#define GL_OBJECT_INFO_LOG_LENGTH_ARB 0x8B84
#define GL_ATTACHED_SHADERS 0x8B85
#define GL_OBJECT_ATTACHED_OBJECTS_ARB 0x8B85
#define GL_ACTIVE_UNIFORMS 0x8B86
#define GL_OBJECT_ACTIVE_UNIFORMS_ARB 0x8B86
#define GL_ACTIVE_UNIFORM_MAX_LENGTH 0x8B87
#define GL_OBJECT_ACTIVE_UNIFORM_MAX_LENGTH_ARB 0x8B87
#define GL_OBJECT_SHADER_SOURCE_LENGTH_ARB 0x8B88
#define GL_SHADER_SOURCE_LENGTH 0x8B88
#define GL_ACTIVE_ATTRIBUTES 0x8B89
#define GL_OBJECT_ACTIVE_ATTRIBUTES_ARB 0x8B89
#define GL_ACTIVE_ATTRIBUTE_MAX_LENGTH 0x8B8A
#define GL_OBJECT_ACTIVE_ATTRIBUTE_MAX_LENGTH_ARB 0x8B8A
#define GL_FRAGMENT_SHADER_DERIVATIVE_HINT 0x8B8B
#define GL_FRAGMENT_SHADER_DERIVATIVE_HINT_ARB 0x8B8B
#define GL_FRAGMENT_SHADER_DERIVATIVE_HINT_OES 0x8B8B
#define GL_SHADING_LANGUAGE_VERSION 0x8B8C
#define GL_SHADING_LANGUAGE_VERSION_ARB 0x8B8C
#define GL_CURRENT_PROGRAM 0x8B8D
#define GL_PALETTE4_RGB8_OES 0x8B90
#define GL_PALETTE4_RGBA8_OES 0x8B91
#define GL_PALETTE4_R5_G6_B5_OES 0x8B92
#define GL_PALETTE4_RGBA4_OES 0x8B93
#define GL_PALETTE4_RGB5_A1_OES 0x8B94
#define GL_PALETTE8_RGB8_OES 0x8B95
#define GL_PALETTE8_RGBA8_OES 0x8B96
#define GL_PALETTE8_R5_G6_B5_OES 0x8B97
#define GL_PALETTE8_RGBA4_OES 0x8B98
#define GL_PALETTE8_RGB5_A1_OES 0x8B99
#define GL_IMPLEMENTATION_COLOR_READ_TYPE 0x8B9A
#define GL_IMPLEMENTATION_COLOR_READ_TYPE_OES 0x8B9A
#define GL_IMPLEMENTATION_COLOR_READ_FORMAT 0x8B9B
#define GL_IMPLEMENTATION_COLOR_READ_FORMAT_OES 0x8B9B
#define GL_POINT_SIZE_ARRAY_OES 0x8B9C
#define GL_TEXTURE_CROP_RECT_OES 0x8B9D
#define GL_MATRIX_INDEX_ARRAY_BUFFER_BINDING_OES 0x8B9E
#define GL_POINT_SIZE_ARRAY_BUFFER_BINDING_OES 0x8B9F
#define GL_FRAGMENT_PROGRAM_POSITION_MESA 0x8BB0
#define GL_FRAGMENT_PROGRAM_CALLBACK_MESA 0x8BB1
#define GL_FRAGMENT_PROGRAM_CALLBACK_FUNC_MESA 0x8BB2
#define GL_FRAGMENT_PROGRAM_CALLBACK_DATA_MESA 0x8BB3
#define GL_VERTEX_PROGRAM_POSITION_MESA 0x8BB4
#define GL_VERTEX_PROGRAM_CALLBACK_MESA 0x8BB5
#define GL_VERTEX_PROGRAM_CALLBACK_FUNC_MESA 0x8BB6
#define GL_VERTEX_PROGRAM_CALLBACK_DATA_MESA 0x8BB7
#define GL_TILE_RASTER_ORDER_FIXED_MESA 0x8BB8
#define GL_TILE_RASTER_ORDER_INCREASING_X_MESA 0x8BB9
#define GL_TILE_RASTER_ORDER_INCREASING_Y_MESA 0x8BBA
#define GL_FRAMEBUFFER_FLIP_Y_MESA 0x8BBB
#define GL_COUNTER_TYPE_AMD 0x8BC0
#define GL_COUNTER_RANGE_AMD 0x8BC1
#define GL_UNSIGNED_INT64_AMD 0x8BC2
#define GL_PERCENTAGE_AMD 0x8BC3
#define GL_PERFMON_RESULT_AVAILABLE_AMD 0x8BC4
#define GL_PERFMON_RESULT_SIZE_AMD 0x8BC5
#define GL_PERFMON_RESULT_AMD 0x8BC6
#define GL_TEXTURE_WIDTH_QCOM 0x8BD2
#define GL_TEXTURE_HEIGHT_QCOM 0x8BD3
#define GL_TEXTURE_DEPTH_QCOM 0x8BD4
#define GL_TEXTURE_INTERNAL_FORMAT_QCOM 0x8BD5
#define GL_TEXTURE_FORMAT_QCOM 0x8BD6
#define GL_TEXTURE_TYPE_QCOM 0x8BD7
#define GL_TEXTURE_IMAGE_VALID_QCOM 0x8BD8
#define GL_TEXTURE_NUM_LEVELS_QCOM 0x8BD9
#define GL_TEXTURE_TARGET_QCOM 0x8BDA
#define GL_TEXTURE_OBJECT_VALID_QCOM 0x8BDB
#define GL_STATE_RESTORE 0x8BDC
#define GL_SAMPLER_EXTERNAL_2D_Y2Y_EXT 0x8BE7
#define GL_TEXTURE_PROTECTED_EXT 0x8BFA
#define GL_TEXTURE_FOVEATED_FEATURE_BITS_QCOM 0x8BFB
#define GL_TEXTURE_FOVEATED_MIN_PIXEL_DENSITY_QCOM 0x8BFC
#define GL_TEXTURE_FOVEATED_FEATURE_QUERY_QCOM 0x8BFD
#define GL_TEXTURE_FOVEATED_NUM_FOCAL_POINTS_QUERY_QCOM 0x8BFE
#define GL_FRAMEBUFFER_INCOMPLETE_FOVEATION_QCOM 0x8BFF
#define GL_COMPRESSED_RGB_PVRTC_4BPPV1_IMG 0x8C00
#define GL_COMPRESSED_RGB_PVRTC_2BPPV1_IMG 0x8C01
#define GL_COMPRESSED_RGBA_PVRTC_4BPPV1_IMG 0x8C02
#define GL_COMPRESSED_RGBA_PVRTC_2BPPV1_IMG 0x8C03
#define GL_MODULATE_COLOR_IMG 0x8C04
#define GL_RECIP_ADD_SIGNED_ALPHA_IMG 0x8C05
#define GL_TEXTURE_ALPHA_MODULATE_IMG 0x8C06
#define GL_FACTOR_ALPHA_MODULATE_IMG 0x8C07
#define GL_FRAGMENT_ALPHA_MODULATE_IMG 0x8C08
#define GL_ADD_BLEND_IMG 0x8C09
#define GL_SGX_BINARY_IMG 0x8C0A
#define GL_TEXTURE_RED_TYPE 0x8C10
#define GL_TEXTURE_RED_TYPE_ARB 0x8C10
#define GL_TEXTURE_GREEN_TYPE 0x8C11
#define GL_TEXTURE_GREEN_TYPE_ARB 0x8C11
#define GL_TEXTURE_BLUE_TYPE 0x8C12
#define GL_TEXTURE_BLUE_TYPE_ARB 0x8C12
#define GL_TEXTURE_ALPHA_TYPE 0x8C13
#define GL_TEXTURE_ALPHA_TYPE_ARB 0x8C13
#define GL_TEXTURE_LUMINANCE_TYPE 0x8C14
#define GL_TEXTURE_LUMINANCE_TYPE_ARB 0x8C14
#define GL_TEXTURE_INTENSITY_TYPE 0x8C15
#define GL_TEXTURE_INTENSITY_TYPE_ARB 0x8C15
#define GL_TEXTURE_DEPTH_TYPE 0x8C16
#define GL_TEXTURE_DEPTH_TYPE_ARB 0x8C16
#define GL_UNSIGNED_NORMALIZED 0x8C17
#define GL_UNSIGNED_NORMALIZED_ARB 0x8C17
#define GL_UNSIGNED_NORMALIZED_EXT 0x8C17
#define GL_TEXTURE_1D_ARRAY 0x8C18
#define GL_TEXTURE_1D_ARRAY_EXT 0x8C18
#define GL_PROXY_TEXTURE_1D_ARRAY 0x8C19
#define GL_PROXY_TEXTURE_1D_ARRAY_EXT 0x8C19
#define GL_TEXTURE_2D_ARRAY 0x8C1A
#define GL_TEXTURE_2D_ARRAY_EXT 0x8C1A
#define GL_PROXY_TEXTURE_2D_ARRAY 0x8C1B
#define GL_PROXY_TEXTURE_2D_ARRAY_EXT 0x8C1B
#define GL_TEXTURE_BINDING_1D_ARRAY 0x8C1C
#define GL_TEXTURE_BINDING_1D_ARRAY_EXT 0x8C1C
#define GL_TEXTURE_BINDING_2D_ARRAY 0x8C1D
#define GL_TEXTURE_BINDING_2D_ARRAY_EXT 0x8C1D
#define GL_GEOMETRY_PROGRAM_NV 0x8C26
#define GL_MAX_PROGRAM_OUTPUT_VERTICES_NV 0x8C27
#define GL_MAX_PROGRAM_TOTAL_OUTPUT_COMPONENTS_NV 0x8C28
#define GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS 0x8C29
#define GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_ARB 0x8C29
#define GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT 0x8C29
#define GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_OES 0x8C29
#define GL_TEXTURE_BUFFER 0x8C2A
#define GL_TEXTURE_BUFFER_ARB 0x8C2A
#define GL_TEXTURE_BUFFER_BINDING 0x8C2A
#define GL_TEXTURE_BUFFER_BINDING_EXT 0x8C2A
#define GL_TEXTURE_BUFFER_BINDING_OES 0x8C2A
#define GL_TEXTURE_BUFFER_EXT 0x8C2A
#define GL_TEXTURE_BUFFER_OES 0x8C2A
#define GL_MAX_TEXTURE_BUFFER_SIZE 0x8C2B
#define GL_MAX_TEXTURE_BUFFER_SIZE_ARB 0x8C2B
#define GL_MAX_TEXTURE_BUFFER_SIZE_EXT 0x8C2B
#define GL_MAX_TEXTURE_BUFFER_SIZE_OES 0x8C2B
#define GL_TEXTURE_BINDING_BUFFER 0x8C2C
#define GL_TEXTURE_BINDING_BUFFER_ARB 0x8C2C
#define GL_TEXTURE_BINDING_BUFFER_EXT 0x8C2C
#define GL_TEXTURE_BINDING_BUFFER_OES 0x8C2C
#define GL_TEXTURE_BUFFER_DATA_STORE_BINDING 0x8C2D
#define GL_TEXTURE_BUFFER_DATA_STORE_BINDING_ARB 0x8C2D
#define GL_TEXTURE_BUFFER_DATA_STORE_BINDING_EXT 0x8C2D
#define GL_TEXTURE_BUFFER_DATA_STORE_BINDING_OES 0x8C2D
#define GL_TEXTURE_BUFFER_FORMAT_ARB 0x8C2E
#define GL_TEXTURE_BUFFER_FORMAT_EXT 0x8C2E
#define GL_ANY_SAMPLES_PASSED 0x8C2F
#define GL_ANY_SAMPLES_PASSED_EXT 0x8C2F
#define GL_SAMPLE_SHADING 0x8C36
#define GL_SAMPLE_SHADING_ARB 0x8C36
#define GL_SAMPLE_SHADING_OES 0x8C36
#define GL_MIN_SAMPLE_SHADING_VALUE 0x8C37
#define GL_MIN_SAMPLE_SHADING_VALUE_ARB 0x8C37
#define GL_MIN_SAMPLE_SHADING_VALUE_OES 0x8C37
#define GL_R11F_G11F_B10F 0x8C3A
#define GL_R11F_G11F_B10F_APPLE 0x8C3A
#define GL_R11F_G11F_B10F_EXT 0x8C3A
#define GL_UNSIGNED_INT_10F_11F_11F_REV 0x8C3B
#define GL_UNSIGNED_INT_10F_11F_11F_REV_APPLE 0x8C3B
#define GL_UNSIGNED_INT_10F_11F_11F_REV_EXT 0x8C3B
#define GL_RGBA_SIGNED_COMPONENTS_EXT 0x8C3C
#define GL_RGB9_E5 0x8C3D
#define GL_RGB9_E5_APPLE 0x8C3D
#define GL_RGB9_E5_EXT 0x8C3D
#define GL_UNSIGNED_INT_5_9_9_9_REV 0x8C3E
#define GL_UNSIGNED_INT_5_9_9_9_REV_APPLE 0x8C3E
#define GL_UNSIGNED_INT_5_9_9_9_REV_EXT 0x8C3E
#define GL_TEXTURE_SHARED_SIZE 0x8C3F
#define GL_TEXTURE_SHARED_SIZE_EXT 0x8C3F
#define GL_SRGB 0x8C40
#define GL_SRGB_EXT 0x8C40
#define GL_SRGB8 0x8C41
#define GL_SRGB8_EXT 0x8C41
#define GL_SRGB8_NV 0x8C41
#define GL_SRGB_ALPHA 0x8C42
#define GL_SRGB_ALPHA_EXT 0x8C42
#define GL_SRGB8_ALPHA8 0x8C43
#define GL_SRGB8_ALPHA8_EXT 0x8C43
#define GL_SLUMINANCE_ALPHA 0x8C44
#define GL_SLUMINANCE_ALPHA_EXT 0x8C44
#define GL_SLUMINANCE_ALPHA_NV 0x8C44
#define GL_SLUMINANCE8_ALPHA8 0x8C45
#define GL_SLUMINANCE8_ALPHA8_EXT 0x8C45
#define GL_SLUMINANCE8_ALPHA8_NV 0x8C45
#define GL_SLUMINANCE 0x8C46
#define GL_SLUMINANCE_EXT 0x8C46
#define GL_SLUMINANCE_NV 0x8C46
#define GL_SLUMINANCE8 0x8C47
#define GL_SLUMINANCE8_EXT 0x8C47
#define GL_SLUMINANCE8_NV 0x8C47
#define GL_COMPRESSED_SRGB 0x8C48
#define GL_COMPRESSED_SRGB_EXT 0x8C48
#define GL_COMPRESSED_SRGB_ALPHA 0x8C49
#define GL_COMPRESSED_SRGB_ALPHA_EXT 0x8C49
#define GL_COMPRESSED_SLUMINANCE 0x8C4A
#define GL_COMPRESSED_SLUMINANCE_EXT 0x8C4A
#define GL_COMPRESSED_SLUMINANCE_ALPHA 0x8C4B
#define GL_COMPRESSED_SLUMINANCE_ALPHA_EXT 0x8C4B
#define GL_COMPRESSED_SRGB_S3TC_DXT1_EXT 0x8C4C
#define GL_COMPRESSED_SRGB_S3TC_DXT1_NV 0x8C4C
#define GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT 0x8C4D
#define GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_NV 0x8C4D
#define GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT 0x8C4E
#define GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_NV 0x8C4E
#define GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT 0x8C4F
#define GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_NV 0x8C4F
#define GL_COMPRESSED_LUMINANCE_LATC1_EXT 0x8C70
#define GL_COMPRESSED_SIGNED_LUMINANCE_LATC1_EXT 0x8C71
#define GL_COMPRESSED_LUMINANCE_ALPHA_LATC2_EXT 0x8C72
#define GL_COMPRESSED_SIGNED_LUMINANCE_ALPHA_LATC2_EXT 0x8C73
#define GL_TESS_CONTROL_PROGRAM_PARAMETER_BUFFER_NV 0x8C74
#define GL_TESS_EVALUATION_PROGRAM_PARAMETER_BUFFER_NV 0x8C75
#define GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH 0x8C76
#define GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH_EXT 0x8C76
#define GL_BACK_PRIMARY_COLOR_NV 0x8C77
#define GL_BACK_SECONDARY_COLOR_NV 0x8C78
#define GL_TEXTURE_COORD_NV 0x8C79
#define GL_CLIP_DISTANCE_NV 0x8C7A
#define GL_VERTEX_ID_NV 0x8C7B
#define GL_PRIMITIVE_ID_NV 0x8C7C
#define GL_GENERIC_ATTRIB_NV 0x8C7D
#define GL_TRANSFORM_FEEDBACK_ATTRIBS_NV 0x8C7E
#define GL_TRANSFORM_FEEDBACK_BUFFER_MODE 0x8C7F
#define GL_TRANSFORM_FEEDBACK_BUFFER_MODE_EXT 0x8C7F
#define GL_TRANSFORM_FEEDBACK_BUFFER_MODE_NV 0x8C7F
#define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS 0x8C80
#define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_EXT 0x8C80
#define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_NV 0x8C80
#define GL_ACTIVE_VARYINGS_NV 0x8C81
#define GL_ACTIVE_VARYING_MAX_LENGTH_NV 0x8C82
#define GL_TRANSFORM_FEEDBACK_VARYINGS 0x8C83
#define GL_TRANSFORM_FEEDBACK_VARYINGS_EXT 0x8C83
#define GL_TRANSFORM_FEEDBACK_VARYINGS_NV 0x8C83
#define GL_TRANSFORM_FEEDBACK_BUFFER_START 0x8C84
#define GL_TRANSFORM_FEEDBACK_BUFFER_START_EXT 0x8C84
#define GL_TRANSFORM_FEEDBACK_BUFFER_START_NV 0x8C84
#define GL_TRANSFORM_FEEDBACK_BUFFER_SIZE 0x8C85
#define GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_EXT 0x8C85
#define GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_NV 0x8C85
#define GL_TRANSFORM_FEEDBACK_RECORD_NV 0x8C86
#define GL_PRIMITIVES_GENERATED 0x8C87
#define GL_PRIMITIVES_GENERATED_EXT 0x8C87
#define GL_PRIMITIVES_GENERATED_NV 0x8C87
#define GL_PRIMITIVES_GENERATED_OES 0x8C87
#define GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN 0x8C88
#define GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_EXT 0x8C88
#define GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_NV 0x8C88
#define GL_RASTERIZER_DISCARD 0x8C89
#define GL_RASTERIZER_DISCARD_EXT 0x8C89
#define GL_RASTERIZER_DISCARD_NV 0x8C89
#define GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS 0x8C8A
#define GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_EXT 0x8C8A
#define GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_NV 0x8C8A
#define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS 0x8C8B
#define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_EXT 0x8C8B
#define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_NV 0x8C8B
#define GL_INTERLEAVED_ATTRIBS 0x8C8C
#define GL_INTERLEAVED_ATTRIBS_EXT 0x8C8C
#define GL_INTERLEAVED_ATTRIBS_NV 0x8C8C
#define GL_SEPARATE_ATTRIBS 0x8C8D
#define GL_SEPARATE_ATTRIBS_EXT 0x8C8D
#define GL_SEPARATE_ATTRIBS_NV 0x8C8D
#define GL_TRANSFORM_FEEDBACK_BUFFER 0x8C8E
#define GL_TRANSFORM_FEEDBACK_BUFFER_EXT 0x8C8E
#define GL_TRANSFORM_FEEDBACK_BUFFER_NV 0x8C8E
#define GL_TRANSFORM_FEEDBACK_BUFFER_BINDING 0x8C8F
#define GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_EXT 0x8C8F
#define GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_NV 0x8C8F
#define GL_ATC_RGB_AMD 0x8C92
#define GL_ATC_RGBA_EXPLICIT_ALPHA_AMD 0x8C93
#define GL_POINT_SPRITE_COORD_ORIGIN 0x8CA0
#define GL_LOWER_LEFT 0x8CA1
#define GL_LOWER_LEFT_EXT 0x8CA1
#define GL_UPPER_LEFT 0x8CA2
#define GL_UPPER_LEFT_EXT 0x8CA2
#define GL_STENCIL_BACK_REF 0x8CA3
#define GL_STENCIL_BACK_VALUE_MASK 0x8CA4
#define GL_STENCIL_BACK_WRITEMASK 0x8CA5
#define GL_DRAW_FRAMEBUFFER_BINDING 0x8CA6
#define GL_DRAW_FRAMEBUFFER_BINDING_ANGLE 0x8CA6
#define GL_DRAW_FRAMEBUFFER_BINDING_APPLE 0x8CA6
#define GL_DRAW_FRAMEBUFFER_BINDING_EXT 0x8CA6
#define GL_DRAW_FRAMEBUFFER_BINDING_NV 0x8CA6
#define GL_FRAMEBUFFER_BINDING 0x8CA6
#define GL_FRAMEBUFFER_BINDING_ANGLE 0x8CA6
#define GL_FRAMEBUFFER_BINDING_EXT 0x8CA6
#define GL_FRAMEBUFFER_BINDING_OES 0x8CA6
#define GL_RENDERBUFFER_BINDING 0x8CA7
#define GL_RENDERBUFFER_BINDING_ANGLE 0x8CA7
#define GL_RENDERBUFFER_BINDING_EXT 0x8CA7
#define GL_RENDERBUFFER_BINDING_OES 0x8CA7
#define GL_READ_FRAMEBUFFER 0x8CA8
#define GL_READ_FRAMEBUFFER_ANGLE 0x8CA8
#define GL_READ_FRAMEBUFFER_APPLE 0x8CA8
#define GL_READ_FRAMEBUFFER_EXT 0x8CA8
#define GL_READ_FRAMEBUFFER_NV 0x8CA8
#define GL_DRAW_FRAMEBUFFER 0x8CA9
#define GL_DRAW_FRAMEBUFFER_ANGLE 0x8CA9
#define GL_DRAW_FRAMEBUFFER_APPLE 0x8CA9
#define GL_DRAW_FRAMEBUFFER_EXT 0x8CA9
#define GL_DRAW_FRAMEBUFFER_NV 0x8CA9
#define GL_READ_FRAMEBUFFER_BINDING 0x8CAA
#define GL_READ_FRAMEBUFFER_BINDING_ANGLE 0x8CAA
#define GL_READ_FRAMEBUFFER_BINDING_APPLE 0x8CAA
#define GL_READ_FRAMEBUFFER_BINDING_EXT 0x8CAA
#define GL_READ_FRAMEBUFFER_BINDING_NV 0x8CAA
#define GL_RENDERBUFFER_COVERAGE_SAMPLES_NV 0x8CAB
#define GL_RENDERBUFFER_SAMPLES 0x8CAB
#define GL_RENDERBUFFER_SAMPLES_ANGLE 0x8CAB
#define GL_RENDERBUFFER_SAMPLES_APPLE 0x8CAB
#define GL_RENDERBUFFER_SAMPLES_EXT 0x8CAB
#define GL_RENDERBUFFER_SAMPLES_NV 0x8CAB
#define GL_DEPTH_COMPONENT32F 0x8CAC
#define GL_DEPTH32F_STENCIL8 0x8CAD
#define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE 0x8CD0
#define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_EXT 0x8CD0
#define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_OES 0x8CD0
#define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME 0x8CD1
#define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_EXT 0x8CD1
#define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_OES 0x8CD1
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL 0x8CD2
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_EXT 0x8CD2
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_OES 0x8CD2
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE 0x8CD3
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_EXT 0x8CD3
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_OES 0x8CD3
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_EXT 0x8CD4
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_OES 0x8CD4
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER 0x8CD4
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT 0x8CD4
#define GL_FRAMEBUFFER_COMPLETE 0x8CD5
#define GL_FRAMEBUFFER_COMPLETE_EXT 0x8CD5
#define GL_FRAMEBUFFER_COMPLETE_OES 0x8CD5
#define GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT 0x8CD6
#define GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_EXT 0x8CD6
#define GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_OES 0x8CD6
#define GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT 0x8CD7
#define GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_EXT 0x8CD7
#define GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_OES 0x8CD7
#define GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS 0x8CD9
#define GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_EXT 0x8CD9
#define GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_OES 0x8CD9
#define GL_FRAMEBUFFER_INCOMPLETE_FORMATS_EXT 0x8CDA
#define GL_FRAMEBUFFER_INCOMPLETE_FORMATS_OES 0x8CDA
#define GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER 0x8CDB
#define GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_EXT 0x8CDB
#define GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_OES 0x8CDB
#define GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER 0x8CDC
#define GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_EXT 0x8CDC
#define GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_OES 0x8CDC
#define GL_FRAMEBUFFER_UNSUPPORTED 0x8CDD
#define GL_FRAMEBUFFER_UNSUPPORTED_EXT 0x8CDD
#define GL_FRAMEBUFFER_UNSUPPORTED_OES 0x8CDD
#define GL_MAX_COLOR_ATTACHMENTS 0x8CDF
#define GL_MAX_COLOR_ATTACHMENTS_EXT 0x8CDF
#define GL_MAX_COLOR_ATTACHMENTS_NV 0x8CDF
#define GL_COLOR_ATTACHMENT0 0x8CE0
#define GL_COLOR_ATTACHMENT0_EXT 0x8CE0
#define GL_COLOR_ATTACHMENT0_NV 0x8CE0
#define GL_COLOR_ATTACHMENT0_OES 0x8CE0
#define GL_COLOR_ATTACHMENT1 0x8CE1
#define GL_COLOR_ATTACHMENT1_EXT 0x8CE1
#define GL_COLOR_ATTACHMENT1_NV 0x8CE1
#define GL_COLOR_ATTACHMENT2 0x8CE2
#define GL_COLOR_ATTACHMENT2_EXT 0x8CE2
#define GL_COLOR_ATTACHMENT2_NV 0x8CE2
#define GL_COLOR_ATTACHMENT3 0x8CE3
#define GL_COLOR_ATTACHMENT3_EXT 0x8CE3
#define GL_COLOR_ATTACHMENT3_NV 0x8CE3
#define GL_COLOR_ATTACHMENT4 0x8CE4
#define GL_COLOR_ATTACHMENT4_EXT 0x8CE4
#define GL_COLOR_ATTACHMENT4_NV 0x8CE4
#define GL_COLOR_ATTACHMENT5 0x8CE5
#define GL_COLOR_ATTACHMENT5_EXT 0x8CE5
#define GL_COLOR_ATTACHMENT5_NV 0x8CE5
#define GL_COLOR_ATTACHMENT6 0x8CE6
#define GL_COLOR_ATTACHMENT6_EXT 0x8CE6
#define GL_COLOR_ATTACHMENT6_NV 0x8CE6
#define GL_COLOR_ATTACHMENT7 0x8CE7
#define GL_COLOR_ATTACHMENT7_EXT 0x8CE7
#define GL_COLOR_ATTACHMENT7_NV 0x8CE7
#define GL_COLOR_ATTACHMENT8 0x8CE8
#define GL_COLOR_ATTACHMENT8_EXT 0x8CE8
#define GL_COLOR_ATTACHMENT8_NV 0x8CE8
#define GL_COLOR_ATTACHMENT9 0x8CE9
#define GL_COLOR_ATTACHMENT9_EXT 0x8CE9
#define GL_COLOR_ATTACHMENT9_NV 0x8CE9
#define GL_COLOR_ATTACHMENT10 0x8CEA
#define GL_COLOR_ATTACHMENT10_EXT 0x8CEA
#define GL_COLOR_ATTACHMENT10_NV 0x8CEA
#define GL_COLOR_ATTACHMENT11 0x8CEB
#define GL_COLOR_ATTACHMENT11_EXT 0x8CEB
#define GL_COLOR_ATTACHMENT11_NV 0x8CEB
#define GL_COLOR_ATTACHMENT12 0x8CEC
#define GL_COLOR_ATTACHMENT12_EXT 0x8CEC
#define GL_COLOR_ATTACHMENT12_NV 0x8CEC
#define GL_COLOR_ATTACHMENT13 0x8CED
#define GL_COLOR_ATTACHMENT13_EXT 0x8CED
#define GL_COLOR_ATTACHMENT13_NV 0x8CED
#define GL_COLOR_ATTACHMENT14 0x8CEE
#define GL_COLOR_ATTACHMENT14_EXT 0x8CEE
#define GL_COLOR_ATTACHMENT14_NV 0x8CEE
#define GL_COLOR_ATTACHMENT15 0x8CEF
#define GL_COLOR_ATTACHMENT15_EXT 0x8CEF
#define GL_COLOR_ATTACHMENT15_NV 0x8CEF
#define GL_COLOR_ATTACHMENT16 0x8CF0
#define GL_COLOR_ATTACHMENT17 0x8CF1
#define GL_COLOR_ATTACHMENT18 0x8CF2
#define GL_COLOR_ATTACHMENT19 0x8CF3
#define GL_COLOR_ATTACHMENT20 0x8CF4
#define GL_COLOR_ATTACHMENT21 0x8CF5
#define GL_COLOR_ATTACHMENT22 0x8CF6
#define GL_COLOR_ATTACHMENT23 0x8CF7
#define GL_COLOR_ATTACHMENT24 0x8CF8
#define GL_COLOR_ATTACHMENT25 0x8CF9
#define GL_COLOR_ATTACHMENT26 0x8CFA
#define GL_COLOR_ATTACHMENT27 0x8CFB
#define GL_COLOR_ATTACHMENT28 0x8CFC
#define GL_COLOR_ATTACHMENT29 0x8CFD
#define GL_COLOR_ATTACHMENT30 0x8CFE
#define GL_COLOR_ATTACHMENT31 0x8CFF
#define GL_DEPTH_ATTACHMENT 0x8D00
#define GL_DEPTH_ATTACHMENT_EXT 0x8D00
#define GL_DEPTH_ATTACHMENT_OES 0x8D00
#define GL_STENCIL_ATTACHMENT 0x8D20
#define GL_STENCIL_ATTACHMENT_EXT 0x8D20
#define GL_STENCIL_ATTACHMENT_OES 0x8D20
#define GL_FRAMEBUFFER 0x8D40
#define GL_FRAMEBUFFER_EXT 0x8D40
#define GL_FRAMEBUFFER_OES 0x8D40
#define GL_RENDERBUFFER 0x8D41
#define GL_RENDERBUFFER_EXT 0x8D41
#define GL_RENDERBUFFER_OES 0x8D41
#define GL_RENDERBUFFER_WIDTH 0x8D42
#define GL_RENDERBUFFER_WIDTH_EXT 0x8D42
#define GL_RENDERBUFFER_WIDTH_OES 0x8D42
#define GL_RENDERBUFFER_HEIGHT 0x8D43
#define GL_RENDERBUFFER_HEIGHT_EXT 0x8D43
#define GL_RENDERBUFFER_HEIGHT_OES 0x8D43
#define GL_RENDERBUFFER_INTERNAL_FORMAT 0x8D44
#define GL_RENDERBUFFER_INTERNAL_FORMAT_EXT 0x8D44
#define GL_RENDERBUFFER_INTERNAL_FORMAT_OES 0x8D44
#define GL_STENCIL_INDEX1 0x8D46
#define GL_STENCIL_INDEX1_EXT 0x8D46
#define GL_STENCIL_INDEX1_OES 0x8D46
#define GL_STENCIL_INDEX4 0x8D47
#define GL_STENCIL_INDEX4_EXT 0x8D47
#define GL_STENCIL_INDEX4_OES 0x8D47
#define GL_STENCIL_INDEX8 0x8D48
#define GL_STENCIL_INDEX8_EXT 0x8D48
#define GL_STENCIL_INDEX8_OES 0x8D48
#define GL_STENCIL_INDEX16 0x8D49
#define GL_STENCIL_INDEX16_EXT 0x8D49
#define GL_RENDERBUFFER_RED_SIZE 0x8D50
#define GL_RENDERBUFFER_RED_SIZE_EXT 0x8D50
#define GL_RENDERBUFFER_RED_SIZE_OES 0x8D50
#define GL_RENDERBUFFER_GREEN_SIZE 0x8D51
#define GL_RENDERBUFFER_GREEN_SIZE_EXT 0x8D51
#define GL_RENDERBUFFER_GREEN_SIZE_OES 0x8D51
#define GL_RENDERBUFFER_BLUE_SIZE 0x8D52
#define GL_RENDERBUFFER_BLUE_SIZE_EXT 0x8D52
#define GL_RENDERBUFFER_BLUE_SIZE_OES 0x8D52
#define GL_RENDERBUFFER_ALPHA_SIZE 0x8D53
#define GL_RENDERBUFFER_ALPHA_SIZE_EXT 0x8D53
#define GL_RENDERBUFFER_ALPHA_SIZE_OES 0x8D53
#define GL_RENDERBUFFER_DEPTH_SIZE 0x8D54
#define GL_RENDERBUFFER_DEPTH_SIZE_EXT 0x8D54
#define GL_RENDERBUFFER_DEPTH_SIZE_OES 0x8D54
#define GL_RENDERBUFFER_STENCIL_SIZE 0x8D55
#define GL_RENDERBUFFER_STENCIL_SIZE_EXT 0x8D55
#define GL_RENDERBUFFER_STENCIL_SIZE_OES 0x8D55
#define GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE 0x8D56
#define GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_ANGLE 0x8D56
#define GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_APPLE 0x8D56
#define GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_EXT 0x8D56
#define GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_NV 0x8D56
#define GL_MAX_SAMPLES 0x8D57
#define GL_MAX_SAMPLES_ANGLE 0x8D57
#define GL_MAX_SAMPLES_APPLE 0x8D57
#define GL_MAX_SAMPLES_EXT 0x8D57
#define GL_MAX_SAMPLES_NV 0x8D57
#define GL_TEXTURE_GEN_STR_OES 0x8D60
#define GL_HALF_FLOAT_OES 0x8D61
#define GL_RGB565 0x8D62
#define GL_RGB565_OES 0x8D62
#define GL_ETC1_RGB8_OES 0x8D64
#define GL_TEXTURE_EXTERNAL_OES 0x8D65
#define GL_SAMPLER_EXTERNAL_OES 0x8D66
#define GL_TEXTURE_BINDING_EXTERNAL_OES 0x8D67
#define GL_REQUIRED_TEXTURE_IMAGE_UNITS_OES 0x8D68
#define GL_PRIMITIVE_RESTART_FIXED_INDEX 0x8D69
#define GL_ANY_SAMPLES_PASSED_CONSERVATIVE 0x8D6A
#define GL_ANY_SAMPLES_PASSED_CONSERVATIVE_EXT 0x8D6A
#define GL_MAX_ELEMENT_INDEX 0x8D6B
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_SAMPLES_EXT 0x8D6C
#define GL_RGBA32UI 0x8D70
#define GL_RGBA32UI_EXT 0x8D70
#define GL_RGB32UI 0x8D71
#define GL_RGB32UI_EXT 0x8D71
#define GL_ALPHA32UI_EXT 0x8D72
#define GL_INTENSITY32UI_EXT 0x8D73
#define GL_LUMINANCE32UI_EXT 0x8D74
#define GL_LUMINANCE_ALPHA32UI_EXT 0x8D75
#define GL_RGBA16UI 0x8D76
#define GL_RGBA16UI_EXT 0x8D76
#define GL_RGB16UI 0x8D77
#define GL_RGB16UI_EXT 0x8D77
#define GL_ALPHA16UI_EXT 0x8D78
#define GL_INTENSITY16UI_EXT 0x8D79
#define GL_LUMINANCE16UI_EXT 0x8D7A
#define GL_LUMINANCE_ALPHA16UI_EXT 0x8D7B
#define GL_RGBA8UI 0x8D7C
#define GL_RGBA8UI_EXT 0x8D7C
#define GL_RGB8UI 0x8D7D
#define GL_RGB8UI_EXT 0x8D7D
#define GL_ALPHA8UI_EXT 0x8D7E
#define GL_INTENSITY8UI_EXT 0x8D7F
#define GL_LUMINANCE8UI_EXT 0x8D80
#define GL_LUMINANCE_ALPHA8UI_EXT 0x8D81
#define GL_RGBA32I 0x8D82
#define GL_RGBA32I_EXT 0x8D82
#define GL_RGB32I 0x8D83
#define GL_RGB32I_EXT 0x8D83
#define GL_ALPHA32I_EXT 0x8D84
#define GL_INTENSITY32I_EXT 0x8D85
#define GL_LUMINANCE32I_EXT 0x8D86
#define GL_LUMINANCE_ALPHA32I_EXT 0x8D87
#define GL_RGBA16I 0x8D88
#define GL_RGBA16I_EXT 0x8D88
#define GL_RGB16I 0x8D89
#define GL_RGB16I_EXT 0x8D89
#define GL_ALPHA16I_EXT 0x8D8A
#define GL_INTENSITY16I_EXT 0x8D8B
#define GL_LUMINANCE16I_EXT 0x8D8C
#define GL_LUMINANCE_ALPHA16I_EXT 0x8D8D
#define GL_RGBA8I 0x8D8E
#define GL_RGBA8I_EXT 0x8D8E
#define GL_RGB8I 0x8D8F
#define GL_RGB8I_EXT 0x8D8F
#define GL_ALPHA8I_EXT 0x8D90
#define GL_INTENSITY8I_EXT 0x8D91
#define GL_LUMINANCE8I_EXT 0x8D92
#define GL_LUMINANCE_ALPHA8I_EXT 0x8D93
#define GL_RED_INTEGER 0x8D94
#define GL_RED_INTEGER_EXT 0x8D94
#define GL_GREEN_INTEGER 0x8D95
#define GL_GREEN_INTEGER_EXT 0x8D95
#define GL_BLUE_INTEGER 0x8D96
#define GL_BLUE_INTEGER_EXT 0x8D96
#define GL_ALPHA_INTEGER 0x8D97
#define GL_ALPHA_INTEGER_EXT 0x8D97
#define GL_RGB_INTEGER 0x8D98
#define GL_RGB_INTEGER_EXT 0x8D98
#define GL_RGBA_INTEGER 0x8D99
#define GL_RGBA_INTEGER_EXT 0x8D99
#define GL_BGR_INTEGER 0x8D9A
#define GL_BGR_INTEGER_EXT 0x8D9A
#define GL_BGRA_INTEGER 0x8D9B
#define GL_BGRA_INTEGER_EXT 0x8D9B
#define GL_LUMINANCE_INTEGER_EXT 0x8D9C
#define GL_LUMINANCE_ALPHA_INTEGER_EXT 0x8D9D
#define GL_RGBA_INTEGER_MODE_EXT 0x8D9E
#define GL_INT_2_10_10_10_REV 0x8D9F
#define GL_MAX_PROGRAM_PARAMETER_BUFFER_BINDINGS_NV 0x8DA0
#define GL_MAX_PROGRAM_PARAMETER_BUFFER_SIZE_NV 0x8DA1
#define GL_VERTEX_PROGRAM_PARAMETER_BUFFER_NV 0x8DA2
#define GL_GEOMETRY_PROGRAM_PARAMETER_BUFFER_NV 0x8DA3
#define GL_FRAGMENT_PROGRAM_PARAMETER_BUFFER_NV 0x8DA4
#define GL_MAX_PROGRAM_GENERIC_ATTRIBS_NV 0x8DA5
#define GL_MAX_PROGRAM_GENERIC_RESULTS_NV 0x8DA6
#define GL_FRAMEBUFFER_ATTACHMENT_LAYERED 0x8DA7
#define GL_FRAMEBUFFER_ATTACHMENT_LAYERED_ARB 0x8DA7
#define GL_FRAMEBUFFER_ATTACHMENT_LAYERED_EXT 0x8DA7
#define GL_FRAMEBUFFER_ATTACHMENT_LAYERED_OES 0x8DA7
#define GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS 0x8DA8
#define GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_ARB 0x8DA8
#define GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXT 0x8DA8
#define GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_OES 0x8DA8
#define GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_ARB 0x8DA9
#define GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_EXT 0x8DA9
#define GL_LAYER_NV 0x8DAA
#define GL_DEPTH_COMPONENT32F_NV 0x8DAB
#define GL_DEPTH32F_STENCIL8_NV 0x8DAC
#define GL_FLOAT_32_UNSIGNED_INT_24_8_REV 0x8DAD
#define GL_FLOAT_32_UNSIGNED_INT_24_8_REV_NV 0x8DAD
#define GL_SHADER_INCLUDE_ARB 0x8DAE
#define GL_DEPTH_BUFFER_FLOAT_MODE_NV 0x8DAF
#define GL_FRAMEBUFFER_SRGB 0x8DB9
#define GL_FRAMEBUFFER_SRGB_EXT 0x8DB9
#define GL_FRAMEBUFFER_SRGB_CAPABLE_EXT 0x8DBA
#define GL_COMPRESSED_RED_RGTC1 0x8DBB
#define GL_COMPRESSED_RED_RGTC1_EXT 0x8DBB
#define GL_COMPRESSED_SIGNED_RED_RGTC1 0x8DBC
#define GL_COMPRESSED_SIGNED_RED_RGTC1_EXT 0x8DBC
#define GL_COMPRESSED_RED_GREEN_RGTC2_EXT 0x8DBD
#define GL_COMPRESSED_RG_RGTC2 0x8DBD
#define GL_COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT 0x8DBE
#define GL_COMPRESSED_SIGNED_RG_RGTC2 0x8DBE
#define GL_SAMPLER_1D_ARRAY 0x8DC0
#define GL_SAMPLER_1D_ARRAY_EXT 0x8DC0
#define GL_SAMPLER_2D_ARRAY 0x8DC1
#define GL_SAMPLER_2D_ARRAY_EXT 0x8DC1
#define GL_SAMPLER_BUFFER 0x8DC2
#define GL_SAMPLER_BUFFER_EXT 0x8DC2
#define GL_SAMPLER_BUFFER_OES 0x8DC2
#define GL_SAMPLER_1D_ARRAY_SHADOW 0x8DC3
#define GL_SAMPLER_1D_ARRAY_SHADOW_EXT 0x8DC3
#define GL_SAMPLER_2D_ARRAY_SHADOW 0x8DC4
#define GL_SAMPLER_2D_ARRAY_SHADOW_EXT 0x8DC4
#define GL_SAMPLER_2D_ARRAY_SHADOW_NV 0x8DC4
#define GL_SAMPLER_CUBE_SHADOW 0x8DC5
#define GL_SAMPLER_CUBE_SHADOW_EXT 0x8DC5
#define GL_SAMPLER_CUBE_SHADOW_NV 0x8DC5
#define GL_UNSIGNED_INT_VEC2 0x8DC6
#define GL_UNSIGNED_INT_VEC2_EXT 0x8DC6
#define GL_UNSIGNED_INT_VEC3 0x8DC7
#define GL_UNSIGNED_INT_VEC3_EXT 0x8DC7
#define GL_UNSIGNED_INT_VEC4 0x8DC8
#define GL_UNSIGNED_INT_VEC4_EXT 0x8DC8
#define GL_INT_SAMPLER_1D 0x8DC9
#define GL_INT_SAMPLER_1D_EXT 0x8DC9
#define GL_INT_SAMPLER_2D 0x8DCA
#define GL_INT_SAMPLER_2D_EXT 0x8DCA
#define GL_INT_SAMPLER_3D 0x8DCB
#define GL_INT_SAMPLER_3D_EXT 0x8DCB
#define GL_INT_SAMPLER_CUBE 0x8DCC
#define GL_INT_SAMPLER_CUBE_EXT 0x8DCC
#define GL_INT_SAMPLER_2D_RECT 0x8DCD
#define GL_INT_SAMPLER_2D_RECT_EXT 0x8DCD
#define GL_INT_SAMPLER_1D_ARRAY 0x8DCE
#define GL_INT_SAMPLER_1D_ARRAY_EXT 0x8DCE
#define GL_INT_SAMPLER_2D_ARRAY 0x8DCF
#define GL_INT_SAMPLER_2D_ARRAY_EXT 0x8DCF
#define GL_INT_SAMPLER_BUFFER 0x8DD0
#define GL_INT_SAMPLER_BUFFER_EXT 0x8DD0
#define GL_INT_SAMPLER_BUFFER_OES 0x8DD0
#define GL_UNSIGNED_INT_SAMPLER_1D 0x8DD1
#define GL_UNSIGNED_INT_SAMPLER_1D_EXT 0x8DD1
#define GL_UNSIGNED_INT_SAMPLER_2D 0x8DD2
#define GL_UNSIGNED_INT_SAMPLER_2D_EXT 0x8DD2
#define GL_UNSIGNED_INT_SAMPLER_3D 0x8DD3
#define GL_UNSIGNED_INT_SAMPLER_3D_EXT 0x8DD3
#define GL_UNSIGNED_INT_SAMPLER_CUBE 0x8DD4
#define GL_UNSIGNED_INT_SAMPLER_CUBE_EXT 0x8DD4
#define GL_UNSIGNED_INT_SAMPLER_2D_RECT 0x8DD5
#define GL_UNSIGNED_INT_SAMPLER_2D_RECT_EXT 0x8DD5
#define GL_UNSIGNED_INT_SAMPLER_1D_ARRAY 0x8DD6
#define GL_UNSIGNED_INT_SAMPLER_1D_ARRAY_EXT 0x8DD6
#define GL_UNSIGNED_INT_SAMPLER_2D_ARRAY 0x8DD7
#define GL_UNSIGNED_INT_SAMPLER_2D_ARRAY_EXT 0x8DD7
#define GL_UNSIGNED_INT_SAMPLER_BUFFER 0x8DD8
#define GL_UNSIGNED_INT_SAMPLER_BUFFER_EXT 0x8DD8
#define GL_UNSIGNED_INT_SAMPLER_BUFFER_OES 0x8DD8
#define GL_GEOMETRY_SHADER 0x8DD9
#define GL_GEOMETRY_SHADER_ARB 0x8DD9
#define GL_GEOMETRY_SHADER_EXT 0x8DD9
#define GL_GEOMETRY_SHADER_OES 0x8DD9
#define GL_GEOMETRY_VERTICES_OUT_ARB 0x8DDA
#define GL_GEOMETRY_VERTICES_OUT_EXT 0x8DDA
#define GL_GEOMETRY_INPUT_TYPE_ARB 0x8DDB
#define GL_GEOMETRY_INPUT_TYPE_EXT 0x8DDB
#define GL_GEOMETRY_OUTPUT_TYPE_ARB 0x8DDC
#define GL_GEOMETRY_OUTPUT_TYPE_EXT 0x8DDC
#define GL_MAX_GEOMETRY_VARYING_COMPONENTS_ARB 0x8DDD
#define GL_MAX_GEOMETRY_VARYING_COMPONENTS_EXT 0x8DDD
#define GL_MAX_VERTEX_VARYING_COMPONENTS_ARB 0x8DDE
#define GL_MAX_VERTEX_VARYING_COMPONENTS_EXT 0x8DDE
#define GL_MAX_GEOMETRY_UNIFORM_COMPONENTS 0x8DDF
#define GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_ARB 0x8DDF
#define GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_EXT 0x8DDF
#define GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_OES 0x8DDF
#define GL_MAX_GEOMETRY_OUTPUT_VERTICES 0x8DE0
#define GL_MAX_GEOMETRY_OUTPUT_VERTICES_ARB 0x8DE0
#define GL_MAX_GEOMETRY_OUTPUT_VERTICES_EXT 0x8DE0
#define GL_MAX_GEOMETRY_OUTPUT_VERTICES_OES 0x8DE0
#define GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS 0x8DE1
#define GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_ARB 0x8DE1
#define GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_EXT 0x8DE1
#define GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_OES 0x8DE1
#define GL_MAX_VERTEX_BINDABLE_UNIFORMS_EXT 0x8DE2
#define GL_MAX_FRAGMENT_BINDABLE_UNIFORMS_EXT 0x8DE3
#define GL_MAX_GEOMETRY_BINDABLE_UNIFORMS_EXT 0x8DE4
#define GL_ACTIVE_SUBROUTINES 0x8DE5
#define GL_ACTIVE_SUBROUTINE_UNIFORMS 0x8DE6
#define GL_MAX_SUBROUTINES 0x8DE7
#define GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS 0x8DE8
#define GL_NAMED_STRING_LENGTH_ARB 0x8DE9
#define GL_NAMED_STRING_TYPE_ARB 0x8DEA
#define GL_MAX_BINDABLE_UNIFORM_SIZE_EXT 0x8DED
#define GL_UNIFORM_BUFFER_EXT 0x8DEE
#define GL_UNIFORM_BUFFER_BINDING_EXT 0x8DEF
#define GL_LOW_FLOAT 0x8DF0
#define GL_MEDIUM_FLOAT 0x8DF1
#define GL_HIGH_FLOAT 0x8DF2
#define GL_LOW_INT 0x8DF3
#define GL_MEDIUM_INT 0x8DF4
#define GL_HIGH_INT 0x8DF5
#define GL_UNSIGNED_INT_10_10_10_2_OES 0x8DF6
#define GL_INT_10_10_10_2_OES 0x8DF7
#define GL_SHADER_BINARY_FORMATS 0x8DF8
#define GL_NUM_SHADER_BINARY_FORMATS 0x8DF9
#define GL_SHADER_COMPILER 0x8DFA
#define GL_MAX_VERTEX_UNIFORM_VECTORS 0x8DFB
#define GL_MAX_VARYING_VECTORS 0x8DFC
#define GL_MAX_FRAGMENT_UNIFORM_VECTORS 0x8DFD
#define GL_RENDERBUFFER_COLOR_SAMPLES_NV 0x8E10
#define GL_MAX_MULTISAMPLE_COVERAGE_MODES_NV 0x8E11
#define GL_MULTISAMPLE_COVERAGE_MODES_NV 0x8E12
#define GL_QUERY_WAIT 0x8E13
#define GL_QUERY_WAIT_NV 0x8E13
#define GL_QUERY_NO_WAIT 0x8E14
#define GL_QUERY_NO_WAIT_NV 0x8E14
#define GL_QUERY_BY_REGION_WAIT 0x8E15
#define GL_QUERY_BY_REGION_WAIT_NV 0x8E15
#define GL_QUERY_BY_REGION_NO_WAIT 0x8E16
#define GL_QUERY_BY_REGION_NO_WAIT_NV 0x8E16
#define GL_QUERY_WAIT_INVERTED 0x8E17
#define GL_QUERY_NO_WAIT_INVERTED 0x8E18
#define GL_QUERY_BY_REGION_WAIT_INVERTED 0x8E19
#define GL_QUERY_BY_REGION_NO_WAIT_INVERTED 0x8E1A
#define GL_POLYGON_OFFSET_CLAMP 0x8E1B
#define GL_POLYGON_OFFSET_CLAMP_EXT 0x8E1B
#define GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS 0x8E1E
#define GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS_EXT 0x8E1E
#define GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS_OES 0x8E1E
#define GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS 0x8E1F
#define GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS_EXT 0x8E1F
#define GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS_OES 0x8E1F
#define GL_COLOR_SAMPLES_NV 0x8E20
#define GL_TRANSFORM_FEEDBACK 0x8E22
#define GL_TRANSFORM_FEEDBACK_NV 0x8E22
#define GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED 0x8E23
#define GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED_NV 0x8E23
#define GL_TRANSFORM_FEEDBACK_PAUSED 0x8E23
#define GL_TRANSFORM_FEEDBACK_ACTIVE 0x8E24
#define GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE 0x8E24
#define GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE_NV 0x8E24
#define GL_TRANSFORM_FEEDBACK_BINDING 0x8E25
#define GL_TRANSFORM_FEEDBACK_BINDING_NV 0x8E25
#define GL_FRAME_NV 0x8E26
#define GL_FIELDS_NV 0x8E27
#define GL_CURRENT_TIME_NV 0x8E28
#define GL_TIMESTAMP 0x8E28
#define GL_TIMESTAMP_EXT 0x8E28
#define GL_NUM_FILL_STREAMS_NV 0x8E29
#define GL_PRESENT_TIME_NV 0x8E2A
#define GL_PRESENT_DURATION_NV 0x8E2B
#define GL_DEPTH_COMPONENT16_NONLINEAR_NV 0x8E2C
#define GL_PROGRAM_MATRIX_EXT 0x8E2D
#define GL_TRANSPOSE_PROGRAM_MATRIX_EXT 0x8E2E
#define GL_PROGRAM_MATRIX_STACK_DEPTH_EXT 0x8E2F
#define GL_TEXTURE_SWIZZLE_R 0x8E42
#define GL_TEXTURE_SWIZZLE_R_EXT 0x8E42
#define GL_TEXTURE_SWIZZLE_G 0x8E43
#define GL_TEXTURE_SWIZZLE_G_EXT 0x8E43
#define GL_TEXTURE_SWIZZLE_B 0x8E44
#define GL_TEXTURE_SWIZZLE_B_EXT 0x8E44
#define GL_TEXTURE_SWIZZLE_A 0x8E45
#define GL_TEXTURE_SWIZZLE_A_EXT 0x8E45
#define GL_TEXTURE_SWIZZLE_RGBA 0x8E46
#define GL_TEXTURE_SWIZZLE_RGBA_EXT 0x8E46
#define GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS 0x8E47
#define GL_ACTIVE_SUBROUTINE_MAX_LENGTH 0x8E48
#define GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH 0x8E49
#define GL_NUM_COMPATIBLE_SUBROUTINES 0x8E4A
#define GL_COMPATIBLE_SUBROUTINES 0x8E4B
#define GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION 0x8E4C
#define GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION_EXT 0x8E4C
#define GL_FIRST_VERTEX_CONVENTION 0x8E4D
#define GL_FIRST_VERTEX_CONVENTION_EXT 0x8E4D
#define GL_FIRST_VERTEX_CONVENTION_OES 0x8E4D
#define GL_LAST_VERTEX_CONVENTION 0x8E4E
#define GL_LAST_VERTEX_CONVENTION_EXT 0x8E4E
#define GL_LAST_VERTEX_CONVENTION_OES 0x8E4E
#define GL_PROVOKING_VERTEX 0x8E4F
#define GL_PROVOKING_VERTEX_EXT 0x8E4F
#define GL_SAMPLE_LOCATION_ARB 0x8E50
#define GL_SAMPLE_LOCATION_NV 0x8E50
#define GL_SAMPLE_POSITION 0x8E50
#define GL_SAMPLE_POSITION_NV 0x8E50
#define GL_SAMPLE_MASK 0x8E51
#define GL_SAMPLE_MASK_NV 0x8E51
#define GL_SAMPLE_MASK_VALUE 0x8E52
#define GL_SAMPLE_MASK_VALUE_NV 0x8E52
#define GL_TEXTURE_BINDING_RENDERBUFFER_NV 0x8E53
#define GL_TEXTURE_RENDERBUFFER_DATA_STORE_BINDING_NV 0x8E54
#define GL_TEXTURE_RENDERBUFFER_NV 0x8E55
#define GL_SAMPLER_RENDERBUFFER_NV 0x8E56
#define GL_INT_SAMPLER_RENDERBUFFER_NV 0x8E57
#define GL_UNSIGNED_INT_SAMPLER_RENDERBUFFER_NV 0x8E58
#define GL_MAX_SAMPLE_MASK_WORDS 0x8E59
#define GL_MAX_SAMPLE_MASK_WORDS_NV 0x8E59
#define GL_MAX_GEOMETRY_PROGRAM_INVOCATIONS_NV 0x8E5A
#define GL_MAX_GEOMETRY_SHADER_INVOCATIONS 0x8E5A
#define GL_MAX_GEOMETRY_SHADER_INVOCATIONS_EXT 0x8E5A
#define GL_MAX_GEOMETRY_SHADER_INVOCATIONS_OES 0x8E5A
#define GL_MIN_FRAGMENT_INTERPOLATION_OFFSET 0x8E5B
#define GL_MIN_FRAGMENT_INTERPOLATION_OFFSET_NV 0x8E5B
#define GL_MIN_FRAGMENT_INTERPOLATION_OFFSET_OES 0x8E5B
#define GL_MAX_FRAGMENT_INTERPOLATION_OFFSET 0x8E5C
#define GL_MAX_FRAGMENT_INTERPOLATION_OFFSET_NV 0x8E5C
#define GL_MAX_FRAGMENT_INTERPOLATION_OFFSET_OES 0x8E5C
#define GL_FRAGMENT_INTERPOLATION_OFFSET_BITS 0x8E5D
#define GL_FRAGMENT_INTERPOLATION_OFFSET_BITS_OES 0x8E5D
#define GL_FRAGMENT_PROGRAM_INTERPOLATION_OFFSET_BITS_NV 0x8E5D
#define GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET 0x8E5E
#define GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_ARB 0x8E5E
#define GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_NV 0x8E5E
#define GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET 0x8E5F
#define GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_ARB 0x8E5F
#define GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_NV 0x8E5F
#define GL_MAX_TRANSFORM_FEEDBACK_BUFFERS 0x8E70
#define GL_MAX_VERTEX_STREAMS 0x8E71
#define GL_PATCH_VERTICES 0x8E72
#define GL_PATCH_VERTICES_EXT 0x8E72
#define GL_PATCH_VERTICES_OES 0x8E72
#define GL_PATCH_DEFAULT_INNER_LEVEL 0x8E73
#define GL_PATCH_DEFAULT_INNER_LEVEL_EXT 0x8E73
#define GL_PATCH_DEFAULT_OUTER_LEVEL 0x8E74
#define GL_PATCH_DEFAULT_OUTER_LEVEL_EXT 0x8E74
#define GL_TESS_CONTROL_OUTPUT_VERTICES 0x8E75
#define GL_TESS_CONTROL_OUTPUT_VERTICES_EXT 0x8E75
#define GL_TESS_CONTROL_OUTPUT_VERTICES_OES 0x8E75
#define GL_TESS_GEN_MODE 0x8E76
#define GL_TESS_GEN_MODE_EXT 0x8E76
#define GL_TESS_GEN_MODE_OES 0x8E76
#define GL_TESS_GEN_SPACING 0x8E77
#define GL_TESS_GEN_SPACING_EXT 0x8E77
#define GL_TESS_GEN_SPACING_OES 0x8E77
#define GL_TESS_GEN_VERTEX_ORDER 0x8E78
#define GL_TESS_GEN_VERTEX_ORDER_EXT 0x8E78
#define GL_TESS_GEN_VERTEX_ORDER_OES 0x8E78
#define GL_TESS_GEN_POINT_MODE 0x8E79
#define GL_TESS_GEN_POINT_MODE_EXT 0x8E79
#define GL_TESS_GEN_POINT_MODE_OES 0x8E79
#define GL_ISOLINES 0x8E7A
#define GL_ISOLINES_EXT 0x8E7A
#define GL_ISOLINES_OES 0x8E7A
#define GL_FRACTIONAL_ODD 0x8E7B
#define GL_FRACTIONAL_ODD_EXT 0x8E7B
#define GL_FRACTIONAL_ODD_OES 0x8E7B
#define GL_FRACTIONAL_EVEN 0x8E7C
#define GL_FRACTIONAL_EVEN_EXT 0x8E7C
#define GL_FRACTIONAL_EVEN_OES 0x8E7C
#define GL_MAX_PATCH_VERTICES 0x8E7D
#define GL_MAX_PATCH_VERTICES_EXT 0x8E7D
#define GL_MAX_PATCH_VERTICES_OES 0x8E7D
#define GL_MAX_TESS_GEN_LEVEL 0x8E7E
#define GL_MAX_TESS_GEN_LEVEL_EXT 0x8E7E
#define GL_MAX_TESS_GEN_LEVEL_OES 0x8E7E
#define GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS 0x8E7F
#define GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS_EXT 0x8E7F
#define GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS_OES 0x8E7F
#define GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS 0x8E80
#define GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS_EXT 0x8E80
#define GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS_OES 0x8E80
#define GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS 0x8E81
#define GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS_EXT 0x8E81
#define GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS_OES 0x8E81
#define GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS 0x8E82
#define GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS_EXT 0x8E82
#define GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS_OES 0x8E82
#define GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS 0x8E83
#define GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS_EXT 0x8E83
#define GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS_OES 0x8E83
#define GL_MAX_TESS_PATCH_COMPONENTS 0x8E84
#define GL_MAX_TESS_PATCH_COMPONENTS_EXT 0x8E84
#define GL_MAX_TESS_PATCH_COMPONENTS_OES 0x8E84
#define GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS 0x8E85
#define GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS_EXT 0x8E85
#define GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS_OES 0x8E85
#define GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS 0x8E86
#define GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS_EXT 0x8E86
#define GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS_OES 0x8E86
#define GL_TESS_EVALUATION_SHADER 0x8E87
#define GL_TESS_EVALUATION_SHADER_EXT 0x8E87
#define GL_TESS_EVALUATION_SHADER_OES 0x8E87
#define GL_TESS_CONTROL_SHADER 0x8E88
#define GL_TESS_CONTROL_SHADER_EXT 0x8E88
#define GL_TESS_CONTROL_SHADER_OES 0x8E88
#define GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS 0x8E89
#define GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS_EXT 0x8E89
#define GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS_OES 0x8E89
#define GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS 0x8E8A
#define GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS_EXT 0x8E8A
#define GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS_OES 0x8E8A
#define GL_COMPRESSED_RGBA_BPTC_UNORM 0x8E8C
#define GL_COMPRESSED_RGBA_BPTC_UNORM_ARB 0x8E8C
#define GL_COMPRESSED_RGBA_BPTC_UNORM_EXT 0x8E8C
#define GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM 0x8E8D
#define GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM_ARB 0x8E8D
#define GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT 0x8E8D
#define GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT 0x8E8E
#define GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT_ARB 0x8E8E
#define GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT 0x8E8E
#define GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT 0x8E8F
#define GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_ARB 0x8E8F
#define GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT 0x8E8F
#define GL_COVERAGE_COMPONENT_NV 0x8ED0
#define GL_COVERAGE_COMPONENT4_NV 0x8ED1
#define GL_COVERAGE_ATTACHMENT_NV 0x8ED2
#define GL_COVERAGE_BUFFERS_NV 0x8ED3
#define GL_COVERAGE_SAMPLES_NV 0x8ED4
#define GL_COVERAGE_ALL_FRAGMENTS_NV 0x8ED5
#define GL_COVERAGE_EDGE_FRAGMENTS_NV 0x8ED6
#define GL_COVERAGE_AUTOMATIC_NV 0x8ED7
#define GL_INCLUSIVE_EXT 0x8F10
#define GL_EXCLUSIVE_EXT 0x8F11
#define GL_WINDOW_RECTANGLE_EXT 0x8F12
#define GL_WINDOW_RECTANGLE_MODE_EXT 0x8F13
#define GL_MAX_WINDOW_RECTANGLES_EXT 0x8F14
#define GL_NUM_WINDOW_RECTANGLES_EXT 0x8F15
#define GL_BUFFER_GPU_ADDRESS_NV 0x8F1D
#define GL_VERTEX_ATTRIB_ARRAY_UNIFIED_NV 0x8F1E
#define GL_ELEMENT_ARRAY_UNIFIED_NV 0x8F1F
#define GL_VERTEX_ATTRIB_ARRAY_ADDRESS_NV 0x8F20
#define GL_VERTEX_ARRAY_ADDRESS_NV 0x8F21
#define GL_NORMAL_ARRAY_ADDRESS_NV 0x8F22
#define GL_COLOR_ARRAY_ADDRESS_NV 0x8F23
#define GL_INDEX_ARRAY_ADDRESS_NV 0x8F24
#define GL_TEXTURE_COORD_ARRAY_ADDRESS_NV 0x8F25
#define GL_EDGE_FLAG_ARRAY_ADDRESS_NV 0x8F26
#define GL_SECONDARY_COLOR_ARRAY_ADDRESS_NV 0x8F27
#define GL_FOG_COORD_ARRAY_ADDRESS_NV 0x8F28
#define GL_ELEMENT_ARRAY_ADDRESS_NV 0x8F29
#define GL_VERTEX_ATTRIB_ARRAY_LENGTH_NV 0x8F2A
#define GL_VERTEX_ARRAY_LENGTH_NV 0x8F2B
#define GL_NORMAL_ARRAY_LENGTH_NV 0x8F2C
#define GL_COLOR_ARRAY_LENGTH_NV 0x8F2D
#define GL_INDEX_ARRAY_LENGTH_NV 0x8F2E
#define GL_TEXTURE_COORD_ARRAY_LENGTH_NV 0x8F2F
#define GL_EDGE_FLAG_ARRAY_LENGTH_NV 0x8F30
#define GL_SECONDARY_COLOR_ARRAY_LENGTH_NV 0x8F31
#define GL_FOG_COORD_ARRAY_LENGTH_NV 0x8F32
#define GL_ELEMENT_ARRAY_LENGTH_NV 0x8F33
#define GL_GPU_ADDRESS_NV 0x8F34
#define GL_MAX_SHADER_BUFFER_ADDRESS_NV 0x8F35
#define GL_COPY_READ_BUFFER 0x8F36
#define GL_COPY_READ_BUFFER_BINDING 0x8F36
#define GL_COPY_READ_BUFFER_NV 0x8F36
#define GL_COPY_WRITE_BUFFER 0x8F37
#define GL_COPY_WRITE_BUFFER_BINDING 0x8F37
#define GL_COPY_WRITE_BUFFER_NV 0x8F37
#define GL_MAX_IMAGE_UNITS 0x8F38
#define GL_MAX_IMAGE_UNITS_EXT 0x8F38
#define GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS 0x8F39
#define GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS_EXT 0x8F39
#define GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES 0x8F39
#define GL_IMAGE_BINDING_NAME 0x8F3A
#define GL_IMAGE_BINDING_NAME_EXT 0x8F3A
#define GL_IMAGE_BINDING_LEVEL 0x8F3B
#define GL_IMAGE_BINDING_LEVEL_EXT 0x8F3B
#define GL_IMAGE_BINDING_LAYERED 0x8F3C
#define GL_IMAGE_BINDING_LAYERED_EXT 0x8F3C
#define GL_IMAGE_BINDING_LAYER 0x8F3D
#define GL_IMAGE_BINDING_LAYER_EXT 0x8F3D
#define GL_IMAGE_BINDING_ACCESS 0x8F3E
#define GL_IMAGE_BINDING_ACCESS_EXT 0x8F3E
#define GL_DRAW_INDIRECT_BUFFER 0x8F3F
#define GL_DRAW_INDIRECT_UNIFIED_NV 0x8F40
#define GL_DRAW_INDIRECT_ADDRESS_NV 0x8F41
#define GL_DRAW_INDIRECT_LENGTH_NV 0x8F42
#define GL_DRAW_INDIRECT_BUFFER_BINDING 0x8F43
#define GL_MAX_PROGRAM_SUBROUTINE_PARAMETERS_NV 0x8F44
#define GL_MAX_PROGRAM_SUBROUTINE_NUM_NV 0x8F45
#define GL_DOUBLE_MAT2 0x8F46
#define GL_DOUBLE_MAT2_EXT 0x8F46
#define GL_DOUBLE_MAT3 0x8F47
#define GL_DOUBLE_MAT3_EXT 0x8F47
#define GL_DOUBLE_MAT4 0x8F48
#define GL_DOUBLE_MAT4_EXT 0x8F48
#define GL_DOUBLE_MAT2x3 0x8F49
#define GL_DOUBLE_MAT2x3_EXT 0x8F49
#define GL_DOUBLE_MAT2x4 0x8F4A
#define GL_DOUBLE_MAT2x4_EXT 0x8F4A
#define GL_DOUBLE_MAT3x2 0x8F4B
#define GL_DOUBLE_MAT3x2_EXT 0x8F4B
#define GL_DOUBLE_MAT3x4 0x8F4C
#define GL_DOUBLE_MAT3x4_EXT 0x8F4C
#define GL_DOUBLE_MAT4x2 0x8F4D
#define GL_DOUBLE_MAT4x2_EXT 0x8F4D
#define GL_DOUBLE_MAT4x3 0x8F4E
#define GL_DOUBLE_MAT4x3_EXT 0x8F4E
#define GL_VERTEX_BINDING_BUFFER 0x8F4F
#define GL_MALI_SHADER_BINARY_ARM 0x8F60
#define GL_MALI_PROGRAM_BINARY_ARM 0x8F61
#define GL_MAX_SHADER_PIXEL_LOCAL_STORAGE_FAST_SIZE_EXT 0x8F63
#define GL_SHADER_PIXEL_LOCAL_STORAGE_EXT 0x8F64
#define GL_FETCH_PER_SAMPLE_ARM 0x8F65
#define GL_FRAGMENT_SHADER_FRAMEBUFFER_FETCH_MRT_ARM 0x8F66
#define GL_MAX_SHADER_PIXEL_LOCAL_STORAGE_SIZE_EXT 0x8F67
#define GL_TEXTURE_ASTC_DECODE_PRECISION_EXT 0x8F69
#define GL_RED_SNORM 0x8F90
#define GL_RG_SNORM 0x8F91
#define GL_RGB_SNORM 0x8F92
#define GL_RGBA_SNORM 0x8F93
#define GL_R8_SNORM 0x8F94
#define GL_RG8_SNORM 0x8F95
#define GL_RGB8_SNORM 0x8F96
#define GL_RGBA8_SNORM 0x8F97
#define GL_R16_SNORM 0x8F98
#define GL_R16_SNORM_EXT 0x8F98
#define GL_RG16_SNORM 0x8F99
#define GL_RG16_SNORM_EXT 0x8F99
#define GL_RGB16_SNORM 0x8F9A
#define GL_RGB16_SNORM_EXT 0x8F9A
#define GL_RGBA16_SNORM 0x8F9B
#define GL_RGBA16_SNORM_EXT 0x8F9B
#define GL_SIGNED_NORMALIZED 0x8F9C
#define GL_PRIMITIVE_RESTART 0x8F9D
#define GL_PRIMITIVE_RESTART_INDEX 0x8F9E
#define GL_MAX_PROGRAM_TEXTURE_GATHER_COMPONENTS_ARB 0x8F9F
#define GL_PERFMON_GLOBAL_MODE_QCOM 0x8FA0
#define GL_BINNING_CONTROL_HINT_QCOM 0x8FB0
#define GL_CPU_OPTIMIZED_QCOM 0x8FB1
#define GL_GPU_OPTIMIZED_QCOM 0x8FB2
#define GL_RENDER_DIRECT_TO_FRAMEBUFFER_QCOM 0x8FB3
#define GL_GPU_DISJOINT_EXT 0x8FBB
#define GL_SR8_EXT 0x8FBD
#define GL_SRG8_EXT 0x8FBE
#define GL_TEXTURE_FORMAT_SRGB_OVERRIDE_EXT 0x8FBF
#define GL_SHADER_BINARY_VIV 0x8FC4
#define GL_INT8_NV 0x8FE0
#define GL_INT8_VEC2_NV 0x8FE1
#define GL_INT8_VEC3_NV 0x8FE2
#define GL_INT8_VEC4_NV 0x8FE3
#define GL_INT16_NV 0x8FE4
#define GL_INT16_VEC2_NV 0x8FE5
#define GL_INT16_VEC3_NV 0x8FE6
#define GL_INT16_VEC4_NV 0x8FE7
#define GL_INT64_VEC2_ARB 0x8FE9
#define GL_INT64_VEC2_NV 0x8FE9
#define GL_INT64_VEC3_ARB 0x8FEA
#define GL_INT64_VEC3_NV 0x8FEA
#define GL_INT64_VEC4_ARB 0x8FEB
#define GL_INT64_VEC4_NV 0x8FEB
#define GL_UNSIGNED_INT8_NV 0x8FEC
#define GL_UNSIGNED_INT8_VEC2_NV 0x8FED
#define GL_UNSIGNED_INT8_VEC3_NV 0x8FEE
#define GL_UNSIGNED_INT8_VEC4_NV 0x8FEF
#define GL_UNSIGNED_INT16_NV 0x8FF0
#define GL_UNSIGNED_INT16_VEC2_NV 0x8FF1
#define GL_UNSIGNED_INT16_VEC3_NV 0x8FF2
#define GL_UNSIGNED_INT16_VEC4_NV 0x8FF3
#define GL_UNSIGNED_INT64_VEC2_ARB 0x8FF5
#define GL_UNSIGNED_INT64_VEC2_NV 0x8FF5
#define GL_UNSIGNED_INT64_VEC3_ARB 0x8FF6
#define GL_UNSIGNED_INT64_VEC3_NV 0x8FF6
#define GL_UNSIGNED_INT64_VEC4_ARB 0x8FF7
#define GL_UNSIGNED_INT64_VEC4_NV 0x8FF7
#define GL_FLOAT16_NV 0x8FF8
#define GL_FLOAT16_VEC2_NV 0x8FF9
#define GL_FLOAT16_VEC3_NV 0x8FFA
#define GL_FLOAT16_VEC4_NV 0x8FFB
#define GL_DOUBLE_VEC2 0x8FFC
#define GL_DOUBLE_VEC2_EXT 0x8FFC
#define GL_DOUBLE_VEC3 0x8FFD
#define GL_DOUBLE_VEC3_EXT 0x8FFD
#define GL_DOUBLE_VEC4 0x8FFE
#define GL_DOUBLE_VEC4_EXT 0x8FFE
#define GL_SAMPLER_BUFFER_AMD 0x9001
#define GL_INT_SAMPLER_BUFFER_AMD 0x9002
#define GL_UNSIGNED_INT_SAMPLER_BUFFER_AMD 0x9003
#define GL_TESSELLATION_MODE_AMD 0x9004
#define GL_TESSELLATION_FACTOR_AMD 0x9005
#define GL_DISCRETE_AMD 0x9006
#define GL_CONTINUOUS_AMD 0x9007
#define GL_TEXTURE_CUBE_MAP_ARRAY 0x9009
#define GL_TEXTURE_CUBE_MAP_ARRAY_ARB 0x9009
#define GL_TEXTURE_CUBE_MAP_ARRAY_EXT 0x9009
#define GL_TEXTURE_CUBE_MAP_ARRAY_OES 0x9009
#define GL_TEXTURE_BINDING_CUBE_MAP_ARRAY 0x900A
#define GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_ARB 0x900A
#define GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_EXT 0x900A
#define GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_OES 0x900A
#define GL_PROXY_TEXTURE_CUBE_MAP_ARRAY 0x900B
#define GL_PROXY_TEXTURE_CUBE_MAP_ARRAY_ARB 0x900B
#define GL_SAMPLER_CUBE_MAP_ARRAY 0x900C
#define GL_SAMPLER_CUBE_MAP_ARRAY_ARB 0x900C
#define GL_SAMPLER_CUBE_MAP_ARRAY_EXT 0x900C
#define GL_SAMPLER_CUBE_MAP_ARRAY_OES 0x900C
#define GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW 0x900D
#define GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_ARB 0x900D
#define GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_EXT 0x900D
#define GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_OES 0x900D
#define GL_INT_SAMPLER_CUBE_MAP_ARRAY 0x900E
#define GL_INT_SAMPLER_CUBE_MAP_ARRAY_ARB 0x900E
#define GL_INT_SAMPLER_CUBE_MAP_ARRAY_EXT 0x900E
#define GL_INT_SAMPLER_CUBE_MAP_ARRAY_OES 0x900E
#define GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY 0x900F
#define GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_ARB 0x900F
#define GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_EXT 0x900F
#define GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_OES 0x900F
#define GL_ALPHA_SNORM 0x9010
#define GL_LUMINANCE_SNORM 0x9011
#define GL_LUMINANCE_ALPHA_SNORM 0x9012
#define GL_INTENSITY_SNORM 0x9013
#define GL_ALPHA8_SNORM 0x9014
#define GL_LUMINANCE8_SNORM 0x9015
#define GL_LUMINANCE8_ALPHA8_SNORM 0x9016
#define GL_INTENSITY8_SNORM 0x9017
#define GL_ALPHA16_SNORM 0x9018
#define GL_LUMINANCE16_SNORM 0x9019
#define GL_LUMINANCE16_ALPHA16_SNORM 0x901A
#define GL_INTENSITY16_SNORM 0x901B
#define GL_FACTOR_MIN_AMD 0x901C
#define GL_FACTOR_MAX_AMD 0x901D
#define GL_DEPTH_CLAMP_NEAR_AMD 0x901E
#define GL_DEPTH_CLAMP_FAR_AMD 0x901F
#define GL_VIDEO_BUFFER_NV 0x9020
#define GL_VIDEO_BUFFER_BINDING_NV 0x9021
#define GL_FIELD_UPPER_NV 0x9022
#define GL_FIELD_LOWER_NV 0x9023
#define GL_NUM_VIDEO_CAPTURE_STREAMS_NV 0x9024
#define GL_NEXT_VIDEO_CAPTURE_BUFFER_STATUS_NV 0x9025
#define GL_VIDEO_CAPTURE_TO_422_SUPPORTED_NV 0x9026
#define GL_LAST_VIDEO_CAPTURE_STATUS_NV 0x9027
#define GL_VIDEO_BUFFER_PITCH_NV 0x9028
#define GL_VIDEO_COLOR_CONVERSION_MATRIX_NV 0x9029
#define GL_VIDEO_COLOR_CONVERSION_MAX_NV 0x902A
#define GL_VIDEO_COLOR_CONVERSION_MIN_NV 0x902B
#define GL_VIDEO_COLOR_CONVERSION_OFFSET_NV 0x902C
#define GL_VIDEO_BUFFER_INTERNAL_FORMAT_NV 0x902D
#define GL_PARTIAL_SUCCESS_NV 0x902E
#define GL_SUCCESS_NV 0x902F
#define GL_FAILURE_NV 0x9030
#define GL_YCBYCR8_422_NV 0x9031
#define GL_YCBAYCR8A_4224_NV 0x9032
#define GL_Z6Y10Z6CB10Z6Y10Z6CR10_422_NV 0x9033
#define GL_Z6Y10Z6CB10Z6A10Z6Y10Z6CR10Z6A10_4224_NV 0x9034
#define GL_Z4Y12Z4CB12Z4Y12Z4CR12_422_NV 0x9035
#define GL_Z4Y12Z4CB12Z4A12Z4Y12Z4CR12Z4A12_4224_NV 0x9036
#define GL_Z4Y12Z4CB12Z4CR12_444_NV 0x9037
#define GL_VIDEO_CAPTURE_FRAME_WIDTH_NV 0x9038
#define GL_VIDEO_CAPTURE_FRAME_HEIGHT_NV 0x9039
#define GL_VIDEO_CAPTURE_FIELD_UPPER_HEIGHT_NV 0x903A
#define GL_VIDEO_CAPTURE_FIELD_LOWER_HEIGHT_NV 0x903B
#define GL_VIDEO_CAPTURE_SURFACE_ORIGIN_NV 0x903C
#define GL_TEXTURE_COVERAGE_SAMPLES_NV 0x9045
#define GL_TEXTURE_COLOR_SAMPLES_NV 0x9046
#define GL_GPU_MEMORY_INFO_DEDICATED_VIDMEM_NVX 0x9047
#define GL_GPU_MEMORY_INFO_TOTAL_AVAILABLE_MEMORY_NVX 0x9048
#define GL_GPU_MEMORY_INFO_CURRENT_AVAILABLE_VIDMEM_NVX 0x9049
#define GL_GPU_MEMORY_INFO_EVICTION_COUNT_NVX 0x904A
#define GL_GPU_MEMORY_INFO_EVICTED_MEMORY_NVX 0x904B
#define GL_IMAGE_1D 0x904C
#define GL_IMAGE_1D_EXT 0x904C
#define GL_IMAGE_2D 0x904D
#define GL_IMAGE_2D_EXT 0x904D
#define GL_IMAGE_3D 0x904E
#define GL_IMAGE_3D_EXT 0x904E
#define GL_IMAGE_2D_RECT 0x904F
#define GL_IMAGE_2D_RECT_EXT 0x904F
#define GL_IMAGE_CUBE 0x9050
#define GL_IMAGE_CUBE_EXT 0x9050
#define GL_IMAGE_BUFFER 0x9051
#define GL_IMAGE_BUFFER_EXT 0x9051
#define GL_IMAGE_BUFFER_OES 0x9051
#define GL_IMAGE_1D_ARRAY 0x9052
#define GL_IMAGE_1D_ARRAY_EXT 0x9052
#define GL_IMAGE_2D_ARRAY 0x9053
#define GL_IMAGE_2D_ARRAY_EXT 0x9053
#define GL_IMAGE_CUBE_MAP_ARRAY 0x9054
#define GL_IMAGE_CUBE_MAP_ARRAY_EXT 0x9054
#define GL_IMAGE_CUBE_MAP_ARRAY_OES 0x9054
#define GL_IMAGE_2D_MULTISAMPLE 0x9055
#define GL_IMAGE_2D_MULTISAMPLE_EXT 0x9055
#define GL_IMAGE_2D_MULTISAMPLE_ARRAY 0x9056
#define GL_IMAGE_2D_MULTISAMPLE_ARRAY_EXT 0x9056
#define GL_INT_IMAGE_1D 0x9057
#define GL_INT_IMAGE_1D_EXT 0x9057
#define GL_INT_IMAGE_2D 0x9058
#define GL_INT_IMAGE_2D_EXT 0x9058
#define GL_INT_IMAGE_3D 0x9059
#define GL_INT_IMAGE_3D_EXT 0x9059
#define GL_INT_IMAGE_2D_RECT 0x905A
#define GL_INT_IMAGE_2D_RECT_EXT 0x905A
#define GL_INT_IMAGE_CUBE 0x905B
#define GL_INT_IMAGE_CUBE_EXT 0x905B
#define GL_INT_IMAGE_BUFFER 0x905C
#define GL_INT_IMAGE_BUFFER_EXT 0x905C
#define GL_INT_IMAGE_BUFFER_OES 0x905C
#define GL_INT_IMAGE_1D_ARRAY 0x905D
#define GL_INT_IMAGE_1D_ARRAY_EXT 0x905D
#define GL_INT_IMAGE_2D_ARRAY 0x905E
#define GL_INT_IMAGE_2D_ARRAY_EXT 0x905E
#define GL_INT_IMAGE_CUBE_MAP_ARRAY 0x905F
#define GL_INT_IMAGE_CUBE_MAP_ARRAY_EXT 0x905F
#define GL_INT_IMAGE_CUBE_MAP_ARRAY_OES 0x905F
#define GL_INT_IMAGE_2D_MULTISAMPLE 0x9060
#define GL_INT_IMAGE_2D_MULTISAMPLE_EXT 0x9060
#define GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY 0x9061
#define GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT 0x9061
#define GL_UNSIGNED_INT_IMAGE_1D 0x9062
#define GL_UNSIGNED_INT_IMAGE_1D_EXT 0x9062
#define GL_UNSIGNED_INT_IMAGE_2D 0x9063
#define GL_UNSIGNED_INT_IMAGE_2D_EXT 0x9063
#define GL_UNSIGNED_INT_IMAGE_3D 0x9064
#define GL_UNSIGNED_INT_IMAGE_3D_EXT 0x9064
#define GL_UNSIGNED_INT_IMAGE_2D_RECT 0x9065
#define GL_UNSIGNED_INT_IMAGE_2D_RECT_EXT 0x9065
#define GL_UNSIGNED_INT_IMAGE_CUBE 0x9066
#define GL_UNSIGNED_INT_IMAGE_CUBE_EXT 0x9066
#define GL_UNSIGNED_INT_IMAGE_BUFFER 0x9067
#define GL_UNSIGNED_INT_IMAGE_BUFFER_EXT 0x9067
#define GL_UNSIGNED_INT_IMAGE_BUFFER_OES 0x9067
#define GL_UNSIGNED_INT_IMAGE_1D_ARRAY 0x9068
#define GL_UNSIGNED_INT_IMAGE_1D_ARRAY_EXT 0x9068
#define GL_UNSIGNED_INT_IMAGE_2D_ARRAY 0x9069
#define GL_UNSIGNED_INT_IMAGE_2D_ARRAY_EXT 0x9069
#define GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY 0x906A
#define GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY_EXT 0x906A
#define GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY_OES 0x906A
#define GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE 0x906B
#define GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_EXT 0x906B
#define GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY 0x906C
#define GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT 0x906C
#define GL_MAX_IMAGE_SAMPLES 0x906D
#define GL_MAX_IMAGE_SAMPLES_EXT 0x906D
#define GL_IMAGE_BINDING_FORMAT 0x906E
#define GL_IMAGE_BINDING_FORMAT_EXT 0x906E
#define GL_RGB10_A2UI 0x906F
#define GL_PATH_FORMAT_SVG_NV 0x9070
#define GL_PATH_FORMAT_PS_NV 0x9071
#define GL_STANDARD_FONT_NAME_NV 0x9072
#define GL_SYSTEM_FONT_NAME_NV 0x9073
#define GL_FILE_NAME_NV 0x9074
#define GL_PATH_STROKE_WIDTH_NV 0x9075
#define GL_PATH_END_CAPS_NV 0x9076
#define GL_PATH_INITIAL_END_CAP_NV 0x9077
#define GL_PATH_TERMINAL_END_CAP_NV 0x9078
#define GL_PATH_JOIN_STYLE_NV 0x9079
#define GL_PATH_MITER_LIMIT_NV 0x907A
#define GL_PATH_DASH_CAPS_NV 0x907B
#define GL_PATH_INITIAL_DASH_CAP_NV 0x907C
#define GL_PATH_TERMINAL_DASH_CAP_NV 0x907D
#define GL_PATH_DASH_OFFSET_NV 0x907E
#define GL_PATH_CLIENT_LENGTH_NV 0x907F
#define GL_PATH_FILL_MODE_NV 0x9080
#define GL_PATH_FILL_MASK_NV 0x9081
#define GL_PATH_FILL_COVER_MODE_NV 0x9082
#define GL_PATH_STROKE_COVER_MODE_NV 0x9083
#define GL_PATH_STROKE_MASK_NV 0x9084
#define GL_COUNT_UP_NV 0x9088
#define GL_COUNT_DOWN_NV 0x9089
#define GL_PATH_OBJECT_BOUNDING_BOX_NV 0x908A
#define GL_CONVEX_HULL_NV 0x908B
#define GL_BOUNDING_BOX_NV 0x908D
#define GL_TRANSLATE_X_NV 0x908E
#define GL_TRANSLATE_Y_NV 0x908F
#define GL_TRANSLATE_2D_NV 0x9090
#define GL_TRANSLATE_3D_NV 0x9091
#define GL_AFFINE_2D_NV 0x9092
#define GL_AFFINE_3D_NV 0x9094
#define GL_TRANSPOSE_AFFINE_2D_NV 0x9096
#define GL_TRANSPOSE_AFFINE_3D_NV 0x9098
#define GL_UTF8_NV 0x909A
#define GL_UTF16_NV 0x909B
#define GL_BOUNDING_BOX_OF_BOUNDING_BOXES_NV 0x909C
#define GL_PATH_COMMAND_COUNT_NV 0x909D
#define GL_PATH_COORD_COUNT_NV 0x909E
#define GL_PATH_DASH_ARRAY_COUNT_NV 0x909F
#define GL_PATH_COMPUTED_LENGTH_NV 0x90A0
#define GL_PATH_FILL_BOUNDING_BOX_NV 0x90A1
#define GL_PATH_STROKE_BOUNDING_BOX_NV 0x90A2
#define GL_SQUARE_NV 0x90A3
#define GL_ROUND_NV 0x90A4
#define GL_TRIANGULAR_NV 0x90A5
#define GL_BEVEL_NV 0x90A6
#define GL_MITER_REVERT_NV 0x90A7
#define GL_MITER_TRUNCATE_NV 0x90A8
#define GL_SKIP_MISSING_GLYPH_NV 0x90A9
#define GL_USE_MISSING_GLYPH_NV 0x90AA
#define GL_PATH_ERROR_POSITION_NV 0x90AB
#define GL_PATH_FOG_GEN_MODE_NV 0x90AC
#define GL_ACCUM_ADJACENT_PAIRS_NV 0x90AD
#define GL_ADJACENT_PAIRS_NV 0x90AE
#define GL_FIRST_TO_REST_NV 0x90AF
#define GL_PATH_GEN_MODE_NV 0x90B0
#define GL_PATH_GEN_COEFF_NV 0x90B1
#define GL_PATH_GEN_COLOR_FORMAT_NV 0x90B2
#define GL_PATH_GEN_COMPONENTS_NV 0x90B3
#define GL_PATH_DASH_OFFSET_RESET_NV 0x90B4
#define GL_MOVE_TO_RESETS_NV 0x90B5
#define GL_MOVE_TO_CONTINUES_NV 0x90B6
#define GL_PATH_STENCIL_FUNC_NV 0x90B7
#define GL_PATH_STENCIL_REF_NV 0x90B8
#define GL_PATH_STENCIL_VALUE_MASK_NV 0x90B9
#define GL_SCALED_RESOLVE_FASTEST_EXT 0x90BA
#define GL_SCALED_RESOLVE_NICEST_EXT 0x90BB
#define GL_MIN_MAP_BUFFER_ALIGNMENT 0x90BC
#define GL_PATH_STENCIL_DEPTH_OFFSET_FACTOR_NV 0x90BD
#define GL_PATH_STENCIL_DEPTH_OFFSET_UNITS_NV 0x90BE
#define GL_PATH_COVER_DEPTH_FUNC_NV 0x90BF
#define GL_IMAGE_FORMAT_COMPATIBILITY_TYPE 0x90C7
#define GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE 0x90C8
#define GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS 0x90C9
#define GL_MAX_VERTEX_IMAGE_UNIFORMS 0x90CA
#define GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS 0x90CB
#define GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS_EXT 0x90CB
#define GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS_OES 0x90CB
#define GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS 0x90CC
#define GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS_EXT 0x90CC
#define GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS_OES 0x90CC
#define GL_MAX_GEOMETRY_IMAGE_UNIFORMS 0x90CD
#define GL_MAX_GEOMETRY_IMAGE_UNIFORMS_EXT 0x90CD
#define GL_MAX_GEOMETRY_IMAGE_UNIFORMS_OES 0x90CD
#define GL_MAX_FRAGMENT_IMAGE_UNIFORMS 0x90CE
#define GL_MAX_COMBINED_IMAGE_UNIFORMS 0x90CF
#define GL_MAX_DEEP_3D_TEXTURE_WIDTH_HEIGHT_NV 0x90D0
#define GL_MAX_DEEP_3D_TEXTURE_DEPTH_NV 0x90D1
#define GL_SHADER_STORAGE_BUFFER 0x90D2
#define GL_SHADER_STORAGE_BUFFER_BINDING 0x90D3
#define GL_SHADER_STORAGE_BUFFER_START 0x90D4
#define GL_SHADER_STORAGE_BUFFER_SIZE 0x90D5
#define GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS 0x90D6
#define GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS 0x90D7
#define GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS_EXT 0x90D7
#define GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS_OES 0x90D7
#define GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS 0x90D8
#define GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS_EXT 0x90D8
#define GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS_OES 0x90D8
#define GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS 0x90D9
#define GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS_EXT 0x90D9
#define GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS_OES 0x90D9
#define GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS 0x90DA
#define GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS 0x90DB
#define GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS 0x90DC
#define GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS 0x90DD
#define GL_MAX_SHADER_STORAGE_BLOCK_SIZE 0x90DE
#define GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT 0x90DF
#define GL_SYNC_X11_FENCE_EXT 0x90E1
#define GL_DEPTH_STENCIL_TEXTURE_MODE 0x90EA
#define GL_MAX_COMPUTE_FIXED_GROUP_INVOCATIONS_ARB 0x90EB
#define GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS 0x90EB
#define GL_UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER 0x90EC
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER 0x90ED
#define GL_DISPATCH_INDIRECT_BUFFER 0x90EE
#define GL_DISPATCH_INDIRECT_BUFFER_BINDING 0x90EF
#define GL_COLOR_ATTACHMENT_EXT 0x90F0
#define GL_MULTIVIEW_EXT 0x90F1
#define GL_MAX_MULTIVIEW_BUFFERS_EXT 0x90F2
#define GL_CONTEXT_ROBUST_ACCESS 0x90F3
#define GL_CONTEXT_ROBUST_ACCESS_EXT 0x90F3
#define GL_CONTEXT_ROBUST_ACCESS_KHR 0x90F3
#define GL_COMPUTE_PROGRAM_NV 0x90FB
#define GL_COMPUTE_PROGRAM_PARAMETER_BUFFER_NV 0x90FC
#define GL_TEXTURE_2D_MULTISAMPLE 0x9100
#define GL_PROXY_TEXTURE_2D_MULTISAMPLE 0x9101
#define GL_TEXTURE_2D_MULTISAMPLE_ARRAY 0x9102
#define GL_TEXTURE_2D_MULTISAMPLE_ARRAY_OES 0x9102
#define GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY 0x9103
#define GL_TEXTURE_BINDING_2D_MULTISAMPLE 0x9104
#define GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY 0x9105
#define GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY_OES 0x9105
#define GL_TEXTURE_SAMPLES 0x9106
#define GL_TEXTURE_FIXED_SAMPLE_LOCATIONS 0x9107
#define GL_SAMPLER_2D_MULTISAMPLE 0x9108
#define GL_INT_SAMPLER_2D_MULTISAMPLE 0x9109
#define GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE 0x910A
#define GL_SAMPLER_2D_MULTISAMPLE_ARRAY 0x910B
#define GL_SAMPLER_2D_MULTISAMPLE_ARRAY_OES 0x910B
#define GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY 0x910C
#define GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY_OES 0x910C
#define GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY 0x910D
#define GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY_OES 0x910D
#define GL_MAX_COLOR_TEXTURE_SAMPLES 0x910E
#define GL_MAX_DEPTH_TEXTURE_SAMPLES 0x910F
#define GL_MAX_INTEGER_SAMPLES 0x9110
#define GL_MAX_SERVER_WAIT_TIMEOUT 0x9111
#define GL_MAX_SERVER_WAIT_TIMEOUT_APPLE 0x9111
#define GL_OBJECT_TYPE 0x9112
#define GL_OBJECT_TYPE_APPLE 0x9112
#define GL_SYNC_CONDITION 0x9113
#define GL_SYNC_CONDITION_APPLE 0x9113
#define GL_SYNC_STATUS 0x9114
#define GL_SYNC_STATUS_APPLE 0x9114
#define GL_SYNC_FLAGS 0x9115
#define GL_SYNC_FLAGS_APPLE 0x9115
#define GL_SYNC_FENCE 0x9116
#define GL_SYNC_FENCE_APPLE 0x9116
#define GL_SYNC_GPU_COMMANDS_COMPLETE 0x9117
#define GL_SYNC_GPU_COMMANDS_COMPLETE_APPLE 0x9117
#define GL_UNSIGNALED 0x9118
#define GL_UNSIGNALED_APPLE 0x9118
#define GL_SIGNALED 0x9119
#define GL_SIGNALED_APPLE 0x9119
#define GL_ALREADY_SIGNALED 0x911A
#define GL_ALREADY_SIGNALED_APPLE 0x911A
#define GL_TIMEOUT_EXPIRED 0x911B
#define GL_TIMEOUT_EXPIRED_APPLE 0x911B
#define GL_CONDITION_SATISFIED 0x911C
#define GL_CONDITION_SATISFIED_APPLE 0x911C
#define GL_WAIT_FAILED 0x911D
#define GL_WAIT_FAILED_APPLE 0x911D
#define GL_BUFFER_ACCESS_FLAGS 0x911F
#define GL_BUFFER_MAP_LENGTH 0x9120
#define GL_BUFFER_MAP_OFFSET 0x9121
#define GL_MAX_VERTEX_OUTPUT_COMPONENTS 0x9122
#define GL_MAX_GEOMETRY_INPUT_COMPONENTS 0x9123
#define GL_MAX_GEOMETRY_INPUT_COMPONENTS_EXT 0x9123
#define GL_MAX_GEOMETRY_INPUT_COMPONENTS_OES 0x9123
#define GL_MAX_GEOMETRY_OUTPUT_COMPONENTS 0x9124
#define GL_MAX_GEOMETRY_OUTPUT_COMPONENTS_EXT 0x9124
#define GL_MAX_GEOMETRY_OUTPUT_COMPONENTS_OES 0x9124
#define GL_MAX_FRAGMENT_INPUT_COMPONENTS 0x9125
#define GL_CONTEXT_PROFILE_MASK 0x9126
#define GL_UNPACK_COMPRESSED_BLOCK_WIDTH 0x9127
#define GL_UNPACK_COMPRESSED_BLOCK_HEIGHT 0x9128
#define GL_UNPACK_COMPRESSED_BLOCK_DEPTH 0x9129
#define GL_UNPACK_COMPRESSED_BLOCK_SIZE 0x912A
#define GL_PACK_COMPRESSED_BLOCK_WIDTH 0x912B
#define GL_PACK_COMPRESSED_BLOCK_HEIGHT 0x912C
#define GL_PACK_COMPRESSED_BLOCK_DEPTH 0x912D
#define GL_PACK_COMPRESSED_BLOCK_SIZE 0x912E
#define GL_TEXTURE_IMMUTABLE_FORMAT 0x912F
#define GL_TEXTURE_IMMUTABLE_FORMAT_EXT 0x912F
#define GL_SGX_PROGRAM_BINARY_IMG 0x9130
#define GL_RENDERBUFFER_SAMPLES_IMG 0x9133
#define GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_IMG 0x9134
#define GL_MAX_SAMPLES_IMG 0x9135
#define GL_TEXTURE_SAMPLES_IMG 0x9136
#define GL_COMPRESSED_RGBA_PVRTC_2BPPV2_IMG 0x9137
#define GL_COMPRESSED_RGBA_PVRTC_4BPPV2_IMG 0x9138
#define GL_CUBIC_IMG 0x9139
#define GL_CUBIC_MIPMAP_NEAREST_IMG 0x913A
#define GL_CUBIC_MIPMAP_LINEAR_IMG 0x913B
#define GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_AND_DOWNSAMPLE_IMG 0x913C
#define GL_NUM_DOWNSAMPLE_SCALES_IMG 0x913D
#define GL_DOWNSAMPLE_SCALES_IMG 0x913E
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_SCALE_IMG 0x913F
#define GL_MAX_DEBUG_MESSAGE_LENGTH 0x9143
#define GL_MAX_DEBUG_MESSAGE_LENGTH_AMD 0x9143
#define GL_MAX_DEBUG_MESSAGE_LENGTH_ARB 0x9143
#define GL_MAX_DEBUG_MESSAGE_LENGTH_KHR 0x9143
#define GL_MAX_DEBUG_LOGGED_MESSAGES 0x9144
#define GL_MAX_DEBUG_LOGGED_MESSAGES_AMD 0x9144
#define GL_MAX_DEBUG_LOGGED_MESSAGES_ARB 0x9144
#define GL_MAX_DEBUG_LOGGED_MESSAGES_KHR 0x9144
#define GL_DEBUG_LOGGED_MESSAGES 0x9145
#define GL_DEBUG_LOGGED_MESSAGES_AMD 0x9145
#define GL_DEBUG_LOGGED_MESSAGES_ARB 0x9145
#define GL_DEBUG_LOGGED_MESSAGES_KHR 0x9145
#define GL_DEBUG_SEVERITY_HIGH 0x9146
#define GL_DEBUG_SEVERITY_HIGH_AMD 0x9146
#define GL_DEBUG_SEVERITY_HIGH_ARB 0x9146
#define GL_DEBUG_SEVERITY_HIGH_KHR 0x9146
#define GL_DEBUG_SEVERITY_MEDIUM 0x9147
#define GL_DEBUG_SEVERITY_MEDIUM_AMD 0x9147
#define GL_DEBUG_SEVERITY_MEDIUM_ARB 0x9147
#define GL_DEBUG_SEVERITY_MEDIUM_KHR 0x9147
#define GL_DEBUG_SEVERITY_LOW 0x9148
#define GL_DEBUG_SEVERITY_LOW_AMD 0x9148
#define GL_DEBUG_SEVERITY_LOW_ARB 0x9148
#define GL_DEBUG_SEVERITY_LOW_KHR 0x9148
#define GL_DEBUG_CATEGORY_API_ERROR_AMD 0x9149
#define GL_DEBUG_CATEGORY_WINDOW_SYSTEM_AMD 0x914A
#define GL_DEBUG_CATEGORY_DEPRECATION_AMD 0x914B
#define GL_DEBUG_CATEGORY_UNDEFINED_BEHAVIOR_AMD 0x914C
#define GL_DEBUG_CATEGORY_PERFORMANCE_AMD 0x914D
#define GL_DEBUG_CATEGORY_SHADER_COMPILER_AMD 0x914E
#define GL_DEBUG_CATEGORY_APPLICATION_AMD 0x914F
#define GL_DEBUG_CATEGORY_OTHER_AMD 0x9150
#define GL_BUFFER_OBJECT_EXT 0x9151
#define GL_DATA_BUFFER_AMD 0x9151
#define GL_PERFORMANCE_MONITOR_AMD 0x9152
#define GL_QUERY_OBJECT_AMD 0x9153
#define GL_QUERY_OBJECT_EXT 0x9153
#define GL_VERTEX_ARRAY_OBJECT_AMD 0x9154
#define GL_VERTEX_ARRAY_OBJECT_EXT 0x9154
#define GL_SAMPLER_OBJECT_AMD 0x9155
#define GL_EXTERNAL_VIRTUAL_MEMORY_BUFFER_AMD 0x9160
#define GL_QUERY_BUFFER 0x9192
#define GL_QUERY_BUFFER_AMD 0x9192
#define GL_QUERY_BUFFER_BINDING 0x9193
#define GL_QUERY_BUFFER_BINDING_AMD 0x9193
#define GL_QUERY_RESULT_NO_WAIT 0x9194
#define GL_QUERY_RESULT_NO_WAIT_AMD 0x9194
#define GL_VIRTUAL_PAGE_SIZE_X_AMD 0x9195
#define GL_VIRTUAL_PAGE_SIZE_X_ARB 0x9195
#define GL_VIRTUAL_PAGE_SIZE_X_EXT 0x9195
#define GL_VIRTUAL_PAGE_SIZE_Y_AMD 0x9196
#define GL_VIRTUAL_PAGE_SIZE_Y_ARB 0x9196
#define GL_VIRTUAL_PAGE_SIZE_Y_EXT 0x9196
#define GL_VIRTUAL_PAGE_SIZE_Z_AMD 0x9197
#define GL_VIRTUAL_PAGE_SIZE_Z_ARB 0x9197
#define GL_VIRTUAL_PAGE_SIZE_Z_EXT 0x9197
#define GL_MAX_SPARSE_TEXTURE_SIZE_AMD 0x9198
#define GL_MAX_SPARSE_TEXTURE_SIZE_ARB 0x9198
#define GL_MAX_SPARSE_TEXTURE_SIZE_EXT 0x9198
#define GL_MAX_SPARSE_3D_TEXTURE_SIZE_AMD 0x9199
#define GL_MAX_SPARSE_3D_TEXTURE_SIZE_ARB 0x9199
#define GL_MAX_SPARSE_3D_TEXTURE_SIZE_EXT 0x9199
#define GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS 0x919A
#define GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS_ARB 0x919A
#define GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS_EXT 0x919A
#define GL_MIN_SPARSE_LEVEL_AMD 0x919B
#define GL_MIN_LOD_WARNING_AMD 0x919C
#define GL_TEXTURE_BUFFER_OFFSET 0x919D
#define GL_TEXTURE_BUFFER_OFFSET_EXT 0x919D
#define GL_TEXTURE_BUFFER_OFFSET_OES 0x919D
#define GL_TEXTURE_BUFFER_SIZE 0x919E
#define GL_TEXTURE_BUFFER_SIZE_EXT 0x919E
#define GL_TEXTURE_BUFFER_SIZE_OES 0x919E
#define GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT 0x919F
#define GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT_EXT 0x919F
#define GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT_OES 0x919F
#define GL_STREAM_RASTERIZATION_AMD 0x91A0
#define GL_VERTEX_ELEMENT_SWIZZLE_AMD 0x91A4
#define GL_VERTEX_ID_SWIZZLE_AMD 0x91A5
#define GL_TEXTURE_SPARSE_ARB 0x91A6
#define GL_TEXTURE_SPARSE_EXT 0x91A6
#define GL_VIRTUAL_PAGE_SIZE_INDEX_ARB 0x91A7
#define GL_VIRTUAL_PAGE_SIZE_INDEX_EXT 0x91A7
#define GL_NUM_VIRTUAL_PAGE_SIZES_ARB 0x91A8
#define GL_NUM_VIRTUAL_PAGE_SIZES_EXT 0x91A8
#define GL_SPARSE_TEXTURE_FULL_ARRAY_CUBE_MIPMAPS_ARB 0x91A9
#define GL_SPARSE_TEXTURE_FULL_ARRAY_CUBE_MIPMAPS_EXT 0x91A9
#define GL_NUM_SPARSE_LEVELS_ARB 0x91AA
#define GL_NUM_SPARSE_LEVELS_EXT 0x91AA
#define GL_PIXELS_PER_SAMPLE_PATTERN_X_AMD 0x91AE
#define GL_PIXELS_PER_SAMPLE_PATTERN_Y_AMD 0x91AF
#define GL_MAX_SHADER_COMPILER_THREADS_ARB 0x91B0
#define GL_MAX_SHADER_COMPILER_THREADS_KHR 0x91B0
#define GL_COMPLETION_STATUS_ARB 0x91B1
#define GL_COMPLETION_STATUS_KHR 0x91B1
#define GL_RENDERBUFFER_STORAGE_SAMPLES_AMD 0x91B2
#define GL_MAX_COLOR_FRAMEBUFFER_SAMPLES_AMD 0x91B3
#define GL_MAX_COLOR_FRAMEBUFFER_STORAGE_SAMPLES_AMD 0x91B4
#define GL_MAX_DEPTH_STENCIL_FRAMEBUFFER_SAMPLES_AMD 0x91B5
#define GL_NUM_SUPPORTED_MULTISAMPLE_MODES_AMD 0x91B6
#define GL_SUPPORTED_MULTISAMPLE_MODES_AMD 0x91B7
#define GL_COMPUTE_SHADER 0x91B9
#define GL_MAX_COMPUTE_UNIFORM_BLOCKS 0x91BB
#define GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS 0x91BC
#define GL_MAX_COMPUTE_IMAGE_UNIFORMS 0x91BD
#define GL_MAX_COMPUTE_WORK_GROUP_COUNT 0x91BE
#define GL_MAX_COMPUTE_FIXED_GROUP_SIZE_ARB 0x91BF
#define GL_MAX_COMPUTE_WORK_GROUP_SIZE 0x91BF
#define GL_FLOAT16_MAT2_AMD 0x91C5
#define GL_FLOAT16_MAT3_AMD 0x91C6
#define GL_FLOAT16_MAT4_AMD 0x91C7
#define GL_FLOAT16_MAT2x3_AMD 0x91C8
#define GL_FLOAT16_MAT2x4_AMD 0x91C9
#define GL_FLOAT16_MAT3x2_AMD 0x91CA
#define GL_FLOAT16_MAT3x4_AMD 0x91CB
#define GL_FLOAT16_MAT4x2_AMD 0x91CC
#define GL_FLOAT16_MAT4x3_AMD 0x91CD
#define GL_UNPACK_FLIP_Y_WEBGL 0x9240
#define GL_UNPACK_PREMULTIPLY_ALPHA_WEBGL 0x9241
#define GL_CONTEXT_LOST_WEBGL 0x9242
#define GL_UNPACK_COLORSPACE_CONVERSION_WEBGL 0x9243
#define GL_BROWSER_DEFAULT_WEBGL 0x9244
#define GL_SHADER_BINARY_DMP 0x9250
#define GL_SMAPHS30_PROGRAM_BINARY_DMP 0x9251
#define GL_SMAPHS_PROGRAM_BINARY_DMP 0x9252
#define GL_DMP_PROGRAM_BINARY_DMP 0x9253
#define GL_GCCSO_SHADER_BINARY_FJ 0x9260
#define GL_COMPRESSED_R11_EAC 0x9270
#define GL_COMPRESSED_R11_EAC_OES 0x9270
#define GL_COMPRESSED_SIGNED_R11_EAC 0x9271
#define GL_COMPRESSED_SIGNED_R11_EAC_OES 0x9271
#define GL_COMPRESSED_RG11_EAC 0x9272
#define GL_COMPRESSED_RG11_EAC_OES 0x9272
#define GL_COMPRESSED_SIGNED_RG11_EAC 0x9273
#define GL_COMPRESSED_SIGNED_RG11_EAC_OES 0x9273
#define GL_COMPRESSED_RGB8_ETC2 0x9274
#define GL_COMPRESSED_RGB8_ETC2_OES 0x9274
#define GL_COMPRESSED_SRGB8_ETC2 0x9275
#define GL_COMPRESSED_SRGB8_ETC2_OES 0x9275
#define GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 0x9276
#define GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2_OES 0x9276
#define GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 0x9277
#define GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2_OES 0x9277
#define GL_COMPRESSED_RGBA8_ETC2_EAC 0x9278
#define GL_COMPRESSED_RGBA8_ETC2_EAC_OES 0x9278
#define GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC 0x9279
#define GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC_OES 0x9279
#define GL_BLEND_PREMULTIPLIED_SRC_NV 0x9280
#define GL_BLEND_OVERLAP_NV 0x9281
#define GL_UNCORRELATED_NV 0x9282
#define GL_DISJOINT_NV 0x9283
#define GL_CONJOINT_NV 0x9284
#define GL_BLEND_ADVANCED_COHERENT_KHR 0x9285
#define GL_BLEND_ADVANCED_COHERENT_NV 0x9285
#define GL_SRC_NV 0x9286
#define GL_DST_NV 0x9287
#define GL_SRC_OVER_NV 0x9288
#define GL_DST_OVER_NV 0x9289
#define GL_SRC_IN_NV 0x928A
#define GL_DST_IN_NV 0x928B
#define GL_SRC_OUT_NV 0x928C
#define GL_DST_OUT_NV 0x928D
#define GL_SRC_ATOP_NV 0x928E
#define GL_DST_ATOP_NV 0x928F
#define GL_PLUS_NV 0x9291
#define GL_PLUS_DARKER_NV 0x9292
#define GL_MULTIPLY 0x9294
#define GL_MULTIPLY_KHR 0x9294
#define GL_MULTIPLY_NV 0x9294
#define GL_SCREEN 0x9295
#define GL_SCREEN_KHR 0x9295
#define GL_SCREEN_NV 0x9295
#define GL_OVERLAY 0x9296
#define GL_OVERLAY_KHR 0x9296
#define GL_OVERLAY_NV 0x9296
#define GL_DARKEN 0x9297
#define GL_DARKEN_KHR 0x9297
#define GL_DARKEN_NV 0x9297
#define GL_LIGHTEN 0x9298
#define GL_LIGHTEN_KHR 0x9298
#define GL_LIGHTEN_NV 0x9298
#define GL_COLORDODGE 0x9299
#define GL_COLORDODGE_KHR 0x9299
#define GL_COLORDODGE_NV 0x9299
#define GL_COLORBURN 0x929A
#define GL_COLORBURN_KHR 0x929A
#define GL_COLORBURN_NV 0x929A
#define GL_HARDLIGHT 0x929B
#define GL_HARDLIGHT_KHR 0x929B
#define GL_HARDLIGHT_NV 0x929B
#define GL_SOFTLIGHT 0x929C
#define GL_SOFTLIGHT_KHR 0x929C
#define GL_SOFTLIGHT_NV 0x929C
#define GL_DIFFERENCE 0x929E
#define GL_DIFFERENCE_KHR 0x929E
#define GL_DIFFERENCE_NV 0x929E
#define GL_MINUS_NV 0x929F
#define GL_EXCLUSION 0x92A0
#define GL_EXCLUSION_KHR 0x92A0
#define GL_EXCLUSION_NV 0x92A0
#define GL_CONTRAST_NV 0x92A1
#define GL_INVERT_RGB_NV 0x92A3
#define GL_LINEARDODGE_NV 0x92A4
#define GL_LINEARBURN_NV 0x92A5
#define GL_VIVIDLIGHT_NV 0x92A6
#define GL_LINEARLIGHT_NV 0x92A7
#define GL_PINLIGHT_NV 0x92A8
#define GL_HARDMIX_NV 0x92A9
#define GL_HSL_HUE 0x92AD
#define GL_HSL_HUE_KHR 0x92AD
#define GL_HSL_HUE_NV 0x92AD
#define GL_HSL_SATURATION 0x92AE
#define GL_HSL_SATURATION_KHR 0x92AE
#define GL_HSL_SATURATION_NV 0x92AE
#define GL_HSL_COLOR 0x92AF
#define GL_HSL_COLOR_KHR 0x92AF
#define GL_HSL_COLOR_NV 0x92AF
#define GL_HSL_LUMINOSITY 0x92B0
#define GL_HSL_LUMINOSITY_KHR 0x92B0
#define GL_HSL_LUMINOSITY_NV 0x92B0
#define GL_PLUS_CLAMPED_NV 0x92B1
#define GL_PLUS_CLAMPED_ALPHA_NV 0x92B2
#define GL_MINUS_CLAMPED_NV 0x92B3
#define GL_INVERT_OVG_NV 0x92B4
#define GL_MAX_LGPU_GPUS_NVX 0x92BA
#define GL_MULTICAST_GPUS_NV 0x92BA
#define GL_PURGED_CONTEXT_RESET_NV 0x92BB
#define GL_PRIMITIVE_BOUNDING_BOX 0x92BE
#define GL_PRIMITIVE_BOUNDING_BOX_ARB 0x92BE
#define GL_PRIMITIVE_BOUNDING_BOX_EXT 0x92BE
#define GL_PRIMITIVE_BOUNDING_BOX_OES 0x92BE
#define GL_ALPHA_TO_COVERAGE_DITHER_MODE_NV 0x92BF
#define GL_ATOMIC_COUNTER_BUFFER 0x92C0
#define GL_ATOMIC_COUNTER_BUFFER_BINDING 0x92C1
#define GL_ATOMIC_COUNTER_BUFFER_START 0x92C2
#define GL_ATOMIC_COUNTER_BUFFER_SIZE 0x92C3
#define GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE 0x92C4
#define GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS 0x92C5
#define GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES 0x92C6
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER 0x92C7
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER 0x92C8
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER 0x92C9
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER 0x92CA
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER 0x92CB
#define GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS 0x92CC
#define GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS 0x92CD
#define GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS_EXT 0x92CD
#define GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS_OES 0x92CD
#define GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS 0x92CE
#define GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS_EXT 0x92CE
#define GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS_OES 0x92CE
#define GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS 0x92CF
#define GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS_EXT 0x92CF
#define GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS_OES 0x92CF
#define GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS 0x92D0
#define GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS 0x92D1
#define GL_MAX_VERTEX_ATOMIC_COUNTERS 0x92D2
#define GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS 0x92D3
#define GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS_EXT 0x92D3
#define GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS_OES 0x92D3
#define GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS 0x92D4
#define GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS_EXT 0x92D4
#define GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS_OES 0x92D4
#define GL_MAX_GEOMETRY_ATOMIC_COUNTERS 0x92D5
#define GL_MAX_GEOMETRY_ATOMIC_COUNTERS_EXT 0x92D5
#define GL_MAX_GEOMETRY_ATOMIC_COUNTERS_OES 0x92D5
#define GL_MAX_FRAGMENT_ATOMIC_COUNTERS 0x92D6
#define GL_MAX_COMBINED_ATOMIC_COUNTERS 0x92D7
#define GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE 0x92D8
#define GL_ACTIVE_ATOMIC_COUNTER_BUFFERS 0x92D9
#define GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX 0x92DA
#define GL_UNSIGNED_INT_ATOMIC_COUNTER 0x92DB
#define GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS 0x92DC
#define GL_FRAGMENT_COVERAGE_TO_COLOR_NV 0x92DD
#define GL_FRAGMENT_COVERAGE_COLOR_NV 0x92DE
#define GL_DEBUG_OUTPUT 0x92E0
#define GL_DEBUG_OUTPUT_KHR 0x92E0
#define GL_UNIFORM 0x92E1
#define GL_UNIFORM_BLOCK 0x92E2
#define GL_PROGRAM_INPUT 0x92E3
#define GL_PROGRAM_OUTPUT 0x92E4
#define GL_BUFFER_VARIABLE 0x92E5
#define GL_SHADER_STORAGE_BLOCK 0x92E6
#define GL_IS_PER_PATCH 0x92E7
#define GL_IS_PER_PATCH_EXT 0x92E7
#define GL_IS_PER_PATCH_OES 0x92E7
#define GL_VERTEX_SUBROUTINE 0x92E8
#define GL_TESS_CONTROL_SUBROUTINE 0x92E9
#define GL_TESS_EVALUATION_SUBROUTINE 0x92EA
#define GL_GEOMETRY_SUBROUTINE 0x92EB
#define GL_FRAGMENT_SUBROUTINE 0x92EC
#define GL_COMPUTE_SUBROUTINE 0x92ED
#define GL_VERTEX_SUBROUTINE_UNIFORM 0x92EE
#define GL_TESS_CONTROL_SUBROUTINE_UNIFORM 0x92EF
#define GL_TESS_EVALUATION_SUBROUTINE_UNIFORM 0x92F0
#define GL_GEOMETRY_SUBROUTINE_UNIFORM 0x92F1
#define GL_FRAGMENT_SUBROUTINE_UNIFORM 0x92F2
#define GL_COMPUTE_SUBROUTINE_UNIFORM 0x92F3
#define GL_TRANSFORM_FEEDBACK_VARYING 0x92F4
#define GL_ACTIVE_RESOURCES 0x92F5
#define GL_MAX_NAME_LENGTH 0x92F6
#define GL_MAX_NUM_ACTIVE_VARIABLES 0x92F7
#define GL_MAX_NUM_COMPATIBLE_SUBROUTINES 0x92F8
#define GL_NAME_LENGTH 0x92F9
#define GL_TYPE 0x92FA
#define GL_ARRAY_SIZE 0x92FB
#define GL_OFFSET 0x92FC
#define GL_BLOCK_INDEX 0x92FD
#define GL_ARRAY_STRIDE 0x92FE
#define GL_MATRIX_STRIDE 0x92FF
#define GL_IS_ROW_MAJOR 0x9300
#define GL_ATOMIC_COUNTER_BUFFER_INDEX 0x9301
#define GL_BUFFER_BINDING 0x9302
#define GL_BUFFER_DATA_SIZE 0x9303
#define GL_NUM_ACTIVE_VARIABLES 0x9304
#define GL_ACTIVE_VARIABLES 0x9305
#define GL_REFERENCED_BY_VERTEX_SHADER 0x9306
#define GL_REFERENCED_BY_TESS_CONTROL_SHADER 0x9307
#define GL_REFERENCED_BY_TESS_CONTROL_SHADER_EXT 0x9307
#define GL_REFERENCED_BY_TESS_CONTROL_SHADER_OES 0x9307
#define GL_REFERENCED_BY_TESS_EVALUATION_SHADER 0x9308
#define GL_REFERENCED_BY_TESS_EVALUATION_SHADER_EXT 0x9308
#define GL_REFERENCED_BY_TESS_EVALUATION_SHADER_OES 0x9308
#define GL_REFERENCED_BY_GEOMETRY_SHADER 0x9309
#define GL_REFERENCED_BY_GEOMETRY_SHADER_EXT 0x9309
#define GL_REFERENCED_BY_GEOMETRY_SHADER_OES 0x9309
#define GL_REFERENCED_BY_FRAGMENT_SHADER 0x930A
#define GL_REFERENCED_BY_COMPUTE_SHADER 0x930B
#define GL_TOP_LEVEL_ARRAY_SIZE 0x930C
#define GL_TOP_LEVEL_ARRAY_STRIDE 0x930D
#define GL_LOCATION 0x930E
#define GL_LOCATION_INDEX 0x930F
#define GL_LOCATION_INDEX_EXT 0x930F
#define GL_FRAMEBUFFER_DEFAULT_WIDTH 0x9310
#define GL_FRAMEBUFFER_DEFAULT_HEIGHT 0x9311
#define GL_FRAMEBUFFER_DEFAULT_LAYERS 0x9312
#define GL_FRAMEBUFFER_DEFAULT_LAYERS_EXT 0x9312
#define GL_FRAMEBUFFER_DEFAULT_LAYERS_OES 0x9312
#define GL_FRAMEBUFFER_DEFAULT_SAMPLES 0x9313
#define GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS 0x9314
#define GL_MAX_FRAMEBUFFER_WIDTH 0x9315
#define GL_MAX_FRAMEBUFFER_HEIGHT 0x9316
#define GL_MAX_FRAMEBUFFER_LAYERS 0x9317
#define GL_MAX_FRAMEBUFFER_LAYERS_EXT 0x9317
#define GL_MAX_FRAMEBUFFER_LAYERS_OES 0x9317
#define GL_MAX_FRAMEBUFFER_SAMPLES 0x9318
#define GL_RASTER_MULTISAMPLE_EXT 0x9327
#define GL_RASTER_SAMPLES_EXT 0x9328
#define GL_MAX_RASTER_SAMPLES_EXT 0x9329
#define GL_RASTER_FIXED_SAMPLE_LOCATIONS_EXT 0x932A
#define GL_MULTISAMPLE_RASTERIZATION_ALLOWED_EXT 0x932B
#define GL_EFFECTIVE_RASTER_SAMPLES_EXT 0x932C
#define GL_DEPTH_SAMPLES_NV 0x932D
#define GL_STENCIL_SAMPLES_NV 0x932E
#define GL_MIXED_DEPTH_SAMPLES_SUPPORTED_NV 0x932F
#define GL_MIXED_STENCIL_SAMPLES_SUPPORTED_NV 0x9330
#define GL_COVERAGE_MODULATION_TABLE_NV 0x9331
#define GL_COVERAGE_MODULATION_NV 0x9332
#define GL_COVERAGE_MODULATION_TABLE_SIZE_NV 0x9333
#define GL_WARP_SIZE_NV 0x9339
#define GL_WARPS_PER_SM_NV 0x933A
#define GL_SM_COUNT_NV 0x933B
#define GL_FILL_RECTANGLE_NV 0x933C
#define GL_SAMPLE_LOCATION_SUBPIXEL_BITS_ARB 0x933D
#define GL_SAMPLE_LOCATION_SUBPIXEL_BITS_NV 0x933D
#define GL_SAMPLE_LOCATION_PIXEL_GRID_WIDTH_ARB 0x933E
#define GL_SAMPLE_LOCATION_PIXEL_GRID_WIDTH_NV 0x933E
#define GL_SAMPLE_LOCATION_PIXEL_GRID_HEIGHT_ARB 0x933F
#define GL_SAMPLE_LOCATION_PIXEL_GRID_HEIGHT_NV 0x933F
#define GL_PROGRAMMABLE_SAMPLE_LOCATION_TABLE_SIZE_ARB 0x9340
#define GL_PROGRAMMABLE_SAMPLE_LOCATION_TABLE_SIZE_NV 0x9340
#define GL_PROGRAMMABLE_SAMPLE_LOCATION_ARB 0x9341
#define GL_PROGRAMMABLE_SAMPLE_LOCATION_NV 0x9341
#define GL_FRAMEBUFFER_PROGRAMMABLE_SAMPLE_LOCATIONS_ARB 0x9342
#define GL_FRAMEBUFFER_PROGRAMMABLE_SAMPLE_LOCATIONS_NV 0x9342
#define GL_FRAMEBUFFER_SAMPLE_LOCATION_PIXEL_GRID_ARB 0x9343
#define GL_FRAMEBUFFER_SAMPLE_LOCATION_PIXEL_GRID_NV 0x9343
#define GL_MAX_COMPUTE_VARIABLE_GROUP_INVOCATIONS_ARB 0x9344
#define GL_MAX_COMPUTE_VARIABLE_GROUP_SIZE_ARB 0x9345
#define GL_CONSERVATIVE_RASTERIZATION_NV 0x9346
#define GL_SUBPIXEL_PRECISION_BIAS_X_BITS_NV 0x9347
#define GL_SUBPIXEL_PRECISION_BIAS_Y_BITS_NV 0x9348
#define GL_MAX_SUBPIXEL_PRECISION_BIAS_BITS_NV 0x9349
#define GL_LOCATION_COMPONENT 0x934A
#define GL_TRANSFORM_FEEDBACK_BUFFER_INDEX 0x934B
#define GL_TRANSFORM_FEEDBACK_BUFFER_STRIDE 0x934C
#define GL_ALPHA_TO_COVERAGE_DITHER_DEFAULT_NV 0x934D
#define GL_ALPHA_TO_COVERAGE_DITHER_ENABLE_NV 0x934E
#define GL_ALPHA_TO_COVERAGE_DITHER_DISABLE_NV 0x934F
#define GL_VIEWPORT_SWIZZLE_POSITIVE_X_NV 0x9350
#define GL_VIEWPORT_SWIZZLE_NEGATIVE_X_NV 0x9351
#define GL_VIEWPORT_SWIZZLE_POSITIVE_Y_NV 0x9352
#define GL_VIEWPORT_SWIZZLE_NEGATIVE_Y_NV 0x9353
#define GL_VIEWPORT_SWIZZLE_POSITIVE_Z_NV 0x9354
#define GL_VIEWPORT_SWIZZLE_NEGATIVE_Z_NV 0x9355
#define GL_VIEWPORT_SWIZZLE_POSITIVE_W_NV 0x9356
#define GL_VIEWPORT_SWIZZLE_NEGATIVE_W_NV 0x9357
#define GL_VIEWPORT_SWIZZLE_X_NV 0x9358
#define GL_VIEWPORT_SWIZZLE_Y_NV 0x9359
#define GL_VIEWPORT_SWIZZLE_Z_NV 0x935A
#define GL_VIEWPORT_SWIZZLE_W_NV 0x935B
#define GL_CLIP_ORIGIN 0x935C
#define GL_CLIP_ORIGIN_EXT 0x935C
#define GL_CLIP_DEPTH_MODE 0x935D
#define GL_CLIP_DEPTH_MODE_EXT 0x935D
#define GL_NEGATIVE_ONE_TO_ONE 0x935E
#define GL_NEGATIVE_ONE_TO_ONE_EXT 0x935E
#define GL_ZERO_TO_ONE 0x935F
#define GL_ZERO_TO_ONE_EXT 0x935F
#define GL_CLEAR_TEXTURE 0x9365
#define GL_TEXTURE_REDUCTION_MODE_ARB 0x9366
#define GL_TEXTURE_REDUCTION_MODE_EXT 0x9366
#define GL_WEIGHTED_AVERAGE_ARB 0x9367
#define GL_WEIGHTED_AVERAGE_EXT 0x9367
#define GL_FONT_GLYPHS_AVAILABLE_NV 0x9368
#define GL_FONT_TARGET_UNAVAILABLE_NV 0x9369
#define GL_FONT_UNAVAILABLE_NV 0x936A
#define GL_FONT_UNINTELLIGIBLE_NV 0x936B
#define GL_STANDARD_FONT_FORMAT_NV 0x936C
#define GL_FRAGMENT_INPUT_NV 0x936D
#define GL_UNIFORM_BUFFER_UNIFIED_NV 0x936E
#define GL_UNIFORM_BUFFER_ADDRESS_NV 0x936F
#define GL_UNIFORM_BUFFER_LENGTH_NV 0x9370
#define GL_MULTISAMPLES_NV 0x9371
#define GL_SUPERSAMPLE_SCALE_X_NV 0x9372
#define GL_SUPERSAMPLE_SCALE_Y_NV 0x9373
#define GL_CONFORMANT_NV 0x9374
#define GL_CONSERVATIVE_RASTER_DILATE_NV 0x9379
#define GL_CONSERVATIVE_RASTER_DILATE_RANGE_NV 0x937A
#define GL_CONSERVATIVE_RASTER_DILATE_GRANULARITY_NV 0x937B
#define GL_VIEWPORT_POSITION_W_SCALE_NV 0x937C
#define GL_VIEWPORT_POSITION_W_SCALE_X_COEFF_NV 0x937D
#define GL_VIEWPORT_POSITION_W_SCALE_Y_COEFF_NV 0x937E
#define GL_NUM_SAMPLE_COUNTS 0x9380
#define GL_MULTISAMPLE_LINE_WIDTH_RANGE 0x9381
#define GL_MULTISAMPLE_LINE_WIDTH_RANGE_ARB 0x9381
#define GL_MULTISAMPLE_LINE_WIDTH_GRANULARITY 0x9382
#define GL_MULTISAMPLE_LINE_WIDTH_GRANULARITY_ARB 0x9382
#define GL_TRANSLATED_SHADER_SOURCE_LENGTH_ANGLE 0x93A0
#define GL_BGRA8_EXT 0x93A1
#define GL_TEXTURE_USAGE_ANGLE 0x93A2
#define GL_FRAMEBUFFER_ATTACHMENT_ANGLE 0x93A3
#define GL_PACK_REVERSE_ROW_ORDER_ANGLE 0x93A4
#define GL_PROGRAM_BINARY_ANGLE 0x93A6
#define GL_COMPRESSED_RGBA_ASTC_4x4 0x93B0
#define GL_COMPRESSED_RGBA_ASTC_4x4_KHR 0x93B0
#define GL_COMPRESSED_RGBA_ASTC_5x4 0x93B1
#define GL_COMPRESSED_RGBA_ASTC_5x4_KHR 0x93B1
#define GL_COMPRESSED_RGBA_ASTC_5x5 0x93B2
#define GL_COMPRESSED_RGBA_ASTC_5x5_KHR 0x93B2
#define GL_COMPRESSED_RGBA_ASTC_6x5 0x93B3
#define GL_COMPRESSED_RGBA_ASTC_6x5_KHR 0x93B3
#define GL_COMPRESSED_RGBA_ASTC_6x6 0x93B4
#define GL_COMPRESSED_RGBA_ASTC_6x6_KHR 0x93B4
#define GL_COMPRESSED_RGBA_ASTC_8x5 0x93B5
#define GL_COMPRESSED_RGBA_ASTC_8x5_KHR 0x93B5
#define GL_COMPRESSED_RGBA_ASTC_8x6 0x93B6
#define GL_COMPRESSED_RGBA_ASTC_8x6_KHR 0x93B6
#define GL_COMPRESSED_RGBA_ASTC_8x8 0x93B7
#define GL_COMPRESSED_RGBA_ASTC_8x8_KHR 0x93B7
#define GL_COMPRESSED_RGBA_ASTC_10x5 0x93B8
#define GL_COMPRESSED_RGBA_ASTC_10x5_KHR 0x93B8
#define GL_COMPRESSED_RGBA_ASTC_10x6 0x93B9
#define GL_COMPRESSED_RGBA_ASTC_10x6_KHR 0x93B9
#define GL_COMPRESSED_RGBA_ASTC_10x8 0x93BA
#define GL_COMPRESSED_RGBA_ASTC_10x8_KHR 0x93BA
#define GL_COMPRESSED_RGBA_ASTC_10x10 0x93BB
#define GL_COMPRESSED_RGBA_ASTC_10x10_KHR 0x93BB
#define GL_COMPRESSED_RGBA_ASTC_12x10 0x93BC
#define GL_COMPRESSED_RGBA_ASTC_12x10_KHR 0x93BC
#define GL_COMPRESSED_RGBA_ASTC_12x12 0x93BD
#define GL_COMPRESSED_RGBA_ASTC_12x12_KHR 0x93BD
#define GL_COMPRESSED_RGBA_ASTC_3x3x3_OES 0x93C0
#define GL_COMPRESSED_RGBA_ASTC_4x3x3_OES 0x93C1
#define GL_COMPRESSED_RGBA_ASTC_4x4x3_OES 0x93C2
#define GL_COMPRESSED_RGBA_ASTC_4x4x4_OES 0x93C3
#define GL_COMPRESSED_RGBA_ASTC_5x4x4_OES 0x93C4
#define GL_COMPRESSED_RGBA_ASTC_5x5x4_OES 0x93C5
#define GL_COMPRESSED_RGBA_ASTC_5x5x5_OES 0x93C6
#define GL_COMPRESSED_RGBA_ASTC_6x5x5_OES 0x93C7
#define GL_COMPRESSED_RGBA_ASTC_6x6x5_OES 0x93C8
#define GL_COMPRESSED_RGBA_ASTC_6x6x6_OES 0x93C9
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4 0x93D0
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR 0x93D0
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4 0x93D1
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR 0x93D1
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5 0x93D2
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR 0x93D2
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5 0x93D3
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR 0x93D3
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6 0x93D4
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR 0x93D4
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5 0x93D5
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR 0x93D5
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6 0x93D6
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR 0x93D6
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8 0x93D7
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR 0x93D7
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5 0x93D8
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR 0x93D8
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6 0x93D9
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR 0x93D9
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8 0x93DA
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR 0x93DA
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10 0x93DB
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR 0x93DB
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10 0x93DC
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR 0x93DC
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12 0x93DD
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR 0x93DD
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_3x3x3_OES 0x93E0
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x3x3_OES 0x93E1
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4x3_OES 0x93E2
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4x4_OES 0x93E3
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4x4_OES 0x93E4
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5x4_OES 0x93E5
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5x5_OES 0x93E6
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5x5_OES 0x93E7
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6x5_OES 0x93E8
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6x6_OES 0x93E9
#define GL_COMPRESSED_SRGB_ALPHA_PVRTC_2BPPV2_IMG 0x93F0
#define GL_COMPRESSED_SRGB_ALPHA_PVRTC_4BPPV2_IMG 0x93F1
#define GL_PERFQUERY_COUNTER_EVENT_INTEL 0x94F0
#define GL_PERFQUERY_COUNTER_DURATION_NORM_INTEL 0x94F1
#define GL_PERFQUERY_COUNTER_DURATION_RAW_INTEL 0x94F2
#define GL_PERFQUERY_COUNTER_THROUGHPUT_INTEL 0x94F3
#define GL_PERFQUERY_COUNTER_RAW_INTEL 0x94F4
#define GL_PERFQUERY_COUNTER_TIMESTAMP_INTEL 0x94F5
#define GL_PERFQUERY_COUNTER_DATA_UINT32_INTEL 0x94F8
#define GL_PERFQUERY_COUNTER_DATA_UINT64_INTEL 0x94F9
#define GL_PERFQUERY_COUNTER_DATA_FLOAT_INTEL 0x94FA
#define GL_PERFQUERY_COUNTER_DATA_DOUBLE_INTEL 0x94FB
#define GL_PERFQUERY_COUNTER_DATA_BOOL32_INTEL 0x94FC
#define GL_PERFQUERY_QUERY_NAME_LENGTH_MAX_INTEL 0x94FD
#define GL_PERFQUERY_COUNTER_NAME_LENGTH_MAX_INTEL 0x94FE
#define GL_PERFQUERY_COUNTER_DESC_LENGTH_MAX_INTEL 0x94FF
#define GL_PERFQUERY_GPA_EXTENDED_COUNTERS_INTEL 0x9500
#define GL_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_EXT 0x9530
#define GL_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_EXT 0x9531
#define GL_QUERY_RESOURCE_TYPE_VIDMEM_ALLOC_NV 0x9540
#define GL_QUERY_RESOURCE_MEMTYPE_VIDMEM_NV 0x9542
#define GL_QUERY_RESOURCE_SYS_RESERVED_NV 0x9544
#define GL_QUERY_RESOURCE_TEXTURE_NV 0x9545
#define GL_QUERY_RESOURCE_RENDERBUFFER_NV 0x9546
#define GL_QUERY_RESOURCE_BUFFEROBJECT_NV 0x9547
#define GL_PER_GPU_STORAGE_NV 0x9548
#define GL_MULTICAST_PROGRAMMABLE_SAMPLE_LOCATION_NV 0x9549
#define GL_CONSERVATIVE_RASTER_MODE_NV 0x954D
#define GL_CONSERVATIVE_RASTER_MODE_POST_SNAP_NV 0x954E
#define GL_CONSERVATIVE_RASTER_MODE_PRE_SNAP_TRIANGLES_NV 0x954F
#define GL_CONSERVATIVE_RASTER_MODE_PRE_SNAP_NV 0x9550
#define GL_SHADER_BINARY_FORMAT_SPIR_V 0x9551
#define GL_SHADER_BINARY_FORMAT_SPIR_V_ARB 0x9551
#define GL_SPIR_V_BINARY 0x9552
#define GL_SPIR_V_BINARY_ARB 0x9552
#define GL_SPIR_V_EXTENSIONS 0x9553
#define GL_NUM_SPIR_V_EXTENSIONS 0x9554
#define GL_RENDER_GPU_MASK_NV 0x9558
#define GL_TEXTURE_TILING_EXT 0x9580
#define GL_DEDICATED_MEMORY_OBJECT_EXT 0x9581
#define GL_NUM_TILING_TYPES_EXT 0x9582
#define GL_TILING_TYPES_EXT 0x9583
#define GL_OPTIMAL_TILING_EXT 0x9584
#define GL_LINEAR_TILING_EXT 0x9585
#define GL_HANDLE_TYPE_OPAQUE_FD_EXT 0x9586
#define GL_HANDLE_TYPE_OPAQUE_WIN32_EXT 0x9587
#define GL_HANDLE_TYPE_OPAQUE_WIN32_KMT_EXT 0x9588
#define GL_HANDLE_TYPE_D3D12_TILEPOOL_EXT 0x9589
#define GL_HANDLE_TYPE_D3D12_RESOURCE_EXT 0x958A
#define GL_HANDLE_TYPE_D3D11_IMAGE_EXT 0x958B
#define GL_HANDLE_TYPE_D3D11_IMAGE_KMT_EXT 0x958C
#define GL_LAYOUT_GENERAL_EXT 0x958D
#define GL_LAYOUT_COLOR_ATTACHMENT_EXT 0x958E
#define GL_LAYOUT_DEPTH_STENCIL_ATTACHMENT_EXT 0x958F
#define GL_LAYOUT_DEPTH_STENCIL_READ_ONLY_EXT 0x9590
#define GL_LAYOUT_SHADER_READ_ONLY_EXT 0x9591
#define GL_LAYOUT_TRANSFER_SRC_EXT 0x9592
#define GL_LAYOUT_TRANSFER_DST_EXT 0x9593
#define GL_HANDLE_TYPE_D3D12_FENCE_EXT 0x9594
#define GL_D3D12_FENCE_VALUE_EXT 0x9595
#define GL_NUM_DEVICE_UUIDS_EXT 0x9596
#define GL_DEVICE_UUID_EXT 0x9597
#define GL_DRIVER_UUID_EXT 0x9598
#define GL_DEVICE_LUID_EXT 0x9599
#define GL_DEVICE_NODE_MASK_EXT 0x959A
#define GL_PROTECTED_MEMORY_OBJECT_EXT 0x959B
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_NUM_VIEWS_OVR 0x9630
#define GL_MAX_VIEWS_OVR 0x9631
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_BASE_VIEW_INDEX_OVR 0x9632
#define GL_FRAMEBUFFER_INCOMPLETE_VIEW_TARGETS_OVR 0x9633
#define GL_GS_SHADER_BINARY_MTK 0x9640
#define GL_GS_PROGRAM_BINARY_MTK 0x9641
#define GL_MAX_SHADER_COMBINED_LOCAL_STORAGE_FAST_SIZE_EXT 0x9650
#define GL_MAX_SHADER_COMBINED_LOCAL_STORAGE_SIZE_EXT 0x9651
#define GL_FRAMEBUFFER_INCOMPLETE_INSUFFICIENT_SHADER_COMBINED_LOCAL_STORAGE_EXT 0x9652
#define GL_FRAMEBUFFER_FETCH_NONCOHERENT_QCOM 0x96A2
#define GL_SHARED_EDGE_NV 0xC0
#define GL_ROUNDED_RECT_NV 0xE8
#define GL_RELATIVE_ROUNDED_RECT_NV 0xE9
#define GL_ROUNDED_RECT2_NV 0xEA
#define GL_RELATIVE_ROUNDED_RECT2_NV 0xEB
#define GL_ROUNDED_RECT4_NV 0xEC
#define GL_RELATIVE_ROUNDED_RECT4_NV 0xED
#define GL_ROUNDED_RECT8_NV 0xEE
#define GL_RELATIVE_ROUNDED_RECT8_NV 0xEF
#define GL_RESTART_PATH_NV 0xF0
#define GL_DUP_FIRST_CUBIC_CURVE_TO_NV 0xF2
#define GL_DUP_LAST_CUBIC_CURVE_TO_NV 0xF4
#define GL_RECT_NV 0xF6
#define GL_RELATIVE_RECT_NV 0xF7
#define GL_CIRCULAR_CCW_ARC_TO_NV 0xF8
#define GL_CIRCULAR_CW_ARC_TO_NV 0xFA
#define GL_CIRCULAR_TANGENT_ARC_TO_NV 0xFC
#define GL_ARC_TO_NV 0xFE
#define GL_RELATIVE_ARC_TO_NV 0xFF
#define GL_TRACE_ALL_BITS_MESA 0xFFFF
#define GL_ALL_ATTRIB_BITS 0xFFFFFFFF
#define GL_ALL_BARRIER_BITS 0xFFFFFFFF
#define GL_ALL_BARRIER_BITS_EXT 0xFFFFFFFF
#define GL_ALL_PIXELS_AMD 0xFFFFFFFF
#define GL_ALL_SHADER_BITS 0xFFFFFFFF
#define GL_ALL_SHADER_BITS_EXT 0xFFFFFFFF
#define GL_CLIENT_ALL_ATTRIB_BITS 0xFFFFFFFF
#define GL_QUERY_ALL_EVENT_BITS_AMD 0xFFFFFFFF
#define GL_TIMEOUT_IGNORED 0xFFFFFFFFFFFFFFFFull
#define GL_TIMEOUT_IGNORED_APPLE 0xFFFFFFFFFFFFFFFFull
#define GL_INVALID_INDEX 0xFFFFFFFFu
#define GL_LAYOUT_LINEAR_INTEL 1
#define GL_ONE 1
#define GL_TRUE 1
#define GL_VERSION_ES_CL_1_0 1
#define GL_VERSION_ES_CL_1_1 1
#define GL_VERSION_ES_CM_1_1 1
#define GL_CULL_VERTEX_IBM 103050
#define GL_ALL_STATIC_DATA_IBM 103060
#define GL_STATIC_VERTEX_ARRAY_IBM 103061
#define GL_VERTEX_ARRAY_LIST_IBM 103070
#define GL_NORMAL_ARRAY_LIST_IBM 103071
#define GL_COLOR_ARRAY_LIST_IBM 103072
#define GL_INDEX_ARRAY_LIST_IBM 103073
#define GL_TEXTURE_COORD_ARRAY_LIST_IBM 103074
#define GL_EDGE_FLAG_ARRAY_LIST_IBM 103075
#define GL_FOG_COORDINATE_ARRAY_LIST_IBM 103076
#define GL_SECONDARY_COLOR_ARRAY_LIST_IBM 103077
#define GL_VERTEX_ARRAY_LIST_STRIDE_IBM 103080
#define GL_NORMAL_ARRAY_LIST_STRIDE_IBM 103081
#define GL_COLOR_ARRAY_LIST_STRIDE_IBM 103082
#define GL_INDEX_ARRAY_LIST_STRIDE_IBM 103083
#define GL_TEXTURE_COORD_ARRAY_LIST_STRIDE_IBM 103084
#define GL_EDGE_FLAG_ARRAY_LIST_STRIDE_IBM 103085
#define GL_FOG_COORDINATE_ARRAY_LIST_STRIDE_IBM 103086
#define GL_SECONDARY_COLOR_ARRAY_LIST_STRIDE_IBM 103087
#define GL_UUID_SIZE_EXT 16
#define GL_LAYOUT_LINEAR_CPU_CACHED_INTEL 2
#define GL_LUID_SIZE_EXT 8

/* Version IDs */
#undef GL_VERSION_1_0
#define GL_VERSION_1_0 1
#undef GL_VERSION_1_1
#define GL_VERSION_1_1 2
#undef GL_VERSION_1_2
#define GL_VERSION_1_2 3
#undef GL_VERSION_1_3
#define GL_VERSION_1_3 4
#undef GL_VERSION_1_4
#define GL_VERSION_1_4 5
#undef GL_VERSION_1_5
#define GL_VERSION_1_5 6
#undef GL_VERSION_2_0
#define GL_VERSION_2_0 7
#undef GL_VERSION_2_1
#define GL_VERSION_2_1 8
#undef GL_VERSION_3_0
#define GL_VERSION_3_0 9
#undef GL_VERSION_3_1
#define GL_VERSION_3_1 10
#undef GL_VERSION_3_2
#define GL_VERSION_3_2 11
#undef GL_VERSION_3_3
#define GL_VERSION_3_3 12
#undef GL_VERSION_4_0
#define GL_VERSION_4_0 13
#undef GL_VERSION_4_1
#define GL_VERSION_4_1 14
#undef GL_VERSION_4_2
#define GL_VERSION_4_2 15
#undef GL_VERSION_4_3
#define GL_VERSION_4_3 16
#undef GL_VERSION_4_4
#define GL_VERSION_4_4 17
#undef GL_VERSION_4_5
#define GL_VERSION_4_5 18
#undef GL_VERSION_4_6
#define GL_VERSION_4_6 19
#undef GL_VERSION_ES_CM_1_0
#define GL_VERSION_ES_CM_1_0 20
#undef GL_ES_VERSION_2_0
#define GL_ES_VERSION_2_0 21
#undef GL_ES_VERSION_3_0
#define GL_ES_VERSION_3_0 22
#undef GL_ES_VERSION_3_1
#define GL_ES_VERSION_3_1 23
#undef GL_ES_VERSION_3_2
#define GL_ES_VERSION_3_2 24
#undef GL_SC_VERSION_2_0
#define GL_SC_VERSION_2_0 25

/* Extension IDs */
#undef GL_3DFX_multisample
#define GL_3DFX_multisample 26
#undef GL_3DFX_tbuffer
#define GL_3DFX_tbuffer 27
#undef GL_3DFX_texture_compression_FXT1
#define GL_3DFX_texture_compression_FXT1 28
#undef GL_AMD_blend_minmax_factor
#define GL_AMD_blend_minmax_factor 29
#undef GL_AMD_compressed_3DC_texture
#define GL_AMD_compressed_3DC_texture 30
#undef GL_AMD_compressed_ATC_texture
#define GL_AMD_compressed_ATC_texture 31
#undef GL_AMD_conservative_depth
#define GL_AMD_conservative_depth 32
#undef GL_AMD_debug_output
#define GL_AMD_debug_output 33
#undef GL_AMD_depth_clamp_separate
#define GL_AMD_depth_clamp_separate 34
#undef GL_AMD_draw_buffers_blend
#define GL_AMD_draw_buffers_blend 35
#undef GL_AMD_framebuffer_multisample_advanced
#define GL_AMD_framebuffer_multisample_advanced 36
#undef GL_AMD_framebuffer_sample_positions
#define GL_AMD_framebuffer_sample_positions 37
#undef GL_AMD_gcn_shader
#define GL_AMD_gcn_shader 38
#undef GL_AMD_gpu_shader_half_float
#define GL_AMD_gpu_shader_half_float 39
#undef GL_AMD_gpu_shader_int16
#define GL_AMD_gpu_shader_int16 40
#undef GL_AMD_gpu_shader_int64
#define GL_AMD_gpu_shader_int64 41
#undef GL_AMD_interleaved_elements
#define GL_AMD_interleaved_elements 42
#undef GL_AMD_multi_draw_indirect
#define GL_AMD_multi_draw_indirect 43
#undef GL_AMD_name_gen_delete
#define GL_AMD_name_gen_delete 44
#undef GL_AMD_occlusion_query_event
#define GL_AMD_occlusion_query_event 45
#undef GL_AMD_performance_monitor
#define GL_AMD_performance_monitor 46
#undef GL_AMD_pinned_memory
#define GL_AMD_pinned_memory 47
#undef GL_AMD_program_binary_Z400
#define GL_AMD_program_binary_Z400 48
#undef GL_AMD_query_buffer_object
#define GL_AMD_query_buffer_object 49
#undef GL_AMD_sample_positions
#define GL_AMD_sample_positions 50
#undef GL_AMD_seamless_cubemap_per_texture
#define GL_AMD_seamless_cubemap_per_texture 51
#undef GL_AMD_shader_atomic_counter_ops
#define GL_AMD_shader_atomic_counter_ops 52
#undef GL_AMD_shader_ballot
#define GL_AMD_shader_ballot 53
#undef GL_AMD_shader_gpu_shader_half_float_fetch
#define GL_AMD_shader_gpu_shader_half_float_fetch 54
#undef GL_AMD_shader_image_load_store_lod
#define GL_AMD_shader_image_load_store_lod 55
#undef GL_AMD_shader_stencil_export
#define GL_AMD_shader_stencil_export 56
#undef GL_AMD_shader_trinary_minmax
#define GL_AMD_shader_trinary_minmax 57
#undef GL_AMD_shader_explicit_vertex_parameter
#define GL_AMD_shader_explicit_vertex_parameter 58
#undef GL_AMD_sparse_texture
#define GL_AMD_sparse_texture 59
#undef GL_AMD_stencil_operation_extended
#define GL_AMD_stencil_operation_extended 60
#undef GL_AMD_texture_gather_bias_lod
#define GL_AMD_texture_gather_bias_lod 61
#undef GL_AMD_texture_texture4
#define GL_AMD_texture_texture4 62
#undef GL_AMD_transform_feedback3_lines_triangles
#define GL_AMD_transform_feedback3_lines_triangles 63
#undef GL_AMD_transform_feedback4
#define GL_AMD_transform_feedback4 64
#undef GL_AMD_vertex_shader_layer
#define GL_AMD_vertex_shader_layer 65
#undef GL_AMD_vertex_shader_tessellator
#define GL_AMD_vertex_shader_tessellator 66
#undef GL_AMD_vertex_shader_viewport_index
#define GL_AMD_vertex_shader_viewport_index 67
#undef GL_ANDROID_extension_pack_es31a
#define GL_ANDROID_extension_pack_es31a 68
#undef GL_ANGLE_depth_texture
#define GL_ANGLE_depth_texture 69
#undef GL_ANGLE_framebuffer_blit
#define GL_ANGLE_framebuffer_blit 70
#undef GL_ANGLE_framebuffer_multisample
#define GL_ANGLE_framebuffer_multisample 71
#undef GL_ANGLE_instanced_arrays
#define GL_ANGLE_instanced_arrays 72
#undef GL_ANGLE_pack_reverse_row_order
#define GL_ANGLE_pack_reverse_row_order 73
#undef GL_ANGLE_program_binary
#define GL_ANGLE_program_binary 74
#undef GL_ANGLE_texture_compression_dxt3
#define GL_ANGLE_texture_compression_dxt3 75
#undef GL_ANGLE_texture_compression_dxt5
#define GL_ANGLE_texture_compression_dxt5 76
#undef GL_ANGLE_texture_usage
#define GL_ANGLE_texture_usage 77
#undef GL_ANGLE_translated_shader_source
#define GL_ANGLE_translated_shader_source 78
#undef GL_APPLE_aux_depth_stencil
#define GL_APPLE_aux_depth_stencil 79
#undef GL_APPLE_client_storage
#define GL_APPLE_client_storage 80
#undef GL_APPLE_clip_distance
#define GL_APPLE_clip_distance 81
#undef GL_APPLE_color_buffer_packed_float
#define GL_APPLE_color_buffer_packed_float 82
#undef GL_APPLE_copy_texture_levels
#define GL_APPLE_copy_texture_levels 83
#undef GL_APPLE_element_array
#define GL_APPLE_element_array 84
#undef GL_APPLE_fence
#define GL_APPLE_fence 85
#undef GL_APPLE_float_pixels
#define GL_APPLE_float_pixels 86
#undef GL_APPLE_flush_buffer_range
#define GL_APPLE_flush_buffer_range 87
#undef GL_APPLE_framebuffer_multisample
#define GL_APPLE_framebuffer_multisample 88
#undef GL_APPLE_object_purgeable
#define GL_APPLE_object_purgeable 89
#undef GL_APPLE_rgb_422
#define GL_APPLE_rgb_422 90
#undef GL_APPLE_row_bytes
#define GL_APPLE_row_bytes 91
#undef GL_APPLE_specular_vector
#define GL_APPLE_specular_vector 92
#undef GL_APPLE_sync
#define GL_APPLE_sync 93
#undef GL_APPLE_texture_2D_limited_npot
#define GL_APPLE_texture_2D_limited_npot 94
#undef GL_APPLE_texture_format_BGRA8888
#define GL_APPLE_texture_format_BGRA8888 95
#undef GL_APPLE_texture_max_level
#define GL_APPLE_texture_max_level 96
#undef GL_APPLE_texture_packed_float
#define GL_APPLE_texture_packed_float 97
#undef GL_APPLE_texture_range
#define GL_APPLE_texture_range 98
#undef GL_APPLE_transform_hint
#define GL_APPLE_transform_hint 99
#undef GL_APPLE_vertex_array_object
#define GL_APPLE_vertex_array_object 100
#undef GL_APPLE_vertex_array_range
#define GL_APPLE_vertex_array_range 101
#undef GL_APPLE_vertex_program_evaluators
#define GL_APPLE_vertex_program_evaluators 102
#undef GL_APPLE_ycbcr_422
#define GL_APPLE_ycbcr_422 103
#undef GL_ARB_ES2_compatibility
#define GL_ARB_ES2_compatibility 104
#undef GL_ARB_ES3_1_compatibility
#define GL_ARB_ES3_1_compatibility 105
#undef GL_ARB_ES3_2_compatibility
#define GL_ARB_ES3_2_compatibility 106
#undef GL_ARB_ES3_compatibility
#define GL_ARB_ES3_compatibility 107
#undef GL_ARB_arrays_of_arrays
#define GL_ARB_arrays_of_arrays 108
#undef GL_ARB_base_instance
#define GL_ARB_base_instance 109
#undef GL_ARB_bindless_texture
#define GL_ARB_bindless_texture 110
#undef GL_ARB_blend_func_extended
#define GL_ARB_blend_func_extended 111
#undef GL_ARB_buffer_storage
#define GL_ARB_buffer_storage 112
#undef GL_ARB_cl_event
#define GL_ARB_cl_event 113
#undef GL_ARB_clear_buffer_object
#define GL_ARB_clear_buffer_object 114
#undef GL_ARB_clear_texture
#define GL_ARB_clear_texture 115
#undef GL_ARB_clip_control
#define GL_ARB_clip_control 116
#undef GL_ARB_color_buffer_float
#define GL_ARB_color_buffer_float 117
#undef GL_ARB_compatibility
#define GL_ARB_compatibility 118
#undef GL_ARB_compressed_texture_pixel_storage
#define GL_ARB_compressed_texture_pixel_storage 119
#undef GL_ARB_compute_shader
#define GL_ARB_compute_shader 120
#undef GL_ARB_compute_variable_group_size
#define GL_ARB_compute_variable_group_size 121
#undef GL_ARB_conditional_render_inverted
#define GL_ARB_conditional_render_inverted 122
#undef GL_ARB_conservative_depth
#define GL_ARB_conservative_depth 123
#undef GL_ARB_copy_buffer
#define GL_ARB_copy_buffer 124
#undef GL_ARB_copy_image
#define GL_ARB_copy_image 125
#undef GL_ARB_cull_distance
#define GL_ARB_cull_distance 126
#undef GL_ARB_debug_output
#define GL_ARB_debug_output 127
#undef GL_ARB_depth_buffer_float
#define GL_ARB_depth_buffer_float 128
#undef GL_ARB_depth_clamp
#define GL_ARB_depth_clamp 129
#undef GL_ARB_depth_texture
#define GL_ARB_depth_texture 130
#undef GL_ARB_derivative_control
#define GL_ARB_derivative_control 131
#undef GL_ARB_direct_state_access
#define GL_ARB_direct_state_access 132
#undef GL_ARB_draw_buffers
#define GL_ARB_draw_buffers 133
#undef GL_ARB_draw_buffers_blend
#define GL_ARB_draw_buffers_blend 134
#undef GL_ARB_draw_elements_base_vertex
#define GL_ARB_draw_elements_base_vertex 135
#undef GL_ARB_draw_indirect
#define GL_ARB_draw_indirect 136
#undef GL_ARB_draw_instanced
#define GL_ARB_draw_instanced 137
#undef GL_ARB_enhanced_layouts
#define GL_ARB_enhanced_layouts 138
#undef GL_ARB_explicit_attrib_location
#define GL_ARB_explicit_attrib_location 139
#undef GL_ARB_explicit_uniform_location
#define GL_ARB_explicit_uniform_location 140
#undef GL_ARB_fragment_coord_conventions
#define GL_ARB_fragment_coord_conventions 141
#undef GL_ARB_fragment_layer_viewport
#define GL_ARB_fragment_layer_viewport 142
#undef GL_ARB_fragment_program
#define GL_ARB_fragment_program 143
#undef GL_ARB_fragment_program_shadow
#define GL_ARB_fragment_program_shadow 144
#undef GL_ARB_fragment_shader
#define GL_ARB_fragment_shader 145
#undef GL_ARB_fragment_shader_interlock
#define GL_ARB_fragment_shader_interlock 146
#undef GL_ARB_framebuffer_no_attachments
#define GL_ARB_framebuffer_no_attachments 147
#undef GL_ARB_framebuffer_object
#define GL_ARB_framebuffer_object 148
#undef GL_ARB_framebuffer_sRGB
#define GL_ARB_framebuffer_sRGB 149
#undef GL_ARB_geometry_shader4
#define GL_ARB_geometry_shader4 150
#undef GL_ARB_get_program_binary
#define GL_ARB_get_program_binary 151
#undef GL_ARB_get_texture_sub_image
#define GL_ARB_get_texture_sub_image 152
#undef GL_ARB_gl_spirv
#define GL_ARB_gl_spirv 153
#undef GL_ARB_gpu_shader5
#define GL_ARB_gpu_shader5 154
#undef GL_ARB_gpu_shader_fp64
#define GL_ARB_gpu_shader_fp64 155
#undef GL_ARB_gpu_shader_int64
#define GL_ARB_gpu_shader_int64 156
#undef GL_ARB_half_float_pixel
#define GL_ARB_half_float_pixel 157
#undef GL_ARB_half_float_vertex
#define GL_ARB_half_float_vertex 158
#undef GL_ARB_imaging
#define GL_ARB_imaging 159
#undef GL_ARB_indirect_parameters
#define GL_ARB_indirect_parameters 160
#undef GL_ARB_instanced_arrays
#define GL_ARB_instanced_arrays 161
#undef GL_ARB_internalformat_query
#define GL_ARB_internalformat_query 162
#undef GL_ARB_internalformat_query2
#define GL_ARB_internalformat_query2 163
#undef GL_ARB_invalidate_subdata
#define GL_ARB_invalidate_subdata 164
#undef GL_ARB_map_buffer_alignment
#define GL_ARB_map_buffer_alignment 165
#undef GL_ARB_map_buffer_range
#define GL_ARB_map_buffer_range 166
#undef GL_ARB_matrix_palette
#define GL_ARB_matrix_palette 167
#undef GL_ARB_multi_bind
#define GL_ARB_multi_bind 168
#undef GL_ARB_multi_draw_indirect
#define GL_ARB_multi_draw_indirect 169
#undef GL_ARB_multisample
#define GL_ARB_multisample 170
#undef GL_ARB_multitexture
#define GL_ARB_multitexture 171
#undef GL_ARB_occlusion_query
#define GL_ARB_occlusion_query 172
#undef GL_ARB_occlusion_query2
#define GL_ARB_occlusion_query2 173
#undef GL_ARB_parallel_shader_compile
#define GL_ARB_parallel_shader_compile 174
#undef GL_ARB_pipeline_statistics_query
#define GL_ARB_pipeline_statistics_query 175
#undef GL_ARB_pixel_buffer_object
#define GL_ARB_pixel_buffer_object 176
#undef GL_ARB_point_parameters
#define GL_ARB_point_parameters 177
#undef GL_ARB_point_sprite
#define GL_ARB_point_sprite 178
#undef GL_ARB_polygon_offset_clamp
#define GL_ARB_polygon_offset_clamp 179
#undef GL_ARB_post_depth_coverage
#define GL_ARB_post_depth_coverage 180
#undef GL_ARB_program_interface_query
#define GL_ARB_program_interface_query 181
#undef GL_ARB_provoking_vertex
#define GL_ARB_provoking_vertex 182
#undef GL_ARB_query_buffer_object
#define GL_ARB_query_buffer_object 183
#undef GL_ARB_robust_buffer_access_behavior
#define GL_ARB_robust_buffer_access_behavior 184
#undef GL_ARB_robustness
#define GL_ARB_robustness 185
#undef GL_ARB_robustness_isolation
#define GL_ARB_robustness_isolation 186
#undef GL_ARB_sample_locations
#define GL_ARB_sample_locations 187
#undef GL_ARB_sample_shading
#define GL_ARB_sample_shading 188
#undef GL_ARB_sampler_objects
#define GL_ARB_sampler_objects 189
#undef GL_ARB_seamless_cube_map
#define GL_ARB_seamless_cube_map 190
#undef GL_ARB_seamless_cubemap_per_texture
#define GL_ARB_seamless_cubemap_per_texture 191
#undef GL_ARB_separate_shader_objects
#define GL_ARB_separate_shader_objects 192
#undef GL_ARB_shader_atomic_counter_ops
#define GL_ARB_shader_atomic_counter_ops 193
#undef GL_ARB_shader_atomic_counters
#define GL_ARB_shader_atomic_counters 194
#undef GL_ARB_shader_ballot
#define GL_ARB_shader_ballot 195
#undef GL_ARB_shader_bit_encoding
#define GL_ARB_shader_bit_encoding 196
#undef GL_ARB_shader_clock
#define GL_ARB_shader_clock 197
#undef GL_ARB_shader_draw_parameters
#define GL_ARB_shader_draw_parameters 198
#undef GL_ARB_shader_group_vote
#define GL_ARB_shader_group_vote 199
#undef GL_ARB_shader_image_load_store
#define GL_ARB_shader_image_load_store 200
#undef GL_ARB_shader_image_size
#define GL_ARB_shader_image_size 201
#undef GL_ARB_shader_objects
#define GL_ARB_shader_objects 202
#undef GL_ARB_shader_precision
#define GL_ARB_shader_precision 203
#undef GL_ARB_shader_stencil_export
#define GL_ARB_shader_stencil_export 204
#undef GL_ARB_shader_storage_buffer_object
#define GL_ARB_shader_storage_buffer_object 205
#undef GL_ARB_shader_subroutine
#define GL_ARB_shader_subroutine 206
#undef GL_ARB_shader_texture_image_samples
#define GL_ARB_shader_texture_image_samples 207
#undef GL_ARB_shader_texture_lod
#define GL_ARB_shader_texture_lod 208
#undef GL_ARB_shader_viewport_layer_array
#define GL_ARB_shader_viewport_layer_array 209
#undef GL_ARB_shading_language_100
#define GL_ARB_shading_language_100 210
#undef GL_ARB_shading_language_420pack
#define GL_ARB_shading_language_420pack 211
#undef GL_ARB_shading_language_include
#define GL_ARB_shading_language_include 212
#undef GL_ARB_shading_language_packing
#define GL_ARB_shading_language_packing 213
#undef GL_ARB_shadow
#define GL_ARB_shadow 214
#undef GL_ARB_shadow_ambient
#define GL_ARB_shadow_ambient 215
#undef GL_ARB_sparse_buffer
#define GL_ARB_sparse_buffer 216
#undef GL_ARB_sparse_texture
#define GL_ARB_sparse_texture 217
#undef GL_ARB_sparse_texture2
#define GL_ARB_sparse_texture2 218
#undef GL_ARB_sparse_texture_clamp
#define GL_ARB_sparse_texture_clamp 219
#undef GL_ARB_spirv_extensions
#define GL_ARB_spirv_extensions 220
#undef GL_ARB_stencil_texturing
#define GL_ARB_stencil_texturing 221
#undef GL_ARB_sync
#define GL_ARB_sync 222
#undef GL_ARB_tessellation_shader
#define GL_ARB_tessellation_shader 223
#undef GL_ARB_texture_barrier
#define GL_ARB_texture_barrier 224
#undef GL_ARB_texture_border_clamp
#define GL_ARB_texture_border_clamp 225
#undef GL_ARB_texture_buffer_object
#define GL_ARB_texture_buffer_object 226
#undef GL_ARB_texture_buffer_object_rgb32
#define GL_ARB_texture_buffer_object_rgb32 227
#undef GL_ARB_texture_buffer_range
#define GL_ARB_texture_buffer_range 228
#undef GL_ARB_texture_compression
#define GL_ARB_texture_compression 229
#undef GL_ARB_texture_compression_bptc
#define GL_ARB_texture_compression_bptc 230
#undef GL_ARB_texture_compression_rgtc
#define GL_ARB_texture_compression_rgtc 231
#undef GL_ARB_texture_cube_map
#define GL_ARB_texture_cube_map 232
#undef GL_ARB_texture_cube_map_array
#define GL_ARB_texture_cube_map_array 233
#undef GL_ARB_texture_env_add
#define GL_ARB_texture_env_add 234
#undef GL_ARB_texture_env_combine
#define GL_ARB_texture_env_combine 235
#undef GL_ARB_texture_env_crossbar
#define GL_ARB_texture_env_crossbar 236
#undef GL_ARB_texture_env_dot3
#define GL_ARB_texture_env_dot3 237
#undef GL_ARB_texture_filter_anisotropic
#define GL_ARB_texture_filter_anisotropic 238
#undef GL_ARB_texture_filter_minmax
#define GL_ARB_texture_filter_minmax 239
#undef GL_ARB_texture_float
#define GL_ARB_texture_float 240
#undef GL_ARB_texture_gather
#define GL_ARB_texture_gather 241
#undef GL_ARB_texture_mirror_clamp_to_edge
#define GL_ARB_texture_mirror_clamp_to_edge 242
#undef GL_ARB_texture_mirrored_repeat
#define GL_ARB_texture_mirrored_repeat 243
#undef GL_ARB_texture_multisample
#define GL_ARB_texture_multisample 244
#undef GL_ARB_texture_non_power_of_two
#define GL_ARB_texture_non_power_of_two 245
#undef GL_ARB_texture_query_levels
#define GL_ARB_texture_query_levels 246
#undef GL_ARB_texture_query_lod
#define GL_ARB_texture_query_lod 247
#undef GL_ARB_texture_rectangle
#define GL_ARB_texture_rectangle 248
#undef GL_ARB_texture_rg
#define GL_ARB_texture_rg 249
#undef GL_ARB_texture_rgb10_a2ui
#define GL_ARB_texture_rgb10_a2ui 250
#undef GL_ARB_texture_stencil8
#define GL_ARB_texture_stencil8 251
#undef GL_ARB_texture_storage
#define GL_ARB_texture_storage 252
#undef GL_ARB_texture_storage_multisample
#define GL_ARB_texture_storage_multisample 253
#undef GL_ARB_texture_swizzle
#define GL_ARB_texture_swizzle 254
#undef GL_ARB_texture_view
#define GL_ARB_texture_view 255
#undef GL_ARB_timer_query
#define GL_ARB_timer_query 256
#undef GL_ARB_transform_feedback2
#define GL_ARB_transform_feedback2 257
#undef GL_ARB_transform_feedback3
#define GL_ARB_transform_feedback3 258
#undef GL_ARB_transform_feedback_instanced
#define GL_ARB_transform_feedback_instanced 259
#undef GL_ARB_transform_feedback_overflow_query
#define GL_ARB_transform_feedback_overflow_query 260
#undef GL_ARB_transpose_matrix
#define GL_ARB_transpose_matrix 261
#undef GL_ARB_uniform_buffer_object
#define GL_ARB_uniform_buffer_object 262
#undef GL_ARB_vertex_array_bgra
#define GL_ARB_vertex_array_bgra 263
#undef GL_ARB_vertex_array_object
#define GL_ARB_vertex_array_object 264
#undef GL_ARB_vertex_attrib_64bit
#define GL_ARB_vertex_attrib_64bit 265
#undef GL_ARB_vertex_attrib_binding
#define GL_ARB_vertex_attrib_binding 266
#undef GL_ARB_vertex_blend
#define GL_ARB_vertex_blend 267
#undef GL_ARB_vertex_buffer_object
#define GL_ARB_vertex_buffer_object 268
#undef GL_ARB_vertex_program
#define GL_ARB_vertex_program 269
#undef GL_ARB_vertex_shader
#define GL_ARB_vertex_shader 270
#undef GL_ARB_vertex_type_10f_11f_11f_rev
#define GL_ARB_vertex_type_10f_11f_11f_rev 271
#undef GL_ARB_vertex_type_2_10_10_10_rev
#define GL_ARB_vertex_type_2_10_10_10_rev 272
#undef GL_ARB_viewport_array
#define GL_ARB_viewport_array 273
#undef GL_ARB_window_pos
#define GL_ARB_window_pos 274
#undef GL_ARM_mali_program_binary
#define GL_ARM_mali_program_binary 275
#undef GL_ARM_mali_shader_binary
#define GL_ARM_mali_shader_binary 276
#undef GL_ARM_rgba8
#define GL_ARM_rgba8 277
#undef GL_ARM_shader_framebuffer_fetch
#define GL_ARM_shader_framebuffer_fetch 278
#undef GL_ARM_shader_framebuffer_fetch_depth_stencil
#define GL_ARM_shader_framebuffer_fetch_depth_stencil 279
#undef GL_ATI_draw_buffers
#define GL_ATI_draw_buffers 280
#undef GL_ATI_element_array
#define GL_ATI_element_array 281
#undef GL_ATI_envmap_bumpmap
#define GL_ATI_envmap_bumpmap 282
#undef GL_ATI_fragment_shader
#define GL_ATI_fragment_shader 283
#undef GL_ATI_map_object_buffer
#define GL_ATI_map_object_buffer 284
#undef GL_ATI_meminfo
#define GL_ATI_meminfo 285
#undef GL_ATI_pixel_format_float
#define GL_ATI_pixel_format_float 286
#undef GL_ATI_pn_triangles
#define GL_ATI_pn_triangles 287
#undef GL_ATI_separate_stencil
#define GL_ATI_separate_stencil 288
#undef GL_ATI_text_fragment_shader
#define GL_ATI_text_fragment_shader 289
#undef GL_ATI_texture_env_combine3
#define GL_ATI_texture_env_combine3 290
#undef GL_ATI_texture_float
#define GL_ATI_texture_float 291
#undef GL_ATI_texture_mirror_once
#define GL_ATI_texture_mirror_once 292
#undef GL_ATI_vertex_array_object
#define GL_ATI_vertex_array_object 293
#undef GL_ATI_vertex_attrib_array_object
#define GL_ATI_vertex_attrib_array_object 294
#undef GL_ATI_vertex_streams
#define GL_ATI_vertex_streams 295
#undef GL_DMP_program_binary
#define GL_DMP_program_binary 296
#undef GL_DMP_shader_binary
#define GL_DMP_shader_binary 297
#undef GL_EXT_422_pixels
#define GL_EXT_422_pixels 298
#undef GL_EXT_EGL_image_array
#define GL_EXT_EGL_image_array 299
#undef GL_EXT_EGL_image_storage
#define GL_EXT_EGL_image_storage 300
#undef GL_EXT_YUV_target
#define GL_EXT_YUV_target 301
#undef GL_EXT_abgr
#define GL_EXT_abgr 302
#undef GL_EXT_base_instance
#define GL_EXT_base_instance 303
#undef GL_EXT_bgra
#define GL_EXT_bgra 304
#undef GL_EXT_bindable_uniform
#define GL_EXT_bindable_uniform 305
#undef GL_EXT_blend_color
#define GL_EXT_blend_color 306
#undef GL_EXT_blend_equation_separate
#define GL_EXT_blend_equation_separate 307
#undef GL_EXT_blend_func_extended
#define GL_EXT_blend_func_extended 308
#undef GL_EXT_blend_func_separate
#define GL_EXT_blend_func_separate 309
#undef GL_EXT_blend_logic_op
#define GL_EXT_blend_logic_op 310
#undef GL_EXT_blend_minmax
#define GL_EXT_blend_minmax 311
#undef GL_EXT_blend_subtract
#define GL_EXT_blend_subtract 312
#undef GL_EXT_buffer_storage
#define GL_EXT_buffer_storage 313
#undef GL_EXT_clear_texture
#define GL_EXT_clear_texture 314
#undef GL_EXT_clip_control
#define GL_EXT_clip_control 315
#undef GL_EXT_clip_cull_distance
#define GL_EXT_clip_cull_distance 316
#undef GL_EXT_clip_volume_hint
#define GL_EXT_clip_volume_hint 317
#undef GL_EXT_cmyka
#define GL_EXT_cmyka 318
#undef GL_EXT_color_buffer_float
#define GL_EXT_color_buffer_float 319
#undef GL_EXT_color_buffer_half_float
#define GL_EXT_color_buffer_half_float 320
#undef GL_EXT_color_subtable
#define GL_EXT_color_subtable 321
#undef GL_EXT_compiled_vertex_array
#define GL_EXT_compiled_vertex_array 322
#undef GL_EXT_conservative_depth
#define GL_EXT_conservative_depth 323
#undef GL_EXT_convolution
#define GL_EXT_convolution 324
#undef GL_EXT_coordinate_frame
#define GL_EXT_coordinate_frame 325
#undef GL_EXT_copy_image
#define GL_EXT_copy_image 326
#undef GL_EXT_copy_texture
#define GL_EXT_copy_texture 327
#undef GL_EXT_cull_vertex
#define GL_EXT_cull_vertex 328
#undef GL_EXT_debug_label
#define GL_EXT_debug_label 329
#undef GL_EXT_debug_marker
#define GL_EXT_debug_marker 330
#undef GL_EXT_depth_bounds_test
#define GL_EXT_depth_bounds_test 331
#undef GL_EXT_direct_state_access
#define GL_EXT_direct_state_access 332
#undef GL_EXT_discard_framebuffer
#define GL_EXT_discard_framebuffer 333
#undef GL_EXT_disjoint_timer_query
#define GL_EXT_disjoint_timer_query 334
#undef GL_EXT_draw_buffers
#define GL_EXT_draw_buffers 335
#undef GL_EXT_draw_buffers2
#define GL_EXT_draw_buffers2 336
#undef GL_EXT_draw_buffers_indexed
#define GL_EXT_draw_buffers_indexed 337
#undef GL_EXT_draw_elements_base_vertex
#define GL_EXT_draw_elements_base_vertex 338
#undef GL_EXT_draw_instanced
#define GL_EXT_draw_instanced 339
#undef GL_EXT_draw_range_elements
#define GL_EXT_draw_range_elements 340
#undef GL_EXT_draw_transform_feedback
#define GL_EXT_draw_transform_feedback 341
#undef GL_EXT_external_buffer
#define GL_EXT_external_buffer 342
#undef GL_EXT_float_blend
#define GL_EXT_float_blend 343
#undef GL_EXT_fog_coord
#define GL_EXT_fog_coord 344
#undef GL_EXT_framebuffer_blit
#define GL_EXT_framebuffer_blit 345
#undef GL_EXT_framebuffer_multisample
#define GL_EXT_framebuffer_multisample 346
#undef GL_EXT_framebuffer_multisample_blit_scaled
#define GL_EXT_framebuffer_multisample_blit_scaled 347
#undef GL_EXT_framebuffer_object
#define GL_EXT_framebuffer_object 348
#undef GL_EXT_framebuffer_sRGB
#define GL_EXT_framebuffer_sRGB 349
#undef GL_EXT_geometry_point_size
#define GL_EXT_geometry_point_size 350
#undef GL_EXT_geometry_shader
#define GL_EXT_geometry_shader 351
#undef GL_EXT_geometry_shader4
#define GL_EXT_geometry_shader4 352
#undef GL_EXT_gpu_program_parameters
#define GL_EXT_gpu_program_parameters 353
#undef GL_EXT_gpu_shader4
#define GL_EXT_gpu_shader4 354
#undef GL_EXT_gpu_shader5
#define GL_EXT_gpu_shader5 355
#undef GL_EXT_histogram
#define GL_EXT_histogram 356
#undef GL_EXT_index_array_formats
#define GL_EXT_index_array_formats 357
#undef GL_EXT_index_func
#define GL_EXT_index_func 358
#undef GL_EXT_index_material
#define GL_EXT_index_material 359
#undef GL_EXT_index_texture
#define GL_EXT_index_texture 360
#undef GL_EXT_instanced_arrays
#define GL_EXT_instanced_arrays 361
#undef GL_EXT_light_texture
#define GL_EXT_light_texture 362
#undef GL_EXT_map_buffer_range
#define GL_EXT_map_buffer_range 363
#undef GL_EXT_memory_object
#define GL_EXT_memory_object 364
#undef GL_EXT_memory_object_fd
#define GL_EXT_memory_object_fd 365
#undef GL_EXT_memory_object_win32
#define GL_EXT_memory_object_win32 366
#undef GL_EXT_misc_attribute
#define GL_EXT_misc_attribute 367
#undef GL_EXT_multi_draw_arrays
#define GL_EXT_multi_draw_arrays 368
#undef GL_EXT_multi_draw_indirect
#define GL_EXT_multi_draw_indirect 369
#undef GL_EXT_multisample
#define GL_EXT_multisample 370
#undef GL_EXT_multisampled_compatibility
#define GL_EXT_multisampled_compatibility 371
#undef GL_EXT_multisampled_render_to_texture
#define GL_EXT_multisampled_render_to_texture 372
#undef GL_EXT_multiview_draw_buffers
#define GL_EXT_multiview_draw_buffers 373
#undef GL_EXT_occlusion_query_boolean
#define GL_EXT_occlusion_query_boolean 374
#undef GL_EXT_packed_depth_stencil
#define GL_EXT_packed_depth_stencil 375
#undef GL_EXT_packed_float
#define GL_EXT_packed_float 376
#undef GL_EXT_packed_pixels
#define GL_EXT_packed_pixels 377
#undef GL_EXT_paletted_texture
#define GL_EXT_paletted_texture 378
#undef GL_EXT_pixel_buffer_object
#define GL_EXT_pixel_buffer_object 379
#undef GL_EXT_pixel_transform
#define GL_EXT_pixel_transform 380
#undef GL_EXT_pixel_transform_color_table
#define GL_EXT_pixel_transform_color_table 381
#undef GL_EXT_point_parameters
#define GL_EXT_point_parameters 382
#undef GL_EXT_polygon_offset
#define GL_EXT_polygon_offset 383
#undef GL_EXT_polygon_offset_clamp
#define GL_EXT_polygon_offset_clamp 384
#undef GL_EXT_post_depth_coverage
#define GL_EXT_post_depth_coverage 385
#undef GL_EXT_primitive_bounding_box
#define GL_EXT_primitive_bounding_box 386
#undef GL_EXT_protected_textures
#define GL_EXT_protected_textures 387
#undef GL_EXT_provoking_vertex
#define GL_EXT_provoking_vertex 388
#undef GL_EXT_pvrtc_sRGB
#define GL_EXT_pvrtc_sRGB 389
#undef GL_EXT_raster_multisample
#define GL_EXT_raster_multisample 390
#undef GL_EXT_read_format_bgra
#define GL_EXT_read_format_bgra 391
#undef GL_EXT_render_snorm
#define GL_EXT_render_snorm 392
#undef GL_EXT_rescale_normal
#define GL_EXT_rescale_normal 393
#undef GL_EXT_robustness
#define GL_EXT_robustness 394
#undef GL_EXT_semaphore
#define GL_EXT_semaphore 395
#undef GL_EXT_semaphore_fd
#define GL_EXT_semaphore_fd 396
#undef GL_EXT_semaphore_win32
#define GL_EXT_semaphore_win32 397
#undef GL_EXT_sRGB
#define GL_EXT_sRGB 398
#undef GL_EXT_sRGB_write_control
#define GL_EXT_sRGB_write_control 399
#undef GL_EXT_secondary_color
#define GL_EXT_secondary_color 400
#undef GL_EXT_separate_shader_objects
#define GL_EXT_separate_shader_objects 401
#undef GL_EXT_separate_specular_color
#define GL_EXT_separate_specular_color 402
#undef GL_EXT_shader_framebuffer_fetch
#define GL_EXT_shader_framebuffer_fetch 403
#undef GL_EXT_shader_framebuffer_fetch_non_coherent
#define GL_EXT_shader_framebuffer_fetch_non_coherent 404
#undef GL_EXT_shader_group_vote
#define GL_EXT_shader_group_vote 405
#undef GL_EXT_shader_image_load_formatted
#define GL_EXT_shader_image_load_formatted 406
#undef GL_EXT_shader_image_load_store
#define GL_EXT_shader_image_load_store 407
#undef GL_EXT_shader_implicit_conversions
#define GL_EXT_shader_implicit_conversions 408
#undef GL_EXT_shader_integer_mix
#define GL_EXT_shader_integer_mix 409
#undef GL_EXT_shader_io_blocks
#define GL_EXT_shader_io_blocks 410
#undef GL_EXT_shader_non_constant_global_initializers
#define GL_EXT_shader_non_constant_global_initializers 411
#undef GL_EXT_shader_pixel_local_storage
#define GL_EXT_shader_pixel_local_storage 412
#undef GL_EXT_shader_pixel_local_storage2
#define GL_EXT_shader_pixel_local_storage2 413
#undef GL_EXT_shader_texture_lod
#define GL_EXT_shader_texture_lod 414
#undef GL_EXT_shadow_funcs
#define GL_EXT_shadow_funcs 415
#undef GL_EXT_shadow_samplers
#define GL_EXT_shadow_samplers 416
#undef GL_EXT_shared_texture_palette
#define GL_EXT_shared_texture_palette 417
#undef GL_EXT_sparse_texture
#define GL_EXT_sparse_texture 418
#undef GL_EXT_sparse_texture2
#define GL_EXT_sparse_texture2 419
#undef GL_EXT_stencil_clear_tag
#define GL_EXT_stencil_clear_tag 420
#undef GL_EXT_stencil_two_side
#define GL_EXT_stencil_two_side 421
#undef GL_EXT_stencil_wrap
#define GL_EXT_stencil_wrap 422
#undef GL_EXT_subtexture
#define GL_EXT_subtexture 423
#undef GL_EXT_tessellation_point_size
#define GL_EXT_tessellation_point_size 424
#undef GL_EXT_tessellation_shader
#define GL_EXT_tessellation_shader 425
#undef GL_EXT_texture
#define GL_EXT_texture 426
#undef GL_EXT_texture3D
#define GL_EXT_texture3D 427
#undef GL_EXT_texture_array
#define GL_EXT_texture_array 428
#undef GL_EXT_texture_border_clamp
#define GL_EXT_texture_border_clamp 429
#undef GL_EXT_texture_buffer
#define GL_EXT_texture_buffer 430
#undef GL_EXT_texture_buffer_object
#define GL_EXT_texture_buffer_object 431
#undef GL_EXT_texture_compression_astc_decode_mode
#define GL_EXT_texture_compression_astc_decode_mode 432
#undef GL_EXT_texture_compression_bptc
#define GL_EXT_texture_compression_bptc 433
#undef GL_EXT_texture_compression_dxt1
#define GL_EXT_texture_compression_dxt1 434
#undef GL_EXT_texture_compression_latc
#define GL_EXT_texture_compression_latc 435
#undef GL_EXT_texture_compression_rgtc
#define GL_EXT_texture_compression_rgtc 436
#undef GL_EXT_texture_compression_s3tc
#define GL_EXT_texture_compression_s3tc 437
#undef GL_EXT_texture_compression_s3tc_srgb
#define GL_EXT_texture_compression_s3tc_srgb 438
#undef GL_EXT_texture_cube_map
#define GL_EXT_texture_cube_map 439
#undef GL_EXT_texture_cube_map_array
#define GL_EXT_texture_cube_map_array 440
#undef GL_EXT_texture_env_add
#define GL_EXT_texture_env_add 441
#undef GL_EXT_texture_env_combine
#define GL_EXT_texture_env_combine 442
#undef GL_EXT_texture_env_dot3
#define GL_EXT_texture_env_dot3 443
#undef GL_EXT_texture_filter_anisotropic
#define GL_EXT_texture_filter_anisotropic 444
#undef GL_EXT_texture_filter_minmax
#define GL_EXT_texture_filter_minmax 445
#undef GL_EXT_texture_format_BGRA8888
#define GL_EXT_texture_format_BGRA8888 446
#undef GL_EXT_texture_format_sRGB_override
#define GL_EXT_texture_format_sRGB_override 447
#undef GL_EXT_texture_integer
#define GL_EXT_texture_integer 448
#undef GL_EXT_texture_lod_bias
#define GL_EXT_texture_lod_bias 449
#undef GL_EXT_texture_mirror_clamp
#define GL_EXT_texture_mirror_clamp 450
#undef GL_EXT_texture_mirror_clamp_to_edge
#define GL_EXT_texture_mirror_clamp_to_edge 451
#undef GL_EXT_texture_norm16
#define GL_EXT_texture_norm16 452
#undef GL_EXT_texture_object
#define GL_EXT_texture_object 453
#undef GL_EXT_texture_perturb_normal
#define GL_EXT_texture_perturb_normal 454
#undef GL_EXT_texture_rg
#define GL_EXT_texture_rg 455
#undef GL_EXT_texture_sRGB
#define GL_EXT_texture_sRGB 456
#undef GL_EXT_texture_sRGB_R8
#define GL_EXT_texture_sRGB_R8 457
#undef GL_EXT_texture_sRGB_RG8
#define GL_EXT_texture_sRGB_RG8 458
#undef GL_EXT_texture_sRGB_decode
#define GL_EXT_texture_sRGB_decode 459
#undef GL_EXT_texture_shared_exponent
#define GL_EXT_texture_shared_exponent 460
#undef GL_EXT_texture_snorm
#define GL_EXT_texture_snorm 461
#undef GL_EXT_texture_storage
#define GL_EXT_texture_storage 462
#undef GL_EXT_texture_swizzle
#define GL_EXT_texture_swizzle 463
#undef GL_EXT_texture_type_2_10_10_10_REV
#define GL_EXT_texture_type_2_10_10_10_REV 464
#undef GL_EXT_texture_view
#define GL_EXT_texture_view 465
#undef GL_EXT_timer_query
#define GL_EXT_timer_query 466
#undef GL_EXT_transform_feedback
#define GL_EXT_transform_feedback 467
#undef GL_EXT_unpack_subimage
#define GL_EXT_unpack_subimage 468
#undef GL_EXT_vertex_array
#define GL_EXT_vertex_array 469
#undef GL_EXT_vertex_array_bgra
#define GL_EXT_vertex_array_bgra 470
#undef GL_EXT_vertex_attrib_64bit
#define GL_EXT_vertex_attrib_64bit 471
#undef GL_EXT_vertex_shader
#define GL_EXT_vertex_shader 472
#undef GL_EXT_vertex_weighting
#define GL_EXT_vertex_weighting 473
#undef GL_EXT_win32_keyed_mutex
#define GL_EXT_win32_keyed_mutex 474
#undef GL_EXT_window_rectangles
#define GL_EXT_window_rectangles 475
#undef GL_EXT_x11_sync_object
#define GL_EXT_x11_sync_object 476
#undef GL_FJ_shader_binary_GCCSO
#define GL_FJ_shader_binary_GCCSO 477
#undef GL_GREMEDY_frame_terminator
#define GL_GREMEDY_frame_terminator 478
#undef GL_GREMEDY_string_marker
#define GL_GREMEDY_string_marker 479
#undef GL_HP_convolution_border_modes
#define GL_HP_convolution_border_modes 480
#undef GL_HP_image_transform
#define GL_HP_image_transform 481
#undef GL_HP_occlusion_test
#define GL_HP_occlusion_test 482
#undef GL_HP_texture_lighting
#define GL_HP_texture_lighting 483
#undef GL_IBM_cull_vertex
#define GL_IBM_cull_vertex 484
#undef GL_IBM_multimode_draw_arrays
#define GL_IBM_multimode_draw_arrays 485
#undef GL_IBM_rasterpos_clip
#define GL_IBM_rasterpos_clip 486
#undef GL_IBM_static_data
#define GL_IBM_static_data 487
#undef GL_IBM_texture_mirrored_repeat
#define GL_IBM_texture_mirrored_repeat 488
#undef GL_IBM_vertex_array_lists
#define GL_IBM_vertex_array_lists 489
#undef GL_IMG_bindless_texture
#define GL_IMG_bindless_texture 490
#undef GL_IMG_framebuffer_downsample
#define GL_IMG_framebuffer_downsample 491
#undef GL_IMG_multisampled_render_to_texture
#define GL_IMG_multisampled_render_to_texture 492
#undef GL_IMG_program_binary
#define GL_IMG_program_binary 493
#undef GL_IMG_read_format
#define GL_IMG_read_format 494
#undef GL_IMG_shader_binary
#define GL_IMG_shader_binary 495
#undef GL_IMG_texture_compression_pvrtc
#define GL_IMG_texture_compression_pvrtc 496
#undef GL_IMG_texture_compression_pvrtc2
#define GL_IMG_texture_compression_pvrtc2 497
#undef GL_IMG_texture_env_enhanced_fixed_function
#define GL_IMG_texture_env_enhanced_fixed_function 498
#undef GL_IMG_texture_filter_cubic
#define GL_IMG_texture_filter_cubic 499
#undef GL_IMG_user_clip_plane
#define GL_IMG_user_clip_plane 500
#undef GL_INGR_blend_func_separate
#define GL_INGR_blend_func_separate 501
#undef GL_INGR_color_clamp
#define GL_INGR_color_clamp 502
#undef GL_INGR_interlace_read
#define GL_INGR_interlace_read 503
#undef GL_INTEL_conservative_rasterization
#define GL_INTEL_conservative_rasterization 504
#undef GL_INTEL_fragment_shader_ordering
#define GL_INTEL_fragment_shader_ordering 505
#undef GL_INTEL_framebuffer_CMAA
#define GL_INTEL_framebuffer_CMAA 506
#undef GL_INTEL_map_texture
#define GL_INTEL_map_texture 507
#undef GL_INTEL_blackhole_render
#define GL_INTEL_blackhole_render 508
#undef GL_INTEL_parallel_arrays
#define GL_INTEL_parallel_arrays 509
#undef GL_INTEL_performance_query
#define GL_INTEL_performance_query 510
#undef GL_KHR_blend_equation_advanced
#define GL_KHR_blend_equation_advanced 511
#undef GL_KHR_blend_equation_advanced_coherent
#define GL_KHR_blend_equation_advanced_coherent 512
#undef GL_KHR_context_flush_control
#define GL_KHR_context_flush_control 513
#undef GL_KHR_debug
#define GL_KHR_debug 514
#undef GL_KHR_no_error
#define GL_KHR_no_error 515
#undef GL_KHR_robust_buffer_access_behavior
#define GL_KHR_robust_buffer_access_behavior 516
#undef GL_KHR_robustness
#define GL_KHR_robustness 517
#undef GL_KHR_texture_compression_astc_hdr
#define GL_KHR_texture_compression_astc_hdr 518
#undef GL_KHR_texture_compression_astc_ldr
#define GL_KHR_texture_compression_astc_ldr 519
#undef GL_KHR_texture_compression_astc_sliced_3d
#define GL_KHR_texture_compression_astc_sliced_3d 520
#undef GL_KHR_parallel_shader_compile
#define GL_KHR_parallel_shader_compile 521
#undef GL_MESAX_texture_stack
#define GL_MESAX_texture_stack 522
#undef GL_MESA_framebuffer_flip_y
#define GL_MESA_framebuffer_flip_y 523
#undef GL_MESA_pack_invert
#define GL_MESA_pack_invert 524
#undef GL_MESA_program_binary_formats
#define GL_MESA_program_binary_formats 525
#undef GL_MESA_resize_buffers
#define GL_MESA_resize_buffers 526
#undef GL_MESA_shader_integer_functions
#define GL_MESA_shader_integer_functions 527
#undef GL_MESA_tile_raster_order
#define GL_MESA_tile_raster_order 528
#undef GL_MESA_window_pos
#define GL_MESA_window_pos 529
#undef GL_MESA_ycbcr_texture
#define GL_MESA_ycbcr_texture 530
#undef GL_NVX_blend_equation_advanced_multi_draw_buffers
#define GL_NVX_blend_equation_advanced_multi_draw_buffers 531
#undef GL_NVX_cross_process_interop
#define GL_NVX_cross_process_interop 532
#undef GL_NVX_conditional_render
#define GL_NVX_conditional_render 533
#undef GL_NVX_gpu_memory_info
#define GL_NVX_gpu_memory_info 534
#undef GL_NVX_linked_gpu_multicast
#define GL_NVX_linked_gpu_multicast 535
#undef GL_NV_alpha_to_coverage_dither_control
#define GL_NV_alpha_to_coverage_dither_control 536
#undef GL_NV_bindless_multi_draw_indirect
#define GL_NV_bindless_multi_draw_indirect 537
#undef GL_NV_bindless_multi_draw_indirect_count
#define GL_NV_bindless_multi_draw_indirect_count 538
#undef GL_NV_bindless_texture
#define GL_NV_bindless_texture 539
#undef GL_NV_blend_equation_advanced
#define GL_NV_blend_equation_advanced 540
#undef GL_NV_blend_equation_advanced_coherent
#define GL_NV_blend_equation_advanced_coherent 541
#undef GL_NV_blend_minmax_factor
#define GL_NV_blend_minmax_factor 542
#undef GL_NV_blend_square
#define GL_NV_blend_square 543
#undef GL_NV_clip_space_w_scaling
#define GL_NV_clip_space_w_scaling 544
#undef GL_NV_command_list
#define GL_NV_command_list 545
#undef GL_NV_compute_program5
#define GL_NV_compute_program5 546
#undef GL_NV_conditional_render
#define GL_NV_conditional_render 547
#undef GL_NV_conservative_raster
#define GL_NV_conservative_raster 548
#undef GL_NV_conservative_raster_dilate
#define GL_NV_conservative_raster_dilate 549
#undef GL_NV_conservative_raster_pre_snap
#define GL_NV_conservative_raster_pre_snap 550
#undef GL_NV_conservative_raster_pre_snap_triangles
#define GL_NV_conservative_raster_pre_snap_triangles 551
#undef GL_NV_conservative_raster_underestimation
#define GL_NV_conservative_raster_underestimation 552
#undef GL_NV_copy_buffer
#define GL_NV_copy_buffer 553
#undef GL_NV_copy_depth_to_color
#define GL_NV_copy_depth_to_color 554
#undef GL_NV_copy_image
#define GL_NV_copy_image 555
#undef GL_NV_coverage_sample
#define GL_NV_coverage_sample 556
#undef GL_NV_deep_texture3D
#define GL_NV_deep_texture3D 557
#undef GL_NV_depth_buffer_float
#define GL_NV_depth_buffer_float 558
#undef GL_NV_depth_clamp
#define GL_NV_depth_clamp 559
#undef GL_NV_depth_nonlinear
#define GL_NV_depth_nonlinear 560
#undef GL_NV_draw_buffers
#define GL_NV_draw_buffers 561
#undef GL_NV_draw_instanced
#define GL_NV_draw_instanced 562
#undef GL_NV_draw_texture
#define GL_NV_draw_texture 563
#undef GL_NV_draw_vulkan_image
#define GL_NV_draw_vulkan_image 564
#undef GL_NV_evaluators
#define GL_NV_evaluators 565
#undef GL_NV_explicit_attrib_location
#define GL_NV_explicit_attrib_location 566
#undef GL_NV_explicit_multisample
#define GL_NV_explicit_multisample 567
#undef GL_NV_fbo_color_attachments
#define GL_NV_fbo_color_attachments 568
#undef GL_NV_fence
#define GL_NV_fence 569
#undef GL_NV_fill_rectangle
#define GL_NV_fill_rectangle 570
#undef GL_NV_float_buffer
#define GL_NV_float_buffer 571
#undef GL_NV_fog_distance
#define GL_NV_fog_distance 572
#undef GL_NV_fragment_coverage_to_color
#define GL_NV_fragment_coverage_to_color 573
#undef GL_NV_fragment_program
#define GL_NV_fragment_program 574
#undef GL_NV_fragment_program2
#define GL_NV_fragment_program2 575
#undef GL_NV_fragment_program4
#define GL_NV_fragment_program4 576
#undef GL_NV_fragment_program_option
#define GL_NV_fragment_program_option 577
#undef GL_NV_fragment_shader_interlock
#define GL_NV_fragment_shader_interlock 578
#undef GL_NV_framebuffer_blit
#define GL_NV_framebuffer_blit 579
#undef GL_NV_framebuffer_mixed_samples
#define GL_NV_framebuffer_mixed_samples 580
#undef GL_NV_framebuffer_multisample
#define GL_NV_framebuffer_multisample 581
#undef GL_NV_framebuffer_multisample_coverage
#define GL_NV_framebuffer_multisample_coverage 582
#undef GL_NV_generate_mipmap_sRGB
#define GL_NV_generate_mipmap_sRGB 583
#undef GL_NV_geometry_program4
#define GL_NV_geometry_program4 584
#undef GL_NV_geometry_shader4
#define GL_NV_geometry_shader4 585
#undef GL_NV_geometry_shader_passthrough
#define GL_NV_geometry_shader_passthrough 586
#undef GL_NV_gpu_program4
#define GL_NV_gpu_program4 587
#undef GL_NV_gpu_program5
#define GL_NV_gpu_program5 588
#undef GL_NV_gpu_program5_mem_extended
#define GL_NV_gpu_program5_mem_extended 589
#undef GL_NV_gpu_shader5
#define GL_NV_gpu_shader5 590
#undef GL_NV_half_float
#define GL_NV_half_float 591
#undef GL_NV_image_formats
#define GL_NV_image_formats 592
#undef GL_NV_instanced_arrays
#define GL_NV_instanced_arrays 593
#undef GL_NV_internalformat_sample_query
#define GL_NV_internalformat_sample_query 594
#undef GL_NV_light_max_exponent
#define GL_NV_light_max_exponent 595
#undef GL_NV_gpu_multicast
#define GL_NV_gpu_multicast 596
#undef GL_NV_multisample_coverage
#define GL_NV_multisample_coverage 597
#undef GL_NV_multisample_filter_hint
#define GL_NV_multisample_filter_hint 598
#undef GL_NV_non_square_matrices
#define GL_NV_non_square_matrices 599
#undef GL_NV_occlusion_query
#define GL_NV_occlusion_query 600
#undef GL_NV_packed_depth_stencil
#define GL_NV_packed_depth_stencil 601
#undef GL_NV_parameter_buffer_object
#define GL_NV_parameter_buffer_object 602
#undef GL_NV_parameter_buffer_object2
#define GL_NV_parameter_buffer_object2 603
#undef GL_NV_path_rendering
#define GL_NV_path_rendering 604
#undef GL_NV_path_rendering_shared_edge
#define GL_NV_path_rendering_shared_edge 605
#undef GL_NV_pixel_data_range
#define GL_NV_pixel_data_range 606
#undef GL_NV_pixel_buffer_object
#define GL_NV_pixel_buffer_object 607
#undef GL_NV_point_sprite
#define GL_NV_point_sprite 608
#undef GL_NV_polygon_mode
#define GL_NV_polygon_mode 609
#undef GL_NV_present_video
#define GL_NV_present_video 610
#undef GL_NV_primitive_restart
#define GL_NV_primitive_restart 611
#undef GL_NV_query_resource
#define GL_NV_query_resource 612
#undef GL_NV_query_resource_tag
#define GL_NV_query_resource_tag 613
#undef GL_NV_read_buffer
#define GL_NV_read_buffer 614
#undef GL_NV_read_buffer_front
#define GL_NV_read_buffer_front 615
#undef GL_NV_read_depth
#define GL_NV_read_depth 616
#undef GL_NV_read_depth_stencil
#define GL_NV_read_depth_stencil 617
#undef GL_NV_read_stencil
#define GL_NV_read_stencil 618
#undef GL_NV_register_combiners
#define GL_NV_register_combiners 619
#undef GL_NV_register_combiners2
#define GL_NV_register_combiners2 620
#undef GL_NV_robustness_video_memory_purge
#define GL_NV_robustness_video_memory_purge 621
#undef GL_NV_sRGB_formats
#define GL_NV_sRGB_formats 622
#undef GL_NV_sample_locations
#define GL_NV_sample_locations 623
#undef GL_NV_sample_mask_override_coverage
#define GL_NV_sample_mask_override_coverage 624
#undef GL_NV_shader_atomic_counters
#define GL_NV_shader_atomic_counters 625
#undef GL_NV_shader_atomic_float
#define GL_NV_shader_atomic_float 626
#undef GL_NV_shader_atomic_float64
#define GL_NV_shader_atomic_float64 627
#undef GL_NV_shader_atomic_fp16_vector
#define GL_NV_shader_atomic_fp16_vector 628
#undef GL_NV_shader_atomic_int64
#define GL_NV_shader_atomic_int64 629
#undef GL_NV_shader_buffer_load
#define GL_NV_shader_buffer_load 630
#undef GL_NV_shader_buffer_store
#define GL_NV_shader_buffer_store 631
#undef GL_NV_shader_noperspective_interpolation
#define GL_NV_shader_noperspective_interpolation 632
#undef GL_NV_shader_storage_buffer_object
#define GL_NV_shader_storage_buffer_object 633
#undef GL_NV_shader_thread_group
#define GL_NV_shader_thread_group 634
#undef GL_NV_shader_thread_shuffle
#define GL_NV_shader_thread_shuffle 635
#undef GL_NV_shadow_samplers_array
#define GL_NV_shadow_samplers_array 636
#undef GL_NV_shadow_samplers_cube
#define GL_NV_shadow_samplers_cube 637
#undef GL_NV_stereo_view_rendering
#define GL_NV_stereo_view_rendering 638
#undef GL_NV_tessellation_program5
#define GL_NV_tessellation_program5 639
#undef GL_NV_texgen_emboss
#define GL_NV_texgen_emboss 640
#undef GL_NV_texgen_reflection
#define GL_NV_texgen_reflection 641
#undef GL_NV_texture_barrier
#define GL_NV_texture_barrier 642
#undef GL_NV_texture_border_clamp
#define GL_NV_texture_border_clamp 643
#undef GL_NV_texture_compression_s3tc_update
#define GL_NV_texture_compression_s3tc_update 644
#undef GL_NV_texture_compression_vtc
#define GL_NV_texture_compression_vtc 645
#undef GL_NV_texture_env_combine4
#define GL_NV_texture_env_combine4 646
#undef GL_NV_texture_expand_normal
#define GL_NV_texture_expand_normal 647
#undef GL_NV_texture_multisample
#define GL_NV_texture_multisample 648
#undef GL_NV_texture_npot_2D_mipmap
#define GL_NV_texture_npot_2D_mipmap 649
#undef GL_NV_texture_rectangle
#define GL_NV_texture_rectangle 650
#undef GL_NV_texture_rectangle_compressed
#define GL_NV_texture_rectangle_compressed 651
#undef GL_NV_texture_shader
#define GL_NV_texture_shader 652
#undef GL_NV_texture_shader2
#define GL_NV_texture_shader2 653
#undef GL_NV_texture_shader3
#define GL_NV_texture_shader3 654
#undef GL_NV_transform_feedback
#define GL_NV_transform_feedback 655
#undef GL_NV_transform_feedback2
#define GL_NV_transform_feedback2 656
#undef GL_NV_uniform_buffer_unified_memory
#define GL_NV_uniform_buffer_unified_memory 657
#undef GL_NV_vdpau_interop
#define GL_NV_vdpau_interop 658
#undef GL_NV_vertex_array_range
#define GL_NV_vertex_array_range 659
#undef GL_NV_vertex_array_range2
#define GL_NV_vertex_array_range2 660
#undef GL_NV_vertex_attrib_integer_64bit
#define GL_NV_vertex_attrib_integer_64bit 661
#undef GL_NV_vertex_buffer_unified_memory
#define GL_NV_vertex_buffer_unified_memory 662
#undef GL_NV_vertex_program
#define GL_NV_vertex_program 663
#undef GL_NV_vertex_program1_1
#define GL_NV_vertex_program1_1 664
#undef GL_NV_vertex_program2
#define GL_NV_vertex_program2 665
#undef GL_NV_vertex_program2_option
#define GL_NV_vertex_program2_option 666
#undef GL_NV_vertex_program3
#define GL_NV_vertex_program3 667
#undef GL_NV_vertex_program4
#define GL_NV_vertex_program4 668
#undef GL_NV_video_capture
#define GL_NV_video_capture 669
#undef GL_NV_viewport_array
#define GL_NV_viewport_array 670
#undef GL_NV_viewport_array2
#define GL_NV_viewport_array2 671
#undef GL_NV_viewport_swizzle
#define GL_NV_viewport_swizzle 672
#undef GL_OES_EGL_image
#define GL_OES_EGL_image 673
#undef GL_OES_EGL_image_external
#define GL_OES_EGL_image_external 674
#undef GL_OES_EGL_image_external_essl3
#define GL_OES_EGL_image_external_essl3 675
#undef GL_OES_blend_equation_separate
#define GL_OES_blend_equation_separate 676
#undef GL_OES_blend_func_separate
#define GL_OES_blend_func_separate 677
#undef GL_OES_blend_subtract
#define GL_OES_blend_subtract 678
#undef GL_OES_byte_coordinates
#define GL_OES_byte_coordinates 679
#undef GL_OES_compressed_ETC1_RGB8_sub_texture
#define GL_OES_compressed_ETC1_RGB8_sub_texture 680
#undef GL_OES_compressed_ETC1_RGB8_texture
#define GL_OES_compressed_ETC1_RGB8_texture 681
#undef GL_OES_compressed_paletted_texture
#define GL_OES_compressed_paletted_texture 682
#undef GL_OES_copy_image
#define GL_OES_copy_image 683
#undef GL_OES_depth24
#define GL_OES_depth24 684
#undef GL_OES_depth32
#define GL_OES_depth32 685
#undef GL_OES_depth_texture
#define GL_OES_depth_texture 686
#undef GL_OES_draw_buffers_indexed
#define GL_OES_draw_buffers_indexed 687
#undef GL_OES_draw_elements_base_vertex
#define GL_OES_draw_elements_base_vertex 688
#undef GL_OES_draw_texture
#define GL_OES_draw_texture 689
#undef GL_OES_element_index_uint
#define GL_OES_element_index_uint 690
#undef GL_OES_extended_matrix_palette
#define GL_OES_extended_matrix_palette 691
#undef GL_OES_fbo_render_mipmap
#define GL_OES_fbo_render_mipmap 692
#undef GL_OES_fixed_point
#define GL_OES_fixed_point 693
#undef GL_OES_fragment_precision_high
#define GL_OES_fragment_precision_high 694
#undef GL_OES_framebuffer_object
#define GL_OES_framebuffer_object 695
#undef GL_OES_geometry_point_size
#define GL_OES_geometry_point_size 696
#undef GL_OES_geometry_shader
#define GL_OES_geometry_shader 697
#undef GL_OES_get_program_binary
#define GL_OES_get_program_binary 698
#undef GL_OES_gpu_shader5
#define GL_OES_gpu_shader5 699
#undef GL_OES_mapbuffer
#define GL_OES_mapbuffer 700
#undef GL_OES_matrix_get
#define GL_OES_matrix_get 701
#undef GL_OES_matrix_palette
#define GL_OES_matrix_palette 702
#undef GL_OES_packed_depth_stencil
#define GL_OES_packed_depth_stencil 703
#undef GL_OES_point_size_array
#define GL_OES_point_size_array 704
#undef GL_OES_point_sprite
#define GL_OES_point_sprite 705
#undef GL_OES_primitive_bounding_box
#define GL_OES_primitive_bounding_box 706
#undef GL_OES_query_matrix
#define GL_OES_query_matrix 707
#undef GL_OES_read_format
#define GL_OES_read_format 708
#undef GL_OES_required_internalformat
#define GL_OES_required_internalformat 709
#undef GL_OES_rgb8_rgba8
#define GL_OES_rgb8_rgba8 710
#undef GL_OES_sample_shading
#define GL_OES_sample_shading 711
#undef GL_OES_sample_variables
#define GL_OES_sample_variables 712
#undef GL_OES_shader_image_atomic
#define GL_OES_shader_image_atomic 713
#undef GL_OES_shader_io_blocks
#define GL_OES_shader_io_blocks 714
#undef GL_OES_shader_multisample_interpolation
#define GL_OES_shader_multisample_interpolation 715
#undef GL_OES_single_precision
#define GL_OES_single_precision 716
#undef GL_OES_standard_derivatives
#define GL_OES_standard_derivatives 717
#undef GL_OES_stencil1
#define GL_OES_stencil1 718
#undef GL_OES_stencil4
#define GL_OES_stencil4 719
#undef GL_OES_stencil8
#define GL_OES_stencil8 720
#undef GL_OES_stencil_wrap
#define GL_OES_stencil_wrap 721
#undef GL_OES_surfaceless_context
#define GL_OES_surfaceless_context 722
#undef GL_OES_tessellation_point_size
#define GL_OES_tessellation_point_size 723
#undef GL_OES_tessellation_shader
#define GL_OES_tessellation_shader 724
#undef GL_OES_texture_3D
#define GL_OES_texture_3D 725
#undef GL_OES_texture_border_clamp
#define GL_OES_texture_border_clamp 726
#undef GL_OES_texture_buffer
#define GL_OES_texture_buffer 727
#undef GL_OES_texture_compression_astc
#define GL_OES_texture_compression_astc 728
#undef GL_OES_texture_cube_map
#define GL_OES_texture_cube_map 729
#undef GL_OES_texture_cube_map_array
#define GL_OES_texture_cube_map_array 730
#undef GL_OES_texture_env_crossbar
#define GL_OES_texture_env_crossbar 731
#undef GL_OES_texture_float
#define GL_OES_texture_float 732
#undef GL_OES_texture_float_linear
#define GL_OES_texture_float_linear 733
#undef GL_OES_texture_half_float
#define GL_OES_texture_half_float 734
#undef GL_OES_texture_half_float_linear
#define GL_OES_texture_half_float_linear 735
#undef GL_OES_texture_mirrored_repeat
#define GL_OES_texture_mirrored_repeat 736
#undef GL_OES_texture_npot
#define GL_OES_texture_npot 737
#undef GL_OES_texture_stencil8
#define GL_OES_texture_stencil8 738
#undef GL_OES_texture_storage_multisample_2d_array
#define GL_OES_texture_storage_multisample_2d_array 739
#undef GL_OES_texture_view
#define GL_OES_texture_view 740
#undef GL_OES_vertex_array_object
#define GL_OES_vertex_array_object 741
#undef GL_OES_vertex_half_float
#define GL_OES_vertex_half_float 742
#undef GL_OES_vertex_type_10_10_10_2
#define GL_OES_vertex_type_10_10_10_2 743
#undef GL_OES_viewport_array
#define GL_OES_viewport_array 744
#undef GL_OML_interlace
#define GL_OML_interlace 745
#undef GL_OML_resample
#define GL_OML_resample 746
#undef GL_OML_subsample
#define GL_OML_subsample 747
#undef GL_OVR_multiview
#define GL_OVR_multiview 748
#undef GL_OVR_multiview2
#define GL_OVR_multiview2 749
#undef GL_OVR_multiview_multisampled_render_to_texture
#define GL_OVR_multiview_multisampled_render_to_texture 750
#undef GL_PGI_misc_hints
#define GL_PGI_misc_hints 751
#undef GL_PGI_vertex_hints
#define GL_PGI_vertex_hints 752
#undef GL_QCOM_alpha_test
#define GL_QCOM_alpha_test 753
#undef GL_QCOM_binning_control
#define GL_QCOM_binning_control 754
#undef GL_QCOM_driver_control
#define GL_QCOM_driver_control 755
#undef GL_QCOM_extended_get
#define GL_QCOM_extended_get 756
#undef GL_QCOM_extended_get2
#define GL_QCOM_extended_get2 757
#undef GL_QCOM_framebuffer_foveated
#define GL_QCOM_framebuffer_foveated 758
#undef GL_QCOM_texture_foveated
#define GL_QCOM_texture_foveated 759
#undef GL_QCOM_perfmon_global_mode
#define GL_QCOM_perfmon_global_mode 760
#undef GL_QCOM_shader_framebuffer_fetch_noncoherent
#define GL_QCOM_shader_framebuffer_fetch_noncoherent 761
#undef GL_QCOM_shader_framebuffer_fetch_rate
#define GL_QCOM_shader_framebuffer_fetch_rate 762
#undef GL_QCOM_tiled_rendering
#define GL_QCOM_tiled_rendering 763
#undef GL_QCOM_writeonly_rendering
#define GL_QCOM_writeonly_rendering 764
#undef GL_REND_screen_coordinates
#define GL_REND_screen_coordinates 765
#undef GL_S3_s3tc
#define GL_S3_s3tc 766
#undef GL_SGIS_detail_texture
#define GL_SGIS_detail_texture 767
#undef GL_SGIS_fog_function
#define GL_SGIS_fog_function 768
#undef GL_SGIS_generate_mipmap
#define GL_SGIS_generate_mipmap 769
#undef GL_SGIS_multisample
#define GL_SGIS_multisample 770
#undef GL_SGIS_pixel_texture
#define GL_SGIS_pixel_texture 771
#undef GL_SGIS_point_line_texgen
#define GL_SGIS_point_line_texgen 772
#undef GL_SGIS_point_parameters
#define GL_SGIS_point_parameters 773
#undef GL_SGIS_sharpen_texture
#define GL_SGIS_sharpen_texture 774
#undef GL_SGIS_texture4D
#define GL_SGIS_texture4D 775
#undef GL_SGIS_texture_border_clamp
#define GL_SGIS_texture_border_clamp 776
#undef GL_SGIS_texture_color_mask
#define GL_SGIS_texture_color_mask 777
#undef GL_SGIS_texture_edge_clamp
#define GL_SGIS_texture_edge_clamp 778
#undef GL_SGIS_texture_filter4
#define GL_SGIS_texture_filter4 779
#undef GL_SGIS_texture_lod
#define GL_SGIS_texture_lod 780
#undef GL_SGIS_texture_select
#define GL_SGIS_texture_select 781
#undef GL_SGIX_async
#define GL_SGIX_async 782
#undef GL_SGIX_async_histogram
#define GL_SGIX_async_histogram 783
#undef GL_SGIX_async_pixel
#define GL_SGIX_async_pixel 784
#undef GL_SGIX_blend_alpha_minmax
#define GL_SGIX_blend_alpha_minmax 785
#undef GL_SGIX_calligraphic_fragment
#define GL_SGIX_calligraphic_fragment 786
#undef GL_SGIX_clipmap
#define GL_SGIX_clipmap 787
#undef GL_SGIX_convolution_accuracy
#define GL_SGIX_convolution_accuracy 788
#undef GL_SGIX_depth_pass_instrument
#define GL_SGIX_depth_pass_instrument 789
#undef GL_SGIX_depth_texture
#define GL_SGIX_depth_texture 790
#undef GL_SGIX_flush_raster
#define GL_SGIX_flush_raster 791
#undef GL_SGIX_fog_offset
#define GL_SGIX_fog_offset 792
#undef GL_SGIX_fragment_lighting
#define GL_SGIX_fragment_lighting 793
#undef GL_SGIX_framezoom
#define GL_SGIX_framezoom 794
#undef GL_SGIX_igloo_interface
#define GL_SGIX_igloo_interface 795
#undef GL_SGIX_instruments
#define GL_SGIX_instruments 796
#undef GL_SGIX_interlace
#define GL_SGIX_interlace 797
#undef GL_SGIX_ir_instrument1
#define GL_SGIX_ir_instrument1 798
#undef GL_SGIX_list_priority
#define GL_SGIX_list_priority 799
#undef GL_SGIX_pixel_texture
#define GL_SGIX_pixel_texture 800
#undef GL_SGIX_pixel_tiles
#define GL_SGIX_pixel_tiles 801
#undef GL_SGIX_polynomial_ffd
#define GL_SGIX_polynomial_ffd 802
#undef GL_SGIX_reference_plane
#define GL_SGIX_reference_plane 803
#undef GL_SGIX_resample
#define GL_SGIX_resample 804
#undef GL_SGIX_scalebias_hint
#define GL_SGIX_scalebias_hint 805
#undef GL_SGIX_shadow
#define GL_SGIX_shadow 806
#undef GL_SGIX_shadow_ambient
#define GL_SGIX_shadow_ambient 807
#undef GL_SGIX_sprite
#define GL_SGIX_sprite 808
#undef GL_SGIX_subsample
#define GL_SGIX_subsample 809
#undef GL_SGIX_tag_sample_buffer
#define GL_SGIX_tag_sample_buffer 810
#undef GL_SGIX_texture_add_env
#define GL_SGIX_texture_add_env 811
#undef GL_SGIX_texture_coordinate_clamp
#define GL_SGIX_texture_coordinate_clamp 812
#undef GL_SGIX_texture_lod_bias
#define GL_SGIX_texture_lod_bias 813
#undef GL_SGIX_texture_multi_buffer
#define GL_SGIX_texture_multi_buffer 814
#undef GL_SGIX_texture_scale_bias
#define GL_SGIX_texture_scale_bias 815
#undef GL_SGIX_vertex_preclip
#define GL_SGIX_vertex_preclip 816
#undef GL_SGIX_ycrcb
#define GL_SGIX_ycrcb 817
#undef GL_SGIX_ycrcb_subsample
#define GL_SGIX_ycrcb_subsample 818
#undef GL_SGIX_ycrcba
#define GL_SGIX_ycrcba 819
#undef GL_SGI_color_matrix
#define GL_SGI_color_matrix 820
#undef GL_SGI_color_table
#define GL_SGI_color_table 821
#undef GL_SGI_texture_color_table
#define GL_SGI_texture_color_table 822
#undef GL_SUNX_constant_data
#define GL_SUNX_constant_data 823
#undef GL_SUN_convolution_border_modes
#define GL_SUN_convolution_border_modes 824
#undef GL_SUN_global_alpha
#define GL_SUN_global_alpha 825
#undef GL_SUN_mesh_array
#define GL_SUN_mesh_array 826
#undef GL_SUN_slice_accum
#define GL_SUN_slice_accum 827
#undef GL_SUN_triangle_list
#define GL_SUN_triangle_list 828
#undef GL_SUN_vertex
#define GL_SUN_vertex 829
#undef GL_VIV_shader_binary
#define GL_VIV_shader_binary 830
#undef GL_WIN_phong_shading
#define GL_WIN_phong_shading 831
#undef GL_WIN_specular_fog
#define GL_WIN_specular_fog 832
#undef GL_EXT_Cg_shader
#define GL_EXT_Cg_shader 833
#undef GL_EXTX_framebuffer_mixed_formats
#define GL_EXTX_framebuffer_mixed_formats 834
#undef GL_EXT_texture_compression_dxt1
#define GL_EXT_texture_compression_dxt1 835
#undef GL_EXT_texture_edge_clamp
#define GL_EXT_texture_edge_clamp 836
#undef GL_EXT_texture_storage
#define GL_EXT_texture_storage 837
#undef GL_EXT_import_sync_object
#define GL_EXT_import_sync_object 838
#undef GL_KTX_buffer_region
#define GL_KTX_buffer_region 839
#undef GL_NV_ES1_1_compatibility
#define GL_NV_ES1_1_compatibility 840
#undef GL_NV_ES3_1_compatibility
#define GL_NV_ES3_1_compatibility 841
#undef GL_EXT_texture_lod
#define GL_EXT_texture_lod 842

#ifdef __cplusplus
extern "C" {
#endif

/*!
 * generic TunisGL Procedure signature
 */
typedef void(KHRONOS_APIENTRY*TunisGLProc)(void);

/*!
 * TunisGetProcAddress signature.
 */
typedef TunisGLProc (*TunisGLGetProcAddressFunc)(const char *);

/*!
 * TunisGetProcAddress function pointer used to wrangle all the GL and
 * GLES functions and extensions. Automatically points the a default
 * implementation, and can be overriden by the user if they need something
 * specific. Make sure that it is set before calling tunisGLInit()
 */
extern TunisGLGetProcAddressFunc tunisGLGetProcAddress;


/*!
 * User is required to call this function as soon as the GL context has been created.
 * Failing to calling this function will result in a crash.
 *
 * \return returns KHRONOS_TRUE if successful, KHRONOS_FALSE otherwise.
 */
khronos_int8_t tunisGLInit(void);

/*!
 * User should call this function as soon as the GL context is destroyed. It is not
 * mandatory, but is highly recommended. User can also opt to create anew GL context
 * and call tunisGLInit() instead.
 */
void tunisGLShutdown(void);

/*!
 * Utility to check if a specific OpenGL or OpenGL ES function or extension is supported and available.
 *
 * Usage example:
 *
 * \code
 * if(tunisGLSupport(GL_VERSION_3_0) || tunisGLSupport(GL_ES_VERSION_3_0))
 * {
 *     void *pMapped = glMapBufferRange(target, 0, buffer.size(), GL_MAP_WRITE_BIT | GL_MAP_INVALIDATE_BUFFER_BIT);
 *     std::copy(buffer.begin(), buffer.end(), pMapped);
 *        glUnmapBuffer(target);
 * }
 * else if (tunisGLSupport(GL_EXT_map_buffer_range) && tunisGLSupport(GL_OES_mapbuffer)
 * {
 *     void *pMapped = glMapBufferRangeEXT(target, 0, buffer.size(), GL_MAP_WRITE_BIT_EXT | GL_MAP_INVALIDATE_BUFFER_BIT_EXT);
 *     std::copy(buffer.begin(), buffer.end(), pMapped);
 *     glUnmapBufferOES(target);
 * }
 * else
 * {
 *     glBufferData(target, buffer.size(), reinterpret_cast<const GLvoid *>(&buffer[0]), usage);
 * }
 * \endcode
 *
 * \return returns KHRONOS_TRUE if successful, KHRONOS_FALSE otherwise.
 */
TUNIS_FORCE_INLINE khronos_int8_t tunisGLSupport(khronos_usize_t extensionID);

/*!
     Checks if a specific OpenGL or OpenGL ES command triggered an error.

     Usage example:

     \code
         // Only checks if compiled in debug.
         tunisGLCheckErrorDebug(glBindBuffer(handle));

         // checks for both debug and release.
         tunisGLCheckError(glBufferData(target, bufferSize, (const GLvoid *)pBuffer, GL_STATIC_DRAW));
     \endcode

     \note tunisGLCheckErrorDebug is disabled when the application is compiled for a release build.
     \warning calling glGetError can affect your rendering performance. We recommend
     using tunisGLCheckErrorDebug instead of tunisGLCheckError so that the production
     build won't be impacted. If you want to use tunisGLCheckError, make sure it is not called
     during time critical code path.
 */
void _tunisGLCheckError(const char* fileName, int lineNumber);
#if !defined(tunisGLCheckError)
    #define tunisGLCheckError(x) x; _tunisGLCheckError(__FILE__, __LINE__)
#endif
#if !defined(tunisGLCheckErrorDebug)
    #if !defined(NDEBUG)
        #define tunisGLCheckErrorDebug(x) x; _tunisGLCheckError(__FILE__, __LINE__)
    #else
        #define tunisGLCheckErrorDebug(x) x
    #endif
#endif

/* Type definitions */
#ifdef __APPLE__
typedef void *GLhandleARB;
#else
typedef khronos_uint32_t GLhandleARB;
#endif
typedef khronos_uint32_t GLenum;
typedef khronos_uint8_t GLboolean;
typedef khronos_uint32_t GLbitfield;
typedef void GLvoid;
typedef khronos_int8_t GLbyte;
typedef khronos_int16_t GLshort;
typedef khronos_int32_t GLint;
typedef khronos_int32_t GLclampx;
typedef khronos_uint8_t GLubyte;
typedef khronos_uint16_t GLushort;
typedef khronos_uint32_t GLuint;
typedef khronos_int32_t GLsizei;
typedef khronos_float_t GLfloat;
typedef khronos_float_t GLclampf;
typedef double GLdouble;
typedef double GLclampd;
typedef void *GLeglClientBufferEXT;
typedef void *GLeglImageOES;
typedef char GLchar;
typedef char GLcharARB;
typedef khronos_uint16_t GLhalfARB;
typedef khronos_uint16_t GLhalf;
typedef khronos_int32_t GLfixed;
typedef khronos_intptr_t GLintptr;
typedef khronos_ssize_t GLsizeiptr;
typedef khronos_int64_t GLint64;
typedef khronos_uint64_t GLuint64;
typedef khronos_intptr_t GLintptrARB;
typedef khronos_intptr_t GLsizeiptrARB;
typedef khronos_int64_t GLint64EXT;
typedef khronos_uint64_t GLuint64EXT;
typedef struct __GLsync *GLsync;
struct _cl_context;
struct _cl_event;
typedef void (KHRONOS_APIENTRY *GLDEBUGPROC)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar *message,const void *userParam);
typedef void (KHRONOS_APIENTRY *GLDEBUGPROCARB)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar *message,const void *userParam);
typedef void (KHRONOS_APIENTRY *GLDEBUGPROCKHR)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar *message,const void *userParam);
typedef void (KHRONOS_APIENTRY *GLDEBUGPROCAMD)(GLuint id,GLenum category,GLenum severity,GLsizei length,const GLchar *message,void *userParam);
typedef khronos_uint16_t GLhalfNV;
typedef GLintptr GLvdpauSurfaceNV;
typedef void (KHRONOS_APIENTRY *GLVULKANPROCNV)(void);


typedef struct TunisGLConfig
{
    khronos_int8_t support[843];

    void (KHRONOS_APIENTRY * tunisAccum)(GLenum, GLfloat);
    void (KHRONOS_APIENTRY * tunisAccumxOES)(GLenum, GLfixed);
    GLboolean(KHRONOS_APIENTRY * tunisAcquireKeyedMutexWin32EXT)(GLuint, GLuint64, GLuint);
    void (KHRONOS_APIENTRY * tunisActiveProgramEXT)(GLuint);
    void (KHRONOS_APIENTRY * tunisActiveShaderProgram)(GLuint, GLuint);
    void (KHRONOS_APIENTRY * tunisActiveShaderProgramEXT)(GLuint, GLuint);
    void (KHRONOS_APIENTRY * tunisActiveStencilFaceEXT)(GLenum);
    void (KHRONOS_APIENTRY * tunisActiveTexture)(GLenum);
    void (KHRONOS_APIENTRY * tunisActiveTextureARB)(GLenum);
    void (KHRONOS_APIENTRY * tunisActiveVaryingNV)(GLuint, const GLchar *);
    void (KHRONOS_APIENTRY * tunisAlphaFragmentOp1ATI)(GLenum, GLuint, GLuint, GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY * tunisAlphaFragmentOp2ATI)(GLenum, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY * tunisAlphaFragmentOp3ATI)(GLenum, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY * tunisAlphaFunc)(GLenum, GLfloat);
    void (KHRONOS_APIENTRY * tunisAlphaFuncQCOM)(GLenum, GLclampf);
    void (KHRONOS_APIENTRY * tunisAlphaFuncx)(GLenum, GLfixed);
    void (KHRONOS_APIENTRY * tunisAlphaFuncxOES)(GLenum, GLfixed);
    void (KHRONOS_APIENTRY * tunisAlphaToCoverageDitherControlNV)(GLenum);
    void (KHRONOS_APIENTRY * tunisApplyFramebufferAttachmentCMAAINTEL)(void);
    void (KHRONOS_APIENTRY * tunisApplyTextureEXT)(GLenum);
    GLboolean(KHRONOS_APIENTRY * tunisAreProgramsResidentNV)(GLsizei, const GLuint *, GLboolean *);
    GLboolean(KHRONOS_APIENTRY * tunisAreTexturesResident)(GLsizei, const GLuint *, GLboolean *);
    GLboolean(KHRONOS_APIENTRY * tunisAreTexturesResidentEXT)(GLsizei, const GLuint *, GLboolean *);
    void (KHRONOS_APIENTRY * tunisArrayElement)(GLint);
    void (KHRONOS_APIENTRY * tunisArrayElementEXT)(GLint);
    void (KHRONOS_APIENTRY * tunisArrayObjectATI)(GLenum, GLint, GLenum, GLsizei, GLuint, GLuint);
    void (KHRONOS_APIENTRY * tunisAsyncMarkerSGIX)(GLuint);
    void (KHRONOS_APIENTRY * tunisAttachObjectARB)(GLhandleARB, GLhandleARB);
    void (KHRONOS_APIENTRY * tunisAttachShader)(GLuint, GLuint);
    void (KHRONOS_APIENTRY * tunisBegin)(GLenum);
    void (KHRONOS_APIENTRY * tunisBeginConditionalRender)(GLuint, GLenum);
    void (KHRONOS_APIENTRY * tunisBeginConditionalRenderNV)(GLuint, GLenum);
    void (KHRONOS_APIENTRY * tunisBeginConditionalRenderNVX)(GLuint);
    void (KHRONOS_APIENTRY * tunisBeginFragmentShaderATI)(void);
    void (KHRONOS_APIENTRY * tunisBeginOcclusionQueryNV)(GLuint);
    void (KHRONOS_APIENTRY * tunisBeginPerfMonitorAMD)(GLuint);
    void (KHRONOS_APIENTRY * tunisBeginPerfQueryINTEL)(GLuint);
    void (KHRONOS_APIENTRY * tunisBeginQuery)(GLenum, GLuint);
    void (KHRONOS_APIENTRY * tunisBeginQueryARB)(GLenum, GLuint);
    void (KHRONOS_APIENTRY * tunisBeginQueryEXT)(GLenum, GLuint);
    void (KHRONOS_APIENTRY * tunisBeginQueryIndexed)(GLenum, GLuint, GLuint);
    void (KHRONOS_APIENTRY * tunisBeginTransformFeedback)(GLenum);
    void (KHRONOS_APIENTRY * tunisBeginTransformFeedbackEXT)(GLenum);
    void (KHRONOS_APIENTRY * tunisBeginTransformFeedbackNV)(GLenum);
    void (KHRONOS_APIENTRY * tunisBeginVertexShaderEXT)(void);
    void (KHRONOS_APIENTRY * tunisBeginVideoCaptureNV)(GLuint);
    void (KHRONOS_APIENTRY * tunisBindAttribLocation)(GLuint, GLuint, const GLchar *);
    void (KHRONOS_APIENTRY * tunisBindAttribLocationARB)(GLhandleARB, GLuint, const GLcharARB *);
    void (KHRONOS_APIENTRY * tunisBindBuffer)(GLenum, GLuint);
    void (KHRONOS_APIENTRY * tunisBindBufferARB)(GLenum, GLuint);
    void (KHRONOS_APIENTRY * tunisBindBufferBase)(GLenum, GLuint, GLuint);
    void (KHRONOS_APIENTRY * tunisBindBufferBaseEXT)(GLenum, GLuint, GLuint);
    void (KHRONOS_APIENTRY * tunisBindBufferBaseNV)(GLenum, GLuint, GLuint);
    void (KHRONOS_APIENTRY * tunisBindBufferOffsetEXT)(GLenum, GLuint, GLuint, GLintptr);
    void (KHRONOS_APIENTRY * tunisBindBufferOffsetNV)(GLenum, GLuint, GLuint, GLintptr);
    void (KHRONOS_APIENTRY * tunisBindBufferRange)(GLenum, GLuint, GLuint, GLintptr, GLsizeiptr);
    void (KHRONOS_APIENTRY * tunisBindBufferRangeEXT)(GLenum, GLuint, GLuint, GLintptr, GLsizeiptr);
    void (KHRONOS_APIENTRY * tunisBindBufferRangeNV)(GLenum, GLuint, GLuint, GLintptr, GLsizeiptr);
    void (KHRONOS_APIENTRY * tunisBindBuffersBase)(GLenum, GLuint, GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY * tunisBindBuffersRange)(GLenum, GLuint, GLsizei, const GLuint *, const GLintptr *, const GLsizeiptr *);
    void (KHRONOS_APIENTRY * tunisBindFragDataLocation)(GLuint, GLuint, const GLchar *);
    void (KHRONOS_APIENTRY * tunisBindFragDataLocationEXT)(GLuint, GLuint, const GLchar *);
    void (KHRONOS_APIENTRY * tunisBindFragDataLocationIndexed)(GLuint, GLuint, GLuint, const GLchar *);
    void (KHRONOS_APIENTRY * tunisBindFragDataLocationIndexedEXT)(GLuint, GLuint, GLuint, const GLchar *);
    void (KHRONOS_APIENTRY * tunisBindFragmentShaderATI)(GLuint);
    void (KHRONOS_APIENTRY * tunisBindFramebuffer)(GLenum, GLuint);
    void (KHRONOS_APIENTRY * tunisBindFramebufferEXT)(GLenum, GLuint);
    void (KHRONOS_APIENTRY * tunisBindFramebufferOES)(GLenum, GLuint);
    void (KHRONOS_APIENTRY * tunisBindImageTexture)(GLuint, GLuint, GLint, GLboolean, GLint, GLenum, GLenum);
    void (KHRONOS_APIENTRY * tunisBindImageTextureEXT)(GLuint, GLuint, GLint, GLboolean, GLint, GLenum, GLint);
    void (KHRONOS_APIENTRY * tunisBindImageTextures)(GLuint, GLsizei, const GLuint *);
    GLuint(KHRONOS_APIENTRY * tunisBindLightParameterEXT)(GLenum, GLenum);
    GLuint(KHRONOS_APIENTRY * tunisBindMaterialParameterEXT)(GLenum, GLenum);
    void (KHRONOS_APIENTRY * tunisBindMultiTextureEXT)(GLenum, GLenum, GLuint);
    GLuint(KHRONOS_APIENTRY * tunisBindParameterEXT)(GLenum);
    void (KHRONOS_APIENTRY * tunisBindProgramARB)(GLenum, GLuint);
    void (KHRONOS_APIENTRY * tunisBindProgramNV)(GLenum, GLuint);
    void (KHRONOS_APIENTRY * tunisBindProgramPipeline)(GLuint);
    void (KHRONOS_APIENTRY * tunisBindProgramPipelineEXT)(GLuint);
    void (KHRONOS_APIENTRY * tunisBindRenderbuffer)(GLenum, GLuint);
    void (KHRONOS_APIENTRY * tunisBindRenderbufferEXT)(GLenum, GLuint);
    void (KHRONOS_APIENTRY * tunisBindRenderbufferOES)(GLenum, GLuint);
    void (KHRONOS_APIENTRY * tunisBindSampler)(GLuint, GLuint);
    void (KHRONOS_APIENTRY * tunisBindSamplers)(GLuint, GLsizei, const GLuint *);
    GLuint(KHRONOS_APIENTRY * tunisBindTexGenParameterEXT)(GLenum, GLenum, GLenum);
    void (KHRONOS_APIENTRY * tunisBindTexture)(GLenum, GLuint);
    void (KHRONOS_APIENTRY * tunisBindTextureEXT)(GLenum, GLuint);
    void (KHRONOS_APIENTRY * tunisBindTextureUnit)(GLuint, GLuint);
    GLuint(KHRONOS_APIENTRY * tunisBindTextureUnitParameterEXT)(GLenum, GLenum);
    void (KHRONOS_APIENTRY * tunisBindTextures)(GLuint, GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY * tunisBindTransformFeedback)(GLenum, GLuint);
    void (KHRONOS_APIENTRY * tunisBindTransformFeedbackNV)(GLenum, GLuint);
    void (KHRONOS_APIENTRY * tunisBindVertexArray)(GLuint);
    void (KHRONOS_APIENTRY * tunisBindVertexArrayAPPLE)(GLuint);
    void (KHRONOS_APIENTRY * tunisBindVertexArrayOES)(GLuint);
    void (KHRONOS_APIENTRY * tunisBindVertexBuffer)(GLuint, GLuint, GLintptr, GLsizei);
    void (KHRONOS_APIENTRY * tunisBindVertexBuffers)(GLuint, GLsizei, const GLuint *, const GLintptr *, const GLsizei *);
    void (KHRONOS_APIENTRY * tunisBindVertexShaderEXT)(GLuint);
    void (KHRONOS_APIENTRY * tunisBindVideoCaptureStreamBufferNV)(GLuint, GLuint, GLenum, GLintptrARB);
    void (KHRONOS_APIENTRY * tunisBindVideoCaptureStreamTextureNV)(GLuint, GLuint, GLenum, GLenum, GLuint);
    void (KHRONOS_APIENTRY * tunisBinormal3bEXT)(GLbyte, GLbyte, GLbyte);
    void (KHRONOS_APIENTRY * tunisBinormal3bvEXT)(const GLbyte *);
    void (KHRONOS_APIENTRY * tunisBinormal3dEXT)(GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * tunisBinormal3dvEXT)(const GLdouble *);
    void (KHRONOS_APIENTRY * tunisBinormal3fEXT)(GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisBinormal3fvEXT)(const GLfloat *);
    void (KHRONOS_APIENTRY * tunisBinormal3iEXT)(GLint, GLint, GLint);
    void (KHRONOS_APIENTRY * tunisBinormal3ivEXT)(const GLint *);
    void (KHRONOS_APIENTRY * tunisBinormal3sEXT)(GLshort, GLshort, GLshort);
    void (KHRONOS_APIENTRY * tunisBinormal3svEXT)(const GLshort *);
    void (KHRONOS_APIENTRY * tunisBinormalPointerEXT)(GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY * tunisBitmap)(GLsizei, GLsizei, GLfloat, GLfloat, GLfloat, GLfloat, const GLubyte *);
    void (KHRONOS_APIENTRY * tunisBitmapxOES)(GLsizei, GLsizei, GLfixed, GLfixed, GLfixed, GLfixed, const GLubyte *);
    void (KHRONOS_APIENTRY * tunisBlendBarrier)(void);
    void (KHRONOS_APIENTRY * tunisBlendBarrierKHR)(void);
    void (KHRONOS_APIENTRY * tunisBlendBarrierNV)(void);
    void (KHRONOS_APIENTRY * tunisBlendColor)(GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisBlendColorEXT)(GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisBlendColorxOES)(GLfixed, GLfixed, GLfixed, GLfixed);
    void (KHRONOS_APIENTRY * tunisBlendEquation)(GLenum);
    void (KHRONOS_APIENTRY * tunisBlendEquationEXT)(GLenum);
    void (KHRONOS_APIENTRY * tunisBlendEquationIndexedAMD)(GLuint, GLenum);
    void (KHRONOS_APIENTRY * tunisBlendEquationOES)(GLenum);
    void (KHRONOS_APIENTRY * tunisBlendEquationSeparate)(GLenum, GLenum);
    void (KHRONOS_APIENTRY * tunisBlendEquationSeparateEXT)(GLenum, GLenum);
    void (KHRONOS_APIENTRY * tunisBlendEquationSeparateIndexedAMD)(GLuint, GLenum, GLenum);
    void (KHRONOS_APIENTRY * tunisBlendEquationSeparateOES)(GLenum, GLenum);
    void (KHRONOS_APIENTRY * tunisBlendEquationSeparatei)(GLuint, GLenum, GLenum);
    void (KHRONOS_APIENTRY * tunisBlendEquationSeparateiARB)(GLuint, GLenum, GLenum);
    void (KHRONOS_APIENTRY * tunisBlendEquationSeparateiEXT)(GLuint, GLenum, GLenum);
    void (KHRONOS_APIENTRY * tunisBlendEquationSeparateiOES)(GLuint, GLenum, GLenum);
    void (KHRONOS_APIENTRY * tunisBlendEquationi)(GLuint, GLenum);
    void (KHRONOS_APIENTRY * tunisBlendEquationiARB)(GLuint, GLenum);
    void (KHRONOS_APIENTRY * tunisBlendEquationiEXT)(GLuint, GLenum);
    void (KHRONOS_APIENTRY * tunisBlendEquationiOES)(GLuint, GLenum);
    void (KHRONOS_APIENTRY * tunisBlendFunc)(GLenum, GLenum);
    void (KHRONOS_APIENTRY * tunisBlendFuncIndexedAMD)(GLuint, GLenum, GLenum);
    void (KHRONOS_APIENTRY * tunisBlendFuncSeparate)(GLenum, GLenum, GLenum, GLenum);
    void (KHRONOS_APIENTRY * tunisBlendFuncSeparateEXT)(GLenum, GLenum, GLenum, GLenum);
    void (KHRONOS_APIENTRY * tunisBlendFuncSeparateINGR)(GLenum, GLenum, GLenum, GLenum);
    void (KHRONOS_APIENTRY * tunisBlendFuncSeparateIndexedAMD)(GLuint, GLenum, GLenum, GLenum, GLenum);
    void (KHRONOS_APIENTRY * tunisBlendFuncSeparateOES)(GLenum, GLenum, GLenum, GLenum);
    void (KHRONOS_APIENTRY * tunisBlendFuncSeparatei)(GLuint, GLenum, GLenum, GLenum, GLenum);
    void (KHRONOS_APIENTRY * tunisBlendFuncSeparateiARB)(GLuint, GLenum, GLenum, GLenum, GLenum);
    void (KHRONOS_APIENTRY * tunisBlendFuncSeparateiEXT)(GLuint, GLenum, GLenum, GLenum, GLenum);
    void (KHRONOS_APIENTRY * tunisBlendFuncSeparateiOES)(GLuint, GLenum, GLenum, GLenum, GLenum);
    void (KHRONOS_APIENTRY * tunisBlendFunci)(GLuint, GLenum, GLenum);
    void (KHRONOS_APIENTRY * tunisBlendFunciARB)(GLuint, GLenum, GLenum);
    void (KHRONOS_APIENTRY * tunisBlendFunciEXT)(GLuint, GLenum, GLenum);
    void (KHRONOS_APIENTRY * tunisBlendFunciOES)(GLuint, GLenum, GLenum);
    void (KHRONOS_APIENTRY * tunisBlendParameteriNV)(GLenum, GLint);
    void (KHRONOS_APIENTRY * tunisBlitFramebuffer)(GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLbitfield, GLenum);
    void (KHRONOS_APIENTRY * tunisBlitFramebufferANGLE)(GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLbitfield, GLenum);
    void (KHRONOS_APIENTRY * tunisBlitFramebufferEXT)(GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLbitfield, GLenum);
    void (KHRONOS_APIENTRY * tunisBlitFramebufferNV)(GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLbitfield, GLenum);
    void (KHRONOS_APIENTRY * tunisBlitNamedFramebuffer)(GLuint, GLuint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLbitfield, GLenum);
    void (KHRONOS_APIENTRY * tunisBufferAddressRangeNV)(GLenum, GLuint, GLuint64EXT, GLsizeiptr);
    void (KHRONOS_APIENTRY * tunisBufferData)(GLenum, GLsizeiptr, const void *, GLenum);
    void (KHRONOS_APIENTRY * tunisBufferDataARB)(GLenum, GLsizeiptrARB, const void *, GLenum);
    void (KHRONOS_APIENTRY * tunisBufferPageCommitmentARB)(GLenum, GLintptr, GLsizeiptr, GLboolean);
    void (KHRONOS_APIENTRY * tunisBufferParameteriAPPLE)(GLenum, GLenum, GLint);
    GLuint(KHRONOS_APIENTRY * tunisBufferRegionEnabled)(void);
    void (KHRONOS_APIENTRY * tunisBufferStorage)(GLenum, GLsizeiptr, const void *, GLbitfield);
    void (KHRONOS_APIENTRY * tunisBufferStorageEXT)(GLenum, GLsizeiptr, const void *, GLbitfield);
    void (KHRONOS_APIENTRY * tunisBufferStorageExternalEXT)(GLenum, GLintptr, GLsizeiptr, GLeglClientBufferEXT, GLbitfield);
    void (KHRONOS_APIENTRY * tunisBufferStorageMemEXT)(GLenum, GLsizeiptr, GLuint, GLuint64);
    void (KHRONOS_APIENTRY * tunisBufferSubData)(GLenum, GLintptr, GLsizeiptr, const void *);
    void (KHRONOS_APIENTRY * tunisBufferSubDataARB)(GLenum, GLintptrARB, GLsizeiptrARB, const void *);
    void (KHRONOS_APIENTRY * tunisCallCommandListNV)(GLuint);
    void (KHRONOS_APIENTRY * tunisCallList)(GLuint);
    void (KHRONOS_APIENTRY * tunisCallLists)(GLsizei, GLenum, const void *);
    GLenum(KHRONOS_APIENTRY * tunisCheckFramebufferStatus)(GLenum);
    GLenum(KHRONOS_APIENTRY * tunisCheckFramebufferStatusEXT)(GLenum);
    GLenum(KHRONOS_APIENTRY * tunisCheckFramebufferStatusOES)(GLenum);
    GLenum(KHRONOS_APIENTRY * tunisCheckNamedFramebufferStatus)(GLuint, GLenum);
    GLenum(KHRONOS_APIENTRY * tunisCheckNamedFramebufferStatusEXT)(GLuint, GLenum);
    void (KHRONOS_APIENTRY * tunisClampColor)(GLenum, GLenum);
    void (KHRONOS_APIENTRY * tunisClampColorARB)(GLenum, GLenum);
    void (KHRONOS_APIENTRY * tunisClear)(GLbitfield);
    void (KHRONOS_APIENTRY * tunisClearAccum)(GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisClearAccumxOES)(GLfixed, GLfixed, GLfixed, GLfixed);
    void (KHRONOS_APIENTRY * tunisClearBufferData)(GLenum, GLenum, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY * tunisClearBufferSubData)(GLenum, GLenum, GLintptr, GLsizeiptr, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY * tunisClearBufferfi)(GLenum, GLint, GLfloat, GLint);
    void (KHRONOS_APIENTRY * tunisClearBufferfv)(GLenum, GLint, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisClearBufferiv)(GLenum, GLint, const GLint *);
    void (KHRONOS_APIENTRY * tunisClearBufferuiv)(GLenum, GLint, const GLuint *);
    void (KHRONOS_APIENTRY * tunisClearColor)(GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisClearColorIiEXT)(GLint, GLint, GLint, GLint);
    void (KHRONOS_APIENTRY * tunisClearColorIuiEXT)(GLuint, GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY * tunisClearColorx)(GLfixed, GLfixed, GLfixed, GLfixed);
    void (KHRONOS_APIENTRY * tunisClearColorxOES)(GLfixed, GLfixed, GLfixed, GLfixed);
    void (KHRONOS_APIENTRY * tunisClearDepth)(GLdouble);
    void (KHRONOS_APIENTRY * tunisClearDepthdNV)(GLdouble);
    void (KHRONOS_APIENTRY * tunisClearDepthf)(GLfloat);
    void (KHRONOS_APIENTRY * tunisClearDepthfOES)(GLclampf);
    void (KHRONOS_APIENTRY * tunisClearDepthx)(GLfixed);
    void (KHRONOS_APIENTRY * tunisClearDepthxOES)(GLfixed);
    void (KHRONOS_APIENTRY * tunisClearIndex)(GLfloat);
    void (KHRONOS_APIENTRY * tunisClearNamedBufferData)(GLuint, GLenum, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY * tunisClearNamedBufferDataEXT)(GLuint, GLenum, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY * tunisClearNamedBufferSubData)(GLuint, GLenum, GLintptr, GLsizeiptr, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY * tunisClearNamedBufferSubDataEXT)(GLuint, GLenum, GLsizeiptr, GLsizeiptr, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY * tunisClearNamedFramebufferfi)(GLuint, GLenum, GLint, GLfloat, GLint);
    void (KHRONOS_APIENTRY * tunisClearNamedFramebufferfv)(GLuint, GLenum, GLint, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisClearNamedFramebufferiv)(GLuint, GLenum, GLint, const GLint *);
    void (KHRONOS_APIENTRY * tunisClearNamedFramebufferuiv)(GLuint, GLenum, GLint, const GLuint *);
    void (KHRONOS_APIENTRY * tunisClearPixelLocalStorageuiEXT)(GLsizei, GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY * tunisClearStencil)(GLint);
    void (KHRONOS_APIENTRY * tunisClearTexImage)(GLuint, GLint, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY * tunisClearTexImageEXT)(GLuint, GLint, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY * tunisClearTexSubImage)(GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY * tunisClearTexSubImageEXT)(GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY * tunisClientActiveTexture)(GLenum);
    void (KHRONOS_APIENTRY * tunisClientActiveTextureARB)(GLenum);
    void (KHRONOS_APIENTRY * tunisClientActiveVertexStreamATI)(GLenum);
    void (KHRONOS_APIENTRY * tunisClientAttribDefaultEXT)(GLbitfield);
    GLenum(KHRONOS_APIENTRY * tunisClientWaitSync)(GLsync, GLbitfield, GLuint64);
    GLenum(KHRONOS_APIENTRY * tunisClientWaitSyncAPPLE)(GLsync, GLbitfield, GLuint64);
    void (KHRONOS_APIENTRY * tunisClipControl)(GLenum, GLenum);
    void (KHRONOS_APIENTRY * tunisClipControlEXT)(GLenum, GLenum);
    void (KHRONOS_APIENTRY * tunisClipPlane)(GLenum, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisClipPlanef)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisClipPlanefIMG)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisClipPlanefOES)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisClipPlanex)(GLenum, const GLfixed *);
    void (KHRONOS_APIENTRY * tunisClipPlanexIMG)(GLenum, const GLfixed *);
    void (KHRONOS_APIENTRY * tunisClipPlanexOES)(GLenum, const GLfixed *);
    void (KHRONOS_APIENTRY * tunisColor3b)(GLbyte, GLbyte, GLbyte);
    void (KHRONOS_APIENTRY * tunisColor3bv)(const GLbyte *);
    void (KHRONOS_APIENTRY * tunisColor3d)(GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * tunisColor3dv)(const GLdouble *);
    void (KHRONOS_APIENTRY * tunisColor3f)(GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisColor3fVertex3fSUN)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisColor3fVertex3fvSUN)(const GLfloat *, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisColor3fv)(const GLfloat *);
    void (KHRONOS_APIENTRY * tunisColor3hNV)(GLhalfNV, GLhalfNV, GLhalfNV);
    void (KHRONOS_APIENTRY * tunisColor3hvNV)(const GLhalfNV *);
    void (KHRONOS_APIENTRY * tunisColor3i)(GLint, GLint, GLint);
    void (KHRONOS_APIENTRY * tunisColor3iv)(const GLint *);
    void (KHRONOS_APIENTRY * tunisColor3s)(GLshort, GLshort, GLshort);
    void (KHRONOS_APIENTRY * tunisColor3sv)(const GLshort *);
    void (KHRONOS_APIENTRY * tunisColor3ub)(GLubyte, GLubyte, GLubyte);
    void (KHRONOS_APIENTRY * tunisColor3ubv)(const GLubyte *);
    void (KHRONOS_APIENTRY * tunisColor3ui)(GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY * tunisColor3uiv)(const GLuint *);
    void (KHRONOS_APIENTRY * tunisColor3us)(GLushort, GLushort, GLushort);
    void (KHRONOS_APIENTRY * tunisColor3usv)(const GLushort *);
    void (KHRONOS_APIENTRY * tunisColor3xOES)(GLfixed, GLfixed, GLfixed);
    void (KHRONOS_APIENTRY * tunisColor3xvOES)(const GLfixed *);
    void (KHRONOS_APIENTRY * tunisColor4b)(GLbyte, GLbyte, GLbyte, GLbyte);
    void (KHRONOS_APIENTRY * tunisColor4bv)(const GLbyte *);
    void (KHRONOS_APIENTRY * tunisColor4d)(GLdouble, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * tunisColor4dv)(const GLdouble *);
    void (KHRONOS_APIENTRY * tunisColor4f)(GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisColor4fNormal3fVertex3fSUN)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisColor4fNormal3fVertex3fvSUN)(const GLfloat *, const GLfloat *, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisColor4fv)(const GLfloat *);
    void (KHRONOS_APIENTRY * tunisColor4hNV)(GLhalfNV, GLhalfNV, GLhalfNV, GLhalfNV);
    void (KHRONOS_APIENTRY * tunisColor4hvNV)(const GLhalfNV *);
    void (KHRONOS_APIENTRY * tunisColor4i)(GLint, GLint, GLint, GLint);
    void (KHRONOS_APIENTRY * tunisColor4iv)(const GLint *);
    void (KHRONOS_APIENTRY * tunisColor4s)(GLshort, GLshort, GLshort, GLshort);
    void (KHRONOS_APIENTRY * tunisColor4sv)(const GLshort *);
    void (KHRONOS_APIENTRY * tunisColor4ub)(GLubyte, GLubyte, GLubyte, GLubyte);
    void (KHRONOS_APIENTRY * tunisColor4ubVertex2fSUN)(GLubyte, GLubyte, GLubyte, GLubyte, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisColor4ubVertex2fvSUN)(const GLubyte *, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisColor4ubVertex3fSUN)(GLubyte, GLubyte, GLubyte, GLubyte, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisColor4ubVertex3fvSUN)(const GLubyte *, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisColor4ubv)(const GLubyte *);
    void (KHRONOS_APIENTRY * tunisColor4ui)(GLuint, GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY * tunisColor4uiv)(const GLuint *);
    void (KHRONOS_APIENTRY * tunisColor4us)(GLushort, GLushort, GLushort, GLushort);
    void (KHRONOS_APIENTRY * tunisColor4usv)(const GLushort *);
    void (KHRONOS_APIENTRY * tunisColor4x)(GLfixed, GLfixed, GLfixed, GLfixed);
    void (KHRONOS_APIENTRY * tunisColor4xOES)(GLfixed, GLfixed, GLfixed, GLfixed);
    void (KHRONOS_APIENTRY * tunisColor4xvOES)(const GLfixed *);
    void (KHRONOS_APIENTRY * tunisColorFormatNV)(GLint, GLenum, GLsizei);
    void (KHRONOS_APIENTRY * tunisColorFragmentOp1ATI)(GLenum, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY * tunisColorFragmentOp2ATI)(GLenum, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY * tunisColorFragmentOp3ATI)(GLenum, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY * tunisColorMask)(GLboolean, GLboolean, GLboolean, GLboolean);
    void (KHRONOS_APIENTRY * tunisColorMaskIndexedEXT)(GLuint, GLboolean, GLboolean, GLboolean, GLboolean);
    void (KHRONOS_APIENTRY * tunisColorMaski)(GLuint, GLboolean, GLboolean, GLboolean, GLboolean);
    void (KHRONOS_APIENTRY * tunisColorMaskiEXT)(GLuint, GLboolean, GLboolean, GLboolean, GLboolean);
    void (KHRONOS_APIENTRY * tunisColorMaskiOES)(GLuint, GLboolean, GLboolean, GLboolean, GLboolean);
    void (KHRONOS_APIENTRY * tunisColorMaterial)(GLenum, GLenum);
    void (KHRONOS_APIENTRY * tunisColorP3ui)(GLenum, GLuint);
    void (KHRONOS_APIENTRY * tunisColorP3uiv)(GLenum, const GLuint *);
    void (KHRONOS_APIENTRY * tunisColorP4ui)(GLenum, GLuint);
    void (KHRONOS_APIENTRY * tunisColorP4uiv)(GLenum, const GLuint *);
    void (KHRONOS_APIENTRY * tunisColorPointer)(GLint, GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY * tunisColorPointerEXT)(GLint, GLenum, GLsizei, GLsizei, const void *);
    void (KHRONOS_APIENTRY * tunisColorPointerListIBM)(GLint, GLenum, GLint, const void **, GLint);
    void (KHRONOS_APIENTRY * tunisColorPointervINTEL)(GLint, GLenum, const void **);
    void (KHRONOS_APIENTRY * tunisColorSubTable)(GLenum, GLsizei, GLsizei, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY * tunisColorSubTableEXT)(GLenum, GLsizei, GLsizei, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY * tunisColorTable)(GLenum, GLenum, GLsizei, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY * tunisColorTableEXT)(GLenum, GLenum, GLsizei, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY * tunisColorTableParameterfv)(GLenum, GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisColorTableParameterfvSGI)(GLenum, GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisColorTableParameteriv)(GLenum, GLenum, const GLint *);
    void (KHRONOS_APIENTRY * tunisColorTableParameterivSGI)(GLenum, GLenum, const GLint *);
    void (KHRONOS_APIENTRY * tunisColorTableSGI)(GLenum, GLenum, GLsizei, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY * tunisCombinerInputNV)(GLenum, GLenum, GLenum, GLenum, GLenum, GLenum);
    void (KHRONOS_APIENTRY * tunisCombinerOutputNV)(GLenum, GLenum, GLenum, GLenum, GLenum, GLenum, GLenum, GLboolean, GLboolean, GLboolean);
    void (KHRONOS_APIENTRY * tunisCombinerParameterfNV)(GLenum, GLfloat);
    void (KHRONOS_APIENTRY * tunisCombinerParameterfvNV)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisCombinerParameteriNV)(GLenum, GLint);
    void (KHRONOS_APIENTRY * tunisCombinerParameterivNV)(GLenum, const GLint *);
    void (KHRONOS_APIENTRY * tunisCombinerStageParameterfvNV)(GLenum, GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisCommandListSegmentsNV)(GLuint, GLuint);
    void (KHRONOS_APIENTRY * tunisCompileCommandListNV)(GLuint);
    void (KHRONOS_APIENTRY * tunisCompileShader)(GLuint);
    void (KHRONOS_APIENTRY * tunisCompileShaderARB)(GLhandleARB);
    void (KHRONOS_APIENTRY * tunisCompileShaderIncludeARB)(GLuint, GLsizei, const GLchar *const*, const GLint *);
    void (KHRONOS_APIENTRY * tunisCompressedMultiTexImage1DEXT)(GLenum, GLenum, GLint, GLenum, GLsizei, GLint, GLsizei, const void *);
    void (KHRONOS_APIENTRY * tunisCompressedMultiTexImage2DEXT)(GLenum, GLenum, GLint, GLenum, GLsizei, GLsizei, GLint, GLsizei, const void *);
    void (KHRONOS_APIENTRY * tunisCompressedMultiTexImage3DEXT)(GLenum, GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLsizei, const void *);
    void (KHRONOS_APIENTRY * tunisCompressedMultiTexSubImage1DEXT)(GLenum, GLenum, GLint, GLint, GLsizei, GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY * tunisCompressedMultiTexSubImage2DEXT)(GLenum, GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY * tunisCompressedMultiTexSubImage3DEXT)(GLenum, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY * tunisCompressedTexImage1D)(GLenum, GLint, GLenum, GLsizei, GLint, GLsizei, const void *);
    void (KHRONOS_APIENTRY * tunisCompressedTexImage1DARB)(GLenum, GLint, GLenum, GLsizei, GLint, GLsizei, const void *);
    void (KHRONOS_APIENTRY * tunisCompressedTexImage2D)(GLenum, GLint, GLenum, GLsizei, GLsizei, GLint, GLsizei, const void *);
    void (KHRONOS_APIENTRY * tunisCompressedTexImage2DARB)(GLenum, GLint, GLenum, GLsizei, GLsizei, GLint, GLsizei, const void *);
    void (KHRONOS_APIENTRY * tunisCompressedTexImage3D)(GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLsizei, const void *);
    void (KHRONOS_APIENTRY * tunisCompressedTexImage3DARB)(GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLsizei, const void *);
    void (KHRONOS_APIENTRY * tunisCompressedTexImage3DOES)(GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLsizei, const void *);
    void (KHRONOS_APIENTRY * tunisCompressedTexSubImage1D)(GLenum, GLint, GLint, GLsizei, GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY * tunisCompressedTexSubImage1DARB)(GLenum, GLint, GLint, GLsizei, GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY * tunisCompressedTexSubImage2D)(GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY * tunisCompressedTexSubImage2DARB)(GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY * tunisCompressedTexSubImage3D)(GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY * tunisCompressedTexSubImage3DARB)(GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY * tunisCompressedTexSubImage3DOES)(GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY * tunisCompressedTextureImage1DEXT)(GLuint, GLenum, GLint, GLenum, GLsizei, GLint, GLsizei, const void *);
    void (KHRONOS_APIENTRY * tunisCompressedTextureImage2DEXT)(GLuint, GLenum, GLint, GLenum, GLsizei, GLsizei, GLint, GLsizei, const void *);
    void (KHRONOS_APIENTRY * tunisCompressedTextureImage3DEXT)(GLuint, GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLsizei, const void *);
    void (KHRONOS_APIENTRY * tunisCompressedTextureSubImage1D)(GLuint, GLint, GLint, GLsizei, GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY * tunisCompressedTextureSubImage1DEXT)(GLuint, GLenum, GLint, GLint, GLsizei, GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY * tunisCompressedTextureSubImage2D)(GLuint, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY * tunisCompressedTextureSubImage2DEXT)(GLuint, GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY * tunisCompressedTextureSubImage3D)(GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY * tunisCompressedTextureSubImage3DEXT)(GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY * tunisConservativeRasterParameterfNV)(GLenum, GLfloat);
    void (KHRONOS_APIENTRY * tunisConservativeRasterParameteriNV)(GLenum, GLint);
    void (KHRONOS_APIENTRY * tunisConvolutionFilter1D)(GLenum, GLenum, GLsizei, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY * tunisConvolutionFilter1DEXT)(GLenum, GLenum, GLsizei, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY * tunisConvolutionFilter2D)(GLenum, GLenum, GLsizei, GLsizei, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY * tunisConvolutionFilter2DEXT)(GLenum, GLenum, GLsizei, GLsizei, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY * tunisConvolutionParameterf)(GLenum, GLenum, GLfloat);
    void (KHRONOS_APIENTRY * tunisConvolutionParameterfEXT)(GLenum, GLenum, GLfloat);
    void (KHRONOS_APIENTRY * tunisConvolutionParameterfv)(GLenum, GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisConvolutionParameterfvEXT)(GLenum, GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisConvolutionParameteri)(GLenum, GLenum, GLint);
    void (KHRONOS_APIENTRY * tunisConvolutionParameteriEXT)(GLenum, GLenum, GLint);
    void (KHRONOS_APIENTRY * tunisConvolutionParameteriv)(GLenum, GLenum, const GLint *);
    void (KHRONOS_APIENTRY * tunisConvolutionParameterivEXT)(GLenum, GLenum, const GLint *);
    void (KHRONOS_APIENTRY * tunisConvolutionParameterxOES)(GLenum, GLenum, GLfixed);
    void (KHRONOS_APIENTRY * tunisConvolutionParameterxvOES)(GLenum, GLenum, const GLfixed *);
    void (KHRONOS_APIENTRY * tunisCopyBufferSubData)(GLenum, GLenum, GLintptr, GLintptr, GLsizeiptr);
    void (KHRONOS_APIENTRY * tunisCopyBufferSubDataNV)(GLenum, GLenum, GLintptr, GLintptr, GLsizeiptr);
    void (KHRONOS_APIENTRY * tunisCopyColorSubTable)(GLenum, GLsizei, GLint, GLint, GLsizei);
    void (KHRONOS_APIENTRY * tunisCopyColorSubTableEXT)(GLenum, GLsizei, GLint, GLint, GLsizei);
    void (KHRONOS_APIENTRY * tunisCopyColorTable)(GLenum, GLenum, GLint, GLint, GLsizei);
    void (KHRONOS_APIENTRY * tunisCopyColorTableSGI)(GLenum, GLenum, GLint, GLint, GLsizei);
    void (KHRONOS_APIENTRY * tunisCopyConvolutionFilter1D)(GLenum, GLenum, GLint, GLint, GLsizei);
    void (KHRONOS_APIENTRY * tunisCopyConvolutionFilter1DEXT)(GLenum, GLenum, GLint, GLint, GLsizei);
    void (KHRONOS_APIENTRY * tunisCopyConvolutionFilter2D)(GLenum, GLenum, GLint, GLint, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * tunisCopyConvolutionFilter2DEXT)(GLenum, GLenum, GLint, GLint, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * tunisCopyImageSubData)(GLuint, GLenum, GLint, GLint, GLint, GLint, GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * tunisCopyImageSubDataEXT)(GLuint, GLenum, GLint, GLint, GLint, GLint, GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * tunisCopyImageSubDataNV)(GLuint, GLenum, GLint, GLint, GLint, GLint, GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * tunisCopyImageSubDataOES)(GLuint, GLenum, GLint, GLint, GLint, GLint, GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * tunisCopyMultiTexImage1DEXT)(GLenum, GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLint);
    void (KHRONOS_APIENTRY * tunisCopyMultiTexImage2DEXT)(GLenum, GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLsizei, GLint);
    void (KHRONOS_APIENTRY * tunisCopyMultiTexSubImage1DEXT)(GLenum, GLenum, GLint, GLint, GLint, GLint, GLsizei);
    void (KHRONOS_APIENTRY * tunisCopyMultiTexSubImage2DEXT)(GLenum, GLenum, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * tunisCopyMultiTexSubImage3DEXT)(GLenum, GLenum, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * tunisCopyNamedBufferSubData)(GLuint, GLuint, GLintptr, GLintptr, GLsizeiptr);
    void (KHRONOS_APIENTRY * tunisCopyPathNV)(GLuint, GLuint);
    void (KHRONOS_APIENTRY * tunisCopyPixels)(GLint, GLint, GLsizei, GLsizei, GLenum);
    void (KHRONOS_APIENTRY * tunisCopyTexImage1D)(GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLint);
    void (KHRONOS_APIENTRY * tunisCopyTexImage1DEXT)(GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLint);
    void (KHRONOS_APIENTRY * tunisCopyTexImage2D)(GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLsizei, GLint);
    void (KHRONOS_APIENTRY * tunisCopyTexImage2DEXT)(GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLsizei, GLint);
    void (KHRONOS_APIENTRY * tunisCopyTexSubImage1D)(GLenum, GLint, GLint, GLint, GLint, GLsizei);
    void (KHRONOS_APIENTRY * tunisCopyTexSubImage1DEXT)(GLenum, GLint, GLint, GLint, GLint, GLsizei);
    void (KHRONOS_APIENTRY * tunisCopyTexSubImage2D)(GLenum, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * tunisCopyTexSubImage2DEXT)(GLenum, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * tunisCopyTexSubImage3D)(GLenum, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * tunisCopyTexSubImage3DEXT)(GLenum, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * tunisCopyTexSubImage3DOES)(GLenum, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * tunisCopyTextureImage1DEXT)(GLuint, GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLint);
    void (KHRONOS_APIENTRY * tunisCopyTextureImage2DEXT)(GLuint, GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLsizei, GLint);
    void (KHRONOS_APIENTRY * tunisCopyTextureLevelsAPPLE)(GLuint, GLuint, GLint, GLsizei);
    void (KHRONOS_APIENTRY * tunisCopyTextureSubImage1D)(GLuint, GLint, GLint, GLint, GLint, GLsizei);
    void (KHRONOS_APIENTRY * tunisCopyTextureSubImage1DEXT)(GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei);
    void (KHRONOS_APIENTRY * tunisCopyTextureSubImage2D)(GLuint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * tunisCopyTextureSubImage2DEXT)(GLuint, GLenum, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * tunisCopyTextureSubImage3D)(GLuint, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * tunisCopyTextureSubImage3DEXT)(GLuint, GLenum, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * tunisCoverFillPathInstancedNV)(GLsizei, GLenum, const void *, GLuint, GLenum, GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisCoverFillPathNV)(GLuint, GLenum);
    void (KHRONOS_APIENTRY * tunisCoverStrokePathInstancedNV)(GLsizei, GLenum, const void *, GLuint, GLenum, GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisCoverStrokePathNV)(GLuint, GLenum);
    void (KHRONOS_APIENTRY * tunisCoverageMaskNV)(GLboolean);
    void (KHRONOS_APIENTRY * tunisCoverageModulationNV)(GLenum);
    void (KHRONOS_APIENTRY * tunisCoverageModulationTableNV)(GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisCoverageOperationNV)(GLenum);
    void (KHRONOS_APIENTRY * tunisCreateBuffers)(GLsizei, GLuint *);
    void (KHRONOS_APIENTRY * tunisCreateCommandListsNV)(GLsizei, GLuint *);
    void (KHRONOS_APIENTRY * tunisCreateFramebuffers)(GLsizei, GLuint *);
    void (KHRONOS_APIENTRY * tunisCreateMemoryObjectsEXT)(GLsizei, GLuint *);
    void (KHRONOS_APIENTRY * tunisCreatePerfQueryINTEL)(GLuint, GLuint *);
    GLuint(KHRONOS_APIENTRY * tunisCreateProgram)(void);
    GLhandleARB(KHRONOS_APIENTRY * tunisCreateProgramObjectARB)(void);
    void (KHRONOS_APIENTRY * tunisCreateProgramPipelines)(GLsizei, GLuint *);
    void (KHRONOS_APIENTRY * tunisCreateQueries)(GLenum, GLsizei, GLuint *);
    void (KHRONOS_APIENTRY * tunisCreateRenderbuffers)(GLsizei, GLuint *);
    void (KHRONOS_APIENTRY * tunisCreateSamplers)(GLsizei, GLuint *);
    GLuint(KHRONOS_APIENTRY * tunisCreateShader)(GLenum);
    GLhandleARB(KHRONOS_APIENTRY * tunisCreateShaderObjectARB)(GLenum);
    GLuint(KHRONOS_APIENTRY * tunisCreateShaderProgramEXT)(GLenum, const GLchar *);
    GLuint(KHRONOS_APIENTRY * tunisCreateShaderProgramv)(GLenum, GLsizei, const GLchar *const*);
    GLuint(KHRONOS_APIENTRY * tunisCreateShaderProgramvEXT)(GLenum, GLsizei, const GLchar **);
    void (KHRONOS_APIENTRY * tunisCreateStatesNV)(GLsizei, GLuint *);
    GLsync(KHRONOS_APIENTRY * tunisCreateSyncFromCLeventARB)(struct _cl_context *, struct _cl_event *, GLbitfield);
    void (KHRONOS_APIENTRY * tunisCreateTextures)(GLenum, GLsizei, GLuint *);
    void (KHRONOS_APIENTRY * tunisCreateTransformFeedbacks)(GLsizei, GLuint *);
    void (KHRONOS_APIENTRY * tunisCreateVertexArrays)(GLsizei, GLuint *);
    void (KHRONOS_APIENTRY * tunisCullFace)(GLenum);
    void (KHRONOS_APIENTRY * tunisCullParameterdvEXT)(GLenum, GLdouble *);
    void (KHRONOS_APIENTRY * tunisCullParameterfvEXT)(GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * tunisCurrentPaletteMatrixARB)(GLint);
    void (KHRONOS_APIENTRY * tunisCurrentPaletteMatrixOES)(GLuint);
    void (KHRONOS_APIENTRY * tunisDebugMessageCallback)(GLDEBUGPROC, const void *);
    void (KHRONOS_APIENTRY * tunisDebugMessageCallbackAMD)(GLDEBUGPROCAMD, void *);
    void (KHRONOS_APIENTRY * tunisDebugMessageCallbackARB)(GLDEBUGPROCARB, const void *);
    void (KHRONOS_APIENTRY * tunisDebugMessageCallbackKHR)(GLDEBUGPROCKHR, const void *);
    void (KHRONOS_APIENTRY * tunisDebugMessageControl)(GLenum, GLenum, GLenum, GLsizei, const GLuint *, GLboolean);
    void (KHRONOS_APIENTRY * tunisDebugMessageControlARB)(GLenum, GLenum, GLenum, GLsizei, const GLuint *, GLboolean);
    void (KHRONOS_APIENTRY * tunisDebugMessageControlKHR)(GLenum, GLenum, GLenum, GLsizei, const GLuint *, GLboolean);
    void (KHRONOS_APIENTRY * tunisDebugMessageEnableAMD)(GLenum, GLenum, GLsizei, const GLuint *, GLboolean);
    void (KHRONOS_APIENTRY * tunisDebugMessageInsert)(GLenum, GLenum, GLuint, GLenum, GLsizei, const GLchar *);
    void (KHRONOS_APIENTRY * tunisDebugMessageInsertAMD)(GLenum, GLenum, GLuint, GLsizei, const GLchar *);
    void (KHRONOS_APIENTRY * tunisDebugMessageInsertARB)(GLenum, GLenum, GLuint, GLenum, GLsizei, const GLchar *);
    void (KHRONOS_APIENTRY * tunisDebugMessageInsertKHR)(GLenum, GLenum, GLuint, GLenum, GLsizei, const GLchar *);
    void (KHRONOS_APIENTRY * tunisDeformSGIX)(GLbitfield);
    void (KHRONOS_APIENTRY * tunisDeformationMap3dSGIX)(GLenum, GLdouble, GLdouble, GLint, GLint, GLdouble, GLdouble, GLint, GLint, GLdouble, GLdouble, GLint, GLint, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisDeformationMap3fSGIX)(GLenum, GLfloat, GLfloat, GLint, GLint, GLfloat, GLfloat, GLint, GLint, GLfloat, GLfloat, GLint, GLint, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisDeleteAsyncMarkersSGIX)(GLuint, GLsizei);
    void (KHRONOS_APIENTRY * tunisDeleteBufferRegion)(GLenum);
    void (KHRONOS_APIENTRY * tunisDeleteBuffers)(GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY * tunisDeleteBuffersARB)(GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY * tunisDeleteCommandListsNV)(GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY * tunisDeleteFencesAPPLE)(GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY * tunisDeleteFencesNV)(GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY * tunisDeleteFragmentShaderATI)(GLuint);
    void (KHRONOS_APIENTRY * tunisDeleteFramebuffers)(GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY * tunisDeleteFramebuffersEXT)(GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY * tunisDeleteFramebuffersOES)(GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY * tunisDeleteLists)(GLuint, GLsizei);
    void (KHRONOS_APIENTRY * tunisDeleteMemoryObjectsEXT)(GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY * tunisDeleteNamedStringARB)(GLint, const GLchar *);
    void (KHRONOS_APIENTRY * tunisDeleteNamesAMD)(GLenum, GLuint, const GLuint *);
    void (KHRONOS_APIENTRY * tunisDeleteObjectARB)(GLhandleARB);
    void (KHRONOS_APIENTRY * tunisDeleteOcclusionQueriesNV)(GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY * tunisDeletePathsNV)(GLuint, GLsizei);
    void (KHRONOS_APIENTRY * tunisDeletePerfMonitorsAMD)(GLsizei, GLuint *);
    void (KHRONOS_APIENTRY * tunisDeletePerfQueryINTEL)(GLuint);
    void (KHRONOS_APIENTRY * tunisDeleteProgram)(GLuint);
    void (KHRONOS_APIENTRY * tunisDeleteProgramPipelines)(GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY * tunisDeleteProgramPipelinesEXT)(GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY * tunisDeleteProgramsARB)(GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY * tunisDeleteProgramsNV)(GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY * tunisDeleteQueries)(GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY * tunisDeleteQueriesARB)(GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY * tunisDeleteQueriesEXT)(GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY * tunisDeleteQueryResourceTagNV)(GLsizei, const GLint *);
    void (KHRONOS_APIENTRY * tunisDeleteRenderbuffers)(GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY * tunisDeleteRenderbuffersEXT)(GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY * tunisDeleteRenderbuffersOES)(GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY * tunisDeleteSamplers)(GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY * tunisDeleteSemaphoresEXT)(GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY * tunisDeleteShader)(GLuint);
    void (KHRONOS_APIENTRY * tunisDeleteStatesNV)(GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY * tunisDeleteSync)(GLsync);
    void (KHRONOS_APIENTRY * tunisDeleteSyncAPPLE)(GLsync);
    void (KHRONOS_APIENTRY * tunisDeleteTextures)(GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY * tunisDeleteTexturesEXT)(GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY * tunisDeleteTransformFeedbacks)(GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY * tunisDeleteTransformFeedbacksNV)(GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY * tunisDeleteVertexArrays)(GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY * tunisDeleteVertexArraysAPPLE)(GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY * tunisDeleteVertexArraysOES)(GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY * tunisDeleteVertexShaderEXT)(GLuint);
    void (KHRONOS_APIENTRY * tunisDepthBoundsEXT)(GLclampd, GLclampd);
    void (KHRONOS_APIENTRY * tunisDepthBoundsdNV)(GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * tunisDepthFunc)(GLenum);
    void (KHRONOS_APIENTRY * tunisDepthMask)(GLboolean);
    void (KHRONOS_APIENTRY * tunisDepthRange)(GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * tunisDepthRangeArrayfvNV)(GLuint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisDepthRangeArrayfvOES)(GLuint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisDepthRangeArrayv)(GLuint, GLsizei, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisDepthRangeIndexed)(GLuint, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * tunisDepthRangeIndexedfNV)(GLuint, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisDepthRangeIndexedfOES)(GLuint, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisDepthRangedNV)(GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * tunisDepthRangef)(GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisDepthRangefOES)(GLclampf, GLclampf);
    void (KHRONOS_APIENTRY * tunisDepthRangex)(GLfixed, GLfixed);
    void (KHRONOS_APIENTRY * tunisDepthRangexOES)(GLfixed, GLfixed);
    void (KHRONOS_APIENTRY * tunisDetachObjectARB)(GLhandleARB, GLhandleARB);
    void (KHRONOS_APIENTRY * tunisDetachShader)(GLuint, GLuint);
    void (KHRONOS_APIENTRY * tunisDetailTexFuncSGIS)(GLenum, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisDisable)(GLenum);
    void (KHRONOS_APIENTRY * tunisDisableClientState)(GLenum);
    void (KHRONOS_APIENTRY * tunisDisableClientStateIndexedEXT)(GLenum, GLuint);
    void (KHRONOS_APIENTRY * tunisDisableClientStateiEXT)(GLenum, GLuint);
    void (KHRONOS_APIENTRY * tunisDisableDriverControlQCOM)(GLuint);
    void (KHRONOS_APIENTRY * tunisDisableIndexedEXT)(GLenum, GLuint);
    void (KHRONOS_APIENTRY * tunisDisableVariantClientStateEXT)(GLuint);
    void (KHRONOS_APIENTRY * tunisDisableVertexArrayAttrib)(GLuint, GLuint);
    void (KHRONOS_APIENTRY * tunisDisableVertexArrayAttribEXT)(GLuint, GLuint);
    void (KHRONOS_APIENTRY * tunisDisableVertexArrayEXT)(GLuint, GLenum);
    void (KHRONOS_APIENTRY * tunisDisableVertexAttribAPPLE)(GLuint, GLenum);
    void (KHRONOS_APIENTRY * tunisDisableVertexAttribArray)(GLuint);
    void (KHRONOS_APIENTRY * tunisDisableVertexAttribArrayARB)(GLuint);
    void (KHRONOS_APIENTRY * tunisDisablei)(GLenum, GLuint);
    void (KHRONOS_APIENTRY * tunisDisableiEXT)(GLenum, GLuint);
    void (KHRONOS_APIENTRY * tunisDisableiNV)(GLenum, GLuint);
    void (KHRONOS_APIENTRY * tunisDisableiOES)(GLenum, GLuint);
    void (KHRONOS_APIENTRY * tunisDiscardFramebufferEXT)(GLenum, GLsizei, const GLenum *);
    void (KHRONOS_APIENTRY * tunisDispatchCompute)(GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY * tunisDispatchComputeGroupSizeARB)(GLuint, GLuint, GLuint, GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY * tunisDispatchComputeIndirect)(GLintptr);
    void (KHRONOS_APIENTRY * tunisDrawArrays)(GLenum, GLint, GLsizei);
    void (KHRONOS_APIENTRY * tunisDrawArraysEXT)(GLenum, GLint, GLsizei);
    void (KHRONOS_APIENTRY * tunisDrawArraysIndirect)(GLenum, const void *);
    void (KHRONOS_APIENTRY * tunisDrawArraysInstanced)(GLenum, GLint, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * tunisDrawArraysInstancedANGLE)(GLenum, GLint, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * tunisDrawArraysInstancedARB)(GLenum, GLint, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * tunisDrawArraysInstancedBaseInstance)(GLenum, GLint, GLsizei, GLsizei, GLuint);
    void (KHRONOS_APIENTRY * tunisDrawArraysInstancedBaseInstanceEXT)(GLenum, GLint, GLsizei, GLsizei, GLuint);
    void (KHRONOS_APIENTRY * tunisDrawArraysInstancedEXT)(GLenum, GLint, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * tunisDrawArraysInstancedNV)(GLenum, GLint, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * tunisDrawBuffer)(GLenum);
    void (KHRONOS_APIENTRY * tunisDrawBufferRegion)(GLuint, GLint, GLint, GLsizei, GLsizei, GLint, GLint);
    void (KHRONOS_APIENTRY * tunisDrawBuffers)(GLsizei, const GLenum *);
    void (KHRONOS_APIENTRY * tunisDrawBuffersARB)(GLsizei, const GLenum *);
    void (KHRONOS_APIENTRY * tunisDrawBuffersATI)(GLsizei, const GLenum *);
    void (KHRONOS_APIENTRY * tunisDrawBuffersEXT)(GLsizei, const GLenum *);
    void (KHRONOS_APIENTRY * tunisDrawBuffersIndexedEXT)(GLint, const GLenum *, const GLint *);
    void (KHRONOS_APIENTRY * tunisDrawBuffersNV)(GLsizei, const GLenum *);
    void (KHRONOS_APIENTRY * tunisDrawCommandsAddressNV)(GLenum, const GLuint64 *, const GLsizei *, GLuint);
    void (KHRONOS_APIENTRY * tunisDrawCommandsNV)(GLenum, GLuint, const GLintptr *, const GLsizei *, GLuint);
    void (KHRONOS_APIENTRY * tunisDrawCommandsStatesAddressNV)(const GLuint64 *, const GLsizei *, const GLuint *, const GLuint *, GLuint);
    void (KHRONOS_APIENTRY * tunisDrawCommandsStatesNV)(GLuint, const GLintptr *, const GLsizei *, const GLuint *, const GLuint *, GLuint);
    void (KHRONOS_APIENTRY * tunisDrawElementArrayAPPLE)(GLenum, GLint, GLsizei);
    void (KHRONOS_APIENTRY * tunisDrawElementArrayATI)(GLenum, GLsizei);
    void (KHRONOS_APIENTRY * tunisDrawElements)(GLenum, GLsizei, GLenum, const void *);
    void (KHRONOS_APIENTRY * tunisDrawElementsBaseVertex)(GLenum, GLsizei, GLenum, const void *, GLint);
    void (KHRONOS_APIENTRY * tunisDrawElementsBaseVertexEXT)(GLenum, GLsizei, GLenum, const void *, GLint);
    void (KHRONOS_APIENTRY * tunisDrawElementsBaseVertexOES)(GLenum, GLsizei, GLenum, const void *, GLint);
    void (KHRONOS_APIENTRY * tunisDrawElementsIndirect)(GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY * tunisDrawElementsInstanced)(GLenum, GLsizei, GLenum, const void *, GLsizei);
    void (KHRONOS_APIENTRY * tunisDrawElementsInstancedANGLE)(GLenum, GLsizei, GLenum, const void *, GLsizei);
    void (KHRONOS_APIENTRY * tunisDrawElementsInstancedARB)(GLenum, GLsizei, GLenum, const void *, GLsizei);
    void (KHRONOS_APIENTRY * tunisDrawElementsInstancedBaseInstance)(GLenum, GLsizei, GLenum, const void *, GLsizei, GLuint);
    void (KHRONOS_APIENTRY * tunisDrawElementsInstancedBaseInstanceEXT)(GLenum, GLsizei, GLenum, const void *, GLsizei, GLuint);
    void (KHRONOS_APIENTRY * tunisDrawElementsInstancedBaseVertex)(GLenum, GLsizei, GLenum, const void *, GLsizei, GLint);
    void (KHRONOS_APIENTRY * tunisDrawElementsInstancedBaseVertexBaseInstance)(GLenum, GLsizei, GLenum, const void *, GLsizei, GLint, GLuint);
    void (KHRONOS_APIENTRY * tunisDrawElementsInstancedBaseVertexBaseInstanceEXT)(GLenum, GLsizei, GLenum, const void *, GLsizei, GLint, GLuint);
    void (KHRONOS_APIENTRY * tunisDrawElementsInstancedBaseVertexEXT)(GLenum, GLsizei, GLenum, const void *, GLsizei, GLint);
    void (KHRONOS_APIENTRY * tunisDrawElementsInstancedBaseVertexOES)(GLenum, GLsizei, GLenum, const void *, GLsizei, GLint);
    void (KHRONOS_APIENTRY * tunisDrawElementsInstancedEXT)(GLenum, GLsizei, GLenum, const void *, GLsizei);
    void (KHRONOS_APIENTRY * tunisDrawElementsInstancedNV)(GLenum, GLsizei, GLenum, const void *, GLsizei);
    void (KHRONOS_APIENTRY * tunisDrawMeshArraysSUN)(GLenum, GLint, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * tunisDrawPixels)(GLsizei, GLsizei, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY * tunisDrawRangeElementArrayAPPLE)(GLenum, GLuint, GLuint, GLint, GLsizei);
    void (KHRONOS_APIENTRY * tunisDrawRangeElementArrayATI)(GLenum, GLuint, GLuint, GLsizei);
    void (KHRONOS_APIENTRY * tunisDrawRangeElements)(GLenum, GLuint, GLuint, GLsizei, GLenum, const void *);
    void (KHRONOS_APIENTRY * tunisDrawRangeElementsBaseVertex)(GLenum, GLuint, GLuint, GLsizei, GLenum, const void *, GLint);
    void (KHRONOS_APIENTRY * tunisDrawRangeElementsBaseVertexEXT)(GLenum, GLuint, GLuint, GLsizei, GLenum, const void *, GLint);
    void (KHRONOS_APIENTRY * tunisDrawRangeElementsBaseVertexOES)(GLenum, GLuint, GLuint, GLsizei, GLenum, const void *, GLint);
    void (KHRONOS_APIENTRY * tunisDrawRangeElementsEXT)(GLenum, GLuint, GLuint, GLsizei, GLenum, const void *);
    void (KHRONOS_APIENTRY * tunisDrawTexfOES)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisDrawTexfvOES)(const GLfloat *);
    void (KHRONOS_APIENTRY * tunisDrawTexiOES)(GLint, GLint, GLint, GLint, GLint);
    void (KHRONOS_APIENTRY * tunisDrawTexivOES)(const GLint *);
    void (KHRONOS_APIENTRY * tunisDrawTexsOES)(GLshort, GLshort, GLshort, GLshort, GLshort);
    void (KHRONOS_APIENTRY * tunisDrawTexsvOES)(const GLshort *);
    void (KHRONOS_APIENTRY * tunisDrawTextureNV)(GLuint, GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisDrawTexxOES)(GLfixed, GLfixed, GLfixed, GLfixed, GLfixed);
    void (KHRONOS_APIENTRY * tunisDrawTexxvOES)(const GLfixed *);
    void (KHRONOS_APIENTRY * tunisDrawTransformFeedback)(GLenum, GLuint);
    void (KHRONOS_APIENTRY * tunisDrawTransformFeedbackEXT)(GLenum, GLuint);
    void (KHRONOS_APIENTRY * tunisDrawTransformFeedbackInstanced)(GLenum, GLuint, GLsizei);
    void (KHRONOS_APIENTRY * tunisDrawTransformFeedbackInstancedEXT)(GLenum, GLuint, GLsizei);
    void (KHRONOS_APIENTRY * tunisDrawTransformFeedbackNV)(GLenum, GLuint);
    void (KHRONOS_APIENTRY * tunisDrawTransformFeedbackStream)(GLenum, GLuint, GLuint);
    void (KHRONOS_APIENTRY * tunisDrawTransformFeedbackStreamInstanced)(GLenum, GLuint, GLuint, GLsizei);
    void (KHRONOS_APIENTRY * tunisDrawVkImageNV)(GLuint64, GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisEGLImageTargetRenderbufferStorageOES)(GLenum, GLeglImageOES);
    void (KHRONOS_APIENTRY * tunisEGLImageTargetTexStorageEXT)(GLenum, GLeglImageOES, const GLint* );
    void (KHRONOS_APIENTRY * tunisEGLImageTargetTexture2DOES)(GLenum, GLeglImageOES);
    void (KHRONOS_APIENTRY * tunisEGLImageTargetTextureStorageEXT)(GLuint, GLeglImageOES, const GLint* );
    void (KHRONOS_APIENTRY * tunisEdgeFlag)(GLboolean);
    void (KHRONOS_APIENTRY * tunisEdgeFlagFormatNV)(GLsizei);
    void (KHRONOS_APIENTRY * tunisEdgeFlagPointer)(GLsizei, const void *);
    void (KHRONOS_APIENTRY * tunisEdgeFlagPointerEXT)(GLsizei, GLsizei, const GLboolean *);
    void (KHRONOS_APIENTRY * tunisEdgeFlagPointerListIBM)(GLint, const GLboolean **, GLint);
    void (KHRONOS_APIENTRY * tunisEdgeFlagv)(const GLboolean *);
    void (KHRONOS_APIENTRY * tunisElementPointerAPPLE)(GLenum, const void *);
    void (KHRONOS_APIENTRY * tunisElementPointerATI)(GLenum, const void *);
    void (KHRONOS_APIENTRY * tunisEnable)(GLenum);
    void (KHRONOS_APIENTRY * tunisEnableClientState)(GLenum);
    void (KHRONOS_APIENTRY * tunisEnableClientStateIndexedEXT)(GLenum, GLuint);
    void (KHRONOS_APIENTRY * tunisEnableClientStateiEXT)(GLenum, GLuint);
    void (KHRONOS_APIENTRY * tunisEnableDriverControlQCOM)(GLuint);
    void (KHRONOS_APIENTRY * tunisEnableIndexedEXT)(GLenum, GLuint);
    void (KHRONOS_APIENTRY * tunisEnableVariantClientStateEXT)(GLuint);
    void (KHRONOS_APIENTRY * tunisEnableVertexArrayAttrib)(GLuint, GLuint);
    void (KHRONOS_APIENTRY * tunisEnableVertexArrayAttribEXT)(GLuint, GLuint);
    void (KHRONOS_APIENTRY * tunisEnableVertexArrayEXT)(GLuint, GLenum);
    void (KHRONOS_APIENTRY * tunisEnableVertexAttribAPPLE)(GLuint, GLenum);
    void (KHRONOS_APIENTRY * tunisEnableVertexAttribArray)(GLuint);
    void (KHRONOS_APIENTRY * tunisEnableVertexAttribArrayARB)(GLuint);
    void (KHRONOS_APIENTRY * tunisEnablei)(GLenum, GLuint);
    void (KHRONOS_APIENTRY * tunisEnableiEXT)(GLenum, GLuint);
    void (KHRONOS_APIENTRY * tunisEnableiNV)(GLenum, GLuint);
    void (KHRONOS_APIENTRY * tunisEnableiOES)(GLenum, GLuint);
    void (KHRONOS_APIENTRY * tunisEnd)(void);
    void (KHRONOS_APIENTRY * tunisEndConditionalRender)(void);
    void (KHRONOS_APIENTRY * tunisEndConditionalRenderNV)(void);
    void (KHRONOS_APIENTRY * tunisEndConditionalRenderNVX)(void);
    void (KHRONOS_APIENTRY * tunisEndFragmentShaderATI)(void);
    void (KHRONOS_APIENTRY * tunisEndList)(void);
    void (KHRONOS_APIENTRY * tunisEndOcclusionQueryNV)(void);
    void (KHRONOS_APIENTRY * tunisEndPerfMonitorAMD)(GLuint);
    void (KHRONOS_APIENTRY * tunisEndPerfQueryINTEL)(GLuint);
    void (KHRONOS_APIENTRY * tunisEndQuery)(GLenum);
    void (KHRONOS_APIENTRY * tunisEndQueryARB)(GLenum);
    void (KHRONOS_APIENTRY * tunisEndQueryEXT)(GLenum);
    void (KHRONOS_APIENTRY * tunisEndQueryIndexed)(GLenum, GLuint);
    void (KHRONOS_APIENTRY * tunisEndTilingQCOM)(GLbitfield);
    void (KHRONOS_APIENTRY * tunisEndTransformFeedback)(void);
    void (KHRONOS_APIENTRY * tunisEndTransformFeedbackEXT)(void);
    void (KHRONOS_APIENTRY * tunisEndTransformFeedbackNV)(void);
    void (KHRONOS_APIENTRY * tunisEndVertexShaderEXT)(void);
    void (KHRONOS_APIENTRY * tunisEndVideoCaptureNV)(GLuint);
    void (KHRONOS_APIENTRY * tunisEvalCoord1d)(GLdouble);
    void (KHRONOS_APIENTRY * tunisEvalCoord1dv)(const GLdouble *);
    void (KHRONOS_APIENTRY * tunisEvalCoord1f)(GLfloat);
    void (KHRONOS_APIENTRY * tunisEvalCoord1fv)(const GLfloat *);
    void (KHRONOS_APIENTRY * tunisEvalCoord1xOES)(GLfixed);
    void (KHRONOS_APIENTRY * tunisEvalCoord1xvOES)(const GLfixed *);
    void (KHRONOS_APIENTRY * tunisEvalCoord2d)(GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * tunisEvalCoord2dv)(const GLdouble *);
    void (KHRONOS_APIENTRY * tunisEvalCoord2f)(GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisEvalCoord2fv)(const GLfloat *);
    void (KHRONOS_APIENTRY * tunisEvalCoord2xOES)(GLfixed, GLfixed);
    void (KHRONOS_APIENTRY * tunisEvalCoord2xvOES)(const GLfixed *);
    void (KHRONOS_APIENTRY * tunisEvalMapsNV)(GLenum, GLenum);
    void (KHRONOS_APIENTRY * tunisEvalMesh1)(GLenum, GLint, GLint);
    void (KHRONOS_APIENTRY * tunisEvalMesh2)(GLenum, GLint, GLint, GLint, GLint);
    void (KHRONOS_APIENTRY * tunisEvalPoint1)(GLint);
    void (KHRONOS_APIENTRY * tunisEvalPoint2)(GLint, GLint);
    void (KHRONOS_APIENTRY * tunisEvaluateDepthValuesARB)(void);
    void (KHRONOS_APIENTRY * tunisExecuteProgramNV)(GLenum, GLuint, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisExtGetBufferPointervQCOM)(GLenum, void **);
    void (KHRONOS_APIENTRY * tunisExtGetBuffersQCOM)(GLuint *, GLint, GLint *);
    void (KHRONOS_APIENTRY * tunisExtGetFramebuffersQCOM)(GLuint *, GLint, GLint *);
    void (KHRONOS_APIENTRY * tunisExtGetProgramBinarySourceQCOM)(GLuint, GLenum, GLchar *, GLint *);
    void (KHRONOS_APIENTRY * tunisExtGetProgramsQCOM)(GLuint *, GLint, GLint *);
    void (KHRONOS_APIENTRY * tunisExtGetRenderbuffersQCOM)(GLuint *, GLint, GLint *);
    void (KHRONOS_APIENTRY * tunisExtGetShadersQCOM)(GLuint *, GLint, GLint *);
    void (KHRONOS_APIENTRY * tunisExtGetTexLevelParameterivQCOM)(GLuint, GLenum, GLint, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisExtGetTexSubImageQCOM)(GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, void *);
    void (KHRONOS_APIENTRY * tunisExtGetTexturesQCOM)(GLuint *, GLint, GLint *);
    GLboolean(KHRONOS_APIENTRY * tunisExtIsProgramBinaryQCOM)(GLuint);
    void (KHRONOS_APIENTRY * tunisExtTexObjectStateOverrideiQCOM)(GLenum, GLenum, GLint);
    void (KHRONOS_APIENTRY * tunisExtractComponentEXT)(GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY * tunisFeedbackBuffer)(GLsizei, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * tunisFeedbackBufferxOES)(GLsizei, GLenum, const GLfixed *);
    GLsync(KHRONOS_APIENTRY * tunisFenceSync)(GLenum, GLbitfield);
    GLsync(KHRONOS_APIENTRY * tunisFenceSyncAPPLE)(GLenum, GLbitfield);
    void (KHRONOS_APIENTRY * tunisFinalCombinerInputNV)(GLenum, GLenum, GLenum, GLenum);
    void (KHRONOS_APIENTRY * tunisFinish)(void);
    GLint(KHRONOS_APIENTRY * tunisFinishAsyncSGIX)(GLuint *);
    void (KHRONOS_APIENTRY * tunisFinishFenceAPPLE)(GLuint);
    void (KHRONOS_APIENTRY * tunisFinishFenceNV)(GLuint);
    void (KHRONOS_APIENTRY * tunisFinishObjectAPPLE)(GLenum, GLint);
    void (KHRONOS_APIENTRY * tunisFinishTextureSUNX)(void);
    void (KHRONOS_APIENTRY * tunisFlush)(void);
    void (KHRONOS_APIENTRY * tunisFlushMappedBufferRange)(GLenum, GLintptr, GLsizeiptr);
    void (KHRONOS_APIENTRY * tunisFlushMappedBufferRangeAPPLE)(GLenum, GLintptr, GLsizeiptr);
    void (KHRONOS_APIENTRY * tunisFlushMappedBufferRangeEXT)(GLenum, GLintptr, GLsizeiptr);
    void (KHRONOS_APIENTRY * tunisFlushMappedNamedBufferRange)(GLuint, GLintptr, GLsizeiptr);
    void (KHRONOS_APIENTRY * tunisFlushMappedNamedBufferRangeEXT)(GLuint, GLintptr, GLsizeiptr);
    void (KHRONOS_APIENTRY * tunisFlushPixelDataRangeNV)(GLenum);
    void (KHRONOS_APIENTRY * tunisFlushRasterSGIX)(void);
    void (KHRONOS_APIENTRY * tunisFlushStaticDataIBM)(GLenum);
    void (KHRONOS_APIENTRY * tunisFlushVertexArrayRangeAPPLE)(GLsizei, void *);
    void (KHRONOS_APIENTRY * tunisFlushVertexArrayRangeNV)(void);
    void (KHRONOS_APIENTRY * tunisFogCoordFormatNV)(GLenum, GLsizei);
    void (KHRONOS_APIENTRY * tunisFogCoordPointer)(GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY * tunisFogCoordPointerEXT)(GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY * tunisFogCoordPointerListIBM)(GLenum, GLint, const void **, GLint);
    void (KHRONOS_APIENTRY * tunisFogCoordd)(GLdouble);
    void (KHRONOS_APIENTRY * tunisFogCoorddEXT)(GLdouble);
    void (KHRONOS_APIENTRY * tunisFogCoorddv)(const GLdouble *);
    void (KHRONOS_APIENTRY * tunisFogCoorddvEXT)(const GLdouble *);
    void (KHRONOS_APIENTRY * tunisFogCoordf)(GLfloat);
    void (KHRONOS_APIENTRY * tunisFogCoordfEXT)(GLfloat);
    void (KHRONOS_APIENTRY * tunisFogCoordfv)(const GLfloat *);
    void (KHRONOS_APIENTRY * tunisFogCoordfvEXT)(const GLfloat *);
    void (KHRONOS_APIENTRY * tunisFogCoordhNV)(GLhalfNV);
    void (KHRONOS_APIENTRY * tunisFogCoordhvNV)(const GLhalfNV *);
    void (KHRONOS_APIENTRY * tunisFogFuncSGIS)(GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisFogf)(GLenum, GLfloat);
    void (KHRONOS_APIENTRY * tunisFogfv)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisFogi)(GLenum, GLint);
    void (KHRONOS_APIENTRY * tunisFogiv)(GLenum, const GLint *);
    void (KHRONOS_APIENTRY * tunisFogx)(GLenum, GLfixed);
    void (KHRONOS_APIENTRY * tunisFogxOES)(GLenum, GLfixed);
    void (KHRONOS_APIENTRY * tunisFogxv)(GLenum, const GLfixed *);
    void (KHRONOS_APIENTRY * tunisFogxvOES)(GLenum, const GLfixed *);
    void (KHRONOS_APIENTRY * tunisFragmentColorMaterialSGIX)(GLenum, GLenum);
    void (KHRONOS_APIENTRY * tunisFragmentCoverageColorNV)(GLuint);
    void (KHRONOS_APIENTRY * tunisFragmentLightModelfSGIX)(GLenum, GLfloat);
    void (KHRONOS_APIENTRY * tunisFragmentLightModelfvSGIX)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisFragmentLightModeliSGIX)(GLenum, GLint);
    void (KHRONOS_APIENTRY * tunisFragmentLightModelivSGIX)(GLenum, const GLint *);
    void (KHRONOS_APIENTRY * tunisFragmentLightfSGIX)(GLenum, GLenum, GLfloat);
    void (KHRONOS_APIENTRY * tunisFragmentLightfvSGIX)(GLenum, GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisFragmentLightiSGIX)(GLenum, GLenum, GLint);
    void (KHRONOS_APIENTRY * tunisFragmentLightivSGIX)(GLenum, GLenum, const GLint *);
    void (KHRONOS_APIENTRY * tunisFragmentMaterialfSGIX)(GLenum, GLenum, GLfloat);
    void (KHRONOS_APIENTRY * tunisFragmentMaterialfvSGIX)(GLenum, GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisFragmentMaterialiSGIX)(GLenum, GLenum, GLint);
    void (KHRONOS_APIENTRY * tunisFragmentMaterialivSGIX)(GLenum, GLenum, const GLint *);
    void (KHRONOS_APIENTRY * tunisFrameTerminatorGREMEDY)(void);
    void (KHRONOS_APIENTRY * tunisFrameZoomSGIX)(GLint);
    void (KHRONOS_APIENTRY * tunisFramebufferDrawBufferEXT)(GLuint, GLenum);
    void (KHRONOS_APIENTRY * tunisFramebufferDrawBuffersEXT)(GLuint, GLsizei, const GLenum *);
    void (KHRONOS_APIENTRY * tunisFramebufferFetchBarrierEXT)(void);
    void (KHRONOS_APIENTRY * tunisFramebufferFetchBarrierQCOM)(void);
    void (KHRONOS_APIENTRY * tunisFramebufferFoveationConfigQCOM)(GLuint, GLuint, GLuint, GLuint, GLuint *);
    void (KHRONOS_APIENTRY * tunisFramebufferFoveationParametersQCOM)(GLuint, GLuint, GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisFramebufferParameteri)(GLenum, GLenum, GLint);
    void (KHRONOS_APIENTRY * tunisFramebufferPixelLocalStorageSizeEXT)(GLuint, GLsizei);
    void (KHRONOS_APIENTRY * tunisFramebufferReadBufferEXT)(GLuint, GLenum);
    void (KHRONOS_APIENTRY * tunisFramebufferRenderbuffer)(GLenum, GLenum, GLenum, GLuint);
    void (KHRONOS_APIENTRY * tunisFramebufferRenderbufferEXT)(GLenum, GLenum, GLenum, GLuint);
    void (KHRONOS_APIENTRY * tunisFramebufferRenderbufferOES)(GLenum, GLenum, GLenum, GLuint);
    void (KHRONOS_APIENTRY * tunisFramebufferSampleLocationsfvARB)(GLenum, GLuint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisFramebufferSampleLocationsfvNV)(GLenum, GLuint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisFramebufferSamplePositionsfvAMD)(GLenum, GLuint, GLuint, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisFramebufferTexture)(GLenum, GLenum, GLuint, GLint);
    void (KHRONOS_APIENTRY * tunisFramebufferTexture1D)(GLenum, GLenum, GLenum, GLuint, GLint);
    void (KHRONOS_APIENTRY * tunisFramebufferTexture1DEXT)(GLenum, GLenum, GLenum, GLuint, GLint);
    void (KHRONOS_APIENTRY * tunisFramebufferTexture2D)(GLenum, GLenum, GLenum, GLuint, GLint);
    void (KHRONOS_APIENTRY * tunisFramebufferTexture2DDownsampleIMG)(GLenum, GLenum, GLenum, GLuint, GLint, GLint, GLint);
    void (KHRONOS_APIENTRY * tunisFramebufferTexture2DEXT)(GLenum, GLenum, GLenum, GLuint, GLint);
    void (KHRONOS_APIENTRY * tunisFramebufferTexture2DMultisampleEXT)(GLenum, GLenum, GLenum, GLuint, GLint, GLsizei);
    void (KHRONOS_APIENTRY * tunisFramebufferTexture2DMultisampleIMG)(GLenum, GLenum, GLenum, GLuint, GLint, GLsizei);
    void (KHRONOS_APIENTRY * tunisFramebufferTexture2DOES)(GLenum, GLenum, GLenum, GLuint, GLint);
    void (KHRONOS_APIENTRY * tunisFramebufferTexture3D)(GLenum, GLenum, GLenum, GLuint, GLint, GLint);
    void (KHRONOS_APIENTRY * tunisFramebufferTexture3DEXT)(GLenum, GLenum, GLenum, GLuint, GLint, GLint);
    void (KHRONOS_APIENTRY * tunisFramebufferTexture3DOES)(GLenum, GLenum, GLenum, GLuint, GLint, GLint);
    void (KHRONOS_APIENTRY * tunisFramebufferTextureARB)(GLenum, GLenum, GLuint, GLint);
    void (KHRONOS_APIENTRY * tunisFramebufferTextureEXT)(GLenum, GLenum, GLuint, GLint);
    void (KHRONOS_APIENTRY * tunisFramebufferTextureFaceARB)(GLenum, GLenum, GLuint, GLint, GLenum);
    void (KHRONOS_APIENTRY * tunisFramebufferTextureFaceEXT)(GLenum, GLenum, GLuint, GLint, GLenum);
    void (KHRONOS_APIENTRY * tunisFramebufferTextureLayer)(GLenum, GLenum, GLuint, GLint, GLint);
    void (KHRONOS_APIENTRY * tunisFramebufferTextureLayerARB)(GLenum, GLenum, GLuint, GLint, GLint);
    void (KHRONOS_APIENTRY * tunisFramebufferTextureLayerDownsampleIMG)(GLenum, GLenum, GLuint, GLint, GLint, GLint, GLint);
    void (KHRONOS_APIENTRY * tunisFramebufferTextureLayerEXT)(GLenum, GLenum, GLuint, GLint, GLint);
    void (KHRONOS_APIENTRY * tunisFramebufferTextureMultisampleMultiviewOVR)(GLenum, GLenum, GLuint, GLint, GLsizei, GLint, GLsizei);
    void (KHRONOS_APIENTRY * tunisFramebufferTextureMultiviewOVR)(GLenum, GLenum, GLuint, GLint, GLint, GLsizei);
    void (KHRONOS_APIENTRY * tunisFramebufferTextureOES)(GLenum, GLenum, GLuint, GLint);
    void (KHRONOS_APIENTRY * tunisFreeObjectBufferATI)(GLuint);
    void (KHRONOS_APIENTRY * tunisFrontFace)(GLenum);
    void (KHRONOS_APIENTRY * tunisFrustum)(GLdouble, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * tunisFrustumf)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisFrustumfOES)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisFrustumx)(GLfixed, GLfixed, GLfixed, GLfixed, GLfixed, GLfixed);
    void (KHRONOS_APIENTRY * tunisFrustumxOES)(GLfixed, GLfixed, GLfixed, GLfixed, GLfixed, GLfixed);
    GLuint(KHRONOS_APIENTRY * tunisGenAsyncMarkersSGIX)(GLsizei);
    void (KHRONOS_APIENTRY * tunisGenBuffers)(GLsizei, GLuint *);
    void (KHRONOS_APIENTRY * tunisGenBuffersARB)(GLsizei, GLuint *);
    void (KHRONOS_APIENTRY * tunisGenFencesAPPLE)(GLsizei, GLuint *);
    void (KHRONOS_APIENTRY * tunisGenFencesNV)(GLsizei, GLuint *);
    GLuint(KHRONOS_APIENTRY * tunisGenFragmentShadersATI)(GLuint);
    void (KHRONOS_APIENTRY * tunisGenFramebuffers)(GLsizei, GLuint *);
    void (KHRONOS_APIENTRY * tunisGenFramebuffersEXT)(GLsizei, GLuint *);
    void (KHRONOS_APIENTRY * tunisGenFramebuffersOES)(GLsizei, GLuint *);
    GLuint(KHRONOS_APIENTRY * tunisGenLists)(GLsizei);
    void (KHRONOS_APIENTRY * tunisGenNamesAMD)(GLenum, GLuint, GLuint *);
    void (KHRONOS_APIENTRY * tunisGenOcclusionQueriesNV)(GLsizei, GLuint *);
    GLuint(KHRONOS_APIENTRY * tunisGenPathsNV)(GLsizei);
    void (KHRONOS_APIENTRY * tunisGenPerfMonitorsAMD)(GLsizei, GLuint *);
    void (KHRONOS_APIENTRY * tunisGenProgramPipelines)(GLsizei, GLuint *);
    void (KHRONOS_APIENTRY * tunisGenProgramPipelinesEXT)(GLsizei, GLuint *);
    void (KHRONOS_APIENTRY * tunisGenProgramsARB)(GLsizei, GLuint *);
    void (KHRONOS_APIENTRY * tunisGenProgramsNV)(GLsizei, GLuint *);
    void (KHRONOS_APIENTRY * tunisGenQueries)(GLsizei, GLuint *);
    void (KHRONOS_APIENTRY * tunisGenQueriesARB)(GLsizei, GLuint *);
    void (KHRONOS_APIENTRY * tunisGenQueriesEXT)(GLsizei, GLuint *);
    void (KHRONOS_APIENTRY * tunisGenQueryResourceTagNV)(GLsizei, GLint *);
    void (KHRONOS_APIENTRY * tunisGenRenderbuffers)(GLsizei, GLuint *);
    void (KHRONOS_APIENTRY * tunisGenRenderbuffersEXT)(GLsizei, GLuint *);
    void (KHRONOS_APIENTRY * tunisGenRenderbuffersOES)(GLsizei, GLuint *);
    void (KHRONOS_APIENTRY * tunisGenSamplers)(GLsizei, GLuint *);
    void (KHRONOS_APIENTRY * tunisGenSemaphoresEXT)(GLsizei, GLuint *);
    GLuint(KHRONOS_APIENTRY * tunisGenSymbolsEXT)(GLenum, GLenum, GLenum, GLuint);
    void (KHRONOS_APIENTRY * tunisGenTextures)(GLsizei, GLuint *);
    void (KHRONOS_APIENTRY * tunisGenTexturesEXT)(GLsizei, GLuint *);
    void (KHRONOS_APIENTRY * tunisGenTransformFeedbacks)(GLsizei, GLuint *);
    void (KHRONOS_APIENTRY * tunisGenTransformFeedbacksNV)(GLsizei, GLuint *);
    void (KHRONOS_APIENTRY * tunisGenVertexArrays)(GLsizei, GLuint *);
    void (KHRONOS_APIENTRY * tunisGenVertexArraysAPPLE)(GLsizei, GLuint *);
    void (KHRONOS_APIENTRY * tunisGenVertexArraysOES)(GLsizei, GLuint *);
    GLuint(KHRONOS_APIENTRY * tunisGenVertexShadersEXT)(GLuint);
    void (KHRONOS_APIENTRY * tunisGenerateMipmap)(GLenum);
    void (KHRONOS_APIENTRY * tunisGenerateMipmapEXT)(GLenum);
    void (KHRONOS_APIENTRY * tunisGenerateMipmapOES)(GLenum);
    void (KHRONOS_APIENTRY * tunisGenerateMultiTexMipmapEXT)(GLenum, GLenum);
    void (KHRONOS_APIENTRY * tunisGenerateTextureMipmap)(GLuint);
    void (KHRONOS_APIENTRY * tunisGenerateTextureMipmapEXT)(GLuint, GLenum);
    void (KHRONOS_APIENTRY * tunisGetActiveAtomicCounterBufferiv)(GLuint, GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetActiveAttrib)(GLuint, GLuint, GLsizei, GLsizei *, GLint *, GLenum *, GLchar *);
    void (KHRONOS_APIENTRY * tunisGetActiveAttribARB)(GLhandleARB, GLuint, GLsizei, GLsizei *, GLint *, GLenum *, GLcharARB *);
    void (KHRONOS_APIENTRY * tunisGetActiveSubroutineName)(GLuint, GLenum, GLuint, GLsizei, GLsizei *, GLchar *);
    void (KHRONOS_APIENTRY * tunisGetActiveSubroutineUniformName)(GLuint, GLenum, GLuint, GLsizei, GLsizei *, GLchar *);
    void (KHRONOS_APIENTRY * tunisGetActiveSubroutineUniformiv)(GLuint, GLenum, GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetActiveUniform)(GLuint, GLuint, GLsizei, GLsizei *, GLint *, GLenum *, GLchar *);
    void (KHRONOS_APIENTRY * tunisGetActiveUniformARB)(GLhandleARB, GLuint, GLsizei, GLsizei *, GLint *, GLenum *, GLcharARB *);
    void (KHRONOS_APIENTRY * tunisGetActiveUniformBlockName)(GLuint, GLuint, GLsizei, GLsizei *, GLchar *);
    void (KHRONOS_APIENTRY * tunisGetActiveUniformBlockiv)(GLuint, GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetActiveUniformName)(GLuint, GLuint, GLsizei, GLsizei *, GLchar *);
    void (KHRONOS_APIENTRY * tunisGetActiveUniformsiv)(GLuint, GLsizei, const GLuint *, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetActiveVaryingNV)(GLuint, GLuint, GLsizei, GLsizei *, GLsizei *, GLenum *, GLchar *);
    void (KHRONOS_APIENTRY * tunisGetArrayObjectfvATI)(GLenum, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * tunisGetArrayObjectivATI)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetAttachedObjectsARB)(GLhandleARB, GLsizei, GLsizei *, GLhandleARB *);
    void (KHRONOS_APIENTRY * tunisGetAttachedShaders)(GLuint, GLsizei, GLsizei *, GLuint *);
    GLint(KHRONOS_APIENTRY * tunisGetAttribLocation)(GLuint, const GLchar *);
    GLint(KHRONOS_APIENTRY * tunisGetAttribLocationARB)(GLhandleARB, const GLcharARB *);
    void (KHRONOS_APIENTRY * tunisGetBooleanIndexedvEXT)(GLenum, GLuint, GLboolean *);
    void (KHRONOS_APIENTRY * tunisGetBooleani_v)(GLenum, GLuint, GLboolean *);
    void (KHRONOS_APIENTRY * tunisGetBooleanv)(GLenum, GLboolean *);
    void (KHRONOS_APIENTRY * tunisGetBufferParameteri64v)(GLenum, GLenum, GLint64 *);
    void (KHRONOS_APIENTRY * tunisGetBufferParameteriv)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetBufferParameterivARB)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetBufferParameterui64vNV)(GLenum, GLenum, GLuint64EXT *);
    void (KHRONOS_APIENTRY * tunisGetBufferPointerv)(GLenum, GLenum, void **);
    void (KHRONOS_APIENTRY * tunisGetBufferPointervARB)(GLenum, GLenum, void **);
    void (KHRONOS_APIENTRY * tunisGetBufferPointervOES)(GLenum, GLenum, void **);
    void (KHRONOS_APIENTRY * tunisGetBufferSubData)(GLenum, GLintptr, GLsizeiptr, void *);
    void (KHRONOS_APIENTRY * tunisGetBufferSubDataARB)(GLenum, GLintptrARB, GLsizeiptrARB, void *);
    void (KHRONOS_APIENTRY * tunisGetClipPlane)(GLenum, GLdouble *);
    void (KHRONOS_APIENTRY * tunisGetClipPlanef)(GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * tunisGetClipPlanefOES)(GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * tunisGetClipPlanex)(GLenum, GLfixed *);
    void (KHRONOS_APIENTRY * tunisGetClipPlanexOES)(GLenum, GLfixed *);
    void (KHRONOS_APIENTRY * tunisGetColorTable)(GLenum, GLenum, GLenum, void *);
    void (KHRONOS_APIENTRY * tunisGetColorTableEXT)(GLenum, GLenum, GLenum, void *);
    void (KHRONOS_APIENTRY * tunisGetColorTableParameterfv)(GLenum, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * tunisGetColorTableParameterfvEXT)(GLenum, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * tunisGetColorTableParameterfvSGI)(GLenum, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * tunisGetColorTableParameteriv)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetColorTableParameterivEXT)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetColorTableParameterivSGI)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetColorTableSGI)(GLenum, GLenum, GLenum, void *);
    void (KHRONOS_APIENTRY * tunisGetCombinerInputParameterfvNV)(GLenum, GLenum, GLenum, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * tunisGetCombinerInputParameterivNV)(GLenum, GLenum, GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetCombinerOutputParameterfvNV)(GLenum, GLenum, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * tunisGetCombinerOutputParameterivNV)(GLenum, GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetCombinerStageParameterfvNV)(GLenum, GLenum, GLfloat *);
    GLuint(KHRONOS_APIENTRY * tunisGetCommandHeaderNV)(GLenum, GLuint);
    void (KHRONOS_APIENTRY * tunisGetCompressedMultiTexImageEXT)(GLenum, GLenum, GLint, void *);
    void (KHRONOS_APIENTRY * tunisGetCompressedTexImage)(GLenum, GLint, void *);
    void (KHRONOS_APIENTRY * tunisGetCompressedTexImageARB)(GLenum, GLint, void *);
    void (KHRONOS_APIENTRY * tunisGetCompressedTextureImage)(GLuint, GLint, GLsizei, void *);
    void (KHRONOS_APIENTRY * tunisGetCompressedTextureImageEXT)(GLuint, GLenum, GLint, void *);
    void (KHRONOS_APIENTRY * tunisGetCompressedTextureSubImage)(GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLsizei, void *);
    void (KHRONOS_APIENTRY * tunisGetConvolutionFilter)(GLenum, GLenum, GLenum, void *);
    void (KHRONOS_APIENTRY * tunisGetConvolutionFilterEXT)(GLenum, GLenum, GLenum, void *);
    void (KHRONOS_APIENTRY * tunisGetConvolutionParameterfv)(GLenum, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * tunisGetConvolutionParameterfvEXT)(GLenum, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * tunisGetConvolutionParameteriv)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetConvolutionParameterivEXT)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetConvolutionParameterxvOES)(GLenum, GLenum, GLfixed *);
    void (KHRONOS_APIENTRY * tunisGetCoverageModulationTableNV)(GLsizei, GLfloat *);
    GLuint(KHRONOS_APIENTRY * tunisGetDebugMessageLog)(GLuint, GLsizei, GLenum *, GLenum *, GLuint *, GLenum *, GLsizei *, GLchar *);
    GLuint(KHRONOS_APIENTRY * tunisGetDebugMessageLogAMD)(GLuint, GLsizei, GLenum *, GLuint *, GLuint *, GLsizei *, GLchar *);
    GLuint(KHRONOS_APIENTRY * tunisGetDebugMessageLogARB)(GLuint, GLsizei, GLenum *, GLenum *, GLuint *, GLenum *, GLsizei *, GLchar *);
    GLuint(KHRONOS_APIENTRY * tunisGetDebugMessageLogKHR)(GLuint, GLsizei, GLenum *, GLenum *, GLuint *, GLenum *, GLsizei *, GLchar *);
    void (KHRONOS_APIENTRY * tunisGetDetailTexFuncSGIS)(GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * tunisGetDoubleIndexedvEXT)(GLenum, GLuint, GLdouble *);
    void (KHRONOS_APIENTRY * tunisGetDoublei_v)(GLenum, GLuint, GLdouble *);
    void (KHRONOS_APIENTRY * tunisGetDoublei_vEXT)(GLenum, GLuint, GLdouble *);
    void (KHRONOS_APIENTRY * tunisGetDoublev)(GLenum, GLdouble *);
    void (KHRONOS_APIENTRY * tunisGetDriverControlStringQCOM)(GLuint, GLsizei, GLsizei *, GLchar *);
    void (KHRONOS_APIENTRY * tunisGetDriverControlsQCOM)(GLint *, GLsizei, GLuint *);
    GLenum(KHRONOS_APIENTRY * tunisGetError)(void);
    void (KHRONOS_APIENTRY * tunisGetFenceivNV)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetFinalCombinerInputParameterfvNV)(GLenum, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * tunisGetFinalCombinerInputParameterivNV)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetFirstPerfQueryIdINTEL)(GLuint *);
    void (KHRONOS_APIENTRY * tunisGetFixedv)(GLenum, GLfixed *);
    void (KHRONOS_APIENTRY * tunisGetFixedvOES)(GLenum, GLfixed *);
    void (KHRONOS_APIENTRY * tunisGetFloatIndexedvEXT)(GLenum, GLuint, GLfloat *);
    void (KHRONOS_APIENTRY * tunisGetFloati_v)(GLenum, GLuint, GLfloat *);
    void (KHRONOS_APIENTRY * tunisGetFloati_vEXT)(GLenum, GLuint, GLfloat *);
    void (KHRONOS_APIENTRY * tunisGetFloati_vNV)(GLenum, GLuint, GLfloat *);
    void (KHRONOS_APIENTRY * tunisGetFloati_vOES)(GLenum, GLuint, GLfloat *);
    void (KHRONOS_APIENTRY * tunisGetFloatv)(GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * tunisGetFogFuncSGIS)(GLfloat *);
    GLint(KHRONOS_APIENTRY * tunisGetFragDataIndex)(GLuint, const GLchar *);
    GLint(KHRONOS_APIENTRY * tunisGetFragDataIndexEXT)(GLuint, const GLchar *);
    GLint(KHRONOS_APIENTRY * tunisGetFragDataLocation)(GLuint, const GLchar *);
    GLint(KHRONOS_APIENTRY * tunisGetFragDataLocationEXT)(GLuint, const GLchar *);
    void (KHRONOS_APIENTRY * tunisGetFragmentLightfvSGIX)(GLenum, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * tunisGetFragmentLightivSGIX)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetFragmentMaterialfvSGIX)(GLenum, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * tunisGetFragmentMaterialivSGIX)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetFramebufferAttachmentParameteriv)(GLenum, GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetFramebufferAttachmentParameterivEXT)(GLenum, GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetFramebufferAttachmentParameterivOES)(GLenum, GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetFramebufferParameterfvAMD)(GLenum, GLenum, GLuint, GLuint, GLsizei, GLfloat *);
    void (KHRONOS_APIENTRY * tunisGetFramebufferParameteriv)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetFramebufferParameterivEXT)(GLuint, GLenum, GLint *);
    GLsizei(KHRONOS_APIENTRY * tunisGetFramebufferPixelLocalStorageSizeEXT)(GLuint);
    GLenum(KHRONOS_APIENTRY * tunisGetGraphicsResetStatus)(void);
    GLenum(KHRONOS_APIENTRY * tunisGetGraphicsResetStatusARB)(void);
    GLenum(KHRONOS_APIENTRY * tunisGetGraphicsResetStatusEXT)(void);
    GLenum(KHRONOS_APIENTRY * tunisGetGraphicsResetStatusKHR)(void);
    GLhandleARB(KHRONOS_APIENTRY * tunisGetHandleARB)(GLenum);
    void (KHRONOS_APIENTRY * tunisGetHistogram)(GLenum, GLboolean, GLenum, GLenum, void *);
    void (KHRONOS_APIENTRY * tunisGetHistogramEXT)(GLenum, GLboolean, GLenum, GLenum, void *);
    void (KHRONOS_APIENTRY * tunisGetHistogramParameterfv)(GLenum, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * tunisGetHistogramParameterfvEXT)(GLenum, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * tunisGetHistogramParameteriv)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetHistogramParameterivEXT)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetHistogramParameterxvOES)(GLenum, GLenum, GLfixed *);
    GLuint64(KHRONOS_APIENTRY * tunisGetImageHandleARB)(GLuint, GLint, GLboolean, GLint, GLenum);
    GLuint64(KHRONOS_APIENTRY * tunisGetImageHandleNV)(GLuint, GLint, GLboolean, GLint, GLenum);
    void (KHRONOS_APIENTRY * tunisGetImageTransformParameterfvHP)(GLenum, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * tunisGetImageTransformParameterivHP)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetInfoLogARB)(GLhandleARB, GLsizei, GLsizei *, GLcharARB *);
    GLint(KHRONOS_APIENTRY * tunisGetInstrumentsSGIX)(void);
    void (KHRONOS_APIENTRY * tunisGetInteger64i_v)(GLenum, GLuint, GLint64 *);
    void (KHRONOS_APIENTRY * tunisGetInteger64v)(GLenum, GLint64 *);
    void (KHRONOS_APIENTRY * tunisGetInteger64vAPPLE)(GLenum, GLint64 *);
    void (KHRONOS_APIENTRY * tunisGetIntegerIndexedvEXT)(GLenum, GLuint, GLint *);
    void (KHRONOS_APIENTRY * tunisGetIntegeri_v)(GLenum, GLuint, GLint *);
    void (KHRONOS_APIENTRY * tunisGetIntegeri_vEXT)(GLenum, GLuint, GLint *);
    void (KHRONOS_APIENTRY * tunisGetIntegerui64i_vNV)(GLenum, GLuint, GLuint64EXT *);
    void (KHRONOS_APIENTRY * tunisGetIntegerui64vNV)(GLenum, GLuint64EXT *);
    void (KHRONOS_APIENTRY * tunisGetIntegerv)(GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetInternalformatSampleivNV)(GLenum, GLenum, GLsizei, GLenum, GLsizei, GLint *);
    void (KHRONOS_APIENTRY * tunisGetInternalformati64v)(GLenum, GLenum, GLenum, GLsizei, GLint64 *);
    void (KHRONOS_APIENTRY * tunisGetInternalformativ)(GLenum, GLenum, GLenum, GLsizei, GLint *);
    void (KHRONOS_APIENTRY * tunisGetInvariantBooleanvEXT)(GLuint, GLenum, GLboolean *);
    void (KHRONOS_APIENTRY * tunisGetInvariantFloatvEXT)(GLuint, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * tunisGetInvariantIntegervEXT)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetLightfv)(GLenum, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * tunisGetLightiv)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetLightxOES)(GLenum, GLenum, GLfixed *);
    void (KHRONOS_APIENTRY * tunisGetLightxv)(GLenum, GLenum, GLfixed *);
    void (KHRONOS_APIENTRY * tunisGetLightxvOES)(GLenum, GLenum, GLfixed *);
    void (KHRONOS_APIENTRY * tunisGetListParameterfvSGIX)(GLuint, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * tunisGetListParameterivSGIX)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetLocalConstantBooleanvEXT)(GLuint, GLenum, GLboolean *);
    void (KHRONOS_APIENTRY * tunisGetLocalConstantFloatvEXT)(GLuint, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * tunisGetLocalConstantIntegervEXT)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetMapAttribParameterfvNV)(GLenum, GLuint, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * tunisGetMapAttribParameterivNV)(GLenum, GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetMapControlPointsNV)(GLenum, GLuint, GLenum, GLsizei, GLsizei, GLboolean, void *);
    void (KHRONOS_APIENTRY * tunisGetMapParameterfvNV)(GLenum, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * tunisGetMapParameterivNV)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetMapdv)(GLenum, GLenum, GLdouble *);
    void (KHRONOS_APIENTRY * tunisGetMapfv)(GLenum, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * tunisGetMapiv)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetMapxvOES)(GLenum, GLenum, GLfixed *);
    void (KHRONOS_APIENTRY * tunisGetMaterialfv)(GLenum, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * tunisGetMaterialiv)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetMaterialxOES)(GLenum, GLenum, GLfixed);
    void (KHRONOS_APIENTRY * tunisGetMaterialxv)(GLenum, GLenum, GLfixed *);
    void (KHRONOS_APIENTRY * tunisGetMaterialxvOES)(GLenum, GLenum, GLfixed *);
    void (KHRONOS_APIENTRY * tunisGetMemoryObjectParameterivEXT)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetMinmax)(GLenum, GLboolean, GLenum, GLenum, void *);
    void (KHRONOS_APIENTRY * tunisGetMinmaxEXT)(GLenum, GLboolean, GLenum, GLenum, void *);
    void (KHRONOS_APIENTRY * tunisGetMinmaxParameterfv)(GLenum, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * tunisGetMinmaxParameterfvEXT)(GLenum, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * tunisGetMinmaxParameteriv)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetMinmaxParameterivEXT)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetMultiTexEnvfvEXT)(GLenum, GLenum, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * tunisGetMultiTexEnvivEXT)(GLenum, GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetMultiTexGendvEXT)(GLenum, GLenum, GLenum, GLdouble *);
    void (KHRONOS_APIENTRY * tunisGetMultiTexGenfvEXT)(GLenum, GLenum, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * tunisGetMultiTexGenivEXT)(GLenum, GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetMultiTexImageEXT)(GLenum, GLenum, GLint, GLenum, GLenum, void *);
    void (KHRONOS_APIENTRY * tunisGetMultiTexLevelParameterfvEXT)(GLenum, GLenum, GLint, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * tunisGetMultiTexLevelParameterivEXT)(GLenum, GLenum, GLint, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetMultiTexParameterIivEXT)(GLenum, GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetMultiTexParameterIuivEXT)(GLenum, GLenum, GLenum, GLuint *);
    void (KHRONOS_APIENTRY * tunisGetMultiTexParameterfvEXT)(GLenum, GLenum, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * tunisGetMultiTexParameterivEXT)(GLenum, GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetMultisamplefv)(GLenum, GLuint, GLfloat *);
    void (KHRONOS_APIENTRY * tunisGetMultisamplefvNV)(GLenum, GLuint, GLfloat *);
    void (KHRONOS_APIENTRY * tunisGetNamedBufferParameteri64v)(GLuint, GLenum, GLint64 *);
    void (KHRONOS_APIENTRY * tunisGetNamedBufferParameteriv)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetNamedBufferParameterivEXT)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetNamedBufferParameterui64vNV)(GLuint, GLenum, GLuint64EXT *);
    void (KHRONOS_APIENTRY * tunisGetNamedBufferPointerv)(GLuint, GLenum, void **);
    void (KHRONOS_APIENTRY * tunisGetNamedBufferPointervEXT)(GLuint, GLenum, void **);
    void (KHRONOS_APIENTRY * tunisGetNamedBufferSubData)(GLuint, GLintptr, GLsizeiptr, void *);
    void (KHRONOS_APIENTRY * tunisGetNamedBufferSubDataEXT)(GLuint, GLintptr, GLsizeiptr, void *);
    void (KHRONOS_APIENTRY * tunisGetNamedFramebufferAttachmentParameteriv)(GLuint, GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetNamedFramebufferAttachmentParameterivEXT)(GLuint, GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetNamedFramebufferParameterfvAMD)(GLuint, GLenum, GLuint, GLuint, GLsizei, GLfloat *);
    void (KHRONOS_APIENTRY * tunisGetNamedFramebufferParameteriv)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetNamedFramebufferParameterivEXT)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetNamedProgramLocalParameterIivEXT)(GLuint, GLenum, GLuint, GLint *);
    void (KHRONOS_APIENTRY * tunisGetNamedProgramLocalParameterIuivEXT)(GLuint, GLenum, GLuint, GLuint *);
    void (KHRONOS_APIENTRY * tunisGetNamedProgramLocalParameterdvEXT)(GLuint, GLenum, GLuint, GLdouble *);
    void (KHRONOS_APIENTRY * tunisGetNamedProgramLocalParameterfvEXT)(GLuint, GLenum, GLuint, GLfloat *);
    void (KHRONOS_APIENTRY * tunisGetNamedProgramStringEXT)(GLuint, GLenum, GLenum, void *);
    void (KHRONOS_APIENTRY * tunisGetNamedProgramivEXT)(GLuint, GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetNamedRenderbufferParameteriv)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetNamedRenderbufferParameterivEXT)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetNamedStringARB)(GLint, const GLchar *, GLsizei, GLint *, GLchar *);
    void (KHRONOS_APIENTRY * tunisGetNamedStringivARB)(GLint, const GLchar *, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetNextPerfQueryIdINTEL)(GLuint, GLuint *);
    void (KHRONOS_APIENTRY * tunisGetObjectBufferfvATI)(GLuint, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * tunisGetObjectBufferivATI)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetObjectLabel)(GLenum, GLuint, GLsizei, GLsizei *, GLchar *);
    void (KHRONOS_APIENTRY * tunisGetObjectLabelEXT)(GLenum, GLuint, GLsizei, GLsizei *, GLchar *);
    void (KHRONOS_APIENTRY * tunisGetObjectLabelKHR)(GLenum, GLuint, GLsizei, GLsizei *, GLchar *);
    void (KHRONOS_APIENTRY * tunisGetObjectParameterfvARB)(GLhandleARB, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * tunisGetObjectParameterivAPPLE)(GLenum, GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetObjectParameterivARB)(GLhandleARB, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetObjectPtrLabel)(const void *, GLsizei, GLsizei *, GLchar *);
    void (KHRONOS_APIENTRY * tunisGetObjectPtrLabelKHR)(const void *, GLsizei, GLsizei *, GLchar *);
    void (KHRONOS_APIENTRY * tunisGetOcclusionQueryivNV)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetOcclusionQueryuivNV)(GLuint, GLenum, GLuint *);
    void (KHRONOS_APIENTRY * tunisGetPathColorGenfvNV)(GLenum, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * tunisGetPathColorGenivNV)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetPathCommandsNV)(GLuint, GLubyte *);
    void (KHRONOS_APIENTRY * tunisGetPathCoordsNV)(GLuint, GLfloat *);
    void (KHRONOS_APIENTRY * tunisGetPathDashArrayNV)(GLuint, GLfloat *);
    GLfloat(KHRONOS_APIENTRY * tunisGetPathLengthNV)(GLuint, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * tunisGetPathMetricRangeNV)(GLbitfield, GLuint, GLsizei, GLsizei, GLfloat *);
    void (KHRONOS_APIENTRY * tunisGetPathMetricsNV)(GLbitfield, GLsizei, GLenum, const void *, GLuint, GLsizei, GLfloat *);
    void (KHRONOS_APIENTRY * tunisGetPathParameterfvNV)(GLuint, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * tunisGetPathParameterivNV)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetPathSpacingNV)(GLenum, GLsizei, GLenum, const void *, GLuint, GLfloat, GLfloat, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * tunisGetPathTexGenfvNV)(GLenum, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * tunisGetPathTexGenivNV)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetPerfCounterInfoINTEL)(GLuint, GLuint, GLuint, GLchar *, GLuint, GLchar *, GLuint *, GLuint *, GLuint *, GLuint *, GLuint64 *);
    void (KHRONOS_APIENTRY * tunisGetPerfMonitorCounterDataAMD)(GLuint, GLenum, GLsizei, GLuint *, GLint *);
    void (KHRONOS_APIENTRY * tunisGetPerfMonitorCounterInfoAMD)(GLuint, GLuint, GLenum, void *);
    void (KHRONOS_APIENTRY * tunisGetPerfMonitorCounterStringAMD)(GLuint, GLuint, GLsizei, GLsizei *, GLchar *);
    void (KHRONOS_APIENTRY * tunisGetPerfMonitorCountersAMD)(GLuint, GLint *, GLint *, GLsizei, GLuint *);
    void (KHRONOS_APIENTRY * tunisGetPerfMonitorGroupStringAMD)(GLuint, GLsizei, GLsizei *, GLchar *);
    void (KHRONOS_APIENTRY * tunisGetPerfMonitorGroupsAMD)(GLint *, GLsizei, GLuint *);
    void (KHRONOS_APIENTRY * tunisGetPerfQueryDataINTEL)(GLuint, GLuint, GLsizei, void *, GLuint *);
    void (KHRONOS_APIENTRY * tunisGetPerfQueryIdByNameINTEL)(GLchar *, GLuint *);
    void (KHRONOS_APIENTRY * tunisGetPerfQueryInfoINTEL)(GLuint, GLuint, GLchar *, GLuint *, GLuint *, GLuint *, GLuint *);
    void (KHRONOS_APIENTRY * tunisGetPixelMapfv)(GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * tunisGetPixelMapuiv)(GLenum, GLuint *);
    void (KHRONOS_APIENTRY * tunisGetPixelMapusv)(GLenum, GLushort *);
    void (KHRONOS_APIENTRY * tunisGetPixelMapxv)(GLenum, GLint, GLfixed *);
    void (KHRONOS_APIENTRY * tunisGetPixelTexGenParameterfvSGIS)(GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * tunisGetPixelTexGenParameterivSGIS)(GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetPixelTransformParameterfvEXT)(GLenum, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * tunisGetPixelTransformParameterivEXT)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetPointerIndexedvEXT)(GLenum, GLuint, void **);
    void (KHRONOS_APIENTRY * tunisGetPointeri_vEXT)(GLenum, GLuint, void **);
    void (KHRONOS_APIENTRY * tunisGetPointerv)(GLenum, void **);
    void (KHRONOS_APIENTRY * tunisGetPointervEXT)(GLenum, void **);
    void (KHRONOS_APIENTRY * tunisGetPointervKHR)(GLenum, void **);
    void (KHRONOS_APIENTRY * tunisGetPolygonStipple)(GLubyte *);
    void (KHRONOS_APIENTRY * tunisGetProgramBinary)(GLuint, GLsizei, GLsizei *, GLenum *, void *);
    void (KHRONOS_APIENTRY * tunisGetProgramBinaryOES)(GLuint, GLsizei, GLsizei *, GLenum *, void *);
    void (KHRONOS_APIENTRY * tunisGetProgramEnvParameterIivNV)(GLenum, GLuint, GLint *);
    void (KHRONOS_APIENTRY * tunisGetProgramEnvParameterIuivNV)(GLenum, GLuint, GLuint *);
    void (KHRONOS_APIENTRY * tunisGetProgramEnvParameterdvARB)(GLenum, GLuint, GLdouble *);
    void (KHRONOS_APIENTRY * tunisGetProgramEnvParameterfvARB)(GLenum, GLuint, GLfloat *);
    void (KHRONOS_APIENTRY * tunisGetProgramInfoLog)(GLuint, GLsizei, GLsizei *, GLchar *);
    void (KHRONOS_APIENTRY * tunisGetProgramInterfaceiv)(GLuint, GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetProgramLocalParameterIivNV)(GLenum, GLuint, GLint *);
    void (KHRONOS_APIENTRY * tunisGetProgramLocalParameterIuivNV)(GLenum, GLuint, GLuint *);
    void (KHRONOS_APIENTRY * tunisGetProgramLocalParameterdvARB)(GLenum, GLuint, GLdouble *);
    void (KHRONOS_APIENTRY * tunisGetProgramLocalParameterfvARB)(GLenum, GLuint, GLfloat *);
    void (KHRONOS_APIENTRY * tunisGetProgramNamedParameterdvNV)(GLuint, GLsizei, const GLubyte *, GLdouble *);
    void (KHRONOS_APIENTRY * tunisGetProgramNamedParameterfvNV)(GLuint, GLsizei, const GLubyte *, GLfloat *);
    void (KHRONOS_APIENTRY * tunisGetProgramParameterdvNV)(GLenum, GLuint, GLenum, GLdouble *);
    void (KHRONOS_APIENTRY * tunisGetProgramParameterfvNV)(GLenum, GLuint, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * tunisGetProgramPipelineInfoLog)(GLuint, GLsizei, GLsizei *, GLchar *);
    void (KHRONOS_APIENTRY * tunisGetProgramPipelineInfoLogEXT)(GLuint, GLsizei, GLsizei *, GLchar *);
    void (KHRONOS_APIENTRY * tunisGetProgramPipelineiv)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetProgramPipelineivEXT)(GLuint, GLenum, GLint *);
    GLuint(KHRONOS_APIENTRY * tunisGetProgramResourceIndex)(GLuint, GLenum, const GLchar *);
    GLint(KHRONOS_APIENTRY * tunisGetProgramResourceLocation)(GLuint, GLenum, const GLchar *);
    GLint(KHRONOS_APIENTRY * tunisGetProgramResourceLocationIndex)(GLuint, GLenum, const GLchar *);
    GLint(KHRONOS_APIENTRY * tunisGetProgramResourceLocationIndexEXT)(GLuint, GLenum, const GLchar *);
    void (KHRONOS_APIENTRY * tunisGetProgramResourceName)(GLuint, GLenum, GLuint, GLsizei, GLsizei *, GLchar *);
    void (KHRONOS_APIENTRY * tunisGetProgramResourcefvNV)(GLuint, GLenum, GLuint, GLsizei, const GLenum *, GLsizei, GLsizei *, GLfloat *);
    void (KHRONOS_APIENTRY * tunisGetProgramResourceiv)(GLuint, GLenum, GLuint, GLsizei, const GLenum *, GLsizei, GLsizei *, GLint *);
    void (KHRONOS_APIENTRY * tunisGetProgramStageiv)(GLuint, GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetProgramStringARB)(GLenum, GLenum, void *);
    void (KHRONOS_APIENTRY * tunisGetProgramStringNV)(GLuint, GLenum, GLubyte *);
    void (KHRONOS_APIENTRY * tunisGetProgramSubroutineParameteruivNV)(GLenum, GLuint, GLuint *);
    void (KHRONOS_APIENTRY * tunisGetProgramiv)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetProgramivARB)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetProgramivNV)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetQueryBufferObjecti64v)(GLuint, GLuint, GLenum, GLintptr);
    void (KHRONOS_APIENTRY * tunisGetQueryBufferObjectiv)(GLuint, GLuint, GLenum, GLintptr);
    void (KHRONOS_APIENTRY * tunisGetQueryBufferObjectui64v)(GLuint, GLuint, GLenum, GLintptr);
    void (KHRONOS_APIENTRY * tunisGetQueryBufferObjectuiv)(GLuint, GLuint, GLenum, GLintptr);
    void (KHRONOS_APIENTRY * tunisGetQueryIndexediv)(GLenum, GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetQueryObjecti64v)(GLuint, GLenum, GLint64 *);
    void (KHRONOS_APIENTRY * tunisGetQueryObjecti64vEXT)(GLuint, GLenum, GLint64 *);
    void (KHRONOS_APIENTRY * tunisGetQueryObjectiv)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetQueryObjectivARB)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetQueryObjectivEXT)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetQueryObjectui64v)(GLuint, GLenum, GLuint64 *);
    void (KHRONOS_APIENTRY * tunisGetQueryObjectui64vEXT)(GLuint, GLenum, GLuint64 *);
    void (KHRONOS_APIENTRY * tunisGetQueryObjectuiv)(GLuint, GLenum, GLuint *);
    void (KHRONOS_APIENTRY * tunisGetQueryObjectuivARB)(GLuint, GLenum, GLuint *);
    void (KHRONOS_APIENTRY * tunisGetQueryObjectuivEXT)(GLuint, GLenum, GLuint *);
    void (KHRONOS_APIENTRY * tunisGetQueryiv)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetQueryivARB)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetQueryivEXT)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetRenderbufferParameteriv)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetRenderbufferParameterivEXT)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetRenderbufferParameterivOES)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetSamplerParameterIiv)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetSamplerParameterIivEXT)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetSamplerParameterIivOES)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetSamplerParameterIuiv)(GLuint, GLenum, GLuint *);
    void (KHRONOS_APIENTRY * tunisGetSamplerParameterIuivEXT)(GLuint, GLenum, GLuint *);
    void (KHRONOS_APIENTRY * tunisGetSamplerParameterIuivOES)(GLuint, GLenum, GLuint *);
    void (KHRONOS_APIENTRY * tunisGetSamplerParameterfv)(GLuint, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * tunisGetSamplerParameteriv)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetSemaphoreParameterui64vEXT)(GLuint, GLenum, GLuint64 *);
    void (KHRONOS_APIENTRY * tunisGetSeparableFilter)(GLenum, GLenum, GLenum, void *, void *, void *);
    void (KHRONOS_APIENTRY * tunisGetSeparableFilterEXT)(GLenum, GLenum, GLenum, void *, void *, void *);
    void (KHRONOS_APIENTRY * tunisGetShaderInfoLog)(GLuint, GLsizei, GLsizei *, GLchar *);
    void (KHRONOS_APIENTRY * tunisGetShaderPrecisionFormat)(GLenum, GLenum, GLint *, GLint *);
    void (KHRONOS_APIENTRY * tunisGetShaderSource)(GLuint, GLsizei, GLsizei *, GLchar *);
    void (KHRONOS_APIENTRY * tunisGetShaderSourceARB)(GLhandleARB, GLsizei, GLsizei *, GLcharARB *);
    void (KHRONOS_APIENTRY * tunisGetShaderiv)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetSharpenTexFuncSGIS)(GLenum, GLfloat *);
    GLushort(KHRONOS_APIENTRY * tunisGetStageIndexNV)(GLenum);
    const GLubyte *(KHRONOS_APIENTRY * tunisGetString)(GLenum);
    const GLubyte *(KHRONOS_APIENTRY * tunisGetStringi)(GLenum, GLuint);
    GLuint(KHRONOS_APIENTRY * tunisGetSubroutineIndex)(GLuint, GLenum, const GLchar *);
    GLint(KHRONOS_APIENTRY * tunisGetSubroutineUniformLocation)(GLuint, GLenum, const GLchar *);
    void (KHRONOS_APIENTRY * tunisGetSynciv)(GLsync, GLenum, GLsizei, GLsizei *, GLint *);
    void (KHRONOS_APIENTRY * tunisGetSyncivAPPLE)(GLsync, GLenum, GLsizei, GLsizei *, GLint *);
    void (KHRONOS_APIENTRY * tunisGetTexBumpParameterfvATI)(GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * tunisGetTexBumpParameterivATI)(GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetTexEnvfv)(GLenum, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * tunisGetTexEnviv)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetTexEnvxv)(GLenum, GLenum, GLfixed *);
    void (KHRONOS_APIENTRY * tunisGetTexEnvxvOES)(GLenum, GLenum, GLfixed *);
    void (KHRONOS_APIENTRY * tunisGetTexFilterFuncSGIS)(GLenum, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * tunisGetTexGendv)(GLenum, GLenum, GLdouble *);
    void (KHRONOS_APIENTRY * tunisGetTexGenfv)(GLenum, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * tunisGetTexGenfvOES)(GLenum, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * tunisGetTexGeniv)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetTexGenivOES)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetTexGenxvOES)(GLenum, GLenum, GLfixed *);
    void (KHRONOS_APIENTRY * tunisGetTexImage)(GLenum, GLint, GLenum, GLenum, void *);
    void (KHRONOS_APIENTRY * tunisGetTexLevelParameterfv)(GLenum, GLint, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * tunisGetTexLevelParameteriv)(GLenum, GLint, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetTexLevelParameterxvOES)(GLenum, GLint, GLenum, GLfixed *);
    void (KHRONOS_APIENTRY * tunisGetTexParameterIiv)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetTexParameterIivEXT)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetTexParameterIivOES)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetTexParameterIuiv)(GLenum, GLenum, GLuint *);
    void (KHRONOS_APIENTRY * tunisGetTexParameterIuivEXT)(GLenum, GLenum, GLuint *);
    void (KHRONOS_APIENTRY * tunisGetTexParameterIuivOES)(GLenum, GLenum, GLuint *);
    void (KHRONOS_APIENTRY * tunisGetTexParameterPointervAPPLE)(GLenum, GLenum, void **);
    void (KHRONOS_APIENTRY * tunisGetTexParameterfv)(GLenum, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * tunisGetTexParameteriv)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetTexParameterxv)(GLenum, GLenum, GLfixed *);
    void (KHRONOS_APIENTRY * tunisGetTexParameterxvOES)(GLenum, GLenum, GLfixed *);
    GLuint64(KHRONOS_APIENTRY * tunisGetTextureHandleARB)(GLuint);
    GLuint64(KHRONOS_APIENTRY * tunisGetTextureHandleIMG)(GLuint);
    GLuint64(KHRONOS_APIENTRY * tunisGetTextureHandleNV)(GLuint);
    void (KHRONOS_APIENTRY * tunisGetTextureImage)(GLuint, GLint, GLenum, GLenum, GLsizei, void *);
    void (KHRONOS_APIENTRY * tunisGetTextureImageEXT)(GLuint, GLenum, GLint, GLenum, GLenum, void *);
    void (KHRONOS_APIENTRY * tunisGetTextureLevelParameterfv)(GLuint, GLint, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * tunisGetTextureLevelParameterfvEXT)(GLuint, GLenum, GLint, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * tunisGetTextureLevelParameteriv)(GLuint, GLint, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetTextureLevelParameterivEXT)(GLuint, GLenum, GLint, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetTextureParameterIiv)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetTextureParameterIivEXT)(GLuint, GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetTextureParameterIuiv)(GLuint, GLenum, GLuint *);
    void (KHRONOS_APIENTRY * tunisGetTextureParameterIuivEXT)(GLuint, GLenum, GLenum, GLuint *);
    void (KHRONOS_APIENTRY * tunisGetTextureParameterfv)(GLuint, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * tunisGetTextureParameterfvEXT)(GLuint, GLenum, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * tunisGetTextureParameteriv)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetTextureParameterivEXT)(GLuint, GLenum, GLenum, GLint *);
    GLuint64(KHRONOS_APIENTRY * tunisGetTextureSamplerHandleARB)(GLuint, GLuint);
    GLuint64(KHRONOS_APIENTRY * tunisGetTextureSamplerHandleIMG)(GLuint, GLuint);
    GLuint64(KHRONOS_APIENTRY * tunisGetTextureSamplerHandleNV)(GLuint, GLuint);
    void (KHRONOS_APIENTRY * tunisGetTextureSubImage)(GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, GLsizei, void *);
    void (KHRONOS_APIENTRY * tunisGetTrackMatrixivNV)(GLenum, GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetTransformFeedbackVarying)(GLuint, GLuint, GLsizei, GLsizei *, GLsizei *, GLenum *, GLchar *);
    void (KHRONOS_APIENTRY * tunisGetTransformFeedbackVaryingEXT)(GLuint, GLuint, GLsizei, GLsizei *, GLsizei *, GLenum *, GLchar *);
    void (KHRONOS_APIENTRY * tunisGetTransformFeedbackVaryingNV)(GLuint, GLuint, GLint *);
    void (KHRONOS_APIENTRY * tunisGetTransformFeedbacki64_v)(GLuint, GLenum, GLuint, GLint64 *);
    void (KHRONOS_APIENTRY * tunisGetTransformFeedbacki_v)(GLuint, GLenum, GLuint, GLint *);
    void (KHRONOS_APIENTRY * tunisGetTransformFeedbackiv)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetTranslatedShaderSourceANGLE)(GLuint, GLsizei, GLsizei *, GLchar *);
    GLuint(KHRONOS_APIENTRY * tunisGetUniformBlockIndex)(GLuint, const GLchar *);
    GLint(KHRONOS_APIENTRY * tunisGetUniformBufferSizeEXT)(GLuint, GLint);
    void (KHRONOS_APIENTRY * tunisGetUniformIndices)(GLuint, GLsizei, const GLchar *const*, GLuint *);
    GLint(KHRONOS_APIENTRY * tunisGetUniformLocation)(GLuint, const GLchar *);
    GLint(KHRONOS_APIENTRY * tunisGetUniformLocationARB)(GLhandleARB, const GLcharARB *);
    GLintptr(KHRONOS_APIENTRY * tunisGetUniformOffsetEXT)(GLuint, GLint);
    void (KHRONOS_APIENTRY * tunisGetUniformSubroutineuiv)(GLenum, GLint, GLuint *);
    void (KHRONOS_APIENTRY * tunisGetUniformdv)(GLuint, GLint, GLdouble *);
    void (KHRONOS_APIENTRY * tunisGetUniformfv)(GLuint, GLint, GLfloat *);
    void (KHRONOS_APIENTRY * tunisGetUniformfvARB)(GLhandleARB, GLint, GLfloat *);
    void (KHRONOS_APIENTRY * tunisGetUniformi64vARB)(GLuint, GLint, GLint64 *);
    void (KHRONOS_APIENTRY * tunisGetUniformi64vNV)(GLuint, GLint, GLint64EXT *);
    void (KHRONOS_APIENTRY * tunisGetUniformiv)(GLuint, GLint, GLint *);
    void (KHRONOS_APIENTRY * tunisGetUniformivARB)(GLhandleARB, GLint, GLint *);
    void (KHRONOS_APIENTRY * tunisGetUniformui64vARB)(GLuint, GLint, GLuint64 *);
    void (KHRONOS_APIENTRY * tunisGetUniformui64vNV)(GLuint, GLint, GLuint64EXT *);
    void (KHRONOS_APIENTRY * tunisGetUniformuiv)(GLuint, GLint, GLuint *);
    void (KHRONOS_APIENTRY * tunisGetUniformuivEXT)(GLuint, GLint, GLuint *);
    void (KHRONOS_APIENTRY * tunisGetUnsignedBytei_vEXT)(GLenum, GLuint, GLubyte *);
    void (KHRONOS_APIENTRY * tunisGetUnsignedBytevEXT)(GLenum, GLubyte *);
    void (KHRONOS_APIENTRY * tunisGetVariantArrayObjectfvATI)(GLuint, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * tunisGetVariantArrayObjectivATI)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetVariantBooleanvEXT)(GLuint, GLenum, GLboolean *);
    void (KHRONOS_APIENTRY * tunisGetVariantFloatvEXT)(GLuint, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * tunisGetVariantIntegervEXT)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetVariantPointervEXT)(GLuint, GLenum, void **);
    GLint(KHRONOS_APIENTRY * tunisGetVaryingLocationNV)(GLuint, const GLchar *);
    void (KHRONOS_APIENTRY * tunisGetVertexArrayIndexed64iv)(GLuint, GLuint, GLenum, GLint64 *);
    void (KHRONOS_APIENTRY * tunisGetVertexArrayIndexediv)(GLuint, GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetVertexArrayIntegeri_vEXT)(GLuint, GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetVertexArrayIntegervEXT)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetVertexArrayPointeri_vEXT)(GLuint, GLuint, GLenum, void **);
    void (KHRONOS_APIENTRY * tunisGetVertexArrayPointervEXT)(GLuint, GLenum, void **);
    void (KHRONOS_APIENTRY * tunisGetVertexArrayiv)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetVertexAttribArrayObjectfvATI)(GLuint, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * tunisGetVertexAttribArrayObjectivATI)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetVertexAttribIiv)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetVertexAttribIivEXT)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetVertexAttribIuiv)(GLuint, GLenum, GLuint *);
    void (KHRONOS_APIENTRY * tunisGetVertexAttribIuivEXT)(GLuint, GLenum, GLuint *);
    void (KHRONOS_APIENTRY * tunisGetVertexAttribLdv)(GLuint, GLenum, GLdouble *);
    void (KHRONOS_APIENTRY * tunisGetVertexAttribLdvEXT)(GLuint, GLenum, GLdouble *);
    void (KHRONOS_APIENTRY * tunisGetVertexAttribLi64vNV)(GLuint, GLenum, GLint64EXT *);
    void (KHRONOS_APIENTRY * tunisGetVertexAttribLui64vARB)(GLuint, GLenum, GLuint64EXT *);
    void (KHRONOS_APIENTRY * tunisGetVertexAttribLui64vNV)(GLuint, GLenum, GLuint64EXT *);
    void (KHRONOS_APIENTRY * tunisGetVertexAttribPointerv)(GLuint, GLenum, void **);
    void (KHRONOS_APIENTRY * tunisGetVertexAttribPointervARB)(GLuint, GLenum, void **);
    void (KHRONOS_APIENTRY * tunisGetVertexAttribPointervNV)(GLuint, GLenum, void **);
    void (KHRONOS_APIENTRY * tunisGetVertexAttribdv)(GLuint, GLenum, GLdouble *);
    void (KHRONOS_APIENTRY * tunisGetVertexAttribdvARB)(GLuint, GLenum, GLdouble *);
    void (KHRONOS_APIENTRY * tunisGetVertexAttribdvNV)(GLuint, GLenum, GLdouble *);
    void (KHRONOS_APIENTRY * tunisGetVertexAttribfv)(GLuint, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * tunisGetVertexAttribfvARB)(GLuint, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * tunisGetVertexAttribfvNV)(GLuint, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * tunisGetVertexAttribiv)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetVertexAttribivARB)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetVertexAttribivNV)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetVideoCaptureStreamdvNV)(GLuint, GLuint, GLenum, GLdouble *);
    void (KHRONOS_APIENTRY * tunisGetVideoCaptureStreamfvNV)(GLuint, GLuint, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * tunisGetVideoCaptureStreamivNV)(GLuint, GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetVideoCaptureivNV)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetVideoi64vNV)(GLuint, GLenum, GLint64EXT *);
    void (KHRONOS_APIENTRY * tunisGetVideoivNV)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetVideoui64vNV)(GLuint, GLenum, GLuint64EXT *);
    void (KHRONOS_APIENTRY * tunisGetVideouivNV)(GLuint, GLenum, GLuint *);
    GLVULKANPROCNV(KHRONOS_APIENTRY * tunisGetVkProcAddrNV)(const GLchar *);
    void (KHRONOS_APIENTRY * tunisGetnColorTable)(GLenum, GLenum, GLenum, GLsizei, void *);
    void (KHRONOS_APIENTRY * tunisGetnColorTableARB)(GLenum, GLenum, GLenum, GLsizei, void *);
    void (KHRONOS_APIENTRY * tunisGetnCompressedTexImage)(GLenum, GLint, GLsizei, void *);
    void (KHRONOS_APIENTRY * tunisGetnCompressedTexImageARB)(GLenum, GLint, GLsizei, void *);
    void (KHRONOS_APIENTRY * tunisGetnConvolutionFilter)(GLenum, GLenum, GLenum, GLsizei, void *);
    void (KHRONOS_APIENTRY * tunisGetnConvolutionFilterARB)(GLenum, GLenum, GLenum, GLsizei, void *);
    void (KHRONOS_APIENTRY * tunisGetnHistogram)(GLenum, GLboolean, GLenum, GLenum, GLsizei, void *);
    void (KHRONOS_APIENTRY * tunisGetnHistogramARB)(GLenum, GLboolean, GLenum, GLenum, GLsizei, void *);
    void (KHRONOS_APIENTRY * tunisGetnMapdv)(GLenum, GLenum, GLsizei, GLdouble *);
    void (KHRONOS_APIENTRY * tunisGetnMapdvARB)(GLenum, GLenum, GLsizei, GLdouble *);
    void (KHRONOS_APIENTRY * tunisGetnMapfv)(GLenum, GLenum, GLsizei, GLfloat *);
    void (KHRONOS_APIENTRY * tunisGetnMapfvARB)(GLenum, GLenum, GLsizei, GLfloat *);
    void (KHRONOS_APIENTRY * tunisGetnMapiv)(GLenum, GLenum, GLsizei, GLint *);
    void (KHRONOS_APIENTRY * tunisGetnMapivARB)(GLenum, GLenum, GLsizei, GLint *);
    void (KHRONOS_APIENTRY * tunisGetnMinmax)(GLenum, GLboolean, GLenum, GLenum, GLsizei, void *);
    void (KHRONOS_APIENTRY * tunisGetnMinmaxARB)(GLenum, GLboolean, GLenum, GLenum, GLsizei, void *);
    void (KHRONOS_APIENTRY * tunisGetnPixelMapfv)(GLenum, GLsizei, GLfloat *);
    void (KHRONOS_APIENTRY * tunisGetnPixelMapfvARB)(GLenum, GLsizei, GLfloat *);
    void (KHRONOS_APIENTRY * tunisGetnPixelMapuiv)(GLenum, GLsizei, GLuint *);
    void (KHRONOS_APIENTRY * tunisGetnPixelMapuivARB)(GLenum, GLsizei, GLuint *);
    void (KHRONOS_APIENTRY * tunisGetnPixelMapusv)(GLenum, GLsizei, GLushort *);
    void (KHRONOS_APIENTRY * tunisGetnPixelMapusvARB)(GLenum, GLsizei, GLushort *);
    void (KHRONOS_APIENTRY * tunisGetnPolygonStipple)(GLsizei, GLubyte *);
    void (KHRONOS_APIENTRY * tunisGetnPolygonStippleARB)(GLsizei, GLubyte *);
    void (KHRONOS_APIENTRY * tunisGetnSeparableFilter)(GLenum, GLenum, GLenum, GLsizei, void *, GLsizei, void *, void *);
    void (KHRONOS_APIENTRY * tunisGetnSeparableFilterARB)(GLenum, GLenum, GLenum, GLsizei, void *, GLsizei, void *, void *);
    void (KHRONOS_APIENTRY * tunisGetnTexImage)(GLenum, GLint, GLenum, GLenum, GLsizei, void *);
    void (KHRONOS_APIENTRY * tunisGetnTexImageARB)(GLenum, GLint, GLenum, GLenum, GLsizei, void *);
    void (KHRONOS_APIENTRY * tunisGetnUniformdv)(GLuint, GLint, GLsizei, GLdouble *);
    void (KHRONOS_APIENTRY * tunisGetnUniformdvARB)(GLuint, GLint, GLsizei, GLdouble *);
    void (KHRONOS_APIENTRY * tunisGetnUniformfv)(GLuint, GLint, GLsizei, GLfloat *);
    void (KHRONOS_APIENTRY * tunisGetnUniformfvARB)(GLuint, GLint, GLsizei, GLfloat *);
    void (KHRONOS_APIENTRY * tunisGetnUniformfvEXT)(GLuint, GLint, GLsizei, GLfloat *);
    void (KHRONOS_APIENTRY * tunisGetnUniformfvKHR)(GLuint, GLint, GLsizei, GLfloat *);
    void (KHRONOS_APIENTRY * tunisGetnUniformi64vARB)(GLuint, GLint, GLsizei, GLint64 *);
    void (KHRONOS_APIENTRY * tunisGetnUniformiv)(GLuint, GLint, GLsizei, GLint *);
    void (KHRONOS_APIENTRY * tunisGetnUniformivARB)(GLuint, GLint, GLsizei, GLint *);
    void (KHRONOS_APIENTRY * tunisGetnUniformivEXT)(GLuint, GLint, GLsizei, GLint *);
    void (KHRONOS_APIENTRY * tunisGetnUniformivKHR)(GLuint, GLint, GLsizei, GLint *);
    void (KHRONOS_APIENTRY * tunisGetnUniformui64vARB)(GLuint, GLint, GLsizei, GLuint64 *);
    void (KHRONOS_APIENTRY * tunisGetnUniformuiv)(GLuint, GLint, GLsizei, GLuint *);
    void (KHRONOS_APIENTRY * tunisGetnUniformuivARB)(GLuint, GLint, GLsizei, GLuint *);
    void (KHRONOS_APIENTRY * tunisGetnUniformuivKHR)(GLuint, GLint, GLsizei, GLuint *);
    void (KHRONOS_APIENTRY * tunisGlobalAlphaFactorbSUN)(GLbyte);
    void (KHRONOS_APIENTRY * tunisGlobalAlphaFactordSUN)(GLdouble);
    void (KHRONOS_APIENTRY * tunisGlobalAlphaFactorfSUN)(GLfloat);
    void (KHRONOS_APIENTRY * tunisGlobalAlphaFactoriSUN)(GLint);
    void (KHRONOS_APIENTRY * tunisGlobalAlphaFactorsSUN)(GLshort);
    void (KHRONOS_APIENTRY * tunisGlobalAlphaFactorubSUN)(GLubyte);
    void (KHRONOS_APIENTRY * tunisGlobalAlphaFactoruiSUN)(GLuint);
    void (KHRONOS_APIENTRY * tunisGlobalAlphaFactorusSUN)(GLushort);
    void (KHRONOS_APIENTRY * tunisHint)(GLenum, GLenum);
    void (KHRONOS_APIENTRY * tunisHintPGI)(GLenum, GLint);
    void (KHRONOS_APIENTRY * tunisHistogram)(GLenum, GLsizei, GLenum, GLboolean);
    void (KHRONOS_APIENTRY * tunisHistogramEXT)(GLenum, GLsizei, GLenum, GLboolean);
    void (KHRONOS_APIENTRY * tunisIglooInterfaceSGIX)(GLenum, const void *);
    void (KHRONOS_APIENTRY * tunisImageTransformParameterfHP)(GLenum, GLenum, GLfloat);
    void (KHRONOS_APIENTRY * tunisImageTransformParameterfvHP)(GLenum, GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisImageTransformParameteriHP)(GLenum, GLenum, GLint);
    void (KHRONOS_APIENTRY * tunisImageTransformParameterivHP)(GLenum, GLenum, const GLint *);
    void (KHRONOS_APIENTRY * tunisImportMemoryFdEXT)(GLuint, GLuint64, GLenum, GLint);
    void (KHRONOS_APIENTRY * tunisImportMemoryWin32HandleEXT)(GLuint, GLuint64, GLenum, void *);
    void (KHRONOS_APIENTRY * tunisImportMemoryWin32NameEXT)(GLuint, GLuint64, GLenum, const void *);
    void (KHRONOS_APIENTRY * tunisImportSemaphoreFdEXT)(GLuint, GLenum, GLint);
    void (KHRONOS_APIENTRY * tunisImportSemaphoreWin32HandleEXT)(GLuint, GLenum, void *);
    void (KHRONOS_APIENTRY * tunisImportSemaphoreWin32NameEXT)(GLuint, GLenum, const void *);
    GLsync(KHRONOS_APIENTRY * tunisImportSyncEXT)(GLenum, GLintptr, GLbitfield);
    void (KHRONOS_APIENTRY * tunisIndexFormatNV)(GLenum, GLsizei);
    void (KHRONOS_APIENTRY * tunisIndexFuncEXT)(GLenum, GLclampf);
    void (KHRONOS_APIENTRY * tunisIndexMask)(GLuint);
    void (KHRONOS_APIENTRY * tunisIndexMaterialEXT)(GLenum, GLenum);
    void (KHRONOS_APIENTRY * tunisIndexPointer)(GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY * tunisIndexPointerEXT)(GLenum, GLsizei, GLsizei, const void *);
    void (KHRONOS_APIENTRY * tunisIndexPointerListIBM)(GLenum, GLint, const void **, GLint);
    void (KHRONOS_APIENTRY * tunisIndexd)(GLdouble);
    void (KHRONOS_APIENTRY * tunisIndexdv)(const GLdouble *);
    void (KHRONOS_APIENTRY * tunisIndexf)(GLfloat);
    void (KHRONOS_APIENTRY * tunisIndexfv)(const GLfloat *);
    void (KHRONOS_APIENTRY * tunisIndexi)(GLint);
    void (KHRONOS_APIENTRY * tunisIndexiv)(const GLint *);
    void (KHRONOS_APIENTRY * tunisIndexs)(GLshort);
    void (KHRONOS_APIENTRY * tunisIndexsv)(const GLshort *);
    void (KHRONOS_APIENTRY * tunisIndexub)(GLubyte);
    void (KHRONOS_APIENTRY * tunisIndexubv)(const GLubyte *);
    void (KHRONOS_APIENTRY * tunisIndexxOES)(GLfixed);
    void (KHRONOS_APIENTRY * tunisIndexxvOES)(const GLfixed *);
    void (KHRONOS_APIENTRY * tunisInitNames)(void);
    void (KHRONOS_APIENTRY * tunisInsertComponentEXT)(GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY * tunisInsertEventMarkerEXT)(GLsizei, const GLchar *);
    void (KHRONOS_APIENTRY * tunisInstrumentsBufferSGIX)(GLsizei, GLint *);
    void (KHRONOS_APIENTRY * tunisInterleavedArrays)(GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY * tunisInterpolatePathsNV)(GLuint, GLuint, GLuint, GLfloat);
    void (KHRONOS_APIENTRY * tunisInvalidateBufferData)(GLuint);
    void (KHRONOS_APIENTRY * tunisInvalidateBufferSubData)(GLuint, GLintptr, GLsizeiptr);
    void (KHRONOS_APIENTRY * tunisInvalidateFramebuffer)(GLenum, GLsizei, const GLenum *);
    void (KHRONOS_APIENTRY * tunisInvalidateNamedFramebufferData)(GLuint, GLsizei, const GLenum *);
    void (KHRONOS_APIENTRY * tunisInvalidateNamedFramebufferSubData)(GLuint, GLsizei, const GLenum *, GLint, GLint, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * tunisInvalidateSubFramebuffer)(GLenum, GLsizei, const GLenum *, GLint, GLint, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * tunisInvalidateTexImage)(GLuint, GLint);
    void (KHRONOS_APIENTRY * tunisInvalidateTexSubImage)(GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei);
    GLboolean(KHRONOS_APIENTRY * tunisIsAsyncMarkerSGIX)(GLuint);
    GLboolean(KHRONOS_APIENTRY * tunisIsBuffer)(GLuint);
    GLboolean(KHRONOS_APIENTRY * tunisIsBufferARB)(GLuint);
    GLboolean(KHRONOS_APIENTRY * tunisIsBufferResidentNV)(GLenum);
    GLboolean(KHRONOS_APIENTRY * tunisIsCommandListNV)(GLuint);
    GLboolean(KHRONOS_APIENTRY * tunisIsEnabled)(GLenum);
    GLboolean(KHRONOS_APIENTRY * tunisIsEnabledIndexedEXT)(GLenum, GLuint);
    GLboolean(KHRONOS_APIENTRY * tunisIsEnabledi)(GLenum, GLuint);
    GLboolean(KHRONOS_APIENTRY * tunisIsEnablediEXT)(GLenum, GLuint);
    GLboolean(KHRONOS_APIENTRY * tunisIsEnablediNV)(GLenum, GLuint);
    GLboolean(KHRONOS_APIENTRY * tunisIsEnablediOES)(GLenum, GLuint);
    GLboolean(KHRONOS_APIENTRY * tunisIsFenceAPPLE)(GLuint);
    GLboolean(KHRONOS_APIENTRY * tunisIsFenceNV)(GLuint);
    GLboolean(KHRONOS_APIENTRY * tunisIsFramebuffer)(GLuint);
    GLboolean(KHRONOS_APIENTRY * tunisIsFramebufferEXT)(GLuint);
    GLboolean(KHRONOS_APIENTRY * tunisIsFramebufferOES)(GLuint);
    GLboolean(KHRONOS_APIENTRY * tunisIsImageHandleResidentARB)(GLuint64);
    GLboolean(KHRONOS_APIENTRY * tunisIsImageHandleResidentNV)(GLuint64);
    GLboolean(KHRONOS_APIENTRY * tunisIsList)(GLuint);
    GLboolean(KHRONOS_APIENTRY * tunisIsMemoryObjectEXT)(GLuint);
    GLboolean(KHRONOS_APIENTRY * tunisIsNameAMD)(GLenum, GLuint);
    GLboolean(KHRONOS_APIENTRY * tunisIsNamedBufferResidentNV)(GLuint);
    GLboolean(KHRONOS_APIENTRY * tunisIsNamedStringARB)(GLint, const GLchar *);
    GLboolean(KHRONOS_APIENTRY * tunisIsObjectBufferATI)(GLuint);
    GLboolean(KHRONOS_APIENTRY * tunisIsOcclusionQueryNV)(GLuint);
    GLboolean(KHRONOS_APIENTRY * tunisIsPathNV)(GLuint);
    GLboolean(KHRONOS_APIENTRY * tunisIsPointInFillPathNV)(GLuint, GLuint, GLfloat, GLfloat);
    GLboolean(KHRONOS_APIENTRY * tunisIsPointInStrokePathNV)(GLuint, GLfloat, GLfloat);
    GLboolean(KHRONOS_APIENTRY * tunisIsProgram)(GLuint);
    GLboolean(KHRONOS_APIENTRY * tunisIsProgramARB)(GLuint);
    GLboolean(KHRONOS_APIENTRY * tunisIsProgramNV)(GLuint);
    GLboolean(KHRONOS_APIENTRY * tunisIsProgramPipeline)(GLuint);
    GLboolean(KHRONOS_APIENTRY * tunisIsProgramPipelineEXT)(GLuint);
    GLboolean(KHRONOS_APIENTRY * tunisIsQuery)(GLuint);
    GLboolean(KHRONOS_APIENTRY * tunisIsQueryARB)(GLuint);
    GLboolean(KHRONOS_APIENTRY * tunisIsQueryEXT)(GLuint);
    GLboolean(KHRONOS_APIENTRY * tunisIsRenderbuffer)(GLuint);
    GLboolean(KHRONOS_APIENTRY * tunisIsRenderbufferEXT)(GLuint);
    GLboolean(KHRONOS_APIENTRY * tunisIsRenderbufferOES)(GLuint);
    GLboolean(KHRONOS_APIENTRY * tunisIsSampler)(GLuint);
    GLboolean(KHRONOS_APIENTRY * tunisIsSemaphoreEXT)(GLuint);
    GLboolean(KHRONOS_APIENTRY * tunisIsShader)(GLuint);
    GLboolean(KHRONOS_APIENTRY * tunisIsStateNV)(GLuint);
    GLboolean(KHRONOS_APIENTRY * tunisIsSync)(GLsync);
    GLboolean(KHRONOS_APIENTRY * tunisIsSyncAPPLE)(GLsync);
    GLboolean(KHRONOS_APIENTRY * tunisIsTexture)(GLuint);
    GLboolean(KHRONOS_APIENTRY * tunisIsTextureEXT)(GLuint);
    GLboolean(KHRONOS_APIENTRY * tunisIsTextureHandleResidentARB)(GLuint64);
    GLboolean(KHRONOS_APIENTRY * tunisIsTextureHandleResidentNV)(GLuint64);
    GLboolean(KHRONOS_APIENTRY * tunisIsTransformFeedback)(GLuint);
    GLboolean(KHRONOS_APIENTRY * tunisIsTransformFeedbackNV)(GLuint);
    GLboolean(KHRONOS_APIENTRY * tunisIsVariantEnabledEXT)(GLuint, GLenum);
    GLboolean(KHRONOS_APIENTRY * tunisIsVertexArray)(GLuint);
    GLboolean(KHRONOS_APIENTRY * tunisIsVertexArrayAPPLE)(GLuint);
    GLboolean(KHRONOS_APIENTRY * tunisIsVertexArrayOES)(GLuint);
    GLboolean(KHRONOS_APIENTRY * tunisIsVertexAttribEnabledAPPLE)(GLuint, GLenum);
    void (KHRONOS_APIENTRY * tunisLGPUCopyImageSubDataNVX)(GLuint, GLbitfield, GLuint, GLenum, GLint, GLint, GLint, GLint, GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * tunisLGPUInterlockNVX)(void);
    void (KHRONOS_APIENTRY * tunisLGPUNamedBufferSubDataNVX)(GLbitfield, GLuint, GLintptr, GLsizeiptr, const void *);
    void (KHRONOS_APIENTRY * tunisLabelObjectEXT)(GLenum, GLuint, GLsizei, const GLchar *);
    void (KHRONOS_APIENTRY * tunisLightEnviSGIX)(GLenum, GLint);
    void (KHRONOS_APIENTRY * tunisLightModelf)(GLenum, GLfloat);
    void (KHRONOS_APIENTRY * tunisLightModelfv)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisLightModeli)(GLenum, GLint);
    void (KHRONOS_APIENTRY * tunisLightModeliv)(GLenum, const GLint *);
    void (KHRONOS_APIENTRY * tunisLightModelx)(GLenum, GLfixed);
    void (KHRONOS_APIENTRY * tunisLightModelxOES)(GLenum, GLfixed);
    void (KHRONOS_APIENTRY * tunisLightModelxv)(GLenum, const GLfixed *);
    void (KHRONOS_APIENTRY * tunisLightModelxvOES)(GLenum, const GLfixed *);
    void (KHRONOS_APIENTRY * tunisLightf)(GLenum, GLenum, GLfloat);
    void (KHRONOS_APIENTRY * tunisLightfv)(GLenum, GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisLighti)(GLenum, GLenum, GLint);
    void (KHRONOS_APIENTRY * tunisLightiv)(GLenum, GLenum, const GLint *);
    void (KHRONOS_APIENTRY * tunisLightx)(GLenum, GLenum, GLfixed);
    void (KHRONOS_APIENTRY * tunisLightxOES)(GLenum, GLenum, GLfixed);
    void (KHRONOS_APIENTRY * tunisLightxv)(GLenum, GLenum, const GLfixed *);
    void (KHRONOS_APIENTRY * tunisLightxvOES)(GLenum, GLenum, const GLfixed *);
    void (KHRONOS_APIENTRY * tunisLineStipple)(GLint, GLushort);
    void (KHRONOS_APIENTRY * tunisLineWidth)(GLfloat);
    void (KHRONOS_APIENTRY * tunisLineWidthx)(GLfixed);
    void (KHRONOS_APIENTRY * tunisLineWidthxOES)(GLfixed);
    void (KHRONOS_APIENTRY * tunisLinkProgram)(GLuint);
    void (KHRONOS_APIENTRY * tunisLinkProgramARB)(GLhandleARB);
    void (KHRONOS_APIENTRY * tunisListBase)(GLuint);
    void (KHRONOS_APIENTRY * tunisListDrawCommandsStatesClientNV)(GLuint, GLuint, const void **, const GLsizei *, const GLuint *, const GLuint *, GLuint);
    void (KHRONOS_APIENTRY * tunisListParameterfSGIX)(GLuint, GLenum, GLfloat);
    void (KHRONOS_APIENTRY * tunisListParameterfvSGIX)(GLuint, GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisListParameteriSGIX)(GLuint, GLenum, GLint);
    void (KHRONOS_APIENTRY * tunisListParameterivSGIX)(GLuint, GLenum, const GLint *);
    void (KHRONOS_APIENTRY * tunisLoadIdentity)(void);
    void (KHRONOS_APIENTRY * tunisLoadIdentityDeformationMapSGIX)(GLbitfield);
    void (KHRONOS_APIENTRY * tunisLoadMatrixd)(const GLdouble *);
    void (KHRONOS_APIENTRY * tunisLoadMatrixf)(const GLfloat *);
    void (KHRONOS_APIENTRY * tunisLoadMatrixx)(const GLfixed *);
    void (KHRONOS_APIENTRY * tunisLoadMatrixxOES)(const GLfixed *);
    void (KHRONOS_APIENTRY * tunisLoadName)(GLuint);
    void (KHRONOS_APIENTRY * tunisLoadPaletteFromModelViewMatrixOES)(void);
    void (KHRONOS_APIENTRY * tunisLoadProgramNV)(GLenum, GLuint, GLsizei, const GLubyte *);
    void (KHRONOS_APIENTRY * tunisLoadTransposeMatrixd)(const GLdouble *);
    void (KHRONOS_APIENTRY * tunisLoadTransposeMatrixdARB)(const GLdouble *);
    void (KHRONOS_APIENTRY * tunisLoadTransposeMatrixf)(const GLfloat *);
    void (KHRONOS_APIENTRY * tunisLoadTransposeMatrixfARB)(const GLfloat *);
    void (KHRONOS_APIENTRY * tunisLoadTransposeMatrixxOES)(const GLfixed *);
    void (KHRONOS_APIENTRY * tunisLockArraysEXT)(GLint, GLsizei);
    void (KHRONOS_APIENTRY * tunisLogicOp)(GLenum);
    void (KHRONOS_APIENTRY * tunisMakeBufferNonResidentNV)(GLenum);
    void (KHRONOS_APIENTRY * tunisMakeBufferResidentNV)(GLenum, GLenum);
    void (KHRONOS_APIENTRY * tunisMakeImageHandleNonResidentARB)(GLuint64);
    void (KHRONOS_APIENTRY * tunisMakeImageHandleNonResidentNV)(GLuint64);
    void (KHRONOS_APIENTRY * tunisMakeImageHandleResidentARB)(GLuint64, GLenum);
    void (KHRONOS_APIENTRY * tunisMakeImageHandleResidentNV)(GLuint64, GLenum);
    void (KHRONOS_APIENTRY * tunisMakeNamedBufferNonResidentNV)(GLuint);
    void (KHRONOS_APIENTRY * tunisMakeNamedBufferResidentNV)(GLuint, GLenum);
    void (KHRONOS_APIENTRY * tunisMakeTextureHandleNonResidentARB)(GLuint64);
    void (KHRONOS_APIENTRY * tunisMakeTextureHandleNonResidentNV)(GLuint64);
    void (KHRONOS_APIENTRY * tunisMakeTextureHandleResidentARB)(GLuint64);
    void (KHRONOS_APIENTRY * tunisMakeTextureHandleResidentNV)(GLuint64);
    void (KHRONOS_APIENTRY * tunisMap1d)(GLenum, GLdouble, GLdouble, GLint, GLint, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisMap1f)(GLenum, GLfloat, GLfloat, GLint, GLint, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisMap1xOES)(GLenum, GLfixed, GLfixed, GLint, GLint, GLfixed);
    void (KHRONOS_APIENTRY * tunisMap2d)(GLenum, GLdouble, GLdouble, GLint, GLint, GLdouble, GLdouble, GLint, GLint, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisMap2f)(GLenum, GLfloat, GLfloat, GLint, GLint, GLfloat, GLfloat, GLint, GLint, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisMap2xOES)(GLenum, GLfixed, GLfixed, GLint, GLint, GLfixed, GLfixed, GLint, GLint, GLfixed);
    void *(KHRONOS_APIENTRY * tunisMapBuffer)(GLenum, GLenum);
    void *(KHRONOS_APIENTRY * tunisMapBufferARB)(GLenum, GLenum);
    void *(KHRONOS_APIENTRY * tunisMapBufferOES)(GLenum, GLenum);
    void *(KHRONOS_APIENTRY * tunisMapBufferRange)(GLenum, GLintptr, GLsizeiptr, GLbitfield);
    void *(KHRONOS_APIENTRY * tunisMapBufferRangeEXT)(GLenum, GLintptr, GLsizeiptr, GLbitfield);
    void (KHRONOS_APIENTRY * tunisMapControlPointsNV)(GLenum, GLuint, GLenum, GLsizei, GLsizei, GLint, GLint, GLboolean, const void *);
    void (KHRONOS_APIENTRY * tunisMapGrid1d)(GLint, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * tunisMapGrid1f)(GLint, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisMapGrid1xOES)(GLint, GLfixed, GLfixed);
    void (KHRONOS_APIENTRY * tunisMapGrid2d)(GLint, GLdouble, GLdouble, GLint, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * tunisMapGrid2f)(GLint, GLfloat, GLfloat, GLint, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisMapGrid2xOES)(GLint, GLfixed, GLfixed, GLfixed, GLfixed);
    void *(KHRONOS_APIENTRY * tunisMapNamedBuffer)(GLuint, GLenum);
    void *(KHRONOS_APIENTRY * tunisMapNamedBufferEXT)(GLuint, GLenum);
    void *(KHRONOS_APIENTRY * tunisMapNamedBufferRange)(GLuint, GLintptr, GLsizeiptr, GLbitfield);
    void *(KHRONOS_APIENTRY * tunisMapNamedBufferRangeEXT)(GLuint, GLintptr, GLsizeiptr, GLbitfield);
    void *(KHRONOS_APIENTRY * tunisMapObjectBufferATI)(GLuint);
    void (KHRONOS_APIENTRY * tunisMapParameterfvNV)(GLenum, GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisMapParameterivNV)(GLenum, GLenum, const GLint *);
    void *(KHRONOS_APIENTRY * tunisMapTexture2DINTEL)(GLuint, GLint, GLbitfield, GLint *, GLenum *);
    void (KHRONOS_APIENTRY * tunisMapVertexAttrib1dAPPLE)(GLuint, GLuint, GLdouble, GLdouble, GLint, GLint, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisMapVertexAttrib1fAPPLE)(GLuint, GLuint, GLfloat, GLfloat, GLint, GLint, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisMapVertexAttrib2dAPPLE)(GLuint, GLuint, GLdouble, GLdouble, GLint, GLint, GLdouble, GLdouble, GLint, GLint, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisMapVertexAttrib2fAPPLE)(GLuint, GLuint, GLfloat, GLfloat, GLint, GLint, GLfloat, GLfloat, GLint, GLint, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisMaterialf)(GLenum, GLenum, GLfloat);
    void (KHRONOS_APIENTRY * tunisMaterialfv)(GLenum, GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisMateriali)(GLenum, GLenum, GLint);
    void (KHRONOS_APIENTRY * tunisMaterialiv)(GLenum, GLenum, const GLint *);
    void (KHRONOS_APIENTRY * tunisMaterialx)(GLenum, GLenum, GLfixed);
    void (KHRONOS_APIENTRY * tunisMaterialxOES)(GLenum, GLenum, GLfixed);
    void (KHRONOS_APIENTRY * tunisMaterialxv)(GLenum, GLenum, const GLfixed *);
    void (KHRONOS_APIENTRY * tunisMaterialxvOES)(GLenum, GLenum, const GLfixed *);
    void (KHRONOS_APIENTRY * tunisMatrixFrustumEXT)(GLenum, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * tunisMatrixIndexPointerARB)(GLint, GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY * tunisMatrixIndexPointerOES)(GLint, GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY * tunisMatrixIndexubvARB)(GLint, const GLubyte *);
    void (KHRONOS_APIENTRY * tunisMatrixIndexuivARB)(GLint, const GLuint *);
    void (KHRONOS_APIENTRY * tunisMatrixIndexusvARB)(GLint, const GLushort *);
    void (KHRONOS_APIENTRY * tunisMatrixLoad3x2fNV)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisMatrixLoad3x3fNV)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisMatrixLoadIdentityEXT)(GLenum);
    void (KHRONOS_APIENTRY * tunisMatrixLoadTranspose3x3fNV)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisMatrixLoadTransposedEXT)(GLenum, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisMatrixLoadTransposefEXT)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisMatrixLoaddEXT)(GLenum, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisMatrixLoadfEXT)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisMatrixMode)(GLenum);
    void (KHRONOS_APIENTRY * tunisMatrixMult3x2fNV)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisMatrixMult3x3fNV)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisMatrixMultTranspose3x3fNV)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisMatrixMultTransposedEXT)(GLenum, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisMatrixMultTransposefEXT)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisMatrixMultdEXT)(GLenum, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisMatrixMultfEXT)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisMatrixOrthoEXT)(GLenum, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * tunisMatrixPopEXT)(GLenum);
    void (KHRONOS_APIENTRY * tunisMatrixPushEXT)(GLenum);
    void (KHRONOS_APIENTRY * tunisMatrixRotatedEXT)(GLenum, GLdouble, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * tunisMatrixRotatefEXT)(GLenum, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisMatrixScaledEXT)(GLenum, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * tunisMatrixScalefEXT)(GLenum, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisMatrixTranslatedEXT)(GLenum, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * tunisMatrixTranslatefEXT)(GLenum, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisMaxShaderCompilerThreadsARB)(GLuint);
    void (KHRONOS_APIENTRY * tunisMaxShaderCompilerThreadsKHR)(GLuint);
    void (KHRONOS_APIENTRY * tunisMemoryBarrier)(GLbitfield);
    void (KHRONOS_APIENTRY * tunisMemoryBarrierByRegion)(GLbitfield);
    void (KHRONOS_APIENTRY * tunisMemoryBarrierEXT)(GLbitfield);
    void (KHRONOS_APIENTRY * tunisMemoryObjectParameterivEXT)(GLuint, GLenum, const GLint *);
    void (KHRONOS_APIENTRY * tunisMinSampleShading)(GLfloat);
    void (KHRONOS_APIENTRY * tunisMinSampleShadingARB)(GLfloat);
    void (KHRONOS_APIENTRY * tunisMinSampleShadingOES)(GLfloat);
    void (KHRONOS_APIENTRY * tunisMinmax)(GLenum, GLenum, GLboolean);
    void (KHRONOS_APIENTRY * tunisMinmaxEXT)(GLenum, GLenum, GLboolean);
    void (KHRONOS_APIENTRY * tunisMultMatrixd)(const GLdouble *);
    void (KHRONOS_APIENTRY * tunisMultMatrixf)(const GLfloat *);
    void (KHRONOS_APIENTRY * tunisMultMatrixx)(const GLfixed *);
    void (KHRONOS_APIENTRY * tunisMultMatrixxOES)(const GLfixed *);
    void (KHRONOS_APIENTRY * tunisMultTransposeMatrixd)(const GLdouble *);
    void (KHRONOS_APIENTRY * tunisMultTransposeMatrixdARB)(const GLdouble *);
    void (KHRONOS_APIENTRY * tunisMultTransposeMatrixf)(const GLfloat *);
    void (KHRONOS_APIENTRY * tunisMultTransposeMatrixfARB)(const GLfloat *);
    void (KHRONOS_APIENTRY * tunisMultTransposeMatrixxOES)(const GLfixed *);
    void (KHRONOS_APIENTRY * tunisMultiDrawArrays)(GLenum, const GLint *, const GLsizei *, GLsizei);
    void (KHRONOS_APIENTRY * tunisMultiDrawArraysEXT)(GLenum, const GLint *, const GLsizei *, GLsizei);
    void (KHRONOS_APIENTRY * tunisMultiDrawArraysIndirect)(GLenum, const void *, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * tunisMultiDrawArraysIndirectAMD)(GLenum, const void *, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * tunisMultiDrawArraysIndirectBindlessCountNV)(GLenum, const void *, GLsizei, GLsizei, GLsizei, GLint);
    void (KHRONOS_APIENTRY * tunisMultiDrawArraysIndirectBindlessNV)(GLenum, const void *, GLsizei, GLsizei, GLint);
    void (KHRONOS_APIENTRY * tunisMultiDrawArraysIndirectCount)(GLenum, const void *, GLintptr, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * tunisMultiDrawArraysIndirectCountARB)(GLenum, const void *, GLintptr, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * tunisMultiDrawArraysIndirectEXT)(GLenum, const void *, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * tunisMultiDrawElementArrayAPPLE)(GLenum, const GLint *, const GLsizei *, GLsizei);
    void (KHRONOS_APIENTRY * tunisMultiDrawElements)(GLenum, const GLsizei *, GLenum, const void *const*, GLsizei);
    void (KHRONOS_APIENTRY * tunisMultiDrawElementsBaseVertex)(GLenum, const GLsizei *, GLenum, const void *const*, GLsizei, const GLint *);
    void (KHRONOS_APIENTRY * tunisMultiDrawElementsBaseVertexEXT)(GLenum, const GLsizei *, GLenum, const void *const*, GLsizei, const GLint *);
    void (KHRONOS_APIENTRY * tunisMultiDrawElementsEXT)(GLenum, const GLsizei *, GLenum, const void *const*, GLsizei);
    void (KHRONOS_APIENTRY * tunisMultiDrawElementsIndirect)(GLenum, GLenum, const void *, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * tunisMultiDrawElementsIndirectAMD)(GLenum, GLenum, const void *, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * tunisMultiDrawElementsIndirectBindlessCountNV)(GLenum, GLenum, const void *, GLsizei, GLsizei, GLsizei, GLint);
    void (KHRONOS_APIENTRY * tunisMultiDrawElementsIndirectBindlessNV)(GLenum, GLenum, const void *, GLsizei, GLsizei, GLint);
    void (KHRONOS_APIENTRY * tunisMultiDrawElementsIndirectCount)(GLenum, GLenum, const void *, GLintptr, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * tunisMultiDrawElementsIndirectCountARB)(GLenum, GLenum, const void *, GLintptr, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * tunisMultiDrawElementsIndirectEXT)(GLenum, GLenum, const void *, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * tunisMultiDrawRangeElementArrayAPPLE)(GLenum, GLuint, GLuint, const GLint *, const GLsizei *, GLsizei);
    void (KHRONOS_APIENTRY * tunisMultiModeDrawArraysIBM)(const GLenum *, const GLint *, const GLsizei *, GLsizei, GLint);
    void (KHRONOS_APIENTRY * tunisMultiModeDrawElementsIBM)(const GLenum *, const GLsizei *, GLenum, const void *const*, GLsizei, GLint);
    void (KHRONOS_APIENTRY * tunisMultiTexBufferEXT)(GLenum, GLenum, GLenum, GLuint);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord1bOES)(GLenum, GLbyte);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord1bvOES)(GLenum, const GLbyte *);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord1d)(GLenum, GLdouble);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord1dARB)(GLenum, GLdouble);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord1dv)(GLenum, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord1dvARB)(GLenum, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord1f)(GLenum, GLfloat);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord1fARB)(GLenum, GLfloat);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord1fv)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord1fvARB)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord1hNV)(GLenum, GLhalfNV);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord1hvNV)(GLenum, const GLhalfNV *);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord1i)(GLenum, GLint);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord1iARB)(GLenum, GLint);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord1iv)(GLenum, const GLint *);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord1ivARB)(GLenum, const GLint *);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord1s)(GLenum, GLshort);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord1sARB)(GLenum, GLshort);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord1sv)(GLenum, const GLshort *);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord1svARB)(GLenum, const GLshort *);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord1xOES)(GLenum, GLfixed);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord1xvOES)(GLenum, const GLfixed *);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord2bOES)(GLenum, GLbyte, GLbyte);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord2bvOES)(GLenum, const GLbyte *);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord2d)(GLenum, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord2dARB)(GLenum, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord2dv)(GLenum, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord2dvARB)(GLenum, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord2f)(GLenum, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord2fARB)(GLenum, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord2fv)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord2fvARB)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord2hNV)(GLenum, GLhalfNV, GLhalfNV);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord2hvNV)(GLenum, const GLhalfNV *);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord2i)(GLenum, GLint, GLint);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord2iARB)(GLenum, GLint, GLint);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord2iv)(GLenum, const GLint *);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord2ivARB)(GLenum, const GLint *);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord2s)(GLenum, GLshort, GLshort);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord2sARB)(GLenum, GLshort, GLshort);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord2sv)(GLenum, const GLshort *);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord2svARB)(GLenum, const GLshort *);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord2xOES)(GLenum, GLfixed, GLfixed);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord2xvOES)(GLenum, const GLfixed *);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord3bOES)(GLenum, GLbyte, GLbyte, GLbyte);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord3bvOES)(GLenum, const GLbyte *);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord3d)(GLenum, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord3dARB)(GLenum, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord3dv)(GLenum, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord3dvARB)(GLenum, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord3f)(GLenum, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord3fARB)(GLenum, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord3fv)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord3fvARB)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord3hNV)(GLenum, GLhalfNV, GLhalfNV, GLhalfNV);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord3hvNV)(GLenum, const GLhalfNV *);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord3i)(GLenum, GLint, GLint, GLint);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord3iARB)(GLenum, GLint, GLint, GLint);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord3iv)(GLenum, const GLint *);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord3ivARB)(GLenum, const GLint *);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord3s)(GLenum, GLshort, GLshort, GLshort);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord3sARB)(GLenum, GLshort, GLshort, GLshort);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord3sv)(GLenum, const GLshort *);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord3svARB)(GLenum, const GLshort *);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord3xOES)(GLenum, GLfixed, GLfixed, GLfixed);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord3xvOES)(GLenum, const GLfixed *);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord4bOES)(GLenum, GLbyte, GLbyte, GLbyte, GLbyte);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord4bvOES)(GLenum, const GLbyte *);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord4d)(GLenum, GLdouble, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord4dARB)(GLenum, GLdouble, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord4dv)(GLenum, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord4dvARB)(GLenum, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord4f)(GLenum, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord4fARB)(GLenum, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord4fv)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord4fvARB)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord4hNV)(GLenum, GLhalfNV, GLhalfNV, GLhalfNV, GLhalfNV);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord4hvNV)(GLenum, const GLhalfNV *);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord4i)(GLenum, GLint, GLint, GLint, GLint);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord4iARB)(GLenum, GLint, GLint, GLint, GLint);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord4iv)(GLenum, const GLint *);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord4ivARB)(GLenum, const GLint *);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord4s)(GLenum, GLshort, GLshort, GLshort, GLshort);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord4sARB)(GLenum, GLshort, GLshort, GLshort, GLshort);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord4sv)(GLenum, const GLshort *);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord4svARB)(GLenum, const GLshort *);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord4x)(GLenum, GLfixed, GLfixed, GLfixed, GLfixed);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord4xOES)(GLenum, GLfixed, GLfixed, GLfixed, GLfixed);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord4xvOES)(GLenum, const GLfixed *);
    void (KHRONOS_APIENTRY * tunisMultiTexCoordP1ui)(GLenum, GLenum, GLuint);
    void (KHRONOS_APIENTRY * tunisMultiTexCoordP1uiv)(GLenum, GLenum, const GLuint *);
    void (KHRONOS_APIENTRY * tunisMultiTexCoordP2ui)(GLenum, GLenum, GLuint);
    void (KHRONOS_APIENTRY * tunisMultiTexCoordP2uiv)(GLenum, GLenum, const GLuint *);
    void (KHRONOS_APIENTRY * tunisMultiTexCoordP3ui)(GLenum, GLenum, GLuint);
    void (KHRONOS_APIENTRY * tunisMultiTexCoordP3uiv)(GLenum, GLenum, const GLuint *);
    void (KHRONOS_APIENTRY * tunisMultiTexCoordP4ui)(GLenum, GLenum, GLuint);
    void (KHRONOS_APIENTRY * tunisMultiTexCoordP4uiv)(GLenum, GLenum, const GLuint *);
    void (KHRONOS_APIENTRY * tunisMultiTexCoordPointerEXT)(GLenum, GLint, GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY * tunisMultiTexEnvfEXT)(GLenum, GLenum, GLenum, GLfloat);
    void (KHRONOS_APIENTRY * tunisMultiTexEnvfvEXT)(GLenum, GLenum, GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisMultiTexEnviEXT)(GLenum, GLenum, GLenum, GLint);
    void (KHRONOS_APIENTRY * tunisMultiTexEnvivEXT)(GLenum, GLenum, GLenum, const GLint *);
    void (KHRONOS_APIENTRY * tunisMultiTexGendEXT)(GLenum, GLenum, GLenum, GLdouble);
    void (KHRONOS_APIENTRY * tunisMultiTexGendvEXT)(GLenum, GLenum, GLenum, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisMultiTexGenfEXT)(GLenum, GLenum, GLenum, GLfloat);
    void (KHRONOS_APIENTRY * tunisMultiTexGenfvEXT)(GLenum, GLenum, GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisMultiTexGeniEXT)(GLenum, GLenum, GLenum, GLint);
    void (KHRONOS_APIENTRY * tunisMultiTexGenivEXT)(GLenum, GLenum, GLenum, const GLint *);
    void (KHRONOS_APIENTRY * tunisMultiTexImage1DEXT)(GLenum, GLenum, GLint, GLint, GLsizei, GLint, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY * tunisMultiTexImage2DEXT)(GLenum, GLenum, GLint, GLint, GLsizei, GLsizei, GLint, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY * tunisMultiTexImage3DEXT)(GLenum, GLenum, GLint, GLint, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY * tunisMultiTexParameterIivEXT)(GLenum, GLenum, GLenum, const GLint *);
    void (KHRONOS_APIENTRY * tunisMultiTexParameterIuivEXT)(GLenum, GLenum, GLenum, const GLuint *);
    void (KHRONOS_APIENTRY * tunisMultiTexParameterfEXT)(GLenum, GLenum, GLenum, GLfloat);
    void (KHRONOS_APIENTRY * tunisMultiTexParameterfvEXT)(GLenum, GLenum, GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisMultiTexParameteriEXT)(GLenum, GLenum, GLenum, GLint);
    void (KHRONOS_APIENTRY * tunisMultiTexParameterivEXT)(GLenum, GLenum, GLenum, const GLint *);
    void (KHRONOS_APIENTRY * tunisMultiTexRenderbufferEXT)(GLenum, GLenum, GLuint);
    void (KHRONOS_APIENTRY * tunisMultiTexSubImage1DEXT)(GLenum, GLenum, GLint, GLint, GLsizei, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY * tunisMultiTexSubImage2DEXT)(GLenum, GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY * tunisMultiTexSubImage3DEXT)(GLenum, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY * tunisMulticastBarrierNV)(void);
    void (KHRONOS_APIENTRY * tunisMulticastBlitFramebufferNV)(GLuint, GLuint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLbitfield, GLenum);
    void (KHRONOS_APIENTRY * tunisMulticastBufferSubDataNV)(GLbitfield, GLuint, GLintptr, GLsizeiptr, const void *);
    void (KHRONOS_APIENTRY * tunisMulticastCopyBufferSubDataNV)(GLuint, GLbitfield, GLuint, GLuint, GLintptr, GLintptr, GLsizeiptr);
    void (KHRONOS_APIENTRY * tunisMulticastCopyImageSubDataNV)(GLuint, GLbitfield, GLuint, GLenum, GLint, GLint, GLint, GLint, GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * tunisMulticastFramebufferSampleLocationsfvNV)(GLuint, GLuint, GLuint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisMulticastGetQueryObjecti64vNV)(GLuint, GLuint, GLenum, GLint64 *);
    void (KHRONOS_APIENTRY * tunisMulticastGetQueryObjectivNV)(GLuint, GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisMulticastGetQueryObjectui64vNV)(GLuint, GLuint, GLenum, GLuint64 *);
    void (KHRONOS_APIENTRY * tunisMulticastGetQueryObjectuivNV)(GLuint, GLuint, GLenum, GLuint *);
    void (KHRONOS_APIENTRY * tunisMulticastWaitSyncNV)(GLuint, GLbitfield);
    void (KHRONOS_APIENTRY * tunisNamedBufferData)(GLuint, GLsizeiptr, const void *, GLenum);
    void (KHRONOS_APIENTRY * tunisNamedBufferDataEXT)(GLuint, GLsizeiptr, const void *, GLenum);
    void (KHRONOS_APIENTRY * tunisNamedBufferPageCommitmentARB)(GLuint, GLintptr, GLsizeiptr, GLboolean);
    void (KHRONOS_APIENTRY * tunisNamedBufferPageCommitmentEXT)(GLuint, GLintptr, GLsizeiptr, GLboolean);
    void (KHRONOS_APIENTRY * tunisNamedBufferStorage)(GLuint, GLsizeiptr, const void *, GLbitfield);
    void (KHRONOS_APIENTRY * tunisNamedBufferStorageEXT)(GLuint, GLsizeiptr, const void *, GLbitfield);
    void (KHRONOS_APIENTRY * tunisNamedBufferStorageExternalEXT)(GLuint, GLintptr, GLsizeiptr, GLeglClientBufferEXT, GLbitfield);
    void (KHRONOS_APIENTRY * tunisNamedBufferStorageMemEXT)(GLuint, GLsizeiptr, GLuint, GLuint64);
    void (KHRONOS_APIENTRY * tunisNamedBufferSubData)(GLuint, GLintptr, GLsizeiptr, const void *);
    void (KHRONOS_APIENTRY * tunisNamedBufferSubDataEXT)(GLuint, GLintptr, GLsizeiptr, const void *);
    void (KHRONOS_APIENTRY * tunisNamedCopyBufferSubDataEXT)(GLuint, GLuint, GLintptr, GLintptr, GLsizeiptr);
    void (KHRONOS_APIENTRY * tunisNamedFramebufferDrawBuffer)(GLuint, GLenum);
    void (KHRONOS_APIENTRY * tunisNamedFramebufferDrawBuffers)(GLuint, GLsizei, const GLenum *);
    void (KHRONOS_APIENTRY * tunisNamedFramebufferParameteri)(GLuint, GLenum, GLint);
    void (KHRONOS_APIENTRY * tunisNamedFramebufferParameteriEXT)(GLuint, GLenum, GLint);
    void (KHRONOS_APIENTRY * tunisNamedFramebufferReadBuffer)(GLuint, GLenum);
    void (KHRONOS_APIENTRY * tunisNamedFramebufferRenderbuffer)(GLuint, GLenum, GLenum, GLuint);
    void (KHRONOS_APIENTRY * tunisNamedFramebufferRenderbufferEXT)(GLuint, GLenum, GLenum, GLuint);
    void (KHRONOS_APIENTRY * tunisNamedFramebufferSampleLocationsfvARB)(GLuint, GLuint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisNamedFramebufferSampleLocationsfvNV)(GLuint, GLuint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisNamedFramebufferSamplePositionsfvAMD)(GLuint, GLuint, GLuint, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisNamedFramebufferTexture)(GLuint, GLenum, GLuint, GLint);
    void (KHRONOS_APIENTRY * tunisNamedFramebufferTexture1DEXT)(GLuint, GLenum, GLenum, GLuint, GLint);
    void (KHRONOS_APIENTRY * tunisNamedFramebufferTexture2DEXT)(GLuint, GLenum, GLenum, GLuint, GLint);
    void (KHRONOS_APIENTRY * tunisNamedFramebufferTexture3DEXT)(GLuint, GLenum, GLenum, GLuint, GLint, GLint);
    void (KHRONOS_APIENTRY * tunisNamedFramebufferTextureEXT)(GLuint, GLenum, GLuint, GLint);
    void (KHRONOS_APIENTRY * tunisNamedFramebufferTextureFaceEXT)(GLuint, GLenum, GLuint, GLint, GLenum);
    void (KHRONOS_APIENTRY * tunisNamedFramebufferTextureLayer)(GLuint, GLenum, GLuint, GLint, GLint);
    void (KHRONOS_APIENTRY * tunisNamedFramebufferTextureLayerEXT)(GLuint, GLenum, GLuint, GLint, GLint);
    void (KHRONOS_APIENTRY * tunisNamedProgramLocalParameter4dEXT)(GLuint, GLenum, GLuint, GLdouble, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * tunisNamedProgramLocalParameter4dvEXT)(GLuint, GLenum, GLuint, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisNamedProgramLocalParameter4fEXT)(GLuint, GLenum, GLuint, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisNamedProgramLocalParameter4fvEXT)(GLuint, GLenum, GLuint, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisNamedProgramLocalParameterI4iEXT)(GLuint, GLenum, GLuint, GLint, GLint, GLint, GLint);
    void (KHRONOS_APIENTRY * tunisNamedProgramLocalParameterI4ivEXT)(GLuint, GLenum, GLuint, const GLint *);
    void (KHRONOS_APIENTRY * tunisNamedProgramLocalParameterI4uiEXT)(GLuint, GLenum, GLuint, GLuint, GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY * tunisNamedProgramLocalParameterI4uivEXT)(GLuint, GLenum, GLuint, const GLuint *);
    void (KHRONOS_APIENTRY * tunisNamedProgramLocalParameters4fvEXT)(GLuint, GLenum, GLuint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisNamedProgramLocalParametersI4ivEXT)(GLuint, GLenum, GLuint, GLsizei, const GLint *);
    void (KHRONOS_APIENTRY * tunisNamedProgramLocalParametersI4uivEXT)(GLuint, GLenum, GLuint, GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY * tunisNamedProgramStringEXT)(GLuint, GLenum, GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY * tunisNamedRenderbufferStorage)(GLuint, GLenum, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * tunisNamedRenderbufferStorageEXT)(GLuint, GLenum, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * tunisNamedRenderbufferStorageMultisample)(GLuint, GLsizei, GLenum, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * tunisNamedRenderbufferStorageMultisampleAdvancedAMD)(GLuint, GLsizei, GLsizei, GLenum, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * tunisNamedRenderbufferStorageMultisampleCoverageEXT)(GLuint, GLsizei, GLsizei, GLenum, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * tunisNamedRenderbufferStorageMultisampleEXT)(GLuint, GLsizei, GLenum, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * tunisNamedStringARB)(GLenum, GLint, const GLchar *, GLint, const GLchar *);
    GLuint(KHRONOS_APIENTRY * tunisNewBufferRegion)(GLenum);
    void (KHRONOS_APIENTRY * tunisNewList)(GLuint, GLenum);
    GLuint(KHRONOS_APIENTRY * tunisNewObjectBufferATI)(GLsizei, const void *, GLenum);
    void (KHRONOS_APIENTRY * tunisNormal3b)(GLbyte, GLbyte, GLbyte);
    void (KHRONOS_APIENTRY * tunisNormal3bv)(const GLbyte *);
    void (KHRONOS_APIENTRY * tunisNormal3d)(GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * tunisNormal3dv)(const GLdouble *);
    void (KHRONOS_APIENTRY * tunisNormal3f)(GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisNormal3fVertex3fSUN)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisNormal3fVertex3fvSUN)(const GLfloat *, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisNormal3fv)(const GLfloat *);
    void (KHRONOS_APIENTRY * tunisNormal3hNV)(GLhalfNV, GLhalfNV, GLhalfNV);
    void (KHRONOS_APIENTRY * tunisNormal3hvNV)(const GLhalfNV *);
    void (KHRONOS_APIENTRY * tunisNormal3i)(GLint, GLint, GLint);
    void (KHRONOS_APIENTRY * tunisNormal3iv)(const GLint *);
    void (KHRONOS_APIENTRY * tunisNormal3s)(GLshort, GLshort, GLshort);
    void (KHRONOS_APIENTRY * tunisNormal3sv)(const GLshort *);
    void (KHRONOS_APIENTRY * tunisNormal3x)(GLfixed, GLfixed, GLfixed);
    void (KHRONOS_APIENTRY * tunisNormal3xOES)(GLfixed, GLfixed, GLfixed);
    void (KHRONOS_APIENTRY * tunisNormal3xvOES)(const GLfixed *);
    void (KHRONOS_APIENTRY * tunisNormalFormatNV)(GLenum, GLsizei);
    void (KHRONOS_APIENTRY * tunisNormalP3ui)(GLenum, GLuint);
    void (KHRONOS_APIENTRY * tunisNormalP3uiv)(GLenum, const GLuint *);
    void (KHRONOS_APIENTRY * tunisNormalPointer)(GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY * tunisNormalPointerEXT)(GLenum, GLsizei, GLsizei, const void *);
    void (KHRONOS_APIENTRY * tunisNormalPointerListIBM)(GLenum, GLint, const void **, GLint);
    void (KHRONOS_APIENTRY * tunisNormalPointervINTEL)(GLenum, const void **);
    void (KHRONOS_APIENTRY * tunisNormalStream3bATI)(GLenum, GLbyte, GLbyte, GLbyte);
    void (KHRONOS_APIENTRY * tunisNormalStream3bvATI)(GLenum, const GLbyte *);
    void (KHRONOS_APIENTRY * tunisNormalStream3dATI)(GLenum, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * tunisNormalStream3dvATI)(GLenum, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisNormalStream3fATI)(GLenum, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisNormalStream3fvATI)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisNormalStream3iATI)(GLenum, GLint, GLint, GLint);
    void (KHRONOS_APIENTRY * tunisNormalStream3ivATI)(GLenum, const GLint *);
    void (KHRONOS_APIENTRY * tunisNormalStream3sATI)(GLenum, GLshort, GLshort, GLshort);
    void (KHRONOS_APIENTRY * tunisNormalStream3svATI)(GLenum, const GLshort *);
    void (KHRONOS_APIENTRY * tunisObjectLabel)(GLenum, GLuint, GLsizei, const GLchar *);
    void (KHRONOS_APIENTRY * tunisObjectLabelKHR)(GLenum, GLuint, GLsizei, const GLchar *);
    void (KHRONOS_APIENTRY * tunisObjectPtrLabel)(const void *, GLsizei, const GLchar *);
    void (KHRONOS_APIENTRY * tunisObjectPtrLabelKHR)(const void *, GLsizei, const GLchar *);
    GLenum(KHRONOS_APIENTRY * tunisObjectPurgeableAPPLE)(GLenum, GLuint, GLenum);
    GLenum(KHRONOS_APIENTRY * tunisObjectUnpurgeableAPPLE)(GLenum, GLuint, GLenum);
    void (KHRONOS_APIENTRY * tunisOrtho)(GLdouble, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * tunisOrthof)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisOrthofOES)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisOrthox)(GLfixed, GLfixed, GLfixed, GLfixed, GLfixed, GLfixed);
    void (KHRONOS_APIENTRY * tunisOrthoxOES)(GLfixed, GLfixed, GLfixed, GLfixed, GLfixed, GLfixed);
    void (KHRONOS_APIENTRY * tunisPNTrianglesfATI)(GLenum, GLfloat);
    void (KHRONOS_APIENTRY * tunisPNTrianglesiATI)(GLenum, GLint);
    void (KHRONOS_APIENTRY * tunisPassTexCoordATI)(GLuint, GLuint, GLenum);
    void (KHRONOS_APIENTRY * tunisPassThrough)(GLfloat);
    void (KHRONOS_APIENTRY * tunisPassThroughxOES)(GLfixed);
    void (KHRONOS_APIENTRY * tunisPatchParameterfv)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisPatchParameteri)(GLenum, GLint);
    void (KHRONOS_APIENTRY * tunisPatchParameteriEXT)(GLenum, GLint);
    void (KHRONOS_APIENTRY * tunisPatchParameteriOES)(GLenum, GLint);
    void (KHRONOS_APIENTRY * tunisPathColorGenNV)(GLenum, GLenum, GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisPathCommandsNV)(GLuint, GLsizei, const GLubyte *, GLsizei, GLenum, const void *);
    void (KHRONOS_APIENTRY * tunisPathCoordsNV)(GLuint, GLsizei, GLenum, const void *);
    void (KHRONOS_APIENTRY * tunisPathCoverDepthFuncNV)(GLenum);
    void (KHRONOS_APIENTRY * tunisPathDashArrayNV)(GLuint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisPathFogGenNV)(GLenum);
    GLenum(KHRONOS_APIENTRY * tunisPathGlyphIndexArrayNV)(GLuint, GLenum, const void *, GLbitfield, GLuint, GLsizei, GLuint, GLfloat);
    GLenum(KHRONOS_APIENTRY * tunisPathGlyphIndexRangeNV)(GLenum, const void *, GLbitfield, GLuint, GLfloat, GLuint[2]);
    void (KHRONOS_APIENTRY * tunisPathGlyphRangeNV)(GLuint, GLenum, const void *, GLbitfield, GLuint, GLsizei, GLenum, GLuint, GLfloat);
    void (KHRONOS_APIENTRY * tunisPathGlyphsNV)(GLuint, GLenum, const void *, GLbitfield, GLsizei, GLenum, const void *, GLenum, GLuint, GLfloat);
    GLenum(KHRONOS_APIENTRY * tunisPathMemoryGlyphIndexArrayNV)(GLuint, GLenum, GLsizeiptr, const void *, GLsizei, GLuint, GLsizei, GLuint, GLfloat);
    void (KHRONOS_APIENTRY * tunisPathParameterfNV)(GLuint, GLenum, GLfloat);
    void (KHRONOS_APIENTRY * tunisPathParameterfvNV)(GLuint, GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisPathParameteriNV)(GLuint, GLenum, GLint);
    void (KHRONOS_APIENTRY * tunisPathParameterivNV)(GLuint, GLenum, const GLint *);
    void (KHRONOS_APIENTRY * tunisPathStencilDepthOffsetNV)(GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisPathStencilFuncNV)(GLenum, GLint, GLuint);
    void (KHRONOS_APIENTRY * tunisPathStringNV)(GLuint, GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY * tunisPathSubCommandsNV)(GLuint, GLsizei, GLsizei, GLsizei, const GLubyte *, GLsizei, GLenum, const void *);
    void (KHRONOS_APIENTRY * tunisPathSubCoordsNV)(GLuint, GLsizei, GLsizei, GLenum, const void *);
    void (KHRONOS_APIENTRY * tunisPathTexGenNV)(GLenum, GLenum, GLint, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisPauseTransformFeedback)(void);
    void (KHRONOS_APIENTRY * tunisPauseTransformFeedbackNV)(void);
    void (KHRONOS_APIENTRY * tunisPixelDataRangeNV)(GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY * tunisPixelMapfv)(GLenum, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisPixelMapuiv)(GLenum, GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY * tunisPixelMapusv)(GLenum, GLsizei, const GLushort *);
    void (KHRONOS_APIENTRY * tunisPixelMapx)(GLenum, GLint, const GLfixed *);
    void (KHRONOS_APIENTRY * tunisPixelStoref)(GLenum, GLfloat);
    void (KHRONOS_APIENTRY * tunisPixelStorei)(GLenum, GLint);
    void (KHRONOS_APIENTRY * tunisPixelStorex)(GLenum, GLfixed);
    void (KHRONOS_APIENTRY * tunisPixelTexGenParameterfSGIS)(GLenum, GLfloat);
    void (KHRONOS_APIENTRY * tunisPixelTexGenParameterfvSGIS)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisPixelTexGenParameteriSGIS)(GLenum, GLint);
    void (KHRONOS_APIENTRY * tunisPixelTexGenParameterivSGIS)(GLenum, const GLint *);
    void (KHRONOS_APIENTRY * tunisPixelTexGenSGIX)(GLenum);
    void (KHRONOS_APIENTRY * tunisPixelTransferf)(GLenum, GLfloat);
    void (KHRONOS_APIENTRY * tunisPixelTransferi)(GLenum, GLint);
    void (KHRONOS_APIENTRY * tunisPixelTransferxOES)(GLenum, GLfixed);
    void (KHRONOS_APIENTRY * tunisPixelTransformParameterfEXT)(GLenum, GLenum, GLfloat);
    void (KHRONOS_APIENTRY * tunisPixelTransformParameterfvEXT)(GLenum, GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisPixelTransformParameteriEXT)(GLenum, GLenum, GLint);
    void (KHRONOS_APIENTRY * tunisPixelTransformParameterivEXT)(GLenum, GLenum, const GLint *);
    void (KHRONOS_APIENTRY * tunisPixelZoom)(GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisPixelZoomxOES)(GLfixed, GLfixed);
    GLboolean(KHRONOS_APIENTRY * tunisPointAlongPathNV)(GLuint, GLsizei, GLsizei, GLfloat, GLfloat *, GLfloat *, GLfloat *, GLfloat *);
    void (KHRONOS_APIENTRY * tunisPointParameterf)(GLenum, GLfloat);
    void (KHRONOS_APIENTRY * tunisPointParameterfARB)(GLenum, GLfloat);
    void (KHRONOS_APIENTRY * tunisPointParameterfEXT)(GLenum, GLfloat);
    void (KHRONOS_APIENTRY * tunisPointParameterfSGIS)(GLenum, GLfloat);
    void (KHRONOS_APIENTRY * tunisPointParameterfv)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisPointParameterfvARB)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisPointParameterfvEXT)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisPointParameterfvSGIS)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisPointParameteri)(GLenum, GLint);
    void (KHRONOS_APIENTRY * tunisPointParameteriNV)(GLenum, GLint);
    void (KHRONOS_APIENTRY * tunisPointParameteriv)(GLenum, const GLint *);
    void (KHRONOS_APIENTRY * tunisPointParameterivNV)(GLenum, const GLint *);
    void (KHRONOS_APIENTRY * tunisPointParameterx)(GLenum, GLfixed);
    void (KHRONOS_APIENTRY * tunisPointParameterxOES)(GLenum, GLfixed);
    void (KHRONOS_APIENTRY * tunisPointParameterxv)(GLenum, const GLfixed *);
    void (KHRONOS_APIENTRY * tunisPointParameterxvOES)(GLenum, const GLfixed *);
    void (KHRONOS_APIENTRY * tunisPointSize)(GLfloat);
    void (KHRONOS_APIENTRY * tunisPointSizePointerOES)(GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY * tunisPointSizex)(GLfixed);
    void (KHRONOS_APIENTRY * tunisPointSizexOES)(GLfixed);
    GLint(KHRONOS_APIENTRY * tunisPollAsyncSGIX)(GLuint *);
    GLint(KHRONOS_APIENTRY * tunisPollInstrumentsSGIX)(GLint *);
    void (KHRONOS_APIENTRY * tunisPolygonMode)(GLenum, GLenum);
    void (KHRONOS_APIENTRY * tunisPolygonModeNV)(GLenum, GLenum);
    void (KHRONOS_APIENTRY * tunisPolygonOffset)(GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisPolygonOffsetClamp)(GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisPolygonOffsetClampEXT)(GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisPolygonOffsetEXT)(GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisPolygonOffsetx)(GLfixed, GLfixed);
    void (KHRONOS_APIENTRY * tunisPolygonOffsetxOES)(GLfixed, GLfixed);
    void (KHRONOS_APIENTRY * tunisPolygonStipple)(const GLubyte *);
    void (KHRONOS_APIENTRY * tunisPopAttrib)(void);
    void (KHRONOS_APIENTRY * tunisPopClientAttrib)(void);
    void (KHRONOS_APIENTRY * tunisPopDebugGroup)(void);
    void (KHRONOS_APIENTRY * tunisPopDebugGroupKHR)(void);
    void (KHRONOS_APIENTRY * tunisPopGroupMarkerEXT)(void);
    void (KHRONOS_APIENTRY * tunisPopMatrix)(void);
    void (KHRONOS_APIENTRY * tunisPopName)(void);
    void (KHRONOS_APIENTRY * tunisPresentFrameDualFillNV)(GLuint, GLuint64EXT, GLuint, GLuint, GLenum, GLenum, GLuint, GLenum, GLuint, GLenum, GLuint, GLenum, GLuint);
    void (KHRONOS_APIENTRY * tunisPresentFrameKeyedNV)(GLuint, GLuint64EXT, GLuint, GLuint, GLenum, GLenum, GLuint, GLuint, GLenum, GLuint, GLuint);
    void (KHRONOS_APIENTRY * tunisPrimitiveBoundingBox)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisPrimitiveBoundingBoxARB)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisPrimitiveBoundingBoxEXT)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisPrimitiveBoundingBoxOES)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisPrimitiveRestartIndex)(GLuint);
    void (KHRONOS_APIENTRY * tunisPrimitiveRestartIndexNV)(GLuint);
    void (KHRONOS_APIENTRY * tunisPrimitiveRestartNV)(void);
    void (KHRONOS_APIENTRY * tunisPrioritizeTextures)(GLsizei, const GLuint *, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisPrioritizeTexturesEXT)(GLsizei, const GLuint *, const GLclampf *);
    void (KHRONOS_APIENTRY * tunisPrioritizeTexturesxOES)(GLsizei, const GLuint *, const GLfixed *);
    void (KHRONOS_APIENTRY * tunisProgramBinary)(GLuint, GLenum, const void *, GLsizei);
    void (KHRONOS_APIENTRY * tunisProgramBinaryOES)(GLuint, GLenum, const void *, GLint);
    void (KHRONOS_APIENTRY * tunisProgramBufferParametersIivNV)(GLenum, GLuint, GLuint, GLsizei, const GLint *);
    void (KHRONOS_APIENTRY * tunisProgramBufferParametersIuivNV)(GLenum, GLuint, GLuint, GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY * tunisProgramBufferParametersfvNV)(GLenum, GLuint, GLuint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisProgramEnvParameter4dARB)(GLenum, GLuint, GLdouble, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * tunisProgramEnvParameter4dvARB)(GLenum, GLuint, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisProgramEnvParameter4fARB)(GLenum, GLuint, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisProgramEnvParameter4fvARB)(GLenum, GLuint, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisProgramEnvParameterI4iNV)(GLenum, GLuint, GLint, GLint, GLint, GLint);
    void (KHRONOS_APIENTRY * tunisProgramEnvParameterI4ivNV)(GLenum, GLuint, const GLint *);
    void (KHRONOS_APIENTRY * tunisProgramEnvParameterI4uiNV)(GLenum, GLuint, GLuint, GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY * tunisProgramEnvParameterI4uivNV)(GLenum, GLuint, const GLuint *);
    void (KHRONOS_APIENTRY * tunisProgramEnvParameters4fvEXT)(GLenum, GLuint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisProgramEnvParametersI4ivNV)(GLenum, GLuint, GLsizei, const GLint *);
    void (KHRONOS_APIENTRY * tunisProgramEnvParametersI4uivNV)(GLenum, GLuint, GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY * tunisProgramLocalParameter4dARB)(GLenum, GLuint, GLdouble, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * tunisProgramLocalParameter4dvARB)(GLenum, GLuint, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisProgramLocalParameter4fARB)(GLenum, GLuint, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisProgramLocalParameter4fvARB)(GLenum, GLuint, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisProgramLocalParameterI4iNV)(GLenum, GLuint, GLint, GLint, GLint, GLint);
    void (KHRONOS_APIENTRY * tunisProgramLocalParameterI4ivNV)(GLenum, GLuint, const GLint *);
    void (KHRONOS_APIENTRY * tunisProgramLocalParameterI4uiNV)(GLenum, GLuint, GLuint, GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY * tunisProgramLocalParameterI4uivNV)(GLenum, GLuint, const GLuint *);
    void (KHRONOS_APIENTRY * tunisProgramLocalParameters4fvEXT)(GLenum, GLuint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisProgramLocalParametersI4ivNV)(GLenum, GLuint, GLsizei, const GLint *);
    void (KHRONOS_APIENTRY * tunisProgramLocalParametersI4uivNV)(GLenum, GLuint, GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY * tunisProgramNamedParameter4dNV)(GLuint, GLsizei, const GLubyte *, GLdouble, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * tunisProgramNamedParameter4dvNV)(GLuint, GLsizei, const GLubyte *, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisProgramNamedParameter4fNV)(GLuint, GLsizei, const GLubyte *, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisProgramNamedParameter4fvNV)(GLuint, GLsizei, const GLubyte *, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisProgramParameter4dNV)(GLenum, GLuint, GLdouble, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * tunisProgramParameter4dvNV)(GLenum, GLuint, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisProgramParameter4fNV)(GLenum, GLuint, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisProgramParameter4fvNV)(GLenum, GLuint, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisProgramParameteri)(GLuint, GLenum, GLint);
    void (KHRONOS_APIENTRY * tunisProgramParameteriARB)(GLuint, GLenum, GLint);
    void (KHRONOS_APIENTRY * tunisProgramParameteriEXT)(GLuint, GLenum, GLint);
    void (KHRONOS_APIENTRY * tunisProgramParameters4dvNV)(GLenum, GLuint, GLsizei, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisProgramParameters4fvNV)(GLenum, GLuint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisProgramPathFragmentInputGenNV)(GLuint, GLint, GLenum, GLint, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisProgramStringARB)(GLenum, GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY * tunisProgramSubroutineParametersuivNV)(GLenum, GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY * tunisProgramUniform1d)(GLuint, GLint, GLdouble);
    void (KHRONOS_APIENTRY * tunisProgramUniform1dEXT)(GLuint, GLint, GLdouble);
    void (KHRONOS_APIENTRY * tunisProgramUniform1dv)(GLuint, GLint, GLsizei, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisProgramUniform1dvEXT)(GLuint, GLint, GLsizei, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisProgramUniform1f)(GLuint, GLint, GLfloat);
    void (KHRONOS_APIENTRY * tunisProgramUniform1fEXT)(GLuint, GLint, GLfloat);
    void (KHRONOS_APIENTRY * tunisProgramUniform1fv)(GLuint, GLint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisProgramUniform1fvEXT)(GLuint, GLint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisProgramUniform1i)(GLuint, GLint, GLint);
    void (KHRONOS_APIENTRY * tunisProgramUniform1i64ARB)(GLuint, GLint, GLint64);
    void (KHRONOS_APIENTRY * tunisProgramUniform1i64NV)(GLuint, GLint, GLint64EXT);
    void (KHRONOS_APIENTRY * tunisProgramUniform1i64vARB)(GLuint, GLint, GLsizei, const GLint64 *);
    void (KHRONOS_APIENTRY * tunisProgramUniform1i64vNV)(GLuint, GLint, GLsizei, const GLint64EXT *);
    void (KHRONOS_APIENTRY * tunisProgramUniform1iEXT)(GLuint, GLint, GLint);
    void (KHRONOS_APIENTRY * tunisProgramUniform1iv)(GLuint, GLint, GLsizei, const GLint *);
    void (KHRONOS_APIENTRY * tunisProgramUniform1ivEXT)(GLuint, GLint, GLsizei, const GLint *);
    void (KHRONOS_APIENTRY * tunisProgramUniform1ui)(GLuint, GLint, GLuint);
    void (KHRONOS_APIENTRY * tunisProgramUniform1ui64ARB)(GLuint, GLint, GLuint64);
    void (KHRONOS_APIENTRY * tunisProgramUniform1ui64NV)(GLuint, GLint, GLuint64EXT);
    void (KHRONOS_APIENTRY * tunisProgramUniform1ui64vARB)(GLuint, GLint, GLsizei, const GLuint64 *);
    void (KHRONOS_APIENTRY * tunisProgramUniform1ui64vNV)(GLuint, GLint, GLsizei, const GLuint64EXT *);
    void (KHRONOS_APIENTRY * tunisProgramUniform1uiEXT)(GLuint, GLint, GLuint);
    void (KHRONOS_APIENTRY * tunisProgramUniform1uiv)(GLuint, GLint, GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY * tunisProgramUniform1uivEXT)(GLuint, GLint, GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY * tunisProgramUniform2d)(GLuint, GLint, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * tunisProgramUniform2dEXT)(GLuint, GLint, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * tunisProgramUniform2dv)(GLuint, GLint, GLsizei, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisProgramUniform2dvEXT)(GLuint, GLint, GLsizei, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisProgramUniform2f)(GLuint, GLint, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisProgramUniform2fEXT)(GLuint, GLint, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisProgramUniform2fv)(GLuint, GLint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisProgramUniform2fvEXT)(GLuint, GLint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisProgramUniform2i)(GLuint, GLint, GLint, GLint);
    void (KHRONOS_APIENTRY * tunisProgramUniform2i64ARB)(GLuint, GLint, GLint64, GLint64);
    void (KHRONOS_APIENTRY * tunisProgramUniform2i64NV)(GLuint, GLint, GLint64EXT, GLint64EXT);
    void (KHRONOS_APIENTRY * tunisProgramUniform2i64vARB)(GLuint, GLint, GLsizei, const GLint64 *);
    void (KHRONOS_APIENTRY * tunisProgramUniform2i64vNV)(GLuint, GLint, GLsizei, const GLint64EXT *);
    void (KHRONOS_APIENTRY * tunisProgramUniform2iEXT)(GLuint, GLint, GLint, GLint);
    void (KHRONOS_APIENTRY * tunisProgramUniform2iv)(GLuint, GLint, GLsizei, const GLint *);
    void (KHRONOS_APIENTRY * tunisProgramUniform2ivEXT)(GLuint, GLint, GLsizei, const GLint *);
    void (KHRONOS_APIENTRY * tunisProgramUniform2ui)(GLuint, GLint, GLuint, GLuint);
    void (KHRONOS_APIENTRY * tunisProgramUniform2ui64ARB)(GLuint, GLint, GLuint64, GLuint64);
    void (KHRONOS_APIENTRY * tunisProgramUniform2ui64NV)(GLuint, GLint, GLuint64EXT, GLuint64EXT);
    void (KHRONOS_APIENTRY * tunisProgramUniform2ui64vARB)(GLuint, GLint, GLsizei, const GLuint64 *);
    void (KHRONOS_APIENTRY * tunisProgramUniform2ui64vNV)(GLuint, GLint, GLsizei, const GLuint64EXT *);
    void (KHRONOS_APIENTRY * tunisProgramUniform2uiEXT)(GLuint, GLint, GLuint, GLuint);
    void (KHRONOS_APIENTRY * tunisProgramUniform2uiv)(GLuint, GLint, GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY * tunisProgramUniform2uivEXT)(GLuint, GLint, GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY * tunisProgramUniform3d)(GLuint, GLint, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * tunisProgramUniform3dEXT)(GLuint, GLint, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * tunisProgramUniform3dv)(GLuint, GLint, GLsizei, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisProgramUniform3dvEXT)(GLuint, GLint, GLsizei, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisProgramUniform3f)(GLuint, GLint, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisProgramUniform3fEXT)(GLuint, GLint, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisProgramUniform3fv)(GLuint, GLint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisProgramUniform3fvEXT)(GLuint, GLint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisProgramUniform3i)(GLuint, GLint, GLint, GLint, GLint);
    void (KHRONOS_APIENTRY * tunisProgramUniform3i64ARB)(GLuint, GLint, GLint64, GLint64, GLint64);
    void (KHRONOS_APIENTRY * tunisProgramUniform3i64NV)(GLuint, GLint, GLint64EXT, GLint64EXT, GLint64EXT);
    void (KHRONOS_APIENTRY * tunisProgramUniform3i64vARB)(GLuint, GLint, GLsizei, const GLint64 *);
    void (KHRONOS_APIENTRY * tunisProgramUniform3i64vNV)(GLuint, GLint, GLsizei, const GLint64EXT *);
    void (KHRONOS_APIENTRY * tunisProgramUniform3iEXT)(GLuint, GLint, GLint, GLint, GLint);
    void (KHRONOS_APIENTRY * tunisProgramUniform3iv)(GLuint, GLint, GLsizei, const GLint *);
    void (KHRONOS_APIENTRY * tunisProgramUniform3ivEXT)(GLuint, GLint, GLsizei, const GLint *);
    void (KHRONOS_APIENTRY * tunisProgramUniform3ui)(GLuint, GLint, GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY * tunisProgramUniform3ui64ARB)(GLuint, GLint, GLuint64, GLuint64, GLuint64);
    void (KHRONOS_APIENTRY * tunisProgramUniform3ui64NV)(GLuint, GLint, GLuint64EXT, GLuint64EXT, GLuint64EXT);
    void (KHRONOS_APIENTRY * tunisProgramUniform3ui64vARB)(GLuint, GLint, GLsizei, const GLuint64 *);
    void (KHRONOS_APIENTRY * tunisProgramUniform3ui64vNV)(GLuint, GLint, GLsizei, const GLuint64EXT *);
    void (KHRONOS_APIENTRY * tunisProgramUniform3uiEXT)(GLuint, GLint, GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY * tunisProgramUniform3uiv)(GLuint, GLint, GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY * tunisProgramUniform3uivEXT)(GLuint, GLint, GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY * tunisProgramUniform4d)(GLuint, GLint, GLdouble, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * tunisProgramUniform4dEXT)(GLuint, GLint, GLdouble, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * tunisProgramUniform4dv)(GLuint, GLint, GLsizei, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisProgramUniform4dvEXT)(GLuint, GLint, GLsizei, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisProgramUniform4f)(GLuint, GLint, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisProgramUniform4fEXT)(GLuint, GLint, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisProgramUniform4fv)(GLuint, GLint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisProgramUniform4fvEXT)(GLuint, GLint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisProgramUniform4i)(GLuint, GLint, GLint, GLint, GLint, GLint);
    void (KHRONOS_APIENTRY * tunisProgramUniform4i64ARB)(GLuint, GLint, GLint64, GLint64, GLint64, GLint64);
    void (KHRONOS_APIENTRY * tunisProgramUniform4i64NV)(GLuint, GLint, GLint64EXT, GLint64EXT, GLint64EXT, GLint64EXT);
    void (KHRONOS_APIENTRY * tunisProgramUniform4i64vARB)(GLuint, GLint, GLsizei, const GLint64 *);
    void (KHRONOS_APIENTRY * tunisProgramUniform4i64vNV)(GLuint, GLint, GLsizei, const GLint64EXT *);
    void (KHRONOS_APIENTRY * tunisProgramUniform4iEXT)(GLuint, GLint, GLint, GLint, GLint, GLint);
    void (KHRONOS_APIENTRY * tunisProgramUniform4iv)(GLuint, GLint, GLsizei, const GLint *);
    void (KHRONOS_APIENTRY * tunisProgramUniform4ivEXT)(GLuint, GLint, GLsizei, const GLint *);
    void (KHRONOS_APIENTRY * tunisProgramUniform4ui)(GLuint, GLint, GLuint, GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY * tunisProgramUniform4ui64ARB)(GLuint, GLint, GLuint64, GLuint64, GLuint64, GLuint64);
    void (KHRONOS_APIENTRY * tunisProgramUniform4ui64NV)(GLuint, GLint, GLuint64EXT, GLuint64EXT, GLuint64EXT, GLuint64EXT);
    void (KHRONOS_APIENTRY * tunisProgramUniform4ui64vARB)(GLuint, GLint, GLsizei, const GLuint64 *);
    void (KHRONOS_APIENTRY * tunisProgramUniform4ui64vNV)(GLuint, GLint, GLsizei, const GLuint64EXT *);
    void (KHRONOS_APIENTRY * tunisProgramUniform4uiEXT)(GLuint, GLint, GLuint, GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY * tunisProgramUniform4uiv)(GLuint, GLint, GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY * tunisProgramUniform4uivEXT)(GLuint, GLint, GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY * tunisProgramUniformHandleui64ARB)(GLuint, GLint, GLuint64);
    void (KHRONOS_APIENTRY * tunisProgramUniformHandleui64IMG)(GLuint, GLint, GLuint64);
    void (KHRONOS_APIENTRY * tunisProgramUniformHandleui64NV)(GLuint, GLint, GLuint64);
    void (KHRONOS_APIENTRY * tunisProgramUniformHandleui64vARB)(GLuint, GLint, GLsizei, const GLuint64 *);
    void (KHRONOS_APIENTRY * tunisProgramUniformHandleui64vIMG)(GLuint, GLint, GLsizei, const GLuint64 *);
    void (KHRONOS_APIENTRY * tunisProgramUniformHandleui64vNV)(GLuint, GLint, GLsizei, const GLuint64 *);
    void (KHRONOS_APIENTRY * tunisProgramUniformMatrix2dv)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisProgramUniformMatrix2dvEXT)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisProgramUniformMatrix2fv)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisProgramUniformMatrix2fvEXT)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisProgramUniformMatrix2x3dv)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisProgramUniformMatrix2x3dvEXT)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisProgramUniformMatrix2x3fv)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisProgramUniformMatrix2x3fvEXT)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisProgramUniformMatrix2x4dv)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisProgramUniformMatrix2x4dvEXT)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisProgramUniformMatrix2x4fv)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisProgramUniformMatrix2x4fvEXT)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisProgramUniformMatrix3dv)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisProgramUniformMatrix3dvEXT)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisProgramUniformMatrix3fv)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisProgramUniformMatrix3fvEXT)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisProgramUniformMatrix3x2dv)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisProgramUniformMatrix3x2dvEXT)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisProgramUniformMatrix3x2fv)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisProgramUniformMatrix3x2fvEXT)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisProgramUniformMatrix3x4dv)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisProgramUniformMatrix3x4dvEXT)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisProgramUniformMatrix3x4fv)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisProgramUniformMatrix3x4fvEXT)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisProgramUniformMatrix4dv)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisProgramUniformMatrix4dvEXT)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisProgramUniformMatrix4fv)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisProgramUniformMatrix4fvEXT)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisProgramUniformMatrix4x2dv)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisProgramUniformMatrix4x2dvEXT)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisProgramUniformMatrix4x2fv)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisProgramUniformMatrix4x2fvEXT)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisProgramUniformMatrix4x3dv)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisProgramUniformMatrix4x3dvEXT)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisProgramUniformMatrix4x3fv)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisProgramUniformMatrix4x3fvEXT)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisProgramUniformui64NV)(GLuint, GLint, GLuint64EXT);
    void (KHRONOS_APIENTRY * tunisProgramUniformui64vNV)(GLuint, GLint, GLsizei, const GLuint64EXT *);
    void (KHRONOS_APIENTRY * tunisProgramVertexLimitNV)(GLenum, GLint);
    void (KHRONOS_APIENTRY * tunisProvokingVertex)(GLenum);
    void (KHRONOS_APIENTRY * tunisProvokingVertexEXT)(GLenum);
    void (KHRONOS_APIENTRY * tunisPushAttrib)(GLbitfield);
    void (KHRONOS_APIENTRY * tunisPushClientAttrib)(GLbitfield);
    void (KHRONOS_APIENTRY * tunisPushClientAttribDefaultEXT)(GLbitfield);
    void (KHRONOS_APIENTRY * tunisPushDebugGroup)(GLenum, GLuint, GLsizei, const GLchar *);
    void (KHRONOS_APIENTRY * tunisPushDebugGroupKHR)(GLenum, GLuint, GLsizei, const GLchar *);
    void (KHRONOS_APIENTRY * tunisPushGroupMarkerEXT)(GLsizei, const GLchar *);
    void (KHRONOS_APIENTRY * tunisPushMatrix)(void);
    void (KHRONOS_APIENTRY * tunisPushName)(GLuint);
    void (KHRONOS_APIENTRY * tunisQueryCounter)(GLuint, GLenum);
    void (KHRONOS_APIENTRY * tunisQueryCounterEXT)(GLuint, GLenum);
    GLbitfield(KHRONOS_APIENTRY * tunisQueryMatrixxOES)(GLfixed *, GLint *);
    void (KHRONOS_APIENTRY * tunisQueryObjectParameteruiAMD)(GLenum, GLuint, GLenum, GLuint);
    GLint(KHRONOS_APIENTRY * tunisQueryResourceNV)(GLenum, GLint, GLuint, GLint *);
    void (KHRONOS_APIENTRY * tunisQueryResourceTagNV)(GLint, const GLchar *);
    void (KHRONOS_APIENTRY * tunisRasterPos2d)(GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * tunisRasterPos2dv)(const GLdouble *);
    void (KHRONOS_APIENTRY * tunisRasterPos2f)(GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisRasterPos2fv)(const GLfloat *);
    void (KHRONOS_APIENTRY * tunisRasterPos2i)(GLint, GLint);
    void (KHRONOS_APIENTRY * tunisRasterPos2iv)(const GLint *);
    void (KHRONOS_APIENTRY * tunisRasterPos2s)(GLshort, GLshort);
    void (KHRONOS_APIENTRY * tunisRasterPos2sv)(const GLshort *);
    void (KHRONOS_APIENTRY * tunisRasterPos2xOES)(GLfixed, GLfixed);
    void (KHRONOS_APIENTRY * tunisRasterPos2xvOES)(const GLfixed *);
    void (KHRONOS_APIENTRY * tunisRasterPos3d)(GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * tunisRasterPos3dv)(const GLdouble *);
    void (KHRONOS_APIENTRY * tunisRasterPos3f)(GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisRasterPos3fv)(const GLfloat *);
    void (KHRONOS_APIENTRY * tunisRasterPos3i)(GLint, GLint, GLint);
    void (KHRONOS_APIENTRY * tunisRasterPos3iv)(const GLint *);
    void (KHRONOS_APIENTRY * tunisRasterPos3s)(GLshort, GLshort, GLshort);
    void (KHRONOS_APIENTRY * tunisRasterPos3sv)(const GLshort *);
    void (KHRONOS_APIENTRY * tunisRasterPos3xOES)(GLfixed, GLfixed, GLfixed);
    void (KHRONOS_APIENTRY * tunisRasterPos3xvOES)(const GLfixed *);
    void (KHRONOS_APIENTRY * tunisRasterPos4d)(GLdouble, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * tunisRasterPos4dv)(const GLdouble *);
    void (KHRONOS_APIENTRY * tunisRasterPos4f)(GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisRasterPos4fv)(const GLfloat *);
    void (KHRONOS_APIENTRY * tunisRasterPos4i)(GLint, GLint, GLint, GLint);
    void (KHRONOS_APIENTRY * tunisRasterPos4iv)(const GLint *);
    void (KHRONOS_APIENTRY * tunisRasterPos4s)(GLshort, GLshort, GLshort, GLshort);
    void (KHRONOS_APIENTRY * tunisRasterPos4sv)(const GLshort *);
    void (KHRONOS_APIENTRY * tunisRasterPos4xOES)(GLfixed, GLfixed, GLfixed, GLfixed);
    void (KHRONOS_APIENTRY * tunisRasterPos4xvOES)(const GLfixed *);
    void (KHRONOS_APIENTRY * tunisRasterSamplesEXT)(GLuint, GLboolean);
    void (KHRONOS_APIENTRY * tunisReadBuffer)(GLenum);
    void (KHRONOS_APIENTRY * tunisReadBufferIndexedEXT)(GLenum, GLint);
    void (KHRONOS_APIENTRY * tunisReadBufferNV)(GLenum);
    void (KHRONOS_APIENTRY * tunisReadBufferRegion)(GLuint, GLint, GLint, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * tunisReadInstrumentsSGIX)(GLint);
    void (KHRONOS_APIENTRY * tunisReadPixels)(GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, void *);
    void (KHRONOS_APIENTRY * tunisReadnPixels)(GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, GLsizei, void *);
    void (KHRONOS_APIENTRY * tunisReadnPixelsARB)(GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, GLsizei, void *);
    void (KHRONOS_APIENTRY * tunisReadnPixelsEXT)(GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, GLsizei, void *);
    void (KHRONOS_APIENTRY * tunisReadnPixelsKHR)(GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, GLsizei, void *);
    void (KHRONOS_APIENTRY * tunisRectd)(GLdouble, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * tunisRectdv)(const GLdouble *, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisRectf)(GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisRectfv)(const GLfloat *, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisRecti)(GLint, GLint, GLint, GLint);
    void (KHRONOS_APIENTRY * tunisRectiv)(const GLint *, const GLint *);
    void (KHRONOS_APIENTRY * tunisRects)(GLshort, GLshort, GLshort, GLshort);
    void (KHRONOS_APIENTRY * tunisRectsv)(const GLshort *, const GLshort *);
    void (KHRONOS_APIENTRY * tunisRectxOES)(GLfixed, GLfixed, GLfixed, GLfixed);
    void (KHRONOS_APIENTRY * tunisRectxvOES)(const GLfixed *, const GLfixed *);
    void (KHRONOS_APIENTRY * tunisReferencePlaneSGIX)(const GLdouble *);
    GLboolean(KHRONOS_APIENTRY * tunisReleaseKeyedMutexWin32EXT)(GLuint, GLuint64);
    void (KHRONOS_APIENTRY * tunisReleaseShaderCompiler)(void);
    void (KHRONOS_APIENTRY * tunisRenderGpuMaskNV)(GLbitfield);
    GLint(KHRONOS_APIENTRY * tunisRenderMode)(GLenum);
    void (KHRONOS_APIENTRY * tunisRenderbufferStorage)(GLenum, GLenum, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * tunisRenderbufferStorageEXT)(GLenum, GLenum, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * tunisRenderbufferStorageMultisample)(GLenum, GLsizei, GLenum, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * tunisRenderbufferStorageMultisampleANGLE)(GLenum, GLsizei, GLenum, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * tunisRenderbufferStorageMultisampleAPPLE)(GLenum, GLsizei, GLenum, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * tunisRenderbufferStorageMultisampleAdvancedAMD)(GLenum, GLsizei, GLsizei, GLenum, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * tunisRenderbufferStorageMultisampleCoverageNV)(GLenum, GLsizei, GLsizei, GLenum, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * tunisRenderbufferStorageMultisampleEXT)(GLenum, GLsizei, GLenum, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * tunisRenderbufferStorageMultisampleIMG)(GLenum, GLsizei, GLenum, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * tunisRenderbufferStorageMultisampleNV)(GLenum, GLsizei, GLenum, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * tunisRenderbufferStorageOES)(GLenum, GLenum, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * tunisReplacementCodePointerSUN)(GLenum, GLsizei, const void **);
    void (KHRONOS_APIENTRY * tunisReplacementCodeubSUN)(GLubyte);
    void (KHRONOS_APIENTRY * tunisReplacementCodeubvSUN)(const GLubyte *);
    void (KHRONOS_APIENTRY * tunisReplacementCodeuiColor3fVertex3fSUN)(GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisReplacementCodeuiColor3fVertex3fvSUN)(const GLuint *, const GLfloat *, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisReplacementCodeuiColor4fNormal3fVertex3fSUN)(GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisReplacementCodeuiColor4fNormal3fVertex3fvSUN)(const GLuint *, const GLfloat *, const GLfloat *, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisReplacementCodeuiColor4ubVertex3fSUN)(GLuint, GLubyte, GLubyte, GLubyte, GLubyte, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisReplacementCodeuiColor4ubVertex3fvSUN)(const GLuint *, const GLubyte *, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisReplacementCodeuiNormal3fVertex3fSUN)(GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisReplacementCodeuiNormal3fVertex3fvSUN)(const GLuint *, const GLfloat *, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisReplacementCodeuiSUN)(GLuint);
    void (KHRONOS_APIENTRY * tunisReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN)(GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN)(const GLuint *, const GLfloat *, const GLfloat *, const GLfloat *, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisReplacementCodeuiTexCoord2fNormal3fVertex3fSUN)(GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN)(const GLuint *, const GLfloat *, const GLfloat *, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisReplacementCodeuiTexCoord2fVertex3fSUN)(GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisReplacementCodeuiTexCoord2fVertex3fvSUN)(const GLuint *, const GLfloat *, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisReplacementCodeuiVertex3fSUN)(GLuint, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisReplacementCodeuiVertex3fvSUN)(const GLuint *, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisReplacementCodeuivSUN)(const GLuint *);
    void (KHRONOS_APIENTRY * tunisReplacementCodeusSUN)(GLushort);
    void (KHRONOS_APIENTRY * tunisReplacementCodeusvSUN)(const GLushort *);
    void (KHRONOS_APIENTRY * tunisRequestResidentProgramsNV)(GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY * tunisResetHistogram)(GLenum);
    void (KHRONOS_APIENTRY * tunisResetHistogramEXT)(GLenum);
    void (KHRONOS_APIENTRY * tunisResetMinmax)(GLenum);
    void (KHRONOS_APIENTRY * tunisResetMinmaxEXT)(GLenum);
    void (KHRONOS_APIENTRY * tunisResizeBuffersMESA)(void);
    void (KHRONOS_APIENTRY * tunisResolveDepthValuesNV)(void);
    void (KHRONOS_APIENTRY * tunisResolveMultisampleFramebufferAPPLE)(void);
    void (KHRONOS_APIENTRY * tunisResumeTransformFeedback)(void);
    void (KHRONOS_APIENTRY * tunisResumeTransformFeedbackNV)(void);
    void (KHRONOS_APIENTRY * tunisRotated)(GLdouble, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * tunisRotatef)(GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisRotatex)(GLfixed, GLfixed, GLfixed, GLfixed);
    void (KHRONOS_APIENTRY * tunisRotatexOES)(GLfixed, GLfixed, GLfixed, GLfixed);
    void (KHRONOS_APIENTRY * tunisSampleCoverage)(GLfloat, GLboolean);
    void (KHRONOS_APIENTRY * tunisSampleCoverageARB)(GLfloat, GLboolean);
    void (KHRONOS_APIENTRY * tunisSampleCoveragex)(GLclampx, GLboolean);
    void (KHRONOS_APIENTRY * tunisSampleCoveragexOES)(GLclampx, GLboolean);
    void (KHRONOS_APIENTRY * tunisSampleMapATI)(GLuint, GLuint, GLenum);
    void (KHRONOS_APIENTRY * tunisSampleMaskEXT)(GLclampf, GLboolean);
    void (KHRONOS_APIENTRY * tunisSampleMaskIndexedNV)(GLuint, GLbitfield);
    void (KHRONOS_APIENTRY * tunisSampleMaskSGIS)(GLclampf, GLboolean);
    void (KHRONOS_APIENTRY * tunisSampleMaski)(GLuint, GLbitfield);
    void (KHRONOS_APIENTRY * tunisSamplePatternEXT)(GLenum);
    void (KHRONOS_APIENTRY * tunisSamplePatternSGIS)(GLenum);
    void (KHRONOS_APIENTRY * tunisSamplerParameterIiv)(GLuint, GLenum, const GLint *);
    void (KHRONOS_APIENTRY * tunisSamplerParameterIivEXT)(GLuint, GLenum, const GLint *);
    void (KHRONOS_APIENTRY * tunisSamplerParameterIivOES)(GLuint, GLenum, const GLint *);
    void (KHRONOS_APIENTRY * tunisSamplerParameterIuiv)(GLuint, GLenum, const GLuint *);
    void (KHRONOS_APIENTRY * tunisSamplerParameterIuivEXT)(GLuint, GLenum, const GLuint *);
    void (KHRONOS_APIENTRY * tunisSamplerParameterIuivOES)(GLuint, GLenum, const GLuint *);
    void (KHRONOS_APIENTRY * tunisSamplerParameterf)(GLuint, GLenum, GLfloat);
    void (KHRONOS_APIENTRY * tunisSamplerParameterfv)(GLuint, GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisSamplerParameteri)(GLuint, GLenum, GLint);
    void (KHRONOS_APIENTRY * tunisSamplerParameteriv)(GLuint, GLenum, const GLint *);
    void (KHRONOS_APIENTRY * tunisScaled)(GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * tunisScalef)(GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisScalex)(GLfixed, GLfixed, GLfixed);
    void (KHRONOS_APIENTRY * tunisScalexOES)(GLfixed, GLfixed, GLfixed);
    void (KHRONOS_APIENTRY * tunisScissor)(GLint, GLint, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * tunisScissorArrayv)(GLuint, GLsizei, const GLint *);
    void (KHRONOS_APIENTRY * tunisScissorArrayvNV)(GLuint, GLsizei, const GLint *);
    void (KHRONOS_APIENTRY * tunisScissorArrayvOES)(GLuint, GLsizei, const GLint *);
    void (KHRONOS_APIENTRY * tunisScissorIndexed)(GLuint, GLint, GLint, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * tunisScissorIndexedNV)(GLuint, GLint, GLint, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * tunisScissorIndexedOES)(GLuint, GLint, GLint, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * tunisScissorIndexedv)(GLuint, const GLint *);
    void (KHRONOS_APIENTRY * tunisScissorIndexedvNV)(GLuint, const GLint *);
    void (KHRONOS_APIENTRY * tunisScissorIndexedvOES)(GLuint, const GLint *);
    void (KHRONOS_APIENTRY * tunisSecondaryColor3b)(GLbyte, GLbyte, GLbyte);
    void (KHRONOS_APIENTRY * tunisSecondaryColor3bEXT)(GLbyte, GLbyte, GLbyte);
    void (KHRONOS_APIENTRY * tunisSecondaryColor3bv)(const GLbyte *);
    void (KHRONOS_APIENTRY * tunisSecondaryColor3bvEXT)(const GLbyte *);
    void (KHRONOS_APIENTRY * tunisSecondaryColor3d)(GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * tunisSecondaryColor3dEXT)(GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * tunisSecondaryColor3dv)(const GLdouble *);
    void (KHRONOS_APIENTRY * tunisSecondaryColor3dvEXT)(const GLdouble *);
    void (KHRONOS_APIENTRY * tunisSecondaryColor3f)(GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisSecondaryColor3fEXT)(GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisSecondaryColor3fv)(const GLfloat *);
    void (KHRONOS_APIENTRY * tunisSecondaryColor3fvEXT)(const GLfloat *);
    void (KHRONOS_APIENTRY * tunisSecondaryColor3hNV)(GLhalfNV, GLhalfNV, GLhalfNV);
    void (KHRONOS_APIENTRY * tunisSecondaryColor3hvNV)(const GLhalfNV *);
    void (KHRONOS_APIENTRY * tunisSecondaryColor3i)(GLint, GLint, GLint);
    void (KHRONOS_APIENTRY * tunisSecondaryColor3iEXT)(GLint, GLint, GLint);
    void (KHRONOS_APIENTRY * tunisSecondaryColor3iv)(const GLint *);
    void (KHRONOS_APIENTRY * tunisSecondaryColor3ivEXT)(const GLint *);
    void (KHRONOS_APIENTRY * tunisSecondaryColor3s)(GLshort, GLshort, GLshort);
    void (KHRONOS_APIENTRY * tunisSecondaryColor3sEXT)(GLshort, GLshort, GLshort);
    void (KHRONOS_APIENTRY * tunisSecondaryColor3sv)(const GLshort *);
    void (KHRONOS_APIENTRY * tunisSecondaryColor3svEXT)(const GLshort *);
    void (KHRONOS_APIENTRY * tunisSecondaryColor3ub)(GLubyte, GLubyte, GLubyte);
    void (KHRONOS_APIENTRY * tunisSecondaryColor3ubEXT)(GLubyte, GLubyte, GLubyte);
    void (KHRONOS_APIENTRY * tunisSecondaryColor3ubv)(const GLubyte *);
    void (KHRONOS_APIENTRY * tunisSecondaryColor3ubvEXT)(const GLubyte *);
    void (KHRONOS_APIENTRY * tunisSecondaryColor3ui)(GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY * tunisSecondaryColor3uiEXT)(GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY * tunisSecondaryColor3uiv)(const GLuint *);
    void (KHRONOS_APIENTRY * tunisSecondaryColor3uivEXT)(const GLuint *);
    void (KHRONOS_APIENTRY * tunisSecondaryColor3us)(GLushort, GLushort, GLushort);
    void (KHRONOS_APIENTRY * tunisSecondaryColor3usEXT)(GLushort, GLushort, GLushort);
    void (KHRONOS_APIENTRY * tunisSecondaryColor3usv)(const GLushort *);
    void (KHRONOS_APIENTRY * tunisSecondaryColor3usvEXT)(const GLushort *);
    void (KHRONOS_APIENTRY * tunisSecondaryColorFormatNV)(GLint, GLenum, GLsizei);
    void (KHRONOS_APIENTRY * tunisSecondaryColorP3ui)(GLenum, GLuint);
    void (KHRONOS_APIENTRY * tunisSecondaryColorP3uiv)(GLenum, const GLuint *);
    void (KHRONOS_APIENTRY * tunisSecondaryColorPointer)(GLint, GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY * tunisSecondaryColorPointerEXT)(GLint, GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY * tunisSecondaryColorPointerListIBM)(GLint, GLenum, GLint, const void **, GLint);
    void (KHRONOS_APIENTRY * tunisSelectBuffer)(GLsizei, GLuint *);
    void (KHRONOS_APIENTRY * tunisSelectPerfMonitorCountersAMD)(GLuint, GLboolean, GLuint, GLint, GLuint *);
    void (KHRONOS_APIENTRY * tunisSemaphoreParameterui64vEXT)(GLuint, GLenum, const GLuint64 *);
    void (KHRONOS_APIENTRY * tunisSeparableFilter2D)(GLenum, GLenum, GLsizei, GLsizei, GLenum, GLenum, const void *, const void *);
    void (KHRONOS_APIENTRY * tunisSeparableFilter2DEXT)(GLenum, GLenum, GLsizei, GLsizei, GLenum, GLenum, const void *, const void *);
    void (KHRONOS_APIENTRY * tunisSetFenceAPPLE)(GLuint);
    void (KHRONOS_APIENTRY * tunisSetFenceNV)(GLuint, GLenum);
    void (KHRONOS_APIENTRY * tunisSetFragmentShaderConstantATI)(GLuint, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisSetInvariantEXT)(GLuint, GLenum, const void *);
    void (KHRONOS_APIENTRY * tunisSetLocalConstantEXT)(GLuint, GLenum, const void *);
    void (KHRONOS_APIENTRY * tunisSetMultisamplefvAMD)(GLenum, GLuint, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisShadeModel)(GLenum);
    void (KHRONOS_APIENTRY * tunisShaderBinary)(GLsizei, const GLuint *, GLenum, const void *, GLsizei);
    void (KHRONOS_APIENTRY * tunisShaderOp1EXT)(GLenum, GLuint, GLuint);
    void (KHRONOS_APIENTRY * tunisShaderOp2EXT)(GLenum, GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY * tunisShaderOp3EXT)(GLenum, GLuint, GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY * tunisShaderSource)(GLuint, GLsizei, const GLchar *const*, const GLint *);
    void (KHRONOS_APIENTRY * tunisShaderSourceARB)(GLhandleARB, GLsizei, const GLcharARB **, const GLint *);
    void (KHRONOS_APIENTRY * tunisShaderStorageBlockBinding)(GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY * tunisSharpenTexFuncSGIS)(GLenum, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisSignalSemaphoreEXT)(GLuint, GLuint, const GLuint *, GLuint, const GLuint *, const GLenum *);
    void (KHRONOS_APIENTRY * tunisSignalVkFenceNV)(GLuint64);
    void (KHRONOS_APIENTRY * tunisSignalVkSemaphoreNV)(GLuint64);
    void (KHRONOS_APIENTRY * tunisSpecializeShader)(GLuint, const GLchar *, GLuint, const GLuint *, const GLuint *);
    void (KHRONOS_APIENTRY * tunisSpecializeShaderARB)(GLuint, const GLchar *, GLuint, const GLuint *, const GLuint *);
    void (KHRONOS_APIENTRY * tunisSpriteParameterfSGIX)(GLenum, GLfloat);
    void (KHRONOS_APIENTRY * tunisSpriteParameterfvSGIX)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisSpriteParameteriSGIX)(GLenum, GLint);
    void (KHRONOS_APIENTRY * tunisSpriteParameterivSGIX)(GLenum, const GLint *);
    void (KHRONOS_APIENTRY * tunisStartInstrumentsSGIX)(void);
    void (KHRONOS_APIENTRY * tunisStartTilingQCOM)(GLuint, GLuint, GLuint, GLuint, GLbitfield);
    void (KHRONOS_APIENTRY * tunisStateCaptureNV)(GLuint, GLenum);
    void (KHRONOS_APIENTRY * tunisStencilClearTagEXT)(GLsizei, GLuint);
    void (KHRONOS_APIENTRY * tunisStencilFillPathInstancedNV)(GLsizei, GLenum, const void *, GLuint, GLenum, GLuint, GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisStencilFillPathNV)(GLuint, GLenum, GLuint);
    void (KHRONOS_APIENTRY * tunisStencilFunc)(GLenum, GLint, GLuint);
    void (KHRONOS_APIENTRY * tunisStencilFuncSeparate)(GLenum, GLenum, GLint, GLuint);
    void (KHRONOS_APIENTRY * tunisStencilFuncSeparateATI)(GLenum, GLenum, GLint, GLuint);
    void (KHRONOS_APIENTRY * tunisStencilMask)(GLuint);
    void (KHRONOS_APIENTRY * tunisStencilMaskSeparate)(GLenum, GLuint);
    void (KHRONOS_APIENTRY * tunisStencilOp)(GLenum, GLenum, GLenum);
    void (KHRONOS_APIENTRY * tunisStencilOpSeparate)(GLenum, GLenum, GLenum, GLenum);
    void (KHRONOS_APIENTRY * tunisStencilOpSeparateATI)(GLenum, GLenum, GLenum, GLenum);
    void (KHRONOS_APIENTRY * tunisStencilOpValueAMD)(GLenum, GLuint);
    void (KHRONOS_APIENTRY * tunisStencilStrokePathInstancedNV)(GLsizei, GLenum, const void *, GLuint, GLint, GLuint, GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisStencilStrokePathNV)(GLuint, GLint, GLuint);
    void (KHRONOS_APIENTRY * tunisStencilThenCoverFillPathInstancedNV)(GLsizei, GLenum, const void *, GLuint, GLenum, GLuint, GLenum, GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisStencilThenCoverFillPathNV)(GLuint, GLenum, GLuint, GLenum);
    void (KHRONOS_APIENTRY * tunisStencilThenCoverStrokePathInstancedNV)(GLsizei, GLenum, const void *, GLuint, GLint, GLuint, GLenum, GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisStencilThenCoverStrokePathNV)(GLuint, GLint, GLuint, GLenum);
    void (KHRONOS_APIENTRY * tunisStopInstrumentsSGIX)(GLint);
    void (KHRONOS_APIENTRY * tunisStringMarkerGREMEDY)(GLsizei, const void *);
    void (KHRONOS_APIENTRY * tunisSubpixelPrecisionBiasNV)(GLuint, GLuint);
    void (KHRONOS_APIENTRY * tunisSwizzleEXT)(GLuint, GLuint, GLenum, GLenum, GLenum, GLenum);
    void (KHRONOS_APIENTRY * tunisSyncTextureINTEL)(GLuint);
    void (KHRONOS_APIENTRY * tunisTagSampleBufferSGIX)(void);
    void (KHRONOS_APIENTRY * tunisTangent3bEXT)(GLbyte, GLbyte, GLbyte);
    void (KHRONOS_APIENTRY * tunisTangent3bvEXT)(const GLbyte *);
    void (KHRONOS_APIENTRY * tunisTangent3dEXT)(GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * tunisTangent3dvEXT)(const GLdouble *);
    void (KHRONOS_APIENTRY * tunisTangent3fEXT)(GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisTangent3fvEXT)(const GLfloat *);
    void (KHRONOS_APIENTRY * tunisTangent3iEXT)(GLint, GLint, GLint);
    void (KHRONOS_APIENTRY * tunisTangent3ivEXT)(const GLint *);
    void (KHRONOS_APIENTRY * tunisTangent3sEXT)(GLshort, GLshort, GLshort);
    void (KHRONOS_APIENTRY * tunisTangent3svEXT)(const GLshort *);
    void (KHRONOS_APIENTRY * tunisTangentPointerEXT)(GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY * tunisTbufferMask3DFX)(GLuint);
    void (KHRONOS_APIENTRY * tunisTessellationFactorAMD)(GLfloat);
    void (KHRONOS_APIENTRY * tunisTessellationModeAMD)(GLenum);
    GLboolean(KHRONOS_APIENTRY * tunisTestFenceAPPLE)(GLuint);
    GLboolean(KHRONOS_APIENTRY * tunisTestFenceNV)(GLuint);
    GLboolean(KHRONOS_APIENTRY * tunisTestObjectAPPLE)(GLenum, GLuint);
    void (KHRONOS_APIENTRY * tunisTexBuffer)(GLenum, GLenum, GLuint);
    void (KHRONOS_APIENTRY * tunisTexBufferARB)(GLenum, GLenum, GLuint);
    void (KHRONOS_APIENTRY * tunisTexBufferEXT)(GLenum, GLenum, GLuint);
    void (KHRONOS_APIENTRY * tunisTexBufferOES)(GLenum, GLenum, GLuint);
    void (KHRONOS_APIENTRY * tunisTexBufferRange)(GLenum, GLenum, GLuint, GLintptr, GLsizeiptr);
    void (KHRONOS_APIENTRY * tunisTexBufferRangeEXT)(GLenum, GLenum, GLuint, GLintptr, GLsizeiptr);
    void (KHRONOS_APIENTRY * tunisTexBufferRangeOES)(GLenum, GLenum, GLuint, GLintptr, GLsizeiptr);
    void (KHRONOS_APIENTRY * tunisTexBumpParameterfvATI)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisTexBumpParameterivATI)(GLenum, const GLint *);
    void (KHRONOS_APIENTRY * tunisTexCoord1bOES)(GLbyte);
    void (KHRONOS_APIENTRY * tunisTexCoord1bvOES)(const GLbyte *);
    void (KHRONOS_APIENTRY * tunisTexCoord1d)(GLdouble);
    void (KHRONOS_APIENTRY * tunisTexCoord1dv)(const GLdouble *);
    void (KHRONOS_APIENTRY * tunisTexCoord1f)(GLfloat);
    void (KHRONOS_APIENTRY * tunisTexCoord1fv)(const GLfloat *);
    void (KHRONOS_APIENTRY * tunisTexCoord1hNV)(GLhalfNV);
    void (KHRONOS_APIENTRY * tunisTexCoord1hvNV)(const GLhalfNV *);
    void (KHRONOS_APIENTRY * tunisTexCoord1i)(GLint);
    void (KHRONOS_APIENTRY * tunisTexCoord1iv)(const GLint *);
    void (KHRONOS_APIENTRY * tunisTexCoord1s)(GLshort);
    void (KHRONOS_APIENTRY * tunisTexCoord1sv)(const GLshort *);
    void (KHRONOS_APIENTRY * tunisTexCoord1xOES)(GLfixed);
    void (KHRONOS_APIENTRY * tunisTexCoord1xvOES)(const GLfixed *);
    void (KHRONOS_APIENTRY * tunisTexCoord2bOES)(GLbyte, GLbyte);
    void (KHRONOS_APIENTRY * tunisTexCoord2bvOES)(const GLbyte *);
    void (KHRONOS_APIENTRY * tunisTexCoord2d)(GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * tunisTexCoord2dv)(const GLdouble *);
    void (KHRONOS_APIENTRY * tunisTexCoord2f)(GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisTexCoord2fColor3fVertex3fSUN)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisTexCoord2fColor3fVertex3fvSUN)(const GLfloat *, const GLfloat *, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisTexCoord2fColor4fNormal3fVertex3fSUN)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisTexCoord2fColor4fNormal3fVertex3fvSUN)(const GLfloat *, const GLfloat *, const GLfloat *, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisTexCoord2fColor4ubVertex3fSUN)(GLfloat, GLfloat, GLubyte, GLubyte, GLubyte, GLubyte, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisTexCoord2fColor4ubVertex3fvSUN)(const GLfloat *, const GLubyte *, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisTexCoord2fNormal3fVertex3fSUN)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisTexCoord2fNormal3fVertex3fvSUN)(const GLfloat *, const GLfloat *, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisTexCoord2fVertex3fSUN)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisTexCoord2fVertex3fvSUN)(const GLfloat *, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisTexCoord2fv)(const GLfloat *);
    void (KHRONOS_APIENTRY * tunisTexCoord2hNV)(GLhalfNV, GLhalfNV);
    void (KHRONOS_APIENTRY * tunisTexCoord2hvNV)(const GLhalfNV *);
    void (KHRONOS_APIENTRY * tunisTexCoord2i)(GLint, GLint);
    void (KHRONOS_APIENTRY * tunisTexCoord2iv)(const GLint *);
    void (KHRONOS_APIENTRY * tunisTexCoord2s)(GLshort, GLshort);
    void (KHRONOS_APIENTRY * tunisTexCoord2sv)(const GLshort *);
    void (KHRONOS_APIENTRY * tunisTexCoord2xOES)(GLfixed, GLfixed);
    void (KHRONOS_APIENTRY * tunisTexCoord2xvOES)(const GLfixed *);
    void (KHRONOS_APIENTRY * tunisTexCoord3bOES)(GLbyte, GLbyte, GLbyte);
    void (KHRONOS_APIENTRY * tunisTexCoord3bvOES)(const GLbyte *);
    void (KHRONOS_APIENTRY * tunisTexCoord3d)(GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * tunisTexCoord3dv)(const GLdouble *);
    void (KHRONOS_APIENTRY * tunisTexCoord3f)(GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisTexCoord3fv)(const GLfloat *);
    void (KHRONOS_APIENTRY * tunisTexCoord3hNV)(GLhalfNV, GLhalfNV, GLhalfNV);
    void (KHRONOS_APIENTRY * tunisTexCoord3hvNV)(const GLhalfNV *);
    void (KHRONOS_APIENTRY * tunisTexCoord3i)(GLint, GLint, GLint);
    void (KHRONOS_APIENTRY * tunisTexCoord3iv)(const GLint *);
    void (KHRONOS_APIENTRY * tunisTexCoord3s)(GLshort, GLshort, GLshort);
    void (KHRONOS_APIENTRY * tunisTexCoord3sv)(const GLshort *);
    void (KHRONOS_APIENTRY * tunisTexCoord3xOES)(GLfixed, GLfixed, GLfixed);
    void (KHRONOS_APIENTRY * tunisTexCoord3xvOES)(const GLfixed *);
    void (KHRONOS_APIENTRY * tunisTexCoord4bOES)(GLbyte, GLbyte, GLbyte, GLbyte);
    void (KHRONOS_APIENTRY * tunisTexCoord4bvOES)(const GLbyte *);
    void (KHRONOS_APIENTRY * tunisTexCoord4d)(GLdouble, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * tunisTexCoord4dv)(const GLdouble *);
    void (KHRONOS_APIENTRY * tunisTexCoord4f)(GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisTexCoord4fColor4fNormal3fVertex4fSUN)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisTexCoord4fColor4fNormal3fVertex4fvSUN)(const GLfloat *, const GLfloat *, const GLfloat *, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisTexCoord4fVertex4fSUN)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisTexCoord4fVertex4fvSUN)(const GLfloat *, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisTexCoord4fv)(const GLfloat *);
    void (KHRONOS_APIENTRY * tunisTexCoord4hNV)(GLhalfNV, GLhalfNV, GLhalfNV, GLhalfNV);
    void (KHRONOS_APIENTRY * tunisTexCoord4hvNV)(const GLhalfNV *);
    void (KHRONOS_APIENTRY * tunisTexCoord4i)(GLint, GLint, GLint, GLint);
    void (KHRONOS_APIENTRY * tunisTexCoord4iv)(const GLint *);
    void (KHRONOS_APIENTRY * tunisTexCoord4s)(GLshort, GLshort, GLshort, GLshort);
    void (KHRONOS_APIENTRY * tunisTexCoord4sv)(const GLshort *);
    void (KHRONOS_APIENTRY * tunisTexCoord4xOES)(GLfixed, GLfixed, GLfixed, GLfixed);
    void (KHRONOS_APIENTRY * tunisTexCoord4xvOES)(const GLfixed *);
    void (KHRONOS_APIENTRY * tunisTexCoordFormatNV)(GLint, GLenum, GLsizei);
    void (KHRONOS_APIENTRY * tunisTexCoordP1ui)(GLenum, GLuint);
    void (KHRONOS_APIENTRY * tunisTexCoordP1uiv)(GLenum, const GLuint *);
    void (KHRONOS_APIENTRY * tunisTexCoordP2ui)(GLenum, GLuint);
    void (KHRONOS_APIENTRY * tunisTexCoordP2uiv)(GLenum, const GLuint *);
    void (KHRONOS_APIENTRY * tunisTexCoordP3ui)(GLenum, GLuint);
    void (KHRONOS_APIENTRY * tunisTexCoordP3uiv)(GLenum, const GLuint *);
    void (KHRONOS_APIENTRY * tunisTexCoordP4ui)(GLenum, GLuint);
    void (KHRONOS_APIENTRY * tunisTexCoordP4uiv)(GLenum, const GLuint *);
    void (KHRONOS_APIENTRY * tunisTexCoordPointer)(GLint, GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY * tunisTexCoordPointerEXT)(GLint, GLenum, GLsizei, GLsizei, const void *);
    void (KHRONOS_APIENTRY * tunisTexCoordPointerListIBM)(GLint, GLenum, GLint, const void **, GLint);
    void (KHRONOS_APIENTRY * tunisTexCoordPointervINTEL)(GLint, GLenum, const void **);
    void (KHRONOS_APIENTRY * tunisTexEnvf)(GLenum, GLenum, GLfloat);
    void (KHRONOS_APIENTRY * tunisTexEnvfv)(GLenum, GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisTexEnvi)(GLenum, GLenum, GLint);
    void (KHRONOS_APIENTRY * tunisTexEnviv)(GLenum, GLenum, const GLint *);
    void (KHRONOS_APIENTRY * tunisTexEnvx)(GLenum, GLenum, GLfixed);
    void (KHRONOS_APIENTRY * tunisTexEnvxOES)(GLenum, GLenum, GLfixed);
    void (KHRONOS_APIENTRY * tunisTexEnvxv)(GLenum, GLenum, const GLfixed *);
    void (KHRONOS_APIENTRY * tunisTexEnvxvOES)(GLenum, GLenum, const GLfixed *);
    void (KHRONOS_APIENTRY * tunisTexFilterFuncSGIS)(GLenum, GLenum, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisTexGend)(GLenum, GLenum, GLdouble);
    void (KHRONOS_APIENTRY * tunisTexGendv)(GLenum, GLenum, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisTexGenf)(GLenum, GLenum, GLfloat);
    void (KHRONOS_APIENTRY * tunisTexGenfOES)(GLenum, GLenum, GLfloat);
    void (KHRONOS_APIENTRY * tunisTexGenfv)(GLenum, GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisTexGenfvOES)(GLenum, GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisTexGeni)(GLenum, GLenum, GLint);
    void (KHRONOS_APIENTRY * tunisTexGeniOES)(GLenum, GLenum, GLint);
    void (KHRONOS_APIENTRY * tunisTexGeniv)(GLenum, GLenum, const GLint *);
    void (KHRONOS_APIENTRY * tunisTexGenivOES)(GLenum, GLenum, const GLint *);
    void (KHRONOS_APIENTRY * tunisTexGenxOES)(GLenum, GLenum, GLfixed);
    void (KHRONOS_APIENTRY * tunisTexGenxvOES)(GLenum, GLenum, const GLfixed *);
    void (KHRONOS_APIENTRY * tunisTexImage1D)(GLenum, GLint, GLint, GLsizei, GLint, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY * tunisTexImage2D)(GLenum, GLint, GLint, GLsizei, GLsizei, GLint, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY * tunisTexImage2DMultisample)(GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLboolean);
    void (KHRONOS_APIENTRY * tunisTexImage2DMultisampleCoverageNV)(GLenum, GLsizei, GLsizei, GLint, GLsizei, GLsizei, GLboolean);
    void (KHRONOS_APIENTRY * tunisTexImage3D)(GLenum, GLint, GLint, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY * tunisTexImage3DEXT)(GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY * tunisTexImage3DMultisample)(GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean);
    void (KHRONOS_APIENTRY * tunisTexImage3DMultisampleCoverageNV)(GLenum, GLsizei, GLsizei, GLint, GLsizei, GLsizei, GLsizei, GLboolean);
    void (KHRONOS_APIENTRY * tunisTexImage3DOES)(GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY * tunisTexImage4DSGIS)(GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY * tunisTexPageCommitmentARB)(GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLboolean);
    void (KHRONOS_APIENTRY * tunisTexPageCommitmentEXT)(GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLboolean);
    void (KHRONOS_APIENTRY * tunisTexParameterIiv)(GLenum, GLenum, const GLint *);
    void (KHRONOS_APIENTRY * tunisTexParameterIivEXT)(GLenum, GLenum, const GLint *);
    void (KHRONOS_APIENTRY * tunisTexParameterIivOES)(GLenum, GLenum, const GLint *);
    void (KHRONOS_APIENTRY * tunisTexParameterIuiv)(GLenum, GLenum, const GLuint *);
    void (KHRONOS_APIENTRY * tunisTexParameterIuivEXT)(GLenum, GLenum, const GLuint *);
    void (KHRONOS_APIENTRY * tunisTexParameterIuivOES)(GLenum, GLenum, const GLuint *);
    void (KHRONOS_APIENTRY * tunisTexParameterf)(GLenum, GLenum, GLfloat);
    void (KHRONOS_APIENTRY * tunisTexParameterfv)(GLenum, GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisTexParameteri)(GLenum, GLenum, GLint);
    void (KHRONOS_APIENTRY * tunisTexParameteriv)(GLenum, GLenum, const GLint *);
    void (KHRONOS_APIENTRY * tunisTexParameterx)(GLenum, GLenum, GLfixed);
    void (KHRONOS_APIENTRY * tunisTexParameterxOES)(GLenum, GLenum, GLfixed);
    void (KHRONOS_APIENTRY * tunisTexParameterxv)(GLenum, GLenum, const GLfixed *);
    void (KHRONOS_APIENTRY * tunisTexParameterxvOES)(GLenum, GLenum, const GLfixed *);
    void (KHRONOS_APIENTRY * tunisTexRenderbufferNV)(GLenum, GLuint);
    void (KHRONOS_APIENTRY * tunisTexStorage1D)(GLenum, GLsizei, GLenum, GLsizei);
    void (KHRONOS_APIENTRY * tunisTexStorage1DEXT)(GLenum, GLsizei, GLenum, GLsizei);
    void (KHRONOS_APIENTRY * tunisTexStorage2D)(GLenum, GLsizei, GLenum, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * tunisTexStorage2DEXT)(GLenum, GLsizei, GLenum, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * tunisTexStorage2DMultisample)(GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLboolean);
    void (KHRONOS_APIENTRY * tunisTexStorage3D)(GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * tunisTexStorage3DEXT)(GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * tunisTexStorage3DMultisample)(GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean);
    void (KHRONOS_APIENTRY * tunisTexStorage3DMultisampleOES)(GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean);
    void (KHRONOS_APIENTRY * tunisTexStorageMem1DEXT)(GLenum, GLsizei, GLenum, GLsizei, GLuint, GLuint64);
    void (KHRONOS_APIENTRY * tunisTexStorageMem2DEXT)(GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLuint, GLuint64);
    void (KHRONOS_APIENTRY * tunisTexStorageMem2DMultisampleEXT)(GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLboolean, GLuint, GLuint64);
    void (KHRONOS_APIENTRY * tunisTexStorageMem3DEXT)(GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLuint, GLuint64);
    void (KHRONOS_APIENTRY * tunisTexStorageMem3DMultisampleEXT)(GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean, GLuint, GLuint64);
    void (KHRONOS_APIENTRY * tunisTexStorageSparseAMD)(GLenum, GLenum, GLsizei, GLsizei, GLsizei, GLsizei, GLbitfield);
    void (KHRONOS_APIENTRY * tunisTexSubImage1D)(GLenum, GLint, GLint, GLsizei, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY * tunisTexSubImage1DEXT)(GLenum, GLint, GLint, GLsizei, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY * tunisTexSubImage2D)(GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY * tunisTexSubImage2DEXT)(GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY * tunisTexSubImage3D)(GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY * tunisTexSubImage3DEXT)(GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY * tunisTexSubImage3DOES)(GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY * tunisTexSubImage4DSGIS)(GLenum, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLsizei, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY * tunisTextureBarrier)(void);
    void (KHRONOS_APIENTRY * tunisTextureBarrierNV)(void);
    void (KHRONOS_APIENTRY * tunisTextureBuffer)(GLuint, GLenum, GLuint);
    void (KHRONOS_APIENTRY * tunisTextureBufferEXT)(GLuint, GLenum, GLenum, GLuint);
    void (KHRONOS_APIENTRY * tunisTextureBufferRange)(GLuint, GLenum, GLuint, GLintptr, GLsizeiptr);
    void (KHRONOS_APIENTRY * tunisTextureBufferRangeEXT)(GLuint, GLenum, GLenum, GLuint, GLintptr, GLsizeiptr);
    void (KHRONOS_APIENTRY * tunisTextureColorMaskSGIS)(GLboolean, GLboolean, GLboolean, GLboolean);
    void (KHRONOS_APIENTRY * tunisTextureFoveationParametersQCOM)(GLuint, GLuint, GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisTextureImage1DEXT)(GLuint, GLenum, GLint, GLint, GLsizei, GLint, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY * tunisTextureImage2DEXT)(GLuint, GLenum, GLint, GLint, GLsizei, GLsizei, GLint, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY * tunisTextureImage2DMultisampleCoverageNV)(GLuint, GLenum, GLsizei, GLsizei, GLint, GLsizei, GLsizei, GLboolean);
    void (KHRONOS_APIENTRY * tunisTextureImage2DMultisampleNV)(GLuint, GLenum, GLsizei, GLint, GLsizei, GLsizei, GLboolean);
    void (KHRONOS_APIENTRY * tunisTextureImage3DEXT)(GLuint, GLenum, GLint, GLint, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY * tunisTextureImage3DMultisampleCoverageNV)(GLuint, GLenum, GLsizei, GLsizei, GLint, GLsizei, GLsizei, GLsizei, GLboolean);
    void (KHRONOS_APIENTRY * tunisTextureImage3DMultisampleNV)(GLuint, GLenum, GLsizei, GLint, GLsizei, GLsizei, GLsizei, GLboolean);
    void (KHRONOS_APIENTRY * tunisTextureLightEXT)(GLenum);
    void (KHRONOS_APIENTRY * tunisTextureMaterialEXT)(GLenum, GLenum);
    void (KHRONOS_APIENTRY * tunisTextureNormalEXT)(GLenum);
    void (KHRONOS_APIENTRY * tunisTexturePageCommitmentEXT)(GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLboolean);
    void (KHRONOS_APIENTRY * tunisTextureParameterIiv)(GLuint, GLenum, const GLint *);
    void (KHRONOS_APIENTRY * tunisTextureParameterIivEXT)(GLuint, GLenum, GLenum, const GLint *);
    void (KHRONOS_APIENTRY * tunisTextureParameterIuiv)(GLuint, GLenum, const GLuint *);
    void (KHRONOS_APIENTRY * tunisTextureParameterIuivEXT)(GLuint, GLenum, GLenum, const GLuint *);
    void (KHRONOS_APIENTRY * tunisTextureParameterf)(GLuint, GLenum, GLfloat);
    void (KHRONOS_APIENTRY * tunisTextureParameterfEXT)(GLuint, GLenum, GLenum, GLfloat);
    void (KHRONOS_APIENTRY * tunisTextureParameterfv)(GLuint, GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisTextureParameterfvEXT)(GLuint, GLenum, GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisTextureParameteri)(GLuint, GLenum, GLint);
    void (KHRONOS_APIENTRY * tunisTextureParameteriEXT)(GLuint, GLenum, GLenum, GLint);
    void (KHRONOS_APIENTRY * tunisTextureParameteriv)(GLuint, GLenum, const GLint *);
    void (KHRONOS_APIENTRY * tunisTextureParameterivEXT)(GLuint, GLenum, GLenum, const GLint *);
    void (KHRONOS_APIENTRY * tunisTextureRangeAPPLE)(GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY * tunisTextureRenderbufferEXT)(GLuint, GLenum, GLuint);
    void (KHRONOS_APIENTRY * tunisTextureStorage1D)(GLuint, GLsizei, GLenum, GLsizei);
    void (KHRONOS_APIENTRY * tunisTextureStorage1DEXT)(GLuint, GLenum, GLsizei, GLenum, GLsizei);
    void (KHRONOS_APIENTRY * tunisTextureStorage2D)(GLuint, GLsizei, GLenum, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * tunisTextureStorage2DEXT)(GLuint, GLenum, GLsizei, GLenum, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * tunisTextureStorage2DMultisample)(GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLboolean);
    void (KHRONOS_APIENTRY * tunisTextureStorage2DMultisampleEXT)(GLuint, GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLboolean);
    void (KHRONOS_APIENTRY * tunisTextureStorage3D)(GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * tunisTextureStorage3DEXT)(GLuint, GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * tunisTextureStorage3DMultisample)(GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean);
    void (KHRONOS_APIENTRY * tunisTextureStorage3DMultisampleEXT)(GLuint, GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean);
    void (KHRONOS_APIENTRY * tunisTextureStorageMem1DEXT)(GLuint, GLsizei, GLenum, GLsizei, GLuint, GLuint64);
    void (KHRONOS_APIENTRY * tunisTextureStorageMem2DEXT)(GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLuint, GLuint64);
    void (KHRONOS_APIENTRY * tunisTextureStorageMem2DMultisampleEXT)(GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLboolean, GLuint, GLuint64);
    void (KHRONOS_APIENTRY * tunisTextureStorageMem3DEXT)(GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLuint, GLuint64);
    void (KHRONOS_APIENTRY * tunisTextureStorageMem3DMultisampleEXT)(GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean, GLuint, GLuint64);
    void (KHRONOS_APIENTRY * tunisTextureStorageSparseAMD)(GLuint, GLenum, GLenum, GLsizei, GLsizei, GLsizei, GLsizei, GLbitfield);
    void (KHRONOS_APIENTRY * tunisTextureSubImage1D)(GLuint, GLint, GLint, GLsizei, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY * tunisTextureSubImage1DEXT)(GLuint, GLenum, GLint, GLint, GLsizei, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY * tunisTextureSubImage2D)(GLuint, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY * tunisTextureSubImage2DEXT)(GLuint, GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY * tunisTextureSubImage3D)(GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY * tunisTextureSubImage3DEXT)(GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY * tunisTextureView)(GLuint, GLenum, GLuint, GLenum, GLuint, GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY * tunisTextureViewEXT)(GLuint, GLenum, GLuint, GLenum, GLuint, GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY * tunisTextureViewOES)(GLuint, GLenum, GLuint, GLenum, GLuint, GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY * tunisTrackMatrixNV)(GLenum, GLuint, GLenum, GLenum);
    void (KHRONOS_APIENTRY * tunisTransformFeedbackAttribsNV)(GLsizei, const GLint *, GLenum);
    void (KHRONOS_APIENTRY * tunisTransformFeedbackBufferBase)(GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY * tunisTransformFeedbackBufferRange)(GLuint, GLuint, GLuint, GLintptr, GLsizeiptr);
    void (KHRONOS_APIENTRY * tunisTransformFeedbackStreamAttribsNV)(GLsizei, const GLint *, GLsizei, const GLint *, GLenum);
    void (KHRONOS_APIENTRY * tunisTransformFeedbackVaryings)(GLuint, GLsizei, const GLchar *const*, GLenum);
    void (KHRONOS_APIENTRY * tunisTransformFeedbackVaryingsEXT)(GLuint, GLsizei, const GLchar *const*, GLenum);
    void (KHRONOS_APIENTRY * tunisTransformFeedbackVaryingsNV)(GLuint, GLsizei, const GLint *, GLenum);
    void (KHRONOS_APIENTRY * tunisTransformPathNV)(GLuint, GLuint, GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisTranslated)(GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * tunisTranslatef)(GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisTranslatex)(GLfixed, GLfixed, GLfixed);
    void (KHRONOS_APIENTRY * tunisTranslatexOES)(GLfixed, GLfixed, GLfixed);
    void (KHRONOS_APIENTRY * tunisUniform1d)(GLint, GLdouble);
    void (KHRONOS_APIENTRY * tunisUniform1dv)(GLint, GLsizei, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisUniform1f)(GLint, GLfloat);
    void (KHRONOS_APIENTRY * tunisUniform1fARB)(GLint, GLfloat);
    void (KHRONOS_APIENTRY * tunisUniform1fv)(GLint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisUniform1fvARB)(GLint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisUniform1i)(GLint, GLint);
    void (KHRONOS_APIENTRY * tunisUniform1i64ARB)(GLint, GLint64);
    void (KHRONOS_APIENTRY * tunisUniform1i64NV)(GLint, GLint64EXT);
    void (KHRONOS_APIENTRY * tunisUniform1i64vARB)(GLint, GLsizei, const GLint64 *);
    void (KHRONOS_APIENTRY * tunisUniform1i64vNV)(GLint, GLsizei, const GLint64EXT *);
    void (KHRONOS_APIENTRY * tunisUniform1iARB)(GLint, GLint);
    void (KHRONOS_APIENTRY * tunisUniform1iv)(GLint, GLsizei, const GLint *);
    void (KHRONOS_APIENTRY * tunisUniform1ivARB)(GLint, GLsizei, const GLint *);
    void (KHRONOS_APIENTRY * tunisUniform1ui)(GLint, GLuint);
    void (KHRONOS_APIENTRY * tunisUniform1ui64ARB)(GLint, GLuint64);
    void (KHRONOS_APIENTRY * tunisUniform1ui64NV)(GLint, GLuint64EXT);
    void (KHRONOS_APIENTRY * tunisUniform1ui64vARB)(GLint, GLsizei, const GLuint64 *);
    void (KHRONOS_APIENTRY * tunisUniform1ui64vNV)(GLint, GLsizei, const GLuint64EXT *);
    void (KHRONOS_APIENTRY * tunisUniform1uiEXT)(GLint, GLuint);
    void (KHRONOS_APIENTRY * tunisUniform1uiv)(GLint, GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY * tunisUniform1uivEXT)(GLint, GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY * tunisUniform2d)(GLint, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * tunisUniform2dv)(GLint, GLsizei, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisUniform2f)(GLint, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisUniform2fARB)(GLint, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisUniform2fv)(GLint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisUniform2fvARB)(GLint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisUniform2i)(GLint, GLint, GLint);
    void (KHRONOS_APIENTRY * tunisUniform2i64ARB)(GLint, GLint64, GLint64);
    void (KHRONOS_APIENTRY * tunisUniform2i64NV)(GLint, GLint64EXT, GLint64EXT);
    void (KHRONOS_APIENTRY * tunisUniform2i64vARB)(GLint, GLsizei, const GLint64 *);
    void (KHRONOS_APIENTRY * tunisUniform2i64vNV)(GLint, GLsizei, const GLint64EXT *);
    void (KHRONOS_APIENTRY * tunisUniform2iARB)(GLint, GLint, GLint);
    void (KHRONOS_APIENTRY * tunisUniform2iv)(GLint, GLsizei, const GLint *);
    void (KHRONOS_APIENTRY * tunisUniform2ivARB)(GLint, GLsizei, const GLint *);
    void (KHRONOS_APIENTRY * tunisUniform2ui)(GLint, GLuint, GLuint);
    void (KHRONOS_APIENTRY * tunisUniform2ui64ARB)(GLint, GLuint64, GLuint64);
    void (KHRONOS_APIENTRY * tunisUniform2ui64NV)(GLint, GLuint64EXT, GLuint64EXT);
    void (KHRONOS_APIENTRY * tunisUniform2ui64vARB)(GLint, GLsizei, const GLuint64 *);
    void (KHRONOS_APIENTRY * tunisUniform2ui64vNV)(GLint, GLsizei, const GLuint64EXT *);
    void (KHRONOS_APIENTRY * tunisUniform2uiEXT)(GLint, GLuint, GLuint);
    void (KHRONOS_APIENTRY * tunisUniform2uiv)(GLint, GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY * tunisUniform2uivEXT)(GLint, GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY * tunisUniform3d)(GLint, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * tunisUniform3dv)(GLint, GLsizei, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisUniform3f)(GLint, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisUniform3fARB)(GLint, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisUniform3fv)(GLint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisUniform3fvARB)(GLint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisUniform3i)(GLint, GLint, GLint, GLint);
    void (KHRONOS_APIENTRY * tunisUniform3i64ARB)(GLint, GLint64, GLint64, GLint64);
    void (KHRONOS_APIENTRY * tunisUniform3i64NV)(GLint, GLint64EXT, GLint64EXT, GLint64EXT);
    void (KHRONOS_APIENTRY * tunisUniform3i64vARB)(GLint, GLsizei, const GLint64 *);
    void (KHRONOS_APIENTRY * tunisUniform3i64vNV)(GLint, GLsizei, const GLint64EXT *);
    void (KHRONOS_APIENTRY * tunisUniform3iARB)(GLint, GLint, GLint, GLint);
    void (KHRONOS_APIENTRY * tunisUniform3iv)(GLint, GLsizei, const GLint *);
    void (KHRONOS_APIENTRY * tunisUniform3ivARB)(GLint, GLsizei, const GLint *);
    void (KHRONOS_APIENTRY * tunisUniform3ui)(GLint, GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY * tunisUniform3ui64ARB)(GLint, GLuint64, GLuint64, GLuint64);
    void (KHRONOS_APIENTRY * tunisUniform3ui64NV)(GLint, GLuint64EXT, GLuint64EXT, GLuint64EXT);
    void (KHRONOS_APIENTRY * tunisUniform3ui64vARB)(GLint, GLsizei, const GLuint64 *);
    void (KHRONOS_APIENTRY * tunisUniform3ui64vNV)(GLint, GLsizei, const GLuint64EXT *);
    void (KHRONOS_APIENTRY * tunisUniform3uiEXT)(GLint, GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY * tunisUniform3uiv)(GLint, GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY * tunisUniform3uivEXT)(GLint, GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY * tunisUniform4d)(GLint, GLdouble, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * tunisUniform4dv)(GLint, GLsizei, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisUniform4f)(GLint, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisUniform4fARB)(GLint, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisUniform4fv)(GLint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisUniform4fvARB)(GLint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisUniform4i)(GLint, GLint, GLint, GLint, GLint);
    void (KHRONOS_APIENTRY * tunisUniform4i64ARB)(GLint, GLint64, GLint64, GLint64, GLint64);
    void (KHRONOS_APIENTRY * tunisUniform4i64NV)(GLint, GLint64EXT, GLint64EXT, GLint64EXT, GLint64EXT);
    void (KHRONOS_APIENTRY * tunisUniform4i64vARB)(GLint, GLsizei, const GLint64 *);
    void (KHRONOS_APIENTRY * tunisUniform4i64vNV)(GLint, GLsizei, const GLint64EXT *);
    void (KHRONOS_APIENTRY * tunisUniform4iARB)(GLint, GLint, GLint, GLint, GLint);
    void (KHRONOS_APIENTRY * tunisUniform4iv)(GLint, GLsizei, const GLint *);
    void (KHRONOS_APIENTRY * tunisUniform4ivARB)(GLint, GLsizei, const GLint *);
    void (KHRONOS_APIENTRY * tunisUniform4ui)(GLint, GLuint, GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY * tunisUniform4ui64ARB)(GLint, GLuint64, GLuint64, GLuint64, GLuint64);
    void (KHRONOS_APIENTRY * tunisUniform4ui64NV)(GLint, GLuint64EXT, GLuint64EXT, GLuint64EXT, GLuint64EXT);
    void (KHRONOS_APIENTRY * tunisUniform4ui64vARB)(GLint, GLsizei, const GLuint64 *);
    void (KHRONOS_APIENTRY * tunisUniform4ui64vNV)(GLint, GLsizei, const GLuint64EXT *);
    void (KHRONOS_APIENTRY * tunisUniform4uiEXT)(GLint, GLuint, GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY * tunisUniform4uiv)(GLint, GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY * tunisUniform4uivEXT)(GLint, GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY * tunisUniformBlockBinding)(GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY * tunisUniformBufferEXT)(GLuint, GLint, GLuint);
    void (KHRONOS_APIENTRY * tunisUniformHandleui64ARB)(GLint, GLuint64);
    void (KHRONOS_APIENTRY * tunisUniformHandleui64IMG)(GLint, GLuint64);
    void (KHRONOS_APIENTRY * tunisUniformHandleui64NV)(GLint, GLuint64);
    void (KHRONOS_APIENTRY * tunisUniformHandleui64vARB)(GLint, GLsizei, const GLuint64 *);
    void (KHRONOS_APIENTRY * tunisUniformHandleui64vIMG)(GLint, GLsizei, const GLuint64 *);
    void (KHRONOS_APIENTRY * tunisUniformHandleui64vNV)(GLint, GLsizei, const GLuint64 *);
    void (KHRONOS_APIENTRY * tunisUniformMatrix2dv)(GLint, GLsizei, GLboolean, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisUniformMatrix2fv)(GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisUniformMatrix2fvARB)(GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisUniformMatrix2x3dv)(GLint, GLsizei, GLboolean, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisUniformMatrix2x3fv)(GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisUniformMatrix2x3fvNV)(GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisUniformMatrix2x4dv)(GLint, GLsizei, GLboolean, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisUniformMatrix2x4fv)(GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisUniformMatrix2x4fvNV)(GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisUniformMatrix3dv)(GLint, GLsizei, GLboolean, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisUniformMatrix3fv)(GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisUniformMatrix3fvARB)(GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisUniformMatrix3x2dv)(GLint, GLsizei, GLboolean, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisUniformMatrix3x2fv)(GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisUniformMatrix3x2fvNV)(GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisUniformMatrix3x4dv)(GLint, GLsizei, GLboolean, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisUniformMatrix3x4fv)(GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisUniformMatrix3x4fvNV)(GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisUniformMatrix4dv)(GLint, GLsizei, GLboolean, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisUniformMatrix4fv)(GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisUniformMatrix4fvARB)(GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisUniformMatrix4x2dv)(GLint, GLsizei, GLboolean, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisUniformMatrix4x2fv)(GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisUniformMatrix4x2fvNV)(GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisUniformMatrix4x3dv)(GLint, GLsizei, GLboolean, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisUniformMatrix4x3fv)(GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisUniformMatrix4x3fvNV)(GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisUniformSubroutinesuiv)(GLenum, GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY * tunisUniformui64NV)(GLint, GLuint64EXT);
    void (KHRONOS_APIENTRY * tunisUniformui64vNV)(GLint, GLsizei, const GLuint64EXT *);
    void (KHRONOS_APIENTRY * tunisUnlockArraysEXT)(void);
    GLboolean(KHRONOS_APIENTRY * tunisUnmapBuffer)(GLenum);
    GLboolean(KHRONOS_APIENTRY * tunisUnmapBufferARB)(GLenum);
    GLboolean(KHRONOS_APIENTRY * tunisUnmapBufferOES)(GLenum);
    GLboolean(KHRONOS_APIENTRY * tunisUnmapNamedBuffer)(GLuint);
    GLboolean(KHRONOS_APIENTRY * tunisUnmapNamedBufferEXT)(GLuint);
    void (KHRONOS_APIENTRY * tunisUnmapObjectBufferATI)(GLuint);
    void (KHRONOS_APIENTRY * tunisUnmapTexture2DINTEL)(GLuint, GLint);
    void (KHRONOS_APIENTRY * tunisUpdateObjectBufferATI)(GLuint, GLuint, GLsizei, const void *, GLenum);
    void (KHRONOS_APIENTRY * tunisUseProgram)(GLuint);
    void (KHRONOS_APIENTRY * tunisUseProgramObjectARB)(GLhandleARB);
    void (KHRONOS_APIENTRY * tunisUseProgramStages)(GLuint, GLbitfield, GLuint);
    void (KHRONOS_APIENTRY * tunisUseProgramStagesEXT)(GLuint, GLbitfield, GLuint);
    void (KHRONOS_APIENTRY * tunisUseShaderProgramEXT)(GLenum, GLuint);
    void (KHRONOS_APIENTRY * tunisVDPAUFiniNV)(void);
    void (KHRONOS_APIENTRY * tunisVDPAUGetSurfaceivNV)(GLvdpauSurfaceNV, GLenum, GLsizei, GLsizei *, GLint *);
    void (KHRONOS_APIENTRY * tunisVDPAUInitNV)(const void *, const void *);
    GLboolean(KHRONOS_APIENTRY * tunisVDPAUIsSurfaceNV)(GLvdpauSurfaceNV);
    void (KHRONOS_APIENTRY * tunisVDPAUMapSurfacesNV)(GLsizei, const GLvdpauSurfaceNV *);
    GLvdpauSurfaceNV(KHRONOS_APIENTRY * tunisVDPAURegisterOutputSurfaceNV)(const void *, GLenum, GLsizei, const GLuint *);
    GLvdpauSurfaceNV(KHRONOS_APIENTRY * tunisVDPAURegisterVideoSurfaceNV)(const void *, GLenum, GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY * tunisVDPAUSurfaceAccessNV)(GLvdpauSurfaceNV, GLenum);
    void (KHRONOS_APIENTRY * tunisVDPAUUnmapSurfacesNV)(GLsizei, const GLvdpauSurfaceNV *);
    void (KHRONOS_APIENTRY * tunisVDPAUUnregisterSurfaceNV)(GLvdpauSurfaceNV);
    void (KHRONOS_APIENTRY * tunisValidateProgram)(GLuint);
    void (KHRONOS_APIENTRY * tunisValidateProgramARB)(GLhandleARB);
    void (KHRONOS_APIENTRY * tunisValidateProgramPipeline)(GLuint);
    void (KHRONOS_APIENTRY * tunisValidateProgramPipelineEXT)(GLuint);
    void (KHRONOS_APIENTRY * tunisVariantArrayObjectATI)(GLuint, GLenum, GLsizei, GLuint, GLuint);
    void (KHRONOS_APIENTRY * tunisVariantPointerEXT)(GLuint, GLenum, GLuint, const void *);
    void (KHRONOS_APIENTRY * tunisVariantbvEXT)(GLuint, const GLbyte *);
    void (KHRONOS_APIENTRY * tunisVariantdvEXT)(GLuint, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisVariantfvEXT)(GLuint, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisVariantivEXT)(GLuint, const GLint *);
    void (KHRONOS_APIENTRY * tunisVariantsvEXT)(GLuint, const GLshort *);
    void (KHRONOS_APIENTRY * tunisVariantubvEXT)(GLuint, const GLubyte *);
    void (KHRONOS_APIENTRY * tunisVariantuivEXT)(GLuint, const GLuint *);
    void (KHRONOS_APIENTRY * tunisVariantusvEXT)(GLuint, const GLushort *);
    void (KHRONOS_APIENTRY * tunisVertex2bOES)(GLbyte, GLbyte);
    void (KHRONOS_APIENTRY * tunisVertex2bvOES)(const GLbyte *);
    void (KHRONOS_APIENTRY * tunisVertex2d)(GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * tunisVertex2dv)(const GLdouble *);
    void (KHRONOS_APIENTRY * tunisVertex2f)(GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisVertex2fv)(const GLfloat *);
    void (KHRONOS_APIENTRY * tunisVertex2hNV)(GLhalfNV, GLhalfNV);
    void (KHRONOS_APIENTRY * tunisVertex2hvNV)(const GLhalfNV *);
    void (KHRONOS_APIENTRY * tunisVertex2i)(GLint, GLint);
    void (KHRONOS_APIENTRY * tunisVertex2iv)(const GLint *);
    void (KHRONOS_APIENTRY * tunisVertex2s)(GLshort, GLshort);
    void (KHRONOS_APIENTRY * tunisVertex2sv)(const GLshort *);
    void (KHRONOS_APIENTRY * tunisVertex2xOES)(GLfixed);
    void (KHRONOS_APIENTRY * tunisVertex2xvOES)(const GLfixed *);
    void (KHRONOS_APIENTRY * tunisVertex3bOES)(GLbyte, GLbyte, GLbyte);
    void (KHRONOS_APIENTRY * tunisVertex3bvOES)(const GLbyte *);
    void (KHRONOS_APIENTRY * tunisVertex3d)(GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * tunisVertex3dv)(const GLdouble *);
    void (KHRONOS_APIENTRY * tunisVertex3f)(GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisVertex3fv)(const GLfloat *);
    void (KHRONOS_APIENTRY * tunisVertex3hNV)(GLhalfNV, GLhalfNV, GLhalfNV);
    void (KHRONOS_APIENTRY * tunisVertex3hvNV)(const GLhalfNV *);
    void (KHRONOS_APIENTRY * tunisVertex3i)(GLint, GLint, GLint);
    void (KHRONOS_APIENTRY * tunisVertex3iv)(const GLint *);
    void (KHRONOS_APIENTRY * tunisVertex3s)(GLshort, GLshort, GLshort);
    void (KHRONOS_APIENTRY * tunisVertex3sv)(const GLshort *);
    void (KHRONOS_APIENTRY * tunisVertex3xOES)(GLfixed, GLfixed);
    void (KHRONOS_APIENTRY * tunisVertex3xvOES)(const GLfixed *);
    void (KHRONOS_APIENTRY * tunisVertex4bOES)(GLbyte, GLbyte, GLbyte, GLbyte);
    void (KHRONOS_APIENTRY * tunisVertex4bvOES)(const GLbyte *);
    void (KHRONOS_APIENTRY * tunisVertex4d)(GLdouble, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * tunisVertex4dv)(const GLdouble *);
    void (KHRONOS_APIENTRY * tunisVertex4f)(GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisVertex4fv)(const GLfloat *);
    void (KHRONOS_APIENTRY * tunisVertex4hNV)(GLhalfNV, GLhalfNV, GLhalfNV, GLhalfNV);
    void (KHRONOS_APIENTRY * tunisVertex4hvNV)(const GLhalfNV *);
    void (KHRONOS_APIENTRY * tunisVertex4i)(GLint, GLint, GLint, GLint);
    void (KHRONOS_APIENTRY * tunisVertex4iv)(const GLint *);
    void (KHRONOS_APIENTRY * tunisVertex4s)(GLshort, GLshort, GLshort, GLshort);
    void (KHRONOS_APIENTRY * tunisVertex4sv)(const GLshort *);
    void (KHRONOS_APIENTRY * tunisVertex4xOES)(GLfixed, GLfixed, GLfixed);
    void (KHRONOS_APIENTRY * tunisVertex4xvOES)(const GLfixed *);
    void (KHRONOS_APIENTRY * tunisVertexArrayAttribBinding)(GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY * tunisVertexArrayAttribFormat)(GLuint, GLuint, GLint, GLenum, GLboolean, GLuint);
    void (KHRONOS_APIENTRY * tunisVertexArrayAttribIFormat)(GLuint, GLuint, GLint, GLenum, GLuint);
    void (KHRONOS_APIENTRY * tunisVertexArrayAttribLFormat)(GLuint, GLuint, GLint, GLenum, GLuint);
    void (KHRONOS_APIENTRY * tunisVertexArrayBindVertexBufferEXT)(GLuint, GLuint, GLuint, GLintptr, GLsizei);
    void (KHRONOS_APIENTRY * tunisVertexArrayBindingDivisor)(GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY * tunisVertexArrayColorOffsetEXT)(GLuint, GLuint, GLint, GLenum, GLsizei, GLintptr);
    void (KHRONOS_APIENTRY * tunisVertexArrayEdgeFlagOffsetEXT)(GLuint, GLuint, GLsizei, GLintptr);
    void (KHRONOS_APIENTRY * tunisVertexArrayElementBuffer)(GLuint, GLuint);
    void (KHRONOS_APIENTRY * tunisVertexArrayFogCoordOffsetEXT)(GLuint, GLuint, GLenum, GLsizei, GLintptr);
    void (KHRONOS_APIENTRY * tunisVertexArrayIndexOffsetEXT)(GLuint, GLuint, GLenum, GLsizei, GLintptr);
    void (KHRONOS_APIENTRY * tunisVertexArrayMultiTexCoordOffsetEXT)(GLuint, GLuint, GLenum, GLint, GLenum, GLsizei, GLintptr);
    void (KHRONOS_APIENTRY * tunisVertexArrayNormalOffsetEXT)(GLuint, GLuint, GLenum, GLsizei, GLintptr);
    void (KHRONOS_APIENTRY * tunisVertexArrayParameteriAPPLE)(GLenum, GLint);
    void (KHRONOS_APIENTRY * tunisVertexArrayRangeAPPLE)(GLsizei, void *);
    void (KHRONOS_APIENTRY * tunisVertexArrayRangeNV)(GLsizei, const void *);
    void (KHRONOS_APIENTRY * tunisVertexArraySecondaryColorOffsetEXT)(GLuint, GLuint, GLint, GLenum, GLsizei, GLintptr);
    void (KHRONOS_APIENTRY * tunisVertexArrayTexCoordOffsetEXT)(GLuint, GLuint, GLint, GLenum, GLsizei, GLintptr);
    void (KHRONOS_APIENTRY * tunisVertexArrayVertexAttribBindingEXT)(GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY * tunisVertexArrayVertexAttribDivisorEXT)(GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY * tunisVertexArrayVertexAttribFormatEXT)(GLuint, GLuint, GLint, GLenum, GLboolean, GLuint);
    void (KHRONOS_APIENTRY * tunisVertexArrayVertexAttribIFormatEXT)(GLuint, GLuint, GLint, GLenum, GLuint);
    void (KHRONOS_APIENTRY * tunisVertexArrayVertexAttribIOffsetEXT)(GLuint, GLuint, GLuint, GLint, GLenum, GLsizei, GLintptr);
    void (KHRONOS_APIENTRY * tunisVertexArrayVertexAttribLFormatEXT)(GLuint, GLuint, GLint, GLenum, GLuint);
    void (KHRONOS_APIENTRY * tunisVertexArrayVertexAttribLOffsetEXT)(GLuint, GLuint, GLuint, GLint, GLenum, GLsizei, GLintptr);
    void (KHRONOS_APIENTRY * tunisVertexArrayVertexAttribOffsetEXT)(GLuint, GLuint, GLuint, GLint, GLenum, GLboolean, GLsizei, GLintptr);
    void (KHRONOS_APIENTRY * tunisVertexArrayVertexBindingDivisorEXT)(GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY * tunisVertexArrayVertexBuffer)(GLuint, GLuint, GLuint, GLintptr, GLsizei);
    void (KHRONOS_APIENTRY * tunisVertexArrayVertexBuffers)(GLuint, GLuint, GLsizei, const GLuint *, const GLintptr *, const GLsizei *);
    void (KHRONOS_APIENTRY * tunisVertexArrayVertexOffsetEXT)(GLuint, GLuint, GLint, GLenum, GLsizei, GLintptr);
    void (KHRONOS_APIENTRY * tunisVertexAttrib1d)(GLuint, GLdouble);
    void (KHRONOS_APIENTRY * tunisVertexAttrib1dARB)(GLuint, GLdouble);
    void (KHRONOS_APIENTRY * tunisVertexAttrib1dNV)(GLuint, GLdouble);
    void (KHRONOS_APIENTRY * tunisVertexAttrib1dv)(GLuint, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisVertexAttrib1dvARB)(GLuint, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisVertexAttrib1dvNV)(GLuint, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisVertexAttrib1f)(GLuint, GLfloat);
    void (KHRONOS_APIENTRY * tunisVertexAttrib1fARB)(GLuint, GLfloat);
    void (KHRONOS_APIENTRY * tunisVertexAttrib1fNV)(GLuint, GLfloat);
    void (KHRONOS_APIENTRY * tunisVertexAttrib1fv)(GLuint, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisVertexAttrib1fvARB)(GLuint, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisVertexAttrib1fvNV)(GLuint, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisVertexAttrib1hNV)(GLuint, GLhalfNV);
    void (KHRONOS_APIENTRY * tunisVertexAttrib1hvNV)(GLuint, const GLhalfNV *);
    void (KHRONOS_APIENTRY * tunisVertexAttrib1s)(GLuint, GLshort);
    void (KHRONOS_APIENTRY * tunisVertexAttrib1sARB)(GLuint, GLshort);
    void (KHRONOS_APIENTRY * tunisVertexAttrib1sNV)(GLuint, GLshort);
    void (KHRONOS_APIENTRY * tunisVertexAttrib1sv)(GLuint, const GLshort *);
    void (KHRONOS_APIENTRY * tunisVertexAttrib1svARB)(GLuint, const GLshort *);
    void (KHRONOS_APIENTRY * tunisVertexAttrib1svNV)(GLuint, const GLshort *);
    void (KHRONOS_APIENTRY * tunisVertexAttrib2d)(GLuint, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * tunisVertexAttrib2dARB)(GLuint, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * tunisVertexAttrib2dNV)(GLuint, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * tunisVertexAttrib2dv)(GLuint, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisVertexAttrib2dvARB)(GLuint, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisVertexAttrib2dvNV)(GLuint, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisVertexAttrib2f)(GLuint, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisVertexAttrib2fARB)(GLuint, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisVertexAttrib2fNV)(GLuint, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisVertexAttrib2fv)(GLuint, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisVertexAttrib2fvARB)(GLuint, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisVertexAttrib2fvNV)(GLuint, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisVertexAttrib2hNV)(GLuint, GLhalfNV, GLhalfNV);
    void (KHRONOS_APIENTRY * tunisVertexAttrib2hvNV)(GLuint, const GLhalfNV *);
    void (KHRONOS_APIENTRY * tunisVertexAttrib2s)(GLuint, GLshort, GLshort);
    void (KHRONOS_APIENTRY * tunisVertexAttrib2sARB)(GLuint, GLshort, GLshort);
    void (KHRONOS_APIENTRY * tunisVertexAttrib2sNV)(GLuint, GLshort, GLshort);
    void (KHRONOS_APIENTRY * tunisVertexAttrib2sv)(GLuint, const GLshort *);
    void (KHRONOS_APIENTRY * tunisVertexAttrib2svARB)(GLuint, const GLshort *);
    void (KHRONOS_APIENTRY * tunisVertexAttrib2svNV)(GLuint, const GLshort *);
    void (KHRONOS_APIENTRY * tunisVertexAttrib3d)(GLuint, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * tunisVertexAttrib3dARB)(GLuint, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * tunisVertexAttrib3dNV)(GLuint, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * tunisVertexAttrib3dv)(GLuint, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisVertexAttrib3dvARB)(GLuint, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisVertexAttrib3dvNV)(GLuint, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisVertexAttrib3f)(GLuint, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisVertexAttrib3fARB)(GLuint, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisVertexAttrib3fNV)(GLuint, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisVertexAttrib3fv)(GLuint, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisVertexAttrib3fvARB)(GLuint, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisVertexAttrib3fvNV)(GLuint, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisVertexAttrib3hNV)(GLuint, GLhalfNV, GLhalfNV, GLhalfNV);
    void (KHRONOS_APIENTRY * tunisVertexAttrib3hvNV)(GLuint, const GLhalfNV *);
    void (KHRONOS_APIENTRY * tunisVertexAttrib3s)(GLuint, GLshort, GLshort, GLshort);
    void (KHRONOS_APIENTRY * tunisVertexAttrib3sARB)(GLuint, GLshort, GLshort, GLshort);
    void (KHRONOS_APIENTRY * tunisVertexAttrib3sNV)(GLuint, GLshort, GLshort, GLshort);
    void (KHRONOS_APIENTRY * tunisVertexAttrib3sv)(GLuint, const GLshort *);
    void (KHRONOS_APIENTRY * tunisVertexAttrib3svARB)(GLuint, const GLshort *);
    void (KHRONOS_APIENTRY * tunisVertexAttrib3svNV)(GLuint, const GLshort *);
    void (KHRONOS_APIENTRY * tunisVertexAttrib4Nbv)(GLuint, const GLbyte *);
    void (KHRONOS_APIENTRY * tunisVertexAttrib4NbvARB)(GLuint, const GLbyte *);
    void (KHRONOS_APIENTRY * tunisVertexAttrib4Niv)(GLuint, const GLint *);
    void (KHRONOS_APIENTRY * tunisVertexAttrib4NivARB)(GLuint, const GLint *);
    void (KHRONOS_APIENTRY * tunisVertexAttrib4Nsv)(GLuint, const GLshort *);
    void (KHRONOS_APIENTRY * tunisVertexAttrib4NsvARB)(GLuint, const GLshort *);
    void (KHRONOS_APIENTRY * tunisVertexAttrib4Nub)(GLuint, GLubyte, GLubyte, GLubyte, GLubyte);
    void (KHRONOS_APIENTRY * tunisVertexAttrib4NubARB)(GLuint, GLubyte, GLubyte, GLubyte, GLubyte);
    void (KHRONOS_APIENTRY * tunisVertexAttrib4Nubv)(GLuint, const GLubyte *);
    void (KHRONOS_APIENTRY * tunisVertexAttrib4NubvARB)(GLuint, const GLubyte *);
    void (KHRONOS_APIENTRY * tunisVertexAttrib4Nuiv)(GLuint, const GLuint *);
    void (KHRONOS_APIENTRY * tunisVertexAttrib4NuivARB)(GLuint, const GLuint *);
    void (KHRONOS_APIENTRY * tunisVertexAttrib4Nusv)(GLuint, const GLushort *);
    void (KHRONOS_APIENTRY * tunisVertexAttrib4NusvARB)(GLuint, const GLushort *);
    void (KHRONOS_APIENTRY * tunisVertexAttrib4bv)(GLuint, const GLbyte *);
    void (KHRONOS_APIENTRY * tunisVertexAttrib4bvARB)(GLuint, const GLbyte *);
    void (KHRONOS_APIENTRY * tunisVertexAttrib4d)(GLuint, GLdouble, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * tunisVertexAttrib4dARB)(GLuint, GLdouble, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * tunisVertexAttrib4dNV)(GLuint, GLdouble, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * tunisVertexAttrib4dv)(GLuint, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisVertexAttrib4dvARB)(GLuint, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisVertexAttrib4dvNV)(GLuint, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisVertexAttrib4f)(GLuint, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisVertexAttrib4fARB)(GLuint, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisVertexAttrib4fNV)(GLuint, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisVertexAttrib4fv)(GLuint, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisVertexAttrib4fvARB)(GLuint, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisVertexAttrib4fvNV)(GLuint, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisVertexAttrib4hNV)(GLuint, GLhalfNV, GLhalfNV, GLhalfNV, GLhalfNV);
    void (KHRONOS_APIENTRY * tunisVertexAttrib4hvNV)(GLuint, const GLhalfNV *);
    void (KHRONOS_APIENTRY * tunisVertexAttrib4iv)(GLuint, const GLint *);
    void (KHRONOS_APIENTRY * tunisVertexAttrib4ivARB)(GLuint, const GLint *);
    void (KHRONOS_APIENTRY * tunisVertexAttrib4s)(GLuint, GLshort, GLshort, GLshort, GLshort);
    void (KHRONOS_APIENTRY * tunisVertexAttrib4sARB)(GLuint, GLshort, GLshort, GLshort, GLshort);
    void (KHRONOS_APIENTRY * tunisVertexAttrib4sNV)(GLuint, GLshort, GLshort, GLshort, GLshort);
    void (KHRONOS_APIENTRY * tunisVertexAttrib4sv)(GLuint, const GLshort *);
    void (KHRONOS_APIENTRY * tunisVertexAttrib4svARB)(GLuint, const GLshort *);
    void (KHRONOS_APIENTRY * tunisVertexAttrib4svNV)(GLuint, const GLshort *);
    void (KHRONOS_APIENTRY * tunisVertexAttrib4ubNV)(GLuint, GLubyte, GLubyte, GLubyte, GLubyte);
    void (KHRONOS_APIENTRY * tunisVertexAttrib4ubv)(GLuint, const GLubyte *);
    void (KHRONOS_APIENTRY * tunisVertexAttrib4ubvARB)(GLuint, const GLubyte *);
    void (KHRONOS_APIENTRY * tunisVertexAttrib4ubvNV)(GLuint, const GLubyte *);
    void (KHRONOS_APIENTRY * tunisVertexAttrib4uiv)(GLuint, const GLuint *);
    void (KHRONOS_APIENTRY * tunisVertexAttrib4uivARB)(GLuint, const GLuint *);
    void (KHRONOS_APIENTRY * tunisVertexAttrib4usv)(GLuint, const GLushort *);
    void (KHRONOS_APIENTRY * tunisVertexAttrib4usvARB)(GLuint, const GLushort *);
    void (KHRONOS_APIENTRY * tunisVertexAttribArrayObjectATI)(GLuint, GLint, GLenum, GLboolean, GLsizei, GLuint, GLuint);
    void (KHRONOS_APIENTRY * tunisVertexAttribBinding)(GLuint, GLuint);
    void (KHRONOS_APIENTRY * tunisVertexAttribDivisor)(GLuint, GLuint);
    void (KHRONOS_APIENTRY * tunisVertexAttribDivisorANGLE)(GLuint, GLuint);
    void (KHRONOS_APIENTRY * tunisVertexAttribDivisorARB)(GLuint, GLuint);
    void (KHRONOS_APIENTRY * tunisVertexAttribDivisorEXT)(GLuint, GLuint);
    void (KHRONOS_APIENTRY * tunisVertexAttribDivisorNV)(GLuint, GLuint);
    void (KHRONOS_APIENTRY * tunisVertexAttribFormat)(GLuint, GLint, GLenum, GLboolean, GLuint);
    void (KHRONOS_APIENTRY * tunisVertexAttribFormatNV)(GLuint, GLint, GLenum, GLboolean, GLsizei);
    void (KHRONOS_APIENTRY * tunisVertexAttribI1i)(GLuint, GLint);
    void (KHRONOS_APIENTRY * tunisVertexAttribI1iEXT)(GLuint, GLint);
    void (KHRONOS_APIENTRY * tunisVertexAttribI1iv)(GLuint, const GLint *);
    void (KHRONOS_APIENTRY * tunisVertexAttribI1ivEXT)(GLuint, const GLint *);
    void (KHRONOS_APIENTRY * tunisVertexAttribI1ui)(GLuint, GLuint);
    void (KHRONOS_APIENTRY * tunisVertexAttribI1uiEXT)(GLuint, GLuint);
    void (KHRONOS_APIENTRY * tunisVertexAttribI1uiv)(GLuint, const GLuint *);
    void (KHRONOS_APIENTRY * tunisVertexAttribI1uivEXT)(GLuint, const GLuint *);
    void (KHRONOS_APIENTRY * tunisVertexAttribI2i)(GLuint, GLint, GLint);
    void (KHRONOS_APIENTRY * tunisVertexAttribI2iEXT)(GLuint, GLint, GLint);
    void (KHRONOS_APIENTRY * tunisVertexAttribI2iv)(GLuint, const GLint *);
    void (KHRONOS_APIENTRY * tunisVertexAttribI2ivEXT)(GLuint, const GLint *);
    void (KHRONOS_APIENTRY * tunisVertexAttribI2ui)(GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY * tunisVertexAttribI2uiEXT)(GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY * tunisVertexAttribI2uiv)(GLuint, const GLuint *);
    void (KHRONOS_APIENTRY * tunisVertexAttribI2uivEXT)(GLuint, const GLuint *);
    void (KHRONOS_APIENTRY * tunisVertexAttribI3i)(GLuint, GLint, GLint, GLint);
    void (KHRONOS_APIENTRY * tunisVertexAttribI3iEXT)(GLuint, GLint, GLint, GLint);
    void (KHRONOS_APIENTRY * tunisVertexAttribI3iv)(GLuint, const GLint *);
    void (KHRONOS_APIENTRY * tunisVertexAttribI3ivEXT)(GLuint, const GLint *);
    void (KHRONOS_APIENTRY * tunisVertexAttribI3ui)(GLuint, GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY * tunisVertexAttribI3uiEXT)(GLuint, GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY * tunisVertexAttribI3uiv)(GLuint, const GLuint *);
    void (KHRONOS_APIENTRY * tunisVertexAttribI3uivEXT)(GLuint, const GLuint *);
    void (KHRONOS_APIENTRY * tunisVertexAttribI4bv)(GLuint, const GLbyte *);
    void (KHRONOS_APIENTRY * tunisVertexAttribI4bvEXT)(GLuint, const GLbyte *);
    void (KHRONOS_APIENTRY * tunisVertexAttribI4i)(GLuint, GLint, GLint, GLint, GLint);
    void (KHRONOS_APIENTRY * tunisVertexAttribI4iEXT)(GLuint, GLint, GLint, GLint, GLint);
    void (KHRONOS_APIENTRY * tunisVertexAttribI4iv)(GLuint, const GLint *);
    void (KHRONOS_APIENTRY * tunisVertexAttribI4ivEXT)(GLuint, const GLint *);
    void (KHRONOS_APIENTRY * tunisVertexAttribI4sv)(GLuint, const GLshort *);
    void (KHRONOS_APIENTRY * tunisVertexAttribI4svEXT)(GLuint, const GLshort *);
    void (KHRONOS_APIENTRY * tunisVertexAttribI4ubv)(GLuint, const GLubyte *);
    void (KHRONOS_APIENTRY * tunisVertexAttribI4ubvEXT)(GLuint, const GLubyte *);
    void (KHRONOS_APIENTRY * tunisVertexAttribI4ui)(GLuint, GLuint, GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY * tunisVertexAttribI4uiEXT)(GLuint, GLuint, GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY * tunisVertexAttribI4uiv)(GLuint, const GLuint *);
    void (KHRONOS_APIENTRY * tunisVertexAttribI4uivEXT)(GLuint, const GLuint *);
    void (KHRONOS_APIENTRY * tunisVertexAttribI4usv)(GLuint, const GLushort *);
    void (KHRONOS_APIENTRY * tunisVertexAttribI4usvEXT)(GLuint, const GLushort *);
    void (KHRONOS_APIENTRY * tunisVertexAttribIFormat)(GLuint, GLint, GLenum, GLuint);
    void (KHRONOS_APIENTRY * tunisVertexAttribIFormatNV)(GLuint, GLint, GLenum, GLsizei);
    void (KHRONOS_APIENTRY * tunisVertexAttribIPointer)(GLuint, GLint, GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY * tunisVertexAttribIPointerEXT)(GLuint, GLint, GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY * tunisVertexAttribL1d)(GLuint, GLdouble);
    void (KHRONOS_APIENTRY * tunisVertexAttribL1dEXT)(GLuint, GLdouble);
    void (KHRONOS_APIENTRY * tunisVertexAttribL1dv)(GLuint, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisVertexAttribL1dvEXT)(GLuint, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisVertexAttribL1i64NV)(GLuint, GLint64EXT);
    void (KHRONOS_APIENTRY * tunisVertexAttribL1i64vNV)(GLuint, const GLint64EXT *);
    void (KHRONOS_APIENTRY * tunisVertexAttribL1ui64ARB)(GLuint, GLuint64EXT);
    void (KHRONOS_APIENTRY * tunisVertexAttribL1ui64NV)(GLuint, GLuint64EXT);
    void (KHRONOS_APIENTRY * tunisVertexAttribL1ui64vARB)(GLuint, const GLuint64EXT *);
    void (KHRONOS_APIENTRY * tunisVertexAttribL1ui64vNV)(GLuint, const GLuint64EXT *);
    void (KHRONOS_APIENTRY * tunisVertexAttribL2d)(GLuint, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * tunisVertexAttribL2dEXT)(GLuint, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * tunisVertexAttribL2dv)(GLuint, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisVertexAttribL2dvEXT)(GLuint, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisVertexAttribL2i64NV)(GLuint, GLint64EXT, GLint64EXT);
    void (KHRONOS_APIENTRY * tunisVertexAttribL2i64vNV)(GLuint, const GLint64EXT *);
    void (KHRONOS_APIENTRY * tunisVertexAttribL2ui64NV)(GLuint, GLuint64EXT, GLuint64EXT);
    void (KHRONOS_APIENTRY * tunisVertexAttribL2ui64vNV)(GLuint, const GLuint64EXT *);
    void (KHRONOS_APIENTRY * tunisVertexAttribL3d)(GLuint, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * tunisVertexAttribL3dEXT)(GLuint, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * tunisVertexAttribL3dv)(GLuint, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisVertexAttribL3dvEXT)(GLuint, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisVertexAttribL3i64NV)(GLuint, GLint64EXT, GLint64EXT, GLint64EXT);
    void (KHRONOS_APIENTRY * tunisVertexAttribL3i64vNV)(GLuint, const GLint64EXT *);
    void (KHRONOS_APIENTRY * tunisVertexAttribL3ui64NV)(GLuint, GLuint64EXT, GLuint64EXT, GLuint64EXT);
    void (KHRONOS_APIENTRY * tunisVertexAttribL3ui64vNV)(GLuint, const GLuint64EXT *);
    void (KHRONOS_APIENTRY * tunisVertexAttribL4d)(GLuint, GLdouble, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * tunisVertexAttribL4dEXT)(GLuint, GLdouble, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * tunisVertexAttribL4dv)(GLuint, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisVertexAttribL4dvEXT)(GLuint, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisVertexAttribL4i64NV)(GLuint, GLint64EXT, GLint64EXT, GLint64EXT, GLint64EXT);
    void (KHRONOS_APIENTRY * tunisVertexAttribL4i64vNV)(GLuint, const GLint64EXT *);
    void (KHRONOS_APIENTRY * tunisVertexAttribL4ui64NV)(GLuint, GLuint64EXT, GLuint64EXT, GLuint64EXT, GLuint64EXT);
    void (KHRONOS_APIENTRY * tunisVertexAttribL4ui64vNV)(GLuint, const GLuint64EXT *);
    void (KHRONOS_APIENTRY * tunisVertexAttribLFormat)(GLuint, GLint, GLenum, GLuint);
    void (KHRONOS_APIENTRY * tunisVertexAttribLFormatNV)(GLuint, GLint, GLenum, GLsizei);
    void (KHRONOS_APIENTRY * tunisVertexAttribLPointer)(GLuint, GLint, GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY * tunisVertexAttribLPointerEXT)(GLuint, GLint, GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY * tunisVertexAttribP1ui)(GLuint, GLenum, GLboolean, GLuint);
    void (KHRONOS_APIENTRY * tunisVertexAttribP1uiv)(GLuint, GLenum, GLboolean, const GLuint *);
    void (KHRONOS_APIENTRY * tunisVertexAttribP2ui)(GLuint, GLenum, GLboolean, GLuint);
    void (KHRONOS_APIENTRY * tunisVertexAttribP2uiv)(GLuint, GLenum, GLboolean, const GLuint *);
    void (KHRONOS_APIENTRY * tunisVertexAttribP3ui)(GLuint, GLenum, GLboolean, GLuint);
    void (KHRONOS_APIENTRY * tunisVertexAttribP3uiv)(GLuint, GLenum, GLboolean, const GLuint *);
    void (KHRONOS_APIENTRY * tunisVertexAttribP4ui)(GLuint, GLenum, GLboolean, GLuint);
    void (KHRONOS_APIENTRY * tunisVertexAttribP4uiv)(GLuint, GLenum, GLboolean, const GLuint *);
    void (KHRONOS_APIENTRY * tunisVertexAttribParameteriAMD)(GLuint, GLenum, GLint);
    void (KHRONOS_APIENTRY * tunisVertexAttribPointer)(GLuint, GLint, GLenum, GLboolean, GLsizei, const void *);
    void (KHRONOS_APIENTRY * tunisVertexAttribPointerARB)(GLuint, GLint, GLenum, GLboolean, GLsizei, const void *);
    void (KHRONOS_APIENTRY * tunisVertexAttribPointerNV)(GLuint, GLint, GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY * tunisVertexAttribs1dvNV)(GLuint, GLsizei, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisVertexAttribs1fvNV)(GLuint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisVertexAttribs1hvNV)(GLuint, GLsizei, const GLhalfNV *);
    void (KHRONOS_APIENTRY * tunisVertexAttribs1svNV)(GLuint, GLsizei, const GLshort *);
    void (KHRONOS_APIENTRY * tunisVertexAttribs2dvNV)(GLuint, GLsizei, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisVertexAttribs2fvNV)(GLuint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisVertexAttribs2hvNV)(GLuint, GLsizei, const GLhalfNV *);
    void (KHRONOS_APIENTRY * tunisVertexAttribs2svNV)(GLuint, GLsizei, const GLshort *);
    void (KHRONOS_APIENTRY * tunisVertexAttribs3dvNV)(GLuint, GLsizei, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisVertexAttribs3fvNV)(GLuint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisVertexAttribs3hvNV)(GLuint, GLsizei, const GLhalfNV *);
    void (KHRONOS_APIENTRY * tunisVertexAttribs3svNV)(GLuint, GLsizei, const GLshort *);
    void (KHRONOS_APIENTRY * tunisVertexAttribs4dvNV)(GLuint, GLsizei, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisVertexAttribs4fvNV)(GLuint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisVertexAttribs4hvNV)(GLuint, GLsizei, const GLhalfNV *);
    void (KHRONOS_APIENTRY * tunisVertexAttribs4svNV)(GLuint, GLsizei, const GLshort *);
    void (KHRONOS_APIENTRY * tunisVertexAttribs4ubvNV)(GLuint, GLsizei, const GLubyte *);
    void (KHRONOS_APIENTRY * tunisVertexBindingDivisor)(GLuint, GLuint);
    void (KHRONOS_APIENTRY * tunisVertexBlendARB)(GLint);
    void (KHRONOS_APIENTRY * tunisVertexBlendEnvfATI)(GLenum, GLfloat);
    void (KHRONOS_APIENTRY * tunisVertexBlendEnviATI)(GLenum, GLint);
    void (KHRONOS_APIENTRY * tunisVertexFormatNV)(GLint, GLenum, GLsizei);
    void (KHRONOS_APIENTRY * tunisVertexP2ui)(GLenum, GLuint);
    void (KHRONOS_APIENTRY * tunisVertexP2uiv)(GLenum, const GLuint *);
    void (KHRONOS_APIENTRY * tunisVertexP3ui)(GLenum, GLuint);
    void (KHRONOS_APIENTRY * tunisVertexP3uiv)(GLenum, const GLuint *);
    void (KHRONOS_APIENTRY * tunisVertexP4ui)(GLenum, GLuint);
    void (KHRONOS_APIENTRY * tunisVertexP4uiv)(GLenum, const GLuint *);
    void (KHRONOS_APIENTRY * tunisVertexPointer)(GLint, GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY * tunisVertexPointerEXT)(GLint, GLenum, GLsizei, GLsizei, const void *);
    void (KHRONOS_APIENTRY * tunisVertexPointerListIBM)(GLint, GLenum, GLint, const void **, GLint);
    void (KHRONOS_APIENTRY * tunisVertexPointervINTEL)(GLint, GLenum, const void **);
    void (KHRONOS_APIENTRY * tunisVertexStream1dATI)(GLenum, GLdouble);
    void (KHRONOS_APIENTRY * tunisVertexStream1dvATI)(GLenum, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisVertexStream1fATI)(GLenum, GLfloat);
    void (KHRONOS_APIENTRY * tunisVertexStream1fvATI)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisVertexStream1iATI)(GLenum, GLint);
    void (KHRONOS_APIENTRY * tunisVertexStream1ivATI)(GLenum, const GLint *);
    void (KHRONOS_APIENTRY * tunisVertexStream1sATI)(GLenum, GLshort);
    void (KHRONOS_APIENTRY * tunisVertexStream1svATI)(GLenum, const GLshort *);
    void (KHRONOS_APIENTRY * tunisVertexStream2dATI)(GLenum, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * tunisVertexStream2dvATI)(GLenum, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisVertexStream2fATI)(GLenum, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisVertexStream2fvATI)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisVertexStream2iATI)(GLenum, GLint, GLint);
    void (KHRONOS_APIENTRY * tunisVertexStream2ivATI)(GLenum, const GLint *);
    void (KHRONOS_APIENTRY * tunisVertexStream2sATI)(GLenum, GLshort, GLshort);
    void (KHRONOS_APIENTRY * tunisVertexStream2svATI)(GLenum, const GLshort *);
    void (KHRONOS_APIENTRY * tunisVertexStream3dATI)(GLenum, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * tunisVertexStream3dvATI)(GLenum, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisVertexStream3fATI)(GLenum, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisVertexStream3fvATI)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisVertexStream3iATI)(GLenum, GLint, GLint, GLint);
    void (KHRONOS_APIENTRY * tunisVertexStream3ivATI)(GLenum, const GLint *);
    void (KHRONOS_APIENTRY * tunisVertexStream3sATI)(GLenum, GLshort, GLshort, GLshort);
    void (KHRONOS_APIENTRY * tunisVertexStream3svATI)(GLenum, const GLshort *);
    void (KHRONOS_APIENTRY * tunisVertexStream4dATI)(GLenum, GLdouble, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * tunisVertexStream4dvATI)(GLenum, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisVertexStream4fATI)(GLenum, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisVertexStream4fvATI)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisVertexStream4iATI)(GLenum, GLint, GLint, GLint, GLint);
    void (KHRONOS_APIENTRY * tunisVertexStream4ivATI)(GLenum, const GLint *);
    void (KHRONOS_APIENTRY * tunisVertexStream4sATI)(GLenum, GLshort, GLshort, GLshort, GLshort);
    void (KHRONOS_APIENTRY * tunisVertexStream4svATI)(GLenum, const GLshort *);
    void (KHRONOS_APIENTRY * tunisVertexWeightPointerEXT)(GLint, GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY * tunisVertexWeightfEXT)(GLfloat);
    void (KHRONOS_APIENTRY * tunisVertexWeightfvEXT)(const GLfloat *);
    void (KHRONOS_APIENTRY * tunisVertexWeighthNV)(GLhalfNV);
    void (KHRONOS_APIENTRY * tunisVertexWeighthvNV)(const GLhalfNV *);
    GLenum(KHRONOS_APIENTRY * tunisVideoCaptureNV)(GLuint, GLuint *, GLuint64EXT *);
    void (KHRONOS_APIENTRY * tunisVideoCaptureStreamParameterdvNV)(GLuint, GLuint, GLenum, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisVideoCaptureStreamParameterfvNV)(GLuint, GLuint, GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisVideoCaptureStreamParameterivNV)(GLuint, GLuint, GLenum, const GLint *);
    void (KHRONOS_APIENTRY * tunisViewport)(GLint, GLint, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * tunisViewportArrayv)(GLuint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisViewportArrayvNV)(GLuint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisViewportArrayvOES)(GLuint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisViewportIndexedf)(GLuint, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisViewportIndexedfNV)(GLuint, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisViewportIndexedfOES)(GLuint, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisViewportIndexedfv)(GLuint, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisViewportIndexedfvNV)(GLuint, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisViewportIndexedfvOES)(GLuint, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisViewportPositionWScaleNV)(GLuint, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisViewportSwizzleNV)(GLuint, GLenum, GLenum, GLenum, GLenum);
    void (KHRONOS_APIENTRY * tunisWaitSemaphoreEXT)(GLuint, GLuint, const GLuint *, GLuint, const GLuint *, const GLenum *);
    void (KHRONOS_APIENTRY * tunisWaitSync)(GLsync, GLbitfield, GLuint64);
    void (KHRONOS_APIENTRY * tunisWaitSyncAPPLE)(GLsync, GLbitfield, GLuint64);
    void (KHRONOS_APIENTRY * tunisWaitVkSemaphoreNV)(GLuint64);
    void (KHRONOS_APIENTRY * tunisWeightPathsNV)(GLuint, GLsizei, const GLuint *, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisWeightPointerARB)(GLint, GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY * tunisWeightPointerOES)(GLint, GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY * tunisWeightbvARB)(GLint, const GLbyte *);
    void (KHRONOS_APIENTRY * tunisWeightdvARB)(GLint, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisWeightfvARB)(GLint, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisWeightivARB)(GLint, const GLint *);
    void (KHRONOS_APIENTRY * tunisWeightsvARB)(GLint, const GLshort *);
    void (KHRONOS_APIENTRY * tunisWeightubvARB)(GLint, const GLubyte *);
    void (KHRONOS_APIENTRY * tunisWeightuivARB)(GLint, const GLuint *);
    void (KHRONOS_APIENTRY * tunisWeightusvARB)(GLint, const GLushort *);
    void (KHRONOS_APIENTRY * tunisWindowPos2d)(GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * tunisWindowPos2dARB)(GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * tunisWindowPos2dMESA)(GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * tunisWindowPos2dv)(const GLdouble *);
    void (KHRONOS_APIENTRY * tunisWindowPos2dvARB)(const GLdouble *);
    void (KHRONOS_APIENTRY * tunisWindowPos2dvMESA)(const GLdouble *);
    void (KHRONOS_APIENTRY * tunisWindowPos2f)(GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisWindowPos2fARB)(GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisWindowPos2fMESA)(GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisWindowPos2fv)(const GLfloat *);
    void (KHRONOS_APIENTRY * tunisWindowPos2fvARB)(const GLfloat *);
    void (KHRONOS_APIENTRY * tunisWindowPos2fvMESA)(const GLfloat *);
    void (KHRONOS_APIENTRY * tunisWindowPos2i)(GLint, GLint);
    void (KHRONOS_APIENTRY * tunisWindowPos2iARB)(GLint, GLint);
    void (KHRONOS_APIENTRY * tunisWindowPos2iMESA)(GLint, GLint);
    void (KHRONOS_APIENTRY * tunisWindowPos2iv)(const GLint *);
    void (KHRONOS_APIENTRY * tunisWindowPos2ivARB)(const GLint *);
    void (KHRONOS_APIENTRY * tunisWindowPos2ivMESA)(const GLint *);
    void (KHRONOS_APIENTRY * tunisWindowPos2s)(GLshort, GLshort);
    void (KHRONOS_APIENTRY * tunisWindowPos2sARB)(GLshort, GLshort);
    void (KHRONOS_APIENTRY * tunisWindowPos2sMESA)(GLshort, GLshort);
    void (KHRONOS_APIENTRY * tunisWindowPos2sv)(const GLshort *);
    void (KHRONOS_APIENTRY * tunisWindowPos2svARB)(const GLshort *);
    void (KHRONOS_APIENTRY * tunisWindowPos2svMESA)(const GLshort *);
    void (KHRONOS_APIENTRY * tunisWindowPos3d)(GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * tunisWindowPos3dARB)(GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * tunisWindowPos3dMESA)(GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * tunisWindowPos3dv)(const GLdouble *);
    void (KHRONOS_APIENTRY * tunisWindowPos3dvARB)(const GLdouble *);
    void (KHRONOS_APIENTRY * tunisWindowPos3dvMESA)(const GLdouble *);
    void (KHRONOS_APIENTRY * tunisWindowPos3f)(GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisWindowPos3fARB)(GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisWindowPos3fMESA)(GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisWindowPos3fv)(const GLfloat *);
    void (KHRONOS_APIENTRY * tunisWindowPos3fvARB)(const GLfloat *);
    void (KHRONOS_APIENTRY * tunisWindowPos3fvMESA)(const GLfloat *);
    void (KHRONOS_APIENTRY * tunisWindowPos3i)(GLint, GLint, GLint);
    void (KHRONOS_APIENTRY * tunisWindowPos3iARB)(GLint, GLint, GLint);
    void (KHRONOS_APIENTRY * tunisWindowPos3iMESA)(GLint, GLint, GLint);
    void (KHRONOS_APIENTRY * tunisWindowPos3iv)(const GLint *);
    void (KHRONOS_APIENTRY * tunisWindowPos3ivARB)(const GLint *);
    void (KHRONOS_APIENTRY * tunisWindowPos3ivMESA)(const GLint *);
    void (KHRONOS_APIENTRY * tunisWindowPos3s)(GLshort, GLshort, GLshort);
    void (KHRONOS_APIENTRY * tunisWindowPos3sARB)(GLshort, GLshort, GLshort);
    void (KHRONOS_APIENTRY * tunisWindowPos3sMESA)(GLshort, GLshort, GLshort);
    void (KHRONOS_APIENTRY * tunisWindowPos3sv)(const GLshort *);
    void (KHRONOS_APIENTRY * tunisWindowPos3svARB)(const GLshort *);
    void (KHRONOS_APIENTRY * tunisWindowPos3svMESA)(const GLshort *);
    void (KHRONOS_APIENTRY * tunisWindowPos4dMESA)(GLdouble, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * tunisWindowPos4dvMESA)(const GLdouble *);
    void (KHRONOS_APIENTRY * tunisWindowPos4fMESA)(GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisWindowPos4fvMESA)(const GLfloat *);
    void (KHRONOS_APIENTRY * tunisWindowPos4iMESA)(GLint, GLint, GLint, GLint);
    void (KHRONOS_APIENTRY * tunisWindowPos4ivMESA)(const GLint *);
    void (KHRONOS_APIENTRY * tunisWindowPos4sMESA)(GLshort, GLshort, GLshort, GLshort);
    void (KHRONOS_APIENTRY * tunisWindowPos4svMESA)(const GLshort *);
    void (KHRONOS_APIENTRY * tunisWindowRectanglesEXT)(GLenum, GLsizei, const GLint *);
    void (KHRONOS_APIENTRY * tunisWriteMaskEXT)(GLuint, GLuint, GLenum, GLenum, GLenum, GLenum);

} TunisGLConfig;

extern TunisGLConfig tunisGL; /* global instance. */

TUNIS_FORCE_INLINE khronos_int8_t tunisGLSupport(khronos_usize_t id) {
    return tunisGL.support[id];
}

TUNIS_FORCE_INLINE void  glAccum(GLenum op, GLfloat value) { tunisGL.tunisAccum(op, value); }
TUNIS_FORCE_INLINE void  glAccumxOES(GLenum op, GLfixed value) { tunisGL.tunisAccumxOES(op, value); }
TUNIS_FORCE_INLINE GLboolean glAcquireKeyedMutexWin32EXT(GLuint memory, GLuint64 key, GLuint timeout) { return tunisGL.tunisAcquireKeyedMutexWin32EXT(memory, key, timeout); }
TUNIS_FORCE_INLINE void  glActiveProgramEXT(GLuint program) { tunisGL.tunisActiveProgramEXT(program); }
TUNIS_FORCE_INLINE void  glActiveShaderProgram(GLuint pipeline, GLuint program) { tunisGL.tunisActiveShaderProgram(pipeline, program); }
TUNIS_FORCE_INLINE void  glActiveShaderProgramEXT(GLuint pipeline, GLuint program) { tunisGL.tunisActiveShaderProgramEXT(pipeline, program); }
TUNIS_FORCE_INLINE void  glActiveStencilFaceEXT(GLenum face) { tunisGL.tunisActiveStencilFaceEXT(face); }
TUNIS_FORCE_INLINE void  glActiveTexture(GLenum texture) { tunisGL.tunisActiveTexture(texture); }
TUNIS_FORCE_INLINE void  glActiveTextureARB(GLenum texture) { tunisGL.tunisActiveTextureARB(texture); }
TUNIS_FORCE_INLINE void  glActiveVaryingNV(GLuint program, const GLchar * name) { tunisGL.tunisActiveVaryingNV(program, name); }
TUNIS_FORCE_INLINE void  glAlphaFragmentOp1ATI(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod) { tunisGL.tunisAlphaFragmentOp1ATI(op, dst, dstMod, arg1, arg1Rep, arg1Mod); }
TUNIS_FORCE_INLINE void  glAlphaFragmentOp2ATI(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod) { tunisGL.tunisAlphaFragmentOp2ATI(op, dst, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod); }
TUNIS_FORCE_INLINE void  glAlphaFragmentOp3ATI(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod) { tunisGL.tunisAlphaFragmentOp3ATI(op, dst, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod, arg3, arg3Rep, arg3Mod); }
TUNIS_FORCE_INLINE void  glAlphaFunc(GLenum func, GLfloat ref) { tunisGL.tunisAlphaFunc(func, ref); }
TUNIS_FORCE_INLINE void  glAlphaFuncQCOM(GLenum func, GLclampf ref) { tunisGL.tunisAlphaFuncQCOM(func, ref); }
TUNIS_FORCE_INLINE void  glAlphaFuncx(GLenum func, GLfixed ref) { tunisGL.tunisAlphaFuncx(func, ref); }
TUNIS_FORCE_INLINE void  glAlphaFuncxOES(GLenum func, GLfixed ref) { tunisGL.tunisAlphaFuncxOES(func, ref); }
TUNIS_FORCE_INLINE void  glAlphaToCoverageDitherControlNV(GLenum mode) { tunisGL.tunisAlphaToCoverageDitherControlNV(mode); }
TUNIS_FORCE_INLINE void  glApplyFramebufferAttachmentCMAAINTEL(void) { tunisGL.tunisApplyFramebufferAttachmentCMAAINTEL(); }
TUNIS_FORCE_INLINE void  glApplyTextureEXT(GLenum mode) { tunisGL.tunisApplyTextureEXT(mode); }
TUNIS_FORCE_INLINE GLboolean glAreProgramsResidentNV(GLsizei n, const GLuint * programs, GLboolean * residences) { return tunisGL.tunisAreProgramsResidentNV(n, programs, residences); }
TUNIS_FORCE_INLINE GLboolean glAreTexturesResident(GLsizei n, const GLuint * textures, GLboolean * residences) { return tunisGL.tunisAreTexturesResident(n, textures, residences); }
TUNIS_FORCE_INLINE GLboolean glAreTexturesResidentEXT(GLsizei n, const GLuint * textures, GLboolean * residences) { return tunisGL.tunisAreTexturesResidentEXT(n, textures, residences); }
TUNIS_FORCE_INLINE void  glArrayElement(GLint i) { tunisGL.tunisArrayElement(i); }
TUNIS_FORCE_INLINE void  glArrayElementEXT(GLint i) { tunisGL.tunisArrayElementEXT(i); }
TUNIS_FORCE_INLINE void  glArrayObjectATI(GLenum array, GLint size, GLenum type, GLsizei stride, GLuint buffer, GLuint offset) { tunisGL.tunisArrayObjectATI(array, size, type, stride, buffer, offset); }
TUNIS_FORCE_INLINE void  glAsyncMarkerSGIX(GLuint marker) { tunisGL.tunisAsyncMarkerSGIX(marker); }
TUNIS_FORCE_INLINE void  glAttachObjectARB(GLhandleARB containerObj, GLhandleARB obj) { tunisGL.tunisAttachObjectARB(containerObj, obj); }
TUNIS_FORCE_INLINE void  glAttachShader(GLuint program, GLuint shader) { tunisGL.tunisAttachShader(program, shader); }
TUNIS_FORCE_INLINE void  glBegin(GLenum mode) { tunisGL.tunisBegin(mode); }
TUNIS_FORCE_INLINE void  glBeginConditionalRender(GLuint id, GLenum mode) { tunisGL.tunisBeginConditionalRender(id, mode); }
TUNIS_FORCE_INLINE void  glBeginConditionalRenderNV(GLuint id, GLenum mode) { tunisGL.tunisBeginConditionalRenderNV(id, mode); }
TUNIS_FORCE_INLINE void  glBeginConditionalRenderNVX(GLuint id) { tunisGL.tunisBeginConditionalRenderNVX(id); }
TUNIS_FORCE_INLINE void  glBeginFragmentShaderATI(void) { tunisGL.tunisBeginFragmentShaderATI(); }
TUNIS_FORCE_INLINE void  glBeginOcclusionQueryNV(GLuint id) { tunisGL.tunisBeginOcclusionQueryNV(id); }
TUNIS_FORCE_INLINE void  glBeginPerfMonitorAMD(GLuint monitor) { tunisGL.tunisBeginPerfMonitorAMD(monitor); }
TUNIS_FORCE_INLINE void  glBeginPerfQueryINTEL(GLuint queryHandle) { tunisGL.tunisBeginPerfQueryINTEL(queryHandle); }
TUNIS_FORCE_INLINE void  glBeginQuery(GLenum target, GLuint id) { tunisGL.tunisBeginQuery(target, id); }
TUNIS_FORCE_INLINE void  glBeginQueryARB(GLenum target, GLuint id) { tunisGL.tunisBeginQueryARB(target, id); }
TUNIS_FORCE_INLINE void  glBeginQueryEXT(GLenum target, GLuint id) { tunisGL.tunisBeginQueryEXT(target, id); }
TUNIS_FORCE_INLINE void  glBeginQueryIndexed(GLenum target, GLuint index, GLuint id) { tunisGL.tunisBeginQueryIndexed(target, index, id); }
TUNIS_FORCE_INLINE void  glBeginTransformFeedback(GLenum primitiveMode) { tunisGL.tunisBeginTransformFeedback(primitiveMode); }
TUNIS_FORCE_INLINE void  glBeginTransformFeedbackEXT(GLenum primitiveMode) { tunisGL.tunisBeginTransformFeedbackEXT(primitiveMode); }
TUNIS_FORCE_INLINE void  glBeginTransformFeedbackNV(GLenum primitiveMode) { tunisGL.tunisBeginTransformFeedbackNV(primitiveMode); }
TUNIS_FORCE_INLINE void  glBeginVertexShaderEXT(void) { tunisGL.tunisBeginVertexShaderEXT(); }
TUNIS_FORCE_INLINE void  glBeginVideoCaptureNV(GLuint video_capture_slot) { tunisGL.tunisBeginVideoCaptureNV(video_capture_slot); }
TUNIS_FORCE_INLINE void  glBindAttribLocation(GLuint program, GLuint index, const GLchar * name) { tunisGL.tunisBindAttribLocation(program, index, name); }
TUNIS_FORCE_INLINE void  glBindAttribLocationARB(GLhandleARB programObj, GLuint index, const GLcharARB * name) { tunisGL.tunisBindAttribLocationARB(programObj, index, name); }
TUNIS_FORCE_INLINE void  glBindBuffer(GLenum target, GLuint buffer) { tunisGL.tunisBindBuffer(target, buffer); }
TUNIS_FORCE_INLINE void  glBindBufferARB(GLenum target, GLuint buffer) { tunisGL.tunisBindBufferARB(target, buffer); }
TUNIS_FORCE_INLINE void  glBindBufferBase(GLenum target, GLuint index, GLuint buffer) { tunisGL.tunisBindBufferBase(target, index, buffer); }
TUNIS_FORCE_INLINE void  glBindBufferBaseEXT(GLenum target, GLuint index, GLuint buffer) { tunisGL.tunisBindBufferBaseEXT(target, index, buffer); }
TUNIS_FORCE_INLINE void  glBindBufferBaseNV(GLenum target, GLuint index, GLuint buffer) { tunisGL.tunisBindBufferBaseNV(target, index, buffer); }
TUNIS_FORCE_INLINE void  glBindBufferOffsetEXT(GLenum target, GLuint index, GLuint buffer, GLintptr offset) { tunisGL.tunisBindBufferOffsetEXT(target, index, buffer, offset); }
TUNIS_FORCE_INLINE void  glBindBufferOffsetNV(GLenum target, GLuint index, GLuint buffer, GLintptr offset) { tunisGL.tunisBindBufferOffsetNV(target, index, buffer, offset); }
TUNIS_FORCE_INLINE void  glBindBufferRange(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size) { tunisGL.tunisBindBufferRange(target, index, buffer, offset, size); }
TUNIS_FORCE_INLINE void  glBindBufferRangeEXT(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size) { tunisGL.tunisBindBufferRangeEXT(target, index, buffer, offset, size); }
TUNIS_FORCE_INLINE void  glBindBufferRangeNV(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size) { tunisGL.tunisBindBufferRangeNV(target, index, buffer, offset, size); }
TUNIS_FORCE_INLINE void  glBindBuffersBase(GLenum target, GLuint first, GLsizei count, const GLuint * buffers) { tunisGL.tunisBindBuffersBase(target, first, count, buffers); }
TUNIS_FORCE_INLINE void  glBindBuffersRange(GLenum target, GLuint first, GLsizei count, const GLuint * buffers, const GLintptr * offsets, const GLsizeiptr * sizes) { tunisGL.tunisBindBuffersRange(target, first, count, buffers, offsets, sizes); }
TUNIS_FORCE_INLINE void  glBindFragDataLocation(GLuint program, GLuint color, const GLchar * name) { tunisGL.tunisBindFragDataLocation(program, color, name); }
TUNIS_FORCE_INLINE void  glBindFragDataLocationEXT(GLuint program, GLuint color, const GLchar * name) { tunisGL.tunisBindFragDataLocationEXT(program, color, name); }
TUNIS_FORCE_INLINE void  glBindFragDataLocationIndexed(GLuint program, GLuint colorNumber, GLuint index, const GLchar * name) { tunisGL.tunisBindFragDataLocationIndexed(program, colorNumber, index, name); }
TUNIS_FORCE_INLINE void  glBindFragDataLocationIndexedEXT(GLuint program, GLuint colorNumber, GLuint index, const GLchar * name) { tunisGL.tunisBindFragDataLocationIndexedEXT(program, colorNumber, index, name); }
TUNIS_FORCE_INLINE void  glBindFragmentShaderATI(GLuint id) { tunisGL.tunisBindFragmentShaderATI(id); }
TUNIS_FORCE_INLINE void  glBindFramebuffer(GLenum target, GLuint framebuffer) { tunisGL.tunisBindFramebuffer(target, framebuffer); }
TUNIS_FORCE_INLINE void  glBindFramebufferEXT(GLenum target, GLuint framebuffer) { tunisGL.tunisBindFramebufferEXT(target, framebuffer); }
TUNIS_FORCE_INLINE void  glBindFramebufferOES(GLenum target, GLuint framebuffer) { tunisGL.tunisBindFramebufferOES(target, framebuffer); }
TUNIS_FORCE_INLINE void  glBindImageTexture(GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format) { tunisGL.tunisBindImageTexture(unit, texture, level, layered, layer, access, format); }
TUNIS_FORCE_INLINE void  glBindImageTextureEXT(GLuint index, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLint format) { tunisGL.tunisBindImageTextureEXT(index, texture, level, layered, layer, access, format); }
TUNIS_FORCE_INLINE void  glBindImageTextures(GLuint first, GLsizei count, const GLuint * textures) { tunisGL.tunisBindImageTextures(first, count, textures); }
TUNIS_FORCE_INLINE GLuint glBindLightParameterEXT(GLenum light, GLenum value) { return tunisGL.tunisBindLightParameterEXT(light, value); }
TUNIS_FORCE_INLINE GLuint glBindMaterialParameterEXT(GLenum face, GLenum value) { return tunisGL.tunisBindMaterialParameterEXT(face, value); }
TUNIS_FORCE_INLINE void  glBindMultiTextureEXT(GLenum texunit, GLenum target, GLuint texture) { tunisGL.tunisBindMultiTextureEXT(texunit, target, texture); }
TUNIS_FORCE_INLINE GLuint glBindParameterEXT(GLenum value) { return tunisGL.tunisBindParameterEXT(value); }
TUNIS_FORCE_INLINE void  glBindProgramARB(GLenum target, GLuint program) { tunisGL.tunisBindProgramARB(target, program); }
TUNIS_FORCE_INLINE void  glBindProgramNV(GLenum target, GLuint id) { tunisGL.tunisBindProgramNV(target, id); }
TUNIS_FORCE_INLINE void  glBindProgramPipeline(GLuint pipeline) { tunisGL.tunisBindProgramPipeline(pipeline); }
TUNIS_FORCE_INLINE void  glBindProgramPipelineEXT(GLuint pipeline) { tunisGL.tunisBindProgramPipelineEXT(pipeline); }
TUNIS_FORCE_INLINE void  glBindRenderbuffer(GLenum target, GLuint renderbuffer) { tunisGL.tunisBindRenderbuffer(target, renderbuffer); }
TUNIS_FORCE_INLINE void  glBindRenderbufferEXT(GLenum target, GLuint renderbuffer) { tunisGL.tunisBindRenderbufferEXT(target, renderbuffer); }
TUNIS_FORCE_INLINE void  glBindRenderbufferOES(GLenum target, GLuint renderbuffer) { tunisGL.tunisBindRenderbufferOES(target, renderbuffer); }
TUNIS_FORCE_INLINE void  glBindSampler(GLuint unit, GLuint sampler) { tunisGL.tunisBindSampler(unit, sampler); }
TUNIS_FORCE_INLINE void  glBindSamplers(GLuint first, GLsizei count, const GLuint * samplers) { tunisGL.tunisBindSamplers(first, count, samplers); }
TUNIS_FORCE_INLINE GLuint glBindTexGenParameterEXT(GLenum unit, GLenum coord, GLenum value) { return tunisGL.tunisBindTexGenParameterEXT(unit, coord, value); }
TUNIS_FORCE_INLINE void  glBindTexture(GLenum target, GLuint texture) { tunisGL.tunisBindTexture(target, texture); }
TUNIS_FORCE_INLINE void  glBindTextureEXT(GLenum target, GLuint texture) { tunisGL.tunisBindTextureEXT(target, texture); }
TUNIS_FORCE_INLINE void  glBindTextureUnit(GLuint unit, GLuint texture) { tunisGL.tunisBindTextureUnit(unit, texture); }
TUNIS_FORCE_INLINE GLuint glBindTextureUnitParameterEXT(GLenum unit, GLenum value) { return tunisGL.tunisBindTextureUnitParameterEXT(unit, value); }
TUNIS_FORCE_INLINE void  glBindTextures(GLuint first, GLsizei count, const GLuint * textures) { tunisGL.tunisBindTextures(first, count, textures); }
TUNIS_FORCE_INLINE void  glBindTransformFeedback(GLenum target, GLuint id) { tunisGL.tunisBindTransformFeedback(target, id); }
TUNIS_FORCE_INLINE void  glBindTransformFeedbackNV(GLenum target, GLuint id) { tunisGL.tunisBindTransformFeedbackNV(target, id); }
TUNIS_FORCE_INLINE void  glBindVertexArray(GLuint array) { tunisGL.tunisBindVertexArray(array); }
TUNIS_FORCE_INLINE void  glBindVertexArrayAPPLE(GLuint array) { tunisGL.tunisBindVertexArrayAPPLE(array); }
TUNIS_FORCE_INLINE void  glBindVertexArrayOES(GLuint array) { tunisGL.tunisBindVertexArrayOES(array); }
TUNIS_FORCE_INLINE void  glBindVertexBuffer(GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride) { tunisGL.tunisBindVertexBuffer(bindingindex, buffer, offset, stride); }
TUNIS_FORCE_INLINE void  glBindVertexBuffers(GLuint first, GLsizei count, const GLuint * buffers, const GLintptr * offsets, const GLsizei * strides) { tunisGL.tunisBindVertexBuffers(first, count, buffers, offsets, strides); }
TUNIS_FORCE_INLINE void  glBindVertexShaderEXT(GLuint id) { tunisGL.tunisBindVertexShaderEXT(id); }
TUNIS_FORCE_INLINE void  glBindVideoCaptureStreamBufferNV(GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLintptrARB offset) { tunisGL.tunisBindVideoCaptureStreamBufferNV(video_capture_slot, stream, frame_region, offset); }
TUNIS_FORCE_INLINE void  glBindVideoCaptureStreamTextureNV(GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLenum target, GLuint texture) { tunisGL.tunisBindVideoCaptureStreamTextureNV(video_capture_slot, stream, frame_region, target, texture); }
TUNIS_FORCE_INLINE void  glBinormal3bEXT(GLbyte bx, GLbyte by, GLbyte bz) { tunisGL.tunisBinormal3bEXT(bx, by, bz); }
TUNIS_FORCE_INLINE void  glBinormal3bvEXT(const GLbyte * v) { tunisGL.tunisBinormal3bvEXT(v); }
TUNIS_FORCE_INLINE void  glBinormal3dEXT(GLdouble bx, GLdouble by, GLdouble bz) { tunisGL.tunisBinormal3dEXT(bx, by, bz); }
TUNIS_FORCE_INLINE void  glBinormal3dvEXT(const GLdouble * v) { tunisGL.tunisBinormal3dvEXT(v); }
TUNIS_FORCE_INLINE void  glBinormal3fEXT(GLfloat bx, GLfloat by, GLfloat bz) { tunisGL.tunisBinormal3fEXT(bx, by, bz); }
TUNIS_FORCE_INLINE void  glBinormal3fvEXT(const GLfloat * v) { tunisGL.tunisBinormal3fvEXT(v); }
TUNIS_FORCE_INLINE void  glBinormal3iEXT(GLint bx, GLint by, GLint bz) { tunisGL.tunisBinormal3iEXT(bx, by, bz); }
TUNIS_FORCE_INLINE void  glBinormal3ivEXT(const GLint * v) { tunisGL.tunisBinormal3ivEXT(v); }
TUNIS_FORCE_INLINE void  glBinormal3sEXT(GLshort bx, GLshort by, GLshort bz) { tunisGL.tunisBinormal3sEXT(bx, by, bz); }
TUNIS_FORCE_INLINE void  glBinormal3svEXT(const GLshort * v) { tunisGL.tunisBinormal3svEXT(v); }
TUNIS_FORCE_INLINE void  glBinormalPointerEXT(GLenum type, GLsizei stride, const void * pointer) { tunisGL.tunisBinormalPointerEXT(type, stride, pointer); }
TUNIS_FORCE_INLINE void  glBitmap(GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const GLubyte * bitmap) { tunisGL.tunisBitmap(width, height, xorig, yorig, xmove, ymove, bitmap); }
TUNIS_FORCE_INLINE void  glBitmapxOES(GLsizei width, GLsizei height, GLfixed xorig, GLfixed yorig, GLfixed xmove, GLfixed ymove, const GLubyte * bitmap) { tunisGL.tunisBitmapxOES(width, height, xorig, yorig, xmove, ymove, bitmap); }
TUNIS_FORCE_INLINE void  glBlendBarrier(void) { tunisGL.tunisBlendBarrier(); }
TUNIS_FORCE_INLINE void  glBlendBarrierKHR(void) { tunisGL.tunisBlendBarrierKHR(); }
TUNIS_FORCE_INLINE void  glBlendBarrierNV(void) { tunisGL.tunisBlendBarrierNV(); }
TUNIS_FORCE_INLINE void  glBlendColor(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha) { tunisGL.tunisBlendColor(red, green, blue, alpha); }
TUNIS_FORCE_INLINE void  glBlendColorEXT(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha) { tunisGL.tunisBlendColorEXT(red, green, blue, alpha); }
TUNIS_FORCE_INLINE void  glBlendColorxOES(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha) { tunisGL.tunisBlendColorxOES(red, green, blue, alpha); }
TUNIS_FORCE_INLINE void  glBlendEquation(GLenum mode) { tunisGL.tunisBlendEquation(mode); }
TUNIS_FORCE_INLINE void  glBlendEquationEXT(GLenum mode) { tunisGL.tunisBlendEquationEXT(mode); }
TUNIS_FORCE_INLINE void  glBlendEquationIndexedAMD(GLuint buf, GLenum mode) { tunisGL.tunisBlendEquationIndexedAMD(buf, mode); }
TUNIS_FORCE_INLINE void  glBlendEquationOES(GLenum mode) { tunisGL.tunisBlendEquationOES(mode); }
TUNIS_FORCE_INLINE void  glBlendEquationSeparate(GLenum modeRGB, GLenum modeAlpha) { tunisGL.tunisBlendEquationSeparate(modeRGB, modeAlpha); }
TUNIS_FORCE_INLINE void  glBlendEquationSeparateEXT(GLenum modeRGB, GLenum modeAlpha) { tunisGL.tunisBlendEquationSeparateEXT(modeRGB, modeAlpha); }
TUNIS_FORCE_INLINE void  glBlendEquationSeparateIndexedAMD(GLuint buf, GLenum modeRGB, GLenum modeAlpha) { tunisGL.tunisBlendEquationSeparateIndexedAMD(buf, modeRGB, modeAlpha); }
TUNIS_FORCE_INLINE void  glBlendEquationSeparateOES(GLenum modeRGB, GLenum modeAlpha) { tunisGL.tunisBlendEquationSeparateOES(modeRGB, modeAlpha); }
TUNIS_FORCE_INLINE void  glBlendEquationSeparatei(GLuint buf, GLenum modeRGB, GLenum modeAlpha) { tunisGL.tunisBlendEquationSeparatei(buf, modeRGB, modeAlpha); }
TUNIS_FORCE_INLINE void  glBlendEquationSeparateiARB(GLuint buf, GLenum modeRGB, GLenum modeAlpha) { tunisGL.tunisBlendEquationSeparateiARB(buf, modeRGB, modeAlpha); }
TUNIS_FORCE_INLINE void  glBlendEquationSeparateiEXT(GLuint buf, GLenum modeRGB, GLenum modeAlpha) { tunisGL.tunisBlendEquationSeparateiEXT(buf, modeRGB, modeAlpha); }
TUNIS_FORCE_INLINE void  glBlendEquationSeparateiOES(GLuint buf, GLenum modeRGB, GLenum modeAlpha) { tunisGL.tunisBlendEquationSeparateiOES(buf, modeRGB, modeAlpha); }
TUNIS_FORCE_INLINE void  glBlendEquationi(GLuint buf, GLenum mode) { tunisGL.tunisBlendEquationi(buf, mode); }
TUNIS_FORCE_INLINE void  glBlendEquationiARB(GLuint buf, GLenum mode) { tunisGL.tunisBlendEquationiARB(buf, mode); }
TUNIS_FORCE_INLINE void  glBlendEquationiEXT(GLuint buf, GLenum mode) { tunisGL.tunisBlendEquationiEXT(buf, mode); }
TUNIS_FORCE_INLINE void  glBlendEquationiOES(GLuint buf, GLenum mode) { tunisGL.tunisBlendEquationiOES(buf, mode); }
TUNIS_FORCE_INLINE void  glBlendFunc(GLenum sfactor, GLenum dfactor) { tunisGL.tunisBlendFunc(sfactor, dfactor); }
TUNIS_FORCE_INLINE void  glBlendFuncIndexedAMD(GLuint buf, GLenum src, GLenum dst) { tunisGL.tunisBlendFuncIndexedAMD(buf, src, dst); }
TUNIS_FORCE_INLINE void  glBlendFuncSeparate(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha) { tunisGL.tunisBlendFuncSeparate(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha); }
TUNIS_FORCE_INLINE void  glBlendFuncSeparateEXT(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha) { tunisGL.tunisBlendFuncSeparateEXT(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha); }
TUNIS_FORCE_INLINE void  glBlendFuncSeparateINGR(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha) { tunisGL.tunisBlendFuncSeparateINGR(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha); }
TUNIS_FORCE_INLINE void  glBlendFuncSeparateIndexedAMD(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha) { tunisGL.tunisBlendFuncSeparateIndexedAMD(buf, srcRGB, dstRGB, srcAlpha, dstAlpha); }
TUNIS_FORCE_INLINE void  glBlendFuncSeparateOES(GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha) { tunisGL.tunisBlendFuncSeparateOES(srcRGB, dstRGB, srcAlpha, dstAlpha); }
TUNIS_FORCE_INLINE void  glBlendFuncSeparatei(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha) { tunisGL.tunisBlendFuncSeparatei(buf, srcRGB, dstRGB, srcAlpha, dstAlpha); }
TUNIS_FORCE_INLINE void  glBlendFuncSeparateiARB(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha) { tunisGL.tunisBlendFuncSeparateiARB(buf, srcRGB, dstRGB, srcAlpha, dstAlpha); }
TUNIS_FORCE_INLINE void  glBlendFuncSeparateiEXT(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha) { tunisGL.tunisBlendFuncSeparateiEXT(buf, srcRGB, dstRGB, srcAlpha, dstAlpha); }
TUNIS_FORCE_INLINE void  glBlendFuncSeparateiOES(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha) { tunisGL.tunisBlendFuncSeparateiOES(buf, srcRGB, dstRGB, srcAlpha, dstAlpha); }
TUNIS_FORCE_INLINE void  glBlendFunci(GLuint buf, GLenum src, GLenum dst) { tunisGL.tunisBlendFunci(buf, src, dst); }
TUNIS_FORCE_INLINE void  glBlendFunciARB(GLuint buf, GLenum src, GLenum dst) { tunisGL.tunisBlendFunciARB(buf, src, dst); }
TUNIS_FORCE_INLINE void  glBlendFunciEXT(GLuint buf, GLenum src, GLenum dst) { tunisGL.tunisBlendFunciEXT(buf, src, dst); }
TUNIS_FORCE_INLINE void  glBlendFunciOES(GLuint buf, GLenum src, GLenum dst) { tunisGL.tunisBlendFunciOES(buf, src, dst); }
TUNIS_FORCE_INLINE void  glBlendParameteriNV(GLenum pname, GLint value) { tunisGL.tunisBlendParameteriNV(pname, value); }
TUNIS_FORCE_INLINE void  glBlitFramebuffer(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter) { tunisGL.tunisBlitFramebuffer(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter); }
TUNIS_FORCE_INLINE void  glBlitFramebufferANGLE(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter) { tunisGL.tunisBlitFramebufferANGLE(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter); }
TUNIS_FORCE_INLINE void  glBlitFramebufferEXT(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter) { tunisGL.tunisBlitFramebufferEXT(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter); }
TUNIS_FORCE_INLINE void  glBlitFramebufferNV(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter) { tunisGL.tunisBlitFramebufferNV(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter); }
TUNIS_FORCE_INLINE void  glBlitNamedFramebuffer(GLuint readFramebuffer, GLuint drawFramebuffer, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter) { tunisGL.tunisBlitNamedFramebuffer(readFramebuffer, drawFramebuffer, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter); }
TUNIS_FORCE_INLINE void  glBufferAddressRangeNV(GLenum pname, GLuint index, GLuint64EXT address, GLsizeiptr length) { tunisGL.tunisBufferAddressRangeNV(pname, index, address, length); }
TUNIS_FORCE_INLINE void  glBufferData(GLenum target, GLsizeiptr size, const void * data, GLenum usage) { tunisGL.tunisBufferData(target, size, data, usage); }
TUNIS_FORCE_INLINE void  glBufferDataARB(GLenum target, GLsizeiptrARB size, const void * data, GLenum usage) { tunisGL.tunisBufferDataARB(target, size, data, usage); }
TUNIS_FORCE_INLINE void  glBufferPageCommitmentARB(GLenum target, GLintptr offset, GLsizeiptr size, GLboolean commit) { tunisGL.tunisBufferPageCommitmentARB(target, offset, size, commit); }
TUNIS_FORCE_INLINE void  glBufferParameteriAPPLE(GLenum target, GLenum pname, GLint param) { tunisGL.tunisBufferParameteriAPPLE(target, pname, param); }
TUNIS_FORCE_INLINE GLuint glBufferRegionEnabled(void) { return tunisGL.tunisBufferRegionEnabled(); }
TUNIS_FORCE_INLINE void  glBufferStorage(GLenum target, GLsizeiptr size, const void * data, GLbitfield flags) { tunisGL.tunisBufferStorage(target, size, data, flags); }
TUNIS_FORCE_INLINE void  glBufferStorageEXT(GLenum target, GLsizeiptr size, const void * data, GLbitfield flags) { tunisGL.tunisBufferStorageEXT(target, size, data, flags); }
TUNIS_FORCE_INLINE void  glBufferStorageExternalEXT(GLenum target, GLintptr offset, GLsizeiptr size, GLeglClientBufferEXT clientBuffer, GLbitfield flags) { tunisGL.tunisBufferStorageExternalEXT(target, offset, size, clientBuffer, flags); }
TUNIS_FORCE_INLINE void  glBufferStorageMemEXT(GLenum target, GLsizeiptr size, GLuint memory, GLuint64 offset) { tunisGL.tunisBufferStorageMemEXT(target, size, memory, offset); }
TUNIS_FORCE_INLINE void  glBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, const void * data) { tunisGL.tunisBufferSubData(target, offset, size, data); }
TUNIS_FORCE_INLINE void  glBufferSubDataARB(GLenum target, GLintptrARB offset, GLsizeiptrARB size, const void * data) { tunisGL.tunisBufferSubDataARB(target, offset, size, data); }
TUNIS_FORCE_INLINE void  glCallCommandListNV(GLuint list) { tunisGL.tunisCallCommandListNV(list); }
TUNIS_FORCE_INLINE void  glCallList(GLuint list) { tunisGL.tunisCallList(list); }
TUNIS_FORCE_INLINE void  glCallLists(GLsizei n, GLenum type, const void * lists) { tunisGL.tunisCallLists(n, type, lists); }
TUNIS_FORCE_INLINE GLenum glCheckFramebufferStatus(GLenum target) { return tunisGL.tunisCheckFramebufferStatus(target); }
TUNIS_FORCE_INLINE GLenum glCheckFramebufferStatusEXT(GLenum target) { return tunisGL.tunisCheckFramebufferStatusEXT(target); }
TUNIS_FORCE_INLINE GLenum glCheckFramebufferStatusOES(GLenum target) { return tunisGL.tunisCheckFramebufferStatusOES(target); }
TUNIS_FORCE_INLINE GLenum glCheckNamedFramebufferStatus(GLuint framebuffer, GLenum target) { return tunisGL.tunisCheckNamedFramebufferStatus(framebuffer, target); }
TUNIS_FORCE_INLINE GLenum glCheckNamedFramebufferStatusEXT(GLuint framebuffer, GLenum target) { return tunisGL.tunisCheckNamedFramebufferStatusEXT(framebuffer, target); }
TUNIS_FORCE_INLINE void  glClampColor(GLenum target, GLenum clamp) { tunisGL.tunisClampColor(target, clamp); }
TUNIS_FORCE_INLINE void  glClampColorARB(GLenum target, GLenum clamp) { tunisGL.tunisClampColorARB(target, clamp); }
TUNIS_FORCE_INLINE void  glClear(GLbitfield mask) { tunisGL.tunisClear(mask); }
TUNIS_FORCE_INLINE void  glClearAccum(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha) { tunisGL.tunisClearAccum(red, green, blue, alpha); }
TUNIS_FORCE_INLINE void  glClearAccumxOES(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha) { tunisGL.tunisClearAccumxOES(red, green, blue, alpha); }
TUNIS_FORCE_INLINE void  glClearBufferData(GLenum target, GLenum internalformat, GLenum format, GLenum type, const void * data) { tunisGL.tunisClearBufferData(target, internalformat, format, type, data); }
TUNIS_FORCE_INLINE void  glClearBufferSubData(GLenum target, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void * data) { tunisGL.tunisClearBufferSubData(target, internalformat, offset, size, format, type, data); }
TUNIS_FORCE_INLINE void  glClearBufferfi(GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil) { tunisGL.tunisClearBufferfi(buffer, drawbuffer, depth, stencil); }
TUNIS_FORCE_INLINE void  glClearBufferfv(GLenum buffer, GLint drawbuffer, const GLfloat * value) { tunisGL.tunisClearBufferfv(buffer, drawbuffer, value); }
TUNIS_FORCE_INLINE void  glClearBufferiv(GLenum buffer, GLint drawbuffer, const GLint * value) { tunisGL.tunisClearBufferiv(buffer, drawbuffer, value); }
TUNIS_FORCE_INLINE void  glClearBufferuiv(GLenum buffer, GLint drawbuffer, const GLuint * value) { tunisGL.tunisClearBufferuiv(buffer, drawbuffer, value); }
TUNIS_FORCE_INLINE void  glClearColor(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha) { tunisGL.tunisClearColor(red, green, blue, alpha); }
TUNIS_FORCE_INLINE void  glClearColorIiEXT(GLint red, GLint green, GLint blue, GLint alpha) { tunisGL.tunisClearColorIiEXT(red, green, blue, alpha); }
TUNIS_FORCE_INLINE void  glClearColorIuiEXT(GLuint red, GLuint green, GLuint blue, GLuint alpha) { tunisGL.tunisClearColorIuiEXT(red, green, blue, alpha); }
TUNIS_FORCE_INLINE void  glClearColorx(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha) { tunisGL.tunisClearColorx(red, green, blue, alpha); }
TUNIS_FORCE_INLINE void  glClearColorxOES(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha) { tunisGL.tunisClearColorxOES(red, green, blue, alpha); }
TUNIS_FORCE_INLINE void  glClearDepth(GLdouble depth) { tunisGL.tunisClearDepth(depth); }
TUNIS_FORCE_INLINE void  glClearDepthdNV(GLdouble depth) { tunisGL.tunisClearDepthdNV(depth); }
TUNIS_FORCE_INLINE void  glClearDepthf(GLfloat d) { tunisGL.tunisClearDepthf(d); }
TUNIS_FORCE_INLINE void  glClearDepthfOES(GLclampf depth) { tunisGL.tunisClearDepthfOES(depth); }
TUNIS_FORCE_INLINE void  glClearDepthx(GLfixed depth) { tunisGL.tunisClearDepthx(depth); }
TUNIS_FORCE_INLINE void  glClearDepthxOES(GLfixed depth) { tunisGL.tunisClearDepthxOES(depth); }
TUNIS_FORCE_INLINE void  glClearIndex(GLfloat c) { tunisGL.tunisClearIndex(c); }
TUNIS_FORCE_INLINE void  glClearNamedBufferData(GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void * data) { tunisGL.tunisClearNamedBufferData(buffer, internalformat, format, type, data); }
TUNIS_FORCE_INLINE void  glClearNamedBufferDataEXT(GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void * data) { tunisGL.tunisClearNamedBufferDataEXT(buffer, internalformat, format, type, data); }
TUNIS_FORCE_INLINE void  glClearNamedBufferSubData(GLuint buffer, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void * data) { tunisGL.tunisClearNamedBufferSubData(buffer, internalformat, offset, size, format, type, data); }
TUNIS_FORCE_INLINE void  glClearNamedBufferSubDataEXT(GLuint buffer, GLenum internalformat, GLsizeiptr offset, GLsizeiptr size, GLenum format, GLenum type, const void * data) { tunisGL.tunisClearNamedBufferSubDataEXT(buffer, internalformat, offset, size, format, type, data); }
TUNIS_FORCE_INLINE void  glClearNamedFramebufferfi(GLuint framebuffer, GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil) { tunisGL.tunisClearNamedFramebufferfi(framebuffer, buffer, drawbuffer, depth, stencil); }
TUNIS_FORCE_INLINE void  glClearNamedFramebufferfv(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLfloat * value) { tunisGL.tunisClearNamedFramebufferfv(framebuffer, buffer, drawbuffer, value); }
TUNIS_FORCE_INLINE void  glClearNamedFramebufferiv(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLint * value) { tunisGL.tunisClearNamedFramebufferiv(framebuffer, buffer, drawbuffer, value); }
TUNIS_FORCE_INLINE void  glClearNamedFramebufferuiv(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLuint * value) { tunisGL.tunisClearNamedFramebufferuiv(framebuffer, buffer, drawbuffer, value); }
TUNIS_FORCE_INLINE void  glClearPixelLocalStorageuiEXT(GLsizei offset, GLsizei n, const GLuint * values) { tunisGL.tunisClearPixelLocalStorageuiEXT(offset, n, values); }
TUNIS_FORCE_INLINE void  glClearStencil(GLint s) { tunisGL.tunisClearStencil(s); }
TUNIS_FORCE_INLINE void  glClearTexImage(GLuint texture, GLint level, GLenum format, GLenum type, const void * data) { tunisGL.tunisClearTexImage(texture, level, format, type, data); }
TUNIS_FORCE_INLINE void  glClearTexImageEXT(GLuint texture, GLint level, GLenum format, GLenum type, const void * data) { tunisGL.tunisClearTexImageEXT(texture, level, format, type, data); }
TUNIS_FORCE_INLINE void  glClearTexSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void * data) { tunisGL.tunisClearTexSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, data); }
TUNIS_FORCE_INLINE void  glClearTexSubImageEXT(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void * data) { tunisGL.tunisClearTexSubImageEXT(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, data); }
TUNIS_FORCE_INLINE void  glClientActiveTexture(GLenum texture) { tunisGL.tunisClientActiveTexture(texture); }
TUNIS_FORCE_INLINE void  glClientActiveTextureARB(GLenum texture) { tunisGL.tunisClientActiveTextureARB(texture); }
TUNIS_FORCE_INLINE void  glClientActiveVertexStreamATI(GLenum stream) { tunisGL.tunisClientActiveVertexStreamATI(stream); }
TUNIS_FORCE_INLINE void  glClientAttribDefaultEXT(GLbitfield mask) { tunisGL.tunisClientAttribDefaultEXT(mask); }
TUNIS_FORCE_INLINE GLenum glClientWaitSync(GLsync sync, GLbitfield flags, GLuint64 timeout) { return tunisGL.tunisClientWaitSync(sync, flags, timeout); }
TUNIS_FORCE_INLINE GLenum glClientWaitSyncAPPLE(GLsync sync, GLbitfield flags, GLuint64 timeout) { return tunisGL.tunisClientWaitSyncAPPLE(sync, flags, timeout); }
TUNIS_FORCE_INLINE void  glClipControl(GLenum origin, GLenum depth) { tunisGL.tunisClipControl(origin, depth); }
TUNIS_FORCE_INLINE void  glClipControlEXT(GLenum origin, GLenum depth) { tunisGL.tunisClipControlEXT(origin, depth); }
TUNIS_FORCE_INLINE void  glClipPlane(GLenum plane, const GLdouble * equation) { tunisGL.tunisClipPlane(plane, equation); }
TUNIS_FORCE_INLINE void  glClipPlanef(GLenum p, const GLfloat * eqn) { tunisGL.tunisClipPlanef(p, eqn); }
TUNIS_FORCE_INLINE void  glClipPlanefIMG(GLenum p, const GLfloat * eqn) { tunisGL.tunisClipPlanefIMG(p, eqn); }
TUNIS_FORCE_INLINE void  glClipPlanefOES(GLenum plane, const GLfloat * equation) { tunisGL.tunisClipPlanefOES(plane, equation); }
TUNIS_FORCE_INLINE void  glClipPlanex(GLenum plane, const GLfixed * equation) { tunisGL.tunisClipPlanex(plane, equation); }
TUNIS_FORCE_INLINE void  glClipPlanexIMG(GLenum p, const GLfixed * eqn) { tunisGL.tunisClipPlanexIMG(p, eqn); }
TUNIS_FORCE_INLINE void  glClipPlanexOES(GLenum plane, const GLfixed * equation) { tunisGL.tunisClipPlanexOES(plane, equation); }
TUNIS_FORCE_INLINE void  glColor3b(GLbyte red, GLbyte green, GLbyte blue) { tunisGL.tunisColor3b(red, green, blue); }
TUNIS_FORCE_INLINE void  glColor3bv(const GLbyte * v) { tunisGL.tunisColor3bv(v); }
TUNIS_FORCE_INLINE void  glColor3d(GLdouble red, GLdouble green, GLdouble blue) { tunisGL.tunisColor3d(red, green, blue); }
TUNIS_FORCE_INLINE void  glColor3dv(const GLdouble * v) { tunisGL.tunisColor3dv(v); }
TUNIS_FORCE_INLINE void  glColor3f(GLfloat red, GLfloat green, GLfloat blue) { tunisGL.tunisColor3f(red, green, blue); }
TUNIS_FORCE_INLINE void  glColor3fVertex3fSUN(GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z) { tunisGL.tunisColor3fVertex3fSUN(r, g, b, x, y, z); }
TUNIS_FORCE_INLINE void  glColor3fVertex3fvSUN(const GLfloat * c, const GLfloat * v) { tunisGL.tunisColor3fVertex3fvSUN(c, v); }
TUNIS_FORCE_INLINE void  glColor3fv(const GLfloat * v) { tunisGL.tunisColor3fv(v); }
TUNIS_FORCE_INLINE void  glColor3hNV(GLhalfNV red, GLhalfNV green, GLhalfNV blue) { tunisGL.tunisColor3hNV(red, green, blue); }
TUNIS_FORCE_INLINE void  glColor3hvNV(const GLhalfNV * v) { tunisGL.tunisColor3hvNV(v); }
TUNIS_FORCE_INLINE void  glColor3i(GLint red, GLint green, GLint blue) { tunisGL.tunisColor3i(red, green, blue); }
TUNIS_FORCE_INLINE void  glColor3iv(const GLint * v) { tunisGL.tunisColor3iv(v); }
TUNIS_FORCE_INLINE void  glColor3s(GLshort red, GLshort green, GLshort blue) { tunisGL.tunisColor3s(red, green, blue); }
TUNIS_FORCE_INLINE void  glColor3sv(const GLshort * v) { tunisGL.tunisColor3sv(v); }
TUNIS_FORCE_INLINE void  glColor3ub(GLubyte red, GLubyte green, GLubyte blue) { tunisGL.tunisColor3ub(red, green, blue); }
TUNIS_FORCE_INLINE void  glColor3ubv(const GLubyte * v) { tunisGL.tunisColor3ubv(v); }
TUNIS_FORCE_INLINE void  glColor3ui(GLuint red, GLuint green, GLuint blue) { tunisGL.tunisColor3ui(red, green, blue); }
TUNIS_FORCE_INLINE void  glColor3uiv(const GLuint * v) { tunisGL.tunisColor3uiv(v); }
TUNIS_FORCE_INLINE void  glColor3us(GLushort red, GLushort green, GLushort blue) { tunisGL.tunisColor3us(red, green, blue); }
TUNIS_FORCE_INLINE void  glColor3usv(const GLushort * v) { tunisGL.tunisColor3usv(v); }
TUNIS_FORCE_INLINE void  glColor3xOES(GLfixed red, GLfixed green, GLfixed blue) { tunisGL.tunisColor3xOES(red, green, blue); }
TUNIS_FORCE_INLINE void  glColor3xvOES(const GLfixed * components) { tunisGL.tunisColor3xvOES(components); }
TUNIS_FORCE_INLINE void  glColor4b(GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha) { tunisGL.tunisColor4b(red, green, blue, alpha); }
TUNIS_FORCE_INLINE void  glColor4bv(const GLbyte * v) { tunisGL.tunisColor4bv(v); }
TUNIS_FORCE_INLINE void  glColor4d(GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha) { tunisGL.tunisColor4d(red, green, blue, alpha); }
TUNIS_FORCE_INLINE void  glColor4dv(const GLdouble * v) { tunisGL.tunisColor4dv(v); }
TUNIS_FORCE_INLINE void  glColor4f(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha) { tunisGL.tunisColor4f(red, green, blue, alpha); }
TUNIS_FORCE_INLINE void  glColor4fNormal3fVertex3fSUN(GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z) { tunisGL.tunisColor4fNormal3fVertex3fSUN(r, g, b, a, nx, ny, nz, x, y, z); }
TUNIS_FORCE_INLINE void  glColor4fNormal3fVertex3fvSUN(const GLfloat * c, const GLfloat * n, const GLfloat * v) { tunisGL.tunisColor4fNormal3fVertex3fvSUN(c, n, v); }
TUNIS_FORCE_INLINE void  glColor4fv(const GLfloat * v) { tunisGL.tunisColor4fv(v); }
TUNIS_FORCE_INLINE void  glColor4hNV(GLhalfNV red, GLhalfNV green, GLhalfNV blue, GLhalfNV alpha) { tunisGL.tunisColor4hNV(red, green, blue, alpha); }
TUNIS_FORCE_INLINE void  glColor4hvNV(const GLhalfNV * v) { tunisGL.tunisColor4hvNV(v); }
TUNIS_FORCE_INLINE void  glColor4i(GLint red, GLint green, GLint blue, GLint alpha) { tunisGL.tunisColor4i(red, green, blue, alpha); }
TUNIS_FORCE_INLINE void  glColor4iv(const GLint * v) { tunisGL.tunisColor4iv(v); }
TUNIS_FORCE_INLINE void  glColor4s(GLshort red, GLshort green, GLshort blue, GLshort alpha) { tunisGL.tunisColor4s(red, green, blue, alpha); }
TUNIS_FORCE_INLINE void  glColor4sv(const GLshort * v) { tunisGL.tunisColor4sv(v); }
TUNIS_FORCE_INLINE void  glColor4ub(GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha) { tunisGL.tunisColor4ub(red, green, blue, alpha); }
TUNIS_FORCE_INLINE void  glColor4ubVertex2fSUN(GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y) { tunisGL.tunisColor4ubVertex2fSUN(r, g, b, a, x, y); }
TUNIS_FORCE_INLINE void  glColor4ubVertex2fvSUN(const GLubyte * c, const GLfloat * v) { tunisGL.tunisColor4ubVertex2fvSUN(c, v); }
TUNIS_FORCE_INLINE void  glColor4ubVertex3fSUN(GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z) { tunisGL.tunisColor4ubVertex3fSUN(r, g, b, a, x, y, z); }
TUNIS_FORCE_INLINE void  glColor4ubVertex3fvSUN(const GLubyte * c, const GLfloat * v) { tunisGL.tunisColor4ubVertex3fvSUN(c, v); }
TUNIS_FORCE_INLINE void  glColor4ubv(const GLubyte * v) { tunisGL.tunisColor4ubv(v); }
TUNIS_FORCE_INLINE void  glColor4ui(GLuint red, GLuint green, GLuint blue, GLuint alpha) { tunisGL.tunisColor4ui(red, green, blue, alpha); }
TUNIS_FORCE_INLINE void  glColor4uiv(const GLuint * v) { tunisGL.tunisColor4uiv(v); }
TUNIS_FORCE_INLINE void  glColor4us(GLushort red, GLushort green, GLushort blue, GLushort alpha) { tunisGL.tunisColor4us(red, green, blue, alpha); }
TUNIS_FORCE_INLINE void  glColor4usv(const GLushort * v) { tunisGL.tunisColor4usv(v); }
TUNIS_FORCE_INLINE void  glColor4x(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha) { tunisGL.tunisColor4x(red, green, blue, alpha); }
TUNIS_FORCE_INLINE void  glColor4xOES(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha) { tunisGL.tunisColor4xOES(red, green, blue, alpha); }
TUNIS_FORCE_INLINE void  glColor4xvOES(const GLfixed * components) { tunisGL.tunisColor4xvOES(components); }
TUNIS_FORCE_INLINE void  glColorFormatNV(GLint size, GLenum type, GLsizei stride) { tunisGL.tunisColorFormatNV(size, type, stride); }
TUNIS_FORCE_INLINE void  glColorFragmentOp1ATI(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod) { tunisGL.tunisColorFragmentOp1ATI(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod); }
TUNIS_FORCE_INLINE void  glColorFragmentOp2ATI(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod) { tunisGL.tunisColorFragmentOp2ATI(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod); }
TUNIS_FORCE_INLINE void  glColorFragmentOp3ATI(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod) { tunisGL.tunisColorFragmentOp3ATI(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod, arg3, arg3Rep, arg3Mod); }
TUNIS_FORCE_INLINE void  glColorMask(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha) { tunisGL.tunisColorMask(red, green, blue, alpha); }
TUNIS_FORCE_INLINE void  glColorMaskIndexedEXT(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a) { tunisGL.tunisColorMaskIndexedEXT(index, r, g, b, a); }
TUNIS_FORCE_INLINE void  glColorMaski(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a) { tunisGL.tunisColorMaski(index, r, g, b, a); }
TUNIS_FORCE_INLINE void  glColorMaskiEXT(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a) { tunisGL.tunisColorMaskiEXT(index, r, g, b, a); }
TUNIS_FORCE_INLINE void  glColorMaskiOES(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a) { tunisGL.tunisColorMaskiOES(index, r, g, b, a); }
TUNIS_FORCE_INLINE void  glColorMaterial(GLenum face, GLenum mode) { tunisGL.tunisColorMaterial(face, mode); }
TUNIS_FORCE_INLINE void  glColorP3ui(GLenum type, GLuint color) { tunisGL.tunisColorP3ui(type, color); }
TUNIS_FORCE_INLINE void  glColorP3uiv(GLenum type, const GLuint * color) { tunisGL.tunisColorP3uiv(type, color); }
TUNIS_FORCE_INLINE void  glColorP4ui(GLenum type, GLuint color) { tunisGL.tunisColorP4ui(type, color); }
TUNIS_FORCE_INLINE void  glColorP4uiv(GLenum type, const GLuint * color) { tunisGL.tunisColorP4uiv(type, color); }
TUNIS_FORCE_INLINE void  glColorPointer(GLint size, GLenum type, GLsizei stride, const void * pointer) { tunisGL.tunisColorPointer(size, type, stride, pointer); }
TUNIS_FORCE_INLINE void  glColorPointerEXT(GLint size, GLenum type, GLsizei stride, GLsizei count, const void * pointer) { tunisGL.tunisColorPointerEXT(size, type, stride, count, pointer); }
TUNIS_FORCE_INLINE void  glColorPointerListIBM(GLint size, GLenum type, GLint stride, const void ** pointer, GLint ptrstride) { tunisGL.tunisColorPointerListIBM(size, type, stride, pointer, ptrstride); }
TUNIS_FORCE_INLINE void  glColorPointervINTEL(GLint size, GLenum type, const void ** pointer) { tunisGL.tunisColorPointervINTEL(size, type, pointer); }
TUNIS_FORCE_INLINE void  glColorSubTable(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const void * data) { tunisGL.tunisColorSubTable(target, start, count, format, type, data); }
TUNIS_FORCE_INLINE void  glColorSubTableEXT(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const void * data) { tunisGL.tunisColorSubTableEXT(target, start, count, format, type, data); }
TUNIS_FORCE_INLINE void  glColorTable(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void * table) { tunisGL.tunisColorTable(target, internalformat, width, format, type, table); }
TUNIS_FORCE_INLINE void  glColorTableEXT(GLenum target, GLenum internalFormat, GLsizei width, GLenum format, GLenum type, const void * table) { tunisGL.tunisColorTableEXT(target, internalFormat, width, format, type, table); }
TUNIS_FORCE_INLINE void  glColorTableParameterfv(GLenum target, GLenum pname, const GLfloat * params) { tunisGL.tunisColorTableParameterfv(target, pname, params); }
TUNIS_FORCE_INLINE void  glColorTableParameterfvSGI(GLenum target, GLenum pname, const GLfloat * params) { tunisGL.tunisColorTableParameterfvSGI(target, pname, params); }
TUNIS_FORCE_INLINE void  glColorTableParameteriv(GLenum target, GLenum pname, const GLint * params) { tunisGL.tunisColorTableParameteriv(target, pname, params); }
TUNIS_FORCE_INLINE void  glColorTableParameterivSGI(GLenum target, GLenum pname, const GLint * params) { tunisGL.tunisColorTableParameterivSGI(target, pname, params); }
TUNIS_FORCE_INLINE void  glColorTableSGI(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void * table) { tunisGL.tunisColorTableSGI(target, internalformat, width, format, type, table); }
TUNIS_FORCE_INLINE void  glCombinerInputNV(GLenum stage, GLenum portion, GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage) { tunisGL.tunisCombinerInputNV(stage, portion, variable, input, mapping, componentUsage); }
TUNIS_FORCE_INLINE void  glCombinerOutputNV(GLenum stage, GLenum portion, GLenum abOutput, GLenum cdOutput, GLenum sumOutput, GLenum scale, GLenum bias, GLboolean abDotProduct, GLboolean cdDotProduct, GLboolean muxSum) { tunisGL.tunisCombinerOutputNV(stage, portion, abOutput, cdOutput, sumOutput, scale, bias, abDotProduct, cdDotProduct, muxSum); }
TUNIS_FORCE_INLINE void  glCombinerParameterfNV(GLenum pname, GLfloat param) { tunisGL.tunisCombinerParameterfNV(pname, param); }
TUNIS_FORCE_INLINE void  glCombinerParameterfvNV(GLenum pname, const GLfloat * params) { tunisGL.tunisCombinerParameterfvNV(pname, params); }
TUNIS_FORCE_INLINE void  glCombinerParameteriNV(GLenum pname, GLint param) { tunisGL.tunisCombinerParameteriNV(pname, param); }
TUNIS_FORCE_INLINE void  glCombinerParameterivNV(GLenum pname, const GLint * params) { tunisGL.tunisCombinerParameterivNV(pname, params); }
TUNIS_FORCE_INLINE void  glCombinerStageParameterfvNV(GLenum stage, GLenum pname, const GLfloat * params) { tunisGL.tunisCombinerStageParameterfvNV(stage, pname, params); }
TUNIS_FORCE_INLINE void  glCommandListSegmentsNV(GLuint list, GLuint segments) { tunisGL.tunisCommandListSegmentsNV(list, segments); }
TUNIS_FORCE_INLINE void  glCompileCommandListNV(GLuint list) { tunisGL.tunisCompileCommandListNV(list); }
TUNIS_FORCE_INLINE void  glCompileShader(GLuint shader) { tunisGL.tunisCompileShader(shader); }
TUNIS_FORCE_INLINE void  glCompileShaderARB(GLhandleARB shaderObj) { tunisGL.tunisCompileShaderARB(shaderObj); }
TUNIS_FORCE_INLINE void  glCompileShaderIncludeARB(GLuint shader, GLsizei count, const GLchar *const* path, const GLint * length) { tunisGL.tunisCompileShaderIncludeARB(shader, count, path, length); }
TUNIS_FORCE_INLINE void  glCompressedMultiTexImage1DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void * bits) { tunisGL.tunisCompressedMultiTexImage1DEXT(texunit, target, level, internalformat, width, border, imageSize, bits); }
TUNIS_FORCE_INLINE void  glCompressedMultiTexImage2DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void * bits) { tunisGL.tunisCompressedMultiTexImage2DEXT(texunit, target, level, internalformat, width, height, border, imageSize, bits); }
TUNIS_FORCE_INLINE void  glCompressedMultiTexImage3DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void * bits) { tunisGL.tunisCompressedMultiTexImage3DEXT(texunit, target, level, internalformat, width, height, depth, border, imageSize, bits); }
TUNIS_FORCE_INLINE void  glCompressedMultiTexSubImage1DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void * bits) { tunisGL.tunisCompressedMultiTexSubImage1DEXT(texunit, target, level, xoffset, width, format, imageSize, bits); }
TUNIS_FORCE_INLINE void  glCompressedMultiTexSubImage2DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void * bits) { tunisGL.tunisCompressedMultiTexSubImage2DEXT(texunit, target, level, xoffset, yoffset, width, height, format, imageSize, bits); }
TUNIS_FORCE_INLINE void  glCompressedMultiTexSubImage3DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void * bits) { tunisGL.tunisCompressedMultiTexSubImage3DEXT(texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, bits); }
TUNIS_FORCE_INLINE void  glCompressedTexImage1D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void * data) { tunisGL.tunisCompressedTexImage1D(target, level, internalformat, width, border, imageSize, data); }
TUNIS_FORCE_INLINE void  glCompressedTexImage1DARB(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void * data) { tunisGL.tunisCompressedTexImage1DARB(target, level, internalformat, width, border, imageSize, data); }
TUNIS_FORCE_INLINE void  glCompressedTexImage2D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void * data) { tunisGL.tunisCompressedTexImage2D(target, level, internalformat, width, height, border, imageSize, data); }
TUNIS_FORCE_INLINE void  glCompressedTexImage2DARB(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void * data) { tunisGL.tunisCompressedTexImage2DARB(target, level, internalformat, width, height, border, imageSize, data); }
TUNIS_FORCE_INLINE void  glCompressedTexImage3D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void * data) { tunisGL.tunisCompressedTexImage3D(target, level, internalformat, width, height, depth, border, imageSize, data); }
TUNIS_FORCE_INLINE void  glCompressedTexImage3DARB(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void * data) { tunisGL.tunisCompressedTexImage3DARB(target, level, internalformat, width, height, depth, border, imageSize, data); }
TUNIS_FORCE_INLINE void  glCompressedTexImage3DOES(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void * data) { tunisGL.tunisCompressedTexImage3DOES(target, level, internalformat, width, height, depth, border, imageSize, data); }
TUNIS_FORCE_INLINE void  glCompressedTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void * data) { tunisGL.tunisCompressedTexSubImage1D(target, level, xoffset, width, format, imageSize, data); }
TUNIS_FORCE_INLINE void  glCompressedTexSubImage1DARB(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void * data) { tunisGL.tunisCompressedTexSubImage1DARB(target, level, xoffset, width, format, imageSize, data); }
TUNIS_FORCE_INLINE void  glCompressedTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void * data) { tunisGL.tunisCompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, data); }
TUNIS_FORCE_INLINE void  glCompressedTexSubImage2DARB(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void * data) { tunisGL.tunisCompressedTexSubImage2DARB(target, level, xoffset, yoffset, width, height, format, imageSize, data); }
TUNIS_FORCE_INLINE void  glCompressedTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void * data) { tunisGL.tunisCompressedTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data); }
TUNIS_FORCE_INLINE void  glCompressedTexSubImage3DARB(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void * data) { tunisGL.tunisCompressedTexSubImage3DARB(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data); }
TUNIS_FORCE_INLINE void  glCompressedTexSubImage3DOES(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void * data) { tunisGL.tunisCompressedTexSubImage3DOES(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data); }
TUNIS_FORCE_INLINE void  glCompressedTextureImage1DEXT(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void * bits) { tunisGL.tunisCompressedTextureImage1DEXT(texture, target, level, internalformat, width, border, imageSize, bits); }
TUNIS_FORCE_INLINE void  glCompressedTextureImage2DEXT(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void * bits) { tunisGL.tunisCompressedTextureImage2DEXT(texture, target, level, internalformat, width, height, border, imageSize, bits); }
TUNIS_FORCE_INLINE void  glCompressedTextureImage3DEXT(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void * bits) { tunisGL.tunisCompressedTextureImage3DEXT(texture, target, level, internalformat, width, height, depth, border, imageSize, bits); }
TUNIS_FORCE_INLINE void  glCompressedTextureSubImage1D(GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void * data) { tunisGL.tunisCompressedTextureSubImage1D(texture, level, xoffset, width, format, imageSize, data); }
TUNIS_FORCE_INLINE void  glCompressedTextureSubImage1DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void * bits) { tunisGL.tunisCompressedTextureSubImage1DEXT(texture, target, level, xoffset, width, format, imageSize, bits); }
TUNIS_FORCE_INLINE void  glCompressedTextureSubImage2D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void * data) { tunisGL.tunisCompressedTextureSubImage2D(texture, level, xoffset, yoffset, width, height, format, imageSize, data); }
TUNIS_FORCE_INLINE void  glCompressedTextureSubImage2DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void * bits) { tunisGL.tunisCompressedTextureSubImage2DEXT(texture, target, level, xoffset, yoffset, width, height, format, imageSize, bits); }
TUNIS_FORCE_INLINE void  glCompressedTextureSubImage3D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void * data) { tunisGL.tunisCompressedTextureSubImage3D(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data); }
TUNIS_FORCE_INLINE void  glCompressedTextureSubImage3DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void * bits) { tunisGL.tunisCompressedTextureSubImage3DEXT(texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, bits); }
TUNIS_FORCE_INLINE void  glConservativeRasterParameterfNV(GLenum pname, GLfloat value) { tunisGL.tunisConservativeRasterParameterfNV(pname, value); }
TUNIS_FORCE_INLINE void  glConservativeRasterParameteriNV(GLenum pname, GLint param) { tunisGL.tunisConservativeRasterParameteriNV(pname, param); }
TUNIS_FORCE_INLINE void  glConvolutionFilter1D(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void * image) { tunisGL.tunisConvolutionFilter1D(target, internalformat, width, format, type, image); }
TUNIS_FORCE_INLINE void  glConvolutionFilter1DEXT(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void * image) { tunisGL.tunisConvolutionFilter1DEXT(target, internalformat, width, format, type, image); }
TUNIS_FORCE_INLINE void  glConvolutionFilter2D(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * image) { tunisGL.tunisConvolutionFilter2D(target, internalformat, width, height, format, type, image); }
TUNIS_FORCE_INLINE void  glConvolutionFilter2DEXT(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * image) { tunisGL.tunisConvolutionFilter2DEXT(target, internalformat, width, height, format, type, image); }
TUNIS_FORCE_INLINE void  glConvolutionParameterf(GLenum target, GLenum pname, GLfloat params) { tunisGL.tunisConvolutionParameterf(target, pname, params); }
TUNIS_FORCE_INLINE void  glConvolutionParameterfEXT(GLenum target, GLenum pname, GLfloat params) { tunisGL.tunisConvolutionParameterfEXT(target, pname, params); }
TUNIS_FORCE_INLINE void  glConvolutionParameterfv(GLenum target, GLenum pname, const GLfloat * params) { tunisGL.tunisConvolutionParameterfv(target, pname, params); }
TUNIS_FORCE_INLINE void  glConvolutionParameterfvEXT(GLenum target, GLenum pname, const GLfloat * params) { tunisGL.tunisConvolutionParameterfvEXT(target, pname, params); }
TUNIS_FORCE_INLINE void  glConvolutionParameteri(GLenum target, GLenum pname, GLint params) { tunisGL.tunisConvolutionParameteri(target, pname, params); }
TUNIS_FORCE_INLINE void  glConvolutionParameteriEXT(GLenum target, GLenum pname, GLint params) { tunisGL.tunisConvolutionParameteriEXT(target, pname, params); }
TUNIS_FORCE_INLINE void  glConvolutionParameteriv(GLenum target, GLenum pname, const GLint * params) { tunisGL.tunisConvolutionParameteriv(target, pname, params); }
TUNIS_FORCE_INLINE void  glConvolutionParameterivEXT(GLenum target, GLenum pname, const GLint * params) { tunisGL.tunisConvolutionParameterivEXT(target, pname, params); }
TUNIS_FORCE_INLINE void  glConvolutionParameterxOES(GLenum target, GLenum pname, GLfixed param) { tunisGL.tunisConvolutionParameterxOES(target, pname, param); }
TUNIS_FORCE_INLINE void  glConvolutionParameterxvOES(GLenum target, GLenum pname, const GLfixed * params) { tunisGL.tunisConvolutionParameterxvOES(target, pname, params); }
TUNIS_FORCE_INLINE void  glCopyBufferSubData(GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size) { tunisGL.tunisCopyBufferSubData(readTarget, writeTarget, readOffset, writeOffset, size); }
TUNIS_FORCE_INLINE void  glCopyBufferSubDataNV(GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size) { tunisGL.tunisCopyBufferSubDataNV(readTarget, writeTarget, readOffset, writeOffset, size); }
TUNIS_FORCE_INLINE void  glCopyColorSubTable(GLenum target, GLsizei start, GLint x, GLint y, GLsizei width) { tunisGL.tunisCopyColorSubTable(target, start, x, y, width); }
TUNIS_FORCE_INLINE void  glCopyColorSubTableEXT(GLenum target, GLsizei start, GLint x, GLint y, GLsizei width) { tunisGL.tunisCopyColorSubTableEXT(target, start, x, y, width); }
TUNIS_FORCE_INLINE void  glCopyColorTable(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width) { tunisGL.tunisCopyColorTable(target, internalformat, x, y, width); }
TUNIS_FORCE_INLINE void  glCopyColorTableSGI(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width) { tunisGL.tunisCopyColorTableSGI(target, internalformat, x, y, width); }
TUNIS_FORCE_INLINE void  glCopyConvolutionFilter1D(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width) { tunisGL.tunisCopyConvolutionFilter1D(target, internalformat, x, y, width); }
TUNIS_FORCE_INLINE void  glCopyConvolutionFilter1DEXT(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width) { tunisGL.tunisCopyConvolutionFilter1DEXT(target, internalformat, x, y, width); }
TUNIS_FORCE_INLINE void  glCopyConvolutionFilter2D(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height) { tunisGL.tunisCopyConvolutionFilter2D(target, internalformat, x, y, width, height); }
TUNIS_FORCE_INLINE void  glCopyConvolutionFilter2DEXT(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height) { tunisGL.tunisCopyConvolutionFilter2DEXT(target, internalformat, x, y, width, height); }
TUNIS_FORCE_INLINE void  glCopyImageSubData(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth) { tunisGL.tunisCopyImageSubData(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth); }
TUNIS_FORCE_INLINE void  glCopyImageSubDataEXT(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth) { tunisGL.tunisCopyImageSubDataEXT(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth); }
TUNIS_FORCE_INLINE void  glCopyImageSubDataNV(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth) { tunisGL.tunisCopyImageSubDataNV(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, width, height, depth); }
TUNIS_FORCE_INLINE void  glCopyImageSubDataOES(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth) { tunisGL.tunisCopyImageSubDataOES(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth); }
TUNIS_FORCE_INLINE void  glCopyMultiTexImage1DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border) { tunisGL.tunisCopyMultiTexImage1DEXT(texunit, target, level, internalformat, x, y, width, border); }
TUNIS_FORCE_INLINE void  glCopyMultiTexImage2DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border) { tunisGL.tunisCopyMultiTexImage2DEXT(texunit, target, level, internalformat, x, y, width, height, border); }
TUNIS_FORCE_INLINE void  glCopyMultiTexSubImage1DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width) { tunisGL.tunisCopyMultiTexSubImage1DEXT(texunit, target, level, xoffset, x, y, width); }
TUNIS_FORCE_INLINE void  glCopyMultiTexSubImage2DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height) { tunisGL.tunisCopyMultiTexSubImage2DEXT(texunit, target, level, xoffset, yoffset, x, y, width, height); }
TUNIS_FORCE_INLINE void  glCopyMultiTexSubImage3DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height) { tunisGL.tunisCopyMultiTexSubImage3DEXT(texunit, target, level, xoffset, yoffset, zoffset, x, y, width, height); }
TUNIS_FORCE_INLINE void  glCopyNamedBufferSubData(GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size) { tunisGL.tunisCopyNamedBufferSubData(readBuffer, writeBuffer, readOffset, writeOffset, size); }
TUNIS_FORCE_INLINE void  glCopyPathNV(GLuint resultPath, GLuint srcPath) { tunisGL.tunisCopyPathNV(resultPath, srcPath); }
TUNIS_FORCE_INLINE void  glCopyPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum type) { tunisGL.tunisCopyPixels(x, y, width, height, type); }
TUNIS_FORCE_INLINE void  glCopyTexImage1D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border) { tunisGL.tunisCopyTexImage1D(target, level, internalformat, x, y, width, border); }
TUNIS_FORCE_INLINE void  glCopyTexImage1DEXT(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border) { tunisGL.tunisCopyTexImage1DEXT(target, level, internalformat, x, y, width, border); }
TUNIS_FORCE_INLINE void  glCopyTexImage2D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border) { tunisGL.tunisCopyTexImage2D(target, level, internalformat, x, y, width, height, border); }
TUNIS_FORCE_INLINE void  glCopyTexImage2DEXT(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border) { tunisGL.tunisCopyTexImage2DEXT(target, level, internalformat, x, y, width, height, border); }
TUNIS_FORCE_INLINE void  glCopyTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width) { tunisGL.tunisCopyTexSubImage1D(target, level, xoffset, x, y, width); }
TUNIS_FORCE_INLINE void  glCopyTexSubImage1DEXT(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width) { tunisGL.tunisCopyTexSubImage1DEXT(target, level, xoffset, x, y, width); }
TUNIS_FORCE_INLINE void  glCopyTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height) { tunisGL.tunisCopyTexSubImage2D(target, level, xoffset, yoffset, x, y, width, height); }
TUNIS_FORCE_INLINE void  glCopyTexSubImage2DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height) { tunisGL.tunisCopyTexSubImage2DEXT(target, level, xoffset, yoffset, x, y, width, height); }
TUNIS_FORCE_INLINE void  glCopyTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height) { tunisGL.tunisCopyTexSubImage3D(target, level, xoffset, yoffset, zoffset, x, y, width, height); }
TUNIS_FORCE_INLINE void  glCopyTexSubImage3DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height) { tunisGL.tunisCopyTexSubImage3DEXT(target, level, xoffset, yoffset, zoffset, x, y, width, height); }
TUNIS_FORCE_INLINE void  glCopyTexSubImage3DOES(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height) { tunisGL.tunisCopyTexSubImage3DOES(target, level, xoffset, yoffset, zoffset, x, y, width, height); }
TUNIS_FORCE_INLINE void  glCopyTextureImage1DEXT(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border) { tunisGL.tunisCopyTextureImage1DEXT(texture, target, level, internalformat, x, y, width, border); }
TUNIS_FORCE_INLINE void  glCopyTextureImage2DEXT(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border) { tunisGL.tunisCopyTextureImage2DEXT(texture, target, level, internalformat, x, y, width, height, border); }
TUNIS_FORCE_INLINE void  glCopyTextureLevelsAPPLE(GLuint destinationTexture, GLuint sourceTexture, GLint sourceBaseLevel, GLsizei sourceLevelCount) { tunisGL.tunisCopyTextureLevelsAPPLE(destinationTexture, sourceTexture, sourceBaseLevel, sourceLevelCount); }
TUNIS_FORCE_INLINE void  glCopyTextureSubImage1D(GLuint texture, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width) { tunisGL.tunisCopyTextureSubImage1D(texture, level, xoffset, x, y, width); }
TUNIS_FORCE_INLINE void  glCopyTextureSubImage1DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width) { tunisGL.tunisCopyTextureSubImage1DEXT(texture, target, level, xoffset, x, y, width); }
TUNIS_FORCE_INLINE void  glCopyTextureSubImage2D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height) { tunisGL.tunisCopyTextureSubImage2D(texture, level, xoffset, yoffset, x, y, width, height); }
TUNIS_FORCE_INLINE void  glCopyTextureSubImage2DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height) { tunisGL.tunisCopyTextureSubImage2DEXT(texture, target, level, xoffset, yoffset, x, y, width, height); }
TUNIS_FORCE_INLINE void  glCopyTextureSubImage3D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height) { tunisGL.tunisCopyTextureSubImage3D(texture, level, xoffset, yoffset, zoffset, x, y, width, height); }
TUNIS_FORCE_INLINE void  glCopyTextureSubImage3DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height) { tunisGL.tunisCopyTextureSubImage3DEXT(texture, target, level, xoffset, yoffset, zoffset, x, y, width, height); }
TUNIS_FORCE_INLINE void  glCoverFillPathInstancedNV(GLsizei numPaths, GLenum pathNameType, const void * paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat * transformValues) { tunisGL.tunisCoverFillPathInstancedNV(numPaths, pathNameType, paths, pathBase, coverMode, transformType, transformValues); }
TUNIS_FORCE_INLINE void  glCoverFillPathNV(GLuint path, GLenum coverMode) { tunisGL.tunisCoverFillPathNV(path, coverMode); }
TUNIS_FORCE_INLINE void  glCoverStrokePathInstancedNV(GLsizei numPaths, GLenum pathNameType, const void * paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat * transformValues) { tunisGL.tunisCoverStrokePathInstancedNV(numPaths, pathNameType, paths, pathBase, coverMode, transformType, transformValues); }
TUNIS_FORCE_INLINE void  glCoverStrokePathNV(GLuint path, GLenum coverMode) { tunisGL.tunisCoverStrokePathNV(path, coverMode); }
TUNIS_FORCE_INLINE void  glCoverageMaskNV(GLboolean mask) { tunisGL.tunisCoverageMaskNV(mask); }
TUNIS_FORCE_INLINE void  glCoverageModulationNV(GLenum components) { tunisGL.tunisCoverageModulationNV(components); }
TUNIS_FORCE_INLINE void  glCoverageModulationTableNV(GLsizei n, const GLfloat * v) { tunisGL.tunisCoverageModulationTableNV(n, v); }
TUNIS_FORCE_INLINE void  glCoverageOperationNV(GLenum operation) { tunisGL.tunisCoverageOperationNV(operation); }
TUNIS_FORCE_INLINE void  glCreateBuffers(GLsizei n, GLuint * buffers) { tunisGL.tunisCreateBuffers(n, buffers); }
TUNIS_FORCE_INLINE void  glCreateCommandListsNV(GLsizei n, GLuint * lists) { tunisGL.tunisCreateCommandListsNV(n, lists); }
TUNIS_FORCE_INLINE void  glCreateFramebuffers(GLsizei n, GLuint * framebuffers) { tunisGL.tunisCreateFramebuffers(n, framebuffers); }
TUNIS_FORCE_INLINE void  glCreateMemoryObjectsEXT(GLsizei n, GLuint * memoryObjects) { tunisGL.tunisCreateMemoryObjectsEXT(n, memoryObjects); }
TUNIS_FORCE_INLINE void  glCreatePerfQueryINTEL(GLuint queryId, GLuint * queryHandle) { tunisGL.tunisCreatePerfQueryINTEL(queryId, queryHandle); }
TUNIS_FORCE_INLINE GLuint glCreateProgram(void) { return tunisGL.tunisCreateProgram(); }
TUNIS_FORCE_INLINE GLhandleARB glCreateProgramObjectARB(void) { return tunisGL.tunisCreateProgramObjectARB(); }
TUNIS_FORCE_INLINE void  glCreateProgramPipelines(GLsizei n, GLuint * pipelines) { tunisGL.tunisCreateProgramPipelines(n, pipelines); }
TUNIS_FORCE_INLINE void  glCreateQueries(GLenum target, GLsizei n, GLuint * ids) { tunisGL.tunisCreateQueries(target, n, ids); }
TUNIS_FORCE_INLINE void  glCreateRenderbuffers(GLsizei n, GLuint * renderbuffers) { tunisGL.tunisCreateRenderbuffers(n, renderbuffers); }
TUNIS_FORCE_INLINE void  glCreateSamplers(GLsizei n, GLuint * samplers) { tunisGL.tunisCreateSamplers(n, samplers); }
TUNIS_FORCE_INLINE GLuint glCreateShader(GLenum type) { return tunisGL.tunisCreateShader(type); }
TUNIS_FORCE_INLINE GLhandleARB glCreateShaderObjectARB(GLenum shaderType) { return tunisGL.tunisCreateShaderObjectARB(shaderType); }
TUNIS_FORCE_INLINE GLuint glCreateShaderProgramEXT(GLenum type, const GLchar * string) { return tunisGL.tunisCreateShaderProgramEXT(type, string); }
TUNIS_FORCE_INLINE GLuint glCreateShaderProgramv(GLenum type, GLsizei count, const GLchar *const* strings) { return tunisGL.tunisCreateShaderProgramv(type, count, strings); }
TUNIS_FORCE_INLINE GLuint glCreateShaderProgramvEXT(GLenum type, GLsizei count, const GLchar ** strings) { return tunisGL.tunisCreateShaderProgramvEXT(type, count, strings); }
TUNIS_FORCE_INLINE void  glCreateStatesNV(GLsizei n, GLuint * states) { tunisGL.tunisCreateStatesNV(n, states); }
TUNIS_FORCE_INLINE GLsync glCreateSyncFromCLeventARB(struct _cl_context * context, struct _cl_event * event, GLbitfield flags) { return tunisGL.tunisCreateSyncFromCLeventARB(context, event, flags); }
TUNIS_FORCE_INLINE void  glCreateTextures(GLenum target, GLsizei n, GLuint * textures) { tunisGL.tunisCreateTextures(target, n, textures); }
TUNIS_FORCE_INLINE void  glCreateTransformFeedbacks(GLsizei n, GLuint * ids) { tunisGL.tunisCreateTransformFeedbacks(n, ids); }
TUNIS_FORCE_INLINE void  glCreateVertexArrays(GLsizei n, GLuint * arrays) { tunisGL.tunisCreateVertexArrays(n, arrays); }
TUNIS_FORCE_INLINE void  glCullFace(GLenum mode) { tunisGL.tunisCullFace(mode); }
TUNIS_FORCE_INLINE void  glCullParameterdvEXT(GLenum pname, GLdouble * params) { tunisGL.tunisCullParameterdvEXT(pname, params); }
TUNIS_FORCE_INLINE void  glCullParameterfvEXT(GLenum pname, GLfloat * params) { tunisGL.tunisCullParameterfvEXT(pname, params); }
TUNIS_FORCE_INLINE void  glCurrentPaletteMatrixARB(GLint index) { tunisGL.tunisCurrentPaletteMatrixARB(index); }
TUNIS_FORCE_INLINE void  glCurrentPaletteMatrixOES(GLuint matrixpaletteindex) { tunisGL.tunisCurrentPaletteMatrixOES(matrixpaletteindex); }
TUNIS_FORCE_INLINE void  glDebugMessageCallback(GLDEBUGPROC callback, const void * userParam) { tunisGL.tunisDebugMessageCallback(callback, userParam); }
TUNIS_FORCE_INLINE void  glDebugMessageCallbackAMD(GLDEBUGPROCAMD callback, void * userParam) { tunisGL.tunisDebugMessageCallbackAMD(callback, userParam); }
TUNIS_FORCE_INLINE void  glDebugMessageCallbackARB(GLDEBUGPROCARB callback, const void * userParam) { tunisGL.tunisDebugMessageCallbackARB(callback, userParam); }
TUNIS_FORCE_INLINE void  glDebugMessageCallbackKHR(GLDEBUGPROCKHR callback, const void * userParam) { tunisGL.tunisDebugMessageCallbackKHR(callback, userParam); }
TUNIS_FORCE_INLINE void  glDebugMessageControl(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint * ids, GLboolean enabled) { tunisGL.tunisDebugMessageControl(source, type, severity, count, ids, enabled); }
TUNIS_FORCE_INLINE void  glDebugMessageControlARB(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint * ids, GLboolean enabled) { tunisGL.tunisDebugMessageControlARB(source, type, severity, count, ids, enabled); }
TUNIS_FORCE_INLINE void  glDebugMessageControlKHR(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint * ids, GLboolean enabled) { tunisGL.tunisDebugMessageControlKHR(source, type, severity, count, ids, enabled); }
TUNIS_FORCE_INLINE void  glDebugMessageEnableAMD(GLenum category, GLenum severity, GLsizei count, const GLuint * ids, GLboolean enabled) { tunisGL.tunisDebugMessageEnableAMD(category, severity, count, ids, enabled); }
TUNIS_FORCE_INLINE void  glDebugMessageInsert(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar * buf) { tunisGL.tunisDebugMessageInsert(source, type, id, severity, length, buf); }
TUNIS_FORCE_INLINE void  glDebugMessageInsertAMD(GLenum category, GLenum severity, GLuint id, GLsizei length, const GLchar * buf) { tunisGL.tunisDebugMessageInsertAMD(category, severity, id, length, buf); }
TUNIS_FORCE_INLINE void  glDebugMessageInsertARB(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar * buf) { tunisGL.tunisDebugMessageInsertARB(source, type, id, severity, length, buf); }
TUNIS_FORCE_INLINE void  glDebugMessageInsertKHR(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar * buf) { tunisGL.tunisDebugMessageInsertKHR(source, type, id, severity, length, buf); }
TUNIS_FORCE_INLINE void  glDeformSGIX(GLbitfield mask) { tunisGL.tunisDeformSGIX(mask); }
TUNIS_FORCE_INLINE void  glDeformationMap3dSGIX(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, GLdouble w1, GLdouble w2, GLint wstride, GLint worder, const GLdouble * points) { tunisGL.tunisDeformationMap3dSGIX(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points); }
TUNIS_FORCE_INLINE void  glDeformationMap3fSGIX(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, GLfloat w1, GLfloat w2, GLint wstride, GLint worder, const GLfloat * points) { tunisGL.tunisDeformationMap3fSGIX(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points); }
TUNIS_FORCE_INLINE void  glDeleteAsyncMarkersSGIX(GLuint marker, GLsizei range) { tunisGL.tunisDeleteAsyncMarkersSGIX(marker, range); }
TUNIS_FORCE_INLINE void  glDeleteBufferRegion(GLenum region) { tunisGL.tunisDeleteBufferRegion(region); }
TUNIS_FORCE_INLINE void  glDeleteBuffers(GLsizei n, const GLuint * buffers) { tunisGL.tunisDeleteBuffers(n, buffers); }
TUNIS_FORCE_INLINE void  glDeleteBuffersARB(GLsizei n, const GLuint * buffers) { tunisGL.tunisDeleteBuffersARB(n, buffers); }
TUNIS_FORCE_INLINE void  glDeleteCommandListsNV(GLsizei n, const GLuint * lists) { tunisGL.tunisDeleteCommandListsNV(n, lists); }
TUNIS_FORCE_INLINE void  glDeleteFencesAPPLE(GLsizei n, const GLuint * fences) { tunisGL.tunisDeleteFencesAPPLE(n, fences); }
TUNIS_FORCE_INLINE void  glDeleteFencesNV(GLsizei n, const GLuint * fences) { tunisGL.tunisDeleteFencesNV(n, fences); }
TUNIS_FORCE_INLINE void  glDeleteFragmentShaderATI(GLuint id) { tunisGL.tunisDeleteFragmentShaderATI(id); }
TUNIS_FORCE_INLINE void  glDeleteFramebuffers(GLsizei n, const GLuint * framebuffers) { tunisGL.tunisDeleteFramebuffers(n, framebuffers); }
TUNIS_FORCE_INLINE void  glDeleteFramebuffersEXT(GLsizei n, const GLuint * framebuffers) { tunisGL.tunisDeleteFramebuffersEXT(n, framebuffers); }
TUNIS_FORCE_INLINE void  glDeleteFramebuffersOES(GLsizei n, const GLuint * framebuffers) { tunisGL.tunisDeleteFramebuffersOES(n, framebuffers); }
TUNIS_FORCE_INLINE void  glDeleteLists(GLuint list, GLsizei range) { tunisGL.tunisDeleteLists(list, range); }
TUNIS_FORCE_INLINE void  glDeleteMemoryObjectsEXT(GLsizei n, const GLuint * memoryObjects) { tunisGL.tunisDeleteMemoryObjectsEXT(n, memoryObjects); }
TUNIS_FORCE_INLINE void  glDeleteNamedStringARB(GLint namelen, const GLchar * name) { tunisGL.tunisDeleteNamedStringARB(namelen, name); }
TUNIS_FORCE_INLINE void  glDeleteNamesAMD(GLenum identifier, GLuint num, const GLuint * names) { tunisGL.tunisDeleteNamesAMD(identifier, num, names); }
TUNIS_FORCE_INLINE void  glDeleteObjectARB(GLhandleARB obj) { tunisGL.tunisDeleteObjectARB(obj); }
TUNIS_FORCE_INLINE void  glDeleteOcclusionQueriesNV(GLsizei n, const GLuint * ids) { tunisGL.tunisDeleteOcclusionQueriesNV(n, ids); }
TUNIS_FORCE_INLINE void  glDeletePathsNV(GLuint path, GLsizei range) { tunisGL.tunisDeletePathsNV(path, range); }
TUNIS_FORCE_INLINE void  glDeletePerfMonitorsAMD(GLsizei n, GLuint * monitors) { tunisGL.tunisDeletePerfMonitorsAMD(n, monitors); }
TUNIS_FORCE_INLINE void  glDeletePerfQueryINTEL(GLuint queryHandle) { tunisGL.tunisDeletePerfQueryINTEL(queryHandle); }
TUNIS_FORCE_INLINE void  glDeleteProgram(GLuint program) { tunisGL.tunisDeleteProgram(program); }
TUNIS_FORCE_INLINE void  glDeleteProgramPipelines(GLsizei n, const GLuint * pipelines) { tunisGL.tunisDeleteProgramPipelines(n, pipelines); }
TUNIS_FORCE_INLINE void  glDeleteProgramPipelinesEXT(GLsizei n, const GLuint * pipelines) { tunisGL.tunisDeleteProgramPipelinesEXT(n, pipelines); }
TUNIS_FORCE_INLINE void  glDeleteProgramsARB(GLsizei n, const GLuint * programs) { tunisGL.tunisDeleteProgramsARB(n, programs); }
TUNIS_FORCE_INLINE void  glDeleteProgramsNV(GLsizei n, const GLuint * programs) { tunisGL.tunisDeleteProgramsNV(n, programs); }
TUNIS_FORCE_INLINE void  glDeleteQueries(GLsizei n, const GLuint * ids) { tunisGL.tunisDeleteQueries(n, ids); }
TUNIS_FORCE_INLINE void  glDeleteQueriesARB(GLsizei n, const GLuint * ids) { tunisGL.tunisDeleteQueriesARB(n, ids); }
TUNIS_FORCE_INLINE void  glDeleteQueriesEXT(GLsizei n, const GLuint * ids) { tunisGL.tunisDeleteQueriesEXT(n, ids); }
TUNIS_FORCE_INLINE void  glDeleteQueryResourceTagNV(GLsizei n, const GLint * tagIds) { tunisGL.tunisDeleteQueryResourceTagNV(n, tagIds); }
TUNIS_FORCE_INLINE void  glDeleteRenderbuffers(GLsizei n, const GLuint * renderbuffers) { tunisGL.tunisDeleteRenderbuffers(n, renderbuffers); }
TUNIS_FORCE_INLINE void  glDeleteRenderbuffersEXT(GLsizei n, const GLuint * renderbuffers) { tunisGL.tunisDeleteRenderbuffersEXT(n, renderbuffers); }
TUNIS_FORCE_INLINE void  glDeleteRenderbuffersOES(GLsizei n, const GLuint * renderbuffers) { tunisGL.tunisDeleteRenderbuffersOES(n, renderbuffers); }
TUNIS_FORCE_INLINE void  glDeleteSamplers(GLsizei count, const GLuint * samplers) { tunisGL.tunisDeleteSamplers(count, samplers); }
TUNIS_FORCE_INLINE void  glDeleteSemaphoresEXT(GLsizei n, const GLuint * semaphores) { tunisGL.tunisDeleteSemaphoresEXT(n, semaphores); }
TUNIS_FORCE_INLINE void  glDeleteShader(GLuint shader) { tunisGL.tunisDeleteShader(shader); }
TUNIS_FORCE_INLINE void  glDeleteStatesNV(GLsizei n, const GLuint * states) { tunisGL.tunisDeleteStatesNV(n, states); }
TUNIS_FORCE_INLINE void  glDeleteSync(GLsync sync) { tunisGL.tunisDeleteSync(sync); }
TUNIS_FORCE_INLINE void  glDeleteSyncAPPLE(GLsync sync) { tunisGL.tunisDeleteSyncAPPLE(sync); }
TUNIS_FORCE_INLINE void  glDeleteTextures(GLsizei n, const GLuint * textures) { tunisGL.tunisDeleteTextures(n, textures); }
TUNIS_FORCE_INLINE void  glDeleteTexturesEXT(GLsizei n, const GLuint * textures) { tunisGL.tunisDeleteTexturesEXT(n, textures); }
TUNIS_FORCE_INLINE void  glDeleteTransformFeedbacks(GLsizei n, const GLuint * ids) { tunisGL.tunisDeleteTransformFeedbacks(n, ids); }
TUNIS_FORCE_INLINE void  glDeleteTransformFeedbacksNV(GLsizei n, const GLuint * ids) { tunisGL.tunisDeleteTransformFeedbacksNV(n, ids); }
TUNIS_FORCE_INLINE void  glDeleteVertexArrays(GLsizei n, const GLuint * arrays) { tunisGL.tunisDeleteVertexArrays(n, arrays); }
TUNIS_FORCE_INLINE void  glDeleteVertexArraysAPPLE(GLsizei n, const GLuint * arrays) { tunisGL.tunisDeleteVertexArraysAPPLE(n, arrays); }
TUNIS_FORCE_INLINE void  glDeleteVertexArraysOES(GLsizei n, const GLuint * arrays) { tunisGL.tunisDeleteVertexArraysOES(n, arrays); }
TUNIS_FORCE_INLINE void  glDeleteVertexShaderEXT(GLuint id) { tunisGL.tunisDeleteVertexShaderEXT(id); }
TUNIS_FORCE_INLINE void  glDepthBoundsEXT(GLclampd zmin, GLclampd zmax) { tunisGL.tunisDepthBoundsEXT(zmin, zmax); }
TUNIS_FORCE_INLINE void  glDepthBoundsdNV(GLdouble zmin, GLdouble zmax) { tunisGL.tunisDepthBoundsdNV(zmin, zmax); }
TUNIS_FORCE_INLINE void  glDepthFunc(GLenum func) { tunisGL.tunisDepthFunc(func); }
TUNIS_FORCE_INLINE void  glDepthMask(GLboolean flag) { tunisGL.tunisDepthMask(flag); }
TUNIS_FORCE_INLINE void  glDepthRange(GLdouble n, GLdouble f) { tunisGL.tunisDepthRange(n, f); }
TUNIS_FORCE_INLINE void  glDepthRangeArrayfvNV(GLuint first, GLsizei count, const GLfloat * v) { tunisGL.tunisDepthRangeArrayfvNV(first, count, v); }
TUNIS_FORCE_INLINE void  glDepthRangeArrayfvOES(GLuint first, GLsizei count, const GLfloat * v) { tunisGL.tunisDepthRangeArrayfvOES(first, count, v); }
TUNIS_FORCE_INLINE void  glDepthRangeArrayv(GLuint first, GLsizei count, const GLdouble * v) { tunisGL.tunisDepthRangeArrayv(first, count, v); }
TUNIS_FORCE_INLINE void  glDepthRangeIndexed(GLuint index, GLdouble n, GLdouble f) { tunisGL.tunisDepthRangeIndexed(index, n, f); }
TUNIS_FORCE_INLINE void  glDepthRangeIndexedfNV(GLuint index, GLfloat n, GLfloat f) { tunisGL.tunisDepthRangeIndexedfNV(index, n, f); }
TUNIS_FORCE_INLINE void  glDepthRangeIndexedfOES(GLuint index, GLfloat n, GLfloat f) { tunisGL.tunisDepthRangeIndexedfOES(index, n, f); }
TUNIS_FORCE_INLINE void  glDepthRangedNV(GLdouble zNear, GLdouble zFar) { tunisGL.tunisDepthRangedNV(zNear, zFar); }
TUNIS_FORCE_INLINE void  glDepthRangef(GLfloat n, GLfloat f) { tunisGL.tunisDepthRangef(n, f); }
TUNIS_FORCE_INLINE void  glDepthRangefOES(GLclampf n, GLclampf f) { tunisGL.tunisDepthRangefOES(n, f); }
TUNIS_FORCE_INLINE void  glDepthRangex(GLfixed n, GLfixed f) { tunisGL.tunisDepthRangex(n, f); }
TUNIS_FORCE_INLINE void  glDepthRangexOES(GLfixed n, GLfixed f) { tunisGL.tunisDepthRangexOES(n, f); }
TUNIS_FORCE_INLINE void  glDetachObjectARB(GLhandleARB containerObj, GLhandleARB attachedObj) { tunisGL.tunisDetachObjectARB(containerObj, attachedObj); }
TUNIS_FORCE_INLINE void  glDetachShader(GLuint program, GLuint shader) { tunisGL.tunisDetachShader(program, shader); }
TUNIS_FORCE_INLINE void  glDetailTexFuncSGIS(GLenum target, GLsizei n, const GLfloat * points) { tunisGL.tunisDetailTexFuncSGIS(target, n, points); }
TUNIS_FORCE_INLINE void  glDisable(GLenum cap) { tunisGL.tunisDisable(cap); }
TUNIS_FORCE_INLINE void  glDisableClientState(GLenum array) { tunisGL.tunisDisableClientState(array); }
TUNIS_FORCE_INLINE void  glDisableClientStateIndexedEXT(GLenum array, GLuint index) { tunisGL.tunisDisableClientStateIndexedEXT(array, index); }
TUNIS_FORCE_INLINE void  glDisableClientStateiEXT(GLenum array, GLuint index) { tunisGL.tunisDisableClientStateiEXT(array, index); }
TUNIS_FORCE_INLINE void  glDisableDriverControlQCOM(GLuint driverControl) { tunisGL.tunisDisableDriverControlQCOM(driverControl); }
TUNIS_FORCE_INLINE void  glDisableIndexedEXT(GLenum target, GLuint index) { tunisGL.tunisDisableIndexedEXT(target, index); }
TUNIS_FORCE_INLINE void  glDisableVariantClientStateEXT(GLuint id) { tunisGL.tunisDisableVariantClientStateEXT(id); }
TUNIS_FORCE_INLINE void  glDisableVertexArrayAttrib(GLuint vaobj, GLuint index) { tunisGL.tunisDisableVertexArrayAttrib(vaobj, index); }
TUNIS_FORCE_INLINE void  glDisableVertexArrayAttribEXT(GLuint vaobj, GLuint index) { tunisGL.tunisDisableVertexArrayAttribEXT(vaobj, index); }
TUNIS_FORCE_INLINE void  glDisableVertexArrayEXT(GLuint vaobj, GLenum array) { tunisGL.tunisDisableVertexArrayEXT(vaobj, array); }
TUNIS_FORCE_INLINE void  glDisableVertexAttribAPPLE(GLuint index, GLenum pname) { tunisGL.tunisDisableVertexAttribAPPLE(index, pname); }
TUNIS_FORCE_INLINE void  glDisableVertexAttribArray(GLuint index) { tunisGL.tunisDisableVertexAttribArray(index); }
TUNIS_FORCE_INLINE void  glDisableVertexAttribArrayARB(GLuint index) { tunisGL.tunisDisableVertexAttribArrayARB(index); }
TUNIS_FORCE_INLINE void  glDisablei(GLenum target, GLuint index) { tunisGL.tunisDisablei(target, index); }
TUNIS_FORCE_INLINE void  glDisableiEXT(GLenum target, GLuint index) { tunisGL.tunisDisableiEXT(target, index); }
TUNIS_FORCE_INLINE void  glDisableiNV(GLenum target, GLuint index) { tunisGL.tunisDisableiNV(target, index); }
TUNIS_FORCE_INLINE void  glDisableiOES(GLenum target, GLuint index) { tunisGL.tunisDisableiOES(target, index); }
TUNIS_FORCE_INLINE void  glDiscardFramebufferEXT(GLenum target, GLsizei numAttachments, const GLenum * attachments) { tunisGL.tunisDiscardFramebufferEXT(target, numAttachments, attachments); }
TUNIS_FORCE_INLINE void  glDispatchCompute(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z) { tunisGL.tunisDispatchCompute(num_groups_x, num_groups_y, num_groups_z); }
TUNIS_FORCE_INLINE void  glDispatchComputeGroupSizeARB(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z, GLuint group_size_x, GLuint group_size_y, GLuint group_size_z) { tunisGL.tunisDispatchComputeGroupSizeARB(num_groups_x, num_groups_y, num_groups_z, group_size_x, group_size_y, group_size_z); }
TUNIS_FORCE_INLINE void  glDispatchComputeIndirect(GLintptr indirect) { tunisGL.tunisDispatchComputeIndirect(indirect); }
TUNIS_FORCE_INLINE void  glDrawArrays(GLenum mode, GLint first, GLsizei count) { tunisGL.tunisDrawArrays(mode, first, count); }
TUNIS_FORCE_INLINE void  glDrawArraysEXT(GLenum mode, GLint first, GLsizei count) { tunisGL.tunisDrawArraysEXT(mode, first, count); }
TUNIS_FORCE_INLINE void  glDrawArraysIndirect(GLenum mode, const void * indirect) { tunisGL.tunisDrawArraysIndirect(mode, indirect); }
TUNIS_FORCE_INLINE void  glDrawArraysInstanced(GLenum mode, GLint first, GLsizei count, GLsizei instancecount) { tunisGL.tunisDrawArraysInstanced(mode, first, count, instancecount); }
TUNIS_FORCE_INLINE void  glDrawArraysInstancedANGLE(GLenum mode, GLint first, GLsizei count, GLsizei primcount) { tunisGL.tunisDrawArraysInstancedANGLE(mode, first, count, primcount); }
TUNIS_FORCE_INLINE void  glDrawArraysInstancedARB(GLenum mode, GLint first, GLsizei count, GLsizei primcount) { tunisGL.tunisDrawArraysInstancedARB(mode, first, count, primcount); }
TUNIS_FORCE_INLINE void  glDrawArraysInstancedBaseInstance(GLenum mode, GLint first, GLsizei count, GLsizei instancecount, GLuint baseinstance) { tunisGL.tunisDrawArraysInstancedBaseInstance(mode, first, count, instancecount, baseinstance); }
TUNIS_FORCE_INLINE void  glDrawArraysInstancedBaseInstanceEXT(GLenum mode, GLint first, GLsizei count, GLsizei instancecount, GLuint baseinstance) { tunisGL.tunisDrawArraysInstancedBaseInstanceEXT(mode, first, count, instancecount, baseinstance); }
TUNIS_FORCE_INLINE void  glDrawArraysInstancedEXT(GLenum mode, GLint start, GLsizei count, GLsizei primcount) { tunisGL.tunisDrawArraysInstancedEXT(mode, start, count, primcount); }
TUNIS_FORCE_INLINE void  glDrawArraysInstancedNV(GLenum mode, GLint first, GLsizei count, GLsizei primcount) { tunisGL.tunisDrawArraysInstancedNV(mode, first, count, primcount); }
TUNIS_FORCE_INLINE void  glDrawBuffer(GLenum buf) { tunisGL.tunisDrawBuffer(buf); }
TUNIS_FORCE_INLINE void  glDrawBufferRegion(GLuint region, GLint x, GLint y, GLsizei width, GLsizei height, GLint xDest, GLint yDest) { tunisGL.tunisDrawBufferRegion(region, x, y, width, height, xDest, yDest); }
TUNIS_FORCE_INLINE void  glDrawBuffers(GLsizei n, const GLenum * bufs) { tunisGL.tunisDrawBuffers(n, bufs); }
TUNIS_FORCE_INLINE void  glDrawBuffersARB(GLsizei n, const GLenum * bufs) { tunisGL.tunisDrawBuffersARB(n, bufs); }
TUNIS_FORCE_INLINE void  glDrawBuffersATI(GLsizei n, const GLenum * bufs) { tunisGL.tunisDrawBuffersATI(n, bufs); }
TUNIS_FORCE_INLINE void  glDrawBuffersEXT(GLsizei n, const GLenum * bufs) { tunisGL.tunisDrawBuffersEXT(n, bufs); }
TUNIS_FORCE_INLINE void  glDrawBuffersIndexedEXT(GLint n, const GLenum * location, const GLint * indices) { tunisGL.tunisDrawBuffersIndexedEXT(n, location, indices); }
TUNIS_FORCE_INLINE void  glDrawBuffersNV(GLsizei n, const GLenum * bufs) { tunisGL.tunisDrawBuffersNV(n, bufs); }
TUNIS_FORCE_INLINE void  glDrawCommandsAddressNV(GLenum primitiveMode, const GLuint64 * indirects, const GLsizei * sizes, GLuint count) { tunisGL.tunisDrawCommandsAddressNV(primitiveMode, indirects, sizes, count); }
TUNIS_FORCE_INLINE void  glDrawCommandsNV(GLenum primitiveMode, GLuint buffer, const GLintptr * indirects, const GLsizei * sizes, GLuint count) { tunisGL.tunisDrawCommandsNV(primitiveMode, buffer, indirects, sizes, count); }
TUNIS_FORCE_INLINE void  glDrawCommandsStatesAddressNV(const GLuint64 * indirects, const GLsizei * sizes, const GLuint * states, const GLuint * fbos, GLuint count) { tunisGL.tunisDrawCommandsStatesAddressNV(indirects, sizes, states, fbos, count); }
TUNIS_FORCE_INLINE void  glDrawCommandsStatesNV(GLuint buffer, const GLintptr * indirects, const GLsizei * sizes, const GLuint * states, const GLuint * fbos, GLuint count) { tunisGL.tunisDrawCommandsStatesNV(buffer, indirects, sizes, states, fbos, count); }
TUNIS_FORCE_INLINE void  glDrawElementArrayAPPLE(GLenum mode, GLint first, GLsizei count) { tunisGL.tunisDrawElementArrayAPPLE(mode, first, count); }
TUNIS_FORCE_INLINE void  glDrawElementArrayATI(GLenum mode, GLsizei count) { tunisGL.tunisDrawElementArrayATI(mode, count); }
TUNIS_FORCE_INLINE void  glDrawElements(GLenum mode, GLsizei count, GLenum type, const void * indices) { tunisGL.tunisDrawElements(mode, count, type, indices); }
TUNIS_FORCE_INLINE void  glDrawElementsBaseVertex(GLenum mode, GLsizei count, GLenum type, const void * indices, GLint basevertex) { tunisGL.tunisDrawElementsBaseVertex(mode, count, type, indices, basevertex); }
TUNIS_FORCE_INLINE void  glDrawElementsBaseVertexEXT(GLenum mode, GLsizei count, GLenum type, const void * indices, GLint basevertex) { tunisGL.tunisDrawElementsBaseVertexEXT(mode, count, type, indices, basevertex); }
TUNIS_FORCE_INLINE void  glDrawElementsBaseVertexOES(GLenum mode, GLsizei count, GLenum type, const void * indices, GLint basevertex) { tunisGL.tunisDrawElementsBaseVertexOES(mode, count, type, indices, basevertex); }
TUNIS_FORCE_INLINE void  glDrawElementsIndirect(GLenum mode, GLenum type, const void * indirect) { tunisGL.tunisDrawElementsIndirect(mode, type, indirect); }
TUNIS_FORCE_INLINE void  glDrawElementsInstanced(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount) { tunisGL.tunisDrawElementsInstanced(mode, count, type, indices, instancecount); }
TUNIS_FORCE_INLINE void  glDrawElementsInstancedANGLE(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei primcount) { tunisGL.tunisDrawElementsInstancedANGLE(mode, count, type, indices, primcount); }
TUNIS_FORCE_INLINE void  glDrawElementsInstancedARB(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei primcount) { tunisGL.tunisDrawElementsInstancedARB(mode, count, type, indices, primcount); }
TUNIS_FORCE_INLINE void  glDrawElementsInstancedBaseInstance(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount, GLuint baseinstance) { tunisGL.tunisDrawElementsInstancedBaseInstance(mode, count, type, indices, instancecount, baseinstance); }
TUNIS_FORCE_INLINE void  glDrawElementsInstancedBaseInstanceEXT(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount, GLuint baseinstance) { tunisGL.tunisDrawElementsInstancedBaseInstanceEXT(mode, count, type, indices, instancecount, baseinstance); }
TUNIS_FORCE_INLINE void  glDrawElementsInstancedBaseVertex(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount, GLint basevertex) { tunisGL.tunisDrawElementsInstancedBaseVertex(mode, count, type, indices, instancecount, basevertex); }
TUNIS_FORCE_INLINE void  glDrawElementsInstancedBaseVertexBaseInstance(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount, GLint basevertex, GLuint baseinstance) { tunisGL.tunisDrawElementsInstancedBaseVertexBaseInstance(mode, count, type, indices, instancecount, basevertex, baseinstance); }
TUNIS_FORCE_INLINE void  glDrawElementsInstancedBaseVertexBaseInstanceEXT(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount, GLint basevertex, GLuint baseinstance) { tunisGL.tunisDrawElementsInstancedBaseVertexBaseInstanceEXT(mode, count, type, indices, instancecount, basevertex, baseinstance); }
TUNIS_FORCE_INLINE void  glDrawElementsInstancedBaseVertexEXT(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount, GLint basevertex) { tunisGL.tunisDrawElementsInstancedBaseVertexEXT(mode, count, type, indices, instancecount, basevertex); }
TUNIS_FORCE_INLINE void  glDrawElementsInstancedBaseVertexOES(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount, GLint basevertex) { tunisGL.tunisDrawElementsInstancedBaseVertexOES(mode, count, type, indices, instancecount, basevertex); }
TUNIS_FORCE_INLINE void  glDrawElementsInstancedEXT(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei primcount) { tunisGL.tunisDrawElementsInstancedEXT(mode, count, type, indices, primcount); }
TUNIS_FORCE_INLINE void  glDrawElementsInstancedNV(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei primcount) { tunisGL.tunisDrawElementsInstancedNV(mode, count, type, indices, primcount); }
TUNIS_FORCE_INLINE void  glDrawMeshArraysSUN(GLenum mode, GLint first, GLsizei count, GLsizei width) { tunisGL.tunisDrawMeshArraysSUN(mode, first, count, width); }
TUNIS_FORCE_INLINE void  glDrawPixels(GLsizei width, GLsizei height, GLenum format, GLenum type, const void * pixels) { tunisGL.tunisDrawPixels(width, height, format, type, pixels); }
TUNIS_FORCE_INLINE void  glDrawRangeElementArrayAPPLE(GLenum mode, GLuint start, GLuint end, GLint first, GLsizei count) { tunisGL.tunisDrawRangeElementArrayAPPLE(mode, start, end, first, count); }
TUNIS_FORCE_INLINE void  glDrawRangeElementArrayATI(GLenum mode, GLuint start, GLuint end, GLsizei count) { tunisGL.tunisDrawRangeElementArrayATI(mode, start, end, count); }
TUNIS_FORCE_INLINE void  glDrawRangeElements(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void * indices) { tunisGL.tunisDrawRangeElements(mode, start, end, count, type, indices); }
TUNIS_FORCE_INLINE void  glDrawRangeElementsBaseVertex(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void * indices, GLint basevertex) { tunisGL.tunisDrawRangeElementsBaseVertex(mode, start, end, count, type, indices, basevertex); }
TUNIS_FORCE_INLINE void  glDrawRangeElementsBaseVertexEXT(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void * indices, GLint basevertex) { tunisGL.tunisDrawRangeElementsBaseVertexEXT(mode, start, end, count, type, indices, basevertex); }
TUNIS_FORCE_INLINE void  glDrawRangeElementsBaseVertexOES(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void * indices, GLint basevertex) { tunisGL.tunisDrawRangeElementsBaseVertexOES(mode, start, end, count, type, indices, basevertex); }
TUNIS_FORCE_INLINE void  glDrawRangeElementsEXT(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void * indices) { tunisGL.tunisDrawRangeElementsEXT(mode, start, end, count, type, indices); }
TUNIS_FORCE_INLINE void  glDrawTexfOES(GLfloat x, GLfloat y, GLfloat z, GLfloat width, GLfloat height) { tunisGL.tunisDrawTexfOES(x, y, z, width, height); }
TUNIS_FORCE_INLINE void  glDrawTexfvOES(const GLfloat * coords) { tunisGL.tunisDrawTexfvOES(coords); }
TUNIS_FORCE_INLINE void  glDrawTexiOES(GLint x, GLint y, GLint z, GLint width, GLint height) { tunisGL.tunisDrawTexiOES(x, y, z, width, height); }
TUNIS_FORCE_INLINE void  glDrawTexivOES(const GLint * coords) { tunisGL.tunisDrawTexivOES(coords); }
TUNIS_FORCE_INLINE void  glDrawTexsOES(GLshort x, GLshort y, GLshort z, GLshort width, GLshort height) { tunisGL.tunisDrawTexsOES(x, y, z, width, height); }
TUNIS_FORCE_INLINE void  glDrawTexsvOES(const GLshort * coords) { tunisGL.tunisDrawTexsvOES(coords); }
TUNIS_FORCE_INLINE void  glDrawTextureNV(GLuint texture, GLuint sampler, GLfloat x0, GLfloat y0, GLfloat x1, GLfloat y1, GLfloat z, GLfloat s0, GLfloat t0, GLfloat s1, GLfloat t1) { tunisGL.tunisDrawTextureNV(texture, sampler, x0, y0, x1, y1, z, s0, t0, s1, t1); }
TUNIS_FORCE_INLINE void  glDrawTexxOES(GLfixed x, GLfixed y, GLfixed z, GLfixed width, GLfixed height) { tunisGL.tunisDrawTexxOES(x, y, z, width, height); }
TUNIS_FORCE_INLINE void  glDrawTexxvOES(const GLfixed * coords) { tunisGL.tunisDrawTexxvOES(coords); }
TUNIS_FORCE_INLINE void  glDrawTransformFeedback(GLenum mode, GLuint id) { tunisGL.tunisDrawTransformFeedback(mode, id); }
TUNIS_FORCE_INLINE void  glDrawTransformFeedbackEXT(GLenum mode, GLuint id) { tunisGL.tunisDrawTransformFeedbackEXT(mode, id); }
TUNIS_FORCE_INLINE void  glDrawTransformFeedbackInstanced(GLenum mode, GLuint id, GLsizei instancecount) { tunisGL.tunisDrawTransformFeedbackInstanced(mode, id, instancecount); }
TUNIS_FORCE_INLINE void  glDrawTransformFeedbackInstancedEXT(GLenum mode, GLuint id, GLsizei instancecount) { tunisGL.tunisDrawTransformFeedbackInstancedEXT(mode, id, instancecount); }
TUNIS_FORCE_INLINE void  glDrawTransformFeedbackNV(GLenum mode, GLuint id) { tunisGL.tunisDrawTransformFeedbackNV(mode, id); }
TUNIS_FORCE_INLINE void  glDrawTransformFeedbackStream(GLenum mode, GLuint id, GLuint stream) { tunisGL.tunisDrawTransformFeedbackStream(mode, id, stream); }
TUNIS_FORCE_INLINE void  glDrawTransformFeedbackStreamInstanced(GLenum mode, GLuint id, GLuint stream, GLsizei instancecount) { tunisGL.tunisDrawTransformFeedbackStreamInstanced(mode, id, stream, instancecount); }
TUNIS_FORCE_INLINE void  glDrawVkImageNV(GLuint64 vkImage, GLuint sampler, GLfloat x0, GLfloat y0, GLfloat x1, GLfloat y1, GLfloat z, GLfloat s0, GLfloat t0, GLfloat s1, GLfloat t1) { tunisGL.tunisDrawVkImageNV(vkImage, sampler, x0, y0, x1, y1, z, s0, t0, s1, t1); }
TUNIS_FORCE_INLINE void  glEGLImageTargetRenderbufferStorageOES(GLenum target, GLeglImageOES image) { tunisGL.tunisEGLImageTargetRenderbufferStorageOES(target, image); }
TUNIS_FORCE_INLINE void  glEGLImageTargetTexStorageEXT(GLenum target, GLeglImageOES image, const GLint*  attrib_list) { tunisGL.tunisEGLImageTargetTexStorageEXT(target, image, attrib_list); }
TUNIS_FORCE_INLINE void  glEGLImageTargetTexture2DOES(GLenum target, GLeglImageOES image) { tunisGL.tunisEGLImageTargetTexture2DOES(target, image); }
TUNIS_FORCE_INLINE void  glEGLImageTargetTextureStorageEXT(GLuint texture, GLeglImageOES image, const GLint*  attrib_list) { tunisGL.tunisEGLImageTargetTextureStorageEXT(texture, image, attrib_list); }
TUNIS_FORCE_INLINE void  glEdgeFlag(GLboolean flag) { tunisGL.tunisEdgeFlag(flag); }
TUNIS_FORCE_INLINE void  glEdgeFlagFormatNV(GLsizei stride) { tunisGL.tunisEdgeFlagFormatNV(stride); }
TUNIS_FORCE_INLINE void  glEdgeFlagPointer(GLsizei stride, const void * pointer) { tunisGL.tunisEdgeFlagPointer(stride, pointer); }
TUNIS_FORCE_INLINE void  glEdgeFlagPointerEXT(GLsizei stride, GLsizei count, const GLboolean * pointer) { tunisGL.tunisEdgeFlagPointerEXT(stride, count, pointer); }
TUNIS_FORCE_INLINE void  glEdgeFlagPointerListIBM(GLint stride, const GLboolean ** pointer, GLint ptrstride) { tunisGL.tunisEdgeFlagPointerListIBM(stride, pointer, ptrstride); }
TUNIS_FORCE_INLINE void  glEdgeFlagv(const GLboolean * flag) { tunisGL.tunisEdgeFlagv(flag); }
TUNIS_FORCE_INLINE void  glElementPointerAPPLE(GLenum type, const void * pointer) { tunisGL.tunisElementPointerAPPLE(type, pointer); }
TUNIS_FORCE_INLINE void  glElementPointerATI(GLenum type, const void * pointer) { tunisGL.tunisElementPointerATI(type, pointer); }
TUNIS_FORCE_INLINE void  glEnable(GLenum cap) { tunisGL.tunisEnable(cap); }
TUNIS_FORCE_INLINE void  glEnableClientState(GLenum array) { tunisGL.tunisEnableClientState(array); }
TUNIS_FORCE_INLINE void  glEnableClientStateIndexedEXT(GLenum array, GLuint index) { tunisGL.tunisEnableClientStateIndexedEXT(array, index); }
TUNIS_FORCE_INLINE void  glEnableClientStateiEXT(GLenum array, GLuint index) { tunisGL.tunisEnableClientStateiEXT(array, index); }
TUNIS_FORCE_INLINE void  glEnableDriverControlQCOM(GLuint driverControl) { tunisGL.tunisEnableDriverControlQCOM(driverControl); }
TUNIS_FORCE_INLINE void  glEnableIndexedEXT(GLenum target, GLuint index) { tunisGL.tunisEnableIndexedEXT(target, index); }
TUNIS_FORCE_INLINE void  glEnableVariantClientStateEXT(GLuint id) { tunisGL.tunisEnableVariantClientStateEXT(id); }
TUNIS_FORCE_INLINE void  glEnableVertexArrayAttrib(GLuint vaobj, GLuint index) { tunisGL.tunisEnableVertexArrayAttrib(vaobj, index); }
TUNIS_FORCE_INLINE void  glEnableVertexArrayAttribEXT(GLuint vaobj, GLuint index) { tunisGL.tunisEnableVertexArrayAttribEXT(vaobj, index); }
TUNIS_FORCE_INLINE void  glEnableVertexArrayEXT(GLuint vaobj, GLenum array) { tunisGL.tunisEnableVertexArrayEXT(vaobj, array); }
TUNIS_FORCE_INLINE void  glEnableVertexAttribAPPLE(GLuint index, GLenum pname) { tunisGL.tunisEnableVertexAttribAPPLE(index, pname); }
TUNIS_FORCE_INLINE void  glEnableVertexAttribArray(GLuint index) { tunisGL.tunisEnableVertexAttribArray(index); }
TUNIS_FORCE_INLINE void  glEnableVertexAttribArrayARB(GLuint index) { tunisGL.tunisEnableVertexAttribArrayARB(index); }
TUNIS_FORCE_INLINE void  glEnablei(GLenum target, GLuint index) { tunisGL.tunisEnablei(target, index); }
TUNIS_FORCE_INLINE void  glEnableiEXT(GLenum target, GLuint index) { tunisGL.tunisEnableiEXT(target, index); }
TUNIS_FORCE_INLINE void  glEnableiNV(GLenum target, GLuint index) { tunisGL.tunisEnableiNV(target, index); }
TUNIS_FORCE_INLINE void  glEnableiOES(GLenum target, GLuint index) { tunisGL.tunisEnableiOES(target, index); }
TUNIS_FORCE_INLINE void  glEnd(void) { tunisGL.tunisEnd(); }
TUNIS_FORCE_INLINE void  glEndConditionalRender(void) { tunisGL.tunisEndConditionalRender(); }
TUNIS_FORCE_INLINE void  glEndConditionalRenderNV(void) { tunisGL.tunisEndConditionalRenderNV(); }
TUNIS_FORCE_INLINE void  glEndConditionalRenderNVX(void) { tunisGL.tunisEndConditionalRenderNVX(); }
TUNIS_FORCE_INLINE void  glEndFragmentShaderATI(void) { tunisGL.tunisEndFragmentShaderATI(); }
TUNIS_FORCE_INLINE void  glEndList(void) { tunisGL.tunisEndList(); }
TUNIS_FORCE_INLINE void  glEndOcclusionQueryNV(void) { tunisGL.tunisEndOcclusionQueryNV(); }
TUNIS_FORCE_INLINE void  glEndPerfMonitorAMD(GLuint monitor) { tunisGL.tunisEndPerfMonitorAMD(monitor); }
TUNIS_FORCE_INLINE void  glEndPerfQueryINTEL(GLuint queryHandle) { tunisGL.tunisEndPerfQueryINTEL(queryHandle); }
TUNIS_FORCE_INLINE void  glEndQuery(GLenum target) { tunisGL.tunisEndQuery(target); }
TUNIS_FORCE_INLINE void  glEndQueryARB(GLenum target) { tunisGL.tunisEndQueryARB(target); }
TUNIS_FORCE_INLINE void  glEndQueryEXT(GLenum target) { tunisGL.tunisEndQueryEXT(target); }
TUNIS_FORCE_INLINE void  glEndQueryIndexed(GLenum target, GLuint index) { tunisGL.tunisEndQueryIndexed(target, index); }
TUNIS_FORCE_INLINE void  glEndTilingQCOM(GLbitfield preserveMask) { tunisGL.tunisEndTilingQCOM(preserveMask); }
TUNIS_FORCE_INLINE void  glEndTransformFeedback(void) { tunisGL.tunisEndTransformFeedback(); }
TUNIS_FORCE_INLINE void  glEndTransformFeedbackEXT(void) { tunisGL.tunisEndTransformFeedbackEXT(); }
TUNIS_FORCE_INLINE void  glEndTransformFeedbackNV(void) { tunisGL.tunisEndTransformFeedbackNV(); }
TUNIS_FORCE_INLINE void  glEndVertexShaderEXT(void) { tunisGL.tunisEndVertexShaderEXT(); }
TUNIS_FORCE_INLINE void  glEndVideoCaptureNV(GLuint video_capture_slot) { tunisGL.tunisEndVideoCaptureNV(video_capture_slot); }
TUNIS_FORCE_INLINE void  glEvalCoord1d(GLdouble u) { tunisGL.tunisEvalCoord1d(u); }
TUNIS_FORCE_INLINE void  glEvalCoord1dv(const GLdouble * u) { tunisGL.tunisEvalCoord1dv(u); }
TUNIS_FORCE_INLINE void  glEvalCoord1f(GLfloat u) { tunisGL.tunisEvalCoord1f(u); }
TUNIS_FORCE_INLINE void  glEvalCoord1fv(const GLfloat * u) { tunisGL.tunisEvalCoord1fv(u); }
TUNIS_FORCE_INLINE void  glEvalCoord1xOES(GLfixed u) { tunisGL.tunisEvalCoord1xOES(u); }
TUNIS_FORCE_INLINE void  glEvalCoord1xvOES(const GLfixed * coords) { tunisGL.tunisEvalCoord1xvOES(coords); }
TUNIS_FORCE_INLINE void  glEvalCoord2d(GLdouble u, GLdouble v) { tunisGL.tunisEvalCoord2d(u, v); }
TUNIS_FORCE_INLINE void  glEvalCoord2dv(const GLdouble * u) { tunisGL.tunisEvalCoord2dv(u); }
TUNIS_FORCE_INLINE void  glEvalCoord2f(GLfloat u, GLfloat v) { tunisGL.tunisEvalCoord2f(u, v); }
TUNIS_FORCE_INLINE void  glEvalCoord2fv(const GLfloat * u) { tunisGL.tunisEvalCoord2fv(u); }
TUNIS_FORCE_INLINE void  glEvalCoord2xOES(GLfixed u, GLfixed v) { tunisGL.tunisEvalCoord2xOES(u, v); }
TUNIS_FORCE_INLINE void  glEvalCoord2xvOES(const GLfixed * coords) { tunisGL.tunisEvalCoord2xvOES(coords); }
TUNIS_FORCE_INLINE void  glEvalMapsNV(GLenum target, GLenum mode) { tunisGL.tunisEvalMapsNV(target, mode); }
TUNIS_FORCE_INLINE void  glEvalMesh1(GLenum mode, GLint i1, GLint i2) { tunisGL.tunisEvalMesh1(mode, i1, i2); }
TUNIS_FORCE_INLINE void  glEvalMesh2(GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2) { tunisGL.tunisEvalMesh2(mode, i1, i2, j1, j2); }
TUNIS_FORCE_INLINE void  glEvalPoint1(GLint i) { tunisGL.tunisEvalPoint1(i); }
TUNIS_FORCE_INLINE void  glEvalPoint2(GLint i, GLint j) { tunisGL.tunisEvalPoint2(i, j); }
TUNIS_FORCE_INLINE void  glEvaluateDepthValuesARB(void) { tunisGL.tunisEvaluateDepthValuesARB(); }
TUNIS_FORCE_INLINE void  glExecuteProgramNV(GLenum target, GLuint id, const GLfloat * params) { tunisGL.tunisExecuteProgramNV(target, id, params); }
TUNIS_FORCE_INLINE void  glExtGetBufferPointervQCOM(GLenum target, void ** params) { tunisGL.tunisExtGetBufferPointervQCOM(target, params); }
TUNIS_FORCE_INLINE void  glExtGetBuffersQCOM(GLuint * buffers, GLint maxBuffers, GLint * numBuffers) { tunisGL.tunisExtGetBuffersQCOM(buffers, maxBuffers, numBuffers); }
TUNIS_FORCE_INLINE void  glExtGetFramebuffersQCOM(GLuint * framebuffers, GLint maxFramebuffers, GLint * numFramebuffers) { tunisGL.tunisExtGetFramebuffersQCOM(framebuffers, maxFramebuffers, numFramebuffers); }
TUNIS_FORCE_INLINE void  glExtGetProgramBinarySourceQCOM(GLuint program, GLenum shadertype, GLchar * source, GLint * length) { tunisGL.tunisExtGetProgramBinarySourceQCOM(program, shadertype, source, length); }
TUNIS_FORCE_INLINE void  glExtGetProgramsQCOM(GLuint * programs, GLint maxPrograms, GLint * numPrograms) { tunisGL.tunisExtGetProgramsQCOM(programs, maxPrograms, numPrograms); }
TUNIS_FORCE_INLINE void  glExtGetRenderbuffersQCOM(GLuint * renderbuffers, GLint maxRenderbuffers, GLint * numRenderbuffers) { tunisGL.tunisExtGetRenderbuffersQCOM(renderbuffers, maxRenderbuffers, numRenderbuffers); }
TUNIS_FORCE_INLINE void  glExtGetShadersQCOM(GLuint * shaders, GLint maxShaders, GLint * numShaders) { tunisGL.tunisExtGetShadersQCOM(shaders, maxShaders, numShaders); }
TUNIS_FORCE_INLINE void  glExtGetTexLevelParameterivQCOM(GLuint texture, GLenum face, GLint level, GLenum pname, GLint * params) { tunisGL.tunisExtGetTexLevelParameterivQCOM(texture, face, level, pname, params); }
TUNIS_FORCE_INLINE void  glExtGetTexSubImageQCOM(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, void * texels) { tunisGL.tunisExtGetTexSubImageQCOM(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, texels); }
TUNIS_FORCE_INLINE void  glExtGetTexturesQCOM(GLuint * textures, GLint maxTextures, GLint * numTextures) { tunisGL.tunisExtGetTexturesQCOM(textures, maxTextures, numTextures); }
TUNIS_FORCE_INLINE GLboolean glExtIsProgramBinaryQCOM(GLuint program) { return tunisGL.tunisExtIsProgramBinaryQCOM(program); }
TUNIS_FORCE_INLINE void  glExtTexObjectStateOverrideiQCOM(GLenum target, GLenum pname, GLint param) { tunisGL.tunisExtTexObjectStateOverrideiQCOM(target, pname, param); }
TUNIS_FORCE_INLINE void  glExtractComponentEXT(GLuint res, GLuint src, GLuint num) { tunisGL.tunisExtractComponentEXT(res, src, num); }
TUNIS_FORCE_INLINE void  glFeedbackBuffer(GLsizei size, GLenum type, GLfloat * buffer) { tunisGL.tunisFeedbackBuffer(size, type, buffer); }
TUNIS_FORCE_INLINE void  glFeedbackBufferxOES(GLsizei n, GLenum type, const GLfixed * buffer) { tunisGL.tunisFeedbackBufferxOES(n, type, buffer); }
TUNIS_FORCE_INLINE GLsync glFenceSync(GLenum condition, GLbitfield flags) { return tunisGL.tunisFenceSync(condition, flags); }
TUNIS_FORCE_INLINE GLsync glFenceSyncAPPLE(GLenum condition, GLbitfield flags) { return tunisGL.tunisFenceSyncAPPLE(condition, flags); }
TUNIS_FORCE_INLINE void  glFinalCombinerInputNV(GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage) { tunisGL.tunisFinalCombinerInputNV(variable, input, mapping, componentUsage); }
TUNIS_FORCE_INLINE void  glFinish(void) { tunisGL.tunisFinish(); }
TUNIS_FORCE_INLINE GLint glFinishAsyncSGIX(GLuint * markerp) { return tunisGL.tunisFinishAsyncSGIX(markerp); }
TUNIS_FORCE_INLINE void  glFinishFenceAPPLE(GLuint fence) { tunisGL.tunisFinishFenceAPPLE(fence); }
TUNIS_FORCE_INLINE void  glFinishFenceNV(GLuint fence) { tunisGL.tunisFinishFenceNV(fence); }
TUNIS_FORCE_INLINE void  glFinishObjectAPPLE(GLenum object, GLint name) { tunisGL.tunisFinishObjectAPPLE(object, name); }
TUNIS_FORCE_INLINE void  glFinishTextureSUNX(void) { tunisGL.tunisFinishTextureSUNX(); }
TUNIS_FORCE_INLINE void  glFlush(void) { tunisGL.tunisFlush(); }
TUNIS_FORCE_INLINE void  glFlushMappedBufferRange(GLenum target, GLintptr offset, GLsizeiptr length) { tunisGL.tunisFlushMappedBufferRange(target, offset, length); }
TUNIS_FORCE_INLINE void  glFlushMappedBufferRangeAPPLE(GLenum target, GLintptr offset, GLsizeiptr size) { tunisGL.tunisFlushMappedBufferRangeAPPLE(target, offset, size); }
TUNIS_FORCE_INLINE void  glFlushMappedBufferRangeEXT(GLenum target, GLintptr offset, GLsizeiptr length) { tunisGL.tunisFlushMappedBufferRangeEXT(target, offset, length); }
TUNIS_FORCE_INLINE void  glFlushMappedNamedBufferRange(GLuint buffer, GLintptr offset, GLsizeiptr length) { tunisGL.tunisFlushMappedNamedBufferRange(buffer, offset, length); }
TUNIS_FORCE_INLINE void  glFlushMappedNamedBufferRangeEXT(GLuint buffer, GLintptr offset, GLsizeiptr length) { tunisGL.tunisFlushMappedNamedBufferRangeEXT(buffer, offset, length); }
TUNIS_FORCE_INLINE void  glFlushPixelDataRangeNV(GLenum target) { tunisGL.tunisFlushPixelDataRangeNV(target); }
TUNIS_FORCE_INLINE void  glFlushRasterSGIX(void) { tunisGL.tunisFlushRasterSGIX(); }
TUNIS_FORCE_INLINE void  glFlushStaticDataIBM(GLenum target) { tunisGL.tunisFlushStaticDataIBM(target); }
TUNIS_FORCE_INLINE void  glFlushVertexArrayRangeAPPLE(GLsizei length, void * pointer) { tunisGL.tunisFlushVertexArrayRangeAPPLE(length, pointer); }
TUNIS_FORCE_INLINE void  glFlushVertexArrayRangeNV(void) { tunisGL.tunisFlushVertexArrayRangeNV(); }
TUNIS_FORCE_INLINE void  glFogCoordFormatNV(GLenum type, GLsizei stride) { tunisGL.tunisFogCoordFormatNV(type, stride); }
TUNIS_FORCE_INLINE void  glFogCoordPointer(GLenum type, GLsizei stride, const void * pointer) { tunisGL.tunisFogCoordPointer(type, stride, pointer); }
TUNIS_FORCE_INLINE void  glFogCoordPointerEXT(GLenum type, GLsizei stride, const void * pointer) { tunisGL.tunisFogCoordPointerEXT(type, stride, pointer); }
TUNIS_FORCE_INLINE void  glFogCoordPointerListIBM(GLenum type, GLint stride, const void ** pointer, GLint ptrstride) { tunisGL.tunisFogCoordPointerListIBM(type, stride, pointer, ptrstride); }
TUNIS_FORCE_INLINE void  glFogCoordd(GLdouble coord) { tunisGL.tunisFogCoordd(coord); }
TUNIS_FORCE_INLINE void  glFogCoorddEXT(GLdouble coord) { tunisGL.tunisFogCoorddEXT(coord); }
TUNIS_FORCE_INLINE void  glFogCoorddv(const GLdouble * coord) { tunisGL.tunisFogCoorddv(coord); }
TUNIS_FORCE_INLINE void  glFogCoorddvEXT(const GLdouble * coord) { tunisGL.tunisFogCoorddvEXT(coord); }
TUNIS_FORCE_INLINE void  glFogCoordf(GLfloat coord) { tunisGL.tunisFogCoordf(coord); }
TUNIS_FORCE_INLINE void  glFogCoordfEXT(GLfloat coord) { tunisGL.tunisFogCoordfEXT(coord); }
TUNIS_FORCE_INLINE void  glFogCoordfv(const GLfloat * coord) { tunisGL.tunisFogCoordfv(coord); }
TUNIS_FORCE_INLINE void  glFogCoordfvEXT(const GLfloat * coord) { tunisGL.tunisFogCoordfvEXT(coord); }
TUNIS_FORCE_INLINE void  glFogCoordhNV(GLhalfNV fog) { tunisGL.tunisFogCoordhNV(fog); }
TUNIS_FORCE_INLINE void  glFogCoordhvNV(const GLhalfNV * fog) { tunisGL.tunisFogCoordhvNV(fog); }
TUNIS_FORCE_INLINE void  glFogFuncSGIS(GLsizei n, const GLfloat * points) { tunisGL.tunisFogFuncSGIS(n, points); }
TUNIS_FORCE_INLINE void  glFogf(GLenum pname, GLfloat param) { tunisGL.tunisFogf(pname, param); }
TUNIS_FORCE_INLINE void  glFogfv(GLenum pname, const GLfloat * params) { tunisGL.tunisFogfv(pname, params); }
TUNIS_FORCE_INLINE void  glFogi(GLenum pname, GLint param) { tunisGL.tunisFogi(pname, param); }
TUNIS_FORCE_INLINE void  glFogiv(GLenum pname, const GLint * params) { tunisGL.tunisFogiv(pname, params); }
TUNIS_FORCE_INLINE void  glFogx(GLenum pname, GLfixed param) { tunisGL.tunisFogx(pname, param); }
TUNIS_FORCE_INLINE void  glFogxOES(GLenum pname, GLfixed param) { tunisGL.tunisFogxOES(pname, param); }
TUNIS_FORCE_INLINE void  glFogxv(GLenum pname, const GLfixed * param) { tunisGL.tunisFogxv(pname, param); }
TUNIS_FORCE_INLINE void  glFogxvOES(GLenum pname, const GLfixed * param) { tunisGL.tunisFogxvOES(pname, param); }
TUNIS_FORCE_INLINE void  glFragmentColorMaterialSGIX(GLenum face, GLenum mode) { tunisGL.tunisFragmentColorMaterialSGIX(face, mode); }
TUNIS_FORCE_INLINE void  glFragmentCoverageColorNV(GLuint color) { tunisGL.tunisFragmentCoverageColorNV(color); }
TUNIS_FORCE_INLINE void  glFragmentLightModelfSGIX(GLenum pname, GLfloat param) { tunisGL.tunisFragmentLightModelfSGIX(pname, param); }
TUNIS_FORCE_INLINE void  glFragmentLightModelfvSGIX(GLenum pname, const GLfloat * params) { tunisGL.tunisFragmentLightModelfvSGIX(pname, params); }
TUNIS_FORCE_INLINE void  glFragmentLightModeliSGIX(GLenum pname, GLint param) { tunisGL.tunisFragmentLightModeliSGIX(pname, param); }
TUNIS_FORCE_INLINE void  glFragmentLightModelivSGIX(GLenum pname, const GLint * params) { tunisGL.tunisFragmentLightModelivSGIX(pname, params); }
TUNIS_FORCE_INLINE void  glFragmentLightfSGIX(GLenum light, GLenum pname, GLfloat param) { tunisGL.tunisFragmentLightfSGIX(light, pname, param); }
TUNIS_FORCE_INLINE void  glFragmentLightfvSGIX(GLenum light, GLenum pname, const GLfloat * params) { tunisGL.tunisFragmentLightfvSGIX(light, pname, params); }
TUNIS_FORCE_INLINE void  glFragmentLightiSGIX(GLenum light, GLenum pname, GLint param) { tunisGL.tunisFragmentLightiSGIX(light, pname, param); }
TUNIS_FORCE_INLINE void  glFragmentLightivSGIX(GLenum light, GLenum pname, const GLint * params) { tunisGL.tunisFragmentLightivSGIX(light, pname, params); }
TUNIS_FORCE_INLINE void  glFragmentMaterialfSGIX(GLenum face, GLenum pname, GLfloat param) { tunisGL.tunisFragmentMaterialfSGIX(face, pname, param); }
TUNIS_FORCE_INLINE void  glFragmentMaterialfvSGIX(GLenum face, GLenum pname, const GLfloat * params) { tunisGL.tunisFragmentMaterialfvSGIX(face, pname, params); }
TUNIS_FORCE_INLINE void  glFragmentMaterialiSGIX(GLenum face, GLenum pname, GLint param) { tunisGL.tunisFragmentMaterialiSGIX(face, pname, param); }
TUNIS_FORCE_INLINE void  glFragmentMaterialivSGIX(GLenum face, GLenum pname, const GLint * params) { tunisGL.tunisFragmentMaterialivSGIX(face, pname, params); }
TUNIS_FORCE_INLINE void  glFrameTerminatorGREMEDY(void) { tunisGL.tunisFrameTerminatorGREMEDY(); }
TUNIS_FORCE_INLINE void  glFrameZoomSGIX(GLint factor) { tunisGL.tunisFrameZoomSGIX(factor); }
TUNIS_FORCE_INLINE void  glFramebufferDrawBufferEXT(GLuint framebuffer, GLenum mode) { tunisGL.tunisFramebufferDrawBufferEXT(framebuffer, mode); }
TUNIS_FORCE_INLINE void  glFramebufferDrawBuffersEXT(GLuint framebuffer, GLsizei n, const GLenum * bufs) { tunisGL.tunisFramebufferDrawBuffersEXT(framebuffer, n, bufs); }
TUNIS_FORCE_INLINE void  glFramebufferFetchBarrierEXT(void) { tunisGL.tunisFramebufferFetchBarrierEXT(); }
TUNIS_FORCE_INLINE void  glFramebufferFetchBarrierQCOM(void) { tunisGL.tunisFramebufferFetchBarrierQCOM(); }
TUNIS_FORCE_INLINE void  glFramebufferFoveationConfigQCOM(GLuint framebuffer, GLuint numLayers, GLuint focalPointsPerLayer, GLuint requestedFeatures, GLuint * providedFeatures) { tunisGL.tunisFramebufferFoveationConfigQCOM(framebuffer, numLayers, focalPointsPerLayer, requestedFeatures, providedFeatures); }
TUNIS_FORCE_INLINE void  glFramebufferFoveationParametersQCOM(GLuint framebuffer, GLuint layer, GLuint focalPoint, GLfloat focalX, GLfloat focalY, GLfloat gainX, GLfloat gainY, GLfloat foveaArea) { tunisGL.tunisFramebufferFoveationParametersQCOM(framebuffer, layer, focalPoint, focalX, focalY, gainX, gainY, foveaArea); }
TUNIS_FORCE_INLINE void  glFramebufferParameteri(GLenum target, GLenum pname, GLint param) { tunisGL.tunisFramebufferParameteri(target, pname, param); }
TUNIS_FORCE_INLINE void  glFramebufferPixelLocalStorageSizeEXT(GLuint target, GLsizei size) { tunisGL.tunisFramebufferPixelLocalStorageSizeEXT(target, size); }
TUNIS_FORCE_INLINE void  glFramebufferReadBufferEXT(GLuint framebuffer, GLenum mode) { tunisGL.tunisFramebufferReadBufferEXT(framebuffer, mode); }
TUNIS_FORCE_INLINE void  glFramebufferRenderbuffer(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer) { tunisGL.tunisFramebufferRenderbuffer(target, attachment, renderbuffertarget, renderbuffer); }
TUNIS_FORCE_INLINE void  glFramebufferRenderbufferEXT(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer) { tunisGL.tunisFramebufferRenderbufferEXT(target, attachment, renderbuffertarget, renderbuffer); }
TUNIS_FORCE_INLINE void  glFramebufferRenderbufferOES(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer) { tunisGL.tunisFramebufferRenderbufferOES(target, attachment, renderbuffertarget, renderbuffer); }
TUNIS_FORCE_INLINE void  glFramebufferSampleLocationsfvARB(GLenum target, GLuint start, GLsizei count, const GLfloat * v) { tunisGL.tunisFramebufferSampleLocationsfvARB(target, start, count, v); }
TUNIS_FORCE_INLINE void  glFramebufferSampleLocationsfvNV(GLenum target, GLuint start, GLsizei count, const GLfloat * v) { tunisGL.tunisFramebufferSampleLocationsfvNV(target, start, count, v); }
TUNIS_FORCE_INLINE void  glFramebufferSamplePositionsfvAMD(GLenum target, GLuint numsamples, GLuint pixelindex, const GLfloat * values) { tunisGL.tunisFramebufferSamplePositionsfvAMD(target, numsamples, pixelindex, values); }
TUNIS_FORCE_INLINE void  glFramebufferTexture(GLenum target, GLenum attachment, GLuint texture, GLint level) { tunisGL.tunisFramebufferTexture(target, attachment, texture, level); }
TUNIS_FORCE_INLINE void  glFramebufferTexture1D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level) { tunisGL.tunisFramebufferTexture1D(target, attachment, textarget, texture, level); }
TUNIS_FORCE_INLINE void  glFramebufferTexture1DEXT(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level) { tunisGL.tunisFramebufferTexture1DEXT(target, attachment, textarget, texture, level); }
TUNIS_FORCE_INLINE void  glFramebufferTexture2D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level) { tunisGL.tunisFramebufferTexture2D(target, attachment, textarget, texture, level); }
TUNIS_FORCE_INLINE void  glFramebufferTexture2DDownsampleIMG(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint xscale, GLint yscale) { tunisGL.tunisFramebufferTexture2DDownsampleIMG(target, attachment, textarget, texture, level, xscale, yscale); }
TUNIS_FORCE_INLINE void  glFramebufferTexture2DEXT(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level) { tunisGL.tunisFramebufferTexture2DEXT(target, attachment, textarget, texture, level); }
TUNIS_FORCE_INLINE void  glFramebufferTexture2DMultisampleEXT(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLsizei samples) { tunisGL.tunisFramebufferTexture2DMultisampleEXT(target, attachment, textarget, texture, level, samples); }
TUNIS_FORCE_INLINE void  glFramebufferTexture2DMultisampleIMG(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLsizei samples) { tunisGL.tunisFramebufferTexture2DMultisampleIMG(target, attachment, textarget, texture, level, samples); }
TUNIS_FORCE_INLINE void  glFramebufferTexture2DOES(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level) { tunisGL.tunisFramebufferTexture2DOES(target, attachment, textarget, texture, level); }
TUNIS_FORCE_INLINE void  glFramebufferTexture3D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset) { tunisGL.tunisFramebufferTexture3D(target, attachment, textarget, texture, level, zoffset); }
TUNIS_FORCE_INLINE void  glFramebufferTexture3DEXT(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset) { tunisGL.tunisFramebufferTexture3DEXT(target, attachment, textarget, texture, level, zoffset); }
TUNIS_FORCE_INLINE void  glFramebufferTexture3DOES(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset) { tunisGL.tunisFramebufferTexture3DOES(target, attachment, textarget, texture, level, zoffset); }
TUNIS_FORCE_INLINE void  glFramebufferTextureARB(GLenum target, GLenum attachment, GLuint texture, GLint level) { tunisGL.tunisFramebufferTextureARB(target, attachment, texture, level); }
TUNIS_FORCE_INLINE void  glFramebufferTextureEXT(GLenum target, GLenum attachment, GLuint texture, GLint level) { tunisGL.tunisFramebufferTextureEXT(target, attachment, texture, level); }
TUNIS_FORCE_INLINE void  glFramebufferTextureFaceARB(GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face) { tunisGL.tunisFramebufferTextureFaceARB(target, attachment, texture, level, face); }
TUNIS_FORCE_INLINE void  glFramebufferTextureFaceEXT(GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face) { tunisGL.tunisFramebufferTextureFaceEXT(target, attachment, texture, level, face); }
TUNIS_FORCE_INLINE void  glFramebufferTextureLayer(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer) { tunisGL.tunisFramebufferTextureLayer(target, attachment, texture, level, layer); }
TUNIS_FORCE_INLINE void  glFramebufferTextureLayerARB(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer) { tunisGL.tunisFramebufferTextureLayerARB(target, attachment, texture, level, layer); }
TUNIS_FORCE_INLINE void  glFramebufferTextureLayerDownsampleIMG(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer, GLint xscale, GLint yscale) { tunisGL.tunisFramebufferTextureLayerDownsampleIMG(target, attachment, texture, level, layer, xscale, yscale); }
TUNIS_FORCE_INLINE void  glFramebufferTextureLayerEXT(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer) { tunisGL.tunisFramebufferTextureLayerEXT(target, attachment, texture, level, layer); }
TUNIS_FORCE_INLINE void  glFramebufferTextureMultisampleMultiviewOVR(GLenum target, GLenum attachment, GLuint texture, GLint level, GLsizei samples, GLint baseViewIndex, GLsizei numViews) { tunisGL.tunisFramebufferTextureMultisampleMultiviewOVR(target, attachment, texture, level, samples, baseViewIndex, numViews); }
TUNIS_FORCE_INLINE void  glFramebufferTextureMultiviewOVR(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint baseViewIndex, GLsizei numViews) { tunisGL.tunisFramebufferTextureMultiviewOVR(target, attachment, texture, level, baseViewIndex, numViews); }
TUNIS_FORCE_INLINE void  glFramebufferTextureOES(GLenum target, GLenum attachment, GLuint texture, GLint level) { tunisGL.tunisFramebufferTextureOES(target, attachment, texture, level); }
TUNIS_FORCE_INLINE void  glFreeObjectBufferATI(GLuint buffer) { tunisGL.tunisFreeObjectBufferATI(buffer); }
TUNIS_FORCE_INLINE void  glFrontFace(GLenum mode) { tunisGL.tunisFrontFace(mode); }
TUNIS_FORCE_INLINE void  glFrustum(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar) { tunisGL.tunisFrustum(left, right, bottom, top, zNear, zFar); }
TUNIS_FORCE_INLINE void  glFrustumf(GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f) { tunisGL.tunisFrustumf(l, r, b, t, n, f); }
TUNIS_FORCE_INLINE void  glFrustumfOES(GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f) { tunisGL.tunisFrustumfOES(l, r, b, t, n, f); }
TUNIS_FORCE_INLINE void  glFrustumx(GLfixed l, GLfixed r, GLfixed b, GLfixed t, GLfixed n, GLfixed f) { tunisGL.tunisFrustumx(l, r, b, t, n, f); }
TUNIS_FORCE_INLINE void  glFrustumxOES(GLfixed l, GLfixed r, GLfixed b, GLfixed t, GLfixed n, GLfixed f) { tunisGL.tunisFrustumxOES(l, r, b, t, n, f); }
TUNIS_FORCE_INLINE GLuint glGenAsyncMarkersSGIX(GLsizei range) { return tunisGL.tunisGenAsyncMarkersSGIX(range); }
TUNIS_FORCE_INLINE void  glGenBuffers(GLsizei n, GLuint * buffers) { tunisGL.tunisGenBuffers(n, buffers); }
TUNIS_FORCE_INLINE void  glGenBuffersARB(GLsizei n, GLuint * buffers) { tunisGL.tunisGenBuffersARB(n, buffers); }
TUNIS_FORCE_INLINE void  glGenFencesAPPLE(GLsizei n, GLuint * fences) { tunisGL.tunisGenFencesAPPLE(n, fences); }
TUNIS_FORCE_INLINE void  glGenFencesNV(GLsizei n, GLuint * fences) { tunisGL.tunisGenFencesNV(n, fences); }
TUNIS_FORCE_INLINE GLuint glGenFragmentShadersATI(GLuint range) { return tunisGL.tunisGenFragmentShadersATI(range); }
TUNIS_FORCE_INLINE void  glGenFramebuffers(GLsizei n, GLuint * framebuffers) { tunisGL.tunisGenFramebuffers(n, framebuffers); }
TUNIS_FORCE_INLINE void  glGenFramebuffersEXT(GLsizei n, GLuint * framebuffers) { tunisGL.tunisGenFramebuffersEXT(n, framebuffers); }
TUNIS_FORCE_INLINE void  glGenFramebuffersOES(GLsizei n, GLuint * framebuffers) { tunisGL.tunisGenFramebuffersOES(n, framebuffers); }
TUNIS_FORCE_INLINE GLuint glGenLists(GLsizei range) { return tunisGL.tunisGenLists(range); }
TUNIS_FORCE_INLINE void  glGenNamesAMD(GLenum identifier, GLuint num, GLuint * names) { tunisGL.tunisGenNamesAMD(identifier, num, names); }
TUNIS_FORCE_INLINE void  glGenOcclusionQueriesNV(GLsizei n, GLuint * ids) { tunisGL.tunisGenOcclusionQueriesNV(n, ids); }
TUNIS_FORCE_INLINE GLuint glGenPathsNV(GLsizei range) { return tunisGL.tunisGenPathsNV(range); }
TUNIS_FORCE_INLINE void  glGenPerfMonitorsAMD(GLsizei n, GLuint * monitors) { tunisGL.tunisGenPerfMonitorsAMD(n, monitors); }
TUNIS_FORCE_INLINE void  glGenProgramPipelines(GLsizei n, GLuint * pipelines) { tunisGL.tunisGenProgramPipelines(n, pipelines); }
TUNIS_FORCE_INLINE void  glGenProgramPipelinesEXT(GLsizei n, GLuint * pipelines) { tunisGL.tunisGenProgramPipelinesEXT(n, pipelines); }
TUNIS_FORCE_INLINE void  glGenProgramsARB(GLsizei n, GLuint * programs) { tunisGL.tunisGenProgramsARB(n, programs); }
TUNIS_FORCE_INLINE void  glGenProgramsNV(GLsizei n, GLuint * programs) { tunisGL.tunisGenProgramsNV(n, programs); }
TUNIS_FORCE_INLINE void  glGenQueries(GLsizei n, GLuint * ids) { tunisGL.tunisGenQueries(n, ids); }
TUNIS_FORCE_INLINE void  glGenQueriesARB(GLsizei n, GLuint * ids) { tunisGL.tunisGenQueriesARB(n, ids); }
TUNIS_FORCE_INLINE void  glGenQueriesEXT(GLsizei n, GLuint * ids) { tunisGL.tunisGenQueriesEXT(n, ids); }
TUNIS_FORCE_INLINE void  glGenQueryResourceTagNV(GLsizei n, GLint * tagIds) { tunisGL.tunisGenQueryResourceTagNV(n, tagIds); }
TUNIS_FORCE_INLINE void  glGenRenderbuffers(GLsizei n, GLuint * renderbuffers) { tunisGL.tunisGenRenderbuffers(n, renderbuffers); }
TUNIS_FORCE_INLINE void  glGenRenderbuffersEXT(GLsizei n, GLuint * renderbuffers) { tunisGL.tunisGenRenderbuffersEXT(n, renderbuffers); }
TUNIS_FORCE_INLINE void  glGenRenderbuffersOES(GLsizei n, GLuint * renderbuffers) { tunisGL.tunisGenRenderbuffersOES(n, renderbuffers); }
TUNIS_FORCE_INLINE void  glGenSamplers(GLsizei count, GLuint * samplers) { tunisGL.tunisGenSamplers(count, samplers); }
TUNIS_FORCE_INLINE void  glGenSemaphoresEXT(GLsizei n, GLuint * semaphores) { tunisGL.tunisGenSemaphoresEXT(n, semaphores); }
TUNIS_FORCE_INLINE GLuint glGenSymbolsEXT(GLenum datatype, GLenum storagetype, GLenum range, GLuint components) { return tunisGL.tunisGenSymbolsEXT(datatype, storagetype, range, components); }
TUNIS_FORCE_INLINE void  glGenTextures(GLsizei n, GLuint * textures) { tunisGL.tunisGenTextures(n, textures); }
TUNIS_FORCE_INLINE void  glGenTexturesEXT(GLsizei n, GLuint * textures) { tunisGL.tunisGenTexturesEXT(n, textures); }
TUNIS_FORCE_INLINE void  glGenTransformFeedbacks(GLsizei n, GLuint * ids) { tunisGL.tunisGenTransformFeedbacks(n, ids); }
TUNIS_FORCE_INLINE void  glGenTransformFeedbacksNV(GLsizei n, GLuint * ids) { tunisGL.tunisGenTransformFeedbacksNV(n, ids); }
TUNIS_FORCE_INLINE void  glGenVertexArrays(GLsizei n, GLuint * arrays) { tunisGL.tunisGenVertexArrays(n, arrays); }
TUNIS_FORCE_INLINE void  glGenVertexArraysAPPLE(GLsizei n, GLuint * arrays) { tunisGL.tunisGenVertexArraysAPPLE(n, arrays); }
TUNIS_FORCE_INLINE void  glGenVertexArraysOES(GLsizei n, GLuint * arrays) { tunisGL.tunisGenVertexArraysOES(n, arrays); }
TUNIS_FORCE_INLINE GLuint glGenVertexShadersEXT(GLuint range) { return tunisGL.tunisGenVertexShadersEXT(range); }
TUNIS_FORCE_INLINE void  glGenerateMipmap(GLenum target) { tunisGL.tunisGenerateMipmap(target); }
TUNIS_FORCE_INLINE void  glGenerateMipmapEXT(GLenum target) { tunisGL.tunisGenerateMipmapEXT(target); }
TUNIS_FORCE_INLINE void  glGenerateMipmapOES(GLenum target) { tunisGL.tunisGenerateMipmapOES(target); }
TUNIS_FORCE_INLINE void  glGenerateMultiTexMipmapEXT(GLenum texunit, GLenum target) { tunisGL.tunisGenerateMultiTexMipmapEXT(texunit, target); }
TUNIS_FORCE_INLINE void  glGenerateTextureMipmap(GLuint texture) { tunisGL.tunisGenerateTextureMipmap(texture); }
TUNIS_FORCE_INLINE void  glGenerateTextureMipmapEXT(GLuint texture, GLenum target) { tunisGL.tunisGenerateTextureMipmapEXT(texture, target); }
TUNIS_FORCE_INLINE void  glGetActiveAtomicCounterBufferiv(GLuint program, GLuint bufferIndex, GLenum pname, GLint * params) { tunisGL.tunisGetActiveAtomicCounterBufferiv(program, bufferIndex, pname, params); }
TUNIS_FORCE_INLINE void  glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLint * size, GLenum * type, GLchar * name) { tunisGL.tunisGetActiveAttrib(program, index, bufSize, length, size, type, name); }
TUNIS_FORCE_INLINE void  glGetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei * length, GLint * size, GLenum * type, GLcharARB * name) { tunisGL.tunisGetActiveAttribARB(programObj, index, maxLength, length, size, type, name); }
TUNIS_FORCE_INLINE void  glGetActiveSubroutineName(GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei * length, GLchar * name) { tunisGL.tunisGetActiveSubroutineName(program, shadertype, index, bufsize, length, name); }
TUNIS_FORCE_INLINE void  glGetActiveSubroutineUniformName(GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei * length, GLchar * name) { tunisGL.tunisGetActiveSubroutineUniformName(program, shadertype, index, bufsize, length, name); }
TUNIS_FORCE_INLINE void  glGetActiveSubroutineUniformiv(GLuint program, GLenum shadertype, GLuint index, GLenum pname, GLint * values) { tunisGL.tunisGetActiveSubroutineUniformiv(program, shadertype, index, pname, values); }
TUNIS_FORCE_INLINE void  glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLint * size, GLenum * type, GLchar * name) { tunisGL.tunisGetActiveUniform(program, index, bufSize, length, size, type, name); }
TUNIS_FORCE_INLINE void  glGetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei * length, GLint * size, GLenum * type, GLcharARB * name) { tunisGL.tunisGetActiveUniformARB(programObj, index, maxLength, length, size, type, name); }
TUNIS_FORCE_INLINE void  glGetActiveUniformBlockName(GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei * length, GLchar * uniformBlockName) { tunisGL.tunisGetActiveUniformBlockName(program, uniformBlockIndex, bufSize, length, uniformBlockName); }
TUNIS_FORCE_INLINE void  glGetActiveUniformBlockiv(GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint * params) { tunisGL.tunisGetActiveUniformBlockiv(program, uniformBlockIndex, pname, params); }
TUNIS_FORCE_INLINE void  glGetActiveUniformName(GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei * length, GLchar * uniformName) { tunisGL.tunisGetActiveUniformName(program, uniformIndex, bufSize, length, uniformName); }
TUNIS_FORCE_INLINE void  glGetActiveUniformsiv(GLuint program, GLsizei uniformCount, const GLuint * uniformIndices, GLenum pname, GLint * params) { tunisGL.tunisGetActiveUniformsiv(program, uniformCount, uniformIndices, pname, params); }
TUNIS_FORCE_INLINE void  glGetActiveVaryingNV(GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLsizei * size, GLenum * type, GLchar * name) { tunisGL.tunisGetActiveVaryingNV(program, index, bufSize, length, size, type, name); }
TUNIS_FORCE_INLINE void  glGetArrayObjectfvATI(GLenum array, GLenum pname, GLfloat * params) { tunisGL.tunisGetArrayObjectfvATI(array, pname, params); }
TUNIS_FORCE_INLINE void  glGetArrayObjectivATI(GLenum array, GLenum pname, GLint * params) { tunisGL.tunisGetArrayObjectivATI(array, pname, params); }
TUNIS_FORCE_INLINE void  glGetAttachedObjectsARB(GLhandleARB containerObj, GLsizei maxCount, GLsizei * count, GLhandleARB * obj) { tunisGL.tunisGetAttachedObjectsARB(containerObj, maxCount, count, obj); }
TUNIS_FORCE_INLINE void  glGetAttachedShaders(GLuint program, GLsizei maxCount, GLsizei * count, GLuint * shaders) { tunisGL.tunisGetAttachedShaders(program, maxCount, count, shaders); }
TUNIS_FORCE_INLINE GLint glGetAttribLocation(GLuint program, const GLchar * name) { return tunisGL.tunisGetAttribLocation(program, name); }
TUNIS_FORCE_INLINE GLint glGetAttribLocationARB(GLhandleARB programObj, const GLcharARB * name) { return tunisGL.tunisGetAttribLocationARB(programObj, name); }
TUNIS_FORCE_INLINE void  glGetBooleanIndexedvEXT(GLenum target, GLuint index, GLboolean * data) { tunisGL.tunisGetBooleanIndexedvEXT(target, index, data); }
TUNIS_FORCE_INLINE void  glGetBooleani_v(GLenum target, GLuint index, GLboolean * data) { tunisGL.tunisGetBooleani_v(target, index, data); }
TUNIS_FORCE_INLINE void  glGetBooleanv(GLenum pname, GLboolean * data) { tunisGL.tunisGetBooleanv(pname, data); }
TUNIS_FORCE_INLINE void  glGetBufferParameteri64v(GLenum target, GLenum pname, GLint64 * params) { tunisGL.tunisGetBufferParameteri64v(target, pname, params); }
TUNIS_FORCE_INLINE void  glGetBufferParameteriv(GLenum target, GLenum pname, GLint * params) { tunisGL.tunisGetBufferParameteriv(target, pname, params); }
TUNIS_FORCE_INLINE void  glGetBufferParameterivARB(GLenum target, GLenum pname, GLint * params) { tunisGL.tunisGetBufferParameterivARB(target, pname, params); }
TUNIS_FORCE_INLINE void  glGetBufferParameterui64vNV(GLenum target, GLenum pname, GLuint64EXT * params) { tunisGL.tunisGetBufferParameterui64vNV(target, pname, params); }
TUNIS_FORCE_INLINE void  glGetBufferPointerv(GLenum target, GLenum pname, void ** params) { tunisGL.tunisGetBufferPointerv(target, pname, params); }
TUNIS_FORCE_INLINE void  glGetBufferPointervARB(GLenum target, GLenum pname, void ** params) { tunisGL.tunisGetBufferPointervARB(target, pname, params); }
TUNIS_FORCE_INLINE void  glGetBufferPointervOES(GLenum target, GLenum pname, void ** params) { tunisGL.tunisGetBufferPointervOES(target, pname, params); }
TUNIS_FORCE_INLINE void  glGetBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, void * data) { tunisGL.tunisGetBufferSubData(target, offset, size, data); }
TUNIS_FORCE_INLINE void  glGetBufferSubDataARB(GLenum target, GLintptrARB offset, GLsizeiptrARB size, void * data) { tunisGL.tunisGetBufferSubDataARB(target, offset, size, data); }
TUNIS_FORCE_INLINE void  glGetClipPlane(GLenum plane, GLdouble * equation) { tunisGL.tunisGetClipPlane(plane, equation); }
TUNIS_FORCE_INLINE void  glGetClipPlanef(GLenum plane, GLfloat * equation) { tunisGL.tunisGetClipPlanef(plane, equation); }
TUNIS_FORCE_INLINE void  glGetClipPlanefOES(GLenum plane, GLfloat * equation) { tunisGL.tunisGetClipPlanefOES(plane, equation); }
TUNIS_FORCE_INLINE void  glGetClipPlanex(GLenum plane, GLfixed * equation) { tunisGL.tunisGetClipPlanex(plane, equation); }
TUNIS_FORCE_INLINE void  glGetClipPlanexOES(GLenum plane, GLfixed * equation) { tunisGL.tunisGetClipPlanexOES(plane, equation); }
TUNIS_FORCE_INLINE void  glGetColorTable(GLenum target, GLenum format, GLenum type, void * table) { tunisGL.tunisGetColorTable(target, format, type, table); }
TUNIS_FORCE_INLINE void  glGetColorTableEXT(GLenum target, GLenum format, GLenum type, void * data) { tunisGL.tunisGetColorTableEXT(target, format, type, data); }
TUNIS_FORCE_INLINE void  glGetColorTableParameterfv(GLenum target, GLenum pname, GLfloat * params) { tunisGL.tunisGetColorTableParameterfv(target, pname, params); }
TUNIS_FORCE_INLINE void  glGetColorTableParameterfvEXT(GLenum target, GLenum pname, GLfloat * params) { tunisGL.tunisGetColorTableParameterfvEXT(target, pname, params); }
TUNIS_FORCE_INLINE void  glGetColorTableParameterfvSGI(GLenum target, GLenum pname, GLfloat * params) { tunisGL.tunisGetColorTableParameterfvSGI(target, pname, params); }
TUNIS_FORCE_INLINE void  glGetColorTableParameteriv(GLenum target, GLenum pname, GLint * params) { tunisGL.tunisGetColorTableParameteriv(target, pname, params); }
TUNIS_FORCE_INLINE void  glGetColorTableParameterivEXT(GLenum target, GLenum pname, GLint * params) { tunisGL.tunisGetColorTableParameterivEXT(target, pname, params); }
TUNIS_FORCE_INLINE void  glGetColorTableParameterivSGI(GLenum target, GLenum pname, GLint * params) { tunisGL.tunisGetColorTableParameterivSGI(target, pname, params); }
TUNIS_FORCE_INLINE void  glGetColorTableSGI(GLenum target, GLenum format, GLenum type, void * table) { tunisGL.tunisGetColorTableSGI(target, format, type, table); }
TUNIS_FORCE_INLINE void  glGetCombinerInputParameterfvNV(GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLfloat * params) { tunisGL.tunisGetCombinerInputParameterfvNV(stage, portion, variable, pname, params); }
TUNIS_FORCE_INLINE void  glGetCombinerInputParameterivNV(GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLint * params) { tunisGL.tunisGetCombinerInputParameterivNV(stage, portion, variable, pname, params); }
TUNIS_FORCE_INLINE void  glGetCombinerOutputParameterfvNV(GLenum stage, GLenum portion, GLenum pname, GLfloat * params) { tunisGL.tunisGetCombinerOutputParameterfvNV(stage, portion, pname, params); }
TUNIS_FORCE_INLINE void  glGetCombinerOutputParameterivNV(GLenum stage, GLenum portion, GLenum pname, GLint * params) { tunisGL.tunisGetCombinerOutputParameterivNV(stage, portion, pname, params); }
TUNIS_FORCE_INLINE void  glGetCombinerStageParameterfvNV(GLenum stage, GLenum pname, GLfloat * params) { tunisGL.tunisGetCombinerStageParameterfvNV(stage, pname, params); }
TUNIS_FORCE_INLINE GLuint glGetCommandHeaderNV(GLenum tokenID, GLuint size) { return tunisGL.tunisGetCommandHeaderNV(tokenID, size); }
TUNIS_FORCE_INLINE void  glGetCompressedMultiTexImageEXT(GLenum texunit, GLenum target, GLint lod, void * img) { tunisGL.tunisGetCompressedMultiTexImageEXT(texunit, target, lod, img); }
TUNIS_FORCE_INLINE void  glGetCompressedTexImage(GLenum target, GLint level, void * img) { tunisGL.tunisGetCompressedTexImage(target, level, img); }
TUNIS_FORCE_INLINE void  glGetCompressedTexImageARB(GLenum target, GLint level, void * img) { tunisGL.tunisGetCompressedTexImageARB(target, level, img); }
TUNIS_FORCE_INLINE void  glGetCompressedTextureImage(GLuint texture, GLint level, GLsizei bufSize, void * pixels) { tunisGL.tunisGetCompressedTextureImage(texture, level, bufSize, pixels); }
TUNIS_FORCE_INLINE void  glGetCompressedTextureImageEXT(GLuint texture, GLenum target, GLint lod, void * img) { tunisGL.tunisGetCompressedTextureImageEXT(texture, target, lod, img); }
TUNIS_FORCE_INLINE void  glGetCompressedTextureSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei bufSize, void * pixels) { tunisGL.tunisGetCompressedTextureSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, bufSize, pixels); }
TUNIS_FORCE_INLINE void  glGetConvolutionFilter(GLenum target, GLenum format, GLenum type, void * image) { tunisGL.tunisGetConvolutionFilter(target, format, type, image); }
TUNIS_FORCE_INLINE void  glGetConvolutionFilterEXT(GLenum target, GLenum format, GLenum type, void * image) { tunisGL.tunisGetConvolutionFilterEXT(target, format, type, image); }
TUNIS_FORCE_INLINE void  glGetConvolutionParameterfv(GLenum target, GLenum pname, GLfloat * params) { tunisGL.tunisGetConvolutionParameterfv(target, pname, params); }
TUNIS_FORCE_INLINE void  glGetConvolutionParameterfvEXT(GLenum target, GLenum pname, GLfloat * params) { tunisGL.tunisGetConvolutionParameterfvEXT(target, pname, params); }
TUNIS_FORCE_INLINE void  glGetConvolutionParameteriv(GLenum target, GLenum pname, GLint * params) { tunisGL.tunisGetConvolutionParameteriv(target, pname, params); }
TUNIS_FORCE_INLINE void  glGetConvolutionParameterivEXT(GLenum target, GLenum pname, GLint * params) { tunisGL.tunisGetConvolutionParameterivEXT(target, pname, params); }
TUNIS_FORCE_INLINE void  glGetConvolutionParameterxvOES(GLenum target, GLenum pname, GLfixed * params) { tunisGL.tunisGetConvolutionParameterxvOES(target, pname, params); }
TUNIS_FORCE_INLINE void  glGetCoverageModulationTableNV(GLsizei bufsize, GLfloat * v) { tunisGL.tunisGetCoverageModulationTableNV(bufsize, v); }
TUNIS_FORCE_INLINE GLuint glGetDebugMessageLog(GLuint count, GLsizei bufSize, GLenum * sources, GLenum * types, GLuint * ids, GLenum * severities, GLsizei * lengths, GLchar * messageLog) { return tunisGL.tunisGetDebugMessageLog(count, bufSize, sources, types, ids, severities, lengths, messageLog); }
TUNIS_FORCE_INLINE GLuint glGetDebugMessageLogAMD(GLuint count, GLsizei bufsize, GLenum * categories, GLuint * severities, GLuint * ids, GLsizei * lengths, GLchar * message) { return tunisGL.tunisGetDebugMessageLogAMD(count, bufsize, categories, severities, ids, lengths, message); }
TUNIS_FORCE_INLINE GLuint glGetDebugMessageLogARB(GLuint count, GLsizei bufSize, GLenum * sources, GLenum * types, GLuint * ids, GLenum * severities, GLsizei * lengths, GLchar * messageLog) { return tunisGL.tunisGetDebugMessageLogARB(count, bufSize, sources, types, ids, severities, lengths, messageLog); }
TUNIS_FORCE_INLINE GLuint glGetDebugMessageLogKHR(GLuint count, GLsizei bufSize, GLenum * sources, GLenum * types, GLuint * ids, GLenum * severities, GLsizei * lengths, GLchar * messageLog) { return tunisGL.tunisGetDebugMessageLogKHR(count, bufSize, sources, types, ids, severities, lengths, messageLog); }
TUNIS_FORCE_INLINE void  glGetDetailTexFuncSGIS(GLenum target, GLfloat * points) { tunisGL.tunisGetDetailTexFuncSGIS(target, points); }
TUNIS_FORCE_INLINE void  glGetDoubleIndexedvEXT(GLenum target, GLuint index, GLdouble * data) { tunisGL.tunisGetDoubleIndexedvEXT(target, index, data); }
TUNIS_FORCE_INLINE void  glGetDoublei_v(GLenum target, GLuint index, GLdouble * data) { tunisGL.tunisGetDoublei_v(target, index, data); }
TUNIS_FORCE_INLINE void  glGetDoublei_vEXT(GLenum pname, GLuint index, GLdouble * params) { tunisGL.tunisGetDoublei_vEXT(pname, index, params); }
TUNIS_FORCE_INLINE void  glGetDoublev(GLenum pname, GLdouble * data) { tunisGL.tunisGetDoublev(pname, data); }
TUNIS_FORCE_INLINE void  glGetDriverControlStringQCOM(GLuint driverControl, GLsizei bufSize, GLsizei * length, GLchar * driverControlString) { tunisGL.tunisGetDriverControlStringQCOM(driverControl, bufSize, length, driverControlString); }
TUNIS_FORCE_INLINE void  glGetDriverControlsQCOM(GLint * num, GLsizei size, GLuint * driverControls) { tunisGL.tunisGetDriverControlsQCOM(num, size, driverControls); }
TUNIS_FORCE_INLINE GLenum glGetError(void) { return tunisGL.tunisGetError(); }
TUNIS_FORCE_INLINE void  glGetFenceivNV(GLuint fence, GLenum pname, GLint * params) { tunisGL.tunisGetFenceivNV(fence, pname, params); }
TUNIS_FORCE_INLINE void  glGetFinalCombinerInputParameterfvNV(GLenum variable, GLenum pname, GLfloat * params) { tunisGL.tunisGetFinalCombinerInputParameterfvNV(variable, pname, params); }
TUNIS_FORCE_INLINE void  glGetFinalCombinerInputParameterivNV(GLenum variable, GLenum pname, GLint * params) { tunisGL.tunisGetFinalCombinerInputParameterivNV(variable, pname, params); }
TUNIS_FORCE_INLINE void  glGetFirstPerfQueryIdINTEL(GLuint * queryId) { tunisGL.tunisGetFirstPerfQueryIdINTEL(queryId); }
TUNIS_FORCE_INLINE void  glGetFixedv(GLenum pname, GLfixed * params) { tunisGL.tunisGetFixedv(pname, params); }
TUNIS_FORCE_INLINE void  glGetFixedvOES(GLenum pname, GLfixed * params) { tunisGL.tunisGetFixedvOES(pname, params); }
TUNIS_FORCE_INLINE void  glGetFloatIndexedvEXT(GLenum target, GLuint index, GLfloat * data) { tunisGL.tunisGetFloatIndexedvEXT(target, index, data); }
TUNIS_FORCE_INLINE void  glGetFloati_v(GLenum target, GLuint index, GLfloat * data) { tunisGL.tunisGetFloati_v(target, index, data); }
TUNIS_FORCE_INLINE void  glGetFloati_vEXT(GLenum pname, GLuint index, GLfloat * params) { tunisGL.tunisGetFloati_vEXT(pname, index, params); }
TUNIS_FORCE_INLINE void  glGetFloati_vNV(GLenum target, GLuint index, GLfloat * data) { tunisGL.tunisGetFloati_vNV(target, index, data); }
TUNIS_FORCE_INLINE void  glGetFloati_vOES(GLenum target, GLuint index, GLfloat * data) { tunisGL.tunisGetFloati_vOES(target, index, data); }
TUNIS_FORCE_INLINE void  glGetFloatv(GLenum pname, GLfloat * data) { tunisGL.tunisGetFloatv(pname, data); }
TUNIS_FORCE_INLINE void  glGetFogFuncSGIS(GLfloat * points) { tunisGL.tunisGetFogFuncSGIS(points); }
TUNIS_FORCE_INLINE GLint glGetFragDataIndex(GLuint program, const GLchar * name) { return tunisGL.tunisGetFragDataIndex(program, name); }
TUNIS_FORCE_INLINE GLint glGetFragDataIndexEXT(GLuint program, const GLchar * name) { return tunisGL.tunisGetFragDataIndexEXT(program, name); }
TUNIS_FORCE_INLINE GLint glGetFragDataLocation(GLuint program, const GLchar * name) { return tunisGL.tunisGetFragDataLocation(program, name); }
TUNIS_FORCE_INLINE GLint glGetFragDataLocationEXT(GLuint program, const GLchar * name) { return tunisGL.tunisGetFragDataLocationEXT(program, name); }
TUNIS_FORCE_INLINE void  glGetFragmentLightfvSGIX(GLenum light, GLenum pname, GLfloat * params) { tunisGL.tunisGetFragmentLightfvSGIX(light, pname, params); }
TUNIS_FORCE_INLINE void  glGetFragmentLightivSGIX(GLenum light, GLenum pname, GLint * params) { tunisGL.tunisGetFragmentLightivSGIX(light, pname, params); }
TUNIS_FORCE_INLINE void  glGetFragmentMaterialfvSGIX(GLenum face, GLenum pname, GLfloat * params) { tunisGL.tunisGetFragmentMaterialfvSGIX(face, pname, params); }
TUNIS_FORCE_INLINE void  glGetFragmentMaterialivSGIX(GLenum face, GLenum pname, GLint * params) { tunisGL.tunisGetFragmentMaterialivSGIX(face, pname, params); }
TUNIS_FORCE_INLINE void  glGetFramebufferAttachmentParameteriv(GLenum target, GLenum attachment, GLenum pname, GLint * params) { tunisGL.tunisGetFramebufferAttachmentParameteriv(target, attachment, pname, params); }
TUNIS_FORCE_INLINE void  glGetFramebufferAttachmentParameterivEXT(GLenum target, GLenum attachment, GLenum pname, GLint * params) { tunisGL.tunisGetFramebufferAttachmentParameterivEXT(target, attachment, pname, params); }
TUNIS_FORCE_INLINE void  glGetFramebufferAttachmentParameterivOES(GLenum target, GLenum attachment, GLenum pname, GLint * params) { tunisGL.tunisGetFramebufferAttachmentParameterivOES(target, attachment, pname, params); }
TUNIS_FORCE_INLINE void  glGetFramebufferParameterfvAMD(GLenum target, GLenum pname, GLuint numsamples, GLuint pixelindex, GLsizei size, GLfloat * values) { tunisGL.tunisGetFramebufferParameterfvAMD(target, pname, numsamples, pixelindex, size, values); }
TUNIS_FORCE_INLINE void  glGetFramebufferParameteriv(GLenum target, GLenum pname, GLint * params) { tunisGL.tunisGetFramebufferParameteriv(target, pname, params); }
TUNIS_FORCE_INLINE void  glGetFramebufferParameterivEXT(GLuint framebuffer, GLenum pname, GLint * params) { tunisGL.tunisGetFramebufferParameterivEXT(framebuffer, pname, params); }
TUNIS_FORCE_INLINE GLsizei glGetFramebufferPixelLocalStorageSizeEXT(GLuint target) { return tunisGL.tunisGetFramebufferPixelLocalStorageSizeEXT(target); }
TUNIS_FORCE_INLINE GLenum glGetGraphicsResetStatus(void) { return tunisGL.tunisGetGraphicsResetStatus(); }
TUNIS_FORCE_INLINE GLenum glGetGraphicsResetStatusARB(void) { return tunisGL.tunisGetGraphicsResetStatusARB(); }
TUNIS_FORCE_INLINE GLenum glGetGraphicsResetStatusEXT(void) { return tunisGL.tunisGetGraphicsResetStatusEXT(); }
TUNIS_FORCE_INLINE GLenum glGetGraphicsResetStatusKHR(void) { return tunisGL.tunisGetGraphicsResetStatusKHR(); }
TUNIS_FORCE_INLINE GLhandleARB glGetHandleARB(GLenum pname) { return tunisGL.tunisGetHandleARB(pname); }
TUNIS_FORCE_INLINE void  glGetHistogram(GLenum target, GLboolean reset, GLenum format, GLenum type, void * values) { tunisGL.tunisGetHistogram(target, reset, format, type, values); }
TUNIS_FORCE_INLINE void  glGetHistogramEXT(GLenum target, GLboolean reset, GLenum format, GLenum type, void * values) { tunisGL.tunisGetHistogramEXT(target, reset, format, type, values); }
TUNIS_FORCE_INLINE void  glGetHistogramParameterfv(GLenum target, GLenum pname, GLfloat * params) { tunisGL.tunisGetHistogramParameterfv(target, pname, params); }
TUNIS_FORCE_INLINE void  glGetHistogramParameterfvEXT(GLenum target, GLenum pname, GLfloat * params) { tunisGL.tunisGetHistogramParameterfvEXT(target, pname, params); }
TUNIS_FORCE_INLINE void  glGetHistogramParameteriv(GLenum target, GLenum pname, GLint * params) { tunisGL.tunisGetHistogramParameteriv(target, pname, params); }
TUNIS_FORCE_INLINE void  glGetHistogramParameterivEXT(GLenum target, GLenum pname, GLint * params) { tunisGL.tunisGetHistogramParameterivEXT(target, pname, params); }
TUNIS_FORCE_INLINE void  glGetHistogramParameterxvOES(GLenum target, GLenum pname, GLfixed * params) { tunisGL.tunisGetHistogramParameterxvOES(target, pname, params); }
TUNIS_FORCE_INLINE GLuint64 glGetImageHandleARB(GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format) { return tunisGL.tunisGetImageHandleARB(texture, level, layered, layer, format); }
TUNIS_FORCE_INLINE GLuint64 glGetImageHandleNV(GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format) { return tunisGL.tunisGetImageHandleNV(texture, level, layered, layer, format); }
TUNIS_FORCE_INLINE void  glGetImageTransformParameterfvHP(GLenum target, GLenum pname, GLfloat * params) { tunisGL.tunisGetImageTransformParameterfvHP(target, pname, params); }
TUNIS_FORCE_INLINE void  glGetImageTransformParameterivHP(GLenum target, GLenum pname, GLint * params) { tunisGL.tunisGetImageTransformParameterivHP(target, pname, params); }
TUNIS_FORCE_INLINE void  glGetInfoLogARB(GLhandleARB obj, GLsizei maxLength, GLsizei * length, GLcharARB * infoLog) { tunisGL.tunisGetInfoLogARB(obj, maxLength, length, infoLog); }
TUNIS_FORCE_INLINE GLint glGetInstrumentsSGIX(void) { return tunisGL.tunisGetInstrumentsSGIX(); }
TUNIS_FORCE_INLINE void  glGetInteger64i_v(GLenum target, GLuint index, GLint64 * data) { tunisGL.tunisGetInteger64i_v(target, index, data); }
TUNIS_FORCE_INLINE void  glGetInteger64v(GLenum pname, GLint64 * data) { tunisGL.tunisGetInteger64v(pname, data); }
TUNIS_FORCE_INLINE void  glGetInteger64vAPPLE(GLenum pname, GLint64 * params) { tunisGL.tunisGetInteger64vAPPLE(pname, params); }
TUNIS_FORCE_INLINE void  glGetIntegerIndexedvEXT(GLenum target, GLuint index, GLint * data) { tunisGL.tunisGetIntegerIndexedvEXT(target, index, data); }
TUNIS_FORCE_INLINE void  glGetIntegeri_v(GLenum target, GLuint index, GLint * data) { tunisGL.tunisGetIntegeri_v(target, index, data); }
TUNIS_FORCE_INLINE void  glGetIntegeri_vEXT(GLenum target, GLuint index, GLint * data) { tunisGL.tunisGetIntegeri_vEXT(target, index, data); }
TUNIS_FORCE_INLINE void  glGetIntegerui64i_vNV(GLenum value, GLuint index, GLuint64EXT * result) { tunisGL.tunisGetIntegerui64i_vNV(value, index, result); }
TUNIS_FORCE_INLINE void  glGetIntegerui64vNV(GLenum value, GLuint64EXT * result) { tunisGL.tunisGetIntegerui64vNV(value, result); }
TUNIS_FORCE_INLINE void  glGetIntegerv(GLenum pname, GLint * data) { tunisGL.tunisGetIntegerv(pname, data); }
TUNIS_FORCE_INLINE void  glGetInternalformatSampleivNV(GLenum target, GLenum internalformat, GLsizei samples, GLenum pname, GLsizei bufSize, GLint * params) { tunisGL.tunisGetInternalformatSampleivNV(target, internalformat, samples, pname, bufSize, params); }
TUNIS_FORCE_INLINE void  glGetInternalformati64v(GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint64 * params) { tunisGL.tunisGetInternalformati64v(target, internalformat, pname, bufSize, params); }
TUNIS_FORCE_INLINE void  glGetInternalformativ(GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint * params) { tunisGL.tunisGetInternalformativ(target, internalformat, pname, bufSize, params); }
TUNIS_FORCE_INLINE void  glGetInvariantBooleanvEXT(GLuint id, GLenum value, GLboolean * data) { tunisGL.tunisGetInvariantBooleanvEXT(id, value, data); }
TUNIS_FORCE_INLINE void  glGetInvariantFloatvEXT(GLuint id, GLenum value, GLfloat * data) { tunisGL.tunisGetInvariantFloatvEXT(id, value, data); }
TUNIS_FORCE_INLINE void  glGetInvariantIntegervEXT(GLuint id, GLenum value, GLint * data) { tunisGL.tunisGetInvariantIntegervEXT(id, value, data); }
TUNIS_FORCE_INLINE void  glGetLightfv(GLenum light, GLenum pname, GLfloat * params) { tunisGL.tunisGetLightfv(light, pname, params); }
TUNIS_FORCE_INLINE void  glGetLightiv(GLenum light, GLenum pname, GLint * params) { tunisGL.tunisGetLightiv(light, pname, params); }
TUNIS_FORCE_INLINE void  glGetLightxOES(GLenum light, GLenum pname, GLfixed * params) { tunisGL.tunisGetLightxOES(light, pname, params); }
TUNIS_FORCE_INLINE void  glGetLightxv(GLenum light, GLenum pname, GLfixed * params) { tunisGL.tunisGetLightxv(light, pname, params); }
TUNIS_FORCE_INLINE void  glGetLightxvOES(GLenum light, GLenum pname, GLfixed * params) { tunisGL.tunisGetLightxvOES(light, pname, params); }
TUNIS_FORCE_INLINE void  glGetListParameterfvSGIX(GLuint list, GLenum pname, GLfloat * params) { tunisGL.tunisGetListParameterfvSGIX(list, pname, params); }
TUNIS_FORCE_INLINE void  glGetListParameterivSGIX(GLuint list, GLenum pname, GLint * params) { tunisGL.tunisGetListParameterivSGIX(list, pname, params); }
TUNIS_FORCE_INLINE void  glGetLocalConstantBooleanvEXT(GLuint id, GLenum value, GLboolean * data) { tunisGL.tunisGetLocalConstantBooleanvEXT(id, value, data); }
TUNIS_FORCE_INLINE void  glGetLocalConstantFloatvEXT(GLuint id, GLenum value, GLfloat * data) { tunisGL.tunisGetLocalConstantFloatvEXT(id, value, data); }
TUNIS_FORCE_INLINE void  glGetLocalConstantIntegervEXT(GLuint id, GLenum value, GLint * data) { tunisGL.tunisGetLocalConstantIntegervEXT(id, value, data); }
TUNIS_FORCE_INLINE void  glGetMapAttribParameterfvNV(GLenum target, GLuint index, GLenum pname, GLfloat * params) { tunisGL.tunisGetMapAttribParameterfvNV(target, index, pname, params); }
TUNIS_FORCE_INLINE void  glGetMapAttribParameterivNV(GLenum target, GLuint index, GLenum pname, GLint * params) { tunisGL.tunisGetMapAttribParameterivNV(target, index, pname, params); }
TUNIS_FORCE_INLINE void  glGetMapControlPointsNV(GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLboolean packed, void * points) { tunisGL.tunisGetMapControlPointsNV(target, index, type, ustride, vstride, packed, points); }
TUNIS_FORCE_INLINE void  glGetMapParameterfvNV(GLenum target, GLenum pname, GLfloat * params) { tunisGL.tunisGetMapParameterfvNV(target, pname, params); }
TUNIS_FORCE_INLINE void  glGetMapParameterivNV(GLenum target, GLenum pname, GLint * params) { tunisGL.tunisGetMapParameterivNV(target, pname, params); }
TUNIS_FORCE_INLINE void  glGetMapdv(GLenum target, GLenum query, GLdouble * v) { tunisGL.tunisGetMapdv(target, query, v); }
TUNIS_FORCE_INLINE void  glGetMapfv(GLenum target, GLenum query, GLfloat * v) { tunisGL.tunisGetMapfv(target, query, v); }
TUNIS_FORCE_INLINE void  glGetMapiv(GLenum target, GLenum query, GLint * v) { tunisGL.tunisGetMapiv(target, query, v); }
TUNIS_FORCE_INLINE void  glGetMapxvOES(GLenum target, GLenum query, GLfixed * v) { tunisGL.tunisGetMapxvOES(target, query, v); }
TUNIS_FORCE_INLINE void  glGetMaterialfv(GLenum face, GLenum pname, GLfloat * params) { tunisGL.tunisGetMaterialfv(face, pname, params); }
TUNIS_FORCE_INLINE void  glGetMaterialiv(GLenum face, GLenum pname, GLint * params) { tunisGL.tunisGetMaterialiv(face, pname, params); }
TUNIS_FORCE_INLINE void  glGetMaterialxOES(GLenum face, GLenum pname, GLfixed param) { tunisGL.tunisGetMaterialxOES(face, pname, param); }
TUNIS_FORCE_INLINE void  glGetMaterialxv(GLenum face, GLenum pname, GLfixed * params) { tunisGL.tunisGetMaterialxv(face, pname, params); }
TUNIS_FORCE_INLINE void  glGetMaterialxvOES(GLenum face, GLenum pname, GLfixed * params) { tunisGL.tunisGetMaterialxvOES(face, pname, params); }
TUNIS_FORCE_INLINE void  glGetMemoryObjectParameterivEXT(GLuint memoryObject, GLenum pname, GLint * params) { tunisGL.tunisGetMemoryObjectParameterivEXT(memoryObject, pname, params); }
TUNIS_FORCE_INLINE void  glGetMinmax(GLenum target, GLboolean reset, GLenum format, GLenum type, void * values) { tunisGL.tunisGetMinmax(target, reset, format, type, values); }
TUNIS_FORCE_INLINE void  glGetMinmaxEXT(GLenum target, GLboolean reset, GLenum format, GLenum type, void * values) { tunisGL.tunisGetMinmaxEXT(target, reset, format, type, values); }
TUNIS_FORCE_INLINE void  glGetMinmaxParameterfv(GLenum target, GLenum pname, GLfloat * params) { tunisGL.tunisGetMinmaxParameterfv(target, pname, params); }
TUNIS_FORCE_INLINE void  glGetMinmaxParameterfvEXT(GLenum target, GLenum pname, GLfloat * params) { tunisGL.tunisGetMinmaxParameterfvEXT(target, pname, params); }
TUNIS_FORCE_INLINE void  glGetMinmaxParameteriv(GLenum target, GLenum pname, GLint * params) { tunisGL.tunisGetMinmaxParameteriv(target, pname, params); }
TUNIS_FORCE_INLINE void  glGetMinmaxParameterivEXT(GLenum target, GLenum pname, GLint * params) { tunisGL.tunisGetMinmaxParameterivEXT(target, pname, params); }
TUNIS_FORCE_INLINE void  glGetMultiTexEnvfvEXT(GLenum texunit, GLenum target, GLenum pname, GLfloat * params) { tunisGL.tunisGetMultiTexEnvfvEXT(texunit, target, pname, params); }
TUNIS_FORCE_INLINE void  glGetMultiTexEnvivEXT(GLenum texunit, GLenum target, GLenum pname, GLint * params) { tunisGL.tunisGetMultiTexEnvivEXT(texunit, target, pname, params); }
TUNIS_FORCE_INLINE void  glGetMultiTexGendvEXT(GLenum texunit, GLenum coord, GLenum pname, GLdouble * params) { tunisGL.tunisGetMultiTexGendvEXT(texunit, coord, pname, params); }
TUNIS_FORCE_INLINE void  glGetMultiTexGenfvEXT(GLenum texunit, GLenum coord, GLenum pname, GLfloat * params) { tunisGL.tunisGetMultiTexGenfvEXT(texunit, coord, pname, params); }
TUNIS_FORCE_INLINE void  glGetMultiTexGenivEXT(GLenum texunit, GLenum coord, GLenum pname, GLint * params) { tunisGL.tunisGetMultiTexGenivEXT(texunit, coord, pname, params); }
TUNIS_FORCE_INLINE void  glGetMultiTexImageEXT(GLenum texunit, GLenum target, GLint level, GLenum format, GLenum type, void * pixels) { tunisGL.tunisGetMultiTexImageEXT(texunit, target, level, format, type, pixels); }
TUNIS_FORCE_INLINE void  glGetMultiTexLevelParameterfvEXT(GLenum texunit, GLenum target, GLint level, GLenum pname, GLfloat * params) { tunisGL.tunisGetMultiTexLevelParameterfvEXT(texunit, target, level, pname, params); }
TUNIS_FORCE_INLINE void  glGetMultiTexLevelParameterivEXT(GLenum texunit, GLenum target, GLint level, GLenum pname, GLint * params) { tunisGL.tunisGetMultiTexLevelParameterivEXT(texunit, target, level, pname, params); }
TUNIS_FORCE_INLINE void  glGetMultiTexParameterIivEXT(GLenum texunit, GLenum target, GLenum pname, GLint * params) { tunisGL.tunisGetMultiTexParameterIivEXT(texunit, target, pname, params); }
TUNIS_FORCE_INLINE void  glGetMultiTexParameterIuivEXT(GLenum texunit, GLenum target, GLenum pname, GLuint * params) { tunisGL.tunisGetMultiTexParameterIuivEXT(texunit, target, pname, params); }
TUNIS_FORCE_INLINE void  glGetMultiTexParameterfvEXT(GLenum texunit, GLenum target, GLenum pname, GLfloat * params) { tunisGL.tunisGetMultiTexParameterfvEXT(texunit, target, pname, params); }
TUNIS_FORCE_INLINE void  glGetMultiTexParameterivEXT(GLenum texunit, GLenum target, GLenum pname, GLint * params) { tunisGL.tunisGetMultiTexParameterivEXT(texunit, target, pname, params); }
TUNIS_FORCE_INLINE void  glGetMultisamplefv(GLenum pname, GLuint index, GLfloat * val) { tunisGL.tunisGetMultisamplefv(pname, index, val); }
TUNIS_FORCE_INLINE void  glGetMultisamplefvNV(GLenum pname, GLuint index, GLfloat * val) { tunisGL.tunisGetMultisamplefvNV(pname, index, val); }
TUNIS_FORCE_INLINE void  glGetNamedBufferParameteri64v(GLuint buffer, GLenum pname, GLint64 * params) { tunisGL.tunisGetNamedBufferParameteri64v(buffer, pname, params); }
TUNIS_FORCE_INLINE void  glGetNamedBufferParameteriv(GLuint buffer, GLenum pname, GLint * params) { tunisGL.tunisGetNamedBufferParameteriv(buffer, pname, params); }
TUNIS_FORCE_INLINE void  glGetNamedBufferParameterivEXT(GLuint buffer, GLenum pname, GLint * params) { tunisGL.tunisGetNamedBufferParameterivEXT(buffer, pname, params); }
TUNIS_FORCE_INLINE void  glGetNamedBufferParameterui64vNV(GLuint buffer, GLenum pname, GLuint64EXT * params) { tunisGL.tunisGetNamedBufferParameterui64vNV(buffer, pname, params); }
TUNIS_FORCE_INLINE void  glGetNamedBufferPointerv(GLuint buffer, GLenum pname, void ** params) { tunisGL.tunisGetNamedBufferPointerv(buffer, pname, params); }
TUNIS_FORCE_INLINE void  glGetNamedBufferPointervEXT(GLuint buffer, GLenum pname, void ** params) { tunisGL.tunisGetNamedBufferPointervEXT(buffer, pname, params); }
TUNIS_FORCE_INLINE void  glGetNamedBufferSubData(GLuint buffer, GLintptr offset, GLsizeiptr size, void * data) { tunisGL.tunisGetNamedBufferSubData(buffer, offset, size, data); }
TUNIS_FORCE_INLINE void  glGetNamedBufferSubDataEXT(GLuint buffer, GLintptr offset, GLsizeiptr size, void * data) { tunisGL.tunisGetNamedBufferSubDataEXT(buffer, offset, size, data); }
TUNIS_FORCE_INLINE void  glGetNamedFramebufferAttachmentParameteriv(GLuint framebuffer, GLenum attachment, GLenum pname, GLint * params) { tunisGL.tunisGetNamedFramebufferAttachmentParameteriv(framebuffer, attachment, pname, params); }
TUNIS_FORCE_INLINE void  glGetNamedFramebufferAttachmentParameterivEXT(GLuint framebuffer, GLenum attachment, GLenum pname, GLint * params) { tunisGL.tunisGetNamedFramebufferAttachmentParameterivEXT(framebuffer, attachment, pname, params); }
TUNIS_FORCE_INLINE void  glGetNamedFramebufferParameterfvAMD(GLuint framebuffer, GLenum pname, GLuint numsamples, GLuint pixelindex, GLsizei size, GLfloat * values) { tunisGL.tunisGetNamedFramebufferParameterfvAMD(framebuffer, pname, numsamples, pixelindex, size, values); }
TUNIS_FORCE_INLINE void  glGetNamedFramebufferParameteriv(GLuint framebuffer, GLenum pname, GLint * param) { tunisGL.tunisGetNamedFramebufferParameteriv(framebuffer, pname, param); }
TUNIS_FORCE_INLINE void  glGetNamedFramebufferParameterivEXT(GLuint framebuffer, GLenum pname, GLint * params) { tunisGL.tunisGetNamedFramebufferParameterivEXT(framebuffer, pname, params); }
TUNIS_FORCE_INLINE void  glGetNamedProgramLocalParameterIivEXT(GLuint program, GLenum target, GLuint index, GLint * params) { tunisGL.tunisGetNamedProgramLocalParameterIivEXT(program, target, index, params); }
TUNIS_FORCE_INLINE void  glGetNamedProgramLocalParameterIuivEXT(GLuint program, GLenum target, GLuint index, GLuint * params) { tunisGL.tunisGetNamedProgramLocalParameterIuivEXT(program, target, index, params); }
TUNIS_FORCE_INLINE void  glGetNamedProgramLocalParameterdvEXT(GLuint program, GLenum target, GLuint index, GLdouble * params) { tunisGL.tunisGetNamedProgramLocalParameterdvEXT(program, target, index, params); }
TUNIS_FORCE_INLINE void  glGetNamedProgramLocalParameterfvEXT(GLuint program, GLenum target, GLuint index, GLfloat * params) { tunisGL.tunisGetNamedProgramLocalParameterfvEXT(program, target, index, params); }
TUNIS_FORCE_INLINE void  glGetNamedProgramStringEXT(GLuint program, GLenum target, GLenum pname, void * string) { tunisGL.tunisGetNamedProgramStringEXT(program, target, pname, string); }
TUNIS_FORCE_INLINE void  glGetNamedProgramivEXT(GLuint program, GLenum target, GLenum pname, GLint * params) { tunisGL.tunisGetNamedProgramivEXT(program, target, pname, params); }
TUNIS_FORCE_INLINE void  glGetNamedRenderbufferParameteriv(GLuint renderbuffer, GLenum pname, GLint * params) { tunisGL.tunisGetNamedRenderbufferParameteriv(renderbuffer, pname, params); }
TUNIS_FORCE_INLINE void  glGetNamedRenderbufferParameterivEXT(GLuint renderbuffer, GLenum pname, GLint * params) { tunisGL.tunisGetNamedRenderbufferParameterivEXT(renderbuffer, pname, params); }
TUNIS_FORCE_INLINE void  glGetNamedStringARB(GLint namelen, const GLchar * name, GLsizei bufSize, GLint * stringlen, GLchar * string) { tunisGL.tunisGetNamedStringARB(namelen, name, bufSize, stringlen, string); }
TUNIS_FORCE_INLINE void  glGetNamedStringivARB(GLint namelen, const GLchar * name, GLenum pname, GLint * params) { tunisGL.tunisGetNamedStringivARB(namelen, name, pname, params); }
TUNIS_FORCE_INLINE void  glGetNextPerfQueryIdINTEL(GLuint queryId, GLuint * nextQueryId) { tunisGL.tunisGetNextPerfQueryIdINTEL(queryId, nextQueryId); }
TUNIS_FORCE_INLINE void  glGetObjectBufferfvATI(GLuint buffer, GLenum pname, GLfloat * params) { tunisGL.tunisGetObjectBufferfvATI(buffer, pname, params); }
TUNIS_FORCE_INLINE void  glGetObjectBufferivATI(GLuint buffer, GLenum pname, GLint * params) { tunisGL.tunisGetObjectBufferivATI(buffer, pname, params); }
TUNIS_FORCE_INLINE void  glGetObjectLabel(GLenum identifier, GLuint name, GLsizei bufSize, GLsizei * length, GLchar * label) { tunisGL.tunisGetObjectLabel(identifier, name, bufSize, length, label); }
TUNIS_FORCE_INLINE void  glGetObjectLabelEXT(GLenum type, GLuint object, GLsizei bufSize, GLsizei * length, GLchar * label) { tunisGL.tunisGetObjectLabelEXT(type, object, bufSize, length, label); }
TUNIS_FORCE_INLINE void  glGetObjectLabelKHR(GLenum identifier, GLuint name, GLsizei bufSize, GLsizei * length, GLchar * label) { tunisGL.tunisGetObjectLabelKHR(identifier, name, bufSize, length, label); }
TUNIS_FORCE_INLINE void  glGetObjectParameterfvARB(GLhandleARB obj, GLenum pname, GLfloat * params) { tunisGL.tunisGetObjectParameterfvARB(obj, pname, params); }
TUNIS_FORCE_INLINE void  glGetObjectParameterivAPPLE(GLenum objectType, GLuint name, GLenum pname, GLint * params) { tunisGL.tunisGetObjectParameterivAPPLE(objectType, name, pname, params); }
TUNIS_FORCE_INLINE void  glGetObjectParameterivARB(GLhandleARB obj, GLenum pname, GLint * params) { tunisGL.tunisGetObjectParameterivARB(obj, pname, params); }
TUNIS_FORCE_INLINE void  glGetObjectPtrLabel(const void * ptr, GLsizei bufSize, GLsizei * length, GLchar * label) { tunisGL.tunisGetObjectPtrLabel(ptr, bufSize, length, label); }
TUNIS_FORCE_INLINE void  glGetObjectPtrLabelKHR(const void * ptr, GLsizei bufSize, GLsizei * length, GLchar * label) { tunisGL.tunisGetObjectPtrLabelKHR(ptr, bufSize, length, label); }
TUNIS_FORCE_INLINE void  glGetOcclusionQueryivNV(GLuint id, GLenum pname, GLint * params) { tunisGL.tunisGetOcclusionQueryivNV(id, pname, params); }
TUNIS_FORCE_INLINE void  glGetOcclusionQueryuivNV(GLuint id, GLenum pname, GLuint * params) { tunisGL.tunisGetOcclusionQueryuivNV(id, pname, params); }
TUNIS_FORCE_INLINE void  glGetPathColorGenfvNV(GLenum color, GLenum pname, GLfloat * value) { tunisGL.tunisGetPathColorGenfvNV(color, pname, value); }
TUNIS_FORCE_INLINE void  glGetPathColorGenivNV(GLenum color, GLenum pname, GLint * value) { tunisGL.tunisGetPathColorGenivNV(color, pname, value); }
TUNIS_FORCE_INLINE void  glGetPathCommandsNV(GLuint path, GLubyte * commands) { tunisGL.tunisGetPathCommandsNV(path, commands); }
TUNIS_FORCE_INLINE void  glGetPathCoordsNV(GLuint path, GLfloat * coords) { tunisGL.tunisGetPathCoordsNV(path, coords); }
TUNIS_FORCE_INLINE void  glGetPathDashArrayNV(GLuint path, GLfloat * dashArray) { tunisGL.tunisGetPathDashArrayNV(path, dashArray); }
TUNIS_FORCE_INLINE GLfloat glGetPathLengthNV(GLuint path, GLsizei startSegment, GLsizei numSegments) { return tunisGL.tunisGetPathLengthNV(path, startSegment, numSegments); }
TUNIS_FORCE_INLINE void  glGetPathMetricRangeNV(GLbitfield metricQueryMask, GLuint firstPathName, GLsizei numPaths, GLsizei stride, GLfloat * metrics) { tunisGL.tunisGetPathMetricRangeNV(metricQueryMask, firstPathName, numPaths, stride, metrics); }
TUNIS_FORCE_INLINE void  glGetPathMetricsNV(GLbitfield metricQueryMask, GLsizei numPaths, GLenum pathNameType, const void * paths, GLuint pathBase, GLsizei stride, GLfloat * metrics) { tunisGL.tunisGetPathMetricsNV(metricQueryMask, numPaths, pathNameType, paths, pathBase, stride, metrics); }
TUNIS_FORCE_INLINE void  glGetPathParameterfvNV(GLuint path, GLenum pname, GLfloat * value) { tunisGL.tunisGetPathParameterfvNV(path, pname, value); }
TUNIS_FORCE_INLINE void  glGetPathParameterivNV(GLuint path, GLenum pname, GLint * value) { tunisGL.tunisGetPathParameterivNV(path, pname, value); }
TUNIS_FORCE_INLINE void  glGetPathSpacingNV(GLenum pathListMode, GLsizei numPaths, GLenum pathNameType, const void * paths, GLuint pathBase, GLfloat advanceScale, GLfloat kerningScale, GLenum transformType, GLfloat * returnedSpacing) { tunisGL.tunisGetPathSpacingNV(pathListMode, numPaths, pathNameType, paths, pathBase, advanceScale, kerningScale, transformType, returnedSpacing); }
TUNIS_FORCE_INLINE void  glGetPathTexGenfvNV(GLenum texCoordSet, GLenum pname, GLfloat * value) { tunisGL.tunisGetPathTexGenfvNV(texCoordSet, pname, value); }
TUNIS_FORCE_INLINE void  glGetPathTexGenivNV(GLenum texCoordSet, GLenum pname, GLint * value) { tunisGL.tunisGetPathTexGenivNV(texCoordSet, pname, value); }
TUNIS_FORCE_INLINE void  glGetPerfCounterInfoINTEL(GLuint queryId, GLuint counterId, GLuint counterNameLength, GLchar * counterName, GLuint counterDescLength, GLchar * counterDesc, GLuint * counterOffset, GLuint * counterDataSize, GLuint * counterTypeEnum, GLuint * counterDataTypeEnum, GLuint64 * rawCounterMaxValue) { tunisGL.tunisGetPerfCounterInfoINTEL(queryId, counterId, counterNameLength, counterName, counterDescLength, counterDesc, counterOffset, counterDataSize, counterTypeEnum, counterDataTypeEnum, rawCounterMaxValue); }
TUNIS_FORCE_INLINE void  glGetPerfMonitorCounterDataAMD(GLuint monitor, GLenum pname, GLsizei dataSize, GLuint * data, GLint * bytesWritten) { tunisGL.tunisGetPerfMonitorCounterDataAMD(monitor, pname, dataSize, data, bytesWritten); }
TUNIS_FORCE_INLINE void  glGetPerfMonitorCounterInfoAMD(GLuint group, GLuint counter, GLenum pname, void * data) { tunisGL.tunisGetPerfMonitorCounterInfoAMD(group, counter, pname, data); }
TUNIS_FORCE_INLINE void  glGetPerfMonitorCounterStringAMD(GLuint group, GLuint counter, GLsizei bufSize, GLsizei * length, GLchar * counterString) { tunisGL.tunisGetPerfMonitorCounterStringAMD(group, counter, bufSize, length, counterString); }
TUNIS_FORCE_INLINE void  glGetPerfMonitorCountersAMD(GLuint group, GLint * numCounters, GLint * maxActiveCounters, GLsizei counterSize, GLuint * counters) { tunisGL.tunisGetPerfMonitorCountersAMD(group, numCounters, maxActiveCounters, counterSize, counters); }
TUNIS_FORCE_INLINE void  glGetPerfMonitorGroupStringAMD(GLuint group, GLsizei bufSize, GLsizei * length, GLchar * groupString) { tunisGL.tunisGetPerfMonitorGroupStringAMD(group, bufSize, length, groupString); }
TUNIS_FORCE_INLINE void  glGetPerfMonitorGroupsAMD(GLint * numGroups, GLsizei groupsSize, GLuint * groups) { tunisGL.tunisGetPerfMonitorGroupsAMD(numGroups, groupsSize, groups); }
TUNIS_FORCE_INLINE void  glGetPerfQueryDataINTEL(GLuint queryHandle, GLuint flags, GLsizei dataSize, void * data, GLuint * bytesWritten) { tunisGL.tunisGetPerfQueryDataINTEL(queryHandle, flags, dataSize, data, bytesWritten); }
TUNIS_FORCE_INLINE void  glGetPerfQueryIdByNameINTEL(GLchar * queryName, GLuint * queryId) { tunisGL.tunisGetPerfQueryIdByNameINTEL(queryName, queryId); }
TUNIS_FORCE_INLINE void  glGetPerfQueryInfoINTEL(GLuint queryId, GLuint queryNameLength, GLchar * queryName, GLuint * dataSize, GLuint * noCounters, GLuint * noInstances, GLuint * capsMask) { tunisGL.tunisGetPerfQueryInfoINTEL(queryId, queryNameLength, queryName, dataSize, noCounters, noInstances, capsMask); }
TUNIS_FORCE_INLINE void  glGetPixelMapfv(GLenum map, GLfloat * values) { tunisGL.tunisGetPixelMapfv(map, values); }
TUNIS_FORCE_INLINE void  glGetPixelMapuiv(GLenum map, GLuint * values) { tunisGL.tunisGetPixelMapuiv(map, values); }
TUNIS_FORCE_INLINE void  glGetPixelMapusv(GLenum map, GLushort * values) { tunisGL.tunisGetPixelMapusv(map, values); }
TUNIS_FORCE_INLINE void  glGetPixelMapxv(GLenum map, GLint size, GLfixed * values) { tunisGL.tunisGetPixelMapxv(map, size, values); }
TUNIS_FORCE_INLINE void  glGetPixelTexGenParameterfvSGIS(GLenum pname, GLfloat * params) { tunisGL.tunisGetPixelTexGenParameterfvSGIS(pname, params); }
TUNIS_FORCE_INLINE void  glGetPixelTexGenParameterivSGIS(GLenum pname, GLint * params) { tunisGL.tunisGetPixelTexGenParameterivSGIS(pname, params); }
TUNIS_FORCE_INLINE void  glGetPixelTransformParameterfvEXT(GLenum target, GLenum pname, GLfloat * params) { tunisGL.tunisGetPixelTransformParameterfvEXT(target, pname, params); }
TUNIS_FORCE_INLINE void  glGetPixelTransformParameterivEXT(GLenum target, GLenum pname, GLint * params) { tunisGL.tunisGetPixelTransformParameterivEXT(target, pname, params); }
TUNIS_FORCE_INLINE void  glGetPointerIndexedvEXT(GLenum target, GLuint index, void ** data) { tunisGL.tunisGetPointerIndexedvEXT(target, index, data); }
TUNIS_FORCE_INLINE void  glGetPointeri_vEXT(GLenum pname, GLuint index, void ** params) { tunisGL.tunisGetPointeri_vEXT(pname, index, params); }
TUNIS_FORCE_INLINE void  glGetPointerv(GLenum pname, void ** params) { tunisGL.tunisGetPointerv(pname, params); }
TUNIS_FORCE_INLINE void  glGetPointervEXT(GLenum pname, void ** params) { tunisGL.tunisGetPointervEXT(pname, params); }
TUNIS_FORCE_INLINE void  glGetPointervKHR(GLenum pname, void ** params) { tunisGL.tunisGetPointervKHR(pname, params); }
TUNIS_FORCE_INLINE void  glGetPolygonStipple(GLubyte * mask) { tunisGL.tunisGetPolygonStipple(mask); }
TUNIS_FORCE_INLINE void  glGetProgramBinary(GLuint program, GLsizei bufSize, GLsizei * length, GLenum * binaryFormat, void * binary) { tunisGL.tunisGetProgramBinary(program, bufSize, length, binaryFormat, binary); }
TUNIS_FORCE_INLINE void  glGetProgramBinaryOES(GLuint program, GLsizei bufSize, GLsizei * length, GLenum * binaryFormat, void * binary) { tunisGL.tunisGetProgramBinaryOES(program, bufSize, length, binaryFormat, binary); }
TUNIS_FORCE_INLINE void  glGetProgramEnvParameterIivNV(GLenum target, GLuint index, GLint * params) { tunisGL.tunisGetProgramEnvParameterIivNV(target, index, params); }
TUNIS_FORCE_INLINE void  glGetProgramEnvParameterIuivNV(GLenum target, GLuint index, GLuint * params) { tunisGL.tunisGetProgramEnvParameterIuivNV(target, index, params); }
TUNIS_FORCE_INLINE void  glGetProgramEnvParameterdvARB(GLenum target, GLuint index, GLdouble * params) { tunisGL.tunisGetProgramEnvParameterdvARB(target, index, params); }
TUNIS_FORCE_INLINE void  glGetProgramEnvParameterfvARB(GLenum target, GLuint index, GLfloat * params) { tunisGL.tunisGetProgramEnvParameterfvARB(target, index, params); }
TUNIS_FORCE_INLINE void  glGetProgramInfoLog(GLuint program, GLsizei bufSize, GLsizei * length, GLchar * infoLog) { tunisGL.tunisGetProgramInfoLog(program, bufSize, length, infoLog); }
TUNIS_FORCE_INLINE void  glGetProgramInterfaceiv(GLuint program, GLenum programInterface, GLenum pname, GLint * params) { tunisGL.tunisGetProgramInterfaceiv(program, programInterface, pname, params); }
TUNIS_FORCE_INLINE void  glGetProgramLocalParameterIivNV(GLenum target, GLuint index, GLint * params) { tunisGL.tunisGetProgramLocalParameterIivNV(target, index, params); }
TUNIS_FORCE_INLINE void  glGetProgramLocalParameterIuivNV(GLenum target, GLuint index, GLuint * params) { tunisGL.tunisGetProgramLocalParameterIuivNV(target, index, params); }
TUNIS_FORCE_INLINE void  glGetProgramLocalParameterdvARB(GLenum target, GLuint index, GLdouble * params) { tunisGL.tunisGetProgramLocalParameterdvARB(target, index, params); }
TUNIS_FORCE_INLINE void  glGetProgramLocalParameterfvARB(GLenum target, GLuint index, GLfloat * params) { tunisGL.tunisGetProgramLocalParameterfvARB(target, index, params); }
TUNIS_FORCE_INLINE void  glGetProgramNamedParameterdvNV(GLuint id, GLsizei len, const GLubyte * name, GLdouble * params) { tunisGL.tunisGetProgramNamedParameterdvNV(id, len, name, params); }
TUNIS_FORCE_INLINE void  glGetProgramNamedParameterfvNV(GLuint id, GLsizei len, const GLubyte * name, GLfloat * params) { tunisGL.tunisGetProgramNamedParameterfvNV(id, len, name, params); }
TUNIS_FORCE_INLINE void  glGetProgramParameterdvNV(GLenum target, GLuint index, GLenum pname, GLdouble * params) { tunisGL.tunisGetProgramParameterdvNV(target, index, pname, params); }
TUNIS_FORCE_INLINE void  glGetProgramParameterfvNV(GLenum target, GLuint index, GLenum pname, GLfloat * params) { tunisGL.tunisGetProgramParameterfvNV(target, index, pname, params); }
TUNIS_FORCE_INLINE void  glGetProgramPipelineInfoLog(GLuint pipeline, GLsizei bufSize, GLsizei * length, GLchar * infoLog) { tunisGL.tunisGetProgramPipelineInfoLog(pipeline, bufSize, length, infoLog); }
TUNIS_FORCE_INLINE void  glGetProgramPipelineInfoLogEXT(GLuint pipeline, GLsizei bufSize, GLsizei * length, GLchar * infoLog) { tunisGL.tunisGetProgramPipelineInfoLogEXT(pipeline, bufSize, length, infoLog); }
TUNIS_FORCE_INLINE void  glGetProgramPipelineiv(GLuint pipeline, GLenum pname, GLint * params) { tunisGL.tunisGetProgramPipelineiv(pipeline, pname, params); }
TUNIS_FORCE_INLINE void  glGetProgramPipelineivEXT(GLuint pipeline, GLenum pname, GLint * params) { if (tunisGLSupport(GL_ES_VERSION_2_0) && (pname == GL_CURRENT_PROGRAM)) { pname = GL_ACTIVE_PROGRAM; } else if (tunisGLSupport(GL_VERSION_1_0) && (pname == GL_ACTIVE_PROGRAM)) { pname = GL_CURRENT_PROGRAM; } tunisGL.tunisGetProgramPipelineivEXT(pipeline, pname, params); }
TUNIS_FORCE_INLINE GLuint glGetProgramResourceIndex(GLuint program, GLenum programInterface, const GLchar * name) { return tunisGL.tunisGetProgramResourceIndex(program, programInterface, name); }
TUNIS_FORCE_INLINE GLint glGetProgramResourceLocation(GLuint program, GLenum programInterface, const GLchar * name) { return tunisGL.tunisGetProgramResourceLocation(program, programInterface, name); }
TUNIS_FORCE_INLINE GLint glGetProgramResourceLocationIndex(GLuint program, GLenum programInterface, const GLchar * name) { return tunisGL.tunisGetProgramResourceLocationIndex(program, programInterface, name); }
TUNIS_FORCE_INLINE GLint glGetProgramResourceLocationIndexEXT(GLuint program, GLenum programInterface, const GLchar * name) { return tunisGL.tunisGetProgramResourceLocationIndexEXT(program, programInterface, name); }
TUNIS_FORCE_INLINE void  glGetProgramResourceName(GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei * length, GLchar * name) { tunisGL.tunisGetProgramResourceName(program, programInterface, index, bufSize, length, name); }
TUNIS_FORCE_INLINE void  glGetProgramResourcefvNV(GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum * props, GLsizei bufSize, GLsizei * length, GLfloat * params) { tunisGL.tunisGetProgramResourcefvNV(program, programInterface, index, propCount, props, bufSize, length, params); }
TUNIS_FORCE_INLINE void  glGetProgramResourceiv(GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum * props, GLsizei bufSize, GLsizei * length, GLint * params) { tunisGL.tunisGetProgramResourceiv(program, programInterface, index, propCount, props, bufSize, length, params); }
TUNIS_FORCE_INLINE void  glGetProgramStageiv(GLuint program, GLenum shadertype, GLenum pname, GLint * values) { tunisGL.tunisGetProgramStageiv(program, shadertype, pname, values); }
TUNIS_FORCE_INLINE void  glGetProgramStringARB(GLenum target, GLenum pname, void * string) { tunisGL.tunisGetProgramStringARB(target, pname, string); }
TUNIS_FORCE_INLINE void  glGetProgramStringNV(GLuint id, GLenum pname, GLubyte * program) { tunisGL.tunisGetProgramStringNV(id, pname, program); }
TUNIS_FORCE_INLINE void  glGetProgramSubroutineParameteruivNV(GLenum target, GLuint index, GLuint * param) { tunisGL.tunisGetProgramSubroutineParameteruivNV(target, index, param); }
TUNIS_FORCE_INLINE void  glGetProgramiv(GLuint program, GLenum pname, GLint * params) { tunisGL.tunisGetProgramiv(program, pname, params); }
TUNIS_FORCE_INLINE void  glGetProgramivARB(GLenum target, GLenum pname, GLint * params) { tunisGL.tunisGetProgramivARB(target, pname, params); }
TUNIS_FORCE_INLINE void  glGetProgramivNV(GLuint id, GLenum pname, GLint * params) { tunisGL.tunisGetProgramivNV(id, pname, params); }
TUNIS_FORCE_INLINE void  glGetQueryBufferObjecti64v(GLuint id, GLuint buffer, GLenum pname, GLintptr offset) { tunisGL.tunisGetQueryBufferObjecti64v(id, buffer, pname, offset); }
TUNIS_FORCE_INLINE void  glGetQueryBufferObjectiv(GLuint id, GLuint buffer, GLenum pname, GLintptr offset) { tunisGL.tunisGetQueryBufferObjectiv(id, buffer, pname, offset); }
TUNIS_FORCE_INLINE void  glGetQueryBufferObjectui64v(GLuint id, GLuint buffer, GLenum pname, GLintptr offset) { tunisGL.tunisGetQueryBufferObjectui64v(id, buffer, pname, offset); }
TUNIS_FORCE_INLINE void  glGetQueryBufferObjectuiv(GLuint id, GLuint buffer, GLenum pname, GLintptr offset) { tunisGL.tunisGetQueryBufferObjectuiv(id, buffer, pname, offset); }
TUNIS_FORCE_INLINE void  glGetQueryIndexediv(GLenum target, GLuint index, GLenum pname, GLint * params) { tunisGL.tunisGetQueryIndexediv(target, index, pname, params); }
TUNIS_FORCE_INLINE void  glGetQueryObjecti64v(GLuint id, GLenum pname, GLint64 * params) { tunisGL.tunisGetQueryObjecti64v(id, pname, params); }
TUNIS_FORCE_INLINE void  glGetQueryObjecti64vEXT(GLuint id, GLenum pname, GLint64 * params) { tunisGL.tunisGetQueryObjecti64vEXT(id, pname, params); }
TUNIS_FORCE_INLINE void  glGetQueryObjectiv(GLuint id, GLenum pname, GLint * params) { tunisGL.tunisGetQueryObjectiv(id, pname, params); }
TUNIS_FORCE_INLINE void  glGetQueryObjectivARB(GLuint id, GLenum pname, GLint * params) { tunisGL.tunisGetQueryObjectivARB(id, pname, params); }
TUNIS_FORCE_INLINE void  glGetQueryObjectivEXT(GLuint id, GLenum pname, GLint * params) { tunisGL.tunisGetQueryObjectivEXT(id, pname, params); }
TUNIS_FORCE_INLINE void  glGetQueryObjectui64v(GLuint id, GLenum pname, GLuint64 * params) { tunisGL.tunisGetQueryObjectui64v(id, pname, params); }
TUNIS_FORCE_INLINE void  glGetQueryObjectui64vEXT(GLuint id, GLenum pname, GLuint64 * params) { tunisGL.tunisGetQueryObjectui64vEXT(id, pname, params); }
TUNIS_FORCE_INLINE void  glGetQueryObjectuiv(GLuint id, GLenum pname, GLuint * params) { tunisGL.tunisGetQueryObjectuiv(id, pname, params); }
TUNIS_FORCE_INLINE void  glGetQueryObjectuivARB(GLuint id, GLenum pname, GLuint * params) { tunisGL.tunisGetQueryObjectuivARB(id, pname, params); }
TUNIS_FORCE_INLINE void  glGetQueryObjectuivEXT(GLuint id, GLenum pname, GLuint * params) { tunisGL.tunisGetQueryObjectuivEXT(id, pname, params); }
TUNIS_FORCE_INLINE void  glGetQueryiv(GLenum target, GLenum pname, GLint * params) { tunisGL.tunisGetQueryiv(target, pname, params); }
TUNIS_FORCE_INLINE void  glGetQueryivARB(GLenum target, GLenum pname, GLint * params) { tunisGL.tunisGetQueryivARB(target, pname, params); }
TUNIS_FORCE_INLINE void  glGetQueryivEXT(GLenum target, GLenum pname, GLint * params) { tunisGL.tunisGetQueryivEXT(target, pname, params); }
TUNIS_FORCE_INLINE void  glGetRenderbufferParameteriv(GLenum target, GLenum pname, GLint * params) { tunisGL.tunisGetRenderbufferParameteriv(target, pname, params); }
TUNIS_FORCE_INLINE void  glGetRenderbufferParameterivEXT(GLenum target, GLenum pname, GLint * params) { tunisGL.tunisGetRenderbufferParameterivEXT(target, pname, params); }
TUNIS_FORCE_INLINE void  glGetRenderbufferParameterivOES(GLenum target, GLenum pname, GLint * params) { tunisGL.tunisGetRenderbufferParameterivOES(target, pname, params); }
TUNIS_FORCE_INLINE void  glGetSamplerParameterIiv(GLuint sampler, GLenum pname, GLint * params) { tunisGL.tunisGetSamplerParameterIiv(sampler, pname, params); }
TUNIS_FORCE_INLINE void  glGetSamplerParameterIivEXT(GLuint sampler, GLenum pname, GLint * params) { tunisGL.tunisGetSamplerParameterIivEXT(sampler, pname, params); }
TUNIS_FORCE_INLINE void  glGetSamplerParameterIivOES(GLuint sampler, GLenum pname, GLint * params) { tunisGL.tunisGetSamplerParameterIivOES(sampler, pname, params); }
TUNIS_FORCE_INLINE void  glGetSamplerParameterIuiv(GLuint sampler, GLenum pname, GLuint * params) { tunisGL.tunisGetSamplerParameterIuiv(sampler, pname, params); }
TUNIS_FORCE_INLINE void  glGetSamplerParameterIuivEXT(GLuint sampler, GLenum pname, GLuint * params) { tunisGL.tunisGetSamplerParameterIuivEXT(sampler, pname, params); }
TUNIS_FORCE_INLINE void  glGetSamplerParameterIuivOES(GLuint sampler, GLenum pname, GLuint * params) { tunisGL.tunisGetSamplerParameterIuivOES(sampler, pname, params); }
TUNIS_FORCE_INLINE void  glGetSamplerParameterfv(GLuint sampler, GLenum pname, GLfloat * params) { tunisGL.tunisGetSamplerParameterfv(sampler, pname, params); }
TUNIS_FORCE_INLINE void  glGetSamplerParameteriv(GLuint sampler, GLenum pname, GLint * params) { tunisGL.tunisGetSamplerParameteriv(sampler, pname, params); }
TUNIS_FORCE_INLINE void  glGetSemaphoreParameterui64vEXT(GLuint semaphore, GLenum pname, GLuint64 * params) { tunisGL.tunisGetSemaphoreParameterui64vEXT(semaphore, pname, params); }
TUNIS_FORCE_INLINE void  glGetSeparableFilter(GLenum target, GLenum format, GLenum type, void * row, void * column, void * span) { tunisGL.tunisGetSeparableFilter(target, format, type, row, column, span); }
TUNIS_FORCE_INLINE void  glGetSeparableFilterEXT(GLenum target, GLenum format, GLenum type, void * row, void * column, void * span) { tunisGL.tunisGetSeparableFilterEXT(target, format, type, row, column, span); }
TUNIS_FORCE_INLINE void  glGetShaderInfoLog(GLuint shader, GLsizei bufSize, GLsizei * length, GLchar * infoLog) { tunisGL.tunisGetShaderInfoLog(shader, bufSize, length, infoLog); }
TUNIS_FORCE_INLINE void  glGetShaderPrecisionFormat(GLenum shadertype, GLenum precisiontype, GLint * range, GLint * precision) { tunisGL.tunisGetShaderPrecisionFormat(shadertype, precisiontype, range, precision); }
TUNIS_FORCE_INLINE void  glGetShaderSource(GLuint shader, GLsizei bufSize, GLsizei * length, GLchar * source) { tunisGL.tunisGetShaderSource(shader, bufSize, length, source); }
TUNIS_FORCE_INLINE void  glGetShaderSourceARB(GLhandleARB obj, GLsizei maxLength, GLsizei * length, GLcharARB * source) { tunisGL.tunisGetShaderSourceARB(obj, maxLength, length, source); }
TUNIS_FORCE_INLINE void  glGetShaderiv(GLuint shader, GLenum pname, GLint * params) { tunisGL.tunisGetShaderiv(shader, pname, params); }
TUNIS_FORCE_INLINE void  glGetSharpenTexFuncSGIS(GLenum target, GLfloat * points) { tunisGL.tunisGetSharpenTexFuncSGIS(target, points); }
TUNIS_FORCE_INLINE GLushort glGetStageIndexNV(GLenum shadertype) { return tunisGL.tunisGetStageIndexNV(shadertype); }
TUNIS_FORCE_INLINE const GLubyte * glGetString(GLenum name) { return tunisGL.tunisGetString(name); }
TUNIS_FORCE_INLINE const GLubyte * glGetStringi(GLenum name, GLuint index) { return tunisGL.tunisGetStringi(name, index); }
TUNIS_FORCE_INLINE GLuint glGetSubroutineIndex(GLuint program, GLenum shadertype, const GLchar * name) { return tunisGL.tunisGetSubroutineIndex(program, shadertype, name); }
TUNIS_FORCE_INLINE GLint glGetSubroutineUniformLocation(GLuint program, GLenum shadertype, const GLchar * name) { return tunisGL.tunisGetSubroutineUniformLocation(program, shadertype, name); }
TUNIS_FORCE_INLINE void  glGetSynciv(GLsync sync, GLenum pname, GLsizei bufSize, GLsizei * length, GLint * values) { tunisGL.tunisGetSynciv(sync, pname, bufSize, length, values); }
TUNIS_FORCE_INLINE void  glGetSyncivAPPLE(GLsync sync, GLenum pname, GLsizei bufSize, GLsizei * length, GLint * values) { tunisGL.tunisGetSyncivAPPLE(sync, pname, bufSize, length, values); }
TUNIS_FORCE_INLINE void  glGetTexBumpParameterfvATI(GLenum pname, GLfloat * param) { tunisGL.tunisGetTexBumpParameterfvATI(pname, param); }
TUNIS_FORCE_INLINE void  glGetTexBumpParameterivATI(GLenum pname, GLint * param) { tunisGL.tunisGetTexBumpParameterivATI(pname, param); }
TUNIS_FORCE_INLINE void  glGetTexEnvfv(GLenum target, GLenum pname, GLfloat * params) { tunisGL.tunisGetTexEnvfv(target, pname, params); }
TUNIS_FORCE_INLINE void  glGetTexEnviv(GLenum target, GLenum pname, GLint * params) { tunisGL.tunisGetTexEnviv(target, pname, params); }
TUNIS_FORCE_INLINE void  glGetTexEnvxv(GLenum target, GLenum pname, GLfixed * params) { tunisGL.tunisGetTexEnvxv(target, pname, params); }
TUNIS_FORCE_INLINE void  glGetTexEnvxvOES(GLenum target, GLenum pname, GLfixed * params) { tunisGL.tunisGetTexEnvxvOES(target, pname, params); }
TUNIS_FORCE_INLINE void  glGetTexFilterFuncSGIS(GLenum target, GLenum filter, GLfloat * weights) { tunisGL.tunisGetTexFilterFuncSGIS(target, filter, weights); }
TUNIS_FORCE_INLINE void  glGetTexGendv(GLenum coord, GLenum pname, GLdouble * params) { tunisGL.tunisGetTexGendv(coord, pname, params); }
TUNIS_FORCE_INLINE void  glGetTexGenfv(GLenum coord, GLenum pname, GLfloat * params) { tunisGL.tunisGetTexGenfv(coord, pname, params); }
TUNIS_FORCE_INLINE void  glGetTexGenfvOES(GLenum coord, GLenum pname, GLfloat * params) { tunisGL.tunisGetTexGenfvOES(coord, pname, params); }
TUNIS_FORCE_INLINE void  glGetTexGeniv(GLenum coord, GLenum pname, GLint * params) { tunisGL.tunisGetTexGeniv(coord, pname, params); }
TUNIS_FORCE_INLINE void  glGetTexGenivOES(GLenum coord, GLenum pname, GLint * params) { tunisGL.tunisGetTexGenivOES(coord, pname, params); }
TUNIS_FORCE_INLINE void  glGetTexGenxvOES(GLenum coord, GLenum pname, GLfixed * params) { tunisGL.tunisGetTexGenxvOES(coord, pname, params); }
TUNIS_FORCE_INLINE void  glGetTexImage(GLenum target, GLint level, GLenum format, GLenum type, void * pixels) { tunisGL.tunisGetTexImage(target, level, format, type, pixels); }
TUNIS_FORCE_INLINE void  glGetTexLevelParameterfv(GLenum target, GLint level, GLenum pname, GLfloat * params) { tunisGL.tunisGetTexLevelParameterfv(target, level, pname, params); }
TUNIS_FORCE_INLINE void  glGetTexLevelParameteriv(GLenum target, GLint level, GLenum pname, GLint * params) { tunisGL.tunisGetTexLevelParameteriv(target, level, pname, params); }
TUNIS_FORCE_INLINE void  glGetTexLevelParameterxvOES(GLenum target, GLint level, GLenum pname, GLfixed * params) { tunisGL.tunisGetTexLevelParameterxvOES(target, level, pname, params); }
TUNIS_FORCE_INLINE void  glGetTexParameterIiv(GLenum target, GLenum pname, GLint * params) { tunisGL.tunisGetTexParameterIiv(target, pname, params); }
TUNIS_FORCE_INLINE void  glGetTexParameterIivEXT(GLenum target, GLenum pname, GLint * params) { tunisGL.tunisGetTexParameterIivEXT(target, pname, params); }
TUNIS_FORCE_INLINE void  glGetTexParameterIivOES(GLenum target, GLenum pname, GLint * params) { tunisGL.tunisGetTexParameterIivOES(target, pname, params); }
TUNIS_FORCE_INLINE void  glGetTexParameterIuiv(GLenum target, GLenum pname, GLuint * params) { tunisGL.tunisGetTexParameterIuiv(target, pname, params); }
TUNIS_FORCE_INLINE void  glGetTexParameterIuivEXT(GLenum target, GLenum pname, GLuint * params) { tunisGL.tunisGetTexParameterIuivEXT(target, pname, params); }
TUNIS_FORCE_INLINE void  glGetTexParameterIuivOES(GLenum target, GLenum pname, GLuint * params) { tunisGL.tunisGetTexParameterIuivOES(target, pname, params); }
TUNIS_FORCE_INLINE void  glGetTexParameterPointervAPPLE(GLenum target, GLenum pname, void ** params) { tunisGL.tunisGetTexParameterPointervAPPLE(target, pname, params); }
TUNIS_FORCE_INLINE void  glGetTexParameterfv(GLenum target, GLenum pname, GLfloat * params) { tunisGL.tunisGetTexParameterfv(target, pname, params); }
TUNIS_FORCE_INLINE void  glGetTexParameteriv(GLenum target, GLenum pname, GLint * params) { tunisGL.tunisGetTexParameteriv(target, pname, params); }
TUNIS_FORCE_INLINE void  glGetTexParameterxv(GLenum target, GLenum pname, GLfixed * params) { tunisGL.tunisGetTexParameterxv(target, pname, params); }
TUNIS_FORCE_INLINE void  glGetTexParameterxvOES(GLenum target, GLenum pname, GLfixed * params) { tunisGL.tunisGetTexParameterxvOES(target, pname, params); }
TUNIS_FORCE_INLINE GLuint64 glGetTextureHandleARB(GLuint texture) { return tunisGL.tunisGetTextureHandleARB(texture); }
TUNIS_FORCE_INLINE GLuint64 glGetTextureHandleIMG(GLuint texture) { return tunisGL.tunisGetTextureHandleIMG(texture); }
TUNIS_FORCE_INLINE GLuint64 glGetTextureHandleNV(GLuint texture) { return tunisGL.tunisGetTextureHandleNV(texture); }
TUNIS_FORCE_INLINE void  glGetTextureImage(GLuint texture, GLint level, GLenum format, GLenum type, GLsizei bufSize, void * pixels) { tunisGL.tunisGetTextureImage(texture, level, format, type, bufSize, pixels); }
TUNIS_FORCE_INLINE void  glGetTextureImageEXT(GLuint texture, GLenum target, GLint level, GLenum format, GLenum type, void * pixels) { tunisGL.tunisGetTextureImageEXT(texture, target, level, format, type, pixels); }
TUNIS_FORCE_INLINE void  glGetTextureLevelParameterfv(GLuint texture, GLint level, GLenum pname, GLfloat * params) { tunisGL.tunisGetTextureLevelParameterfv(texture, level, pname, params); }
TUNIS_FORCE_INLINE void  glGetTextureLevelParameterfvEXT(GLuint texture, GLenum target, GLint level, GLenum pname, GLfloat * params) { tunisGL.tunisGetTextureLevelParameterfvEXT(texture, target, level, pname, params); }
TUNIS_FORCE_INLINE void  glGetTextureLevelParameteriv(GLuint texture, GLint level, GLenum pname, GLint * params) { tunisGL.tunisGetTextureLevelParameteriv(texture, level, pname, params); }
TUNIS_FORCE_INLINE void  glGetTextureLevelParameterivEXT(GLuint texture, GLenum target, GLint level, GLenum pname, GLint * params) { tunisGL.tunisGetTextureLevelParameterivEXT(texture, target, level, pname, params); }
TUNIS_FORCE_INLINE void  glGetTextureParameterIiv(GLuint texture, GLenum pname, GLint * params) { tunisGL.tunisGetTextureParameterIiv(texture, pname, params); }
TUNIS_FORCE_INLINE void  glGetTextureParameterIivEXT(GLuint texture, GLenum target, GLenum pname, GLint * params) { tunisGL.tunisGetTextureParameterIivEXT(texture, target, pname, params); }
TUNIS_FORCE_INLINE void  glGetTextureParameterIuiv(GLuint texture, GLenum pname, GLuint * params) { tunisGL.tunisGetTextureParameterIuiv(texture, pname, params); }
TUNIS_FORCE_INLINE void  glGetTextureParameterIuivEXT(GLuint texture, GLenum target, GLenum pname, GLuint * params) { tunisGL.tunisGetTextureParameterIuivEXT(texture, target, pname, params); }
TUNIS_FORCE_INLINE void  glGetTextureParameterfv(GLuint texture, GLenum pname, GLfloat * params) { tunisGL.tunisGetTextureParameterfv(texture, pname, params); }
TUNIS_FORCE_INLINE void  glGetTextureParameterfvEXT(GLuint texture, GLenum target, GLenum pname, GLfloat * params) { tunisGL.tunisGetTextureParameterfvEXT(texture, target, pname, params); }
TUNIS_FORCE_INLINE void  glGetTextureParameteriv(GLuint texture, GLenum pname, GLint * params) { tunisGL.tunisGetTextureParameteriv(texture, pname, params); }
TUNIS_FORCE_INLINE void  glGetTextureParameterivEXT(GLuint texture, GLenum target, GLenum pname, GLint * params) { tunisGL.tunisGetTextureParameterivEXT(texture, target, pname, params); }
TUNIS_FORCE_INLINE GLuint64 glGetTextureSamplerHandleARB(GLuint texture, GLuint sampler) { return tunisGL.tunisGetTextureSamplerHandleARB(texture, sampler); }
TUNIS_FORCE_INLINE GLuint64 glGetTextureSamplerHandleIMG(GLuint texture, GLuint sampler) { return tunisGL.tunisGetTextureSamplerHandleIMG(texture, sampler); }
TUNIS_FORCE_INLINE GLuint64 glGetTextureSamplerHandleNV(GLuint texture, GLuint sampler) { return tunisGL.tunisGetTextureSamplerHandleNV(texture, sampler); }
TUNIS_FORCE_INLINE void  glGetTextureSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, GLsizei bufSize, void * pixels) { tunisGL.tunisGetTextureSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, bufSize, pixels); }
TUNIS_FORCE_INLINE void  glGetTrackMatrixivNV(GLenum target, GLuint address, GLenum pname, GLint * params) { tunisGL.tunisGetTrackMatrixivNV(target, address, pname, params); }
TUNIS_FORCE_INLINE void  glGetTransformFeedbackVarying(GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLsizei * size, GLenum * type, GLchar * name) { tunisGL.tunisGetTransformFeedbackVarying(program, index, bufSize, length, size, type, name); }
TUNIS_FORCE_INLINE void  glGetTransformFeedbackVaryingEXT(GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLsizei * size, GLenum * type, GLchar * name) { tunisGL.tunisGetTransformFeedbackVaryingEXT(program, index, bufSize, length, size, type, name); }
TUNIS_FORCE_INLINE void  glGetTransformFeedbackVaryingNV(GLuint program, GLuint index, GLint * location) { tunisGL.tunisGetTransformFeedbackVaryingNV(program, index, location); }
TUNIS_FORCE_INLINE void  glGetTransformFeedbacki64_v(GLuint xfb, GLenum pname, GLuint index, GLint64 * param) { tunisGL.tunisGetTransformFeedbacki64_v(xfb, pname, index, param); }
TUNIS_FORCE_INLINE void  glGetTransformFeedbacki_v(GLuint xfb, GLenum pname, GLuint index, GLint * param) { tunisGL.tunisGetTransformFeedbacki_v(xfb, pname, index, param); }
TUNIS_FORCE_INLINE void  glGetTransformFeedbackiv(GLuint xfb, GLenum pname, GLint * param) { tunisGL.tunisGetTransformFeedbackiv(xfb, pname, param); }
TUNIS_FORCE_INLINE void  glGetTranslatedShaderSourceANGLE(GLuint shader, GLsizei bufsize, GLsizei * length, GLchar * source) { tunisGL.tunisGetTranslatedShaderSourceANGLE(shader, bufsize, length, source); }
TUNIS_FORCE_INLINE GLuint glGetUniformBlockIndex(GLuint program, const GLchar * uniformBlockName) { return tunisGL.tunisGetUniformBlockIndex(program, uniformBlockName); }
TUNIS_FORCE_INLINE GLint glGetUniformBufferSizeEXT(GLuint program, GLint location) { return tunisGL.tunisGetUniformBufferSizeEXT(program, location); }
TUNIS_FORCE_INLINE void  glGetUniformIndices(GLuint program, GLsizei uniformCount, const GLchar *const* uniformNames, GLuint * uniformIndices) { tunisGL.tunisGetUniformIndices(program, uniformCount, uniformNames, uniformIndices); }
TUNIS_FORCE_INLINE GLint glGetUniformLocation(GLuint program, const GLchar * name) { return tunisGL.tunisGetUniformLocation(program, name); }
TUNIS_FORCE_INLINE GLint glGetUniformLocationARB(GLhandleARB programObj, const GLcharARB * name) { return tunisGL.tunisGetUniformLocationARB(programObj, name); }
TUNIS_FORCE_INLINE GLintptr glGetUniformOffsetEXT(GLuint program, GLint location) { return tunisGL.tunisGetUniformOffsetEXT(program, location); }
TUNIS_FORCE_INLINE void  glGetUniformSubroutineuiv(GLenum shadertype, GLint location, GLuint * params) { tunisGL.tunisGetUniformSubroutineuiv(shadertype, location, params); }
TUNIS_FORCE_INLINE void  glGetUniformdv(GLuint program, GLint location, GLdouble * params) { tunisGL.tunisGetUniformdv(program, location, params); }
TUNIS_FORCE_INLINE void  glGetUniformfv(GLuint program, GLint location, GLfloat * params) { tunisGL.tunisGetUniformfv(program, location, params); }
TUNIS_FORCE_INLINE void  glGetUniformfvARB(GLhandleARB programObj, GLint location, GLfloat * params) { tunisGL.tunisGetUniformfvARB(programObj, location, params); }
TUNIS_FORCE_INLINE void  glGetUniformi64vARB(GLuint program, GLint location, GLint64 * params) { tunisGL.tunisGetUniformi64vARB(program, location, params); }
TUNIS_FORCE_INLINE void  glGetUniformi64vNV(GLuint program, GLint location, GLint64EXT * params) { tunisGL.tunisGetUniformi64vNV(program, location, params); }
TUNIS_FORCE_INLINE void  glGetUniformiv(GLuint program, GLint location, GLint * params) { tunisGL.tunisGetUniformiv(program, location, params); }
TUNIS_FORCE_INLINE void  glGetUniformivARB(GLhandleARB programObj, GLint location, GLint * params) { tunisGL.tunisGetUniformivARB(programObj, location, params); }
TUNIS_FORCE_INLINE void  glGetUniformui64vARB(GLuint program, GLint location, GLuint64 * params) { tunisGL.tunisGetUniformui64vARB(program, location, params); }
TUNIS_FORCE_INLINE void  glGetUniformui64vNV(GLuint program, GLint location, GLuint64EXT * params) { tunisGL.tunisGetUniformui64vNV(program, location, params); }
TUNIS_FORCE_INLINE void  glGetUniformuiv(GLuint program, GLint location, GLuint * params) { tunisGL.tunisGetUniformuiv(program, location, params); }
TUNIS_FORCE_INLINE void  glGetUniformuivEXT(GLuint program, GLint location, GLuint * params) { tunisGL.tunisGetUniformuivEXT(program, location, params); }
TUNIS_FORCE_INLINE void  glGetUnsignedBytei_vEXT(GLenum target, GLuint index, GLubyte * data) { tunisGL.tunisGetUnsignedBytei_vEXT(target, index, data); }
TUNIS_FORCE_INLINE void  glGetUnsignedBytevEXT(GLenum pname, GLubyte * data) { tunisGL.tunisGetUnsignedBytevEXT(pname, data); }
TUNIS_FORCE_INLINE void  glGetVariantArrayObjectfvATI(GLuint id, GLenum pname, GLfloat * params) { tunisGL.tunisGetVariantArrayObjectfvATI(id, pname, params); }
TUNIS_FORCE_INLINE void  glGetVariantArrayObjectivATI(GLuint id, GLenum pname, GLint * params) { tunisGL.tunisGetVariantArrayObjectivATI(id, pname, params); }
TUNIS_FORCE_INLINE void  glGetVariantBooleanvEXT(GLuint id, GLenum value, GLboolean * data) { tunisGL.tunisGetVariantBooleanvEXT(id, value, data); }
TUNIS_FORCE_INLINE void  glGetVariantFloatvEXT(GLuint id, GLenum value, GLfloat * data) { tunisGL.tunisGetVariantFloatvEXT(id, value, data); }
TUNIS_FORCE_INLINE void  glGetVariantIntegervEXT(GLuint id, GLenum value, GLint * data) { tunisGL.tunisGetVariantIntegervEXT(id, value, data); }
TUNIS_FORCE_INLINE void  glGetVariantPointervEXT(GLuint id, GLenum value, void ** data) { tunisGL.tunisGetVariantPointervEXT(id, value, data); }
TUNIS_FORCE_INLINE GLint glGetVaryingLocationNV(GLuint program, const GLchar * name) { return tunisGL.tunisGetVaryingLocationNV(program, name); }
TUNIS_FORCE_INLINE void  glGetVertexArrayIndexed64iv(GLuint vaobj, GLuint index, GLenum pname, GLint64 * param) { tunisGL.tunisGetVertexArrayIndexed64iv(vaobj, index, pname, param); }
TUNIS_FORCE_INLINE void  glGetVertexArrayIndexediv(GLuint vaobj, GLuint index, GLenum pname, GLint * param) { tunisGL.tunisGetVertexArrayIndexediv(vaobj, index, pname, param); }
TUNIS_FORCE_INLINE void  glGetVertexArrayIntegeri_vEXT(GLuint vaobj, GLuint index, GLenum pname, GLint * param) { tunisGL.tunisGetVertexArrayIntegeri_vEXT(vaobj, index, pname, param); }
TUNIS_FORCE_INLINE void  glGetVertexArrayIntegervEXT(GLuint vaobj, GLenum pname, GLint * param) { tunisGL.tunisGetVertexArrayIntegervEXT(vaobj, pname, param); }
TUNIS_FORCE_INLINE void  glGetVertexArrayPointeri_vEXT(GLuint vaobj, GLuint index, GLenum pname, void ** param) { tunisGL.tunisGetVertexArrayPointeri_vEXT(vaobj, index, pname, param); }
TUNIS_FORCE_INLINE void  glGetVertexArrayPointervEXT(GLuint vaobj, GLenum pname, void ** param) { tunisGL.tunisGetVertexArrayPointervEXT(vaobj, pname, param); }
TUNIS_FORCE_INLINE void  glGetVertexArrayiv(GLuint vaobj, GLenum pname, GLint * param) { tunisGL.tunisGetVertexArrayiv(vaobj, pname, param); }
TUNIS_FORCE_INLINE void  glGetVertexAttribArrayObjectfvATI(GLuint index, GLenum pname, GLfloat * params) { tunisGL.tunisGetVertexAttribArrayObjectfvATI(index, pname, params); }
TUNIS_FORCE_INLINE void  glGetVertexAttribArrayObjectivATI(GLuint index, GLenum pname, GLint * params) { tunisGL.tunisGetVertexAttribArrayObjectivATI(index, pname, params); }
TUNIS_FORCE_INLINE void  glGetVertexAttribIiv(GLuint index, GLenum pname, GLint * params) { tunisGL.tunisGetVertexAttribIiv(index, pname, params); }
TUNIS_FORCE_INLINE void  glGetVertexAttribIivEXT(GLuint index, GLenum pname, GLint * params) { tunisGL.tunisGetVertexAttribIivEXT(index, pname, params); }
TUNIS_FORCE_INLINE void  glGetVertexAttribIuiv(GLuint index, GLenum pname, GLuint * params) { tunisGL.tunisGetVertexAttribIuiv(index, pname, params); }
TUNIS_FORCE_INLINE void  glGetVertexAttribIuivEXT(GLuint index, GLenum pname, GLuint * params) { tunisGL.tunisGetVertexAttribIuivEXT(index, pname, params); }
TUNIS_FORCE_INLINE void  glGetVertexAttribLdv(GLuint index, GLenum pname, GLdouble * params) { tunisGL.tunisGetVertexAttribLdv(index, pname, params); }
TUNIS_FORCE_INLINE void  glGetVertexAttribLdvEXT(GLuint index, GLenum pname, GLdouble * params) { tunisGL.tunisGetVertexAttribLdvEXT(index, pname, params); }
TUNIS_FORCE_INLINE void  glGetVertexAttribLi64vNV(GLuint index, GLenum pname, GLint64EXT * params) { tunisGL.tunisGetVertexAttribLi64vNV(index, pname, params); }
TUNIS_FORCE_INLINE void  glGetVertexAttribLui64vARB(GLuint index, GLenum pname, GLuint64EXT * params) { tunisGL.tunisGetVertexAttribLui64vARB(index, pname, params); }
TUNIS_FORCE_INLINE void  glGetVertexAttribLui64vNV(GLuint index, GLenum pname, GLuint64EXT * params) { tunisGL.tunisGetVertexAttribLui64vNV(index, pname, params); }
TUNIS_FORCE_INLINE void  glGetVertexAttribPointerv(GLuint index, GLenum pname, void ** pointer) { tunisGL.tunisGetVertexAttribPointerv(index, pname, pointer); }
TUNIS_FORCE_INLINE void  glGetVertexAttribPointervARB(GLuint index, GLenum pname, void ** pointer) { tunisGL.tunisGetVertexAttribPointervARB(index, pname, pointer); }
TUNIS_FORCE_INLINE void  glGetVertexAttribPointervNV(GLuint index, GLenum pname, void ** pointer) { tunisGL.tunisGetVertexAttribPointervNV(index, pname, pointer); }
TUNIS_FORCE_INLINE void  glGetVertexAttribdv(GLuint index, GLenum pname, GLdouble * params) { tunisGL.tunisGetVertexAttribdv(index, pname, params); }
TUNIS_FORCE_INLINE void  glGetVertexAttribdvARB(GLuint index, GLenum pname, GLdouble * params) { tunisGL.tunisGetVertexAttribdvARB(index, pname, params); }
TUNIS_FORCE_INLINE void  glGetVertexAttribdvNV(GLuint index, GLenum pname, GLdouble * params) { tunisGL.tunisGetVertexAttribdvNV(index, pname, params); }
TUNIS_FORCE_INLINE void  glGetVertexAttribfv(GLuint index, GLenum pname, GLfloat * params) { tunisGL.tunisGetVertexAttribfv(index, pname, params); }
TUNIS_FORCE_INLINE void  glGetVertexAttribfvARB(GLuint index, GLenum pname, GLfloat * params) { tunisGL.tunisGetVertexAttribfvARB(index, pname, params); }
TUNIS_FORCE_INLINE void  glGetVertexAttribfvNV(GLuint index, GLenum pname, GLfloat * params) { tunisGL.tunisGetVertexAttribfvNV(index, pname, params); }
TUNIS_FORCE_INLINE void  glGetVertexAttribiv(GLuint index, GLenum pname, GLint * params) { tunisGL.tunisGetVertexAttribiv(index, pname, params); }
TUNIS_FORCE_INLINE void  glGetVertexAttribivARB(GLuint index, GLenum pname, GLint * params) { tunisGL.tunisGetVertexAttribivARB(index, pname, params); }
TUNIS_FORCE_INLINE void  glGetVertexAttribivNV(GLuint index, GLenum pname, GLint * params) { tunisGL.tunisGetVertexAttribivNV(index, pname, params); }
TUNIS_FORCE_INLINE void  glGetVideoCaptureStreamdvNV(GLuint video_capture_slot, GLuint stream, GLenum pname, GLdouble * params) { tunisGL.tunisGetVideoCaptureStreamdvNV(video_capture_slot, stream, pname, params); }
TUNIS_FORCE_INLINE void  glGetVideoCaptureStreamfvNV(GLuint video_capture_slot, GLuint stream, GLenum pname, GLfloat * params) { tunisGL.tunisGetVideoCaptureStreamfvNV(video_capture_slot, stream, pname, params); }
TUNIS_FORCE_INLINE void  glGetVideoCaptureStreamivNV(GLuint video_capture_slot, GLuint stream, GLenum pname, GLint * params) { tunisGL.tunisGetVideoCaptureStreamivNV(video_capture_slot, stream, pname, params); }
TUNIS_FORCE_INLINE void  glGetVideoCaptureivNV(GLuint video_capture_slot, GLenum pname, GLint * params) { tunisGL.tunisGetVideoCaptureivNV(video_capture_slot, pname, params); }
TUNIS_FORCE_INLINE void  glGetVideoi64vNV(GLuint video_slot, GLenum pname, GLint64EXT * params) { tunisGL.tunisGetVideoi64vNV(video_slot, pname, params); }
TUNIS_FORCE_INLINE void  glGetVideoivNV(GLuint video_slot, GLenum pname, GLint * params) { tunisGL.tunisGetVideoivNV(video_slot, pname, params); }
TUNIS_FORCE_INLINE void  glGetVideoui64vNV(GLuint video_slot, GLenum pname, GLuint64EXT * params) { tunisGL.tunisGetVideoui64vNV(video_slot, pname, params); }
TUNIS_FORCE_INLINE void  glGetVideouivNV(GLuint video_slot, GLenum pname, GLuint * params) { tunisGL.tunisGetVideouivNV(video_slot, pname, params); }
TUNIS_FORCE_INLINE GLVULKANPROCNV glGetVkProcAddrNV(const GLchar * name) { return tunisGL.tunisGetVkProcAddrNV(name); }
TUNIS_FORCE_INLINE void  glGetnColorTable(GLenum target, GLenum format, GLenum type, GLsizei bufSize, void * table) { tunisGL.tunisGetnColorTable(target, format, type, bufSize, table); }
TUNIS_FORCE_INLINE void  glGetnColorTableARB(GLenum target, GLenum format, GLenum type, GLsizei bufSize, void * table) { tunisGL.tunisGetnColorTableARB(target, format, type, bufSize, table); }
TUNIS_FORCE_INLINE void  glGetnCompressedTexImage(GLenum target, GLint lod, GLsizei bufSize, void * pixels) { tunisGL.tunisGetnCompressedTexImage(target, lod, bufSize, pixels); }
TUNIS_FORCE_INLINE void  glGetnCompressedTexImageARB(GLenum target, GLint lod, GLsizei bufSize, void * img) { tunisGL.tunisGetnCompressedTexImageARB(target, lod, bufSize, img); }
TUNIS_FORCE_INLINE void  glGetnConvolutionFilter(GLenum target, GLenum format, GLenum type, GLsizei bufSize, void * image) { tunisGL.tunisGetnConvolutionFilter(target, format, type, bufSize, image); }
TUNIS_FORCE_INLINE void  glGetnConvolutionFilterARB(GLenum target, GLenum format, GLenum type, GLsizei bufSize, void * image) { tunisGL.tunisGetnConvolutionFilterARB(target, format, type, bufSize, image); }
TUNIS_FORCE_INLINE void  glGetnHistogram(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void * values) { tunisGL.tunisGetnHistogram(target, reset, format, type, bufSize, values); }
TUNIS_FORCE_INLINE void  glGetnHistogramARB(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void * values) { tunisGL.tunisGetnHistogramARB(target, reset, format, type, bufSize, values); }
TUNIS_FORCE_INLINE void  glGetnMapdv(GLenum target, GLenum query, GLsizei bufSize, GLdouble * v) { tunisGL.tunisGetnMapdv(target, query, bufSize, v); }
TUNIS_FORCE_INLINE void  glGetnMapdvARB(GLenum target, GLenum query, GLsizei bufSize, GLdouble * v) { tunisGL.tunisGetnMapdvARB(target, query, bufSize, v); }
TUNIS_FORCE_INLINE void  glGetnMapfv(GLenum target, GLenum query, GLsizei bufSize, GLfloat * v) { tunisGL.tunisGetnMapfv(target, query, bufSize, v); }
TUNIS_FORCE_INLINE void  glGetnMapfvARB(GLenum target, GLenum query, GLsizei bufSize, GLfloat * v) { tunisGL.tunisGetnMapfvARB(target, query, bufSize, v); }
TUNIS_FORCE_INLINE void  glGetnMapiv(GLenum target, GLenum query, GLsizei bufSize, GLint * v) { tunisGL.tunisGetnMapiv(target, query, bufSize, v); }
TUNIS_FORCE_INLINE void  glGetnMapivARB(GLenum target, GLenum query, GLsizei bufSize, GLint * v) { tunisGL.tunisGetnMapivARB(target, query, bufSize, v); }
TUNIS_FORCE_INLINE void  glGetnMinmax(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void * values) { tunisGL.tunisGetnMinmax(target, reset, format, type, bufSize, values); }
TUNIS_FORCE_INLINE void  glGetnMinmaxARB(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void * values) { tunisGL.tunisGetnMinmaxARB(target, reset, format, type, bufSize, values); }
TUNIS_FORCE_INLINE void  glGetnPixelMapfv(GLenum map, GLsizei bufSize, GLfloat * values) { tunisGL.tunisGetnPixelMapfv(map, bufSize, values); }
TUNIS_FORCE_INLINE void  glGetnPixelMapfvARB(GLenum map, GLsizei bufSize, GLfloat * values) { tunisGL.tunisGetnPixelMapfvARB(map, bufSize, values); }
TUNIS_FORCE_INLINE void  glGetnPixelMapuiv(GLenum map, GLsizei bufSize, GLuint * values) { tunisGL.tunisGetnPixelMapuiv(map, bufSize, values); }
TUNIS_FORCE_INLINE void  glGetnPixelMapuivARB(GLenum map, GLsizei bufSize, GLuint * values) { tunisGL.tunisGetnPixelMapuivARB(map, bufSize, values); }
TUNIS_FORCE_INLINE void  glGetnPixelMapusv(GLenum map, GLsizei bufSize, GLushort * values) { tunisGL.tunisGetnPixelMapusv(map, bufSize, values); }
TUNIS_FORCE_INLINE void  glGetnPixelMapusvARB(GLenum map, GLsizei bufSize, GLushort * values) { tunisGL.tunisGetnPixelMapusvARB(map, bufSize, values); }
TUNIS_FORCE_INLINE void  glGetnPolygonStipple(GLsizei bufSize, GLubyte * pattern) { tunisGL.tunisGetnPolygonStipple(bufSize, pattern); }
TUNIS_FORCE_INLINE void  glGetnPolygonStippleARB(GLsizei bufSize, GLubyte * pattern) { tunisGL.tunisGetnPolygonStippleARB(bufSize, pattern); }
TUNIS_FORCE_INLINE void  glGetnSeparableFilter(GLenum target, GLenum format, GLenum type, GLsizei rowBufSize, void * row, GLsizei columnBufSize, void * column, void * span) { tunisGL.tunisGetnSeparableFilter(target, format, type, rowBufSize, row, columnBufSize, column, span); }
TUNIS_FORCE_INLINE void  glGetnSeparableFilterARB(GLenum target, GLenum format, GLenum type, GLsizei rowBufSize, void * row, GLsizei columnBufSize, void * column, void * span) { tunisGL.tunisGetnSeparableFilterARB(target, format, type, rowBufSize, row, columnBufSize, column, span); }
TUNIS_FORCE_INLINE void  glGetnTexImage(GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void * pixels) { tunisGL.tunisGetnTexImage(target, level, format, type, bufSize, pixels); }
TUNIS_FORCE_INLINE void  glGetnTexImageARB(GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void * img) { tunisGL.tunisGetnTexImageARB(target, level, format, type, bufSize, img); }
TUNIS_FORCE_INLINE void  glGetnUniformdv(GLuint program, GLint location, GLsizei bufSize, GLdouble * params) { tunisGL.tunisGetnUniformdv(program, location, bufSize, params); }
TUNIS_FORCE_INLINE void  glGetnUniformdvARB(GLuint program, GLint location, GLsizei bufSize, GLdouble * params) { tunisGL.tunisGetnUniformdvARB(program, location, bufSize, params); }
TUNIS_FORCE_INLINE void  glGetnUniformfv(GLuint program, GLint location, GLsizei bufSize, GLfloat * params) { tunisGL.tunisGetnUniformfv(program, location, bufSize, params); }
TUNIS_FORCE_INLINE void  glGetnUniformfvARB(GLuint program, GLint location, GLsizei bufSize, GLfloat * params) { tunisGL.tunisGetnUniformfvARB(program, location, bufSize, params); }
TUNIS_FORCE_INLINE void  glGetnUniformfvEXT(GLuint program, GLint location, GLsizei bufSize, GLfloat * params) { tunisGL.tunisGetnUniformfvEXT(program, location, bufSize, params); }
TUNIS_FORCE_INLINE void  glGetnUniformfvKHR(GLuint program, GLint location, GLsizei bufSize, GLfloat * params) { tunisGL.tunisGetnUniformfvKHR(program, location, bufSize, params); }
TUNIS_FORCE_INLINE void  glGetnUniformi64vARB(GLuint program, GLint location, GLsizei bufSize, GLint64 * params) { tunisGL.tunisGetnUniformi64vARB(program, location, bufSize, params); }
TUNIS_FORCE_INLINE void  glGetnUniformiv(GLuint program, GLint location, GLsizei bufSize, GLint * params) { tunisGL.tunisGetnUniformiv(program, location, bufSize, params); }
TUNIS_FORCE_INLINE void  glGetnUniformivARB(GLuint program, GLint location, GLsizei bufSize, GLint * params) { tunisGL.tunisGetnUniformivARB(program, location, bufSize, params); }
TUNIS_FORCE_INLINE void  glGetnUniformivEXT(GLuint program, GLint location, GLsizei bufSize, GLint * params) { tunisGL.tunisGetnUniformivEXT(program, location, bufSize, params); }
TUNIS_FORCE_INLINE void  glGetnUniformivKHR(GLuint program, GLint location, GLsizei bufSize, GLint * params) { tunisGL.tunisGetnUniformivKHR(program, location, bufSize, params); }
TUNIS_FORCE_INLINE void  glGetnUniformui64vARB(GLuint program, GLint location, GLsizei bufSize, GLuint64 * params) { tunisGL.tunisGetnUniformui64vARB(program, location, bufSize, params); }
TUNIS_FORCE_INLINE void  glGetnUniformuiv(GLuint program, GLint location, GLsizei bufSize, GLuint * params) { tunisGL.tunisGetnUniformuiv(program, location, bufSize, params); }
TUNIS_FORCE_INLINE void  glGetnUniformuivARB(GLuint program, GLint location, GLsizei bufSize, GLuint * params) { tunisGL.tunisGetnUniformuivARB(program, location, bufSize, params); }
TUNIS_FORCE_INLINE void  glGetnUniformuivKHR(GLuint program, GLint location, GLsizei bufSize, GLuint * params) { tunisGL.tunisGetnUniformuivKHR(program, location, bufSize, params); }
TUNIS_FORCE_INLINE void  glGlobalAlphaFactorbSUN(GLbyte factor) { tunisGL.tunisGlobalAlphaFactorbSUN(factor); }
TUNIS_FORCE_INLINE void  glGlobalAlphaFactordSUN(GLdouble factor) { tunisGL.tunisGlobalAlphaFactordSUN(factor); }
TUNIS_FORCE_INLINE void  glGlobalAlphaFactorfSUN(GLfloat factor) { tunisGL.tunisGlobalAlphaFactorfSUN(factor); }
TUNIS_FORCE_INLINE void  glGlobalAlphaFactoriSUN(GLint factor) { tunisGL.tunisGlobalAlphaFactoriSUN(factor); }
TUNIS_FORCE_INLINE void  glGlobalAlphaFactorsSUN(GLshort factor) { tunisGL.tunisGlobalAlphaFactorsSUN(factor); }
TUNIS_FORCE_INLINE void  glGlobalAlphaFactorubSUN(GLubyte factor) { tunisGL.tunisGlobalAlphaFactorubSUN(factor); }
TUNIS_FORCE_INLINE void  glGlobalAlphaFactoruiSUN(GLuint factor) { tunisGL.tunisGlobalAlphaFactoruiSUN(factor); }
TUNIS_FORCE_INLINE void  glGlobalAlphaFactorusSUN(GLushort factor) { tunisGL.tunisGlobalAlphaFactorusSUN(factor); }
TUNIS_FORCE_INLINE void  glHint(GLenum target, GLenum mode) { tunisGL.tunisHint(target, mode); }
TUNIS_FORCE_INLINE void  glHintPGI(GLenum target, GLint mode) { tunisGL.tunisHintPGI(target, mode); }
TUNIS_FORCE_INLINE void  glHistogram(GLenum target, GLsizei width, GLenum internalformat, GLboolean sink) { tunisGL.tunisHistogram(target, width, internalformat, sink); }
TUNIS_FORCE_INLINE void  glHistogramEXT(GLenum target, GLsizei width, GLenum internalformat, GLboolean sink) { tunisGL.tunisHistogramEXT(target, width, internalformat, sink); }
TUNIS_FORCE_INLINE void  glIglooInterfaceSGIX(GLenum pname, const void * params) { tunisGL.tunisIglooInterfaceSGIX(pname, params); }
TUNIS_FORCE_INLINE void  glImageTransformParameterfHP(GLenum target, GLenum pname, GLfloat param) { tunisGL.tunisImageTransformParameterfHP(target, pname, param); }
TUNIS_FORCE_INLINE void  glImageTransformParameterfvHP(GLenum target, GLenum pname, const GLfloat * params) { tunisGL.tunisImageTransformParameterfvHP(target, pname, params); }
TUNIS_FORCE_INLINE void  glImageTransformParameteriHP(GLenum target, GLenum pname, GLint param) { tunisGL.tunisImageTransformParameteriHP(target, pname, param); }
TUNIS_FORCE_INLINE void  glImageTransformParameterivHP(GLenum target, GLenum pname, const GLint * params) { tunisGL.tunisImageTransformParameterivHP(target, pname, params); }
TUNIS_FORCE_INLINE void  glImportMemoryFdEXT(GLuint memory, GLuint64 size, GLenum handleType, GLint fd) { tunisGL.tunisImportMemoryFdEXT(memory, size, handleType, fd); }
TUNIS_FORCE_INLINE void  glImportMemoryWin32HandleEXT(GLuint memory, GLuint64 size, GLenum handleType, void * handle) { tunisGL.tunisImportMemoryWin32HandleEXT(memory, size, handleType, handle); }
TUNIS_FORCE_INLINE void  glImportMemoryWin32NameEXT(GLuint memory, GLuint64 size, GLenum handleType, const void * name) { tunisGL.tunisImportMemoryWin32NameEXT(memory, size, handleType, name); }
TUNIS_FORCE_INLINE void  glImportSemaphoreFdEXT(GLuint semaphore, GLenum handleType, GLint fd) { tunisGL.tunisImportSemaphoreFdEXT(semaphore, handleType, fd); }
TUNIS_FORCE_INLINE void  glImportSemaphoreWin32HandleEXT(GLuint semaphore, GLenum handleType, void * handle) { tunisGL.tunisImportSemaphoreWin32HandleEXT(semaphore, handleType, handle); }
TUNIS_FORCE_INLINE void  glImportSemaphoreWin32NameEXT(GLuint semaphore, GLenum handleType, const void * name) { tunisGL.tunisImportSemaphoreWin32NameEXT(semaphore, handleType, name); }
TUNIS_FORCE_INLINE GLsync glImportSyncEXT(GLenum external_sync_type, GLintptr external_sync, GLbitfield flags) { return tunisGL.tunisImportSyncEXT(external_sync_type, external_sync, flags); }
TUNIS_FORCE_INLINE void  glIndexFormatNV(GLenum type, GLsizei stride) { tunisGL.tunisIndexFormatNV(type, stride); }
TUNIS_FORCE_INLINE void  glIndexFuncEXT(GLenum func, GLclampf ref) { tunisGL.tunisIndexFuncEXT(func, ref); }
TUNIS_FORCE_INLINE void  glIndexMask(GLuint mask) { tunisGL.tunisIndexMask(mask); }
TUNIS_FORCE_INLINE void  glIndexMaterialEXT(GLenum face, GLenum mode) { tunisGL.tunisIndexMaterialEXT(face, mode); }
TUNIS_FORCE_INLINE void  glIndexPointer(GLenum type, GLsizei stride, const void * pointer) { tunisGL.tunisIndexPointer(type, stride, pointer); }
TUNIS_FORCE_INLINE void  glIndexPointerEXT(GLenum type, GLsizei stride, GLsizei count, const void * pointer) { tunisGL.tunisIndexPointerEXT(type, stride, count, pointer); }
TUNIS_FORCE_INLINE void  glIndexPointerListIBM(GLenum type, GLint stride, const void ** pointer, GLint ptrstride) { tunisGL.tunisIndexPointerListIBM(type, stride, pointer, ptrstride); }
TUNIS_FORCE_INLINE void  glIndexd(GLdouble c) { tunisGL.tunisIndexd(c); }
TUNIS_FORCE_INLINE void  glIndexdv(const GLdouble * c) { tunisGL.tunisIndexdv(c); }
TUNIS_FORCE_INLINE void  glIndexf(GLfloat c) { tunisGL.tunisIndexf(c); }
TUNIS_FORCE_INLINE void  glIndexfv(const GLfloat * c) { tunisGL.tunisIndexfv(c); }
TUNIS_FORCE_INLINE void  glIndexi(GLint c) { tunisGL.tunisIndexi(c); }
TUNIS_FORCE_INLINE void  glIndexiv(const GLint * c) { tunisGL.tunisIndexiv(c); }
TUNIS_FORCE_INLINE void  glIndexs(GLshort c) { tunisGL.tunisIndexs(c); }
TUNIS_FORCE_INLINE void  glIndexsv(const GLshort * c) { tunisGL.tunisIndexsv(c); }
TUNIS_FORCE_INLINE void  glIndexub(GLubyte c) { tunisGL.tunisIndexub(c); }
TUNIS_FORCE_INLINE void  glIndexubv(const GLubyte * c) { tunisGL.tunisIndexubv(c); }
TUNIS_FORCE_INLINE void  glIndexxOES(GLfixed component) { tunisGL.tunisIndexxOES(component); }
TUNIS_FORCE_INLINE void  glIndexxvOES(const GLfixed * component) { tunisGL.tunisIndexxvOES(component); }
TUNIS_FORCE_INLINE void  glInitNames(void) { tunisGL.tunisInitNames(); }
TUNIS_FORCE_INLINE void  glInsertComponentEXT(GLuint res, GLuint src, GLuint num) { tunisGL.tunisInsertComponentEXT(res, src, num); }
TUNIS_FORCE_INLINE void  glInsertEventMarkerEXT(GLsizei length, const GLchar * marker) { tunisGL.tunisInsertEventMarkerEXT(length, marker); }
TUNIS_FORCE_INLINE void  glInstrumentsBufferSGIX(GLsizei size, GLint * buffer) { tunisGL.tunisInstrumentsBufferSGIX(size, buffer); }
TUNIS_FORCE_INLINE void  glInterleavedArrays(GLenum format, GLsizei stride, const void * pointer) { tunisGL.tunisInterleavedArrays(format, stride, pointer); }
TUNIS_FORCE_INLINE void  glInterpolatePathsNV(GLuint resultPath, GLuint pathA, GLuint pathB, GLfloat weight) { tunisGL.tunisInterpolatePathsNV(resultPath, pathA, pathB, weight); }
TUNIS_FORCE_INLINE void  glInvalidateBufferData(GLuint buffer) { tunisGL.tunisInvalidateBufferData(buffer); }
TUNIS_FORCE_INLINE void  glInvalidateBufferSubData(GLuint buffer, GLintptr offset, GLsizeiptr length) { tunisGL.tunisInvalidateBufferSubData(buffer, offset, length); }
TUNIS_FORCE_INLINE void  glInvalidateFramebuffer(GLenum target, GLsizei numAttachments, const GLenum * attachments) { tunisGL.tunisInvalidateFramebuffer(target, numAttachments, attachments); }
TUNIS_FORCE_INLINE void  glInvalidateNamedFramebufferData(GLuint framebuffer, GLsizei numAttachments, const GLenum * attachments) { tunisGL.tunisInvalidateNamedFramebufferData(framebuffer, numAttachments, attachments); }
TUNIS_FORCE_INLINE void  glInvalidateNamedFramebufferSubData(GLuint framebuffer, GLsizei numAttachments, const GLenum * attachments, GLint x, GLint y, GLsizei width, GLsizei height) { tunisGL.tunisInvalidateNamedFramebufferSubData(framebuffer, numAttachments, attachments, x, y, width, height); }
TUNIS_FORCE_INLINE void  glInvalidateSubFramebuffer(GLenum target, GLsizei numAttachments, const GLenum * attachments, GLint x, GLint y, GLsizei width, GLsizei height) { tunisGL.tunisInvalidateSubFramebuffer(target, numAttachments, attachments, x, y, width, height); }
TUNIS_FORCE_INLINE void  glInvalidateTexImage(GLuint texture, GLint level) { tunisGL.tunisInvalidateTexImage(texture, level); }
TUNIS_FORCE_INLINE void  glInvalidateTexSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth) { tunisGL.tunisInvalidateTexSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth); }
TUNIS_FORCE_INLINE GLboolean glIsAsyncMarkerSGIX(GLuint marker) { return tunisGL.tunisIsAsyncMarkerSGIX(marker); }
TUNIS_FORCE_INLINE GLboolean glIsBuffer(GLuint buffer) { return tunisGL.tunisIsBuffer(buffer); }
TUNIS_FORCE_INLINE GLboolean glIsBufferARB(GLuint buffer) { return tunisGL.tunisIsBufferARB(buffer); }
TUNIS_FORCE_INLINE GLboolean glIsBufferResidentNV(GLenum target) { return tunisGL.tunisIsBufferResidentNV(target); }
TUNIS_FORCE_INLINE GLboolean glIsCommandListNV(GLuint list) { return tunisGL.tunisIsCommandListNV(list); }
TUNIS_FORCE_INLINE GLboolean glIsEnabled(GLenum cap) { return tunisGL.tunisIsEnabled(cap); }
TUNIS_FORCE_INLINE GLboolean glIsEnabledIndexedEXT(GLenum target, GLuint index) { return tunisGL.tunisIsEnabledIndexedEXT(target, index); }
TUNIS_FORCE_INLINE GLboolean glIsEnabledi(GLenum target, GLuint index) { return tunisGL.tunisIsEnabledi(target, index); }
TUNIS_FORCE_INLINE GLboolean glIsEnablediEXT(GLenum target, GLuint index) { return tunisGL.tunisIsEnablediEXT(target, index); }
TUNIS_FORCE_INLINE GLboolean glIsEnablediNV(GLenum target, GLuint index) { return tunisGL.tunisIsEnablediNV(target, index); }
TUNIS_FORCE_INLINE GLboolean glIsEnablediOES(GLenum target, GLuint index) { return tunisGL.tunisIsEnablediOES(target, index); }
TUNIS_FORCE_INLINE GLboolean glIsFenceAPPLE(GLuint fence) { return tunisGL.tunisIsFenceAPPLE(fence); }
TUNIS_FORCE_INLINE GLboolean glIsFenceNV(GLuint fence) { return tunisGL.tunisIsFenceNV(fence); }
TUNIS_FORCE_INLINE GLboolean glIsFramebuffer(GLuint framebuffer) { return tunisGL.tunisIsFramebuffer(framebuffer); }
TUNIS_FORCE_INLINE GLboolean glIsFramebufferEXT(GLuint framebuffer) { return tunisGL.tunisIsFramebufferEXT(framebuffer); }
TUNIS_FORCE_INLINE GLboolean glIsFramebufferOES(GLuint framebuffer) { return tunisGL.tunisIsFramebufferOES(framebuffer); }
TUNIS_FORCE_INLINE GLboolean glIsImageHandleResidentARB(GLuint64 handle) { return tunisGL.tunisIsImageHandleResidentARB(handle); }
TUNIS_FORCE_INLINE GLboolean glIsImageHandleResidentNV(GLuint64 handle) { return tunisGL.tunisIsImageHandleResidentNV(handle); }
TUNIS_FORCE_INLINE GLboolean glIsList(GLuint list) { return tunisGL.tunisIsList(list); }
TUNIS_FORCE_INLINE GLboolean glIsMemoryObjectEXT(GLuint memoryObject) { return tunisGL.tunisIsMemoryObjectEXT(memoryObject); }
TUNIS_FORCE_INLINE GLboolean glIsNameAMD(GLenum identifier, GLuint name) { return tunisGL.tunisIsNameAMD(identifier, name); }
TUNIS_FORCE_INLINE GLboolean glIsNamedBufferResidentNV(GLuint buffer) { return tunisGL.tunisIsNamedBufferResidentNV(buffer); }
TUNIS_FORCE_INLINE GLboolean glIsNamedStringARB(GLint namelen, const GLchar * name) { return tunisGL.tunisIsNamedStringARB(namelen, name); }
TUNIS_FORCE_INLINE GLboolean glIsObjectBufferATI(GLuint buffer) { return tunisGL.tunisIsObjectBufferATI(buffer); }
TUNIS_FORCE_INLINE GLboolean glIsOcclusionQueryNV(GLuint id) { return tunisGL.tunisIsOcclusionQueryNV(id); }
TUNIS_FORCE_INLINE GLboolean glIsPathNV(GLuint path) { return tunisGL.tunisIsPathNV(path); }
TUNIS_FORCE_INLINE GLboolean glIsPointInFillPathNV(GLuint path, GLuint mask, GLfloat x, GLfloat y) { return tunisGL.tunisIsPointInFillPathNV(path, mask, x, y); }
TUNIS_FORCE_INLINE GLboolean glIsPointInStrokePathNV(GLuint path, GLfloat x, GLfloat y) { return tunisGL.tunisIsPointInStrokePathNV(path, x, y); }
TUNIS_FORCE_INLINE GLboolean glIsProgram(GLuint program) { return tunisGL.tunisIsProgram(program); }
TUNIS_FORCE_INLINE GLboolean glIsProgramARB(GLuint program) { return tunisGL.tunisIsProgramARB(program); }
TUNIS_FORCE_INLINE GLboolean glIsProgramNV(GLuint id) { return tunisGL.tunisIsProgramNV(id); }
TUNIS_FORCE_INLINE GLboolean glIsProgramPipeline(GLuint pipeline) { return tunisGL.tunisIsProgramPipeline(pipeline); }
TUNIS_FORCE_INLINE GLboolean glIsProgramPipelineEXT(GLuint pipeline) { return tunisGL.tunisIsProgramPipelineEXT(pipeline); }
TUNIS_FORCE_INLINE GLboolean glIsQuery(GLuint id) { return tunisGL.tunisIsQuery(id); }
TUNIS_FORCE_INLINE GLboolean glIsQueryARB(GLuint id) { return tunisGL.tunisIsQueryARB(id); }
TUNIS_FORCE_INLINE GLboolean glIsQueryEXT(GLuint id) { return tunisGL.tunisIsQueryEXT(id); }
TUNIS_FORCE_INLINE GLboolean glIsRenderbuffer(GLuint renderbuffer) { return tunisGL.tunisIsRenderbuffer(renderbuffer); }
TUNIS_FORCE_INLINE GLboolean glIsRenderbufferEXT(GLuint renderbuffer) { return tunisGL.tunisIsRenderbufferEXT(renderbuffer); }
TUNIS_FORCE_INLINE GLboolean glIsRenderbufferOES(GLuint renderbuffer) { return tunisGL.tunisIsRenderbufferOES(renderbuffer); }
TUNIS_FORCE_INLINE GLboolean glIsSampler(GLuint sampler) { return tunisGL.tunisIsSampler(sampler); }
TUNIS_FORCE_INLINE GLboolean glIsSemaphoreEXT(GLuint semaphore) { return tunisGL.tunisIsSemaphoreEXT(semaphore); }
TUNIS_FORCE_INLINE GLboolean glIsShader(GLuint shader) { return tunisGL.tunisIsShader(shader); }
TUNIS_FORCE_INLINE GLboolean glIsStateNV(GLuint state) { return tunisGL.tunisIsStateNV(state); }
TUNIS_FORCE_INLINE GLboolean glIsSync(GLsync sync) { return tunisGL.tunisIsSync(sync); }
TUNIS_FORCE_INLINE GLboolean glIsSyncAPPLE(GLsync sync) { return tunisGL.tunisIsSyncAPPLE(sync); }
TUNIS_FORCE_INLINE GLboolean glIsTexture(GLuint texture) { return tunisGL.tunisIsTexture(texture); }
TUNIS_FORCE_INLINE GLboolean glIsTextureEXT(GLuint texture) { return tunisGL.tunisIsTextureEXT(texture); }
TUNIS_FORCE_INLINE GLboolean glIsTextureHandleResidentARB(GLuint64 handle) { return tunisGL.tunisIsTextureHandleResidentARB(handle); }
TUNIS_FORCE_INLINE GLboolean glIsTextureHandleResidentNV(GLuint64 handle) { return tunisGL.tunisIsTextureHandleResidentNV(handle); }
TUNIS_FORCE_INLINE GLboolean glIsTransformFeedback(GLuint id) { return tunisGL.tunisIsTransformFeedback(id); }
TUNIS_FORCE_INLINE GLboolean glIsTransformFeedbackNV(GLuint id) { return tunisGL.tunisIsTransformFeedbackNV(id); }
TUNIS_FORCE_INLINE GLboolean glIsVariantEnabledEXT(GLuint id, GLenum cap) { return tunisGL.tunisIsVariantEnabledEXT(id, cap); }
TUNIS_FORCE_INLINE GLboolean glIsVertexArray(GLuint array) { return tunisGL.tunisIsVertexArray(array); }
TUNIS_FORCE_INLINE GLboolean glIsVertexArrayAPPLE(GLuint array) { return tunisGL.tunisIsVertexArrayAPPLE(array); }
TUNIS_FORCE_INLINE GLboolean glIsVertexArrayOES(GLuint array) { return tunisGL.tunisIsVertexArrayOES(array); }
TUNIS_FORCE_INLINE GLboolean glIsVertexAttribEnabledAPPLE(GLuint index, GLenum pname) { return tunisGL.tunisIsVertexAttribEnabledAPPLE(index, pname); }
TUNIS_FORCE_INLINE void  glLGPUCopyImageSubDataNVX(GLuint sourceGpu, GLbitfield destinationGpuMask, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srxY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth) { tunisGL.tunisLGPUCopyImageSubDataNVX(sourceGpu, destinationGpuMask, srcName, srcTarget, srcLevel, srcX, srxY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, width, height, depth); }
TUNIS_FORCE_INLINE void  glLGPUInterlockNVX(void) { tunisGL.tunisLGPUInterlockNVX(); }
TUNIS_FORCE_INLINE void  glLGPUNamedBufferSubDataNVX(GLbitfield gpuMask, GLuint buffer, GLintptr offset, GLsizeiptr size, const void * data) { tunisGL.tunisLGPUNamedBufferSubDataNVX(gpuMask, buffer, offset, size, data); }
TUNIS_FORCE_INLINE void  glLabelObjectEXT(GLenum type, GLuint object, GLsizei length, const GLchar * label) { tunisGL.tunisLabelObjectEXT(type, object, length, label); }
TUNIS_FORCE_INLINE void  glLightEnviSGIX(GLenum pname, GLint param) { tunisGL.tunisLightEnviSGIX(pname, param); }
TUNIS_FORCE_INLINE void  glLightModelf(GLenum pname, GLfloat param) { tunisGL.tunisLightModelf(pname, param); }
TUNIS_FORCE_INLINE void  glLightModelfv(GLenum pname, const GLfloat * params) { tunisGL.tunisLightModelfv(pname, params); }
TUNIS_FORCE_INLINE void  glLightModeli(GLenum pname, GLint param) { tunisGL.tunisLightModeli(pname, param); }
TUNIS_FORCE_INLINE void  glLightModeliv(GLenum pname, const GLint * params) { tunisGL.tunisLightModeliv(pname, params); }
TUNIS_FORCE_INLINE void  glLightModelx(GLenum pname, GLfixed param) { tunisGL.tunisLightModelx(pname, param); }
TUNIS_FORCE_INLINE void  glLightModelxOES(GLenum pname, GLfixed param) { tunisGL.tunisLightModelxOES(pname, param); }
TUNIS_FORCE_INLINE void  glLightModelxv(GLenum pname, const GLfixed * param) { tunisGL.tunisLightModelxv(pname, param); }
TUNIS_FORCE_INLINE void  glLightModelxvOES(GLenum pname, const GLfixed * param) { tunisGL.tunisLightModelxvOES(pname, param); }
TUNIS_FORCE_INLINE void  glLightf(GLenum light, GLenum pname, GLfloat param) { tunisGL.tunisLightf(light, pname, param); }
TUNIS_FORCE_INLINE void  glLightfv(GLenum light, GLenum pname, const GLfloat * params) { tunisGL.tunisLightfv(light, pname, params); }
TUNIS_FORCE_INLINE void  glLighti(GLenum light, GLenum pname, GLint param) { tunisGL.tunisLighti(light, pname, param); }
TUNIS_FORCE_INLINE void  glLightiv(GLenum light, GLenum pname, const GLint * params) { tunisGL.tunisLightiv(light, pname, params); }
TUNIS_FORCE_INLINE void  glLightx(GLenum light, GLenum pname, GLfixed param) { tunisGL.tunisLightx(light, pname, param); }
TUNIS_FORCE_INLINE void  glLightxOES(GLenum light, GLenum pname, GLfixed param) { tunisGL.tunisLightxOES(light, pname, param); }
TUNIS_FORCE_INLINE void  glLightxv(GLenum light, GLenum pname, const GLfixed * params) { tunisGL.tunisLightxv(light, pname, params); }
TUNIS_FORCE_INLINE void  glLightxvOES(GLenum light, GLenum pname, const GLfixed * params) { tunisGL.tunisLightxvOES(light, pname, params); }
TUNIS_FORCE_INLINE void  glLineStipple(GLint factor, GLushort pattern) { tunisGL.tunisLineStipple(factor, pattern); }
TUNIS_FORCE_INLINE void  glLineWidth(GLfloat width) { tunisGL.tunisLineWidth(width); }
TUNIS_FORCE_INLINE void  glLineWidthx(GLfixed width) { tunisGL.tunisLineWidthx(width); }
TUNIS_FORCE_INLINE void  glLineWidthxOES(GLfixed width) { tunisGL.tunisLineWidthxOES(width); }
TUNIS_FORCE_INLINE void  glLinkProgram(GLuint program) { tunisGL.tunisLinkProgram(program); }
TUNIS_FORCE_INLINE void  glLinkProgramARB(GLhandleARB programObj) { tunisGL.tunisLinkProgramARB(programObj); }
TUNIS_FORCE_INLINE void  glListBase(GLuint base) { tunisGL.tunisListBase(base); }
TUNIS_FORCE_INLINE void  glListDrawCommandsStatesClientNV(GLuint list, GLuint segment, const void ** indirects, const GLsizei * sizes, const GLuint * states, const GLuint * fbos, GLuint count) { tunisGL.tunisListDrawCommandsStatesClientNV(list, segment, indirects, sizes, states, fbos, count); }
TUNIS_FORCE_INLINE void  glListParameterfSGIX(GLuint list, GLenum pname, GLfloat param) { tunisGL.tunisListParameterfSGIX(list, pname, param); }
TUNIS_FORCE_INLINE void  glListParameterfvSGIX(GLuint list, GLenum pname, const GLfloat * params) { tunisGL.tunisListParameterfvSGIX(list, pname, params); }
TUNIS_FORCE_INLINE void  glListParameteriSGIX(GLuint list, GLenum pname, GLint param) { tunisGL.tunisListParameteriSGIX(list, pname, param); }
TUNIS_FORCE_INLINE void  glListParameterivSGIX(GLuint list, GLenum pname, const GLint * params) { tunisGL.tunisListParameterivSGIX(list, pname, params); }
TUNIS_FORCE_INLINE void  glLoadIdentity(void) { tunisGL.tunisLoadIdentity(); }
TUNIS_FORCE_INLINE void  glLoadIdentityDeformationMapSGIX(GLbitfield mask) { tunisGL.tunisLoadIdentityDeformationMapSGIX(mask); }
TUNIS_FORCE_INLINE void  glLoadMatrixd(const GLdouble * m) { tunisGL.tunisLoadMatrixd(m); }
TUNIS_FORCE_INLINE void  glLoadMatrixf(const GLfloat * m) { tunisGL.tunisLoadMatrixf(m); }
TUNIS_FORCE_INLINE void  glLoadMatrixx(const GLfixed * m) { tunisGL.tunisLoadMatrixx(m); }
TUNIS_FORCE_INLINE void  glLoadMatrixxOES(const GLfixed * m) { tunisGL.tunisLoadMatrixxOES(m); }
TUNIS_FORCE_INLINE void  glLoadName(GLuint name) { tunisGL.tunisLoadName(name); }
TUNIS_FORCE_INLINE void  glLoadPaletteFromModelViewMatrixOES(void) { tunisGL.tunisLoadPaletteFromModelViewMatrixOES(); }
TUNIS_FORCE_INLINE void  glLoadProgramNV(GLenum target, GLuint id, GLsizei len, const GLubyte * program) { tunisGL.tunisLoadProgramNV(target, id, len, program); }
TUNIS_FORCE_INLINE void  glLoadTransposeMatrixd(const GLdouble * m) { tunisGL.tunisLoadTransposeMatrixd(m); }
TUNIS_FORCE_INLINE void  glLoadTransposeMatrixdARB(const GLdouble * m) { tunisGL.tunisLoadTransposeMatrixdARB(m); }
TUNIS_FORCE_INLINE void  glLoadTransposeMatrixf(const GLfloat * m) { tunisGL.tunisLoadTransposeMatrixf(m); }
TUNIS_FORCE_INLINE void  glLoadTransposeMatrixfARB(const GLfloat * m) { tunisGL.tunisLoadTransposeMatrixfARB(m); }
TUNIS_FORCE_INLINE void  glLoadTransposeMatrixxOES(const GLfixed * m) { tunisGL.tunisLoadTransposeMatrixxOES(m); }
TUNIS_FORCE_INLINE void  glLockArraysEXT(GLint first, GLsizei count) { tunisGL.tunisLockArraysEXT(first, count); }
TUNIS_FORCE_INLINE void  glLogicOp(GLenum opcode) { tunisGL.tunisLogicOp(opcode); }
TUNIS_FORCE_INLINE void  glMakeBufferNonResidentNV(GLenum target) { tunisGL.tunisMakeBufferNonResidentNV(target); }
TUNIS_FORCE_INLINE void  glMakeBufferResidentNV(GLenum target, GLenum access) { tunisGL.tunisMakeBufferResidentNV(target, access); }
TUNIS_FORCE_INLINE void  glMakeImageHandleNonResidentARB(GLuint64 handle) { tunisGL.tunisMakeImageHandleNonResidentARB(handle); }
TUNIS_FORCE_INLINE void  glMakeImageHandleNonResidentNV(GLuint64 handle) { tunisGL.tunisMakeImageHandleNonResidentNV(handle); }
TUNIS_FORCE_INLINE void  glMakeImageHandleResidentARB(GLuint64 handle, GLenum access) { tunisGL.tunisMakeImageHandleResidentARB(handle, access); }
TUNIS_FORCE_INLINE void  glMakeImageHandleResidentNV(GLuint64 handle, GLenum access) { tunisGL.tunisMakeImageHandleResidentNV(handle, access); }
TUNIS_FORCE_INLINE void  glMakeNamedBufferNonResidentNV(GLuint buffer) { tunisGL.tunisMakeNamedBufferNonResidentNV(buffer); }
TUNIS_FORCE_INLINE void  glMakeNamedBufferResidentNV(GLuint buffer, GLenum access) { tunisGL.tunisMakeNamedBufferResidentNV(buffer, access); }
TUNIS_FORCE_INLINE void  glMakeTextureHandleNonResidentARB(GLuint64 handle) { tunisGL.tunisMakeTextureHandleNonResidentARB(handle); }
TUNIS_FORCE_INLINE void  glMakeTextureHandleNonResidentNV(GLuint64 handle) { tunisGL.tunisMakeTextureHandleNonResidentNV(handle); }
TUNIS_FORCE_INLINE void  glMakeTextureHandleResidentARB(GLuint64 handle) { tunisGL.tunisMakeTextureHandleResidentARB(handle); }
TUNIS_FORCE_INLINE void  glMakeTextureHandleResidentNV(GLuint64 handle) { tunisGL.tunisMakeTextureHandleResidentNV(handle); }
TUNIS_FORCE_INLINE void  glMap1d(GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble * points) { tunisGL.tunisMap1d(target, u1, u2, stride, order, points); }
TUNIS_FORCE_INLINE void  glMap1f(GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat * points) { tunisGL.tunisMap1f(target, u1, u2, stride, order, points); }
TUNIS_FORCE_INLINE void  glMap1xOES(GLenum target, GLfixed u1, GLfixed u2, GLint stride, GLint order, GLfixed points) { tunisGL.tunisMap1xOES(target, u1, u2, stride, order, points); }
TUNIS_FORCE_INLINE void  glMap2d(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble * points) { tunisGL.tunisMap2d(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points); }
TUNIS_FORCE_INLINE void  glMap2f(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat * points) { tunisGL.tunisMap2f(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points); }
TUNIS_FORCE_INLINE void  glMap2xOES(GLenum target, GLfixed u1, GLfixed u2, GLint ustride, GLint uorder, GLfixed v1, GLfixed v2, GLint vstride, GLint vorder, GLfixed points) { tunisGL.tunisMap2xOES(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points); }
TUNIS_FORCE_INLINE void * glMapBuffer(GLenum target, GLenum access) { return tunisGL.tunisMapBuffer(target, access); }
TUNIS_FORCE_INLINE void * glMapBufferARB(GLenum target, GLenum access) { return tunisGL.tunisMapBufferARB(target, access); }
TUNIS_FORCE_INLINE void * glMapBufferOES(GLenum target, GLenum access) { return tunisGL.tunisMapBufferOES(target, access); }
TUNIS_FORCE_INLINE void * glMapBufferRange(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access) { return tunisGL.tunisMapBufferRange(target, offset, length, access); }
TUNIS_FORCE_INLINE void * glMapBufferRangeEXT(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access) { return tunisGL.tunisMapBufferRangeEXT(target, offset, length, access); }
TUNIS_FORCE_INLINE void  glMapControlPointsNV(GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLint uorder, GLint vorder, GLboolean packed, const void * points) { tunisGL.tunisMapControlPointsNV(target, index, type, ustride, vstride, uorder, vorder, packed, points); }
TUNIS_FORCE_INLINE void  glMapGrid1d(GLint un, GLdouble u1, GLdouble u2) { tunisGL.tunisMapGrid1d(un, u1, u2); }
TUNIS_FORCE_INLINE void  glMapGrid1f(GLint un, GLfloat u1, GLfloat u2) { tunisGL.tunisMapGrid1f(un, u1, u2); }
TUNIS_FORCE_INLINE void  glMapGrid1xOES(GLint n, GLfixed u1, GLfixed u2) { tunisGL.tunisMapGrid1xOES(n, u1, u2); }
TUNIS_FORCE_INLINE void  glMapGrid2d(GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2) { tunisGL.tunisMapGrid2d(un, u1, u2, vn, v1, v2); }
TUNIS_FORCE_INLINE void  glMapGrid2f(GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2) { tunisGL.tunisMapGrid2f(un, u1, u2, vn, v1, v2); }
TUNIS_FORCE_INLINE void  glMapGrid2xOES(GLint n, GLfixed u1, GLfixed u2, GLfixed v1, GLfixed v2) { tunisGL.tunisMapGrid2xOES(n, u1, u2, v1, v2); }
TUNIS_FORCE_INLINE void * glMapNamedBuffer(GLuint buffer, GLenum access) { return tunisGL.tunisMapNamedBuffer(buffer, access); }
TUNIS_FORCE_INLINE void * glMapNamedBufferEXT(GLuint buffer, GLenum access) { return tunisGL.tunisMapNamedBufferEXT(buffer, access); }
TUNIS_FORCE_INLINE void * glMapNamedBufferRange(GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access) { return tunisGL.tunisMapNamedBufferRange(buffer, offset, length, access); }
TUNIS_FORCE_INLINE void * glMapNamedBufferRangeEXT(GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access) { return tunisGL.tunisMapNamedBufferRangeEXT(buffer, offset, length, access); }
TUNIS_FORCE_INLINE void * glMapObjectBufferATI(GLuint buffer) { return tunisGL.tunisMapObjectBufferATI(buffer); }
TUNIS_FORCE_INLINE void  glMapParameterfvNV(GLenum target, GLenum pname, const GLfloat * params) { tunisGL.tunisMapParameterfvNV(target, pname, params); }
TUNIS_FORCE_INLINE void  glMapParameterivNV(GLenum target, GLenum pname, const GLint * params) { tunisGL.tunisMapParameterivNV(target, pname, params); }
TUNIS_FORCE_INLINE void * glMapTexture2DINTEL(GLuint texture, GLint level, GLbitfield access, GLint * stride, GLenum * layout) { return tunisGL.tunisMapTexture2DINTEL(texture, level, access, stride, layout); }
TUNIS_FORCE_INLINE void  glMapVertexAttrib1dAPPLE(GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble * points) { tunisGL.tunisMapVertexAttrib1dAPPLE(index, size, u1, u2, stride, order, points); }
TUNIS_FORCE_INLINE void  glMapVertexAttrib1fAPPLE(GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat * points) { tunisGL.tunisMapVertexAttrib1fAPPLE(index, size, u1, u2, stride, order, points); }
TUNIS_FORCE_INLINE void  glMapVertexAttrib2dAPPLE(GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble * points) { tunisGL.tunisMapVertexAttrib2dAPPLE(index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points); }
TUNIS_FORCE_INLINE void  glMapVertexAttrib2fAPPLE(GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat * points) { tunisGL.tunisMapVertexAttrib2fAPPLE(index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points); }
TUNIS_FORCE_INLINE void  glMaterialf(GLenum face, GLenum pname, GLfloat param) { tunisGL.tunisMaterialf(face, pname, param); }
TUNIS_FORCE_INLINE void  glMaterialfv(GLenum face, GLenum pname, const GLfloat * params) { tunisGL.tunisMaterialfv(face, pname, params); }
TUNIS_FORCE_INLINE void  glMateriali(GLenum face, GLenum pname, GLint param) { tunisGL.tunisMateriali(face, pname, param); }
TUNIS_FORCE_INLINE void  glMaterialiv(GLenum face, GLenum pname, const GLint * params) { tunisGL.tunisMaterialiv(face, pname, params); }
TUNIS_FORCE_INLINE void  glMaterialx(GLenum face, GLenum pname, GLfixed param) { tunisGL.tunisMaterialx(face, pname, param); }
TUNIS_FORCE_INLINE void  glMaterialxOES(GLenum face, GLenum pname, GLfixed param) { tunisGL.tunisMaterialxOES(face, pname, param); }
TUNIS_FORCE_INLINE void  glMaterialxv(GLenum face, GLenum pname, const GLfixed * param) { tunisGL.tunisMaterialxv(face, pname, param); }
TUNIS_FORCE_INLINE void  glMaterialxvOES(GLenum face, GLenum pname, const GLfixed * param) { tunisGL.tunisMaterialxvOES(face, pname, param); }
TUNIS_FORCE_INLINE void  glMatrixFrustumEXT(GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar) { tunisGL.tunisMatrixFrustumEXT(mode, left, right, bottom, top, zNear, zFar); }
TUNIS_FORCE_INLINE void  glMatrixIndexPointerARB(GLint size, GLenum type, GLsizei stride, const void * pointer) { tunisGL.tunisMatrixIndexPointerARB(size, type, stride, pointer); }
TUNIS_FORCE_INLINE void  glMatrixIndexPointerOES(GLint size, GLenum type, GLsizei stride, const void * pointer) { tunisGL.tunisMatrixIndexPointerOES(size, type, stride, pointer); }
TUNIS_FORCE_INLINE void  glMatrixIndexubvARB(GLint size, const GLubyte * indices) { tunisGL.tunisMatrixIndexubvARB(size, indices); }
TUNIS_FORCE_INLINE void  glMatrixIndexuivARB(GLint size, const GLuint * indices) { tunisGL.tunisMatrixIndexuivARB(size, indices); }
TUNIS_FORCE_INLINE void  glMatrixIndexusvARB(GLint size, const GLushort * indices) { tunisGL.tunisMatrixIndexusvARB(size, indices); }
TUNIS_FORCE_INLINE void  glMatrixLoad3x2fNV(GLenum matrixMode, const GLfloat * m) { tunisGL.tunisMatrixLoad3x2fNV(matrixMode, m); }
TUNIS_FORCE_INLINE void  glMatrixLoad3x3fNV(GLenum matrixMode, const GLfloat * m) { tunisGL.tunisMatrixLoad3x3fNV(matrixMode, m); }
TUNIS_FORCE_INLINE void  glMatrixLoadIdentityEXT(GLenum mode) { tunisGL.tunisMatrixLoadIdentityEXT(mode); }
TUNIS_FORCE_INLINE void  glMatrixLoadTranspose3x3fNV(GLenum matrixMode, const GLfloat * m) { tunisGL.tunisMatrixLoadTranspose3x3fNV(matrixMode, m); }
TUNIS_FORCE_INLINE void  glMatrixLoadTransposedEXT(GLenum mode, const GLdouble * m) { tunisGL.tunisMatrixLoadTransposedEXT(mode, m); }
TUNIS_FORCE_INLINE void  glMatrixLoadTransposefEXT(GLenum mode, const GLfloat * m) { tunisGL.tunisMatrixLoadTransposefEXT(mode, m); }
TUNIS_FORCE_INLINE void  glMatrixLoaddEXT(GLenum mode, const GLdouble * m) { tunisGL.tunisMatrixLoaddEXT(mode, m); }
TUNIS_FORCE_INLINE void  glMatrixLoadfEXT(GLenum mode, const GLfloat * m) { tunisGL.tunisMatrixLoadfEXT(mode, m); }
TUNIS_FORCE_INLINE void  glMatrixMode(GLenum mode) { tunisGL.tunisMatrixMode(mode); }
TUNIS_FORCE_INLINE void  glMatrixMult3x2fNV(GLenum matrixMode, const GLfloat * m) { tunisGL.tunisMatrixMult3x2fNV(matrixMode, m); }
TUNIS_FORCE_INLINE void  glMatrixMult3x3fNV(GLenum matrixMode, const GLfloat * m) { tunisGL.tunisMatrixMult3x3fNV(matrixMode, m); }
TUNIS_FORCE_INLINE void  glMatrixMultTranspose3x3fNV(GLenum matrixMode, const GLfloat * m) { tunisGL.tunisMatrixMultTranspose3x3fNV(matrixMode, m); }
TUNIS_FORCE_INLINE void  glMatrixMultTransposedEXT(GLenum mode, const GLdouble * m) { tunisGL.tunisMatrixMultTransposedEXT(mode, m); }
TUNIS_FORCE_INLINE void  glMatrixMultTransposefEXT(GLenum mode, const GLfloat * m) { tunisGL.tunisMatrixMultTransposefEXT(mode, m); }
TUNIS_FORCE_INLINE void  glMatrixMultdEXT(GLenum mode, const GLdouble * m) { tunisGL.tunisMatrixMultdEXT(mode, m); }
TUNIS_FORCE_INLINE void  glMatrixMultfEXT(GLenum mode, const GLfloat * m) { tunisGL.tunisMatrixMultfEXT(mode, m); }
TUNIS_FORCE_INLINE void  glMatrixOrthoEXT(GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar) { tunisGL.tunisMatrixOrthoEXT(mode, left, right, bottom, top, zNear, zFar); }
TUNIS_FORCE_INLINE void  glMatrixPopEXT(GLenum mode) { tunisGL.tunisMatrixPopEXT(mode); }
TUNIS_FORCE_INLINE void  glMatrixPushEXT(GLenum mode) { tunisGL.tunisMatrixPushEXT(mode); }
TUNIS_FORCE_INLINE void  glMatrixRotatedEXT(GLenum mode, GLdouble angle, GLdouble x, GLdouble y, GLdouble z) { tunisGL.tunisMatrixRotatedEXT(mode, angle, x, y, z); }
TUNIS_FORCE_INLINE void  glMatrixRotatefEXT(GLenum mode, GLfloat angle, GLfloat x, GLfloat y, GLfloat z) { tunisGL.tunisMatrixRotatefEXT(mode, angle, x, y, z); }
TUNIS_FORCE_INLINE void  glMatrixScaledEXT(GLenum mode, GLdouble x, GLdouble y, GLdouble z) { tunisGL.tunisMatrixScaledEXT(mode, x, y, z); }
TUNIS_FORCE_INLINE void  glMatrixScalefEXT(GLenum mode, GLfloat x, GLfloat y, GLfloat z) { tunisGL.tunisMatrixScalefEXT(mode, x, y, z); }
TUNIS_FORCE_INLINE void  glMatrixTranslatedEXT(GLenum mode, GLdouble x, GLdouble y, GLdouble z) { tunisGL.tunisMatrixTranslatedEXT(mode, x, y, z); }
TUNIS_FORCE_INLINE void  glMatrixTranslatefEXT(GLenum mode, GLfloat x, GLfloat y, GLfloat z) { tunisGL.tunisMatrixTranslatefEXT(mode, x, y, z); }
TUNIS_FORCE_INLINE void  glMaxShaderCompilerThreadsARB(GLuint count) { tunisGL.tunisMaxShaderCompilerThreadsARB(count); }
TUNIS_FORCE_INLINE void  glMaxShaderCompilerThreadsKHR(GLuint count) { tunisGL.tunisMaxShaderCompilerThreadsKHR(count); }
TUNIS_FORCE_INLINE void  glMemoryBarrier(GLbitfield barriers) { tunisGL.tunisMemoryBarrier(barriers); }
TUNIS_FORCE_INLINE void  glMemoryBarrierByRegion(GLbitfield barriers) { tunisGL.tunisMemoryBarrierByRegion(barriers); }
TUNIS_FORCE_INLINE void  glMemoryBarrierEXT(GLbitfield barriers) { tunisGL.tunisMemoryBarrierEXT(barriers); }
TUNIS_FORCE_INLINE void  glMemoryObjectParameterivEXT(GLuint memoryObject, GLenum pname, const GLint * params) { tunisGL.tunisMemoryObjectParameterivEXT(memoryObject, pname, params); }
TUNIS_FORCE_INLINE void  glMinSampleShading(GLfloat value) { tunisGL.tunisMinSampleShading(value); }
TUNIS_FORCE_INLINE void  glMinSampleShadingARB(GLfloat value) { tunisGL.tunisMinSampleShadingARB(value); }
TUNIS_FORCE_INLINE void  glMinSampleShadingOES(GLfloat value) { tunisGL.tunisMinSampleShadingOES(value); }
TUNIS_FORCE_INLINE void  glMinmax(GLenum target, GLenum internalformat, GLboolean sink) { tunisGL.tunisMinmax(target, internalformat, sink); }
TUNIS_FORCE_INLINE void  glMinmaxEXT(GLenum target, GLenum internalformat, GLboolean sink) { tunisGL.tunisMinmaxEXT(target, internalformat, sink); }
TUNIS_FORCE_INLINE void  glMultMatrixd(const GLdouble * m) { tunisGL.tunisMultMatrixd(m); }
TUNIS_FORCE_INLINE void  glMultMatrixf(const GLfloat * m) { tunisGL.tunisMultMatrixf(m); }
TUNIS_FORCE_INLINE void  glMultMatrixx(const GLfixed * m) { tunisGL.tunisMultMatrixx(m); }
TUNIS_FORCE_INLINE void  glMultMatrixxOES(const GLfixed * m) { tunisGL.tunisMultMatrixxOES(m); }
TUNIS_FORCE_INLINE void  glMultTransposeMatrixd(const GLdouble * m) { tunisGL.tunisMultTransposeMatrixd(m); }
TUNIS_FORCE_INLINE void  glMultTransposeMatrixdARB(const GLdouble * m) { tunisGL.tunisMultTransposeMatrixdARB(m); }
TUNIS_FORCE_INLINE void  glMultTransposeMatrixf(const GLfloat * m) { tunisGL.tunisMultTransposeMatrixf(m); }
TUNIS_FORCE_INLINE void  glMultTransposeMatrixfARB(const GLfloat * m) { tunisGL.tunisMultTransposeMatrixfARB(m); }
TUNIS_FORCE_INLINE void  glMultTransposeMatrixxOES(const GLfixed * m) { tunisGL.tunisMultTransposeMatrixxOES(m); }
TUNIS_FORCE_INLINE void  glMultiDrawArrays(GLenum mode, const GLint * first, const GLsizei * count, GLsizei drawcount) { tunisGL.tunisMultiDrawArrays(mode, first, count, drawcount); }
TUNIS_FORCE_INLINE void  glMultiDrawArraysEXT(GLenum mode, const GLint * first, const GLsizei * count, GLsizei primcount) { tunisGL.tunisMultiDrawArraysEXT(mode, first, count, primcount); }
TUNIS_FORCE_INLINE void  glMultiDrawArraysIndirect(GLenum mode, const void * indirect, GLsizei drawcount, GLsizei stride) { tunisGL.tunisMultiDrawArraysIndirect(mode, indirect, drawcount, stride); }
TUNIS_FORCE_INLINE void  glMultiDrawArraysIndirectAMD(GLenum mode, const void * indirect, GLsizei primcount, GLsizei stride) { tunisGL.tunisMultiDrawArraysIndirectAMD(mode, indirect, primcount, stride); }
TUNIS_FORCE_INLINE void  glMultiDrawArraysIndirectBindlessCountNV(GLenum mode, const void * indirect, GLsizei drawCount, GLsizei maxDrawCount, GLsizei stride, GLint vertexBufferCount) { tunisGL.tunisMultiDrawArraysIndirectBindlessCountNV(mode, indirect, drawCount, maxDrawCount, stride, vertexBufferCount); }
TUNIS_FORCE_INLINE void  glMultiDrawArraysIndirectBindlessNV(GLenum mode, const void * indirect, GLsizei drawCount, GLsizei stride, GLint vertexBufferCount) { tunisGL.tunisMultiDrawArraysIndirectBindlessNV(mode, indirect, drawCount, stride, vertexBufferCount); }
TUNIS_FORCE_INLINE void  glMultiDrawArraysIndirectCount(GLenum mode, const void * indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride) { tunisGL.tunisMultiDrawArraysIndirectCount(mode, indirect, drawcount, maxdrawcount, stride); }
TUNIS_FORCE_INLINE void  glMultiDrawArraysIndirectCountARB(GLenum mode, const void * indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride) { tunisGL.tunisMultiDrawArraysIndirectCountARB(mode, indirect, drawcount, maxdrawcount, stride); }
TUNIS_FORCE_INLINE void  glMultiDrawArraysIndirectEXT(GLenum mode, const void * indirect, GLsizei drawcount, GLsizei stride) { tunisGL.tunisMultiDrawArraysIndirectEXT(mode, indirect, drawcount, stride); }
TUNIS_FORCE_INLINE void  glMultiDrawElementArrayAPPLE(GLenum mode, const GLint * first, const GLsizei * count, GLsizei primcount) { tunisGL.tunisMultiDrawElementArrayAPPLE(mode, first, count, primcount); }
TUNIS_FORCE_INLINE void  glMultiDrawElements(GLenum mode, const GLsizei * count, GLenum type, const void *const* indices, GLsizei drawcount) { tunisGL.tunisMultiDrawElements(mode, count, type, indices, drawcount); }
TUNIS_FORCE_INLINE void  glMultiDrawElementsBaseVertex(GLenum mode, const GLsizei * count, GLenum type, const void *const* indices, GLsizei drawcount, const GLint * basevertex) { tunisGL.tunisMultiDrawElementsBaseVertex(mode, count, type, indices, drawcount, basevertex); }
TUNIS_FORCE_INLINE void  glMultiDrawElementsBaseVertexEXT(GLenum mode, const GLsizei * count, GLenum type, const void *const* indices, GLsizei primcount, const GLint * basevertex) { tunisGL.tunisMultiDrawElementsBaseVertexEXT(mode, count, type, indices, primcount, basevertex); }
TUNIS_FORCE_INLINE void  glMultiDrawElementsEXT(GLenum mode, const GLsizei * count, GLenum type, const void *const* indices, GLsizei primcount) { tunisGL.tunisMultiDrawElementsEXT(mode, count, type, indices, primcount); }
TUNIS_FORCE_INLINE void  glMultiDrawElementsIndirect(GLenum mode, GLenum type, const void * indirect, GLsizei drawcount, GLsizei stride) { tunisGL.tunisMultiDrawElementsIndirect(mode, type, indirect, drawcount, stride); }
TUNIS_FORCE_INLINE void  glMultiDrawElementsIndirectAMD(GLenum mode, GLenum type, const void * indirect, GLsizei primcount, GLsizei stride) { tunisGL.tunisMultiDrawElementsIndirectAMD(mode, type, indirect, primcount, stride); }
TUNIS_FORCE_INLINE void  glMultiDrawElementsIndirectBindlessCountNV(GLenum mode, GLenum type, const void * indirect, GLsizei drawCount, GLsizei maxDrawCount, GLsizei stride, GLint vertexBufferCount) { tunisGL.tunisMultiDrawElementsIndirectBindlessCountNV(mode, type, indirect, drawCount, maxDrawCount, stride, vertexBufferCount); }
TUNIS_FORCE_INLINE void  glMultiDrawElementsIndirectBindlessNV(GLenum mode, GLenum type, const void * indirect, GLsizei drawCount, GLsizei stride, GLint vertexBufferCount) { tunisGL.tunisMultiDrawElementsIndirectBindlessNV(mode, type, indirect, drawCount, stride, vertexBufferCount); }
TUNIS_FORCE_INLINE void  glMultiDrawElementsIndirectCount(GLenum mode, GLenum type, const void * indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride) { tunisGL.tunisMultiDrawElementsIndirectCount(mode, type, indirect, drawcount, maxdrawcount, stride); }
TUNIS_FORCE_INLINE void  glMultiDrawElementsIndirectCountARB(GLenum mode, GLenum type, const void * indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride) { tunisGL.tunisMultiDrawElementsIndirectCountARB(mode, type, indirect, drawcount, maxdrawcount, stride); }
TUNIS_FORCE_INLINE void  glMultiDrawElementsIndirectEXT(GLenum mode, GLenum type, const void * indirect, GLsizei drawcount, GLsizei stride) { tunisGL.tunisMultiDrawElementsIndirectEXT(mode, type, indirect, drawcount, stride); }
TUNIS_FORCE_INLINE void  glMultiDrawRangeElementArrayAPPLE(GLenum mode, GLuint start, GLuint end, const GLint * first, const GLsizei * count, GLsizei primcount) { tunisGL.tunisMultiDrawRangeElementArrayAPPLE(mode, start, end, first, count, primcount); }
TUNIS_FORCE_INLINE void  glMultiModeDrawArraysIBM(const GLenum * mode, const GLint * first, const GLsizei * count, GLsizei primcount, GLint modestride) { tunisGL.tunisMultiModeDrawArraysIBM(mode, first, count, primcount, modestride); }
TUNIS_FORCE_INLINE void  glMultiModeDrawElementsIBM(const GLenum * mode, const GLsizei * count, GLenum type, const void *const* indices, GLsizei primcount, GLint modestride) { tunisGL.tunisMultiModeDrawElementsIBM(mode, count, type, indices, primcount, modestride); }
TUNIS_FORCE_INLINE void  glMultiTexBufferEXT(GLenum texunit, GLenum target, GLenum internalformat, GLuint buffer) { tunisGL.tunisMultiTexBufferEXT(texunit, target, internalformat, buffer); }
TUNIS_FORCE_INLINE void  glMultiTexCoord1bOES(GLenum texture, GLbyte s) { tunisGL.tunisMultiTexCoord1bOES(texture, s); }
TUNIS_FORCE_INLINE void  glMultiTexCoord1bvOES(GLenum texture, const GLbyte * coords) { tunisGL.tunisMultiTexCoord1bvOES(texture, coords); }
TUNIS_FORCE_INLINE void  glMultiTexCoord1d(GLenum target, GLdouble s) { tunisGL.tunisMultiTexCoord1d(target, s); }
TUNIS_FORCE_INLINE void  glMultiTexCoord1dARB(GLenum target, GLdouble s) { tunisGL.tunisMultiTexCoord1dARB(target, s); }
TUNIS_FORCE_INLINE void  glMultiTexCoord1dv(GLenum target, const GLdouble * v) { tunisGL.tunisMultiTexCoord1dv(target, v); }
TUNIS_FORCE_INLINE void  glMultiTexCoord1dvARB(GLenum target, const GLdouble * v) { tunisGL.tunisMultiTexCoord1dvARB(target, v); }
TUNIS_FORCE_INLINE void  glMultiTexCoord1f(GLenum target, GLfloat s) { tunisGL.tunisMultiTexCoord1f(target, s); }
TUNIS_FORCE_INLINE void  glMultiTexCoord1fARB(GLenum target, GLfloat s) { tunisGL.tunisMultiTexCoord1fARB(target, s); }
TUNIS_FORCE_INLINE void  glMultiTexCoord1fv(GLenum target, const GLfloat * v) { tunisGL.tunisMultiTexCoord1fv(target, v); }
TUNIS_FORCE_INLINE void  glMultiTexCoord1fvARB(GLenum target, const GLfloat * v) { tunisGL.tunisMultiTexCoord1fvARB(target, v); }
TUNIS_FORCE_INLINE void  glMultiTexCoord1hNV(GLenum target, GLhalfNV s) { tunisGL.tunisMultiTexCoord1hNV(target, s); }
TUNIS_FORCE_INLINE void  glMultiTexCoord1hvNV(GLenum target, const GLhalfNV * v) { tunisGL.tunisMultiTexCoord1hvNV(target, v); }
TUNIS_FORCE_INLINE void  glMultiTexCoord1i(GLenum target, GLint s) { tunisGL.tunisMultiTexCoord1i(target, s); }
TUNIS_FORCE_INLINE void  glMultiTexCoord1iARB(GLenum target, GLint s) { tunisGL.tunisMultiTexCoord1iARB(target, s); }
TUNIS_FORCE_INLINE void  glMultiTexCoord1iv(GLenum target, const GLint * v) { tunisGL.tunisMultiTexCoord1iv(target, v); }
TUNIS_FORCE_INLINE void  glMultiTexCoord1ivARB(GLenum target, const GLint * v) { tunisGL.tunisMultiTexCoord1ivARB(target, v); }
TUNIS_FORCE_INLINE void  glMultiTexCoord1s(GLenum target, GLshort s) { tunisGL.tunisMultiTexCoord1s(target, s); }
TUNIS_FORCE_INLINE void  glMultiTexCoord1sARB(GLenum target, GLshort s) { tunisGL.tunisMultiTexCoord1sARB(target, s); }
TUNIS_FORCE_INLINE void  glMultiTexCoord1sv(GLenum target, const GLshort * v) { tunisGL.tunisMultiTexCoord1sv(target, v); }
TUNIS_FORCE_INLINE void  glMultiTexCoord1svARB(GLenum target, const GLshort * v) { tunisGL.tunisMultiTexCoord1svARB(target, v); }
TUNIS_FORCE_INLINE void  glMultiTexCoord1xOES(GLenum texture, GLfixed s) { tunisGL.tunisMultiTexCoord1xOES(texture, s); }
TUNIS_FORCE_INLINE void  glMultiTexCoord1xvOES(GLenum texture, const GLfixed * coords) { tunisGL.tunisMultiTexCoord1xvOES(texture, coords); }
TUNIS_FORCE_INLINE void  glMultiTexCoord2bOES(GLenum texture, GLbyte s, GLbyte t) { tunisGL.tunisMultiTexCoord2bOES(texture, s, t); }
TUNIS_FORCE_INLINE void  glMultiTexCoord2bvOES(GLenum texture, const GLbyte * coords) { tunisGL.tunisMultiTexCoord2bvOES(texture, coords); }
TUNIS_FORCE_INLINE void  glMultiTexCoord2d(GLenum target, GLdouble s, GLdouble t) { tunisGL.tunisMultiTexCoord2d(target, s, t); }
TUNIS_FORCE_INLINE void  glMultiTexCoord2dARB(GLenum target, GLdouble s, GLdouble t) { tunisGL.tunisMultiTexCoord2dARB(target, s, t); }
TUNIS_FORCE_INLINE void  glMultiTexCoord2dv(GLenum target, const GLdouble * v) { tunisGL.tunisMultiTexCoord2dv(target, v); }
TUNIS_FORCE_INLINE void  glMultiTexCoord2dvARB(GLenum target, const GLdouble * v) { tunisGL.tunisMultiTexCoord2dvARB(target, v); }
TUNIS_FORCE_INLINE void  glMultiTexCoord2f(GLenum target, GLfloat s, GLfloat t) { tunisGL.tunisMultiTexCoord2f(target, s, t); }
TUNIS_FORCE_INLINE void  glMultiTexCoord2fARB(GLenum target, GLfloat s, GLfloat t) { tunisGL.tunisMultiTexCoord2fARB(target, s, t); }
TUNIS_FORCE_INLINE void  glMultiTexCoord2fv(GLenum target, const GLfloat * v) { tunisGL.tunisMultiTexCoord2fv(target, v); }
TUNIS_FORCE_INLINE void  glMultiTexCoord2fvARB(GLenum target, const GLfloat * v) { tunisGL.tunisMultiTexCoord2fvARB(target, v); }
TUNIS_FORCE_INLINE void  glMultiTexCoord2hNV(GLenum target, GLhalfNV s, GLhalfNV t) { tunisGL.tunisMultiTexCoord2hNV(target, s, t); }
TUNIS_FORCE_INLINE void  glMultiTexCoord2hvNV(GLenum target, const GLhalfNV * v) { tunisGL.tunisMultiTexCoord2hvNV(target, v); }
TUNIS_FORCE_INLINE void  glMultiTexCoord2i(GLenum target, GLint s, GLint t) { tunisGL.tunisMultiTexCoord2i(target, s, t); }
TUNIS_FORCE_INLINE void  glMultiTexCoord2iARB(GLenum target, GLint s, GLint t) { tunisGL.tunisMultiTexCoord2iARB(target, s, t); }
TUNIS_FORCE_INLINE void  glMultiTexCoord2iv(GLenum target, const GLint * v) { tunisGL.tunisMultiTexCoord2iv(target, v); }
TUNIS_FORCE_INLINE void  glMultiTexCoord2ivARB(GLenum target, const GLint * v) { tunisGL.tunisMultiTexCoord2ivARB(target, v); }
TUNIS_FORCE_INLINE void  glMultiTexCoord2s(GLenum target, GLshort s, GLshort t) { tunisGL.tunisMultiTexCoord2s(target, s, t); }
TUNIS_FORCE_INLINE void  glMultiTexCoord2sARB(GLenum target, GLshort s, GLshort t) { tunisGL.tunisMultiTexCoord2sARB(target, s, t); }
TUNIS_FORCE_INLINE void  glMultiTexCoord2sv(GLenum target, const GLshort * v) { tunisGL.tunisMultiTexCoord2sv(target, v); }
TUNIS_FORCE_INLINE void  glMultiTexCoord2svARB(GLenum target, const GLshort * v) { tunisGL.tunisMultiTexCoord2svARB(target, v); }
TUNIS_FORCE_INLINE void  glMultiTexCoord2xOES(GLenum texture, GLfixed s, GLfixed t) { tunisGL.tunisMultiTexCoord2xOES(texture, s, t); }
TUNIS_FORCE_INLINE void  glMultiTexCoord2xvOES(GLenum texture, const GLfixed * coords) { tunisGL.tunisMultiTexCoord2xvOES(texture, coords); }
TUNIS_FORCE_INLINE void  glMultiTexCoord3bOES(GLenum texture, GLbyte s, GLbyte t, GLbyte r) { tunisGL.tunisMultiTexCoord3bOES(texture, s, t, r); }
TUNIS_FORCE_INLINE void  glMultiTexCoord3bvOES(GLenum texture, const GLbyte * coords) { tunisGL.tunisMultiTexCoord3bvOES(texture, coords); }
TUNIS_FORCE_INLINE void  glMultiTexCoord3d(GLenum target, GLdouble s, GLdouble t, GLdouble r) { tunisGL.tunisMultiTexCoord3d(target, s, t, r); }
TUNIS_FORCE_INLINE void  glMultiTexCoord3dARB(GLenum target, GLdouble s, GLdouble t, GLdouble r) { tunisGL.tunisMultiTexCoord3dARB(target, s, t, r); }
TUNIS_FORCE_INLINE void  glMultiTexCoord3dv(GLenum target, const GLdouble * v) { tunisGL.tunisMultiTexCoord3dv(target, v); }
TUNIS_FORCE_INLINE void  glMultiTexCoord3dvARB(GLenum target, const GLdouble * v) { tunisGL.tunisMultiTexCoord3dvARB(target, v); }
TUNIS_FORCE_INLINE void  glMultiTexCoord3f(GLenum target, GLfloat s, GLfloat t, GLfloat r) { tunisGL.tunisMultiTexCoord3f(target, s, t, r); }
TUNIS_FORCE_INLINE void  glMultiTexCoord3fARB(GLenum target, GLfloat s, GLfloat t, GLfloat r) { tunisGL.tunisMultiTexCoord3fARB(target, s, t, r); }
TUNIS_FORCE_INLINE void  glMultiTexCoord3fv(GLenum target, const GLfloat * v) { tunisGL.tunisMultiTexCoord3fv(target, v); }
TUNIS_FORCE_INLINE void  glMultiTexCoord3fvARB(GLenum target, const GLfloat * v) { tunisGL.tunisMultiTexCoord3fvARB(target, v); }
TUNIS_FORCE_INLINE void  glMultiTexCoord3hNV(GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r) { tunisGL.tunisMultiTexCoord3hNV(target, s, t, r); }
TUNIS_FORCE_INLINE void  glMultiTexCoord3hvNV(GLenum target, const GLhalfNV * v) { tunisGL.tunisMultiTexCoord3hvNV(target, v); }
TUNIS_FORCE_INLINE void  glMultiTexCoord3i(GLenum target, GLint s, GLint t, GLint r) { tunisGL.tunisMultiTexCoord3i(target, s, t, r); }
TUNIS_FORCE_INLINE void  glMultiTexCoord3iARB(GLenum target, GLint s, GLint t, GLint r) { tunisGL.tunisMultiTexCoord3iARB(target, s, t, r); }
TUNIS_FORCE_INLINE void  glMultiTexCoord3iv(GLenum target, const GLint * v) { tunisGL.tunisMultiTexCoord3iv(target, v); }
TUNIS_FORCE_INLINE void  glMultiTexCoord3ivARB(GLenum target, const GLint * v) { tunisGL.tunisMultiTexCoord3ivARB(target, v); }
TUNIS_FORCE_INLINE void  glMultiTexCoord3s(GLenum target, GLshort s, GLshort t, GLshort r) { tunisGL.tunisMultiTexCoord3s(target, s, t, r); }
TUNIS_FORCE_INLINE void  glMultiTexCoord3sARB(GLenum target, GLshort s, GLshort t, GLshort r) { tunisGL.tunisMultiTexCoord3sARB(target, s, t, r); }
TUNIS_FORCE_INLINE void  glMultiTexCoord3sv(GLenum target, const GLshort * v) { tunisGL.tunisMultiTexCoord3sv(target, v); }
TUNIS_FORCE_INLINE void  glMultiTexCoord3svARB(GLenum target, const GLshort * v) { tunisGL.tunisMultiTexCoord3svARB(target, v); }
TUNIS_FORCE_INLINE void  glMultiTexCoord3xOES(GLenum texture, GLfixed s, GLfixed t, GLfixed r) { tunisGL.tunisMultiTexCoord3xOES(texture, s, t, r); }
TUNIS_FORCE_INLINE void  glMultiTexCoord3xvOES(GLenum texture, const GLfixed * coords) { tunisGL.tunisMultiTexCoord3xvOES(texture, coords); }
TUNIS_FORCE_INLINE void  glMultiTexCoord4bOES(GLenum texture, GLbyte s, GLbyte t, GLbyte r, GLbyte q) { tunisGL.tunisMultiTexCoord4bOES(texture, s, t, r, q); }
TUNIS_FORCE_INLINE void  glMultiTexCoord4bvOES(GLenum texture, const GLbyte * coords) { tunisGL.tunisMultiTexCoord4bvOES(texture, coords); }
TUNIS_FORCE_INLINE void  glMultiTexCoord4d(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q) { tunisGL.tunisMultiTexCoord4d(target, s, t, r, q); }
TUNIS_FORCE_INLINE void  glMultiTexCoord4dARB(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q) { tunisGL.tunisMultiTexCoord4dARB(target, s, t, r, q); }
TUNIS_FORCE_INLINE void  glMultiTexCoord4dv(GLenum target, const GLdouble * v) { tunisGL.tunisMultiTexCoord4dv(target, v); }
TUNIS_FORCE_INLINE void  glMultiTexCoord4dvARB(GLenum target, const GLdouble * v) { tunisGL.tunisMultiTexCoord4dvARB(target, v); }
TUNIS_FORCE_INLINE void  glMultiTexCoord4f(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q) { tunisGL.tunisMultiTexCoord4f(target, s, t, r, q); }
TUNIS_FORCE_INLINE void  glMultiTexCoord4fARB(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q) { tunisGL.tunisMultiTexCoord4fARB(target, s, t, r, q); }
TUNIS_FORCE_INLINE void  glMultiTexCoord4fv(GLenum target, const GLfloat * v) { tunisGL.tunisMultiTexCoord4fv(target, v); }
TUNIS_FORCE_INLINE void  glMultiTexCoord4fvARB(GLenum target, const GLfloat * v) { tunisGL.tunisMultiTexCoord4fvARB(target, v); }
TUNIS_FORCE_INLINE void  glMultiTexCoord4hNV(GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q) { tunisGL.tunisMultiTexCoord4hNV(target, s, t, r, q); }
TUNIS_FORCE_INLINE void  glMultiTexCoord4hvNV(GLenum target, const GLhalfNV * v) { tunisGL.tunisMultiTexCoord4hvNV(target, v); }
TUNIS_FORCE_INLINE void  glMultiTexCoord4i(GLenum target, GLint s, GLint t, GLint r, GLint q) { tunisGL.tunisMultiTexCoord4i(target, s, t, r, q); }
TUNIS_FORCE_INLINE void  glMultiTexCoord4iARB(GLenum target, GLint s, GLint t, GLint r, GLint q) { tunisGL.tunisMultiTexCoord4iARB(target, s, t, r, q); }
TUNIS_FORCE_INLINE void  glMultiTexCoord4iv(GLenum target, const GLint * v) { tunisGL.tunisMultiTexCoord4iv(target, v); }
TUNIS_FORCE_INLINE void  glMultiTexCoord4ivARB(GLenum target, const GLint * v) { tunisGL.tunisMultiTexCoord4ivARB(target, v); }
TUNIS_FORCE_INLINE void  glMultiTexCoord4s(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q) { tunisGL.tunisMultiTexCoord4s(target, s, t, r, q); }
TUNIS_FORCE_INLINE void  glMultiTexCoord4sARB(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q) { tunisGL.tunisMultiTexCoord4sARB(target, s, t, r, q); }
TUNIS_FORCE_INLINE void  glMultiTexCoord4sv(GLenum target, const GLshort * v) { tunisGL.tunisMultiTexCoord4sv(target, v); }
TUNIS_FORCE_INLINE void  glMultiTexCoord4svARB(GLenum target, const GLshort * v) { tunisGL.tunisMultiTexCoord4svARB(target, v); }
TUNIS_FORCE_INLINE void  glMultiTexCoord4x(GLenum texture, GLfixed s, GLfixed t, GLfixed r, GLfixed q) { tunisGL.tunisMultiTexCoord4x(texture, s, t, r, q); }
TUNIS_FORCE_INLINE void  glMultiTexCoord4xOES(GLenum texture, GLfixed s, GLfixed t, GLfixed r, GLfixed q) { tunisGL.tunisMultiTexCoord4xOES(texture, s, t, r, q); }
TUNIS_FORCE_INLINE void  glMultiTexCoord4xvOES(GLenum texture, const GLfixed * coords) { tunisGL.tunisMultiTexCoord4xvOES(texture, coords); }
TUNIS_FORCE_INLINE void  glMultiTexCoordP1ui(GLenum texture, GLenum type, GLuint coords) { tunisGL.tunisMultiTexCoordP1ui(texture, type, coords); }
TUNIS_FORCE_INLINE void  glMultiTexCoordP1uiv(GLenum texture, GLenum type, const GLuint * coords) { tunisGL.tunisMultiTexCoordP1uiv(texture, type, coords); }
TUNIS_FORCE_INLINE void  glMultiTexCoordP2ui(GLenum texture, GLenum type, GLuint coords) { tunisGL.tunisMultiTexCoordP2ui(texture, type, coords); }
TUNIS_FORCE_INLINE void  glMultiTexCoordP2uiv(GLenum texture, GLenum type, const GLuint * coords) { tunisGL.tunisMultiTexCoordP2uiv(texture, type, coords); }
TUNIS_FORCE_INLINE void  glMultiTexCoordP3ui(GLenum texture, GLenum type, GLuint coords) { tunisGL.tunisMultiTexCoordP3ui(texture, type, coords); }
TUNIS_FORCE_INLINE void  glMultiTexCoordP3uiv(GLenum texture, GLenum type, const GLuint * coords) { tunisGL.tunisMultiTexCoordP3uiv(texture, type, coords); }
TUNIS_FORCE_INLINE void  glMultiTexCoordP4ui(GLenum texture, GLenum type, GLuint coords) { tunisGL.tunisMultiTexCoordP4ui(texture, type, coords); }
TUNIS_FORCE_INLINE void  glMultiTexCoordP4uiv(GLenum texture, GLenum type, const GLuint * coords) { tunisGL.tunisMultiTexCoordP4uiv(texture, type, coords); }
TUNIS_FORCE_INLINE void  glMultiTexCoordPointerEXT(GLenum texunit, GLint size, GLenum type, GLsizei stride, const void * pointer) { tunisGL.tunisMultiTexCoordPointerEXT(texunit, size, type, stride, pointer); }
TUNIS_FORCE_INLINE void  glMultiTexEnvfEXT(GLenum texunit, GLenum target, GLenum pname, GLfloat param) { tunisGL.tunisMultiTexEnvfEXT(texunit, target, pname, param); }
TUNIS_FORCE_INLINE void  glMultiTexEnvfvEXT(GLenum texunit, GLenum target, GLenum pname, const GLfloat * params) { tunisGL.tunisMultiTexEnvfvEXT(texunit, target, pname, params); }
TUNIS_FORCE_INLINE void  glMultiTexEnviEXT(GLenum texunit, GLenum target, GLenum pname, GLint param) { tunisGL.tunisMultiTexEnviEXT(texunit, target, pname, param); }
TUNIS_FORCE_INLINE void  glMultiTexEnvivEXT(GLenum texunit, GLenum target, GLenum pname, const GLint * params) { tunisGL.tunisMultiTexEnvivEXT(texunit, target, pname, params); }
TUNIS_FORCE_INLINE void  glMultiTexGendEXT(GLenum texunit, GLenum coord, GLenum pname, GLdouble param) { tunisGL.tunisMultiTexGendEXT(texunit, coord, pname, param); }
TUNIS_FORCE_INLINE void  glMultiTexGendvEXT(GLenum texunit, GLenum coord, GLenum pname, const GLdouble * params) { tunisGL.tunisMultiTexGendvEXT(texunit, coord, pname, params); }
TUNIS_FORCE_INLINE void  glMultiTexGenfEXT(GLenum texunit, GLenum coord, GLenum pname, GLfloat param) { tunisGL.tunisMultiTexGenfEXT(texunit, coord, pname, param); }
TUNIS_FORCE_INLINE void  glMultiTexGenfvEXT(GLenum texunit, GLenum coord, GLenum pname, const GLfloat * params) { tunisGL.tunisMultiTexGenfvEXT(texunit, coord, pname, params); }
TUNIS_FORCE_INLINE void  glMultiTexGeniEXT(GLenum texunit, GLenum coord, GLenum pname, GLint param) { tunisGL.tunisMultiTexGeniEXT(texunit, coord, pname, param); }
TUNIS_FORCE_INLINE void  glMultiTexGenivEXT(GLenum texunit, GLenum coord, GLenum pname, const GLint * params) { tunisGL.tunisMultiTexGenivEXT(texunit, coord, pname, params); }
TUNIS_FORCE_INLINE void  glMultiTexImage1DEXT(GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void * pixels) { tunisGL.tunisMultiTexImage1DEXT(texunit, target, level, internalformat, width, border, format, type, pixels); }
TUNIS_FORCE_INLINE void  glMultiTexImage2DEXT(GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void * pixels) { tunisGL.tunisMultiTexImage2DEXT(texunit, target, level, internalformat, width, height, border, format, type, pixels); }
TUNIS_FORCE_INLINE void  glMultiTexImage3DEXT(GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void * pixels) { tunisGL.tunisMultiTexImage3DEXT(texunit, target, level, internalformat, width, height, depth, border, format, type, pixels); }
TUNIS_FORCE_INLINE void  glMultiTexParameterIivEXT(GLenum texunit, GLenum target, GLenum pname, const GLint * params) { tunisGL.tunisMultiTexParameterIivEXT(texunit, target, pname, params); }
TUNIS_FORCE_INLINE void  glMultiTexParameterIuivEXT(GLenum texunit, GLenum target, GLenum pname, const GLuint * params) { tunisGL.tunisMultiTexParameterIuivEXT(texunit, target, pname, params); }
TUNIS_FORCE_INLINE void  glMultiTexParameterfEXT(GLenum texunit, GLenum target, GLenum pname, GLfloat param) { tunisGL.tunisMultiTexParameterfEXT(texunit, target, pname, param); }
TUNIS_FORCE_INLINE void  glMultiTexParameterfvEXT(GLenum texunit, GLenum target, GLenum pname, const GLfloat * params) { tunisGL.tunisMultiTexParameterfvEXT(texunit, target, pname, params); }
TUNIS_FORCE_INLINE void  glMultiTexParameteriEXT(GLenum texunit, GLenum target, GLenum pname, GLint param) { tunisGL.tunisMultiTexParameteriEXT(texunit, target, pname, param); }
TUNIS_FORCE_INLINE void  glMultiTexParameterivEXT(GLenum texunit, GLenum target, GLenum pname, const GLint * params) { tunisGL.tunisMultiTexParameterivEXT(texunit, target, pname, params); }
TUNIS_FORCE_INLINE void  glMultiTexRenderbufferEXT(GLenum texunit, GLenum target, GLuint renderbuffer) { tunisGL.tunisMultiTexRenderbufferEXT(texunit, target, renderbuffer); }
TUNIS_FORCE_INLINE void  glMultiTexSubImage1DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void * pixels) { tunisGL.tunisMultiTexSubImage1DEXT(texunit, target, level, xoffset, width, format, type, pixels); }
TUNIS_FORCE_INLINE void  glMultiTexSubImage2DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * pixels) { tunisGL.tunisMultiTexSubImage2DEXT(texunit, target, level, xoffset, yoffset, width, height, format, type, pixels); }
TUNIS_FORCE_INLINE void  glMultiTexSubImage3DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void * pixels) { tunisGL.tunisMultiTexSubImage3DEXT(texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels); }
TUNIS_FORCE_INLINE void  glMulticastBarrierNV(void) { tunisGL.tunisMulticastBarrierNV(); }
TUNIS_FORCE_INLINE void  glMulticastBlitFramebufferNV(GLuint srcGpu, GLuint dstGpu, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter) { tunisGL.tunisMulticastBlitFramebufferNV(srcGpu, dstGpu, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter); }
TUNIS_FORCE_INLINE void  glMulticastBufferSubDataNV(GLbitfield gpuMask, GLuint buffer, GLintptr offset, GLsizeiptr size, const void * data) { tunisGL.tunisMulticastBufferSubDataNV(gpuMask, buffer, offset, size, data); }
TUNIS_FORCE_INLINE void  glMulticastCopyBufferSubDataNV(GLuint readGpu, GLbitfield writeGpuMask, GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size) { tunisGL.tunisMulticastCopyBufferSubDataNV(readGpu, writeGpuMask, readBuffer, writeBuffer, readOffset, writeOffset, size); }
TUNIS_FORCE_INLINE void  glMulticastCopyImageSubDataNV(GLuint srcGpu, GLbitfield dstGpuMask, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth) { tunisGL.tunisMulticastCopyImageSubDataNV(srcGpu, dstGpuMask, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth); }
TUNIS_FORCE_INLINE void  glMulticastFramebufferSampleLocationsfvNV(GLuint gpu, GLuint framebuffer, GLuint start, GLsizei count, const GLfloat * v) { tunisGL.tunisMulticastFramebufferSampleLocationsfvNV(gpu, framebuffer, start, count, v); }
TUNIS_FORCE_INLINE void  glMulticastGetQueryObjecti64vNV(GLuint gpu, GLuint id, GLenum pname, GLint64 * params) { tunisGL.tunisMulticastGetQueryObjecti64vNV(gpu, id, pname, params); }
TUNIS_FORCE_INLINE void  glMulticastGetQueryObjectivNV(GLuint gpu, GLuint id, GLenum pname, GLint * params) { tunisGL.tunisMulticastGetQueryObjectivNV(gpu, id, pname, params); }
TUNIS_FORCE_INLINE void  glMulticastGetQueryObjectui64vNV(GLuint gpu, GLuint id, GLenum pname, GLuint64 * params) { tunisGL.tunisMulticastGetQueryObjectui64vNV(gpu, id, pname, params); }
TUNIS_FORCE_INLINE void  glMulticastGetQueryObjectuivNV(GLuint gpu, GLuint id, GLenum pname, GLuint * params) { tunisGL.tunisMulticastGetQueryObjectuivNV(gpu, id, pname, params); }
TUNIS_FORCE_INLINE void  glMulticastWaitSyncNV(GLuint signalGpu, GLbitfield waitGpuMask) { tunisGL.tunisMulticastWaitSyncNV(signalGpu, waitGpuMask); }
TUNIS_FORCE_INLINE void  glNamedBufferData(GLuint buffer, GLsizeiptr size, const void * data, GLenum usage) { tunisGL.tunisNamedBufferData(buffer, size, data, usage); }
TUNIS_FORCE_INLINE void  glNamedBufferDataEXT(GLuint buffer, GLsizeiptr size, const void * data, GLenum usage) { tunisGL.tunisNamedBufferDataEXT(buffer, size, data, usage); }
TUNIS_FORCE_INLINE void  glNamedBufferPageCommitmentARB(GLuint buffer, GLintptr offset, GLsizeiptr size, GLboolean commit) { tunisGL.tunisNamedBufferPageCommitmentARB(buffer, offset, size, commit); }
TUNIS_FORCE_INLINE void  glNamedBufferPageCommitmentEXT(GLuint buffer, GLintptr offset, GLsizeiptr size, GLboolean commit) { tunisGL.tunisNamedBufferPageCommitmentEXT(buffer, offset, size, commit); }
TUNIS_FORCE_INLINE void  glNamedBufferStorage(GLuint buffer, GLsizeiptr size, const void * data, GLbitfield flags) { tunisGL.tunisNamedBufferStorage(buffer, size, data, flags); }
TUNIS_FORCE_INLINE void  glNamedBufferStorageEXT(GLuint buffer, GLsizeiptr size, const void * data, GLbitfield flags) { tunisGL.tunisNamedBufferStorageEXT(buffer, size, data, flags); }
TUNIS_FORCE_INLINE void  glNamedBufferStorageExternalEXT(GLuint buffer, GLintptr offset, GLsizeiptr size, GLeglClientBufferEXT clientBuffer, GLbitfield flags) { tunisGL.tunisNamedBufferStorageExternalEXT(buffer, offset, size, clientBuffer, flags); }
TUNIS_FORCE_INLINE void  glNamedBufferStorageMemEXT(GLuint buffer, GLsizeiptr size, GLuint memory, GLuint64 offset) { tunisGL.tunisNamedBufferStorageMemEXT(buffer, size, memory, offset); }
TUNIS_FORCE_INLINE void  glNamedBufferSubData(GLuint buffer, GLintptr offset, GLsizeiptr size, const void * data) { tunisGL.tunisNamedBufferSubData(buffer, offset, size, data); }
TUNIS_FORCE_INLINE void  glNamedBufferSubDataEXT(GLuint buffer, GLintptr offset, GLsizeiptr size, const void * data) { tunisGL.tunisNamedBufferSubDataEXT(buffer, offset, size, data); }
TUNIS_FORCE_INLINE void  glNamedCopyBufferSubDataEXT(GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size) { tunisGL.tunisNamedCopyBufferSubDataEXT(readBuffer, writeBuffer, readOffset, writeOffset, size); }
TUNIS_FORCE_INLINE void  glNamedFramebufferDrawBuffer(GLuint framebuffer, GLenum buf) { tunisGL.tunisNamedFramebufferDrawBuffer(framebuffer, buf); }
TUNIS_FORCE_INLINE void  glNamedFramebufferDrawBuffers(GLuint framebuffer, GLsizei n, const GLenum * bufs) { tunisGL.tunisNamedFramebufferDrawBuffers(framebuffer, n, bufs); }
TUNIS_FORCE_INLINE void  glNamedFramebufferParameteri(GLuint framebuffer, GLenum pname, GLint param) { tunisGL.tunisNamedFramebufferParameteri(framebuffer, pname, param); }
TUNIS_FORCE_INLINE void  glNamedFramebufferParameteriEXT(GLuint framebuffer, GLenum pname, GLint param) { tunisGL.tunisNamedFramebufferParameteriEXT(framebuffer, pname, param); }
TUNIS_FORCE_INLINE void  glNamedFramebufferReadBuffer(GLuint framebuffer, GLenum src) { tunisGL.tunisNamedFramebufferReadBuffer(framebuffer, src); }
TUNIS_FORCE_INLINE void  glNamedFramebufferRenderbuffer(GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer) { tunisGL.tunisNamedFramebufferRenderbuffer(framebuffer, attachment, renderbuffertarget, renderbuffer); }
TUNIS_FORCE_INLINE void  glNamedFramebufferRenderbufferEXT(GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer) { tunisGL.tunisNamedFramebufferRenderbufferEXT(framebuffer, attachment, renderbuffertarget, renderbuffer); }
TUNIS_FORCE_INLINE void  glNamedFramebufferSampleLocationsfvARB(GLuint framebuffer, GLuint start, GLsizei count, const GLfloat * v) { tunisGL.tunisNamedFramebufferSampleLocationsfvARB(framebuffer, start, count, v); }
TUNIS_FORCE_INLINE void  glNamedFramebufferSampleLocationsfvNV(GLuint framebuffer, GLuint start, GLsizei count, const GLfloat * v) { tunisGL.tunisNamedFramebufferSampleLocationsfvNV(framebuffer, start, count, v); }
TUNIS_FORCE_INLINE void  glNamedFramebufferSamplePositionsfvAMD(GLuint framebuffer, GLuint numsamples, GLuint pixelindex, const GLfloat * values) { tunisGL.tunisNamedFramebufferSamplePositionsfvAMD(framebuffer, numsamples, pixelindex, values); }
TUNIS_FORCE_INLINE void  glNamedFramebufferTexture(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level) { tunisGL.tunisNamedFramebufferTexture(framebuffer, attachment, texture, level); }
TUNIS_FORCE_INLINE void  glNamedFramebufferTexture1DEXT(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level) { tunisGL.tunisNamedFramebufferTexture1DEXT(framebuffer, attachment, textarget, texture, level); }
TUNIS_FORCE_INLINE void  glNamedFramebufferTexture2DEXT(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level) { tunisGL.tunisNamedFramebufferTexture2DEXT(framebuffer, attachment, textarget, texture, level); }
TUNIS_FORCE_INLINE void  glNamedFramebufferTexture3DEXT(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset) { tunisGL.tunisNamedFramebufferTexture3DEXT(framebuffer, attachment, textarget, texture, level, zoffset); }
TUNIS_FORCE_INLINE void  glNamedFramebufferTextureEXT(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level) { tunisGL.tunisNamedFramebufferTextureEXT(framebuffer, attachment, texture, level); }
TUNIS_FORCE_INLINE void  glNamedFramebufferTextureFaceEXT(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLenum face) { tunisGL.tunisNamedFramebufferTextureFaceEXT(framebuffer, attachment, texture, level, face); }
TUNIS_FORCE_INLINE void  glNamedFramebufferTextureLayer(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer) { tunisGL.tunisNamedFramebufferTextureLayer(framebuffer, attachment, texture, level, layer); }
TUNIS_FORCE_INLINE void  glNamedFramebufferTextureLayerEXT(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer) { tunisGL.tunisNamedFramebufferTextureLayerEXT(framebuffer, attachment, texture, level, layer); }
TUNIS_FORCE_INLINE void  glNamedProgramLocalParameter4dEXT(GLuint program, GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) { tunisGL.tunisNamedProgramLocalParameter4dEXT(program, target, index, x, y, z, w); }
TUNIS_FORCE_INLINE void  glNamedProgramLocalParameter4dvEXT(GLuint program, GLenum target, GLuint index, const GLdouble * params) { tunisGL.tunisNamedProgramLocalParameter4dvEXT(program, target, index, params); }
TUNIS_FORCE_INLINE void  glNamedProgramLocalParameter4fEXT(GLuint program, GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w) { tunisGL.tunisNamedProgramLocalParameter4fEXT(program, target, index, x, y, z, w); }
TUNIS_FORCE_INLINE void  glNamedProgramLocalParameter4fvEXT(GLuint program, GLenum target, GLuint index, const GLfloat * params) { tunisGL.tunisNamedProgramLocalParameter4fvEXT(program, target, index, params); }
TUNIS_FORCE_INLINE void  glNamedProgramLocalParameterI4iEXT(GLuint program, GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w) { tunisGL.tunisNamedProgramLocalParameterI4iEXT(program, target, index, x, y, z, w); }
TUNIS_FORCE_INLINE void  glNamedProgramLocalParameterI4ivEXT(GLuint program, GLenum target, GLuint index, const GLint * params) { tunisGL.tunisNamedProgramLocalParameterI4ivEXT(program, target, index, params); }
TUNIS_FORCE_INLINE void  glNamedProgramLocalParameterI4uiEXT(GLuint program, GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w) { tunisGL.tunisNamedProgramLocalParameterI4uiEXT(program, target, index, x, y, z, w); }
TUNIS_FORCE_INLINE void  glNamedProgramLocalParameterI4uivEXT(GLuint program, GLenum target, GLuint index, const GLuint * params) { tunisGL.tunisNamedProgramLocalParameterI4uivEXT(program, target, index, params); }
TUNIS_FORCE_INLINE void  glNamedProgramLocalParameters4fvEXT(GLuint program, GLenum target, GLuint index, GLsizei count, const GLfloat * params) { tunisGL.tunisNamedProgramLocalParameters4fvEXT(program, target, index, count, params); }
TUNIS_FORCE_INLINE void  glNamedProgramLocalParametersI4ivEXT(GLuint program, GLenum target, GLuint index, GLsizei count, const GLint * params) { tunisGL.tunisNamedProgramLocalParametersI4ivEXT(program, target, index, count, params); }
TUNIS_FORCE_INLINE void  glNamedProgramLocalParametersI4uivEXT(GLuint program, GLenum target, GLuint index, GLsizei count, const GLuint * params) { tunisGL.tunisNamedProgramLocalParametersI4uivEXT(program, target, index, count, params); }
TUNIS_FORCE_INLINE void  glNamedProgramStringEXT(GLuint program, GLenum target, GLenum format, GLsizei len, const void * string) { tunisGL.tunisNamedProgramStringEXT(program, target, format, len, string); }
TUNIS_FORCE_INLINE void  glNamedRenderbufferStorage(GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height) { tunisGL.tunisNamedRenderbufferStorage(renderbuffer, internalformat, width, height); }
TUNIS_FORCE_INLINE void  glNamedRenderbufferStorageEXT(GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height) { tunisGL.tunisNamedRenderbufferStorageEXT(renderbuffer, internalformat, width, height); }
TUNIS_FORCE_INLINE void  glNamedRenderbufferStorageMultisample(GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height) { tunisGL.tunisNamedRenderbufferStorageMultisample(renderbuffer, samples, internalformat, width, height); }
TUNIS_FORCE_INLINE void  glNamedRenderbufferStorageMultisampleAdvancedAMD(GLuint renderbuffer, GLsizei samples, GLsizei storageSamples, GLenum internalformat, GLsizei width, GLsizei height) { tunisGL.tunisNamedRenderbufferStorageMultisampleAdvancedAMD(renderbuffer, samples, storageSamples, internalformat, width, height); }
TUNIS_FORCE_INLINE void  glNamedRenderbufferStorageMultisampleCoverageEXT(GLuint renderbuffer, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height) { tunisGL.tunisNamedRenderbufferStorageMultisampleCoverageEXT(renderbuffer, coverageSamples, colorSamples, internalformat, width, height); }
TUNIS_FORCE_INLINE void  glNamedRenderbufferStorageMultisampleEXT(GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height) { tunisGL.tunisNamedRenderbufferStorageMultisampleEXT(renderbuffer, samples, internalformat, width, height); }
TUNIS_FORCE_INLINE void  glNamedStringARB(GLenum type, GLint namelen, const GLchar * name, GLint stringlen, const GLchar * string) { tunisGL.tunisNamedStringARB(type, namelen, name, stringlen, string); }
TUNIS_FORCE_INLINE GLuint glNewBufferRegion(GLenum region) { return tunisGL.tunisNewBufferRegion(region); }
TUNIS_FORCE_INLINE void  glNewList(GLuint list, GLenum mode) { tunisGL.tunisNewList(list, mode); }
TUNIS_FORCE_INLINE GLuint glNewObjectBufferATI(GLsizei size, const void * pointer, GLenum usage) { return tunisGL.tunisNewObjectBufferATI(size, pointer, usage); }
TUNIS_FORCE_INLINE void  glNormal3b(GLbyte nx, GLbyte ny, GLbyte nz) { tunisGL.tunisNormal3b(nx, ny, nz); }
TUNIS_FORCE_INLINE void  glNormal3bv(const GLbyte * v) { tunisGL.tunisNormal3bv(v); }
TUNIS_FORCE_INLINE void  glNormal3d(GLdouble nx, GLdouble ny, GLdouble nz) { tunisGL.tunisNormal3d(nx, ny, nz); }
TUNIS_FORCE_INLINE void  glNormal3dv(const GLdouble * v) { tunisGL.tunisNormal3dv(v); }
TUNIS_FORCE_INLINE void  glNormal3f(GLfloat nx, GLfloat ny, GLfloat nz) { tunisGL.tunisNormal3f(nx, ny, nz); }
TUNIS_FORCE_INLINE void  glNormal3fVertex3fSUN(GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z) { tunisGL.tunisNormal3fVertex3fSUN(nx, ny, nz, x, y, z); }
TUNIS_FORCE_INLINE void  glNormal3fVertex3fvSUN(const GLfloat * n, const GLfloat * v) { tunisGL.tunisNormal3fVertex3fvSUN(n, v); }
TUNIS_FORCE_INLINE void  glNormal3fv(const GLfloat * v) { tunisGL.tunisNormal3fv(v); }
TUNIS_FORCE_INLINE void  glNormal3hNV(GLhalfNV nx, GLhalfNV ny, GLhalfNV nz) { tunisGL.tunisNormal3hNV(nx, ny, nz); }
TUNIS_FORCE_INLINE void  glNormal3hvNV(const GLhalfNV * v) { tunisGL.tunisNormal3hvNV(v); }
TUNIS_FORCE_INLINE void  glNormal3i(GLint nx, GLint ny, GLint nz) { tunisGL.tunisNormal3i(nx, ny, nz); }
TUNIS_FORCE_INLINE void  glNormal3iv(const GLint * v) { tunisGL.tunisNormal3iv(v); }
TUNIS_FORCE_INLINE void  glNormal3s(GLshort nx, GLshort ny, GLshort nz) { tunisGL.tunisNormal3s(nx, ny, nz); }
TUNIS_FORCE_INLINE void  glNormal3sv(const GLshort * v) { tunisGL.tunisNormal3sv(v); }
TUNIS_FORCE_INLINE void  glNormal3x(GLfixed nx, GLfixed ny, GLfixed nz) { tunisGL.tunisNormal3x(nx, ny, nz); }
TUNIS_FORCE_INLINE void  glNormal3xOES(GLfixed nx, GLfixed ny, GLfixed nz) { tunisGL.tunisNormal3xOES(nx, ny, nz); }
TUNIS_FORCE_INLINE void  glNormal3xvOES(const GLfixed * coords) { tunisGL.tunisNormal3xvOES(coords); }
TUNIS_FORCE_INLINE void  glNormalFormatNV(GLenum type, GLsizei stride) { tunisGL.tunisNormalFormatNV(type, stride); }
TUNIS_FORCE_INLINE void  glNormalP3ui(GLenum type, GLuint coords) { tunisGL.tunisNormalP3ui(type, coords); }
TUNIS_FORCE_INLINE void  glNormalP3uiv(GLenum type, const GLuint * coords) { tunisGL.tunisNormalP3uiv(type, coords); }
TUNIS_FORCE_INLINE void  glNormalPointer(GLenum type, GLsizei stride, const void * pointer) { tunisGL.tunisNormalPointer(type, stride, pointer); }
TUNIS_FORCE_INLINE void  glNormalPointerEXT(GLenum type, GLsizei stride, GLsizei count, const void * pointer) { tunisGL.tunisNormalPointerEXT(type, stride, count, pointer); }
TUNIS_FORCE_INLINE void  glNormalPointerListIBM(GLenum type, GLint stride, const void ** pointer, GLint ptrstride) { tunisGL.tunisNormalPointerListIBM(type, stride, pointer, ptrstride); }
TUNIS_FORCE_INLINE void  glNormalPointervINTEL(GLenum type, const void ** pointer) { tunisGL.tunisNormalPointervINTEL(type, pointer); }
TUNIS_FORCE_INLINE void  glNormalStream3bATI(GLenum stream, GLbyte nx, GLbyte ny, GLbyte nz) { tunisGL.tunisNormalStream3bATI(stream, nx, ny, nz); }
TUNIS_FORCE_INLINE void  glNormalStream3bvATI(GLenum stream, const GLbyte * coords) { tunisGL.tunisNormalStream3bvATI(stream, coords); }
TUNIS_FORCE_INLINE void  glNormalStream3dATI(GLenum stream, GLdouble nx, GLdouble ny, GLdouble nz) { tunisGL.tunisNormalStream3dATI(stream, nx, ny, nz); }
TUNIS_FORCE_INLINE void  glNormalStream3dvATI(GLenum stream, const GLdouble * coords) { tunisGL.tunisNormalStream3dvATI(stream, coords); }
TUNIS_FORCE_INLINE void  glNormalStream3fATI(GLenum stream, GLfloat nx, GLfloat ny, GLfloat nz) { tunisGL.tunisNormalStream3fATI(stream, nx, ny, nz); }
TUNIS_FORCE_INLINE void  glNormalStream3fvATI(GLenum stream, const GLfloat * coords) { tunisGL.tunisNormalStream3fvATI(stream, coords); }
TUNIS_FORCE_INLINE void  glNormalStream3iATI(GLenum stream, GLint nx, GLint ny, GLint nz) { tunisGL.tunisNormalStream3iATI(stream, nx, ny, nz); }
TUNIS_FORCE_INLINE void  glNormalStream3ivATI(GLenum stream, const GLint * coords) { tunisGL.tunisNormalStream3ivATI(stream, coords); }
TUNIS_FORCE_INLINE void  glNormalStream3sATI(GLenum stream, GLshort nx, GLshort ny, GLshort nz) { tunisGL.tunisNormalStream3sATI(stream, nx, ny, nz); }
TUNIS_FORCE_INLINE void  glNormalStream3svATI(GLenum stream, const GLshort * coords) { tunisGL.tunisNormalStream3svATI(stream, coords); }
TUNIS_FORCE_INLINE void  glObjectLabel(GLenum identifier, GLuint name, GLsizei length, const GLchar * label) { tunisGL.tunisObjectLabel(identifier, name, length, label); }
TUNIS_FORCE_INLINE void  glObjectLabelKHR(GLenum identifier, GLuint name, GLsizei length, const GLchar * label) { tunisGL.tunisObjectLabelKHR(identifier, name, length, label); }
TUNIS_FORCE_INLINE void  glObjectPtrLabel(const void * ptr, GLsizei length, const GLchar * label) { tunisGL.tunisObjectPtrLabel(ptr, length, label); }
TUNIS_FORCE_INLINE void  glObjectPtrLabelKHR(const void * ptr, GLsizei length, const GLchar * label) { tunisGL.tunisObjectPtrLabelKHR(ptr, length, label); }
TUNIS_FORCE_INLINE GLenum glObjectPurgeableAPPLE(GLenum objectType, GLuint name, GLenum option) { return tunisGL.tunisObjectPurgeableAPPLE(objectType, name, option); }
TUNIS_FORCE_INLINE GLenum glObjectUnpurgeableAPPLE(GLenum objectType, GLuint name, GLenum option) { return tunisGL.tunisObjectUnpurgeableAPPLE(objectType, name, option); }
TUNIS_FORCE_INLINE void  glOrtho(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar) { tunisGL.tunisOrtho(left, right, bottom, top, zNear, zFar); }
TUNIS_FORCE_INLINE void  glOrthof(GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f) { tunisGL.tunisOrthof(l, r, b, t, n, f); }
TUNIS_FORCE_INLINE void  glOrthofOES(GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f) { tunisGL.tunisOrthofOES(l, r, b, t, n, f); }
TUNIS_FORCE_INLINE void  glOrthox(GLfixed l, GLfixed r, GLfixed b, GLfixed t, GLfixed n, GLfixed f) { tunisGL.tunisOrthox(l, r, b, t, n, f); }
TUNIS_FORCE_INLINE void  glOrthoxOES(GLfixed l, GLfixed r, GLfixed b, GLfixed t, GLfixed n, GLfixed f) { tunisGL.tunisOrthoxOES(l, r, b, t, n, f); }
TUNIS_FORCE_INLINE void  glPNTrianglesfATI(GLenum pname, GLfloat param) { tunisGL.tunisPNTrianglesfATI(pname, param); }
TUNIS_FORCE_INLINE void  glPNTrianglesiATI(GLenum pname, GLint param) { tunisGL.tunisPNTrianglesiATI(pname, param); }
TUNIS_FORCE_INLINE void  glPassTexCoordATI(GLuint dst, GLuint coord, GLenum swizzle) { tunisGL.tunisPassTexCoordATI(dst, coord, swizzle); }
TUNIS_FORCE_INLINE void  glPassThrough(GLfloat token) { tunisGL.tunisPassThrough(token); }
TUNIS_FORCE_INLINE void  glPassThroughxOES(GLfixed token) { tunisGL.tunisPassThroughxOES(token); }
TUNIS_FORCE_INLINE void  glPatchParameterfv(GLenum pname, const GLfloat * values) { tunisGL.tunisPatchParameterfv(pname, values); }
TUNIS_FORCE_INLINE void  glPatchParameteri(GLenum pname, GLint value) { tunisGL.tunisPatchParameteri(pname, value); }
TUNIS_FORCE_INLINE void  glPatchParameteriEXT(GLenum pname, GLint value) { tunisGL.tunisPatchParameteriEXT(pname, value); }
TUNIS_FORCE_INLINE void  glPatchParameteriOES(GLenum pname, GLint value) { tunisGL.tunisPatchParameteriOES(pname, value); }
TUNIS_FORCE_INLINE void  glPathColorGenNV(GLenum color, GLenum genMode, GLenum colorFormat, const GLfloat * coeffs) { tunisGL.tunisPathColorGenNV(color, genMode, colorFormat, coeffs); }
TUNIS_FORCE_INLINE void  glPathCommandsNV(GLuint path, GLsizei numCommands, const GLubyte * commands, GLsizei numCoords, GLenum coordType, const void * coords) { tunisGL.tunisPathCommandsNV(path, numCommands, commands, numCoords, coordType, coords); }
TUNIS_FORCE_INLINE void  glPathCoordsNV(GLuint path, GLsizei numCoords, GLenum coordType, const void * coords) { tunisGL.tunisPathCoordsNV(path, numCoords, coordType, coords); }
TUNIS_FORCE_INLINE void  glPathCoverDepthFuncNV(GLenum func) { tunisGL.tunisPathCoverDepthFuncNV(func); }
TUNIS_FORCE_INLINE void  glPathDashArrayNV(GLuint path, GLsizei dashCount, const GLfloat * dashArray) { tunisGL.tunisPathDashArrayNV(path, dashCount, dashArray); }
TUNIS_FORCE_INLINE void  glPathFogGenNV(GLenum genMode) { tunisGL.tunisPathFogGenNV(genMode); }
TUNIS_FORCE_INLINE GLenum glPathGlyphIndexArrayNV(GLuint firstPathName, GLenum fontTarget, const void * fontName, GLbitfield fontStyle, GLuint firstGlyphIndex, GLsizei numGlyphs, GLuint pathParameterTemplate, GLfloat emScale) { return tunisGL.tunisPathGlyphIndexArrayNV(firstPathName, fontTarget, fontName, fontStyle, firstGlyphIndex, numGlyphs, pathParameterTemplate, emScale); }
TUNIS_FORCE_INLINE GLenum glPathGlyphIndexRangeNV(GLenum fontTarget, const void * fontName, GLbitfield fontStyle, GLuint pathParameterTemplate, GLfloat emScale, GLuint baseAndCount[2]) { return tunisGL.tunisPathGlyphIndexRangeNV(fontTarget, fontName, fontStyle, pathParameterTemplate, emScale, baseAndCount); }
TUNIS_FORCE_INLINE void  glPathGlyphRangeNV(GLuint firstPathName, GLenum fontTarget, const void * fontName, GLbitfield fontStyle, GLuint firstGlyph, GLsizei numGlyphs, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale) { tunisGL.tunisPathGlyphRangeNV(firstPathName, fontTarget, fontName, fontStyle, firstGlyph, numGlyphs, handleMissingGlyphs, pathParameterTemplate, emScale); }
TUNIS_FORCE_INLINE void  glPathGlyphsNV(GLuint firstPathName, GLenum fontTarget, const void * fontName, GLbitfield fontStyle, GLsizei numGlyphs, GLenum type, const void * charcodes, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale) { tunisGL.tunisPathGlyphsNV(firstPathName, fontTarget, fontName, fontStyle, numGlyphs, type, charcodes, handleMissingGlyphs, pathParameterTemplate, emScale); }
TUNIS_FORCE_INLINE GLenum glPathMemoryGlyphIndexArrayNV(GLuint firstPathName, GLenum fontTarget, GLsizeiptr fontSize, const void * fontData, GLsizei faceIndex, GLuint firstGlyphIndex, GLsizei numGlyphs, GLuint pathParameterTemplate, GLfloat emScale) { return tunisGL.tunisPathMemoryGlyphIndexArrayNV(firstPathName, fontTarget, fontSize, fontData, faceIndex, firstGlyphIndex, numGlyphs, pathParameterTemplate, emScale); }
TUNIS_FORCE_INLINE void  glPathParameterfNV(GLuint path, GLenum pname, GLfloat value) { tunisGL.tunisPathParameterfNV(path, pname, value); }
TUNIS_FORCE_INLINE void  glPathParameterfvNV(GLuint path, GLenum pname, const GLfloat * value) { tunisGL.tunisPathParameterfvNV(path, pname, value); }
TUNIS_FORCE_INLINE void  glPathParameteriNV(GLuint path, GLenum pname, GLint value) { tunisGL.tunisPathParameteriNV(path, pname, value); }
TUNIS_FORCE_INLINE void  glPathParameterivNV(GLuint path, GLenum pname, const GLint * value) { tunisGL.tunisPathParameterivNV(path, pname, value); }
TUNIS_FORCE_INLINE void  glPathStencilDepthOffsetNV(GLfloat factor, GLfloat units) { tunisGL.tunisPathStencilDepthOffsetNV(factor, units); }
TUNIS_FORCE_INLINE void  glPathStencilFuncNV(GLenum func, GLint ref, GLuint mask) { tunisGL.tunisPathStencilFuncNV(func, ref, mask); }
TUNIS_FORCE_INLINE void  glPathStringNV(GLuint path, GLenum format, GLsizei length, const void * pathString) { tunisGL.tunisPathStringNV(path, format, length, pathString); }
TUNIS_FORCE_INLINE void  glPathSubCommandsNV(GLuint path, GLsizei commandStart, GLsizei commandsToDelete, GLsizei numCommands, const GLubyte * commands, GLsizei numCoords, GLenum coordType, const void * coords) { tunisGL.tunisPathSubCommandsNV(path, commandStart, commandsToDelete, numCommands, commands, numCoords, coordType, coords); }
TUNIS_FORCE_INLINE void  glPathSubCoordsNV(GLuint path, GLsizei coordStart, GLsizei numCoords, GLenum coordType, const void * coords) { tunisGL.tunisPathSubCoordsNV(path, coordStart, numCoords, coordType, coords); }
TUNIS_FORCE_INLINE void  glPathTexGenNV(GLenum texCoordSet, GLenum genMode, GLint components, const GLfloat * coeffs) { tunisGL.tunisPathTexGenNV(texCoordSet, genMode, components, coeffs); }
TUNIS_FORCE_INLINE void  glPauseTransformFeedback(void) { tunisGL.tunisPauseTransformFeedback(); }
TUNIS_FORCE_INLINE void  glPauseTransformFeedbackNV(void) { tunisGL.tunisPauseTransformFeedbackNV(); }
TUNIS_FORCE_INLINE void  glPixelDataRangeNV(GLenum target, GLsizei length, const void * pointer) { tunisGL.tunisPixelDataRangeNV(target, length, pointer); }
TUNIS_FORCE_INLINE void  glPixelMapfv(GLenum map, GLsizei mapsize, const GLfloat * values) { tunisGL.tunisPixelMapfv(map, mapsize, values); }
TUNIS_FORCE_INLINE void  glPixelMapuiv(GLenum map, GLsizei mapsize, const GLuint * values) { tunisGL.tunisPixelMapuiv(map, mapsize, values); }
TUNIS_FORCE_INLINE void  glPixelMapusv(GLenum map, GLsizei mapsize, const GLushort * values) { tunisGL.tunisPixelMapusv(map, mapsize, values); }
TUNIS_FORCE_INLINE void  glPixelMapx(GLenum map, GLint size, const GLfixed * values) { tunisGL.tunisPixelMapx(map, size, values); }
TUNIS_FORCE_INLINE void  glPixelStoref(GLenum pname, GLfloat param) { tunisGL.tunisPixelStoref(pname, param); }
TUNIS_FORCE_INLINE void  glPixelStorei(GLenum pname, GLint param) { tunisGL.tunisPixelStorei(pname, param); }
TUNIS_FORCE_INLINE void  glPixelStorex(GLenum pname, GLfixed param) { tunisGL.tunisPixelStorex(pname, param); }
TUNIS_FORCE_INLINE void  glPixelTexGenParameterfSGIS(GLenum pname, GLfloat param) { tunisGL.tunisPixelTexGenParameterfSGIS(pname, param); }
TUNIS_FORCE_INLINE void  glPixelTexGenParameterfvSGIS(GLenum pname, const GLfloat * params) { tunisGL.tunisPixelTexGenParameterfvSGIS(pname, params); }
TUNIS_FORCE_INLINE void  glPixelTexGenParameteriSGIS(GLenum pname, GLint param) { tunisGL.tunisPixelTexGenParameteriSGIS(pname, param); }
TUNIS_FORCE_INLINE void  glPixelTexGenParameterivSGIS(GLenum pname, const GLint * params) { tunisGL.tunisPixelTexGenParameterivSGIS(pname, params); }
TUNIS_FORCE_INLINE void  glPixelTexGenSGIX(GLenum mode) { tunisGL.tunisPixelTexGenSGIX(mode); }
TUNIS_FORCE_INLINE void  glPixelTransferf(GLenum pname, GLfloat param) { tunisGL.tunisPixelTransferf(pname, param); }
TUNIS_FORCE_INLINE void  glPixelTransferi(GLenum pname, GLint param) { tunisGL.tunisPixelTransferi(pname, param); }
TUNIS_FORCE_INLINE void  glPixelTransferxOES(GLenum pname, GLfixed param) { tunisGL.tunisPixelTransferxOES(pname, param); }
TUNIS_FORCE_INLINE void  glPixelTransformParameterfEXT(GLenum target, GLenum pname, GLfloat param) { tunisGL.tunisPixelTransformParameterfEXT(target, pname, param); }
TUNIS_FORCE_INLINE void  glPixelTransformParameterfvEXT(GLenum target, GLenum pname, const GLfloat * params) { tunisGL.tunisPixelTransformParameterfvEXT(target, pname, params); }
TUNIS_FORCE_INLINE void  glPixelTransformParameteriEXT(GLenum target, GLenum pname, GLint param) { tunisGL.tunisPixelTransformParameteriEXT(target, pname, param); }
TUNIS_FORCE_INLINE void  glPixelTransformParameterivEXT(GLenum target, GLenum pname, const GLint * params) { tunisGL.tunisPixelTransformParameterivEXT(target, pname, params); }
TUNIS_FORCE_INLINE void  glPixelZoom(GLfloat xfactor, GLfloat yfactor) { tunisGL.tunisPixelZoom(xfactor, yfactor); }
TUNIS_FORCE_INLINE void  glPixelZoomxOES(GLfixed xfactor, GLfixed yfactor) { tunisGL.tunisPixelZoomxOES(xfactor, yfactor); }
TUNIS_FORCE_INLINE GLboolean glPointAlongPathNV(GLuint path, GLsizei startSegment, GLsizei numSegments, GLfloat distance, GLfloat * x, GLfloat * y, GLfloat * tangentX, GLfloat * tangentY) { return tunisGL.tunisPointAlongPathNV(path, startSegment, numSegments, distance, x, y, tangentX, tangentY); }
TUNIS_FORCE_INLINE void  glPointParameterf(GLenum pname, GLfloat param) { tunisGL.tunisPointParameterf(pname, param); }
TUNIS_FORCE_INLINE void  glPointParameterfARB(GLenum pname, GLfloat param) { tunisGL.tunisPointParameterfARB(pname, param); }
TUNIS_FORCE_INLINE void  glPointParameterfEXT(GLenum pname, GLfloat param) { tunisGL.tunisPointParameterfEXT(pname, param); }
TUNIS_FORCE_INLINE void  glPointParameterfSGIS(GLenum pname, GLfloat param) { tunisGL.tunisPointParameterfSGIS(pname, param); }
TUNIS_FORCE_INLINE void  glPointParameterfv(GLenum pname, const GLfloat * params) { tunisGL.tunisPointParameterfv(pname, params); }
TUNIS_FORCE_INLINE void  glPointParameterfvARB(GLenum pname, const GLfloat * params) { tunisGL.tunisPointParameterfvARB(pname, params); }
TUNIS_FORCE_INLINE void  glPointParameterfvEXT(GLenum pname, const GLfloat * params) { tunisGL.tunisPointParameterfvEXT(pname, params); }
TUNIS_FORCE_INLINE void  glPointParameterfvSGIS(GLenum pname, const GLfloat * params) { tunisGL.tunisPointParameterfvSGIS(pname, params); }
TUNIS_FORCE_INLINE void  glPointParameteri(GLenum pname, GLint param) { tunisGL.tunisPointParameteri(pname, param); }
TUNIS_FORCE_INLINE void  glPointParameteriNV(GLenum pname, GLint param) { tunisGL.tunisPointParameteriNV(pname, param); }
TUNIS_FORCE_INLINE void  glPointParameteriv(GLenum pname, const GLint * params) { tunisGL.tunisPointParameteriv(pname, params); }
TUNIS_FORCE_INLINE void  glPointParameterivNV(GLenum pname, const GLint * params) { tunisGL.tunisPointParameterivNV(pname, params); }
TUNIS_FORCE_INLINE void  glPointParameterx(GLenum pname, GLfixed param) { tunisGL.tunisPointParameterx(pname, param); }
TUNIS_FORCE_INLINE void  glPointParameterxOES(GLenum pname, GLfixed param) { tunisGL.tunisPointParameterxOES(pname, param); }
TUNIS_FORCE_INLINE void  glPointParameterxv(GLenum pname, const GLfixed * params) { tunisGL.tunisPointParameterxv(pname, params); }
TUNIS_FORCE_INLINE void  glPointParameterxvOES(GLenum pname, const GLfixed * params) { tunisGL.tunisPointParameterxvOES(pname, params); }
TUNIS_FORCE_INLINE void  glPointSize(GLfloat size) { tunisGL.tunisPointSize(size); }
TUNIS_FORCE_INLINE void  glPointSizePointerOES(GLenum type, GLsizei stride, const void * pointer) { tunisGL.tunisPointSizePointerOES(type, stride, pointer); }
TUNIS_FORCE_INLINE void  glPointSizex(GLfixed size) { tunisGL.tunisPointSizex(size); }
TUNIS_FORCE_INLINE void  glPointSizexOES(GLfixed size) { tunisGL.tunisPointSizexOES(size); }
TUNIS_FORCE_INLINE GLint glPollAsyncSGIX(GLuint * markerp) { return tunisGL.tunisPollAsyncSGIX(markerp); }
TUNIS_FORCE_INLINE GLint glPollInstrumentsSGIX(GLint * marker_p) { return tunisGL.tunisPollInstrumentsSGIX(marker_p); }
TUNIS_FORCE_INLINE void  glPolygonMode(GLenum face, GLenum mode) { tunisGL.tunisPolygonMode(face, mode); }
TUNIS_FORCE_INLINE void  glPolygonModeNV(GLenum face, GLenum mode) { tunisGL.tunisPolygonModeNV(face, mode); }
TUNIS_FORCE_INLINE void  glPolygonOffset(GLfloat factor, GLfloat units) { tunisGL.tunisPolygonOffset(factor, units); }
TUNIS_FORCE_INLINE void  glPolygonOffsetClamp(GLfloat factor, GLfloat units, GLfloat clamp) { tunisGL.tunisPolygonOffsetClamp(factor, units, clamp); }
TUNIS_FORCE_INLINE void  glPolygonOffsetClampEXT(GLfloat factor, GLfloat units, GLfloat clamp) { tunisGL.tunisPolygonOffsetClampEXT(factor, units, clamp); }
TUNIS_FORCE_INLINE void  glPolygonOffsetEXT(GLfloat factor, GLfloat bias) { tunisGL.tunisPolygonOffsetEXT(factor, bias); }
TUNIS_FORCE_INLINE void  glPolygonOffsetx(GLfixed factor, GLfixed units) { tunisGL.tunisPolygonOffsetx(factor, units); }
TUNIS_FORCE_INLINE void  glPolygonOffsetxOES(GLfixed factor, GLfixed units) { tunisGL.tunisPolygonOffsetxOES(factor, units); }
TUNIS_FORCE_INLINE void  glPolygonStipple(const GLubyte * mask) { tunisGL.tunisPolygonStipple(mask); }
TUNIS_FORCE_INLINE void  glPopAttrib(void) { tunisGL.tunisPopAttrib(); }
TUNIS_FORCE_INLINE void  glPopClientAttrib(void) { tunisGL.tunisPopClientAttrib(); }
TUNIS_FORCE_INLINE void  glPopDebugGroup(void) { tunisGL.tunisPopDebugGroup(); }
TUNIS_FORCE_INLINE void  glPopDebugGroupKHR(void) { tunisGL.tunisPopDebugGroupKHR(); }
TUNIS_FORCE_INLINE void  glPopGroupMarkerEXT(void) { tunisGL.tunisPopGroupMarkerEXT(); }
TUNIS_FORCE_INLINE void  glPopMatrix(void) { tunisGL.tunisPopMatrix(); }
TUNIS_FORCE_INLINE void  glPopName(void) { tunisGL.tunisPopName(); }
TUNIS_FORCE_INLINE void  glPresentFrameDualFillNV(GLuint video_slot, GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLenum target1, GLuint fill1, GLenum target2, GLuint fill2, GLenum target3, GLuint fill3) { tunisGL.tunisPresentFrameDualFillNV(video_slot, minPresentTime, beginPresentTimeId, presentDurationId, type, target0, fill0, target1, fill1, target2, fill2, target3, fill3); }
TUNIS_FORCE_INLINE void  glPresentFrameKeyedNV(GLuint video_slot, GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLuint key0, GLenum target1, GLuint fill1, GLuint key1) { tunisGL.tunisPresentFrameKeyedNV(video_slot, minPresentTime, beginPresentTimeId, presentDurationId, type, target0, fill0, key0, target1, fill1, key1); }
TUNIS_FORCE_INLINE void  glPrimitiveBoundingBox(GLfloat minX, GLfloat minY, GLfloat minZ, GLfloat minW, GLfloat maxX, GLfloat maxY, GLfloat maxZ, GLfloat maxW) { tunisGL.tunisPrimitiveBoundingBox(minX, minY, minZ, minW, maxX, maxY, maxZ, maxW); }
TUNIS_FORCE_INLINE void  glPrimitiveBoundingBoxARB(GLfloat minX, GLfloat minY, GLfloat minZ, GLfloat minW, GLfloat maxX, GLfloat maxY, GLfloat maxZ, GLfloat maxW) { tunisGL.tunisPrimitiveBoundingBoxARB(minX, minY, minZ, minW, maxX, maxY, maxZ, maxW); }
TUNIS_FORCE_INLINE void  glPrimitiveBoundingBoxEXT(GLfloat minX, GLfloat minY, GLfloat minZ, GLfloat minW, GLfloat maxX, GLfloat maxY, GLfloat maxZ, GLfloat maxW) { tunisGL.tunisPrimitiveBoundingBoxEXT(minX, minY, minZ, minW, maxX, maxY, maxZ, maxW); }
TUNIS_FORCE_INLINE void  glPrimitiveBoundingBoxOES(GLfloat minX, GLfloat minY, GLfloat minZ, GLfloat minW, GLfloat maxX, GLfloat maxY, GLfloat maxZ, GLfloat maxW) { tunisGL.tunisPrimitiveBoundingBoxOES(minX, minY, minZ, minW, maxX, maxY, maxZ, maxW); }
TUNIS_FORCE_INLINE void  glPrimitiveRestartIndex(GLuint index) { tunisGL.tunisPrimitiveRestartIndex(index); }
TUNIS_FORCE_INLINE void  glPrimitiveRestartIndexNV(GLuint index) { tunisGL.tunisPrimitiveRestartIndexNV(index); }
TUNIS_FORCE_INLINE void  glPrimitiveRestartNV(void) { tunisGL.tunisPrimitiveRestartNV(); }
TUNIS_FORCE_INLINE void  glPrioritizeTextures(GLsizei n, const GLuint * textures, const GLfloat * priorities) { tunisGL.tunisPrioritizeTextures(n, textures, priorities); }
TUNIS_FORCE_INLINE void  glPrioritizeTexturesEXT(GLsizei n, const GLuint * textures, const GLclampf * priorities) { tunisGL.tunisPrioritizeTexturesEXT(n, textures, priorities); }
TUNIS_FORCE_INLINE void  glPrioritizeTexturesxOES(GLsizei n, const GLuint * textures, const GLfixed * priorities) { tunisGL.tunisPrioritizeTexturesxOES(n, textures, priorities); }
TUNIS_FORCE_INLINE void  glProgramBinary(GLuint program, GLenum binaryFormat, const void * binary, GLsizei length) { tunisGL.tunisProgramBinary(program, binaryFormat, binary, length); }
TUNIS_FORCE_INLINE void  glProgramBinaryOES(GLuint program, GLenum binaryFormat, const void * binary, GLint length) { tunisGL.tunisProgramBinaryOES(program, binaryFormat, binary, length); }
TUNIS_FORCE_INLINE void  glProgramBufferParametersIivNV(GLenum target, GLuint bindingIndex, GLuint wordIndex, GLsizei count, const GLint * params) { tunisGL.tunisProgramBufferParametersIivNV(target, bindingIndex, wordIndex, count, params); }
TUNIS_FORCE_INLINE void  glProgramBufferParametersIuivNV(GLenum target, GLuint bindingIndex, GLuint wordIndex, GLsizei count, const GLuint * params) { tunisGL.tunisProgramBufferParametersIuivNV(target, bindingIndex, wordIndex, count, params); }
TUNIS_FORCE_INLINE void  glProgramBufferParametersfvNV(GLenum target, GLuint bindingIndex, GLuint wordIndex, GLsizei count, const GLfloat * params) { tunisGL.tunisProgramBufferParametersfvNV(target, bindingIndex, wordIndex, count, params); }
TUNIS_FORCE_INLINE void  glProgramEnvParameter4dARB(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) { tunisGL.tunisProgramEnvParameter4dARB(target, index, x, y, z, w); }
TUNIS_FORCE_INLINE void  glProgramEnvParameter4dvARB(GLenum target, GLuint index, const GLdouble * params) { tunisGL.tunisProgramEnvParameter4dvARB(target, index, params); }
TUNIS_FORCE_INLINE void  glProgramEnvParameter4fARB(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w) { tunisGL.tunisProgramEnvParameter4fARB(target, index, x, y, z, w); }
TUNIS_FORCE_INLINE void  glProgramEnvParameter4fvARB(GLenum target, GLuint index, const GLfloat * params) { tunisGL.tunisProgramEnvParameter4fvARB(target, index, params); }
TUNIS_FORCE_INLINE void  glProgramEnvParameterI4iNV(GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w) { tunisGL.tunisProgramEnvParameterI4iNV(target, index, x, y, z, w); }
TUNIS_FORCE_INLINE void  glProgramEnvParameterI4ivNV(GLenum target, GLuint index, const GLint * params) { tunisGL.tunisProgramEnvParameterI4ivNV(target, index, params); }
TUNIS_FORCE_INLINE void  glProgramEnvParameterI4uiNV(GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w) { tunisGL.tunisProgramEnvParameterI4uiNV(target, index, x, y, z, w); }
TUNIS_FORCE_INLINE void  glProgramEnvParameterI4uivNV(GLenum target, GLuint index, const GLuint * params) { tunisGL.tunisProgramEnvParameterI4uivNV(target, index, params); }
TUNIS_FORCE_INLINE void  glProgramEnvParameters4fvEXT(GLenum target, GLuint index, GLsizei count, const GLfloat * params) { tunisGL.tunisProgramEnvParameters4fvEXT(target, index, count, params); }
TUNIS_FORCE_INLINE void  glProgramEnvParametersI4ivNV(GLenum target, GLuint index, GLsizei count, const GLint * params) { tunisGL.tunisProgramEnvParametersI4ivNV(target, index, count, params); }
TUNIS_FORCE_INLINE void  glProgramEnvParametersI4uivNV(GLenum target, GLuint index, GLsizei count, const GLuint * params) { tunisGL.tunisProgramEnvParametersI4uivNV(target, index, count, params); }
TUNIS_FORCE_INLINE void  glProgramLocalParameter4dARB(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) { tunisGL.tunisProgramLocalParameter4dARB(target, index, x, y, z, w); }
TUNIS_FORCE_INLINE void  glProgramLocalParameter4dvARB(GLenum target, GLuint index, const GLdouble * params) { tunisGL.tunisProgramLocalParameter4dvARB(target, index, params); }
TUNIS_FORCE_INLINE void  glProgramLocalParameter4fARB(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w) { tunisGL.tunisProgramLocalParameter4fARB(target, index, x, y, z, w); }
TUNIS_FORCE_INLINE void  glProgramLocalParameter4fvARB(GLenum target, GLuint index, const GLfloat * params) { tunisGL.tunisProgramLocalParameter4fvARB(target, index, params); }
TUNIS_FORCE_INLINE void  glProgramLocalParameterI4iNV(GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w) { tunisGL.tunisProgramLocalParameterI4iNV(target, index, x, y, z, w); }
TUNIS_FORCE_INLINE void  glProgramLocalParameterI4ivNV(GLenum target, GLuint index, const GLint * params) { tunisGL.tunisProgramLocalParameterI4ivNV(target, index, params); }
TUNIS_FORCE_INLINE void  glProgramLocalParameterI4uiNV(GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w) { tunisGL.tunisProgramLocalParameterI4uiNV(target, index, x, y, z, w); }
TUNIS_FORCE_INLINE void  glProgramLocalParameterI4uivNV(GLenum target, GLuint index, const GLuint * params) { tunisGL.tunisProgramLocalParameterI4uivNV(target, index, params); }
TUNIS_FORCE_INLINE void  glProgramLocalParameters4fvEXT(GLenum target, GLuint index, GLsizei count, const GLfloat * params) { tunisGL.tunisProgramLocalParameters4fvEXT(target, index, count, params); }
TUNIS_FORCE_INLINE void  glProgramLocalParametersI4ivNV(GLenum target, GLuint index, GLsizei count, const GLint * params) { tunisGL.tunisProgramLocalParametersI4ivNV(target, index, count, params); }
TUNIS_FORCE_INLINE void  glProgramLocalParametersI4uivNV(GLenum target, GLuint index, GLsizei count, const GLuint * params) { tunisGL.tunisProgramLocalParametersI4uivNV(target, index, count, params); }
TUNIS_FORCE_INLINE void  glProgramNamedParameter4dNV(GLuint id, GLsizei len, const GLubyte * name, GLdouble x, GLdouble y, GLdouble z, GLdouble w) { tunisGL.tunisProgramNamedParameter4dNV(id, len, name, x, y, z, w); }
TUNIS_FORCE_INLINE void  glProgramNamedParameter4dvNV(GLuint id, GLsizei len, const GLubyte * name, const GLdouble * v) { tunisGL.tunisProgramNamedParameter4dvNV(id, len, name, v); }
TUNIS_FORCE_INLINE void  glProgramNamedParameter4fNV(GLuint id, GLsizei len, const GLubyte * name, GLfloat x, GLfloat y, GLfloat z, GLfloat w) { tunisGL.tunisProgramNamedParameter4fNV(id, len, name, x, y, z, w); }
TUNIS_FORCE_INLINE void  glProgramNamedParameter4fvNV(GLuint id, GLsizei len, const GLubyte * name, const GLfloat * v) { tunisGL.tunisProgramNamedParameter4fvNV(id, len, name, v); }
TUNIS_FORCE_INLINE void  glProgramParameter4dNV(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) { tunisGL.tunisProgramParameter4dNV(target, index, x, y, z, w); }
TUNIS_FORCE_INLINE void  glProgramParameter4dvNV(GLenum target, GLuint index, const GLdouble * v) { tunisGL.tunisProgramParameter4dvNV(target, index, v); }
TUNIS_FORCE_INLINE void  glProgramParameter4fNV(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w) { tunisGL.tunisProgramParameter4fNV(target, index, x, y, z, w); }
TUNIS_FORCE_INLINE void  glProgramParameter4fvNV(GLenum target, GLuint index, const GLfloat * v) { tunisGL.tunisProgramParameter4fvNV(target, index, v); }
TUNIS_FORCE_INLINE void  glProgramParameteri(GLuint program, GLenum pname, GLint value) { tunisGL.tunisProgramParameteri(program, pname, value); }
TUNIS_FORCE_INLINE void  glProgramParameteriARB(GLuint program, GLenum pname, GLint value) { tunisGL.tunisProgramParameteriARB(program, pname, value); }
TUNIS_FORCE_INLINE void  glProgramParameteriEXT(GLuint program, GLenum pname, GLint value) { tunisGL.tunisProgramParameteriEXT(program, pname, value); }
TUNIS_FORCE_INLINE void  glProgramParameters4dvNV(GLenum target, GLuint index, GLsizei count, const GLdouble * v) { tunisGL.tunisProgramParameters4dvNV(target, index, count, v); }
TUNIS_FORCE_INLINE void  glProgramParameters4fvNV(GLenum target, GLuint index, GLsizei count, const GLfloat * v) { tunisGL.tunisProgramParameters4fvNV(target, index, count, v); }
TUNIS_FORCE_INLINE void  glProgramPathFragmentInputGenNV(GLuint program, GLint location, GLenum genMode, GLint components, const GLfloat * coeffs) { tunisGL.tunisProgramPathFragmentInputGenNV(program, location, genMode, components, coeffs); }
TUNIS_FORCE_INLINE void  glProgramStringARB(GLenum target, GLenum format, GLsizei len, const void * string) { tunisGL.tunisProgramStringARB(target, format, len, string); }
TUNIS_FORCE_INLINE void  glProgramSubroutineParametersuivNV(GLenum target, GLsizei count, const GLuint * params) { tunisGL.tunisProgramSubroutineParametersuivNV(target, count, params); }
TUNIS_FORCE_INLINE void  glProgramUniform1d(GLuint program, GLint location, GLdouble v0) { tunisGL.tunisProgramUniform1d(program, location, v0); }
TUNIS_FORCE_INLINE void  glProgramUniform1dEXT(GLuint program, GLint location, GLdouble x) { tunisGL.tunisProgramUniform1dEXT(program, location, x); }
TUNIS_FORCE_INLINE void  glProgramUniform1dv(GLuint program, GLint location, GLsizei count, const GLdouble * value) { tunisGL.tunisProgramUniform1dv(program, location, count, value); }
TUNIS_FORCE_INLINE void  glProgramUniform1dvEXT(GLuint program, GLint location, GLsizei count, const GLdouble * value) { tunisGL.tunisProgramUniform1dvEXT(program, location, count, value); }
TUNIS_FORCE_INLINE void  glProgramUniform1f(GLuint program, GLint location, GLfloat v0) { tunisGL.tunisProgramUniform1f(program, location, v0); }
TUNIS_FORCE_INLINE void  glProgramUniform1fEXT(GLuint program, GLint location, GLfloat v0) { tunisGL.tunisProgramUniform1fEXT(program, location, v0); }
TUNIS_FORCE_INLINE void  glProgramUniform1fv(GLuint program, GLint location, GLsizei count, const GLfloat * value) { tunisGL.tunisProgramUniform1fv(program, location, count, value); }
TUNIS_FORCE_INLINE void  glProgramUniform1fvEXT(GLuint program, GLint location, GLsizei count, const GLfloat * value) { tunisGL.tunisProgramUniform1fvEXT(program, location, count, value); }
TUNIS_FORCE_INLINE void  glProgramUniform1i(GLuint program, GLint location, GLint v0) { tunisGL.tunisProgramUniform1i(program, location, v0); }
TUNIS_FORCE_INLINE void  glProgramUniform1i64ARB(GLuint program, GLint location, GLint64 x) { tunisGL.tunisProgramUniform1i64ARB(program, location, x); }
TUNIS_FORCE_INLINE void  glProgramUniform1i64NV(GLuint program, GLint location, GLint64EXT x) { tunisGL.tunisProgramUniform1i64NV(program, location, x); }
TUNIS_FORCE_INLINE void  glProgramUniform1i64vARB(GLuint program, GLint location, GLsizei count, const GLint64 * value) { tunisGL.tunisProgramUniform1i64vARB(program, location, count, value); }
TUNIS_FORCE_INLINE void  glProgramUniform1i64vNV(GLuint program, GLint location, GLsizei count, const GLint64EXT * value) { tunisGL.tunisProgramUniform1i64vNV(program, location, count, value); }
TUNIS_FORCE_INLINE void  glProgramUniform1iEXT(GLuint program, GLint location, GLint v0) { tunisGL.tunisProgramUniform1iEXT(program, location, v0); }
TUNIS_FORCE_INLINE void  glProgramUniform1iv(GLuint program, GLint location, GLsizei count, const GLint * value) { tunisGL.tunisProgramUniform1iv(program, location, count, value); }
TUNIS_FORCE_INLINE void  glProgramUniform1ivEXT(GLuint program, GLint location, GLsizei count, const GLint * value) { tunisGL.tunisProgramUniform1ivEXT(program, location, count, value); }
TUNIS_FORCE_INLINE void  glProgramUniform1ui(GLuint program, GLint location, GLuint v0) { tunisGL.tunisProgramUniform1ui(program, location, v0); }
TUNIS_FORCE_INLINE void  glProgramUniform1ui64ARB(GLuint program, GLint location, GLuint64 x) { tunisGL.tunisProgramUniform1ui64ARB(program, location, x); }
TUNIS_FORCE_INLINE void  glProgramUniform1ui64NV(GLuint program, GLint location, GLuint64EXT x) { tunisGL.tunisProgramUniform1ui64NV(program, location, x); }
TUNIS_FORCE_INLINE void  glProgramUniform1ui64vARB(GLuint program, GLint location, GLsizei count, const GLuint64 * value) { tunisGL.tunisProgramUniform1ui64vARB(program, location, count, value); }
TUNIS_FORCE_INLINE void  glProgramUniform1ui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64EXT * value) { tunisGL.tunisProgramUniform1ui64vNV(program, location, count, value); }
TUNIS_FORCE_INLINE void  glProgramUniform1uiEXT(GLuint program, GLint location, GLuint v0) { tunisGL.tunisProgramUniform1uiEXT(program, location, v0); }
TUNIS_FORCE_INLINE void  glProgramUniform1uiv(GLuint program, GLint location, GLsizei count, const GLuint * value) { tunisGL.tunisProgramUniform1uiv(program, location, count, value); }
TUNIS_FORCE_INLINE void  glProgramUniform1uivEXT(GLuint program, GLint location, GLsizei count, const GLuint * value) { tunisGL.tunisProgramUniform1uivEXT(program, location, count, value); }
TUNIS_FORCE_INLINE void  glProgramUniform2d(GLuint program, GLint location, GLdouble v0, GLdouble v1) { tunisGL.tunisProgramUniform2d(program, location, v0, v1); }
TUNIS_FORCE_INLINE void  glProgramUniform2dEXT(GLuint program, GLint location, GLdouble x, GLdouble y) { tunisGL.tunisProgramUniform2dEXT(program, location, x, y); }
TUNIS_FORCE_INLINE void  glProgramUniform2dv(GLuint program, GLint location, GLsizei count, const GLdouble * value) { tunisGL.tunisProgramUniform2dv(program, location, count, value); }
TUNIS_FORCE_INLINE void  glProgramUniform2dvEXT(GLuint program, GLint location, GLsizei count, const GLdouble * value) { tunisGL.tunisProgramUniform2dvEXT(program, location, count, value); }
TUNIS_FORCE_INLINE void  glProgramUniform2f(GLuint program, GLint location, GLfloat v0, GLfloat v1) { tunisGL.tunisProgramUniform2f(program, location, v0, v1); }
TUNIS_FORCE_INLINE void  glProgramUniform2fEXT(GLuint program, GLint location, GLfloat v0, GLfloat v1) { tunisGL.tunisProgramUniform2fEXT(program, location, v0, v1); }
TUNIS_FORCE_INLINE void  glProgramUniform2fv(GLuint program, GLint location, GLsizei count, const GLfloat * value) { tunisGL.tunisProgramUniform2fv(program, location, count, value); }
TUNIS_FORCE_INLINE void  glProgramUniform2fvEXT(GLuint program, GLint location, GLsizei count, const GLfloat * value) { tunisGL.tunisProgramUniform2fvEXT(program, location, count, value); }
TUNIS_FORCE_INLINE void  glProgramUniform2i(GLuint program, GLint location, GLint v0, GLint v1) { tunisGL.tunisProgramUniform2i(program, location, v0, v1); }
TUNIS_FORCE_INLINE void  glProgramUniform2i64ARB(GLuint program, GLint location, GLint64 x, GLint64 y) { tunisGL.tunisProgramUniform2i64ARB(program, location, x, y); }
TUNIS_FORCE_INLINE void  glProgramUniform2i64NV(GLuint program, GLint location, GLint64EXT x, GLint64EXT y) { tunisGL.tunisProgramUniform2i64NV(program, location, x, y); }
TUNIS_FORCE_INLINE void  glProgramUniform2i64vARB(GLuint program, GLint location, GLsizei count, const GLint64 * value) { tunisGL.tunisProgramUniform2i64vARB(program, location, count, value); }
TUNIS_FORCE_INLINE void  glProgramUniform2i64vNV(GLuint program, GLint location, GLsizei count, const GLint64EXT * value) { tunisGL.tunisProgramUniform2i64vNV(program, location, count, value); }
TUNIS_FORCE_INLINE void  glProgramUniform2iEXT(GLuint program, GLint location, GLint v0, GLint v1) { tunisGL.tunisProgramUniform2iEXT(program, location, v0, v1); }
TUNIS_FORCE_INLINE void  glProgramUniform2iv(GLuint program, GLint location, GLsizei count, const GLint * value) { tunisGL.tunisProgramUniform2iv(program, location, count, value); }
TUNIS_FORCE_INLINE void  glProgramUniform2ivEXT(GLuint program, GLint location, GLsizei count, const GLint * value) { tunisGL.tunisProgramUniform2ivEXT(program, location, count, value); }
TUNIS_FORCE_INLINE void  glProgramUniform2ui(GLuint program, GLint location, GLuint v0, GLuint v1) { tunisGL.tunisProgramUniform2ui(program, location, v0, v1); }
TUNIS_FORCE_INLINE void  glProgramUniform2ui64ARB(GLuint program, GLint location, GLuint64 x, GLuint64 y) { tunisGL.tunisProgramUniform2ui64ARB(program, location, x, y); }
TUNIS_FORCE_INLINE void  glProgramUniform2ui64NV(GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y) { tunisGL.tunisProgramUniform2ui64NV(program, location, x, y); }
TUNIS_FORCE_INLINE void  glProgramUniform2ui64vARB(GLuint program, GLint location, GLsizei count, const GLuint64 * value) { tunisGL.tunisProgramUniform2ui64vARB(program, location, count, value); }
TUNIS_FORCE_INLINE void  glProgramUniform2ui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64EXT * value) { tunisGL.tunisProgramUniform2ui64vNV(program, location, count, value); }
TUNIS_FORCE_INLINE void  glProgramUniform2uiEXT(GLuint program, GLint location, GLuint v0, GLuint v1) { tunisGL.tunisProgramUniform2uiEXT(program, location, v0, v1); }
TUNIS_FORCE_INLINE void  glProgramUniform2uiv(GLuint program, GLint location, GLsizei count, const GLuint * value) { tunisGL.tunisProgramUniform2uiv(program, location, count, value); }
TUNIS_FORCE_INLINE void  glProgramUniform2uivEXT(GLuint program, GLint location, GLsizei count, const GLuint * value) { tunisGL.tunisProgramUniform2uivEXT(program, location, count, value); }
TUNIS_FORCE_INLINE void  glProgramUniform3d(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2) { tunisGL.tunisProgramUniform3d(program, location, v0, v1, v2); }
TUNIS_FORCE_INLINE void  glProgramUniform3dEXT(GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z) { tunisGL.tunisProgramUniform3dEXT(program, location, x, y, z); }
TUNIS_FORCE_INLINE void  glProgramUniform3dv(GLuint program, GLint location, GLsizei count, const GLdouble * value) { tunisGL.tunisProgramUniform3dv(program, location, count, value); }
TUNIS_FORCE_INLINE void  glProgramUniform3dvEXT(GLuint program, GLint location, GLsizei count, const GLdouble * value) { tunisGL.tunisProgramUniform3dvEXT(program, location, count, value); }
TUNIS_FORCE_INLINE void  glProgramUniform3f(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2) { tunisGL.tunisProgramUniform3f(program, location, v0, v1, v2); }
TUNIS_FORCE_INLINE void  glProgramUniform3fEXT(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2) { tunisGL.tunisProgramUniform3fEXT(program, location, v0, v1, v2); }
TUNIS_FORCE_INLINE void  glProgramUniform3fv(GLuint program, GLint location, GLsizei count, const GLfloat * value) { tunisGL.tunisProgramUniform3fv(program, location, count, value); }
TUNIS_FORCE_INLINE void  glProgramUniform3fvEXT(GLuint program, GLint location, GLsizei count, const GLfloat * value) { tunisGL.tunisProgramUniform3fvEXT(program, location, count, value); }
TUNIS_FORCE_INLINE void  glProgramUniform3i(GLuint program, GLint location, GLint v0, GLint v1, GLint v2) { tunisGL.tunisProgramUniform3i(program, location, v0, v1, v2); }
TUNIS_FORCE_INLINE void  glProgramUniform3i64ARB(GLuint program, GLint location, GLint64 x, GLint64 y, GLint64 z) { tunisGL.tunisProgramUniform3i64ARB(program, location, x, y, z); }
TUNIS_FORCE_INLINE void  glProgramUniform3i64NV(GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z) { tunisGL.tunisProgramUniform3i64NV(program, location, x, y, z); }
TUNIS_FORCE_INLINE void  glProgramUniform3i64vARB(GLuint program, GLint location, GLsizei count, const GLint64 * value) { tunisGL.tunisProgramUniform3i64vARB(program, location, count, value); }
TUNIS_FORCE_INLINE void  glProgramUniform3i64vNV(GLuint program, GLint location, GLsizei count, const GLint64EXT * value) { tunisGL.tunisProgramUniform3i64vNV(program, location, count, value); }
TUNIS_FORCE_INLINE void  glProgramUniform3iEXT(GLuint program, GLint location, GLint v0, GLint v1, GLint v2) { tunisGL.tunisProgramUniform3iEXT(program, location, v0, v1, v2); }
TUNIS_FORCE_INLINE void  glProgramUniform3iv(GLuint program, GLint location, GLsizei count, const GLint * value) { tunisGL.tunisProgramUniform3iv(program, location, count, value); }
TUNIS_FORCE_INLINE void  glProgramUniform3ivEXT(GLuint program, GLint location, GLsizei count, const GLint * value) { tunisGL.tunisProgramUniform3ivEXT(program, location, count, value); }
TUNIS_FORCE_INLINE void  glProgramUniform3ui(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2) { tunisGL.tunisProgramUniform3ui(program, location, v0, v1, v2); }
TUNIS_FORCE_INLINE void  glProgramUniform3ui64ARB(GLuint program, GLint location, GLuint64 x, GLuint64 y, GLuint64 z) { tunisGL.tunisProgramUniform3ui64ARB(program, location, x, y, z); }
TUNIS_FORCE_INLINE void  glProgramUniform3ui64NV(GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z) { tunisGL.tunisProgramUniform3ui64NV(program, location, x, y, z); }
TUNIS_FORCE_INLINE void  glProgramUniform3ui64vARB(GLuint program, GLint location, GLsizei count, const GLuint64 * value) { tunisGL.tunisProgramUniform3ui64vARB(program, location, count, value); }
TUNIS_FORCE_INLINE void  glProgramUniform3ui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64EXT * value) { tunisGL.tunisProgramUniform3ui64vNV(program, location, count, value); }
TUNIS_FORCE_INLINE void  glProgramUniform3uiEXT(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2) { tunisGL.tunisProgramUniform3uiEXT(program, location, v0, v1, v2); }
TUNIS_FORCE_INLINE void  glProgramUniform3uiv(GLuint program, GLint location, GLsizei count, const GLuint * value) { tunisGL.tunisProgramUniform3uiv(program, location, count, value); }
TUNIS_FORCE_INLINE void  glProgramUniform3uivEXT(GLuint program, GLint location, GLsizei count, const GLuint * value) { tunisGL.tunisProgramUniform3uivEXT(program, location, count, value); }
TUNIS_FORCE_INLINE void  glProgramUniform4d(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2, GLdouble v3) { tunisGL.tunisProgramUniform4d(program, location, v0, v1, v2, v3); }
TUNIS_FORCE_INLINE void  glProgramUniform4dEXT(GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w) { tunisGL.tunisProgramUniform4dEXT(program, location, x, y, z, w); }
TUNIS_FORCE_INLINE void  glProgramUniform4dv(GLuint program, GLint location, GLsizei count, const GLdouble * value) { tunisGL.tunisProgramUniform4dv(program, location, count, value); }
TUNIS_FORCE_INLINE void  glProgramUniform4dvEXT(GLuint program, GLint location, GLsizei count, const GLdouble * value) { tunisGL.tunisProgramUniform4dvEXT(program, location, count, value); }
TUNIS_FORCE_INLINE void  glProgramUniform4f(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3) { tunisGL.tunisProgramUniform4f(program, location, v0, v1, v2, v3); }
TUNIS_FORCE_INLINE void  glProgramUniform4fEXT(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3) { tunisGL.tunisProgramUniform4fEXT(program, location, v0, v1, v2, v3); }
TUNIS_FORCE_INLINE void  glProgramUniform4fv(GLuint program, GLint location, GLsizei count, const GLfloat * value) { tunisGL.tunisProgramUniform4fv(program, location, count, value); }
TUNIS_FORCE_INLINE void  glProgramUniform4fvEXT(GLuint program, GLint location, GLsizei count, const GLfloat * value) { tunisGL.tunisProgramUniform4fvEXT(program, location, count, value); }
TUNIS_FORCE_INLINE void  glProgramUniform4i(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3) { tunisGL.tunisProgramUniform4i(program, location, v0, v1, v2, v3); }
TUNIS_FORCE_INLINE void  glProgramUniform4i64ARB(GLuint program, GLint location, GLint64 x, GLint64 y, GLint64 z, GLint64 w) { tunisGL.tunisProgramUniform4i64ARB(program, location, x, y, z, w); }
TUNIS_FORCE_INLINE void  glProgramUniform4i64NV(GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w) { tunisGL.tunisProgramUniform4i64NV(program, location, x, y, z, w); }
TUNIS_FORCE_INLINE void  glProgramUniform4i64vARB(GLuint program, GLint location, GLsizei count, const GLint64 * value) { tunisGL.tunisProgramUniform4i64vARB(program, location, count, value); }
TUNIS_FORCE_INLINE void  glProgramUniform4i64vNV(GLuint program, GLint location, GLsizei count, const GLint64EXT * value) { tunisGL.tunisProgramUniform4i64vNV(program, location, count, value); }
TUNIS_FORCE_INLINE void  glProgramUniform4iEXT(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3) { tunisGL.tunisProgramUniform4iEXT(program, location, v0, v1, v2, v3); }
TUNIS_FORCE_INLINE void  glProgramUniform4iv(GLuint program, GLint location, GLsizei count, const GLint * value) { tunisGL.tunisProgramUniform4iv(program, location, count, value); }
TUNIS_FORCE_INLINE void  glProgramUniform4ivEXT(GLuint program, GLint location, GLsizei count, const GLint * value) { tunisGL.tunisProgramUniform4ivEXT(program, location, count, value); }
TUNIS_FORCE_INLINE void  glProgramUniform4ui(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3) { tunisGL.tunisProgramUniform4ui(program, location, v0, v1, v2, v3); }
TUNIS_FORCE_INLINE void  glProgramUniform4ui64ARB(GLuint program, GLint location, GLuint64 x, GLuint64 y, GLuint64 z, GLuint64 w) { tunisGL.tunisProgramUniform4ui64ARB(program, location, x, y, z, w); }
TUNIS_FORCE_INLINE void  glProgramUniform4ui64NV(GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w) { tunisGL.tunisProgramUniform4ui64NV(program, location, x, y, z, w); }
TUNIS_FORCE_INLINE void  glProgramUniform4ui64vARB(GLuint program, GLint location, GLsizei count, const GLuint64 * value) { tunisGL.tunisProgramUniform4ui64vARB(program, location, count, value); }
TUNIS_FORCE_INLINE void  glProgramUniform4ui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64EXT * value) { tunisGL.tunisProgramUniform4ui64vNV(program, location, count, value); }
TUNIS_FORCE_INLINE void  glProgramUniform4uiEXT(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3) { tunisGL.tunisProgramUniform4uiEXT(program, location, v0, v1, v2, v3); }
TUNIS_FORCE_INLINE void  glProgramUniform4uiv(GLuint program, GLint location, GLsizei count, const GLuint * value) { tunisGL.tunisProgramUniform4uiv(program, location, count, value); }
TUNIS_FORCE_INLINE void  glProgramUniform4uivEXT(GLuint program, GLint location, GLsizei count, const GLuint * value) { tunisGL.tunisProgramUniform4uivEXT(program, location, count, value); }
TUNIS_FORCE_INLINE void  glProgramUniformHandleui64ARB(GLuint program, GLint location, GLuint64 value) { tunisGL.tunisProgramUniformHandleui64ARB(program, location, value); }
TUNIS_FORCE_INLINE void  glProgramUniformHandleui64IMG(GLuint program, GLint location, GLuint64 value) { tunisGL.tunisProgramUniformHandleui64IMG(program, location, value); }
TUNIS_FORCE_INLINE void  glProgramUniformHandleui64NV(GLuint program, GLint location, GLuint64 value) { tunisGL.tunisProgramUniformHandleui64NV(program, location, value); }
TUNIS_FORCE_INLINE void  glProgramUniformHandleui64vARB(GLuint program, GLint location, GLsizei count, const GLuint64 * values) { tunisGL.tunisProgramUniformHandleui64vARB(program, location, count, values); }
TUNIS_FORCE_INLINE void  glProgramUniformHandleui64vIMG(GLuint program, GLint location, GLsizei count, const GLuint64 * values) { tunisGL.tunisProgramUniformHandleui64vIMG(program, location, count, values); }
TUNIS_FORCE_INLINE void  glProgramUniformHandleui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64 * values) { tunisGL.tunisProgramUniformHandleui64vNV(program, location, count, values); }
TUNIS_FORCE_INLINE void  glProgramUniformMatrix2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { tunisGL.tunisProgramUniformMatrix2dv(program, location, count, transpose, value); }
TUNIS_FORCE_INLINE void  glProgramUniformMatrix2dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { tunisGL.tunisProgramUniformMatrix2dvEXT(program, location, count, transpose, value); }
TUNIS_FORCE_INLINE void  glProgramUniformMatrix2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { tunisGL.tunisProgramUniformMatrix2fv(program, location, count, transpose, value); }
TUNIS_FORCE_INLINE void  glProgramUniformMatrix2fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { tunisGL.tunisProgramUniformMatrix2fvEXT(program, location, count, transpose, value); }
TUNIS_FORCE_INLINE void  glProgramUniformMatrix2x3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { tunisGL.tunisProgramUniformMatrix2x3dv(program, location, count, transpose, value); }
TUNIS_FORCE_INLINE void  glProgramUniformMatrix2x3dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { tunisGL.tunisProgramUniformMatrix2x3dvEXT(program, location, count, transpose, value); }
TUNIS_FORCE_INLINE void  glProgramUniformMatrix2x3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { tunisGL.tunisProgramUniformMatrix2x3fv(program, location, count, transpose, value); }
TUNIS_FORCE_INLINE void  glProgramUniformMatrix2x3fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { tunisGL.tunisProgramUniformMatrix2x3fvEXT(program, location, count, transpose, value); }
TUNIS_FORCE_INLINE void  glProgramUniformMatrix2x4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { tunisGL.tunisProgramUniformMatrix2x4dv(program, location, count, transpose, value); }
TUNIS_FORCE_INLINE void  glProgramUniformMatrix2x4dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { tunisGL.tunisProgramUniformMatrix2x4dvEXT(program, location, count, transpose, value); }
TUNIS_FORCE_INLINE void  glProgramUniformMatrix2x4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { tunisGL.tunisProgramUniformMatrix2x4fv(program, location, count, transpose, value); }
TUNIS_FORCE_INLINE void  glProgramUniformMatrix2x4fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { tunisGL.tunisProgramUniformMatrix2x4fvEXT(program, location, count, transpose, value); }
TUNIS_FORCE_INLINE void  glProgramUniformMatrix3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { tunisGL.tunisProgramUniformMatrix3dv(program, location, count, transpose, value); }
TUNIS_FORCE_INLINE void  glProgramUniformMatrix3dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { tunisGL.tunisProgramUniformMatrix3dvEXT(program, location, count, transpose, value); }
TUNIS_FORCE_INLINE void  glProgramUniformMatrix3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { tunisGL.tunisProgramUniformMatrix3fv(program, location, count, transpose, value); }
TUNIS_FORCE_INLINE void  glProgramUniformMatrix3fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { tunisGL.tunisProgramUniformMatrix3fvEXT(program, location, count, transpose, value); }
TUNIS_FORCE_INLINE void  glProgramUniformMatrix3x2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { tunisGL.tunisProgramUniformMatrix3x2dv(program, location, count, transpose, value); }
TUNIS_FORCE_INLINE void  glProgramUniformMatrix3x2dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { tunisGL.tunisProgramUniformMatrix3x2dvEXT(program, location, count, transpose, value); }
TUNIS_FORCE_INLINE void  glProgramUniformMatrix3x2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { tunisGL.tunisProgramUniformMatrix3x2fv(program, location, count, transpose, value); }
TUNIS_FORCE_INLINE void  glProgramUniformMatrix3x2fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { tunisGL.tunisProgramUniformMatrix3x2fvEXT(program, location, count, transpose, value); }
TUNIS_FORCE_INLINE void  glProgramUniformMatrix3x4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { tunisGL.tunisProgramUniformMatrix3x4dv(program, location, count, transpose, value); }
TUNIS_FORCE_INLINE void  glProgramUniformMatrix3x4dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { tunisGL.tunisProgramUniformMatrix3x4dvEXT(program, location, count, transpose, value); }
TUNIS_FORCE_INLINE void  glProgramUniformMatrix3x4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { tunisGL.tunisProgramUniformMatrix3x4fv(program, location, count, transpose, value); }
TUNIS_FORCE_INLINE void  glProgramUniformMatrix3x4fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { tunisGL.tunisProgramUniformMatrix3x4fvEXT(program, location, count, transpose, value); }
TUNIS_FORCE_INLINE void  glProgramUniformMatrix4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { tunisGL.tunisProgramUniformMatrix4dv(program, location, count, transpose, value); }
TUNIS_FORCE_INLINE void  glProgramUniformMatrix4dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { tunisGL.tunisProgramUniformMatrix4dvEXT(program, location, count, transpose, value); }
TUNIS_FORCE_INLINE void  glProgramUniformMatrix4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { tunisGL.tunisProgramUniformMatrix4fv(program, location, count, transpose, value); }
TUNIS_FORCE_INLINE void  glProgramUniformMatrix4fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { tunisGL.tunisProgramUniformMatrix4fvEXT(program, location, count, transpose, value); }
TUNIS_FORCE_INLINE void  glProgramUniformMatrix4x2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { tunisGL.tunisProgramUniformMatrix4x2dv(program, location, count, transpose, value); }
TUNIS_FORCE_INLINE void  glProgramUniformMatrix4x2dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { tunisGL.tunisProgramUniformMatrix4x2dvEXT(program, location, count, transpose, value); }
TUNIS_FORCE_INLINE void  glProgramUniformMatrix4x2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { tunisGL.tunisProgramUniformMatrix4x2fv(program, location, count, transpose, value); }
TUNIS_FORCE_INLINE void  glProgramUniformMatrix4x2fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { tunisGL.tunisProgramUniformMatrix4x2fvEXT(program, location, count, transpose, value); }
TUNIS_FORCE_INLINE void  glProgramUniformMatrix4x3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { tunisGL.tunisProgramUniformMatrix4x3dv(program, location, count, transpose, value); }
TUNIS_FORCE_INLINE void  glProgramUniformMatrix4x3dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { tunisGL.tunisProgramUniformMatrix4x3dvEXT(program, location, count, transpose, value); }
TUNIS_FORCE_INLINE void  glProgramUniformMatrix4x3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { tunisGL.tunisProgramUniformMatrix4x3fv(program, location, count, transpose, value); }
TUNIS_FORCE_INLINE void  glProgramUniformMatrix4x3fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { tunisGL.tunisProgramUniformMatrix4x3fvEXT(program, location, count, transpose, value); }
TUNIS_FORCE_INLINE void  glProgramUniformui64NV(GLuint program, GLint location, GLuint64EXT value) { tunisGL.tunisProgramUniformui64NV(program, location, value); }
TUNIS_FORCE_INLINE void  glProgramUniformui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64EXT * value) { tunisGL.tunisProgramUniformui64vNV(program, location, count, value); }
TUNIS_FORCE_INLINE void  glProgramVertexLimitNV(GLenum target, GLint limit) { tunisGL.tunisProgramVertexLimitNV(target, limit); }
TUNIS_FORCE_INLINE void  glProvokingVertex(GLenum mode) { tunisGL.tunisProvokingVertex(mode); }
TUNIS_FORCE_INLINE void  glProvokingVertexEXT(GLenum mode) { tunisGL.tunisProvokingVertexEXT(mode); }
TUNIS_FORCE_INLINE void  glPushAttrib(GLbitfield mask) { tunisGL.tunisPushAttrib(mask); }
TUNIS_FORCE_INLINE void  glPushClientAttrib(GLbitfield mask) { tunisGL.tunisPushClientAttrib(mask); }
TUNIS_FORCE_INLINE void  glPushClientAttribDefaultEXT(GLbitfield mask) { tunisGL.tunisPushClientAttribDefaultEXT(mask); }
TUNIS_FORCE_INLINE void  glPushDebugGroup(GLenum source, GLuint id, GLsizei length, const GLchar * message) { tunisGL.tunisPushDebugGroup(source, id, length, message); }
TUNIS_FORCE_INLINE void  glPushDebugGroupKHR(GLenum source, GLuint id, GLsizei length, const GLchar * message) { tunisGL.tunisPushDebugGroupKHR(source, id, length, message); }
TUNIS_FORCE_INLINE void  glPushGroupMarkerEXT(GLsizei length, const GLchar * marker) { tunisGL.tunisPushGroupMarkerEXT(length, marker); }
TUNIS_FORCE_INLINE void  glPushMatrix(void) { tunisGL.tunisPushMatrix(); }
TUNIS_FORCE_INLINE void  glPushName(GLuint name) { tunisGL.tunisPushName(name); }
TUNIS_FORCE_INLINE void  glQueryCounter(GLuint id, GLenum target) { tunisGL.tunisQueryCounter(id, target); }
TUNIS_FORCE_INLINE void  glQueryCounterEXT(GLuint id, GLenum target) { tunisGL.tunisQueryCounterEXT(id, target); }
TUNIS_FORCE_INLINE GLbitfield glQueryMatrixxOES(GLfixed * mantissa, GLint * exponent) { return tunisGL.tunisQueryMatrixxOES(mantissa, exponent); }
TUNIS_FORCE_INLINE void  glQueryObjectParameteruiAMD(GLenum target, GLuint id, GLenum pname, GLuint param) { tunisGL.tunisQueryObjectParameteruiAMD(target, id, pname, param); }
TUNIS_FORCE_INLINE GLint glQueryResourceNV(GLenum queryType, GLint tagId, GLuint bufSize, GLint * buffer) { return tunisGL.tunisQueryResourceNV(queryType, tagId, bufSize, buffer); }
TUNIS_FORCE_INLINE void  glQueryResourceTagNV(GLint tagId, const GLchar * tagString) { tunisGL.tunisQueryResourceTagNV(tagId, tagString); }
TUNIS_FORCE_INLINE void  glRasterPos2d(GLdouble x, GLdouble y) { tunisGL.tunisRasterPos2d(x, y); }
TUNIS_FORCE_INLINE void  glRasterPos2dv(const GLdouble * v) { tunisGL.tunisRasterPos2dv(v); }
TUNIS_FORCE_INLINE void  glRasterPos2f(GLfloat x, GLfloat y) { tunisGL.tunisRasterPos2f(x, y); }
TUNIS_FORCE_INLINE void  glRasterPos2fv(const GLfloat * v) { tunisGL.tunisRasterPos2fv(v); }
TUNIS_FORCE_INLINE void  glRasterPos2i(GLint x, GLint y) { tunisGL.tunisRasterPos2i(x, y); }
TUNIS_FORCE_INLINE void  glRasterPos2iv(const GLint * v) { tunisGL.tunisRasterPos2iv(v); }
TUNIS_FORCE_INLINE void  glRasterPos2s(GLshort x, GLshort y) { tunisGL.tunisRasterPos2s(x, y); }
TUNIS_FORCE_INLINE void  glRasterPos2sv(const GLshort * v) { tunisGL.tunisRasterPos2sv(v); }
TUNIS_FORCE_INLINE void  glRasterPos2xOES(GLfixed x, GLfixed y) { tunisGL.tunisRasterPos2xOES(x, y); }
TUNIS_FORCE_INLINE void  glRasterPos2xvOES(const GLfixed * coords) { tunisGL.tunisRasterPos2xvOES(coords); }
TUNIS_FORCE_INLINE void  glRasterPos3d(GLdouble x, GLdouble y, GLdouble z) { tunisGL.tunisRasterPos3d(x, y, z); }
TUNIS_FORCE_INLINE void  glRasterPos3dv(const GLdouble * v) { tunisGL.tunisRasterPos3dv(v); }
TUNIS_FORCE_INLINE void  glRasterPos3f(GLfloat x, GLfloat y, GLfloat z) { tunisGL.tunisRasterPos3f(x, y, z); }
TUNIS_FORCE_INLINE void  glRasterPos3fv(const GLfloat * v) { tunisGL.tunisRasterPos3fv(v); }
TUNIS_FORCE_INLINE void  glRasterPos3i(GLint x, GLint y, GLint z) { tunisGL.tunisRasterPos3i(x, y, z); }
TUNIS_FORCE_INLINE void  glRasterPos3iv(const GLint * v) { tunisGL.tunisRasterPos3iv(v); }
TUNIS_FORCE_INLINE void  glRasterPos3s(GLshort x, GLshort y, GLshort z) { tunisGL.tunisRasterPos3s(x, y, z); }
TUNIS_FORCE_INLINE void  glRasterPos3sv(const GLshort * v) { tunisGL.tunisRasterPos3sv(v); }
TUNIS_FORCE_INLINE void  glRasterPos3xOES(GLfixed x, GLfixed y, GLfixed z) { tunisGL.tunisRasterPos3xOES(x, y, z); }
TUNIS_FORCE_INLINE void  glRasterPos3xvOES(const GLfixed * coords) { tunisGL.tunisRasterPos3xvOES(coords); }
TUNIS_FORCE_INLINE void  glRasterPos4d(GLdouble x, GLdouble y, GLdouble z, GLdouble w) { tunisGL.tunisRasterPos4d(x, y, z, w); }
TUNIS_FORCE_INLINE void  glRasterPos4dv(const GLdouble * v) { tunisGL.tunisRasterPos4dv(v); }
TUNIS_FORCE_INLINE void  glRasterPos4f(GLfloat x, GLfloat y, GLfloat z, GLfloat w) { tunisGL.tunisRasterPos4f(x, y, z, w); }
TUNIS_FORCE_INLINE void  glRasterPos4fv(const GLfloat * v) { tunisGL.tunisRasterPos4fv(v); }
TUNIS_FORCE_INLINE void  glRasterPos4i(GLint x, GLint y, GLint z, GLint w) { tunisGL.tunisRasterPos4i(x, y, z, w); }
TUNIS_FORCE_INLINE void  glRasterPos4iv(const GLint * v) { tunisGL.tunisRasterPos4iv(v); }
TUNIS_FORCE_INLINE void  glRasterPos4s(GLshort x, GLshort y, GLshort z, GLshort w) { tunisGL.tunisRasterPos4s(x, y, z, w); }
TUNIS_FORCE_INLINE void  glRasterPos4sv(const GLshort * v) { tunisGL.tunisRasterPos4sv(v); }
TUNIS_FORCE_INLINE void  glRasterPos4xOES(GLfixed x, GLfixed y, GLfixed z, GLfixed w) { tunisGL.tunisRasterPos4xOES(x, y, z, w); }
TUNIS_FORCE_INLINE void  glRasterPos4xvOES(const GLfixed * coords) { tunisGL.tunisRasterPos4xvOES(coords); }
TUNIS_FORCE_INLINE void  glRasterSamplesEXT(GLuint samples, GLboolean fixedsamplelocations) { tunisGL.tunisRasterSamplesEXT(samples, fixedsamplelocations); }
TUNIS_FORCE_INLINE void  glReadBuffer(GLenum src) { tunisGL.tunisReadBuffer(src); }
TUNIS_FORCE_INLINE void  glReadBufferIndexedEXT(GLenum src, GLint index) { tunisGL.tunisReadBufferIndexedEXT(src, index); }
TUNIS_FORCE_INLINE void  glReadBufferNV(GLenum mode) { tunisGL.tunisReadBufferNV(mode); }
TUNIS_FORCE_INLINE void  glReadBufferRegion(GLuint region, GLint x, GLint y, GLsizei width, GLsizei height) { tunisGL.tunisReadBufferRegion(region, x, y, width, height); }
TUNIS_FORCE_INLINE void  glReadInstrumentsSGIX(GLint marker) { tunisGL.tunisReadInstrumentsSGIX(marker); }
TUNIS_FORCE_INLINE void  glReadPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void * pixels) { tunisGL.tunisReadPixels(x, y, width, height, format, type, pixels); }
TUNIS_FORCE_INLINE void  glReadnPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void * data) { tunisGL.tunisReadnPixels(x, y, width, height, format, type, bufSize, data); }
TUNIS_FORCE_INLINE void  glReadnPixelsARB(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void * data) { tunisGL.tunisReadnPixelsARB(x, y, width, height, format, type, bufSize, data); }
TUNIS_FORCE_INLINE void  glReadnPixelsEXT(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void * data) { tunisGL.tunisReadnPixelsEXT(x, y, width, height, format, type, bufSize, data); }
TUNIS_FORCE_INLINE void  glReadnPixelsKHR(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void * data) { tunisGL.tunisReadnPixelsKHR(x, y, width, height, format, type, bufSize, data); }
TUNIS_FORCE_INLINE void  glRectd(GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2) { tunisGL.tunisRectd(x1, y1, x2, y2); }
TUNIS_FORCE_INLINE void  glRectdv(const GLdouble * v1, const GLdouble * v2) { tunisGL.tunisRectdv(v1, v2); }
TUNIS_FORCE_INLINE void  glRectf(GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2) { tunisGL.tunisRectf(x1, y1, x2, y2); }
TUNIS_FORCE_INLINE void  glRectfv(const GLfloat * v1, const GLfloat * v2) { tunisGL.tunisRectfv(v1, v2); }
TUNIS_FORCE_INLINE void  glRecti(GLint x1, GLint y1, GLint x2, GLint y2) { tunisGL.tunisRecti(x1, y1, x2, y2); }
TUNIS_FORCE_INLINE void  glRectiv(const GLint * v1, const GLint * v2) { tunisGL.tunisRectiv(v1, v2); }
TUNIS_FORCE_INLINE void  glRects(GLshort x1, GLshort y1, GLshort x2, GLshort y2) { tunisGL.tunisRects(x1, y1, x2, y2); }
TUNIS_FORCE_INLINE void  glRectsv(const GLshort * v1, const GLshort * v2) { tunisGL.tunisRectsv(v1, v2); }
TUNIS_FORCE_INLINE void  glRectxOES(GLfixed x1, GLfixed y1, GLfixed x2, GLfixed y2) { tunisGL.tunisRectxOES(x1, y1, x2, y2); }
TUNIS_FORCE_INLINE void  glRectxvOES(const GLfixed * v1, const GLfixed * v2) { tunisGL.tunisRectxvOES(v1, v2); }
TUNIS_FORCE_INLINE void  glReferencePlaneSGIX(const GLdouble * equation) { tunisGL.tunisReferencePlaneSGIX(equation); }
TUNIS_FORCE_INLINE GLboolean glReleaseKeyedMutexWin32EXT(GLuint memory, GLuint64 key) { return tunisGL.tunisReleaseKeyedMutexWin32EXT(memory, key); }
TUNIS_FORCE_INLINE void  glReleaseShaderCompiler(void) { tunisGL.tunisReleaseShaderCompiler(); }
TUNIS_FORCE_INLINE void  glRenderGpuMaskNV(GLbitfield mask) { tunisGL.tunisRenderGpuMaskNV(mask); }
TUNIS_FORCE_INLINE GLint glRenderMode(GLenum mode) { return tunisGL.tunisRenderMode(mode); }
TUNIS_FORCE_INLINE void  glRenderbufferStorage(GLenum target, GLenum internalformat, GLsizei width, GLsizei height) { tunisGL.tunisRenderbufferStorage(target, internalformat, width, height); }
TUNIS_FORCE_INLINE void  glRenderbufferStorageEXT(GLenum target, GLenum internalformat, GLsizei width, GLsizei height) { tunisGL.tunisRenderbufferStorageEXT(target, internalformat, width, height); }
TUNIS_FORCE_INLINE void  glRenderbufferStorageMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height) { tunisGL.tunisRenderbufferStorageMultisample(target, samples, internalformat, width, height); }
TUNIS_FORCE_INLINE void  glRenderbufferStorageMultisampleANGLE(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height) { tunisGL.tunisRenderbufferStorageMultisampleANGLE(target, samples, internalformat, width, height); }
TUNIS_FORCE_INLINE void  glRenderbufferStorageMultisampleAPPLE(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height) { tunisGL.tunisRenderbufferStorageMultisampleAPPLE(target, samples, internalformat, width, height); }
TUNIS_FORCE_INLINE void  glRenderbufferStorageMultisampleAdvancedAMD(GLenum target, GLsizei samples, GLsizei storageSamples, GLenum internalformat, GLsizei width, GLsizei height) { tunisGL.tunisRenderbufferStorageMultisampleAdvancedAMD(target, samples, storageSamples, internalformat, width, height); }
TUNIS_FORCE_INLINE void  glRenderbufferStorageMultisampleCoverageNV(GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height) { tunisGL.tunisRenderbufferStorageMultisampleCoverageNV(target, coverageSamples, colorSamples, internalformat, width, height); }
TUNIS_FORCE_INLINE void  glRenderbufferStorageMultisampleEXT(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height) { tunisGL.tunisRenderbufferStorageMultisampleEXT(target, samples, internalformat, width, height); }
TUNIS_FORCE_INLINE void  glRenderbufferStorageMultisampleIMG(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height) { tunisGL.tunisRenderbufferStorageMultisampleIMG(target, samples, internalformat, width, height); }
TUNIS_FORCE_INLINE void  glRenderbufferStorageMultisampleNV(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height) { tunisGL.tunisRenderbufferStorageMultisampleNV(target, samples, internalformat, width, height); }
TUNIS_FORCE_INLINE void  glRenderbufferStorageOES(GLenum target, GLenum internalformat, GLsizei width, GLsizei height) { tunisGL.tunisRenderbufferStorageOES(target, internalformat, width, height); }
TUNIS_FORCE_INLINE void  glReplacementCodePointerSUN(GLenum type, GLsizei stride, const void ** pointer) { tunisGL.tunisReplacementCodePointerSUN(type, stride, pointer); }
TUNIS_FORCE_INLINE void  glReplacementCodeubSUN(GLubyte code) { tunisGL.tunisReplacementCodeubSUN(code); }
TUNIS_FORCE_INLINE void  glReplacementCodeubvSUN(const GLubyte * code) { tunisGL.tunisReplacementCodeubvSUN(code); }
TUNIS_FORCE_INLINE void  glReplacementCodeuiColor3fVertex3fSUN(GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z) { tunisGL.tunisReplacementCodeuiColor3fVertex3fSUN(rc, r, g, b, x, y, z); }
TUNIS_FORCE_INLINE void  glReplacementCodeuiColor3fVertex3fvSUN(const GLuint * rc, const GLfloat * c, const GLfloat * v) { tunisGL.tunisReplacementCodeuiColor3fVertex3fvSUN(rc, c, v); }
TUNIS_FORCE_INLINE void  glReplacementCodeuiColor4fNormal3fVertex3fSUN(GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z) { tunisGL.tunisReplacementCodeuiColor4fNormal3fVertex3fSUN(rc, r, g, b, a, nx, ny, nz, x, y, z); }
TUNIS_FORCE_INLINE void  glReplacementCodeuiColor4fNormal3fVertex3fvSUN(const GLuint * rc, const GLfloat * c, const GLfloat * n, const GLfloat * v) { tunisGL.tunisReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc, c, n, v); }
TUNIS_FORCE_INLINE void  glReplacementCodeuiColor4ubVertex3fSUN(GLuint rc, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z) { tunisGL.tunisReplacementCodeuiColor4ubVertex3fSUN(rc, r, g, b, a, x, y, z); }
TUNIS_FORCE_INLINE void  glReplacementCodeuiColor4ubVertex3fvSUN(const GLuint * rc, const GLubyte * c, const GLfloat * v) { tunisGL.tunisReplacementCodeuiColor4ubVertex3fvSUN(rc, c, v); }
TUNIS_FORCE_INLINE void  glReplacementCodeuiNormal3fVertex3fSUN(GLuint rc, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z) { tunisGL.tunisReplacementCodeuiNormal3fVertex3fSUN(rc, nx, ny, nz, x, y, z); }
TUNIS_FORCE_INLINE void  glReplacementCodeuiNormal3fVertex3fvSUN(const GLuint * rc, const GLfloat * n, const GLfloat * v) { tunisGL.tunisReplacementCodeuiNormal3fVertex3fvSUN(rc, n, v); }
TUNIS_FORCE_INLINE void  glReplacementCodeuiSUN(GLuint code) { tunisGL.tunisReplacementCodeuiSUN(code); }
TUNIS_FORCE_INLINE void  glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN(GLuint rc, GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z) { tunisGL.tunisReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN(rc, s, t, r, g, b, a, nx, ny, nz, x, y, z); }
TUNIS_FORCE_INLINE void  glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(const GLuint * rc, const GLfloat * tc, const GLfloat * c, const GLfloat * n, const GLfloat * v) { tunisGL.tunisReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc, c, n, v); }
TUNIS_FORCE_INLINE void  glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN(GLuint rc, GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z) { tunisGL.tunisReplacementCodeuiTexCoord2fNormal3fVertex3fSUN(rc, s, t, nx, ny, nz, x, y, z); }
TUNIS_FORCE_INLINE void  glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(const GLuint * rc, const GLfloat * tc, const GLfloat * n, const GLfloat * v) { tunisGL.tunisReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc, tc, n, v); }
TUNIS_FORCE_INLINE void  glReplacementCodeuiTexCoord2fVertex3fSUN(GLuint rc, GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z) { tunisGL.tunisReplacementCodeuiTexCoord2fVertex3fSUN(rc, s, t, x, y, z); }
TUNIS_FORCE_INLINE void  glReplacementCodeuiTexCoord2fVertex3fvSUN(const GLuint * rc, const GLfloat * tc, const GLfloat * v) { tunisGL.tunisReplacementCodeuiTexCoord2fVertex3fvSUN(rc, tc, v); }
TUNIS_FORCE_INLINE void  glReplacementCodeuiVertex3fSUN(GLuint rc, GLfloat x, GLfloat y, GLfloat z) { tunisGL.tunisReplacementCodeuiVertex3fSUN(rc, x, y, z); }
TUNIS_FORCE_INLINE void  glReplacementCodeuiVertex3fvSUN(const GLuint * rc, const GLfloat * v) { tunisGL.tunisReplacementCodeuiVertex3fvSUN(rc, v); }
TUNIS_FORCE_INLINE void  glReplacementCodeuivSUN(const GLuint * code) { tunisGL.tunisReplacementCodeuivSUN(code); }
TUNIS_FORCE_INLINE void  glReplacementCodeusSUN(GLushort code) { tunisGL.tunisReplacementCodeusSUN(code); }
TUNIS_FORCE_INLINE void  glReplacementCodeusvSUN(const GLushort * code) { tunisGL.tunisReplacementCodeusvSUN(code); }
TUNIS_FORCE_INLINE void  glRequestResidentProgramsNV(GLsizei n, const GLuint * programs) { tunisGL.tunisRequestResidentProgramsNV(n, programs); }
TUNIS_FORCE_INLINE void  glResetHistogram(GLenum target) { tunisGL.tunisResetHistogram(target); }
TUNIS_FORCE_INLINE void  glResetHistogramEXT(GLenum target) { tunisGL.tunisResetHistogramEXT(target); }
TUNIS_FORCE_INLINE void  glResetMinmax(GLenum target) { tunisGL.tunisResetMinmax(target); }
TUNIS_FORCE_INLINE void  glResetMinmaxEXT(GLenum target) { tunisGL.tunisResetMinmaxEXT(target); }
TUNIS_FORCE_INLINE void  glResizeBuffersMESA(void) { tunisGL.tunisResizeBuffersMESA(); }
TUNIS_FORCE_INLINE void  glResolveDepthValuesNV(void) { tunisGL.tunisResolveDepthValuesNV(); }
TUNIS_FORCE_INLINE void  glResolveMultisampleFramebufferAPPLE(void) { tunisGL.tunisResolveMultisampleFramebufferAPPLE(); }
TUNIS_FORCE_INLINE void  glResumeTransformFeedback(void) { tunisGL.tunisResumeTransformFeedback(); }
TUNIS_FORCE_INLINE void  glResumeTransformFeedbackNV(void) { tunisGL.tunisResumeTransformFeedbackNV(); }
TUNIS_FORCE_INLINE void  glRotated(GLdouble angle, GLdouble x, GLdouble y, GLdouble z) { tunisGL.tunisRotated(angle, x, y, z); }
TUNIS_FORCE_INLINE void  glRotatef(GLfloat angle, GLfloat x, GLfloat y, GLfloat z) { tunisGL.tunisRotatef(angle, x, y, z); }
TUNIS_FORCE_INLINE void  glRotatex(GLfixed angle, GLfixed x, GLfixed y, GLfixed z) { tunisGL.tunisRotatex(angle, x, y, z); }
TUNIS_FORCE_INLINE void  glRotatexOES(GLfixed angle, GLfixed x, GLfixed y, GLfixed z) { tunisGL.tunisRotatexOES(angle, x, y, z); }
TUNIS_FORCE_INLINE void  glSampleCoverage(GLfloat value, GLboolean invert) { tunisGL.tunisSampleCoverage(value, invert); }
TUNIS_FORCE_INLINE void  glSampleCoverageARB(GLfloat value, GLboolean invert) { tunisGL.tunisSampleCoverageARB(value, invert); }
TUNIS_FORCE_INLINE void  glSampleCoveragex(GLclampx value, GLboolean invert) { tunisGL.tunisSampleCoveragex(value, invert); }
TUNIS_FORCE_INLINE void  glSampleCoveragexOES(GLclampx value, GLboolean invert) { tunisGL.tunisSampleCoveragexOES(value, invert); }
TUNIS_FORCE_INLINE void  glSampleMapATI(GLuint dst, GLuint interp, GLenum swizzle) { tunisGL.tunisSampleMapATI(dst, interp, swizzle); }
TUNIS_FORCE_INLINE void  glSampleMaskEXT(GLclampf value, GLboolean invert) { tunisGL.tunisSampleMaskEXT(value, invert); }
TUNIS_FORCE_INLINE void  glSampleMaskIndexedNV(GLuint index, GLbitfield mask) { tunisGL.tunisSampleMaskIndexedNV(index, mask); }
TUNIS_FORCE_INLINE void  glSampleMaskSGIS(GLclampf value, GLboolean invert) { tunisGL.tunisSampleMaskSGIS(value, invert); }
TUNIS_FORCE_INLINE void  glSampleMaski(GLuint maskNumber, GLbitfield mask) { tunisGL.tunisSampleMaski(maskNumber, mask); }
TUNIS_FORCE_INLINE void  glSamplePatternEXT(GLenum pattern) { tunisGL.tunisSamplePatternEXT(pattern); }
TUNIS_FORCE_INLINE void  glSamplePatternSGIS(GLenum pattern) { tunisGL.tunisSamplePatternSGIS(pattern); }
TUNIS_FORCE_INLINE void  glSamplerParameterIiv(GLuint sampler, GLenum pname, const GLint * param) { tunisGL.tunisSamplerParameterIiv(sampler, pname, param); }
TUNIS_FORCE_INLINE void  glSamplerParameterIivEXT(GLuint sampler, GLenum pname, const GLint * param) { tunisGL.tunisSamplerParameterIivEXT(sampler, pname, param); }
TUNIS_FORCE_INLINE void  glSamplerParameterIivOES(GLuint sampler, GLenum pname, const GLint * param) { tunisGL.tunisSamplerParameterIivOES(sampler, pname, param); }
TUNIS_FORCE_INLINE void  glSamplerParameterIuiv(GLuint sampler, GLenum pname, const GLuint * param) { tunisGL.tunisSamplerParameterIuiv(sampler, pname, param); }
TUNIS_FORCE_INLINE void  glSamplerParameterIuivEXT(GLuint sampler, GLenum pname, const GLuint * param) { tunisGL.tunisSamplerParameterIuivEXT(sampler, pname, param); }
TUNIS_FORCE_INLINE void  glSamplerParameterIuivOES(GLuint sampler, GLenum pname, const GLuint * param) { tunisGL.tunisSamplerParameterIuivOES(sampler, pname, param); }
TUNIS_FORCE_INLINE void  glSamplerParameterf(GLuint sampler, GLenum pname, GLfloat param) { tunisGL.tunisSamplerParameterf(sampler, pname, param); }
TUNIS_FORCE_INLINE void  glSamplerParameterfv(GLuint sampler, GLenum pname, const GLfloat * param) { tunisGL.tunisSamplerParameterfv(sampler, pname, param); }
TUNIS_FORCE_INLINE void  glSamplerParameteri(GLuint sampler, GLenum pname, GLint param) { tunisGL.tunisSamplerParameteri(sampler, pname, param); }
TUNIS_FORCE_INLINE void  glSamplerParameteriv(GLuint sampler, GLenum pname, const GLint * param) { tunisGL.tunisSamplerParameteriv(sampler, pname, param); }
TUNIS_FORCE_INLINE void  glScaled(GLdouble x, GLdouble y, GLdouble z) { tunisGL.tunisScaled(x, y, z); }
TUNIS_FORCE_INLINE void  glScalef(GLfloat x, GLfloat y, GLfloat z) { tunisGL.tunisScalef(x, y, z); }
TUNIS_FORCE_INLINE void  glScalex(GLfixed x, GLfixed y, GLfixed z) { tunisGL.tunisScalex(x, y, z); }
TUNIS_FORCE_INLINE void  glScalexOES(GLfixed x, GLfixed y, GLfixed z) { tunisGL.tunisScalexOES(x, y, z); }
TUNIS_FORCE_INLINE void  glScissor(GLint x, GLint y, GLsizei width, GLsizei height) { tunisGL.tunisScissor(x, y, width, height); }
TUNIS_FORCE_INLINE void  glScissorArrayv(GLuint first, GLsizei count, const GLint * v) { tunisGL.tunisScissorArrayv(first, count, v); }
TUNIS_FORCE_INLINE void  glScissorArrayvNV(GLuint first, GLsizei count, const GLint * v) { tunisGL.tunisScissorArrayvNV(first, count, v); }
TUNIS_FORCE_INLINE void  glScissorArrayvOES(GLuint first, GLsizei count, const GLint * v) { tunisGL.tunisScissorArrayvOES(first, count, v); }
TUNIS_FORCE_INLINE void  glScissorIndexed(GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height) { tunisGL.tunisScissorIndexed(index, left, bottom, width, height); }
TUNIS_FORCE_INLINE void  glScissorIndexedNV(GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height) { tunisGL.tunisScissorIndexedNV(index, left, bottom, width, height); }
TUNIS_FORCE_INLINE void  glScissorIndexedOES(GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height) { tunisGL.tunisScissorIndexedOES(index, left, bottom, width, height); }
TUNIS_FORCE_INLINE void  glScissorIndexedv(GLuint index, const GLint * v) { tunisGL.tunisScissorIndexedv(index, v); }
TUNIS_FORCE_INLINE void  glScissorIndexedvNV(GLuint index, const GLint * v) { tunisGL.tunisScissorIndexedvNV(index, v); }
TUNIS_FORCE_INLINE void  glScissorIndexedvOES(GLuint index, const GLint * v) { tunisGL.tunisScissorIndexedvOES(index, v); }
TUNIS_FORCE_INLINE void  glSecondaryColor3b(GLbyte red, GLbyte green, GLbyte blue) { tunisGL.tunisSecondaryColor3b(red, green, blue); }
TUNIS_FORCE_INLINE void  glSecondaryColor3bEXT(GLbyte red, GLbyte green, GLbyte blue) { tunisGL.tunisSecondaryColor3bEXT(red, green, blue); }
TUNIS_FORCE_INLINE void  glSecondaryColor3bv(const GLbyte * v) { tunisGL.tunisSecondaryColor3bv(v); }
TUNIS_FORCE_INLINE void  glSecondaryColor3bvEXT(const GLbyte * v) { tunisGL.tunisSecondaryColor3bvEXT(v); }
TUNIS_FORCE_INLINE void  glSecondaryColor3d(GLdouble red, GLdouble green, GLdouble blue) { tunisGL.tunisSecondaryColor3d(red, green, blue); }
TUNIS_FORCE_INLINE void  glSecondaryColor3dEXT(GLdouble red, GLdouble green, GLdouble blue) { tunisGL.tunisSecondaryColor3dEXT(red, green, blue); }
TUNIS_FORCE_INLINE void  glSecondaryColor3dv(const GLdouble * v) { tunisGL.tunisSecondaryColor3dv(v); }
TUNIS_FORCE_INLINE void  glSecondaryColor3dvEXT(const GLdouble * v) { tunisGL.tunisSecondaryColor3dvEXT(v); }
TUNIS_FORCE_INLINE void  glSecondaryColor3f(GLfloat red, GLfloat green, GLfloat blue) { tunisGL.tunisSecondaryColor3f(red, green, blue); }
TUNIS_FORCE_INLINE void  glSecondaryColor3fEXT(GLfloat red, GLfloat green, GLfloat blue) { tunisGL.tunisSecondaryColor3fEXT(red, green, blue); }
TUNIS_FORCE_INLINE void  glSecondaryColor3fv(const GLfloat * v) { tunisGL.tunisSecondaryColor3fv(v); }
TUNIS_FORCE_INLINE void  glSecondaryColor3fvEXT(const GLfloat * v) { tunisGL.tunisSecondaryColor3fvEXT(v); }
TUNIS_FORCE_INLINE void  glSecondaryColor3hNV(GLhalfNV red, GLhalfNV green, GLhalfNV blue) { tunisGL.tunisSecondaryColor3hNV(red, green, blue); }
TUNIS_FORCE_INLINE void  glSecondaryColor3hvNV(const GLhalfNV * v) { tunisGL.tunisSecondaryColor3hvNV(v); }
TUNIS_FORCE_INLINE void  glSecondaryColor3i(GLint red, GLint green, GLint blue) { tunisGL.tunisSecondaryColor3i(red, green, blue); }
TUNIS_FORCE_INLINE void  glSecondaryColor3iEXT(GLint red, GLint green, GLint blue) { tunisGL.tunisSecondaryColor3iEXT(red, green, blue); }
TUNIS_FORCE_INLINE void  glSecondaryColor3iv(const GLint * v) { tunisGL.tunisSecondaryColor3iv(v); }
TUNIS_FORCE_INLINE void  glSecondaryColor3ivEXT(const GLint * v) { tunisGL.tunisSecondaryColor3ivEXT(v); }
TUNIS_FORCE_INLINE void  glSecondaryColor3s(GLshort red, GLshort green, GLshort blue) { tunisGL.tunisSecondaryColor3s(red, green, blue); }
TUNIS_FORCE_INLINE void  glSecondaryColor3sEXT(GLshort red, GLshort green, GLshort blue) { tunisGL.tunisSecondaryColor3sEXT(red, green, blue); }
TUNIS_FORCE_INLINE void  glSecondaryColor3sv(const GLshort * v) { tunisGL.tunisSecondaryColor3sv(v); }
TUNIS_FORCE_INLINE void  glSecondaryColor3svEXT(const GLshort * v) { tunisGL.tunisSecondaryColor3svEXT(v); }
TUNIS_FORCE_INLINE void  glSecondaryColor3ub(GLubyte red, GLubyte green, GLubyte blue) { tunisGL.tunisSecondaryColor3ub(red, green, blue); }
TUNIS_FORCE_INLINE void  glSecondaryColor3ubEXT(GLubyte red, GLubyte green, GLubyte blue) { tunisGL.tunisSecondaryColor3ubEXT(red, green, blue); }
TUNIS_FORCE_INLINE void  glSecondaryColor3ubv(const GLubyte * v) { tunisGL.tunisSecondaryColor3ubv(v); }
TUNIS_FORCE_INLINE void  glSecondaryColor3ubvEXT(const GLubyte * v) { tunisGL.tunisSecondaryColor3ubvEXT(v); }
TUNIS_FORCE_INLINE void  glSecondaryColor3ui(GLuint red, GLuint green, GLuint blue) { tunisGL.tunisSecondaryColor3ui(red, green, blue); }
TUNIS_FORCE_INLINE void  glSecondaryColor3uiEXT(GLuint red, GLuint green, GLuint blue) { tunisGL.tunisSecondaryColor3uiEXT(red, green, blue); }
TUNIS_FORCE_INLINE void  glSecondaryColor3uiv(const GLuint * v) { tunisGL.tunisSecondaryColor3uiv(v); }
TUNIS_FORCE_INLINE void  glSecondaryColor3uivEXT(const GLuint * v) { tunisGL.tunisSecondaryColor3uivEXT(v); }
TUNIS_FORCE_INLINE void  glSecondaryColor3us(GLushort red, GLushort green, GLushort blue) { tunisGL.tunisSecondaryColor3us(red, green, blue); }
TUNIS_FORCE_INLINE void  glSecondaryColor3usEXT(GLushort red, GLushort green, GLushort blue) { tunisGL.tunisSecondaryColor3usEXT(red, green, blue); }
TUNIS_FORCE_INLINE void  glSecondaryColor3usv(const GLushort * v) { tunisGL.tunisSecondaryColor3usv(v); }
TUNIS_FORCE_INLINE void  glSecondaryColor3usvEXT(const GLushort * v) { tunisGL.tunisSecondaryColor3usvEXT(v); }
TUNIS_FORCE_INLINE void  glSecondaryColorFormatNV(GLint size, GLenum type, GLsizei stride) { tunisGL.tunisSecondaryColorFormatNV(size, type, stride); }
TUNIS_FORCE_INLINE void  glSecondaryColorP3ui(GLenum type, GLuint color) { tunisGL.tunisSecondaryColorP3ui(type, color); }
TUNIS_FORCE_INLINE void  glSecondaryColorP3uiv(GLenum type, const GLuint * color) { tunisGL.tunisSecondaryColorP3uiv(type, color); }
TUNIS_FORCE_INLINE void  glSecondaryColorPointer(GLint size, GLenum type, GLsizei stride, const void * pointer) { tunisGL.tunisSecondaryColorPointer(size, type, stride, pointer); }
TUNIS_FORCE_INLINE void  glSecondaryColorPointerEXT(GLint size, GLenum type, GLsizei stride, const void * pointer) { tunisGL.tunisSecondaryColorPointerEXT(size, type, stride, pointer); }
TUNIS_FORCE_INLINE void  glSecondaryColorPointerListIBM(GLint size, GLenum type, GLint stride, const void ** pointer, GLint ptrstride) { tunisGL.tunisSecondaryColorPointerListIBM(size, type, stride, pointer, ptrstride); }
TUNIS_FORCE_INLINE void  glSelectBuffer(GLsizei size, GLuint * buffer) { tunisGL.tunisSelectBuffer(size, buffer); }
TUNIS_FORCE_INLINE void  glSelectPerfMonitorCountersAMD(GLuint monitor, GLboolean enable, GLuint group, GLint numCounters, GLuint * counterList) { tunisGL.tunisSelectPerfMonitorCountersAMD(monitor, enable, group, numCounters, counterList); }
TUNIS_FORCE_INLINE void  glSemaphoreParameterui64vEXT(GLuint semaphore, GLenum pname, const GLuint64 * params) { tunisGL.tunisSemaphoreParameterui64vEXT(semaphore, pname, params); }
TUNIS_FORCE_INLINE void  glSeparableFilter2D(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * row, const void * column) { tunisGL.tunisSeparableFilter2D(target, internalformat, width, height, format, type, row, column); }
TUNIS_FORCE_INLINE void  glSeparableFilter2DEXT(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * row, const void * column) { tunisGL.tunisSeparableFilter2DEXT(target, internalformat, width, height, format, type, row, column); }
TUNIS_FORCE_INLINE void  glSetFenceAPPLE(GLuint fence) { tunisGL.tunisSetFenceAPPLE(fence); }
TUNIS_FORCE_INLINE void  glSetFenceNV(GLuint fence, GLenum condition) { tunisGL.tunisSetFenceNV(fence, condition); }
TUNIS_FORCE_INLINE void  glSetFragmentShaderConstantATI(GLuint dst, const GLfloat * value) { tunisGL.tunisSetFragmentShaderConstantATI(dst, value); }
TUNIS_FORCE_INLINE void  glSetInvariantEXT(GLuint id, GLenum type, const void * addr) { tunisGL.tunisSetInvariantEXT(id, type, addr); }
TUNIS_FORCE_INLINE void  glSetLocalConstantEXT(GLuint id, GLenum type, const void * addr) { tunisGL.tunisSetLocalConstantEXT(id, type, addr); }
TUNIS_FORCE_INLINE void  glSetMultisamplefvAMD(GLenum pname, GLuint index, const GLfloat * val) { tunisGL.tunisSetMultisamplefvAMD(pname, index, val); }
TUNIS_FORCE_INLINE void  glShadeModel(GLenum mode) { tunisGL.tunisShadeModel(mode); }
TUNIS_FORCE_INLINE void  glShaderBinary(GLsizei count, const GLuint * shaders, GLenum binaryformat, const void * binary, GLsizei length) { tunisGL.tunisShaderBinary(count, shaders, binaryformat, binary, length); }
TUNIS_FORCE_INLINE void  glShaderOp1EXT(GLenum op, GLuint res, GLuint arg1) { tunisGL.tunisShaderOp1EXT(op, res, arg1); }
TUNIS_FORCE_INLINE void  glShaderOp2EXT(GLenum op, GLuint res, GLuint arg1, GLuint arg2) { tunisGL.tunisShaderOp2EXT(op, res, arg1, arg2); }
TUNIS_FORCE_INLINE void  glShaderOp3EXT(GLenum op, GLuint res, GLuint arg1, GLuint arg2, GLuint arg3) { tunisGL.tunisShaderOp3EXT(op, res, arg1, arg2, arg3); }
TUNIS_FORCE_INLINE void  glShaderSource(GLuint shader, GLsizei count, const GLchar *const* string, const GLint * length) { tunisGL.tunisShaderSource(shader, count, string, length); }
TUNIS_FORCE_INLINE void  glShaderSourceARB(GLhandleARB shaderObj, GLsizei count, const GLcharARB ** string, const GLint * length) { tunisGL.tunisShaderSourceARB(shaderObj, count, string, length); }
TUNIS_FORCE_INLINE void  glShaderStorageBlockBinding(GLuint program, GLuint storageBlockIndex, GLuint storageBlockBinding) { tunisGL.tunisShaderStorageBlockBinding(program, storageBlockIndex, storageBlockBinding); }
TUNIS_FORCE_INLINE void  glSharpenTexFuncSGIS(GLenum target, GLsizei n, const GLfloat * points) { tunisGL.tunisSharpenTexFuncSGIS(target, n, points); }
TUNIS_FORCE_INLINE void  glSignalSemaphoreEXT(GLuint semaphore, GLuint numBufferBarriers, const GLuint * buffers, GLuint numTextureBarriers, const GLuint * textures, const GLenum * dstLayouts) { tunisGL.tunisSignalSemaphoreEXT(semaphore, numBufferBarriers, buffers, numTextureBarriers, textures, dstLayouts); }
TUNIS_FORCE_INLINE void  glSignalVkFenceNV(GLuint64 vkFence) { tunisGL.tunisSignalVkFenceNV(vkFence); }
TUNIS_FORCE_INLINE void  glSignalVkSemaphoreNV(GLuint64 vkSemaphore) { tunisGL.tunisSignalVkSemaphoreNV(vkSemaphore); }
TUNIS_FORCE_INLINE void  glSpecializeShader(GLuint shader, const GLchar * pEntryPoint, GLuint numSpecializationConstants, const GLuint * pConstantIndex, const GLuint * pConstantValue) { tunisGL.tunisSpecializeShader(shader, pEntryPoint, numSpecializationConstants, pConstantIndex, pConstantValue); }
TUNIS_FORCE_INLINE void  glSpecializeShaderARB(GLuint shader, const GLchar * pEntryPoint, GLuint numSpecializationConstants, const GLuint * pConstantIndex, const GLuint * pConstantValue) { tunisGL.tunisSpecializeShaderARB(shader, pEntryPoint, numSpecializationConstants, pConstantIndex, pConstantValue); }
TUNIS_FORCE_INLINE void  glSpriteParameterfSGIX(GLenum pname, GLfloat param) { tunisGL.tunisSpriteParameterfSGIX(pname, param); }
TUNIS_FORCE_INLINE void  glSpriteParameterfvSGIX(GLenum pname, const GLfloat * params) { tunisGL.tunisSpriteParameterfvSGIX(pname, params); }
TUNIS_FORCE_INLINE void  glSpriteParameteriSGIX(GLenum pname, GLint param) { tunisGL.tunisSpriteParameteriSGIX(pname, param); }
TUNIS_FORCE_INLINE void  glSpriteParameterivSGIX(GLenum pname, const GLint * params) { tunisGL.tunisSpriteParameterivSGIX(pname, params); }
TUNIS_FORCE_INLINE void  glStartInstrumentsSGIX(void) { tunisGL.tunisStartInstrumentsSGIX(); }
TUNIS_FORCE_INLINE void  glStartTilingQCOM(GLuint x, GLuint y, GLuint width, GLuint height, GLbitfield preserveMask) { tunisGL.tunisStartTilingQCOM(x, y, width, height, preserveMask); }
TUNIS_FORCE_INLINE void  glStateCaptureNV(GLuint state, GLenum mode) { tunisGL.tunisStateCaptureNV(state, mode); }
TUNIS_FORCE_INLINE void  glStencilClearTagEXT(GLsizei stencilTagBits, GLuint stencilClearTag) { tunisGL.tunisStencilClearTagEXT(stencilTagBits, stencilClearTag); }
TUNIS_FORCE_INLINE void  glStencilFillPathInstancedNV(GLsizei numPaths, GLenum pathNameType, const void * paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum transformType, const GLfloat * transformValues) { tunisGL.tunisStencilFillPathInstancedNV(numPaths, pathNameType, paths, pathBase, fillMode, mask, transformType, transformValues); }
TUNIS_FORCE_INLINE void  glStencilFillPathNV(GLuint path, GLenum fillMode, GLuint mask) { tunisGL.tunisStencilFillPathNV(path, fillMode, mask); }
TUNIS_FORCE_INLINE void  glStencilFunc(GLenum func, GLint ref, GLuint mask) { tunisGL.tunisStencilFunc(func, ref, mask); }
TUNIS_FORCE_INLINE void  glStencilFuncSeparate(GLenum face, GLenum func, GLint ref, GLuint mask) { tunisGL.tunisStencilFuncSeparate(face, func, ref, mask); }
TUNIS_FORCE_INLINE void  glStencilFuncSeparateATI(GLenum frontfunc, GLenum backfunc, GLint ref, GLuint mask) { tunisGL.tunisStencilFuncSeparateATI(frontfunc, backfunc, ref, mask); }
TUNIS_FORCE_INLINE void  glStencilMask(GLuint mask) { tunisGL.tunisStencilMask(mask); }
TUNIS_FORCE_INLINE void  glStencilMaskSeparate(GLenum face, GLuint mask) { tunisGL.tunisStencilMaskSeparate(face, mask); }
TUNIS_FORCE_INLINE void  glStencilOp(GLenum fail, GLenum zfail, GLenum zpass) { tunisGL.tunisStencilOp(fail, zfail, zpass); }
TUNIS_FORCE_INLINE void  glStencilOpSeparate(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass) { tunisGL.tunisStencilOpSeparate(face, sfail, dpfail, dppass); }
TUNIS_FORCE_INLINE void  glStencilOpSeparateATI(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass) { tunisGL.tunisStencilOpSeparateATI(face, sfail, dpfail, dppass); }
TUNIS_FORCE_INLINE void  glStencilOpValueAMD(GLenum face, GLuint value) { tunisGL.tunisStencilOpValueAMD(face, value); }
TUNIS_FORCE_INLINE void  glStencilStrokePathInstancedNV(GLsizei numPaths, GLenum pathNameType, const void * paths, GLuint pathBase, GLint reference, GLuint mask, GLenum transformType, const GLfloat * transformValues) { tunisGL.tunisStencilStrokePathInstancedNV(numPaths, pathNameType, paths, pathBase, reference, mask, transformType, transformValues); }
TUNIS_FORCE_INLINE void  glStencilStrokePathNV(GLuint path, GLint reference, GLuint mask) { tunisGL.tunisStencilStrokePathNV(path, reference, mask); }
TUNIS_FORCE_INLINE void  glStencilThenCoverFillPathInstancedNV(GLsizei numPaths, GLenum pathNameType, const void * paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum coverMode, GLenum transformType, const GLfloat * transformValues) { tunisGL.tunisStencilThenCoverFillPathInstancedNV(numPaths, pathNameType, paths, pathBase, fillMode, mask, coverMode, transformType, transformValues); }
TUNIS_FORCE_INLINE void  glStencilThenCoverFillPathNV(GLuint path, GLenum fillMode, GLuint mask, GLenum coverMode) { tunisGL.tunisStencilThenCoverFillPathNV(path, fillMode, mask, coverMode); }
TUNIS_FORCE_INLINE void  glStencilThenCoverStrokePathInstancedNV(GLsizei numPaths, GLenum pathNameType, const void * paths, GLuint pathBase, GLint reference, GLuint mask, GLenum coverMode, GLenum transformType, const GLfloat * transformValues) { tunisGL.tunisStencilThenCoverStrokePathInstancedNV(numPaths, pathNameType, paths, pathBase, reference, mask, coverMode, transformType, transformValues); }
TUNIS_FORCE_INLINE void  glStencilThenCoverStrokePathNV(GLuint path, GLint reference, GLuint mask, GLenum coverMode) { tunisGL.tunisStencilThenCoverStrokePathNV(path, reference, mask, coverMode); }
TUNIS_FORCE_INLINE void  glStopInstrumentsSGIX(GLint marker) { tunisGL.tunisStopInstrumentsSGIX(marker); }
TUNIS_FORCE_INLINE void  glStringMarkerGREMEDY(GLsizei len, const void * string) { tunisGL.tunisStringMarkerGREMEDY(len, string); }
TUNIS_FORCE_INLINE void  glSubpixelPrecisionBiasNV(GLuint xbits, GLuint ybits) { tunisGL.tunisSubpixelPrecisionBiasNV(xbits, ybits); }
TUNIS_FORCE_INLINE void  glSwizzleEXT(GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW) { tunisGL.tunisSwizzleEXT(res, in, outX, outY, outZ, outW); }
TUNIS_FORCE_INLINE void  glSyncTextureINTEL(GLuint texture) { tunisGL.tunisSyncTextureINTEL(texture); }
TUNIS_FORCE_INLINE void  glTagSampleBufferSGIX(void) { tunisGL.tunisTagSampleBufferSGIX(); }
TUNIS_FORCE_INLINE void  glTangent3bEXT(GLbyte tx, GLbyte ty, GLbyte tz) { tunisGL.tunisTangent3bEXT(tx, ty, tz); }
TUNIS_FORCE_INLINE void  glTangent3bvEXT(const GLbyte * v) { tunisGL.tunisTangent3bvEXT(v); }
TUNIS_FORCE_INLINE void  glTangent3dEXT(GLdouble tx, GLdouble ty, GLdouble tz) { tunisGL.tunisTangent3dEXT(tx, ty, tz); }
TUNIS_FORCE_INLINE void  glTangent3dvEXT(const GLdouble * v) { tunisGL.tunisTangent3dvEXT(v); }
TUNIS_FORCE_INLINE void  glTangent3fEXT(GLfloat tx, GLfloat ty, GLfloat tz) { tunisGL.tunisTangent3fEXT(tx, ty, tz); }
TUNIS_FORCE_INLINE void  glTangent3fvEXT(const GLfloat * v) { tunisGL.tunisTangent3fvEXT(v); }
TUNIS_FORCE_INLINE void  glTangent3iEXT(GLint tx, GLint ty, GLint tz) { tunisGL.tunisTangent3iEXT(tx, ty, tz); }
TUNIS_FORCE_INLINE void  glTangent3ivEXT(const GLint * v) { tunisGL.tunisTangent3ivEXT(v); }
TUNIS_FORCE_INLINE void  glTangent3sEXT(GLshort tx, GLshort ty, GLshort tz) { tunisGL.tunisTangent3sEXT(tx, ty, tz); }
TUNIS_FORCE_INLINE void  glTangent3svEXT(const GLshort * v) { tunisGL.tunisTangent3svEXT(v); }
TUNIS_FORCE_INLINE void  glTangentPointerEXT(GLenum type, GLsizei stride, const void * pointer) { tunisGL.tunisTangentPointerEXT(type, stride, pointer); }
TUNIS_FORCE_INLINE void  glTbufferMask3DFX(GLuint mask) { tunisGL.tunisTbufferMask3DFX(mask); }
TUNIS_FORCE_INLINE void  glTessellationFactorAMD(GLfloat factor) { tunisGL.tunisTessellationFactorAMD(factor); }
TUNIS_FORCE_INLINE void  glTessellationModeAMD(GLenum mode) { tunisGL.tunisTessellationModeAMD(mode); }
TUNIS_FORCE_INLINE GLboolean glTestFenceAPPLE(GLuint fence) { return tunisGL.tunisTestFenceAPPLE(fence); }
TUNIS_FORCE_INLINE GLboolean glTestFenceNV(GLuint fence) { return tunisGL.tunisTestFenceNV(fence); }
TUNIS_FORCE_INLINE GLboolean glTestObjectAPPLE(GLenum object, GLuint name) { return tunisGL.tunisTestObjectAPPLE(object, name); }
TUNIS_FORCE_INLINE void  glTexBuffer(GLenum target, GLenum internalformat, GLuint buffer) { tunisGL.tunisTexBuffer(target, internalformat, buffer); }
TUNIS_FORCE_INLINE void  glTexBufferARB(GLenum target, GLenum internalformat, GLuint buffer) { tunisGL.tunisTexBufferARB(target, internalformat, buffer); }
TUNIS_FORCE_INLINE void  glTexBufferEXT(GLenum target, GLenum internalformat, GLuint buffer) { tunisGL.tunisTexBufferEXT(target, internalformat, buffer); }
TUNIS_FORCE_INLINE void  glTexBufferOES(GLenum target, GLenum internalformat, GLuint buffer) { tunisGL.tunisTexBufferOES(target, internalformat, buffer); }
TUNIS_FORCE_INLINE void  glTexBufferRange(GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size) { tunisGL.tunisTexBufferRange(target, internalformat, buffer, offset, size); }
TUNIS_FORCE_INLINE void  glTexBufferRangeEXT(GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size) { tunisGL.tunisTexBufferRangeEXT(target, internalformat, buffer, offset, size); }
TUNIS_FORCE_INLINE void  glTexBufferRangeOES(GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size) { tunisGL.tunisTexBufferRangeOES(target, internalformat, buffer, offset, size); }
TUNIS_FORCE_INLINE void  glTexBumpParameterfvATI(GLenum pname, const GLfloat * param) { tunisGL.tunisTexBumpParameterfvATI(pname, param); }
TUNIS_FORCE_INLINE void  glTexBumpParameterivATI(GLenum pname, const GLint * param) { tunisGL.tunisTexBumpParameterivATI(pname, param); }
TUNIS_FORCE_INLINE void  glTexCoord1bOES(GLbyte s) { tunisGL.tunisTexCoord1bOES(s); }
TUNIS_FORCE_INLINE void  glTexCoord1bvOES(const GLbyte * coords) { tunisGL.tunisTexCoord1bvOES(coords); }
TUNIS_FORCE_INLINE void  glTexCoord1d(GLdouble s) { tunisGL.tunisTexCoord1d(s); }
TUNIS_FORCE_INLINE void  glTexCoord1dv(const GLdouble * v) { tunisGL.tunisTexCoord1dv(v); }
TUNIS_FORCE_INLINE void  glTexCoord1f(GLfloat s) { tunisGL.tunisTexCoord1f(s); }
TUNIS_FORCE_INLINE void  glTexCoord1fv(const GLfloat * v) { tunisGL.tunisTexCoord1fv(v); }
TUNIS_FORCE_INLINE void  glTexCoord1hNV(GLhalfNV s) { tunisGL.tunisTexCoord1hNV(s); }
TUNIS_FORCE_INLINE void  glTexCoord1hvNV(const GLhalfNV * v) { tunisGL.tunisTexCoord1hvNV(v); }
TUNIS_FORCE_INLINE void  glTexCoord1i(GLint s) { tunisGL.tunisTexCoord1i(s); }
TUNIS_FORCE_INLINE void  glTexCoord1iv(const GLint * v) { tunisGL.tunisTexCoord1iv(v); }
TUNIS_FORCE_INLINE void  glTexCoord1s(GLshort s) { tunisGL.tunisTexCoord1s(s); }
TUNIS_FORCE_INLINE void  glTexCoord1sv(const GLshort * v) { tunisGL.tunisTexCoord1sv(v); }
TUNIS_FORCE_INLINE void  glTexCoord1xOES(GLfixed s) { tunisGL.tunisTexCoord1xOES(s); }
TUNIS_FORCE_INLINE void  glTexCoord1xvOES(const GLfixed * coords) { tunisGL.tunisTexCoord1xvOES(coords); }
TUNIS_FORCE_INLINE void  glTexCoord2bOES(GLbyte s, GLbyte t) { tunisGL.tunisTexCoord2bOES(s, t); }
TUNIS_FORCE_INLINE void  glTexCoord2bvOES(const GLbyte * coords) { tunisGL.tunisTexCoord2bvOES(coords); }
TUNIS_FORCE_INLINE void  glTexCoord2d(GLdouble s, GLdouble t) { tunisGL.tunisTexCoord2d(s, t); }
TUNIS_FORCE_INLINE void  glTexCoord2dv(const GLdouble * v) { tunisGL.tunisTexCoord2dv(v); }
TUNIS_FORCE_INLINE void  glTexCoord2f(GLfloat s, GLfloat t) { tunisGL.tunisTexCoord2f(s, t); }
TUNIS_FORCE_INLINE void  glTexCoord2fColor3fVertex3fSUN(GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z) { tunisGL.tunisTexCoord2fColor3fVertex3fSUN(s, t, r, g, b, x, y, z); }
TUNIS_FORCE_INLINE void  glTexCoord2fColor3fVertex3fvSUN(const GLfloat * tc, const GLfloat * c, const GLfloat * v) { tunisGL.tunisTexCoord2fColor3fVertex3fvSUN(tc, c, v); }
TUNIS_FORCE_INLINE void  glTexCoord2fColor4fNormal3fVertex3fSUN(GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z) { tunisGL.tunisTexCoord2fColor4fNormal3fVertex3fSUN(s, t, r, g, b, a, nx, ny, nz, x, y, z); }
TUNIS_FORCE_INLINE void  glTexCoord2fColor4fNormal3fVertex3fvSUN(const GLfloat * tc, const GLfloat * c, const GLfloat * n, const GLfloat * v) { tunisGL.tunisTexCoord2fColor4fNormal3fVertex3fvSUN(tc, c, n, v); }
TUNIS_FORCE_INLINE void  glTexCoord2fColor4ubVertex3fSUN(GLfloat s, GLfloat t, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z) { tunisGL.tunisTexCoord2fColor4ubVertex3fSUN(s, t, r, g, b, a, x, y, z); }
TUNIS_FORCE_INLINE void  glTexCoord2fColor4ubVertex3fvSUN(const GLfloat * tc, const GLubyte * c, const GLfloat * v) { tunisGL.tunisTexCoord2fColor4ubVertex3fvSUN(tc, c, v); }
TUNIS_FORCE_INLINE void  glTexCoord2fNormal3fVertex3fSUN(GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z) { tunisGL.tunisTexCoord2fNormal3fVertex3fSUN(s, t, nx, ny, nz, x, y, z); }
TUNIS_FORCE_INLINE void  glTexCoord2fNormal3fVertex3fvSUN(const GLfloat * tc, const GLfloat * n, const GLfloat * v) { tunisGL.tunisTexCoord2fNormal3fVertex3fvSUN(tc, n, v); }
TUNIS_FORCE_INLINE void  glTexCoord2fVertex3fSUN(GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z) { tunisGL.tunisTexCoord2fVertex3fSUN(s, t, x, y, z); }
TUNIS_FORCE_INLINE void  glTexCoord2fVertex3fvSUN(const GLfloat * tc, const GLfloat * v) { tunisGL.tunisTexCoord2fVertex3fvSUN(tc, v); }
TUNIS_FORCE_INLINE void  glTexCoord2fv(const GLfloat * v) { tunisGL.tunisTexCoord2fv(v); }
TUNIS_FORCE_INLINE void  glTexCoord2hNV(GLhalfNV s, GLhalfNV t) { tunisGL.tunisTexCoord2hNV(s, t); }
TUNIS_FORCE_INLINE void  glTexCoord2hvNV(const GLhalfNV * v) { tunisGL.tunisTexCoord2hvNV(v); }
TUNIS_FORCE_INLINE void  glTexCoord2i(GLint s, GLint t) { tunisGL.tunisTexCoord2i(s, t); }
TUNIS_FORCE_INLINE void  glTexCoord2iv(const GLint * v) { tunisGL.tunisTexCoord2iv(v); }
TUNIS_FORCE_INLINE void  glTexCoord2s(GLshort s, GLshort t) { tunisGL.tunisTexCoord2s(s, t); }
TUNIS_FORCE_INLINE void  glTexCoord2sv(const GLshort * v) { tunisGL.tunisTexCoord2sv(v); }
TUNIS_FORCE_INLINE void  glTexCoord2xOES(GLfixed s, GLfixed t) { tunisGL.tunisTexCoord2xOES(s, t); }
TUNIS_FORCE_INLINE void  glTexCoord2xvOES(const GLfixed * coords) { tunisGL.tunisTexCoord2xvOES(coords); }
TUNIS_FORCE_INLINE void  glTexCoord3bOES(GLbyte s, GLbyte t, GLbyte r) { tunisGL.tunisTexCoord3bOES(s, t, r); }
TUNIS_FORCE_INLINE void  glTexCoord3bvOES(const GLbyte * coords) { tunisGL.tunisTexCoord3bvOES(coords); }
TUNIS_FORCE_INLINE void  glTexCoord3d(GLdouble s, GLdouble t, GLdouble r) { tunisGL.tunisTexCoord3d(s, t, r); }
TUNIS_FORCE_INLINE void  glTexCoord3dv(const GLdouble * v) { tunisGL.tunisTexCoord3dv(v); }
TUNIS_FORCE_INLINE void  glTexCoord3f(GLfloat s, GLfloat t, GLfloat r) { tunisGL.tunisTexCoord3f(s, t, r); }
TUNIS_FORCE_INLINE void  glTexCoord3fv(const GLfloat * v) { tunisGL.tunisTexCoord3fv(v); }
TUNIS_FORCE_INLINE void  glTexCoord3hNV(GLhalfNV s, GLhalfNV t, GLhalfNV r) { tunisGL.tunisTexCoord3hNV(s, t, r); }
TUNIS_FORCE_INLINE void  glTexCoord3hvNV(const GLhalfNV * v) { tunisGL.tunisTexCoord3hvNV(v); }
TUNIS_FORCE_INLINE void  glTexCoord3i(GLint s, GLint t, GLint r) { tunisGL.tunisTexCoord3i(s, t, r); }
TUNIS_FORCE_INLINE void  glTexCoord3iv(const GLint * v) { tunisGL.tunisTexCoord3iv(v); }
TUNIS_FORCE_INLINE void  glTexCoord3s(GLshort s, GLshort t, GLshort r) { tunisGL.tunisTexCoord3s(s, t, r); }
TUNIS_FORCE_INLINE void  glTexCoord3sv(const GLshort * v) { tunisGL.tunisTexCoord3sv(v); }
TUNIS_FORCE_INLINE void  glTexCoord3xOES(GLfixed s, GLfixed t, GLfixed r) { tunisGL.tunisTexCoord3xOES(s, t, r); }
TUNIS_FORCE_INLINE void  glTexCoord3xvOES(const GLfixed * coords) { tunisGL.tunisTexCoord3xvOES(coords); }
TUNIS_FORCE_INLINE void  glTexCoord4bOES(GLbyte s, GLbyte t, GLbyte r, GLbyte q) { tunisGL.tunisTexCoord4bOES(s, t, r, q); }
TUNIS_FORCE_INLINE void  glTexCoord4bvOES(const GLbyte * coords) { tunisGL.tunisTexCoord4bvOES(coords); }
TUNIS_FORCE_INLINE void  glTexCoord4d(GLdouble s, GLdouble t, GLdouble r, GLdouble q) { tunisGL.tunisTexCoord4d(s, t, r, q); }
TUNIS_FORCE_INLINE void  glTexCoord4dv(const GLdouble * v) { tunisGL.tunisTexCoord4dv(v); }
TUNIS_FORCE_INLINE void  glTexCoord4f(GLfloat s, GLfloat t, GLfloat r, GLfloat q) { tunisGL.tunisTexCoord4f(s, t, r, q); }
TUNIS_FORCE_INLINE void  glTexCoord4fColor4fNormal3fVertex4fSUN(GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z, GLfloat w) { tunisGL.tunisTexCoord4fColor4fNormal3fVertex4fSUN(s, t, p, q, r, g, b, a, nx, ny, nz, x, y, z, w); }
TUNIS_FORCE_INLINE void  glTexCoord4fColor4fNormal3fVertex4fvSUN(const GLfloat * tc, const GLfloat * c, const GLfloat * n, const GLfloat * v) { tunisGL.tunisTexCoord4fColor4fNormal3fVertex4fvSUN(tc, c, n, v); }
TUNIS_FORCE_INLINE void  glTexCoord4fVertex4fSUN(GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat x, GLfloat y, GLfloat z, GLfloat w) { tunisGL.tunisTexCoord4fVertex4fSUN(s, t, p, q, x, y, z, w); }
TUNIS_FORCE_INLINE void  glTexCoord4fVertex4fvSUN(const GLfloat * tc, const GLfloat * v) { tunisGL.tunisTexCoord4fVertex4fvSUN(tc, v); }
TUNIS_FORCE_INLINE void  glTexCoord4fv(const GLfloat * v) { tunisGL.tunisTexCoord4fv(v); }
TUNIS_FORCE_INLINE void  glTexCoord4hNV(GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q) { tunisGL.tunisTexCoord4hNV(s, t, r, q); }
TUNIS_FORCE_INLINE void  glTexCoord4hvNV(const GLhalfNV * v) { tunisGL.tunisTexCoord4hvNV(v); }
TUNIS_FORCE_INLINE void  glTexCoord4i(GLint s, GLint t, GLint r, GLint q) { tunisGL.tunisTexCoord4i(s, t, r, q); }
TUNIS_FORCE_INLINE void  glTexCoord4iv(const GLint * v) { tunisGL.tunisTexCoord4iv(v); }
TUNIS_FORCE_INLINE void  glTexCoord4s(GLshort s, GLshort t, GLshort r, GLshort q) { tunisGL.tunisTexCoord4s(s, t, r, q); }
TUNIS_FORCE_INLINE void  glTexCoord4sv(const GLshort * v) { tunisGL.tunisTexCoord4sv(v); }
TUNIS_FORCE_INLINE void  glTexCoord4xOES(GLfixed s, GLfixed t, GLfixed r, GLfixed q) { tunisGL.tunisTexCoord4xOES(s, t, r, q); }
TUNIS_FORCE_INLINE void  glTexCoord4xvOES(const GLfixed * coords) { tunisGL.tunisTexCoord4xvOES(coords); }
TUNIS_FORCE_INLINE void  glTexCoordFormatNV(GLint size, GLenum type, GLsizei stride) { tunisGL.tunisTexCoordFormatNV(size, type, stride); }
TUNIS_FORCE_INLINE void  glTexCoordP1ui(GLenum type, GLuint coords) { tunisGL.tunisTexCoordP1ui(type, coords); }
TUNIS_FORCE_INLINE void  glTexCoordP1uiv(GLenum type, const GLuint * coords) { tunisGL.tunisTexCoordP1uiv(type, coords); }
TUNIS_FORCE_INLINE void  glTexCoordP2ui(GLenum type, GLuint coords) { tunisGL.tunisTexCoordP2ui(type, coords); }
TUNIS_FORCE_INLINE void  glTexCoordP2uiv(GLenum type, const GLuint * coords) { tunisGL.tunisTexCoordP2uiv(type, coords); }
TUNIS_FORCE_INLINE void  glTexCoordP3ui(GLenum type, GLuint coords) { tunisGL.tunisTexCoordP3ui(type, coords); }
TUNIS_FORCE_INLINE void  glTexCoordP3uiv(GLenum type, const GLuint * coords) { tunisGL.tunisTexCoordP3uiv(type, coords); }
TUNIS_FORCE_INLINE void  glTexCoordP4ui(GLenum type, GLuint coords) { tunisGL.tunisTexCoordP4ui(type, coords); }
TUNIS_FORCE_INLINE void  glTexCoordP4uiv(GLenum type, const GLuint * coords) { tunisGL.tunisTexCoordP4uiv(type, coords); }
TUNIS_FORCE_INLINE void  glTexCoordPointer(GLint size, GLenum type, GLsizei stride, const void * pointer) { tunisGL.tunisTexCoordPointer(size, type, stride, pointer); }
TUNIS_FORCE_INLINE void  glTexCoordPointerEXT(GLint size, GLenum type, GLsizei stride, GLsizei count, const void * pointer) { tunisGL.tunisTexCoordPointerEXT(size, type, stride, count, pointer); }
TUNIS_FORCE_INLINE void  glTexCoordPointerListIBM(GLint size, GLenum type, GLint stride, const void ** pointer, GLint ptrstride) { tunisGL.tunisTexCoordPointerListIBM(size, type, stride, pointer, ptrstride); }
TUNIS_FORCE_INLINE void  glTexCoordPointervINTEL(GLint size, GLenum type, const void ** pointer) { tunisGL.tunisTexCoordPointervINTEL(size, type, pointer); }
TUNIS_FORCE_INLINE void  glTexEnvf(GLenum target, GLenum pname, GLfloat param) { tunisGL.tunisTexEnvf(target, pname, param); }
TUNIS_FORCE_INLINE void  glTexEnvfv(GLenum target, GLenum pname, const GLfloat * params) { tunisGL.tunisTexEnvfv(target, pname, params); }
TUNIS_FORCE_INLINE void  glTexEnvi(GLenum target, GLenum pname, GLint param) { tunisGL.tunisTexEnvi(target, pname, param); }
TUNIS_FORCE_INLINE void  glTexEnviv(GLenum target, GLenum pname, const GLint * params) { tunisGL.tunisTexEnviv(target, pname, params); }
TUNIS_FORCE_INLINE void  glTexEnvx(GLenum target, GLenum pname, GLfixed param) { tunisGL.tunisTexEnvx(target, pname, param); }
TUNIS_FORCE_INLINE void  glTexEnvxOES(GLenum target, GLenum pname, GLfixed param) { tunisGL.tunisTexEnvxOES(target, pname, param); }
TUNIS_FORCE_INLINE void  glTexEnvxv(GLenum target, GLenum pname, const GLfixed * params) { tunisGL.tunisTexEnvxv(target, pname, params); }
TUNIS_FORCE_INLINE void  glTexEnvxvOES(GLenum target, GLenum pname, const GLfixed * params) { tunisGL.tunisTexEnvxvOES(target, pname, params); }
TUNIS_FORCE_INLINE void  glTexFilterFuncSGIS(GLenum target, GLenum filter, GLsizei n, const GLfloat * weights) { tunisGL.tunisTexFilterFuncSGIS(target, filter, n, weights); }
TUNIS_FORCE_INLINE void  glTexGend(GLenum coord, GLenum pname, GLdouble param) { tunisGL.tunisTexGend(coord, pname, param); }
TUNIS_FORCE_INLINE void  glTexGendv(GLenum coord, GLenum pname, const GLdouble * params) { tunisGL.tunisTexGendv(coord, pname, params); }
TUNIS_FORCE_INLINE void  glTexGenf(GLenum coord, GLenum pname, GLfloat param) { tunisGL.tunisTexGenf(coord, pname, param); }
TUNIS_FORCE_INLINE void  glTexGenfOES(GLenum coord, GLenum pname, GLfloat param) { tunisGL.tunisTexGenfOES(coord, pname, param); }
TUNIS_FORCE_INLINE void  glTexGenfv(GLenum coord, GLenum pname, const GLfloat * params) { tunisGL.tunisTexGenfv(coord, pname, params); }
TUNIS_FORCE_INLINE void  glTexGenfvOES(GLenum coord, GLenum pname, const GLfloat * params) { tunisGL.tunisTexGenfvOES(coord, pname, params); }
TUNIS_FORCE_INLINE void  glTexGeni(GLenum coord, GLenum pname, GLint param) { tunisGL.tunisTexGeni(coord, pname, param); }
TUNIS_FORCE_INLINE void  glTexGeniOES(GLenum coord, GLenum pname, GLint param) { tunisGL.tunisTexGeniOES(coord, pname, param); }
TUNIS_FORCE_INLINE void  glTexGeniv(GLenum coord, GLenum pname, const GLint * params) { tunisGL.tunisTexGeniv(coord, pname, params); }
TUNIS_FORCE_INLINE void  glTexGenivOES(GLenum coord, GLenum pname, const GLint * params) { tunisGL.tunisTexGenivOES(coord, pname, params); }
TUNIS_FORCE_INLINE void  glTexGenxOES(GLenum coord, GLenum pname, GLfixed param) { tunisGL.tunisTexGenxOES(coord, pname, param); }
TUNIS_FORCE_INLINE void  glTexGenxvOES(GLenum coord, GLenum pname, const GLfixed * params) { tunisGL.tunisTexGenxvOES(coord, pname, params); }
TUNIS_FORCE_INLINE void  glTexImage1D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void * pixels) { tunisGL.tunisTexImage1D(target, level, internalformat, width, border, format, type, pixels); }
TUNIS_FORCE_INLINE void  glTexImage2D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void * pixels) { tunisGL.tunisTexImage2D(target, level, internalformat, width, height, border, format, type, pixels); }
TUNIS_FORCE_INLINE void  glTexImage2DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations) { tunisGL.tunisTexImage2DMultisample(target, samples, internalformat, width, height, fixedsamplelocations); }
TUNIS_FORCE_INLINE void  glTexImage2DMultisampleCoverageNV(GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations) { tunisGL.tunisTexImage2DMultisampleCoverageNV(target, coverageSamples, colorSamples, internalFormat, width, height, fixedSampleLocations); }
TUNIS_FORCE_INLINE void  glTexImage3D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void * pixels) { tunisGL.tunisTexImage3D(target, level, internalformat, width, height, depth, border, format, type, pixels); }
TUNIS_FORCE_INLINE void  glTexImage3DEXT(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void * pixels) { tunisGL.tunisTexImage3DEXT(target, level, internalformat, width, height, depth, border, format, type, pixels); }
TUNIS_FORCE_INLINE void  glTexImage3DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations) { tunisGL.tunisTexImage3DMultisample(target, samples, internalformat, width, height, depth, fixedsamplelocations); }
TUNIS_FORCE_INLINE void  glTexImage3DMultisampleCoverageNV(GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations) { tunisGL.tunisTexImage3DMultisampleCoverageNV(target, coverageSamples, colorSamples, internalFormat, width, height, depth, fixedSampleLocations); }
TUNIS_FORCE_INLINE void  glTexImage3DOES(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void * pixels) { tunisGL.tunisTexImage3DOES(target, level, internalformat, width, height, depth, border, format, type, pixels); }
TUNIS_FORCE_INLINE void  glTexImage4DSGIS(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLint border, GLenum format, GLenum type, const void * pixels) { tunisGL.tunisTexImage4DSGIS(target, level, internalformat, width, height, depth, size4d, border, format, type, pixels); }
TUNIS_FORCE_INLINE void  glTexPageCommitmentARB(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit) { tunisGL.tunisTexPageCommitmentARB(target, level, xoffset, yoffset, zoffset, width, height, depth, commit); }
TUNIS_FORCE_INLINE void  glTexPageCommitmentEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit) { tunisGL.tunisTexPageCommitmentEXT(target, level, xoffset, yoffset, zoffset, width, height, depth, commit); }
TUNIS_FORCE_INLINE void  glTexParameterIiv(GLenum target, GLenum pname, const GLint * params) { tunisGL.tunisTexParameterIiv(target, pname, params); }
TUNIS_FORCE_INLINE void  glTexParameterIivEXT(GLenum target, GLenum pname, const GLint * params) { tunisGL.tunisTexParameterIivEXT(target, pname, params); }
TUNIS_FORCE_INLINE void  glTexParameterIivOES(GLenum target, GLenum pname, const GLint * params) { tunisGL.tunisTexParameterIivOES(target, pname, params); }
TUNIS_FORCE_INLINE void  glTexParameterIuiv(GLenum target, GLenum pname, const GLuint * params) { tunisGL.tunisTexParameterIuiv(target, pname, params); }
TUNIS_FORCE_INLINE void  glTexParameterIuivEXT(GLenum target, GLenum pname, const GLuint * params) { tunisGL.tunisTexParameterIuivEXT(target, pname, params); }
TUNIS_FORCE_INLINE void  glTexParameterIuivOES(GLenum target, GLenum pname, const GLuint * params) { tunisGL.tunisTexParameterIuivOES(target, pname, params); }
TUNIS_FORCE_INLINE void  glTexParameterf(GLenum target, GLenum pname, GLfloat param) { tunisGL.tunisTexParameterf(target, pname, param); }
TUNIS_FORCE_INLINE void  glTexParameterfv(GLenum target, GLenum pname, const GLfloat * params) { tunisGL.tunisTexParameterfv(target, pname, params); }
TUNIS_FORCE_INLINE void  glTexParameteri(GLenum target, GLenum pname, GLint param) { tunisGL.tunisTexParameteri(target, pname, param); }
TUNIS_FORCE_INLINE void  glTexParameteriv(GLenum target, GLenum pname, const GLint * params) { tunisGL.tunisTexParameteriv(target, pname, params); }
TUNIS_FORCE_INLINE void  glTexParameterx(GLenum target, GLenum pname, GLfixed param) { tunisGL.tunisTexParameterx(target, pname, param); }
TUNIS_FORCE_INLINE void  glTexParameterxOES(GLenum target, GLenum pname, GLfixed param) { tunisGL.tunisTexParameterxOES(target, pname, param); }
TUNIS_FORCE_INLINE void  glTexParameterxv(GLenum target, GLenum pname, const GLfixed * params) { tunisGL.tunisTexParameterxv(target, pname, params); }
TUNIS_FORCE_INLINE void  glTexParameterxvOES(GLenum target, GLenum pname, const GLfixed * params) { tunisGL.tunisTexParameterxvOES(target, pname, params); }
TUNIS_FORCE_INLINE void  glTexRenderbufferNV(GLenum target, GLuint renderbuffer) { tunisGL.tunisTexRenderbufferNV(target, renderbuffer); }
TUNIS_FORCE_INLINE void  glTexStorage1D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width) { tunisGL.tunisTexStorage1D(target, levels, internalformat, width); }
TUNIS_FORCE_INLINE void  glTexStorage1DEXT(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width) { tunisGL.tunisTexStorage1DEXT(target, levels, internalformat, width); }
TUNIS_FORCE_INLINE void  glTexStorage2D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height) { tunisGL.tunisTexStorage2D(target, levels, internalformat, width, height); }
TUNIS_FORCE_INLINE void  glTexStorage2DEXT(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height) { tunisGL.tunisTexStorage2DEXT(target, levels, internalformat, width, height); }
TUNIS_FORCE_INLINE void  glTexStorage2DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations) { tunisGL.tunisTexStorage2DMultisample(target, samples, internalformat, width, height, fixedsamplelocations); }
TUNIS_FORCE_INLINE void  glTexStorage3D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth) { tunisGL.tunisTexStorage3D(target, levels, internalformat, width, height, depth); }
TUNIS_FORCE_INLINE void  glTexStorage3DEXT(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth) { tunisGL.tunisTexStorage3DEXT(target, levels, internalformat, width, height, depth); }
TUNIS_FORCE_INLINE void  glTexStorage3DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations) { tunisGL.tunisTexStorage3DMultisample(target, samples, internalformat, width, height, depth, fixedsamplelocations); }
TUNIS_FORCE_INLINE void  glTexStorage3DMultisampleOES(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations) { tunisGL.tunisTexStorage3DMultisampleOES(target, samples, internalformat, width, height, depth, fixedsamplelocations); }
TUNIS_FORCE_INLINE void  glTexStorageMem1DEXT(GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLuint memory, GLuint64 offset) { tunisGL.tunisTexStorageMem1DEXT(target, levels, internalFormat, width, memory, offset); }
TUNIS_FORCE_INLINE void  glTexStorageMem2DEXT(GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLuint memory, GLuint64 offset) { tunisGL.tunisTexStorageMem2DEXT(target, levels, internalFormat, width, height, memory, offset); }
TUNIS_FORCE_INLINE void  glTexStorageMem2DMultisampleEXT(GLenum target, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset) { tunisGL.tunisTexStorageMem2DMultisampleEXT(target, samples, internalFormat, width, height, fixedSampleLocations, memory, offset); }
TUNIS_FORCE_INLINE void  glTexStorageMem3DEXT(GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLuint memory, GLuint64 offset) { tunisGL.tunisTexStorageMem3DEXT(target, levels, internalFormat, width, height, depth, memory, offset); }
TUNIS_FORCE_INLINE void  glTexStorageMem3DMultisampleEXT(GLenum target, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset) { tunisGL.tunisTexStorageMem3DMultisampleEXT(target, samples, internalFormat, width, height, depth, fixedSampleLocations, memory, offset); }
TUNIS_FORCE_INLINE void  glTexStorageSparseAMD(GLenum target, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLsizei layers, GLbitfield flags) { tunisGL.tunisTexStorageSparseAMD(target, internalFormat, width, height, depth, layers, flags); }
TUNIS_FORCE_INLINE void  glTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void * pixels) { tunisGL.tunisTexSubImage1D(target, level, xoffset, width, format, type, pixels); }
TUNIS_FORCE_INLINE void  glTexSubImage1DEXT(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void * pixels) { tunisGL.tunisTexSubImage1DEXT(target, level, xoffset, width, format, type, pixels); }
TUNIS_FORCE_INLINE void  glTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * pixels) { tunisGL.tunisTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels); }
TUNIS_FORCE_INLINE void  glTexSubImage2DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * pixels) { tunisGL.tunisTexSubImage2DEXT(target, level, xoffset, yoffset, width, height, format, type, pixels); }
TUNIS_FORCE_INLINE void  glTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void * pixels) { tunisGL.tunisTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels); }
TUNIS_FORCE_INLINE void  glTexSubImage3DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void * pixels) { tunisGL.tunisTexSubImage3DEXT(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels); }
TUNIS_FORCE_INLINE void  glTexSubImage3DOES(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void * pixels) { tunisGL.tunisTexSubImage3DOES(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels); }
TUNIS_FORCE_INLINE void  glTexSubImage4DSGIS(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint woffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLenum format, GLenum type, const void * pixels) { tunisGL.tunisTexSubImage4DSGIS(target, level, xoffset, yoffset, zoffset, woffset, width, height, depth, size4d, format, type, pixels); }
TUNIS_FORCE_INLINE void  glTextureBarrier(void) { tunisGL.tunisTextureBarrier(); }
TUNIS_FORCE_INLINE void  glTextureBarrierNV(void) { tunisGL.tunisTextureBarrierNV(); }
TUNIS_FORCE_INLINE void  glTextureBuffer(GLuint texture, GLenum internalformat, GLuint buffer) { tunisGL.tunisTextureBuffer(texture, internalformat, buffer); }
TUNIS_FORCE_INLINE void  glTextureBufferEXT(GLuint texture, GLenum target, GLenum internalformat, GLuint buffer) { tunisGL.tunisTextureBufferEXT(texture, target, internalformat, buffer); }
TUNIS_FORCE_INLINE void  glTextureBufferRange(GLuint texture, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size) { tunisGL.tunisTextureBufferRange(texture, internalformat, buffer, offset, size); }
TUNIS_FORCE_INLINE void  glTextureBufferRangeEXT(GLuint texture, GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size) { tunisGL.tunisTextureBufferRangeEXT(texture, target, internalformat, buffer, offset, size); }
TUNIS_FORCE_INLINE void  glTextureColorMaskSGIS(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha) { tunisGL.tunisTextureColorMaskSGIS(red, green, blue, alpha); }
TUNIS_FORCE_INLINE void  glTextureFoveationParametersQCOM(GLuint texture, GLuint layer, GLuint focalPoint, GLfloat focalX, GLfloat focalY, GLfloat gainX, GLfloat gainY, GLfloat foveaArea) { tunisGL.tunisTextureFoveationParametersQCOM(texture, layer, focalPoint, focalX, focalY, gainX, gainY, foveaArea); }
TUNIS_FORCE_INLINE void  glTextureImage1DEXT(GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void * pixels) { tunisGL.tunisTextureImage1DEXT(texture, target, level, internalformat, width, border, format, type, pixels); }
TUNIS_FORCE_INLINE void  glTextureImage2DEXT(GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void * pixels) { tunisGL.tunisTextureImage2DEXT(texture, target, level, internalformat, width, height, border, format, type, pixels); }
TUNIS_FORCE_INLINE void  glTextureImage2DMultisampleCoverageNV(GLuint texture, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations) { tunisGL.tunisTextureImage2DMultisampleCoverageNV(texture, target, coverageSamples, colorSamples, internalFormat, width, height, fixedSampleLocations); }
TUNIS_FORCE_INLINE void  glTextureImage2DMultisampleNV(GLuint texture, GLenum target, GLsizei samples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations) { tunisGL.tunisTextureImage2DMultisampleNV(texture, target, samples, internalFormat, width, height, fixedSampleLocations); }
TUNIS_FORCE_INLINE void  glTextureImage3DEXT(GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void * pixels) { tunisGL.tunisTextureImage3DEXT(texture, target, level, internalformat, width, height, depth, border, format, type, pixels); }
TUNIS_FORCE_INLINE void  glTextureImage3DMultisampleCoverageNV(GLuint texture, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations) { tunisGL.tunisTextureImage3DMultisampleCoverageNV(texture, target, coverageSamples, colorSamples, internalFormat, width, height, depth, fixedSampleLocations); }
TUNIS_FORCE_INLINE void  glTextureImage3DMultisampleNV(GLuint texture, GLenum target, GLsizei samples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations) { tunisGL.tunisTextureImage3DMultisampleNV(texture, target, samples, internalFormat, width, height, depth, fixedSampleLocations); }
TUNIS_FORCE_INLINE void  glTextureLightEXT(GLenum pname) { tunisGL.tunisTextureLightEXT(pname); }
TUNIS_FORCE_INLINE void  glTextureMaterialEXT(GLenum face, GLenum mode) { tunisGL.tunisTextureMaterialEXT(face, mode); }
TUNIS_FORCE_INLINE void  glTextureNormalEXT(GLenum mode) { tunisGL.tunisTextureNormalEXT(mode); }
TUNIS_FORCE_INLINE void  glTexturePageCommitmentEXT(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit) { tunisGL.tunisTexturePageCommitmentEXT(texture, level, xoffset, yoffset, zoffset, width, height, depth, commit); }
TUNIS_FORCE_INLINE void  glTextureParameterIiv(GLuint texture, GLenum pname, const GLint * params) { tunisGL.tunisTextureParameterIiv(texture, pname, params); }
TUNIS_FORCE_INLINE void  glTextureParameterIivEXT(GLuint texture, GLenum target, GLenum pname, const GLint * params) { tunisGL.tunisTextureParameterIivEXT(texture, target, pname, params); }
TUNIS_FORCE_INLINE void  glTextureParameterIuiv(GLuint texture, GLenum pname, const GLuint * params) { tunisGL.tunisTextureParameterIuiv(texture, pname, params); }
TUNIS_FORCE_INLINE void  glTextureParameterIuivEXT(GLuint texture, GLenum target, GLenum pname, const GLuint * params) { tunisGL.tunisTextureParameterIuivEXT(texture, target, pname, params); }
TUNIS_FORCE_INLINE void  glTextureParameterf(GLuint texture, GLenum pname, GLfloat param) { tunisGL.tunisTextureParameterf(texture, pname, param); }
TUNIS_FORCE_INLINE void  glTextureParameterfEXT(GLuint texture, GLenum target, GLenum pname, GLfloat param) { tunisGL.tunisTextureParameterfEXT(texture, target, pname, param); }
TUNIS_FORCE_INLINE void  glTextureParameterfv(GLuint texture, GLenum pname, const GLfloat * param) { tunisGL.tunisTextureParameterfv(texture, pname, param); }
TUNIS_FORCE_INLINE void  glTextureParameterfvEXT(GLuint texture, GLenum target, GLenum pname, const GLfloat * params) { tunisGL.tunisTextureParameterfvEXT(texture, target, pname, params); }
TUNIS_FORCE_INLINE void  glTextureParameteri(GLuint texture, GLenum pname, GLint param) { tunisGL.tunisTextureParameteri(texture, pname, param); }
TUNIS_FORCE_INLINE void  glTextureParameteriEXT(GLuint texture, GLenum target, GLenum pname, GLint param) { tunisGL.tunisTextureParameteriEXT(texture, target, pname, param); }
TUNIS_FORCE_INLINE void  glTextureParameteriv(GLuint texture, GLenum pname, const GLint * param) { tunisGL.tunisTextureParameteriv(texture, pname, param); }
TUNIS_FORCE_INLINE void  glTextureParameterivEXT(GLuint texture, GLenum target, GLenum pname, const GLint * params) { tunisGL.tunisTextureParameterivEXT(texture, target, pname, params); }
TUNIS_FORCE_INLINE void  glTextureRangeAPPLE(GLenum target, GLsizei length, const void * pointer) { tunisGL.tunisTextureRangeAPPLE(target, length, pointer); }
TUNIS_FORCE_INLINE void  glTextureRenderbufferEXT(GLuint texture, GLenum target, GLuint renderbuffer) { tunisGL.tunisTextureRenderbufferEXT(texture, target, renderbuffer); }
TUNIS_FORCE_INLINE void  glTextureStorage1D(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width) { tunisGL.tunisTextureStorage1D(texture, levels, internalformat, width); }
TUNIS_FORCE_INLINE void  glTextureStorage1DEXT(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width) { tunisGL.tunisTextureStorage1DEXT(texture, target, levels, internalformat, width); }
TUNIS_FORCE_INLINE void  glTextureStorage2D(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height) { tunisGL.tunisTextureStorage2D(texture, levels, internalformat, width, height); }
TUNIS_FORCE_INLINE void  glTextureStorage2DEXT(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height) { tunisGL.tunisTextureStorage2DEXT(texture, target, levels, internalformat, width, height); }
TUNIS_FORCE_INLINE void  glTextureStorage2DMultisample(GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations) { tunisGL.tunisTextureStorage2DMultisample(texture, samples, internalformat, width, height, fixedsamplelocations); }
TUNIS_FORCE_INLINE void  glTextureStorage2DMultisampleEXT(GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations) { tunisGL.tunisTextureStorage2DMultisampleEXT(texture, target, samples, internalformat, width, height, fixedsamplelocations); }
TUNIS_FORCE_INLINE void  glTextureStorage3D(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth) { tunisGL.tunisTextureStorage3D(texture, levels, internalformat, width, height, depth); }
TUNIS_FORCE_INLINE void  glTextureStorage3DEXT(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth) { tunisGL.tunisTextureStorage3DEXT(texture, target, levels, internalformat, width, height, depth); }
TUNIS_FORCE_INLINE void  glTextureStorage3DMultisample(GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations) { tunisGL.tunisTextureStorage3DMultisample(texture, samples, internalformat, width, height, depth, fixedsamplelocations); }
TUNIS_FORCE_INLINE void  glTextureStorage3DMultisampleEXT(GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations) { tunisGL.tunisTextureStorage3DMultisampleEXT(texture, target, samples, internalformat, width, height, depth, fixedsamplelocations); }
TUNIS_FORCE_INLINE void  glTextureStorageMem1DEXT(GLuint texture, GLsizei levels, GLenum internalFormat, GLsizei width, GLuint memory, GLuint64 offset) { tunisGL.tunisTextureStorageMem1DEXT(texture, levels, internalFormat, width, memory, offset); }
TUNIS_FORCE_INLINE void  glTextureStorageMem2DEXT(GLuint texture, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLuint memory, GLuint64 offset) { tunisGL.tunisTextureStorageMem2DEXT(texture, levels, internalFormat, width, height, memory, offset); }
TUNIS_FORCE_INLINE void  glTextureStorageMem2DMultisampleEXT(GLuint texture, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset) { tunisGL.tunisTextureStorageMem2DMultisampleEXT(texture, samples, internalFormat, width, height, fixedSampleLocations, memory, offset); }
TUNIS_FORCE_INLINE void  glTextureStorageMem3DEXT(GLuint texture, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLuint memory, GLuint64 offset) { tunisGL.tunisTextureStorageMem3DEXT(texture, levels, internalFormat, width, height, depth, memory, offset); }
TUNIS_FORCE_INLINE void  glTextureStorageMem3DMultisampleEXT(GLuint texture, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset) { tunisGL.tunisTextureStorageMem3DMultisampleEXT(texture, samples, internalFormat, width, height, depth, fixedSampleLocations, memory, offset); }
TUNIS_FORCE_INLINE void  glTextureStorageSparseAMD(GLuint texture, GLenum target, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLsizei layers, GLbitfield flags) { tunisGL.tunisTextureStorageSparseAMD(texture, target, internalFormat, width, height, depth, layers, flags); }
TUNIS_FORCE_INLINE void  glTextureSubImage1D(GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void * pixels) { tunisGL.tunisTextureSubImage1D(texture, level, xoffset, width, format, type, pixels); }
TUNIS_FORCE_INLINE void  glTextureSubImage1DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void * pixels) { tunisGL.tunisTextureSubImage1DEXT(texture, target, level, xoffset, width, format, type, pixels); }
TUNIS_FORCE_INLINE void  glTextureSubImage2D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * pixels) { tunisGL.tunisTextureSubImage2D(texture, level, xoffset, yoffset, width, height, format, type, pixels); }
TUNIS_FORCE_INLINE void  glTextureSubImage2DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * pixels) { tunisGL.tunisTextureSubImage2DEXT(texture, target, level, xoffset, yoffset, width, height, format, type, pixels); }
TUNIS_FORCE_INLINE void  glTextureSubImage3D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void * pixels) { tunisGL.tunisTextureSubImage3D(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels); }
TUNIS_FORCE_INLINE void  glTextureSubImage3DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void * pixels) { tunisGL.tunisTextureSubImage3DEXT(texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels); }
TUNIS_FORCE_INLINE void  glTextureView(GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers) { tunisGL.tunisTextureView(texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers); }
TUNIS_FORCE_INLINE void  glTextureViewEXT(GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers) { tunisGL.tunisTextureViewEXT(texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers); }
TUNIS_FORCE_INLINE void  glTextureViewOES(GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers) { tunisGL.tunisTextureViewOES(texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers); }
TUNIS_FORCE_INLINE void  glTrackMatrixNV(GLenum target, GLuint address, GLenum matrix, GLenum transform) { tunisGL.tunisTrackMatrixNV(target, address, matrix, transform); }
TUNIS_FORCE_INLINE void  glTransformFeedbackAttribsNV(GLsizei count, const GLint * attribs, GLenum bufferMode) { tunisGL.tunisTransformFeedbackAttribsNV(count, attribs, bufferMode); }
TUNIS_FORCE_INLINE void  glTransformFeedbackBufferBase(GLuint xfb, GLuint index, GLuint buffer) { tunisGL.tunisTransformFeedbackBufferBase(xfb, index, buffer); }
TUNIS_FORCE_INLINE void  glTransformFeedbackBufferRange(GLuint xfb, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size) { tunisGL.tunisTransformFeedbackBufferRange(xfb, index, buffer, offset, size); }
TUNIS_FORCE_INLINE void  glTransformFeedbackStreamAttribsNV(GLsizei count, const GLint * attribs, GLsizei nbuffers, const GLint * bufstreams, GLenum bufferMode) { tunisGL.tunisTransformFeedbackStreamAttribsNV(count, attribs, nbuffers, bufstreams, bufferMode); }
TUNIS_FORCE_INLINE void  glTransformFeedbackVaryings(GLuint program, GLsizei count, const GLchar *const* varyings, GLenum bufferMode) { tunisGL.tunisTransformFeedbackVaryings(program, count, varyings, bufferMode); }
TUNIS_FORCE_INLINE void  glTransformFeedbackVaryingsEXT(GLuint program, GLsizei count, const GLchar *const* varyings, GLenum bufferMode) { tunisGL.tunisTransformFeedbackVaryingsEXT(program, count, varyings, bufferMode); }
TUNIS_FORCE_INLINE void  glTransformFeedbackVaryingsNV(GLuint program, GLsizei count, const GLint * locations, GLenum bufferMode) { tunisGL.tunisTransformFeedbackVaryingsNV(program, count, locations, bufferMode); }
TUNIS_FORCE_INLINE void  glTransformPathNV(GLuint resultPath, GLuint srcPath, GLenum transformType, const GLfloat * transformValues) { tunisGL.tunisTransformPathNV(resultPath, srcPath, transformType, transformValues); }
TUNIS_FORCE_INLINE void  glTranslated(GLdouble x, GLdouble y, GLdouble z) { tunisGL.tunisTranslated(x, y, z); }
TUNIS_FORCE_INLINE void  glTranslatef(GLfloat x, GLfloat y, GLfloat z) { tunisGL.tunisTranslatef(x, y, z); }
TUNIS_FORCE_INLINE void  glTranslatex(GLfixed x, GLfixed y, GLfixed z) { tunisGL.tunisTranslatex(x, y, z); }
TUNIS_FORCE_INLINE void  glTranslatexOES(GLfixed x, GLfixed y, GLfixed z) { tunisGL.tunisTranslatexOES(x, y, z); }
TUNIS_FORCE_INLINE void  glUniform1d(GLint location, GLdouble x) { tunisGL.tunisUniform1d(location, x); }
TUNIS_FORCE_INLINE void  glUniform1dv(GLint location, GLsizei count, const GLdouble * value) { tunisGL.tunisUniform1dv(location, count, value); }
TUNIS_FORCE_INLINE void  glUniform1f(GLint location, GLfloat v0) { tunisGL.tunisUniform1f(location, v0); }
TUNIS_FORCE_INLINE void  glUniform1fARB(GLint location, GLfloat v0) { tunisGL.tunisUniform1fARB(location, v0); }
TUNIS_FORCE_INLINE void  glUniform1fv(GLint location, GLsizei count, const GLfloat * value) { tunisGL.tunisUniform1fv(location, count, value); }
TUNIS_FORCE_INLINE void  glUniform1fvARB(GLint location, GLsizei count, const GLfloat * value) { tunisGL.tunisUniform1fvARB(location, count, value); }
TUNIS_FORCE_INLINE void  glUniform1i(GLint location, GLint v0) { tunisGL.tunisUniform1i(location, v0); }
TUNIS_FORCE_INLINE void  glUniform1i64ARB(GLint location, GLint64 x) { tunisGL.tunisUniform1i64ARB(location, x); }
TUNIS_FORCE_INLINE void  glUniform1i64NV(GLint location, GLint64EXT x) { tunisGL.tunisUniform1i64NV(location, x); }
TUNIS_FORCE_INLINE void  glUniform1i64vARB(GLint location, GLsizei count, const GLint64 * value) { tunisGL.tunisUniform1i64vARB(location, count, value); }
TUNIS_FORCE_INLINE void  glUniform1i64vNV(GLint location, GLsizei count, const GLint64EXT * value) { tunisGL.tunisUniform1i64vNV(location, count, value); }
TUNIS_FORCE_INLINE void  glUniform1iARB(GLint location, GLint v0) { tunisGL.tunisUniform1iARB(location, v0); }
TUNIS_FORCE_INLINE void  glUniform1iv(GLint location, GLsizei count, const GLint * value) { tunisGL.tunisUniform1iv(location, count, value); }
TUNIS_FORCE_INLINE void  glUniform1ivARB(GLint location, GLsizei count, const GLint * value) { tunisGL.tunisUniform1ivARB(location, count, value); }
TUNIS_FORCE_INLINE void  glUniform1ui(GLint location, GLuint v0) { tunisGL.tunisUniform1ui(location, v0); }
TUNIS_FORCE_INLINE void  glUniform1ui64ARB(GLint location, GLuint64 x) { tunisGL.tunisUniform1ui64ARB(location, x); }
TUNIS_FORCE_INLINE void  glUniform1ui64NV(GLint location, GLuint64EXT x) { tunisGL.tunisUniform1ui64NV(location, x); }
TUNIS_FORCE_INLINE void  glUniform1ui64vARB(GLint location, GLsizei count, const GLuint64 * value) { tunisGL.tunisUniform1ui64vARB(location, count, value); }
TUNIS_FORCE_INLINE void  glUniform1ui64vNV(GLint location, GLsizei count, const GLuint64EXT * value) { tunisGL.tunisUniform1ui64vNV(location, count, value); }
TUNIS_FORCE_INLINE void  glUniform1uiEXT(GLint location, GLuint v0) { tunisGL.tunisUniform1uiEXT(location, v0); }
TUNIS_FORCE_INLINE void  glUniform1uiv(GLint location, GLsizei count, const GLuint * value) { tunisGL.tunisUniform1uiv(location, count, value); }
TUNIS_FORCE_INLINE void  glUniform1uivEXT(GLint location, GLsizei count, const GLuint * value) { tunisGL.tunisUniform1uivEXT(location, count, value); }
TUNIS_FORCE_INLINE void  glUniform2d(GLint location, GLdouble x, GLdouble y) { tunisGL.tunisUniform2d(location, x, y); }
TUNIS_FORCE_INLINE void  glUniform2dv(GLint location, GLsizei count, const GLdouble * value) { tunisGL.tunisUniform2dv(location, count, value); }
TUNIS_FORCE_INLINE void  glUniform2f(GLint location, GLfloat v0, GLfloat v1) { tunisGL.tunisUniform2f(location, v0, v1); }
TUNIS_FORCE_INLINE void  glUniform2fARB(GLint location, GLfloat v0, GLfloat v1) { tunisGL.tunisUniform2fARB(location, v0, v1); }
TUNIS_FORCE_INLINE void  glUniform2fv(GLint location, GLsizei count, const GLfloat * value) { tunisGL.tunisUniform2fv(location, count, value); }
TUNIS_FORCE_INLINE void  glUniform2fvARB(GLint location, GLsizei count, const GLfloat * value) { tunisGL.tunisUniform2fvARB(location, count, value); }
TUNIS_FORCE_INLINE void  glUniform2i(GLint location, GLint v0, GLint v1) { tunisGL.tunisUniform2i(location, v0, v1); }
TUNIS_FORCE_INLINE void  glUniform2i64ARB(GLint location, GLint64 x, GLint64 y) { tunisGL.tunisUniform2i64ARB(location, x, y); }
TUNIS_FORCE_INLINE void  glUniform2i64NV(GLint location, GLint64EXT x, GLint64EXT y) { tunisGL.tunisUniform2i64NV(location, x, y); }
TUNIS_FORCE_INLINE void  glUniform2i64vARB(GLint location, GLsizei count, const GLint64 * value) { tunisGL.tunisUniform2i64vARB(location, count, value); }
TUNIS_FORCE_INLINE void  glUniform2i64vNV(GLint location, GLsizei count, const GLint64EXT * value) { tunisGL.tunisUniform2i64vNV(location, count, value); }
TUNIS_FORCE_INLINE void  glUniform2iARB(GLint location, GLint v0, GLint v1) { tunisGL.tunisUniform2iARB(location, v0, v1); }
TUNIS_FORCE_INLINE void  glUniform2iv(GLint location, GLsizei count, const GLint * value) { tunisGL.tunisUniform2iv(location, count, value); }
TUNIS_FORCE_INLINE void  glUniform2ivARB(GLint location, GLsizei count, const GLint * value) { tunisGL.tunisUniform2ivARB(location, count, value); }
TUNIS_FORCE_INLINE void  glUniform2ui(GLint location, GLuint v0, GLuint v1) { tunisGL.tunisUniform2ui(location, v0, v1); }
TUNIS_FORCE_INLINE void  glUniform2ui64ARB(GLint location, GLuint64 x, GLuint64 y) { tunisGL.tunisUniform2ui64ARB(location, x, y); }
TUNIS_FORCE_INLINE void  glUniform2ui64NV(GLint location, GLuint64EXT x, GLuint64EXT y) { tunisGL.tunisUniform2ui64NV(location, x, y); }
TUNIS_FORCE_INLINE void  glUniform2ui64vARB(GLint location, GLsizei count, const GLuint64 * value) { tunisGL.tunisUniform2ui64vARB(location, count, value); }
TUNIS_FORCE_INLINE void  glUniform2ui64vNV(GLint location, GLsizei count, const GLuint64EXT * value) { tunisGL.tunisUniform2ui64vNV(location, count, value); }
TUNIS_FORCE_INLINE void  glUniform2uiEXT(GLint location, GLuint v0, GLuint v1) { tunisGL.tunisUniform2uiEXT(location, v0, v1); }
TUNIS_FORCE_INLINE void  glUniform2uiv(GLint location, GLsizei count, const GLuint * value) { tunisGL.tunisUniform2uiv(location, count, value); }
TUNIS_FORCE_INLINE void  glUniform2uivEXT(GLint location, GLsizei count, const GLuint * value) { tunisGL.tunisUniform2uivEXT(location, count, value); }
TUNIS_FORCE_INLINE void  glUniform3d(GLint location, GLdouble x, GLdouble y, GLdouble z) { tunisGL.tunisUniform3d(location, x, y, z); }
TUNIS_FORCE_INLINE void  glUniform3dv(GLint location, GLsizei count, const GLdouble * value) { tunisGL.tunisUniform3dv(location, count, value); }
TUNIS_FORCE_INLINE void  glUniform3f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2) { tunisGL.tunisUniform3f(location, v0, v1, v2); }
TUNIS_FORCE_INLINE void  glUniform3fARB(GLint location, GLfloat v0, GLfloat v1, GLfloat v2) { tunisGL.tunisUniform3fARB(location, v0, v1, v2); }
TUNIS_FORCE_INLINE void  glUniform3fv(GLint location, GLsizei count, const GLfloat * value) { tunisGL.tunisUniform3fv(location, count, value); }
TUNIS_FORCE_INLINE void  glUniform3fvARB(GLint location, GLsizei count, const GLfloat * value) { tunisGL.tunisUniform3fvARB(location, count, value); }
TUNIS_FORCE_INLINE void  glUniform3i(GLint location, GLint v0, GLint v1, GLint v2) { tunisGL.tunisUniform3i(location, v0, v1, v2); }
TUNIS_FORCE_INLINE void  glUniform3i64ARB(GLint location, GLint64 x, GLint64 y, GLint64 z) { tunisGL.tunisUniform3i64ARB(location, x, y, z); }
TUNIS_FORCE_INLINE void  glUniform3i64NV(GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z) { tunisGL.tunisUniform3i64NV(location, x, y, z); }
TUNIS_FORCE_INLINE void  glUniform3i64vARB(GLint location, GLsizei count, const GLint64 * value) { tunisGL.tunisUniform3i64vARB(location, count, value); }
TUNIS_FORCE_INLINE void  glUniform3i64vNV(GLint location, GLsizei count, const GLint64EXT * value) { tunisGL.tunisUniform3i64vNV(location, count, value); }
TUNIS_FORCE_INLINE void  glUniform3iARB(GLint location, GLint v0, GLint v1, GLint v2) { tunisGL.tunisUniform3iARB(location, v0, v1, v2); }
TUNIS_FORCE_INLINE void  glUniform3iv(GLint location, GLsizei count, const GLint * value) { tunisGL.tunisUniform3iv(location, count, value); }
TUNIS_FORCE_INLINE void  glUniform3ivARB(GLint location, GLsizei count, const GLint * value) { tunisGL.tunisUniform3ivARB(location, count, value); }
TUNIS_FORCE_INLINE void  glUniform3ui(GLint location, GLuint v0, GLuint v1, GLuint v2) { tunisGL.tunisUniform3ui(location, v0, v1, v2); }
TUNIS_FORCE_INLINE void  glUniform3ui64ARB(GLint location, GLuint64 x, GLuint64 y, GLuint64 z) { tunisGL.tunisUniform3ui64ARB(location, x, y, z); }
TUNIS_FORCE_INLINE void  glUniform3ui64NV(GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z) { tunisGL.tunisUniform3ui64NV(location, x, y, z); }
TUNIS_FORCE_INLINE void  glUniform3ui64vARB(GLint location, GLsizei count, const GLuint64 * value) { tunisGL.tunisUniform3ui64vARB(location, count, value); }
TUNIS_FORCE_INLINE void  glUniform3ui64vNV(GLint location, GLsizei count, const GLuint64EXT * value) { tunisGL.tunisUniform3ui64vNV(location, count, value); }
TUNIS_FORCE_INLINE void  glUniform3uiEXT(GLint location, GLuint v0, GLuint v1, GLuint v2) { tunisGL.tunisUniform3uiEXT(location, v0, v1, v2); }
TUNIS_FORCE_INLINE void  glUniform3uiv(GLint location, GLsizei count, const GLuint * value) { tunisGL.tunisUniform3uiv(location, count, value); }
TUNIS_FORCE_INLINE void  glUniform3uivEXT(GLint location, GLsizei count, const GLuint * value) { tunisGL.tunisUniform3uivEXT(location, count, value); }
TUNIS_FORCE_INLINE void  glUniform4d(GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w) { tunisGL.tunisUniform4d(location, x, y, z, w); }
TUNIS_FORCE_INLINE void  glUniform4dv(GLint location, GLsizei count, const GLdouble * value) { tunisGL.tunisUniform4dv(location, count, value); }
TUNIS_FORCE_INLINE void  glUniform4f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3) { tunisGL.tunisUniform4f(location, v0, v1, v2, v3); }
TUNIS_FORCE_INLINE void  glUniform4fARB(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3) { tunisGL.tunisUniform4fARB(location, v0, v1, v2, v3); }
TUNIS_FORCE_INLINE void  glUniform4fv(GLint location, GLsizei count, const GLfloat * value) { tunisGL.tunisUniform4fv(location, count, value); }
TUNIS_FORCE_INLINE void  glUniform4fvARB(GLint location, GLsizei count, const GLfloat * value) { tunisGL.tunisUniform4fvARB(location, count, value); }
TUNIS_FORCE_INLINE void  glUniform4i(GLint location, GLint v0, GLint v1, GLint v2, GLint v3) { tunisGL.tunisUniform4i(location, v0, v1, v2, v3); }
TUNIS_FORCE_INLINE void  glUniform4i64ARB(GLint location, GLint64 x, GLint64 y, GLint64 z, GLint64 w) { tunisGL.tunisUniform4i64ARB(location, x, y, z, w); }
TUNIS_FORCE_INLINE void  glUniform4i64NV(GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w) { tunisGL.tunisUniform4i64NV(location, x, y, z, w); }
TUNIS_FORCE_INLINE void  glUniform4i64vARB(GLint location, GLsizei count, const GLint64 * value) { tunisGL.tunisUniform4i64vARB(location, count, value); }
TUNIS_FORCE_INLINE void  glUniform4i64vNV(GLint location, GLsizei count, const GLint64EXT * value) { tunisGL.tunisUniform4i64vNV(location, count, value); }
TUNIS_FORCE_INLINE void  glUniform4iARB(GLint location, GLint v0, GLint v1, GLint v2, GLint v3) { tunisGL.tunisUniform4iARB(location, v0, v1, v2, v3); }
TUNIS_FORCE_INLINE void  glUniform4iv(GLint location, GLsizei count, const GLint * value) { tunisGL.tunisUniform4iv(location, count, value); }
TUNIS_FORCE_INLINE void  glUniform4ivARB(GLint location, GLsizei count, const GLint * value) { tunisGL.tunisUniform4ivARB(location, count, value); }
TUNIS_FORCE_INLINE void  glUniform4ui(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3) { tunisGL.tunisUniform4ui(location, v0, v1, v2, v3); }
TUNIS_FORCE_INLINE void  glUniform4ui64ARB(GLint location, GLuint64 x, GLuint64 y, GLuint64 z, GLuint64 w) { tunisGL.tunisUniform4ui64ARB(location, x, y, z, w); }
TUNIS_FORCE_INLINE void  glUniform4ui64NV(GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w) { tunisGL.tunisUniform4ui64NV(location, x, y, z, w); }
TUNIS_FORCE_INLINE void  glUniform4ui64vARB(GLint location, GLsizei count, const GLuint64 * value) { tunisGL.tunisUniform4ui64vARB(location, count, value); }
TUNIS_FORCE_INLINE void  glUniform4ui64vNV(GLint location, GLsizei count, const GLuint64EXT * value) { tunisGL.tunisUniform4ui64vNV(location, count, value); }
TUNIS_FORCE_INLINE void  glUniform4uiEXT(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3) { tunisGL.tunisUniform4uiEXT(location, v0, v1, v2, v3); }
TUNIS_FORCE_INLINE void  glUniform4uiv(GLint location, GLsizei count, const GLuint * value) { tunisGL.tunisUniform4uiv(location, count, value); }
TUNIS_FORCE_INLINE void  glUniform4uivEXT(GLint location, GLsizei count, const GLuint * value) { tunisGL.tunisUniform4uivEXT(location, count, value); }
TUNIS_FORCE_INLINE void  glUniformBlockBinding(GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding) { tunisGL.tunisUniformBlockBinding(program, uniformBlockIndex, uniformBlockBinding); }
TUNIS_FORCE_INLINE void  glUniformBufferEXT(GLuint program, GLint location, GLuint buffer) { tunisGL.tunisUniformBufferEXT(program, location, buffer); }
TUNIS_FORCE_INLINE void  glUniformHandleui64ARB(GLint location, GLuint64 value) { tunisGL.tunisUniformHandleui64ARB(location, value); }
TUNIS_FORCE_INLINE void  glUniformHandleui64IMG(GLint location, GLuint64 value) { tunisGL.tunisUniformHandleui64IMG(location, value); }
TUNIS_FORCE_INLINE void  glUniformHandleui64NV(GLint location, GLuint64 value) { tunisGL.tunisUniformHandleui64NV(location, value); }
TUNIS_FORCE_INLINE void  glUniformHandleui64vARB(GLint location, GLsizei count, const GLuint64 * value) { tunisGL.tunisUniformHandleui64vARB(location, count, value); }
TUNIS_FORCE_INLINE void  glUniformHandleui64vIMG(GLint location, GLsizei count, const GLuint64 * value) { tunisGL.tunisUniformHandleui64vIMG(location, count, value); }
TUNIS_FORCE_INLINE void  glUniformHandleui64vNV(GLint location, GLsizei count, const GLuint64 * value) { tunisGL.tunisUniformHandleui64vNV(location, count, value); }
TUNIS_FORCE_INLINE void  glUniformMatrix2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { tunisGL.tunisUniformMatrix2dv(location, count, transpose, value); }
TUNIS_FORCE_INLINE void  glUniformMatrix2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { tunisGL.tunisUniformMatrix2fv(location, count, transpose, value); }
TUNIS_FORCE_INLINE void  glUniformMatrix2fvARB(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { tunisGL.tunisUniformMatrix2fvARB(location, count, transpose, value); }
TUNIS_FORCE_INLINE void  glUniformMatrix2x3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { tunisGL.tunisUniformMatrix2x3dv(location, count, transpose, value); }
TUNIS_FORCE_INLINE void  glUniformMatrix2x3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { tunisGL.tunisUniformMatrix2x3fv(location, count, transpose, value); }
TUNIS_FORCE_INLINE void  glUniformMatrix2x3fvNV(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { tunisGL.tunisUniformMatrix2x3fvNV(location, count, transpose, value); }
TUNIS_FORCE_INLINE void  glUniformMatrix2x4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { tunisGL.tunisUniformMatrix2x4dv(location, count, transpose, value); }
TUNIS_FORCE_INLINE void  glUniformMatrix2x4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { tunisGL.tunisUniformMatrix2x4fv(location, count, transpose, value); }
TUNIS_FORCE_INLINE void  glUniformMatrix2x4fvNV(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { tunisGL.tunisUniformMatrix2x4fvNV(location, count, transpose, value); }
TUNIS_FORCE_INLINE void  glUniformMatrix3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { tunisGL.tunisUniformMatrix3dv(location, count, transpose, value); }
TUNIS_FORCE_INLINE void  glUniformMatrix3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { tunisGL.tunisUniformMatrix3fv(location, count, transpose, value); }
TUNIS_FORCE_INLINE void  glUniformMatrix3fvARB(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { tunisGL.tunisUniformMatrix3fvARB(location, count, transpose, value); }
TUNIS_FORCE_INLINE void  glUniformMatrix3x2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { tunisGL.tunisUniformMatrix3x2dv(location, count, transpose, value); }
TUNIS_FORCE_INLINE void  glUniformMatrix3x2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { tunisGL.tunisUniformMatrix3x2fv(location, count, transpose, value); }
TUNIS_FORCE_INLINE void  glUniformMatrix3x2fvNV(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { tunisGL.tunisUniformMatrix3x2fvNV(location, count, transpose, value); }
TUNIS_FORCE_INLINE void  glUniformMatrix3x4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { tunisGL.tunisUniformMatrix3x4dv(location, count, transpose, value); }
TUNIS_FORCE_INLINE void  glUniformMatrix3x4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { tunisGL.tunisUniformMatrix3x4fv(location, count, transpose, value); }
TUNIS_FORCE_INLINE void  glUniformMatrix3x4fvNV(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { tunisGL.tunisUniformMatrix3x4fvNV(location, count, transpose, value); }
TUNIS_FORCE_INLINE void  glUniformMatrix4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { tunisGL.tunisUniformMatrix4dv(location, count, transpose, value); }
TUNIS_FORCE_INLINE void  glUniformMatrix4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { tunisGL.tunisUniformMatrix4fv(location, count, transpose, value); }
TUNIS_FORCE_INLINE void  glUniformMatrix4fvARB(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { tunisGL.tunisUniformMatrix4fvARB(location, count, transpose, value); }
TUNIS_FORCE_INLINE void  glUniformMatrix4x2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { tunisGL.tunisUniformMatrix4x2dv(location, count, transpose, value); }
TUNIS_FORCE_INLINE void  glUniformMatrix4x2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { tunisGL.tunisUniformMatrix4x2fv(location, count, transpose, value); }
TUNIS_FORCE_INLINE void  glUniformMatrix4x2fvNV(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { tunisGL.tunisUniformMatrix4x2fvNV(location, count, transpose, value); }
TUNIS_FORCE_INLINE void  glUniformMatrix4x3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { tunisGL.tunisUniformMatrix4x3dv(location, count, transpose, value); }
TUNIS_FORCE_INLINE void  glUniformMatrix4x3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { tunisGL.tunisUniformMatrix4x3fv(location, count, transpose, value); }
TUNIS_FORCE_INLINE void  glUniformMatrix4x3fvNV(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { tunisGL.tunisUniformMatrix4x3fvNV(location, count, transpose, value); }
TUNIS_FORCE_INLINE void  glUniformSubroutinesuiv(GLenum shadertype, GLsizei count, const GLuint * indices) { tunisGL.tunisUniformSubroutinesuiv(shadertype, count, indices); }
TUNIS_FORCE_INLINE void  glUniformui64NV(GLint location, GLuint64EXT value) { tunisGL.tunisUniformui64NV(location, value); }
TUNIS_FORCE_INLINE void  glUniformui64vNV(GLint location, GLsizei count, const GLuint64EXT * value) { tunisGL.tunisUniformui64vNV(location, count, value); }
TUNIS_FORCE_INLINE void  glUnlockArraysEXT(void) { tunisGL.tunisUnlockArraysEXT(); }
TUNIS_FORCE_INLINE GLboolean glUnmapBuffer(GLenum target) { return tunisGL.tunisUnmapBuffer(target); }
TUNIS_FORCE_INLINE GLboolean glUnmapBufferARB(GLenum target) { return tunisGL.tunisUnmapBufferARB(target); }
TUNIS_FORCE_INLINE GLboolean glUnmapBufferOES(GLenum target) { return tunisGL.tunisUnmapBufferOES(target); }
TUNIS_FORCE_INLINE GLboolean glUnmapNamedBuffer(GLuint buffer) { return tunisGL.tunisUnmapNamedBuffer(buffer); }
TUNIS_FORCE_INLINE GLboolean glUnmapNamedBufferEXT(GLuint buffer) { return tunisGL.tunisUnmapNamedBufferEXT(buffer); }
TUNIS_FORCE_INLINE void  glUnmapObjectBufferATI(GLuint buffer) { tunisGL.tunisUnmapObjectBufferATI(buffer); }
TUNIS_FORCE_INLINE void  glUnmapTexture2DINTEL(GLuint texture, GLint level) { tunisGL.tunisUnmapTexture2DINTEL(texture, level); }
TUNIS_FORCE_INLINE void  glUpdateObjectBufferATI(GLuint buffer, GLuint offset, GLsizei size, const void * pointer, GLenum preserve) { tunisGL.tunisUpdateObjectBufferATI(buffer, offset, size, pointer, preserve); }
TUNIS_FORCE_INLINE void  glUseProgram(GLuint program) { tunisGL.tunisUseProgram(program); }
TUNIS_FORCE_INLINE void  glUseProgramObjectARB(GLhandleARB programObj) { tunisGL.tunisUseProgramObjectARB(programObj); }
TUNIS_FORCE_INLINE void  glUseProgramStages(GLuint pipeline, GLbitfield stages, GLuint program) { tunisGL.tunisUseProgramStages(pipeline, stages, program); }
TUNIS_FORCE_INLINE void  glUseProgramStagesEXT(GLuint pipeline, GLbitfield stages, GLuint program) { tunisGL.tunisUseProgramStagesEXT(pipeline, stages, program); }
TUNIS_FORCE_INLINE void  glUseShaderProgramEXT(GLenum type, GLuint program) { tunisGL.tunisUseShaderProgramEXT(type, program); }
TUNIS_FORCE_INLINE void  glVDPAUFiniNV(void) { tunisGL.tunisVDPAUFiniNV(); }
TUNIS_FORCE_INLINE void  glVDPAUGetSurfaceivNV(GLvdpauSurfaceNV surface, GLenum pname, GLsizei bufSize, GLsizei * length, GLint * values) { tunisGL.tunisVDPAUGetSurfaceivNV(surface, pname, bufSize, length, values); }
TUNIS_FORCE_INLINE void  glVDPAUInitNV(const void * vdpDevice, const void * getProcAddress) { tunisGL.tunisVDPAUInitNV(vdpDevice, getProcAddress); }
TUNIS_FORCE_INLINE GLboolean glVDPAUIsSurfaceNV(GLvdpauSurfaceNV surface) { return tunisGL.tunisVDPAUIsSurfaceNV(surface); }
TUNIS_FORCE_INLINE void  glVDPAUMapSurfacesNV(GLsizei numSurfaces, const GLvdpauSurfaceNV * surfaces) { tunisGL.tunisVDPAUMapSurfacesNV(numSurfaces, surfaces); }
TUNIS_FORCE_INLINE GLvdpauSurfaceNV glVDPAURegisterOutputSurfaceNV(const void * vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint * textureNames) { return tunisGL.tunisVDPAURegisterOutputSurfaceNV(vdpSurface, target, numTextureNames, textureNames); }
TUNIS_FORCE_INLINE GLvdpauSurfaceNV glVDPAURegisterVideoSurfaceNV(const void * vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint * textureNames) { return tunisGL.tunisVDPAURegisterVideoSurfaceNV(vdpSurface, target, numTextureNames, textureNames); }
TUNIS_FORCE_INLINE void  glVDPAUSurfaceAccessNV(GLvdpauSurfaceNV surface, GLenum access) { tunisGL.tunisVDPAUSurfaceAccessNV(surface, access); }
TUNIS_FORCE_INLINE void  glVDPAUUnmapSurfacesNV(GLsizei numSurface, const GLvdpauSurfaceNV * surfaces) { tunisGL.tunisVDPAUUnmapSurfacesNV(numSurface, surfaces); }
TUNIS_FORCE_INLINE void  glVDPAUUnregisterSurfaceNV(GLvdpauSurfaceNV surface) { tunisGL.tunisVDPAUUnregisterSurfaceNV(surface); }
TUNIS_FORCE_INLINE void  glValidateProgram(GLuint program) { tunisGL.tunisValidateProgram(program); }
TUNIS_FORCE_INLINE void  glValidateProgramARB(GLhandleARB programObj) { tunisGL.tunisValidateProgramARB(programObj); }
TUNIS_FORCE_INLINE void  glValidateProgramPipeline(GLuint pipeline) { tunisGL.tunisValidateProgramPipeline(pipeline); }
TUNIS_FORCE_INLINE void  glValidateProgramPipelineEXT(GLuint pipeline) { tunisGL.tunisValidateProgramPipelineEXT(pipeline); }
TUNIS_FORCE_INLINE void  glVariantArrayObjectATI(GLuint id, GLenum type, GLsizei stride, GLuint buffer, GLuint offset) { tunisGL.tunisVariantArrayObjectATI(id, type, stride, buffer, offset); }
TUNIS_FORCE_INLINE void  glVariantPointerEXT(GLuint id, GLenum type, GLuint stride, const void * addr) { tunisGL.tunisVariantPointerEXT(id, type, stride, addr); }
TUNIS_FORCE_INLINE void  glVariantbvEXT(GLuint id, const GLbyte * addr) { tunisGL.tunisVariantbvEXT(id, addr); }
TUNIS_FORCE_INLINE void  glVariantdvEXT(GLuint id, const GLdouble * addr) { tunisGL.tunisVariantdvEXT(id, addr); }
TUNIS_FORCE_INLINE void  glVariantfvEXT(GLuint id, const GLfloat * addr) { tunisGL.tunisVariantfvEXT(id, addr); }
TUNIS_FORCE_INLINE void  glVariantivEXT(GLuint id, const GLint * addr) { tunisGL.tunisVariantivEXT(id, addr); }
TUNIS_FORCE_INLINE void  glVariantsvEXT(GLuint id, const GLshort * addr) { tunisGL.tunisVariantsvEXT(id, addr); }
TUNIS_FORCE_INLINE void  glVariantubvEXT(GLuint id, const GLubyte * addr) { tunisGL.tunisVariantubvEXT(id, addr); }
TUNIS_FORCE_INLINE void  glVariantuivEXT(GLuint id, const GLuint * addr) { tunisGL.tunisVariantuivEXT(id, addr); }
TUNIS_FORCE_INLINE void  glVariantusvEXT(GLuint id, const GLushort * addr) { tunisGL.tunisVariantusvEXT(id, addr); }
TUNIS_FORCE_INLINE void  glVertex2bOES(GLbyte x, GLbyte y) { tunisGL.tunisVertex2bOES(x, y); }
TUNIS_FORCE_INLINE void  glVertex2bvOES(const GLbyte * coords) { tunisGL.tunisVertex2bvOES(coords); }
TUNIS_FORCE_INLINE void  glVertex2d(GLdouble x, GLdouble y) { tunisGL.tunisVertex2d(x, y); }
TUNIS_FORCE_INLINE void  glVertex2dv(const GLdouble * v) { tunisGL.tunisVertex2dv(v); }
TUNIS_FORCE_INLINE void  glVertex2f(GLfloat x, GLfloat y) { tunisGL.tunisVertex2f(x, y); }
TUNIS_FORCE_INLINE void  glVertex2fv(const GLfloat * v) { tunisGL.tunisVertex2fv(v); }
TUNIS_FORCE_INLINE void  glVertex2hNV(GLhalfNV x, GLhalfNV y) { tunisGL.tunisVertex2hNV(x, y); }
TUNIS_FORCE_INLINE void  glVertex2hvNV(const GLhalfNV * v) { tunisGL.tunisVertex2hvNV(v); }
TUNIS_FORCE_INLINE void  glVertex2i(GLint x, GLint y) { tunisGL.tunisVertex2i(x, y); }
TUNIS_FORCE_INLINE void  glVertex2iv(const GLint * v) { tunisGL.tunisVertex2iv(v); }
TUNIS_FORCE_INLINE void  glVertex2s(GLshort x, GLshort y) { tunisGL.tunisVertex2s(x, y); }
TUNIS_FORCE_INLINE void  glVertex2sv(const GLshort * v) { tunisGL.tunisVertex2sv(v); }
TUNIS_FORCE_INLINE void  glVertex2xOES(GLfixed x) { tunisGL.tunisVertex2xOES(x); }
TUNIS_FORCE_INLINE void  glVertex2xvOES(const GLfixed * coords) { tunisGL.tunisVertex2xvOES(coords); }
TUNIS_FORCE_INLINE void  glVertex3bOES(GLbyte x, GLbyte y, GLbyte z) { tunisGL.tunisVertex3bOES(x, y, z); }
TUNIS_FORCE_INLINE void  glVertex3bvOES(const GLbyte * coords) { tunisGL.tunisVertex3bvOES(coords); }
TUNIS_FORCE_INLINE void  glVertex3d(GLdouble x, GLdouble y, GLdouble z) { tunisGL.tunisVertex3d(x, y, z); }
TUNIS_FORCE_INLINE void  glVertex3dv(const GLdouble * v) { tunisGL.tunisVertex3dv(v); }
TUNIS_FORCE_INLINE void  glVertex3f(GLfloat x, GLfloat y, GLfloat z) { tunisGL.tunisVertex3f(x, y, z); }
TUNIS_FORCE_INLINE void  glVertex3fv(const GLfloat * v) { tunisGL.tunisVertex3fv(v); }
TUNIS_FORCE_INLINE void  glVertex3hNV(GLhalfNV x, GLhalfNV y, GLhalfNV z) { tunisGL.tunisVertex3hNV(x, y, z); }
TUNIS_FORCE_INLINE void  glVertex3hvNV(const GLhalfNV * v) { tunisGL.tunisVertex3hvNV(v); }
TUNIS_FORCE_INLINE void  glVertex3i(GLint x, GLint y, GLint z) { tunisGL.tunisVertex3i(x, y, z); }
TUNIS_FORCE_INLINE void  glVertex3iv(const GLint * v) { tunisGL.tunisVertex3iv(v); }
TUNIS_FORCE_INLINE void  glVertex3s(GLshort x, GLshort y, GLshort z) { tunisGL.tunisVertex3s(x, y, z); }
TUNIS_FORCE_INLINE void  glVertex3sv(const GLshort * v) { tunisGL.tunisVertex3sv(v); }
TUNIS_FORCE_INLINE void  glVertex3xOES(GLfixed x, GLfixed y) { tunisGL.tunisVertex3xOES(x, y); }
TUNIS_FORCE_INLINE void  glVertex3xvOES(const GLfixed * coords) { tunisGL.tunisVertex3xvOES(coords); }
TUNIS_FORCE_INLINE void  glVertex4bOES(GLbyte x, GLbyte y, GLbyte z, GLbyte w) { tunisGL.tunisVertex4bOES(x, y, z, w); }
TUNIS_FORCE_INLINE void  glVertex4bvOES(const GLbyte * coords) { tunisGL.tunisVertex4bvOES(coords); }
TUNIS_FORCE_INLINE void  glVertex4d(GLdouble x, GLdouble y, GLdouble z, GLdouble w) { tunisGL.tunisVertex4d(x, y, z, w); }
TUNIS_FORCE_INLINE void  glVertex4dv(const GLdouble * v) { tunisGL.tunisVertex4dv(v); }
TUNIS_FORCE_INLINE void  glVertex4f(GLfloat x, GLfloat y, GLfloat z, GLfloat w) { tunisGL.tunisVertex4f(x, y, z, w); }
TUNIS_FORCE_INLINE void  glVertex4fv(const GLfloat * v) { tunisGL.tunisVertex4fv(v); }
TUNIS_FORCE_INLINE void  glVertex4hNV(GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w) { tunisGL.tunisVertex4hNV(x, y, z, w); }
TUNIS_FORCE_INLINE void  glVertex4hvNV(const GLhalfNV * v) { tunisGL.tunisVertex4hvNV(v); }
TUNIS_FORCE_INLINE void  glVertex4i(GLint x, GLint y, GLint z, GLint w) { tunisGL.tunisVertex4i(x, y, z, w); }
TUNIS_FORCE_INLINE void  glVertex4iv(const GLint * v) { tunisGL.tunisVertex4iv(v); }
TUNIS_FORCE_INLINE void  glVertex4s(GLshort x, GLshort y, GLshort z, GLshort w) { tunisGL.tunisVertex4s(x, y, z, w); }
TUNIS_FORCE_INLINE void  glVertex4sv(const GLshort * v) { tunisGL.tunisVertex4sv(v); }
TUNIS_FORCE_INLINE void  glVertex4xOES(GLfixed x, GLfixed y, GLfixed z) { tunisGL.tunisVertex4xOES(x, y, z); }
TUNIS_FORCE_INLINE void  glVertex4xvOES(const GLfixed * coords) { tunisGL.tunisVertex4xvOES(coords); }
TUNIS_FORCE_INLINE void  glVertexArrayAttribBinding(GLuint vaobj, GLuint attribindex, GLuint bindingindex) { tunisGL.tunisVertexArrayAttribBinding(vaobj, attribindex, bindingindex); }
TUNIS_FORCE_INLINE void  glVertexArrayAttribFormat(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset) { tunisGL.tunisVertexArrayAttribFormat(vaobj, attribindex, size, type, normalized, relativeoffset); }
TUNIS_FORCE_INLINE void  glVertexArrayAttribIFormat(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset) { tunisGL.tunisVertexArrayAttribIFormat(vaobj, attribindex, size, type, relativeoffset); }
TUNIS_FORCE_INLINE void  glVertexArrayAttribLFormat(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset) { tunisGL.tunisVertexArrayAttribLFormat(vaobj, attribindex, size, type, relativeoffset); }
TUNIS_FORCE_INLINE void  glVertexArrayBindVertexBufferEXT(GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride) { tunisGL.tunisVertexArrayBindVertexBufferEXT(vaobj, bindingindex, buffer, offset, stride); }
TUNIS_FORCE_INLINE void  glVertexArrayBindingDivisor(GLuint vaobj, GLuint bindingindex, GLuint divisor) { tunisGL.tunisVertexArrayBindingDivisor(vaobj, bindingindex, divisor); }
TUNIS_FORCE_INLINE void  glVertexArrayColorOffsetEXT(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset) { tunisGL.tunisVertexArrayColorOffsetEXT(vaobj, buffer, size, type, stride, offset); }
TUNIS_FORCE_INLINE void  glVertexArrayEdgeFlagOffsetEXT(GLuint vaobj, GLuint buffer, GLsizei stride, GLintptr offset) { tunisGL.tunisVertexArrayEdgeFlagOffsetEXT(vaobj, buffer, stride, offset); }
TUNIS_FORCE_INLINE void  glVertexArrayElementBuffer(GLuint vaobj, GLuint buffer) { tunisGL.tunisVertexArrayElementBuffer(vaobj, buffer); }
TUNIS_FORCE_INLINE void  glVertexArrayFogCoordOffsetEXT(GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset) { tunisGL.tunisVertexArrayFogCoordOffsetEXT(vaobj, buffer, type, stride, offset); }
TUNIS_FORCE_INLINE void  glVertexArrayIndexOffsetEXT(GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset) { tunisGL.tunisVertexArrayIndexOffsetEXT(vaobj, buffer, type, stride, offset); }
TUNIS_FORCE_INLINE void  glVertexArrayMultiTexCoordOffsetEXT(GLuint vaobj, GLuint buffer, GLenum texunit, GLint size, GLenum type, GLsizei stride, GLintptr offset) { tunisGL.tunisVertexArrayMultiTexCoordOffsetEXT(vaobj, buffer, texunit, size, type, stride, offset); }
TUNIS_FORCE_INLINE void  glVertexArrayNormalOffsetEXT(GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset) { tunisGL.tunisVertexArrayNormalOffsetEXT(vaobj, buffer, type, stride, offset); }
TUNIS_FORCE_INLINE void  glVertexArrayParameteriAPPLE(GLenum pname, GLint param) { tunisGL.tunisVertexArrayParameteriAPPLE(pname, param); }
TUNIS_FORCE_INLINE void  glVertexArrayRangeAPPLE(GLsizei length, void * pointer) { tunisGL.tunisVertexArrayRangeAPPLE(length, pointer); }
TUNIS_FORCE_INLINE void  glVertexArrayRangeNV(GLsizei length, const void * pointer) { tunisGL.tunisVertexArrayRangeNV(length, pointer); }
TUNIS_FORCE_INLINE void  glVertexArraySecondaryColorOffsetEXT(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset) { tunisGL.tunisVertexArraySecondaryColorOffsetEXT(vaobj, buffer, size, type, stride, offset); }
TUNIS_FORCE_INLINE void  glVertexArrayTexCoordOffsetEXT(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset) { tunisGL.tunisVertexArrayTexCoordOffsetEXT(vaobj, buffer, size, type, stride, offset); }
TUNIS_FORCE_INLINE void  glVertexArrayVertexAttribBindingEXT(GLuint vaobj, GLuint attribindex, GLuint bindingindex) { tunisGL.tunisVertexArrayVertexAttribBindingEXT(vaobj, attribindex, bindingindex); }
TUNIS_FORCE_INLINE void  glVertexArrayVertexAttribDivisorEXT(GLuint vaobj, GLuint index, GLuint divisor) { tunisGL.tunisVertexArrayVertexAttribDivisorEXT(vaobj, index, divisor); }
TUNIS_FORCE_INLINE void  glVertexArrayVertexAttribFormatEXT(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset) { tunisGL.tunisVertexArrayVertexAttribFormatEXT(vaobj, attribindex, size, type, normalized, relativeoffset); }
TUNIS_FORCE_INLINE void  glVertexArrayVertexAttribIFormatEXT(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset) { tunisGL.tunisVertexArrayVertexAttribIFormatEXT(vaobj, attribindex, size, type, relativeoffset); }
TUNIS_FORCE_INLINE void  glVertexArrayVertexAttribIOffsetEXT(GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset) { tunisGL.tunisVertexArrayVertexAttribIOffsetEXT(vaobj, buffer, index, size, type, stride, offset); }
TUNIS_FORCE_INLINE void  glVertexArrayVertexAttribLFormatEXT(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset) { tunisGL.tunisVertexArrayVertexAttribLFormatEXT(vaobj, attribindex, size, type, relativeoffset); }
TUNIS_FORCE_INLINE void  glVertexArrayVertexAttribLOffsetEXT(GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset) { tunisGL.tunisVertexArrayVertexAttribLOffsetEXT(vaobj, buffer, index, size, type, stride, offset); }
TUNIS_FORCE_INLINE void  glVertexArrayVertexAttribOffsetEXT(GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLintptr offset) { tunisGL.tunisVertexArrayVertexAttribOffsetEXT(vaobj, buffer, index, size, type, normalized, stride, offset); }
TUNIS_FORCE_INLINE void  glVertexArrayVertexBindingDivisorEXT(GLuint vaobj, GLuint bindingindex, GLuint divisor) { tunisGL.tunisVertexArrayVertexBindingDivisorEXT(vaobj, bindingindex, divisor); }
TUNIS_FORCE_INLINE void  glVertexArrayVertexBuffer(GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride) { tunisGL.tunisVertexArrayVertexBuffer(vaobj, bindingindex, buffer, offset, stride); }
TUNIS_FORCE_INLINE void  glVertexArrayVertexBuffers(GLuint vaobj, GLuint first, GLsizei count, const GLuint * buffers, const GLintptr * offsets, const GLsizei * strides) { tunisGL.tunisVertexArrayVertexBuffers(vaobj, first, count, buffers, offsets, strides); }
TUNIS_FORCE_INLINE void  glVertexArrayVertexOffsetEXT(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset) { tunisGL.tunisVertexArrayVertexOffsetEXT(vaobj, buffer, size, type, stride, offset); }
TUNIS_FORCE_INLINE void  glVertexAttrib1d(GLuint index, GLdouble x) { tunisGL.tunisVertexAttrib1d(index, x); }
TUNIS_FORCE_INLINE void  glVertexAttrib1dARB(GLuint index, GLdouble x) { tunisGL.tunisVertexAttrib1dARB(index, x); }
TUNIS_FORCE_INLINE void  glVertexAttrib1dNV(GLuint index, GLdouble x) { tunisGL.tunisVertexAttrib1dNV(index, x); }
TUNIS_FORCE_INLINE void  glVertexAttrib1dv(GLuint index, const GLdouble * v) { tunisGL.tunisVertexAttrib1dv(index, v); }
TUNIS_FORCE_INLINE void  glVertexAttrib1dvARB(GLuint index, const GLdouble * v) { tunisGL.tunisVertexAttrib1dvARB(index, v); }
TUNIS_FORCE_INLINE void  glVertexAttrib1dvNV(GLuint index, const GLdouble * v) { tunisGL.tunisVertexAttrib1dvNV(index, v); }
TUNIS_FORCE_INLINE void  glVertexAttrib1f(GLuint index, GLfloat x) { tunisGL.tunisVertexAttrib1f(index, x); }
TUNIS_FORCE_INLINE void  glVertexAttrib1fARB(GLuint index, GLfloat x) { tunisGL.tunisVertexAttrib1fARB(index, x); }
TUNIS_FORCE_INLINE void  glVertexAttrib1fNV(GLuint index, GLfloat x) { tunisGL.tunisVertexAttrib1fNV(index, x); }
TUNIS_FORCE_INLINE void  glVertexAttrib1fv(GLuint index, const GLfloat * v) { tunisGL.tunisVertexAttrib1fv(index, v); }
TUNIS_FORCE_INLINE void  glVertexAttrib1fvARB(GLuint index, const GLfloat * v) { tunisGL.tunisVertexAttrib1fvARB(index, v); }
TUNIS_FORCE_INLINE void  glVertexAttrib1fvNV(GLuint index, const GLfloat * v) { tunisGL.tunisVertexAttrib1fvNV(index, v); }
TUNIS_FORCE_INLINE void  glVertexAttrib1hNV(GLuint index, GLhalfNV x) { tunisGL.tunisVertexAttrib1hNV(index, x); }
TUNIS_FORCE_INLINE void  glVertexAttrib1hvNV(GLuint index, const GLhalfNV * v) { tunisGL.tunisVertexAttrib1hvNV(index, v); }
TUNIS_FORCE_INLINE void  glVertexAttrib1s(GLuint index, GLshort x) { tunisGL.tunisVertexAttrib1s(index, x); }
TUNIS_FORCE_INLINE void  glVertexAttrib1sARB(GLuint index, GLshort x) { tunisGL.tunisVertexAttrib1sARB(index, x); }
TUNIS_FORCE_INLINE void  glVertexAttrib1sNV(GLuint index, GLshort x) { tunisGL.tunisVertexAttrib1sNV(index, x); }
TUNIS_FORCE_INLINE void  glVertexAttrib1sv(GLuint index, const GLshort * v) { tunisGL.tunisVertexAttrib1sv(index, v); }
TUNIS_FORCE_INLINE void  glVertexAttrib1svARB(GLuint index, const GLshort * v) { tunisGL.tunisVertexAttrib1svARB(index, v); }
TUNIS_FORCE_INLINE void  glVertexAttrib1svNV(GLuint index, const GLshort * v) { tunisGL.tunisVertexAttrib1svNV(index, v); }
TUNIS_FORCE_INLINE void  glVertexAttrib2d(GLuint index, GLdouble x, GLdouble y) { tunisGL.tunisVertexAttrib2d(index, x, y); }
TUNIS_FORCE_INLINE void  glVertexAttrib2dARB(GLuint index, GLdouble x, GLdouble y) { tunisGL.tunisVertexAttrib2dARB(index, x, y); }
TUNIS_FORCE_INLINE void  glVertexAttrib2dNV(GLuint index, GLdouble x, GLdouble y) { tunisGL.tunisVertexAttrib2dNV(index, x, y); }
TUNIS_FORCE_INLINE void  glVertexAttrib2dv(GLuint index, const GLdouble * v) { tunisGL.tunisVertexAttrib2dv(index, v); }
TUNIS_FORCE_INLINE void  glVertexAttrib2dvARB(GLuint index, const GLdouble * v) { tunisGL.tunisVertexAttrib2dvARB(index, v); }
TUNIS_FORCE_INLINE void  glVertexAttrib2dvNV(GLuint index, const GLdouble * v) { tunisGL.tunisVertexAttrib2dvNV(index, v); }
TUNIS_FORCE_INLINE void  glVertexAttrib2f(GLuint index, GLfloat x, GLfloat y) { tunisGL.tunisVertexAttrib2f(index, x, y); }
TUNIS_FORCE_INLINE void  glVertexAttrib2fARB(GLuint index, GLfloat x, GLfloat y) { tunisGL.tunisVertexAttrib2fARB(index, x, y); }
TUNIS_FORCE_INLINE void  glVertexAttrib2fNV(GLuint index, GLfloat x, GLfloat y) { tunisGL.tunisVertexAttrib2fNV(index, x, y); }
TUNIS_FORCE_INLINE void  glVertexAttrib2fv(GLuint index, const GLfloat * v) { tunisGL.tunisVertexAttrib2fv(index, v); }
TUNIS_FORCE_INLINE void  glVertexAttrib2fvARB(GLuint index, const GLfloat * v) { tunisGL.tunisVertexAttrib2fvARB(index, v); }
TUNIS_FORCE_INLINE void  glVertexAttrib2fvNV(GLuint index, const GLfloat * v) { tunisGL.tunisVertexAttrib2fvNV(index, v); }
TUNIS_FORCE_INLINE void  glVertexAttrib2hNV(GLuint index, GLhalfNV x, GLhalfNV y) { tunisGL.tunisVertexAttrib2hNV(index, x, y); }
TUNIS_FORCE_INLINE void  glVertexAttrib2hvNV(GLuint index, const GLhalfNV * v) { tunisGL.tunisVertexAttrib2hvNV(index, v); }
TUNIS_FORCE_INLINE void  glVertexAttrib2s(GLuint index, GLshort x, GLshort y) { tunisGL.tunisVertexAttrib2s(index, x, y); }
TUNIS_FORCE_INLINE void  glVertexAttrib2sARB(GLuint index, GLshort x, GLshort y) { tunisGL.tunisVertexAttrib2sARB(index, x, y); }
TUNIS_FORCE_INLINE void  glVertexAttrib2sNV(GLuint index, GLshort x, GLshort y) { tunisGL.tunisVertexAttrib2sNV(index, x, y); }
TUNIS_FORCE_INLINE void  glVertexAttrib2sv(GLuint index, const GLshort * v) { tunisGL.tunisVertexAttrib2sv(index, v); }
TUNIS_FORCE_INLINE void  glVertexAttrib2svARB(GLuint index, const GLshort * v) { tunisGL.tunisVertexAttrib2svARB(index, v); }
TUNIS_FORCE_INLINE void  glVertexAttrib2svNV(GLuint index, const GLshort * v) { tunisGL.tunisVertexAttrib2svNV(index, v); }
TUNIS_FORCE_INLINE void  glVertexAttrib3d(GLuint index, GLdouble x, GLdouble y, GLdouble z) { tunisGL.tunisVertexAttrib3d(index, x, y, z); }
TUNIS_FORCE_INLINE void  glVertexAttrib3dARB(GLuint index, GLdouble x, GLdouble y, GLdouble z) { tunisGL.tunisVertexAttrib3dARB(index, x, y, z); }
TUNIS_FORCE_INLINE void  glVertexAttrib3dNV(GLuint index, GLdouble x, GLdouble y, GLdouble z) { tunisGL.tunisVertexAttrib3dNV(index, x, y, z); }
TUNIS_FORCE_INLINE void  glVertexAttrib3dv(GLuint index, const GLdouble * v) { tunisGL.tunisVertexAttrib3dv(index, v); }
TUNIS_FORCE_INLINE void  glVertexAttrib3dvARB(GLuint index, const GLdouble * v) { tunisGL.tunisVertexAttrib3dvARB(index, v); }
TUNIS_FORCE_INLINE void  glVertexAttrib3dvNV(GLuint index, const GLdouble * v) { tunisGL.tunisVertexAttrib3dvNV(index, v); }
TUNIS_FORCE_INLINE void  glVertexAttrib3f(GLuint index, GLfloat x, GLfloat y, GLfloat z) { tunisGL.tunisVertexAttrib3f(index, x, y, z); }
TUNIS_FORCE_INLINE void  glVertexAttrib3fARB(GLuint index, GLfloat x, GLfloat y, GLfloat z) { tunisGL.tunisVertexAttrib3fARB(index, x, y, z); }
TUNIS_FORCE_INLINE void  glVertexAttrib3fNV(GLuint index, GLfloat x, GLfloat y, GLfloat z) { tunisGL.tunisVertexAttrib3fNV(index, x, y, z); }
TUNIS_FORCE_INLINE void  glVertexAttrib3fv(GLuint index, const GLfloat * v) { tunisGL.tunisVertexAttrib3fv(index, v); }
TUNIS_FORCE_INLINE void  glVertexAttrib3fvARB(GLuint index, const GLfloat * v) { tunisGL.tunisVertexAttrib3fvARB(index, v); }
TUNIS_FORCE_INLINE void  glVertexAttrib3fvNV(GLuint index, const GLfloat * v) { tunisGL.tunisVertexAttrib3fvNV(index, v); }
TUNIS_FORCE_INLINE void  glVertexAttrib3hNV(GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z) { tunisGL.tunisVertexAttrib3hNV(index, x, y, z); }
TUNIS_FORCE_INLINE void  glVertexAttrib3hvNV(GLuint index, const GLhalfNV * v) { tunisGL.tunisVertexAttrib3hvNV(index, v); }
TUNIS_FORCE_INLINE void  glVertexAttrib3s(GLuint index, GLshort x, GLshort y, GLshort z) { tunisGL.tunisVertexAttrib3s(index, x, y, z); }
TUNIS_FORCE_INLINE void  glVertexAttrib3sARB(GLuint index, GLshort x, GLshort y, GLshort z) { tunisGL.tunisVertexAttrib3sARB(index, x, y, z); }
TUNIS_FORCE_INLINE void  glVertexAttrib3sNV(GLuint index, GLshort x, GLshort y, GLshort z) { tunisGL.tunisVertexAttrib3sNV(index, x, y, z); }
TUNIS_FORCE_INLINE void  glVertexAttrib3sv(GLuint index, const GLshort * v) { tunisGL.tunisVertexAttrib3sv(index, v); }
TUNIS_FORCE_INLINE void  glVertexAttrib3svARB(GLuint index, const GLshort * v) { tunisGL.tunisVertexAttrib3svARB(index, v); }
TUNIS_FORCE_INLINE void  glVertexAttrib3svNV(GLuint index, const GLshort * v) { tunisGL.tunisVertexAttrib3svNV(index, v); }
TUNIS_FORCE_INLINE void  glVertexAttrib4Nbv(GLuint index, const GLbyte * v) { tunisGL.tunisVertexAttrib4Nbv(index, v); }
TUNIS_FORCE_INLINE void  glVertexAttrib4NbvARB(GLuint index, const GLbyte * v) { tunisGL.tunisVertexAttrib4NbvARB(index, v); }
TUNIS_FORCE_INLINE void  glVertexAttrib4Niv(GLuint index, const GLint * v) { tunisGL.tunisVertexAttrib4Niv(index, v); }
TUNIS_FORCE_INLINE void  glVertexAttrib4NivARB(GLuint index, const GLint * v) { tunisGL.tunisVertexAttrib4NivARB(index, v); }
TUNIS_FORCE_INLINE void  glVertexAttrib4Nsv(GLuint index, const GLshort * v) { tunisGL.tunisVertexAttrib4Nsv(index, v); }
TUNIS_FORCE_INLINE void  glVertexAttrib4NsvARB(GLuint index, const GLshort * v) { tunisGL.tunisVertexAttrib4NsvARB(index, v); }
TUNIS_FORCE_INLINE void  glVertexAttrib4Nub(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w) { tunisGL.tunisVertexAttrib4Nub(index, x, y, z, w); }
TUNIS_FORCE_INLINE void  glVertexAttrib4NubARB(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w) { tunisGL.tunisVertexAttrib4NubARB(index, x, y, z, w); }
TUNIS_FORCE_INLINE void  glVertexAttrib4Nubv(GLuint index, const GLubyte * v) { tunisGL.tunisVertexAttrib4Nubv(index, v); }
TUNIS_FORCE_INLINE void  glVertexAttrib4NubvARB(GLuint index, const GLubyte * v) { tunisGL.tunisVertexAttrib4NubvARB(index, v); }
TUNIS_FORCE_INLINE void  glVertexAttrib4Nuiv(GLuint index, const GLuint * v) { tunisGL.tunisVertexAttrib4Nuiv(index, v); }
TUNIS_FORCE_INLINE void  glVertexAttrib4NuivARB(GLuint index, const GLuint * v) { tunisGL.tunisVertexAttrib4NuivARB(index, v); }
TUNIS_FORCE_INLINE void  glVertexAttrib4Nusv(GLuint index, const GLushort * v) { tunisGL.tunisVertexAttrib4Nusv(index, v); }
TUNIS_FORCE_INLINE void  glVertexAttrib4NusvARB(GLuint index, const GLushort * v) { tunisGL.tunisVertexAttrib4NusvARB(index, v); }
TUNIS_FORCE_INLINE void  glVertexAttrib4bv(GLuint index, const GLbyte * v) { tunisGL.tunisVertexAttrib4bv(index, v); }
TUNIS_FORCE_INLINE void  glVertexAttrib4bvARB(GLuint index, const GLbyte * v) { tunisGL.tunisVertexAttrib4bvARB(index, v); }
TUNIS_FORCE_INLINE void  glVertexAttrib4d(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) { tunisGL.tunisVertexAttrib4d(index, x, y, z, w); }
TUNIS_FORCE_INLINE void  glVertexAttrib4dARB(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) { tunisGL.tunisVertexAttrib4dARB(index, x, y, z, w); }
TUNIS_FORCE_INLINE void  glVertexAttrib4dNV(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) { tunisGL.tunisVertexAttrib4dNV(index, x, y, z, w); }
TUNIS_FORCE_INLINE void  glVertexAttrib4dv(GLuint index, const GLdouble * v) { tunisGL.tunisVertexAttrib4dv(index, v); }
TUNIS_FORCE_INLINE void  glVertexAttrib4dvARB(GLuint index, const GLdouble * v) { tunisGL.tunisVertexAttrib4dvARB(index, v); }
TUNIS_FORCE_INLINE void  glVertexAttrib4dvNV(GLuint index, const GLdouble * v) { tunisGL.tunisVertexAttrib4dvNV(index, v); }
TUNIS_FORCE_INLINE void  glVertexAttrib4f(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w) { tunisGL.tunisVertexAttrib4f(index, x, y, z, w); }
TUNIS_FORCE_INLINE void  glVertexAttrib4fARB(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w) { tunisGL.tunisVertexAttrib4fARB(index, x, y, z, w); }
TUNIS_FORCE_INLINE void  glVertexAttrib4fNV(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w) { tunisGL.tunisVertexAttrib4fNV(index, x, y, z, w); }
TUNIS_FORCE_INLINE void  glVertexAttrib4fv(GLuint index, const GLfloat * v) { tunisGL.tunisVertexAttrib4fv(index, v); }
TUNIS_FORCE_INLINE void  glVertexAttrib4fvARB(GLuint index, const GLfloat * v) { tunisGL.tunisVertexAttrib4fvARB(index, v); }
TUNIS_FORCE_INLINE void  glVertexAttrib4fvNV(GLuint index, const GLfloat * v) { tunisGL.tunisVertexAttrib4fvNV(index, v); }
TUNIS_FORCE_INLINE void  glVertexAttrib4hNV(GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w) { tunisGL.tunisVertexAttrib4hNV(index, x, y, z, w); }
TUNIS_FORCE_INLINE void  glVertexAttrib4hvNV(GLuint index, const GLhalfNV * v) { tunisGL.tunisVertexAttrib4hvNV(index, v); }
TUNIS_FORCE_INLINE void  glVertexAttrib4iv(GLuint index, const GLint * v) { tunisGL.tunisVertexAttrib4iv(index, v); }
TUNIS_FORCE_INLINE void  glVertexAttrib4ivARB(GLuint index, const GLint * v) { tunisGL.tunisVertexAttrib4ivARB(index, v); }
TUNIS_FORCE_INLINE void  glVertexAttrib4s(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w) { tunisGL.tunisVertexAttrib4s(index, x, y, z, w); }
TUNIS_FORCE_INLINE void  glVertexAttrib4sARB(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w) { tunisGL.tunisVertexAttrib4sARB(index, x, y, z, w); }
TUNIS_FORCE_INLINE void  glVertexAttrib4sNV(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w) { tunisGL.tunisVertexAttrib4sNV(index, x, y, z, w); }
TUNIS_FORCE_INLINE void  glVertexAttrib4sv(GLuint index, const GLshort * v) { tunisGL.tunisVertexAttrib4sv(index, v); }
TUNIS_FORCE_INLINE void  glVertexAttrib4svARB(GLuint index, const GLshort * v) { tunisGL.tunisVertexAttrib4svARB(index, v); }
TUNIS_FORCE_INLINE void  glVertexAttrib4svNV(GLuint index, const GLshort * v) { tunisGL.tunisVertexAttrib4svNV(index, v); }
TUNIS_FORCE_INLINE void  glVertexAttrib4ubNV(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w) { tunisGL.tunisVertexAttrib4ubNV(index, x, y, z, w); }
TUNIS_FORCE_INLINE void  glVertexAttrib4ubv(GLuint index, const GLubyte * v) { tunisGL.tunisVertexAttrib4ubv(index, v); }
TUNIS_FORCE_INLINE void  glVertexAttrib4ubvARB(GLuint index, const GLubyte * v) { tunisGL.tunisVertexAttrib4ubvARB(index, v); }
TUNIS_FORCE_INLINE void  glVertexAttrib4ubvNV(GLuint index, const GLubyte * v) { tunisGL.tunisVertexAttrib4ubvNV(index, v); }
TUNIS_FORCE_INLINE void  glVertexAttrib4uiv(GLuint index, const GLuint * v) { tunisGL.tunisVertexAttrib4uiv(index, v); }
TUNIS_FORCE_INLINE void  glVertexAttrib4uivARB(GLuint index, const GLuint * v) { tunisGL.tunisVertexAttrib4uivARB(index, v); }
TUNIS_FORCE_INLINE void  glVertexAttrib4usv(GLuint index, const GLushort * v) { tunisGL.tunisVertexAttrib4usv(index, v); }
TUNIS_FORCE_INLINE void  glVertexAttrib4usvARB(GLuint index, const GLushort * v) { tunisGL.tunisVertexAttrib4usvARB(index, v); }
TUNIS_FORCE_INLINE void  glVertexAttribArrayObjectATI(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLuint buffer, GLuint offset) { tunisGL.tunisVertexAttribArrayObjectATI(index, size, type, normalized, stride, buffer, offset); }
TUNIS_FORCE_INLINE void  glVertexAttribBinding(GLuint attribindex, GLuint bindingindex) { tunisGL.tunisVertexAttribBinding(attribindex, bindingindex); }
TUNIS_FORCE_INLINE void  glVertexAttribDivisor(GLuint index, GLuint divisor) { tunisGL.tunisVertexAttribDivisor(index, divisor); }
TUNIS_FORCE_INLINE void  glVertexAttribDivisorANGLE(GLuint index, GLuint divisor) { tunisGL.tunisVertexAttribDivisorANGLE(index, divisor); }
TUNIS_FORCE_INLINE void  glVertexAttribDivisorARB(GLuint index, GLuint divisor) { tunisGL.tunisVertexAttribDivisorARB(index, divisor); }
TUNIS_FORCE_INLINE void  glVertexAttribDivisorEXT(GLuint index, GLuint divisor) { tunisGL.tunisVertexAttribDivisorEXT(index, divisor); }
TUNIS_FORCE_INLINE void  glVertexAttribDivisorNV(GLuint index, GLuint divisor) { tunisGL.tunisVertexAttribDivisorNV(index, divisor); }
TUNIS_FORCE_INLINE void  glVertexAttribFormat(GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset) { tunisGL.tunisVertexAttribFormat(attribindex, size, type, normalized, relativeoffset); }
TUNIS_FORCE_INLINE void  glVertexAttribFormatNV(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride) { tunisGL.tunisVertexAttribFormatNV(index, size, type, normalized, stride); }
TUNIS_FORCE_INLINE void  glVertexAttribI1i(GLuint index, GLint x) { tunisGL.tunisVertexAttribI1i(index, x); }
TUNIS_FORCE_INLINE void  glVertexAttribI1iEXT(GLuint index, GLint x) { tunisGL.tunisVertexAttribI1iEXT(index, x); }
TUNIS_FORCE_INLINE void  glVertexAttribI1iv(GLuint index, const GLint * v) { tunisGL.tunisVertexAttribI1iv(index, v); }
TUNIS_FORCE_INLINE void  glVertexAttribI1ivEXT(GLuint index, const GLint * v) { tunisGL.tunisVertexAttribI1ivEXT(index, v); }
TUNIS_FORCE_INLINE void  glVertexAttribI1ui(GLuint index, GLuint x) { tunisGL.tunisVertexAttribI1ui(index, x); }
TUNIS_FORCE_INLINE void  glVertexAttribI1uiEXT(GLuint index, GLuint x) { tunisGL.tunisVertexAttribI1uiEXT(index, x); }
TUNIS_FORCE_INLINE void  glVertexAttribI1uiv(GLuint index, const GLuint * v) { tunisGL.tunisVertexAttribI1uiv(index, v); }
TUNIS_FORCE_INLINE void  glVertexAttribI1uivEXT(GLuint index, const GLuint * v) { tunisGL.tunisVertexAttribI1uivEXT(index, v); }
TUNIS_FORCE_INLINE void  glVertexAttribI2i(GLuint index, GLint x, GLint y) { tunisGL.tunisVertexAttribI2i(index, x, y); }
TUNIS_FORCE_INLINE void  glVertexAttribI2iEXT(GLuint index, GLint x, GLint y) { tunisGL.tunisVertexAttribI2iEXT(index, x, y); }
TUNIS_FORCE_INLINE void  glVertexAttribI2iv(GLuint index, const GLint * v) { tunisGL.tunisVertexAttribI2iv(index, v); }
TUNIS_FORCE_INLINE void  glVertexAttribI2ivEXT(GLuint index, const GLint * v) { tunisGL.tunisVertexAttribI2ivEXT(index, v); }
TUNIS_FORCE_INLINE void  glVertexAttribI2ui(GLuint index, GLuint x, GLuint y) { tunisGL.tunisVertexAttribI2ui(index, x, y); }
TUNIS_FORCE_INLINE void  glVertexAttribI2uiEXT(GLuint index, GLuint x, GLuint y) { tunisGL.tunisVertexAttribI2uiEXT(index, x, y); }
TUNIS_FORCE_INLINE void  glVertexAttribI2uiv(GLuint index, const GLuint * v) { tunisGL.tunisVertexAttribI2uiv(index, v); }
TUNIS_FORCE_INLINE void  glVertexAttribI2uivEXT(GLuint index, const GLuint * v) { tunisGL.tunisVertexAttribI2uivEXT(index, v); }
TUNIS_FORCE_INLINE void  glVertexAttribI3i(GLuint index, GLint x, GLint y, GLint z) { tunisGL.tunisVertexAttribI3i(index, x, y, z); }
TUNIS_FORCE_INLINE void  glVertexAttribI3iEXT(GLuint index, GLint x, GLint y, GLint z) { tunisGL.tunisVertexAttribI3iEXT(index, x, y, z); }
TUNIS_FORCE_INLINE void  glVertexAttribI3iv(GLuint index, const GLint * v) { tunisGL.tunisVertexAttribI3iv(index, v); }
TUNIS_FORCE_INLINE void  glVertexAttribI3ivEXT(GLuint index, const GLint * v) { tunisGL.tunisVertexAttribI3ivEXT(index, v); }
TUNIS_FORCE_INLINE void  glVertexAttribI3ui(GLuint index, GLuint x, GLuint y, GLuint z) { tunisGL.tunisVertexAttribI3ui(index, x, y, z); }
TUNIS_FORCE_INLINE void  glVertexAttribI3uiEXT(GLuint index, GLuint x, GLuint y, GLuint z) { tunisGL.tunisVertexAttribI3uiEXT(index, x, y, z); }
TUNIS_FORCE_INLINE void  glVertexAttribI3uiv(GLuint index, const GLuint * v) { tunisGL.tunisVertexAttribI3uiv(index, v); }
TUNIS_FORCE_INLINE void  glVertexAttribI3uivEXT(GLuint index, const GLuint * v) { tunisGL.tunisVertexAttribI3uivEXT(index, v); }
TUNIS_FORCE_INLINE void  glVertexAttribI4bv(GLuint index, const GLbyte * v) { tunisGL.tunisVertexAttribI4bv(index, v); }
TUNIS_FORCE_INLINE void  glVertexAttribI4bvEXT(GLuint index, const GLbyte * v) { tunisGL.tunisVertexAttribI4bvEXT(index, v); }
TUNIS_FORCE_INLINE void  glVertexAttribI4i(GLuint index, GLint x, GLint y, GLint z, GLint w) { tunisGL.tunisVertexAttribI4i(index, x, y, z, w); }
TUNIS_FORCE_INLINE void  glVertexAttribI4iEXT(GLuint index, GLint x, GLint y, GLint z, GLint w) { tunisGL.tunisVertexAttribI4iEXT(index, x, y, z, w); }
TUNIS_FORCE_INLINE void  glVertexAttribI4iv(GLuint index, const GLint * v) { tunisGL.tunisVertexAttribI4iv(index, v); }
TUNIS_FORCE_INLINE void  glVertexAttribI4ivEXT(GLuint index, const GLint * v) { tunisGL.tunisVertexAttribI4ivEXT(index, v); }
TUNIS_FORCE_INLINE void  glVertexAttribI4sv(GLuint index, const GLshort * v) { tunisGL.tunisVertexAttribI4sv(index, v); }
TUNIS_FORCE_INLINE void  glVertexAttribI4svEXT(GLuint index, const GLshort * v) { tunisGL.tunisVertexAttribI4svEXT(index, v); }
TUNIS_FORCE_INLINE void  glVertexAttribI4ubv(GLuint index, const GLubyte * v) { tunisGL.tunisVertexAttribI4ubv(index, v); }
TUNIS_FORCE_INLINE void  glVertexAttribI4ubvEXT(GLuint index, const GLubyte * v) { tunisGL.tunisVertexAttribI4ubvEXT(index, v); }
TUNIS_FORCE_INLINE void  glVertexAttribI4ui(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w) { tunisGL.tunisVertexAttribI4ui(index, x, y, z, w); }
TUNIS_FORCE_INLINE void  glVertexAttribI4uiEXT(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w) { tunisGL.tunisVertexAttribI4uiEXT(index, x, y, z, w); }
TUNIS_FORCE_INLINE void  glVertexAttribI4uiv(GLuint index, const GLuint * v) { tunisGL.tunisVertexAttribI4uiv(index, v); }
TUNIS_FORCE_INLINE void  glVertexAttribI4uivEXT(GLuint index, const GLuint * v) { tunisGL.tunisVertexAttribI4uivEXT(index, v); }
TUNIS_FORCE_INLINE void  glVertexAttribI4usv(GLuint index, const GLushort * v) { tunisGL.tunisVertexAttribI4usv(index, v); }
TUNIS_FORCE_INLINE void  glVertexAttribI4usvEXT(GLuint index, const GLushort * v) { tunisGL.tunisVertexAttribI4usvEXT(index, v); }
TUNIS_FORCE_INLINE void  glVertexAttribIFormat(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset) { tunisGL.tunisVertexAttribIFormat(attribindex, size, type, relativeoffset); }
TUNIS_FORCE_INLINE void  glVertexAttribIFormatNV(GLuint index, GLint size, GLenum type, GLsizei stride) { tunisGL.tunisVertexAttribIFormatNV(index, size, type, stride); }
TUNIS_FORCE_INLINE void  glVertexAttribIPointer(GLuint index, GLint size, GLenum type, GLsizei stride, const void * pointer) { tunisGL.tunisVertexAttribIPointer(index, size, type, stride, pointer); }
TUNIS_FORCE_INLINE void  glVertexAttribIPointerEXT(GLuint index, GLint size, GLenum type, GLsizei stride, const void * pointer) { tunisGL.tunisVertexAttribIPointerEXT(index, size, type, stride, pointer); }
TUNIS_FORCE_INLINE void  glVertexAttribL1d(GLuint index, GLdouble x) { tunisGL.tunisVertexAttribL1d(index, x); }
TUNIS_FORCE_INLINE void  glVertexAttribL1dEXT(GLuint index, GLdouble x) { tunisGL.tunisVertexAttribL1dEXT(index, x); }
TUNIS_FORCE_INLINE void  glVertexAttribL1dv(GLuint index, const GLdouble * v) { tunisGL.tunisVertexAttribL1dv(index, v); }
TUNIS_FORCE_INLINE void  glVertexAttribL1dvEXT(GLuint index, const GLdouble * v) { tunisGL.tunisVertexAttribL1dvEXT(index, v); }
TUNIS_FORCE_INLINE void  glVertexAttribL1i64NV(GLuint index, GLint64EXT x) { tunisGL.tunisVertexAttribL1i64NV(index, x); }
TUNIS_FORCE_INLINE void  glVertexAttribL1i64vNV(GLuint index, const GLint64EXT * v) { tunisGL.tunisVertexAttribL1i64vNV(index, v); }
TUNIS_FORCE_INLINE void  glVertexAttribL1ui64ARB(GLuint index, GLuint64EXT x) { tunisGL.tunisVertexAttribL1ui64ARB(index, x); }
TUNIS_FORCE_INLINE void  glVertexAttribL1ui64NV(GLuint index, GLuint64EXT x) { tunisGL.tunisVertexAttribL1ui64NV(index, x); }
TUNIS_FORCE_INLINE void  glVertexAttribL1ui64vARB(GLuint index, const GLuint64EXT * v) { tunisGL.tunisVertexAttribL1ui64vARB(index, v); }
TUNIS_FORCE_INLINE void  glVertexAttribL1ui64vNV(GLuint index, const GLuint64EXT * v) { tunisGL.tunisVertexAttribL1ui64vNV(index, v); }
TUNIS_FORCE_INLINE void  glVertexAttribL2d(GLuint index, GLdouble x, GLdouble y) { tunisGL.tunisVertexAttribL2d(index, x, y); }
TUNIS_FORCE_INLINE void  glVertexAttribL2dEXT(GLuint index, GLdouble x, GLdouble y) { tunisGL.tunisVertexAttribL2dEXT(index, x, y); }
TUNIS_FORCE_INLINE void  glVertexAttribL2dv(GLuint index, const GLdouble * v) { tunisGL.tunisVertexAttribL2dv(index, v); }
TUNIS_FORCE_INLINE void  glVertexAttribL2dvEXT(GLuint index, const GLdouble * v) { tunisGL.tunisVertexAttribL2dvEXT(index, v); }
TUNIS_FORCE_INLINE void  glVertexAttribL2i64NV(GLuint index, GLint64EXT x, GLint64EXT y) { tunisGL.tunisVertexAttribL2i64NV(index, x, y); }
TUNIS_FORCE_INLINE void  glVertexAttribL2i64vNV(GLuint index, const GLint64EXT * v) { tunisGL.tunisVertexAttribL2i64vNV(index, v); }
TUNIS_FORCE_INLINE void  glVertexAttribL2ui64NV(GLuint index, GLuint64EXT x, GLuint64EXT y) { tunisGL.tunisVertexAttribL2ui64NV(index, x, y); }
TUNIS_FORCE_INLINE void  glVertexAttribL2ui64vNV(GLuint index, const GLuint64EXT * v) { tunisGL.tunisVertexAttribL2ui64vNV(index, v); }
TUNIS_FORCE_INLINE void  glVertexAttribL3d(GLuint index, GLdouble x, GLdouble y, GLdouble z) { tunisGL.tunisVertexAttribL3d(index, x, y, z); }
TUNIS_FORCE_INLINE void  glVertexAttribL3dEXT(GLuint index, GLdouble x, GLdouble y, GLdouble z) { tunisGL.tunisVertexAttribL3dEXT(index, x, y, z); }
TUNIS_FORCE_INLINE void  glVertexAttribL3dv(GLuint index, const GLdouble * v) { tunisGL.tunisVertexAttribL3dv(index, v); }
TUNIS_FORCE_INLINE void  glVertexAttribL3dvEXT(GLuint index, const GLdouble * v) { tunisGL.tunisVertexAttribL3dvEXT(index, v); }
TUNIS_FORCE_INLINE void  glVertexAttribL3i64NV(GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z) { tunisGL.tunisVertexAttribL3i64NV(index, x, y, z); }
TUNIS_FORCE_INLINE void  glVertexAttribL3i64vNV(GLuint index, const GLint64EXT * v) { tunisGL.tunisVertexAttribL3i64vNV(index, v); }
TUNIS_FORCE_INLINE void  glVertexAttribL3ui64NV(GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z) { tunisGL.tunisVertexAttribL3ui64NV(index, x, y, z); }
TUNIS_FORCE_INLINE void  glVertexAttribL3ui64vNV(GLuint index, const GLuint64EXT * v) { tunisGL.tunisVertexAttribL3ui64vNV(index, v); }
TUNIS_FORCE_INLINE void  glVertexAttribL4d(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) { tunisGL.tunisVertexAttribL4d(index, x, y, z, w); }
TUNIS_FORCE_INLINE void  glVertexAttribL4dEXT(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) { tunisGL.tunisVertexAttribL4dEXT(index, x, y, z, w); }
TUNIS_FORCE_INLINE void  glVertexAttribL4dv(GLuint index, const GLdouble * v) { tunisGL.tunisVertexAttribL4dv(index, v); }
TUNIS_FORCE_INLINE void  glVertexAttribL4dvEXT(GLuint index, const GLdouble * v) { tunisGL.tunisVertexAttribL4dvEXT(index, v); }
TUNIS_FORCE_INLINE void  glVertexAttribL4i64NV(GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w) { tunisGL.tunisVertexAttribL4i64NV(index, x, y, z, w); }
TUNIS_FORCE_INLINE void  glVertexAttribL4i64vNV(GLuint index, const GLint64EXT * v) { tunisGL.tunisVertexAttribL4i64vNV(index, v); }
TUNIS_FORCE_INLINE void  glVertexAttribL4ui64NV(GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w) { tunisGL.tunisVertexAttribL4ui64NV(index, x, y, z, w); }
TUNIS_FORCE_INLINE void  glVertexAttribL4ui64vNV(GLuint index, const GLuint64EXT * v) { tunisGL.tunisVertexAttribL4ui64vNV(index, v); }
TUNIS_FORCE_INLINE void  glVertexAttribLFormat(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset) { tunisGL.tunisVertexAttribLFormat(attribindex, size, type, relativeoffset); }
TUNIS_FORCE_INLINE void  glVertexAttribLFormatNV(GLuint index, GLint size, GLenum type, GLsizei stride) { tunisGL.tunisVertexAttribLFormatNV(index, size, type, stride); }
TUNIS_FORCE_INLINE void  glVertexAttribLPointer(GLuint index, GLint size, GLenum type, GLsizei stride, const void * pointer) { tunisGL.tunisVertexAttribLPointer(index, size, type, stride, pointer); }
TUNIS_FORCE_INLINE void  glVertexAttribLPointerEXT(GLuint index, GLint size, GLenum type, GLsizei stride, const void * pointer) { tunisGL.tunisVertexAttribLPointerEXT(index, size, type, stride, pointer); }
TUNIS_FORCE_INLINE void  glVertexAttribP1ui(GLuint index, GLenum type, GLboolean normalized, GLuint value) { tunisGL.tunisVertexAttribP1ui(index, type, normalized, value); }
TUNIS_FORCE_INLINE void  glVertexAttribP1uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint * value) { tunisGL.tunisVertexAttribP1uiv(index, type, normalized, value); }
TUNIS_FORCE_INLINE void  glVertexAttribP2ui(GLuint index, GLenum type, GLboolean normalized, GLuint value) { tunisGL.tunisVertexAttribP2ui(index, type, normalized, value); }
TUNIS_FORCE_INLINE void  glVertexAttribP2uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint * value) { tunisGL.tunisVertexAttribP2uiv(index, type, normalized, value); }
TUNIS_FORCE_INLINE void  glVertexAttribP3ui(GLuint index, GLenum type, GLboolean normalized, GLuint value) { tunisGL.tunisVertexAttribP3ui(index, type, normalized, value); }
TUNIS_FORCE_INLINE void  glVertexAttribP3uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint * value) { tunisGL.tunisVertexAttribP3uiv(index, type, normalized, value); }
TUNIS_FORCE_INLINE void  glVertexAttribP4ui(GLuint index, GLenum type, GLboolean normalized, GLuint value) { tunisGL.tunisVertexAttribP4ui(index, type, normalized, value); }
TUNIS_FORCE_INLINE void  glVertexAttribP4uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint * value) { tunisGL.tunisVertexAttribP4uiv(index, type, normalized, value); }
TUNIS_FORCE_INLINE void  glVertexAttribParameteriAMD(GLuint index, GLenum pname, GLint param) { tunisGL.tunisVertexAttribParameteriAMD(index, pname, param); }
TUNIS_FORCE_INLINE void  glVertexAttribPointer(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void * pointer) { tunisGL.tunisVertexAttribPointer(index, size, type, normalized, stride, pointer); }
TUNIS_FORCE_INLINE void  glVertexAttribPointerARB(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void * pointer) { tunisGL.tunisVertexAttribPointerARB(index, size, type, normalized, stride, pointer); }
TUNIS_FORCE_INLINE void  glVertexAttribPointerNV(GLuint index, GLint fsize, GLenum type, GLsizei stride, const void * pointer) { tunisGL.tunisVertexAttribPointerNV(index, fsize, type, stride, pointer); }
TUNIS_FORCE_INLINE void  glVertexAttribs1dvNV(GLuint index, GLsizei count, const GLdouble * v) { tunisGL.tunisVertexAttribs1dvNV(index, count, v); }
TUNIS_FORCE_INLINE void  glVertexAttribs1fvNV(GLuint index, GLsizei count, const GLfloat * v) { tunisGL.tunisVertexAttribs1fvNV(index, count, v); }
TUNIS_FORCE_INLINE void  glVertexAttribs1hvNV(GLuint index, GLsizei n, const GLhalfNV * v) { tunisGL.tunisVertexAttribs1hvNV(index, n, v); }
TUNIS_FORCE_INLINE void  glVertexAttribs1svNV(GLuint index, GLsizei count, const GLshort * v) { tunisGL.tunisVertexAttribs1svNV(index, count, v); }
TUNIS_FORCE_INLINE void  glVertexAttribs2dvNV(GLuint index, GLsizei count, const GLdouble * v) { tunisGL.tunisVertexAttribs2dvNV(index, count, v); }
TUNIS_FORCE_INLINE void  glVertexAttribs2fvNV(GLuint index, GLsizei count, const GLfloat * v) { tunisGL.tunisVertexAttribs2fvNV(index, count, v); }
TUNIS_FORCE_INLINE void  glVertexAttribs2hvNV(GLuint index, GLsizei n, const GLhalfNV * v) { tunisGL.tunisVertexAttribs2hvNV(index, n, v); }
TUNIS_FORCE_INLINE void  glVertexAttribs2svNV(GLuint index, GLsizei count, const GLshort * v) { tunisGL.tunisVertexAttribs2svNV(index, count, v); }
TUNIS_FORCE_INLINE void  glVertexAttribs3dvNV(GLuint index, GLsizei count, const GLdouble * v) { tunisGL.tunisVertexAttribs3dvNV(index, count, v); }
TUNIS_FORCE_INLINE void  glVertexAttribs3fvNV(GLuint index, GLsizei count, const GLfloat * v) { tunisGL.tunisVertexAttribs3fvNV(index, count, v); }
TUNIS_FORCE_INLINE void  glVertexAttribs3hvNV(GLuint index, GLsizei n, const GLhalfNV * v) { tunisGL.tunisVertexAttribs3hvNV(index, n, v); }
TUNIS_FORCE_INLINE void  glVertexAttribs3svNV(GLuint index, GLsizei count, const GLshort * v) { tunisGL.tunisVertexAttribs3svNV(index, count, v); }
TUNIS_FORCE_INLINE void  glVertexAttribs4dvNV(GLuint index, GLsizei count, const GLdouble * v) { tunisGL.tunisVertexAttribs4dvNV(index, count, v); }
TUNIS_FORCE_INLINE void  glVertexAttribs4fvNV(GLuint index, GLsizei count, const GLfloat * v) { tunisGL.tunisVertexAttribs4fvNV(index, count, v); }
TUNIS_FORCE_INLINE void  glVertexAttribs4hvNV(GLuint index, GLsizei n, const GLhalfNV * v) { tunisGL.tunisVertexAttribs4hvNV(index, n, v); }
TUNIS_FORCE_INLINE void  glVertexAttribs4svNV(GLuint index, GLsizei count, const GLshort * v) { tunisGL.tunisVertexAttribs4svNV(index, count, v); }
TUNIS_FORCE_INLINE void  glVertexAttribs4ubvNV(GLuint index, GLsizei count, const GLubyte * v) { tunisGL.tunisVertexAttribs4ubvNV(index, count, v); }
TUNIS_FORCE_INLINE void  glVertexBindingDivisor(GLuint bindingindex, GLuint divisor) { tunisGL.tunisVertexBindingDivisor(bindingindex, divisor); }
TUNIS_FORCE_INLINE void  glVertexBlendARB(GLint count) { tunisGL.tunisVertexBlendARB(count); }
TUNIS_FORCE_INLINE void  glVertexBlendEnvfATI(GLenum pname, GLfloat param) { tunisGL.tunisVertexBlendEnvfATI(pname, param); }
TUNIS_FORCE_INLINE void  glVertexBlendEnviATI(GLenum pname, GLint param) { tunisGL.tunisVertexBlendEnviATI(pname, param); }
TUNIS_FORCE_INLINE void  glVertexFormatNV(GLint size, GLenum type, GLsizei stride) { tunisGL.tunisVertexFormatNV(size, type, stride); }
TUNIS_FORCE_INLINE void  glVertexP2ui(GLenum type, GLuint value) { tunisGL.tunisVertexP2ui(type, value); }
TUNIS_FORCE_INLINE void  glVertexP2uiv(GLenum type, const GLuint * value) { tunisGL.tunisVertexP2uiv(type, value); }
TUNIS_FORCE_INLINE void  glVertexP3ui(GLenum type, GLuint value) { tunisGL.tunisVertexP3ui(type, value); }
TUNIS_FORCE_INLINE void  glVertexP3uiv(GLenum type, const GLuint * value) { tunisGL.tunisVertexP3uiv(type, value); }
TUNIS_FORCE_INLINE void  glVertexP4ui(GLenum type, GLuint value) { tunisGL.tunisVertexP4ui(type, value); }
TUNIS_FORCE_INLINE void  glVertexP4uiv(GLenum type, const GLuint * value) { tunisGL.tunisVertexP4uiv(type, value); }
TUNIS_FORCE_INLINE void  glVertexPointer(GLint size, GLenum type, GLsizei stride, const void * pointer) { tunisGL.tunisVertexPointer(size, type, stride, pointer); }
TUNIS_FORCE_INLINE void  glVertexPointerEXT(GLint size, GLenum type, GLsizei stride, GLsizei count, const void * pointer) { tunisGL.tunisVertexPointerEXT(size, type, stride, count, pointer); }
TUNIS_FORCE_INLINE void  glVertexPointerListIBM(GLint size, GLenum type, GLint stride, const void ** pointer, GLint ptrstride) { tunisGL.tunisVertexPointerListIBM(size, type, stride, pointer, ptrstride); }
TUNIS_FORCE_INLINE void  glVertexPointervINTEL(GLint size, GLenum type, const void ** pointer) { tunisGL.tunisVertexPointervINTEL(size, type, pointer); }
TUNIS_FORCE_INLINE void  glVertexStream1dATI(GLenum stream, GLdouble x) { tunisGL.tunisVertexStream1dATI(stream, x); }
TUNIS_FORCE_INLINE void  glVertexStream1dvATI(GLenum stream, const GLdouble * coords) { tunisGL.tunisVertexStream1dvATI(stream, coords); }
TUNIS_FORCE_INLINE void  glVertexStream1fATI(GLenum stream, GLfloat x) { tunisGL.tunisVertexStream1fATI(stream, x); }
TUNIS_FORCE_INLINE void  glVertexStream1fvATI(GLenum stream, const GLfloat * coords) { tunisGL.tunisVertexStream1fvATI(stream, coords); }
TUNIS_FORCE_INLINE void  glVertexStream1iATI(GLenum stream, GLint x) { tunisGL.tunisVertexStream1iATI(stream, x); }
TUNIS_FORCE_INLINE void  glVertexStream1ivATI(GLenum stream, const GLint * coords) { tunisGL.tunisVertexStream1ivATI(stream, coords); }
TUNIS_FORCE_INLINE void  glVertexStream1sATI(GLenum stream, GLshort x) { tunisGL.tunisVertexStream1sATI(stream, x); }
TUNIS_FORCE_INLINE void  glVertexStream1svATI(GLenum stream, const GLshort * coords) { tunisGL.tunisVertexStream1svATI(stream, coords); }
TUNIS_FORCE_INLINE void  glVertexStream2dATI(GLenum stream, GLdouble x, GLdouble y) { tunisGL.tunisVertexStream2dATI(stream, x, y); }
TUNIS_FORCE_INLINE void  glVertexStream2dvATI(GLenum stream, const GLdouble * coords) { tunisGL.tunisVertexStream2dvATI(stream, coords); }
TUNIS_FORCE_INLINE void  glVertexStream2fATI(GLenum stream, GLfloat x, GLfloat y) { tunisGL.tunisVertexStream2fATI(stream, x, y); }
TUNIS_FORCE_INLINE void  glVertexStream2fvATI(GLenum stream, const GLfloat * coords) { tunisGL.tunisVertexStream2fvATI(stream, coords); }
TUNIS_FORCE_INLINE void  glVertexStream2iATI(GLenum stream, GLint x, GLint y) { tunisGL.tunisVertexStream2iATI(stream, x, y); }
TUNIS_FORCE_INLINE void  glVertexStream2ivATI(GLenum stream, const GLint * coords) { tunisGL.tunisVertexStream2ivATI(stream, coords); }
TUNIS_FORCE_INLINE void  glVertexStream2sATI(GLenum stream, GLshort x, GLshort y) { tunisGL.tunisVertexStream2sATI(stream, x, y); }
TUNIS_FORCE_INLINE void  glVertexStream2svATI(GLenum stream, const GLshort * coords) { tunisGL.tunisVertexStream2svATI(stream, coords); }
TUNIS_FORCE_INLINE void  glVertexStream3dATI(GLenum stream, GLdouble x, GLdouble y, GLdouble z) { tunisGL.tunisVertexStream3dATI(stream, x, y, z); }
TUNIS_FORCE_INLINE void  glVertexStream3dvATI(GLenum stream, const GLdouble * coords) { tunisGL.tunisVertexStream3dvATI(stream, coords); }
TUNIS_FORCE_INLINE void  glVertexStream3fATI(GLenum stream, GLfloat x, GLfloat y, GLfloat z) { tunisGL.tunisVertexStream3fATI(stream, x, y, z); }
TUNIS_FORCE_INLINE void  glVertexStream3fvATI(GLenum stream, const GLfloat * coords) { tunisGL.tunisVertexStream3fvATI(stream, coords); }
TUNIS_FORCE_INLINE void  glVertexStream3iATI(GLenum stream, GLint x, GLint y, GLint z) { tunisGL.tunisVertexStream3iATI(stream, x, y, z); }
TUNIS_FORCE_INLINE void  glVertexStream3ivATI(GLenum stream, const GLint * coords) { tunisGL.tunisVertexStream3ivATI(stream, coords); }
TUNIS_FORCE_INLINE void  glVertexStream3sATI(GLenum stream, GLshort x, GLshort y, GLshort z) { tunisGL.tunisVertexStream3sATI(stream, x, y, z); }
TUNIS_FORCE_INLINE void  glVertexStream3svATI(GLenum stream, const GLshort * coords) { tunisGL.tunisVertexStream3svATI(stream, coords); }
TUNIS_FORCE_INLINE void  glVertexStream4dATI(GLenum stream, GLdouble x, GLdouble y, GLdouble z, GLdouble w) { tunisGL.tunisVertexStream4dATI(stream, x, y, z, w); }
TUNIS_FORCE_INLINE void  glVertexStream4dvATI(GLenum stream, const GLdouble * coords) { tunisGL.tunisVertexStream4dvATI(stream, coords); }
TUNIS_FORCE_INLINE void  glVertexStream4fATI(GLenum stream, GLfloat x, GLfloat y, GLfloat z, GLfloat w) { tunisGL.tunisVertexStream4fATI(stream, x, y, z, w); }
TUNIS_FORCE_INLINE void  glVertexStream4fvATI(GLenum stream, const GLfloat * coords) { tunisGL.tunisVertexStream4fvATI(stream, coords); }
TUNIS_FORCE_INLINE void  glVertexStream4iATI(GLenum stream, GLint x, GLint y, GLint z, GLint w) { tunisGL.tunisVertexStream4iATI(stream, x, y, z, w); }
TUNIS_FORCE_INLINE void  glVertexStream4ivATI(GLenum stream, const GLint * coords) { tunisGL.tunisVertexStream4ivATI(stream, coords); }
TUNIS_FORCE_INLINE void  glVertexStream4sATI(GLenum stream, GLshort x, GLshort y, GLshort z, GLshort w) { tunisGL.tunisVertexStream4sATI(stream, x, y, z, w); }
TUNIS_FORCE_INLINE void  glVertexStream4svATI(GLenum stream, const GLshort * coords) { tunisGL.tunisVertexStream4svATI(stream, coords); }
TUNIS_FORCE_INLINE void  glVertexWeightPointerEXT(GLint size, GLenum type, GLsizei stride, const void * pointer) { tunisGL.tunisVertexWeightPointerEXT(size, type, stride, pointer); }
TUNIS_FORCE_INLINE void  glVertexWeightfEXT(GLfloat weight) { tunisGL.tunisVertexWeightfEXT(weight); }
TUNIS_FORCE_INLINE void  glVertexWeightfvEXT(const GLfloat * weight) { tunisGL.tunisVertexWeightfvEXT(weight); }
TUNIS_FORCE_INLINE void  glVertexWeighthNV(GLhalfNV weight) { tunisGL.tunisVertexWeighthNV(weight); }
TUNIS_FORCE_INLINE void  glVertexWeighthvNV(const GLhalfNV * weight) { tunisGL.tunisVertexWeighthvNV(weight); }
TUNIS_FORCE_INLINE GLenum glVideoCaptureNV(GLuint video_capture_slot, GLuint * sequence_num, GLuint64EXT * capture_time) { return tunisGL.tunisVideoCaptureNV(video_capture_slot, sequence_num, capture_time); }
TUNIS_FORCE_INLINE void  glVideoCaptureStreamParameterdvNV(GLuint video_capture_slot, GLuint stream, GLenum pname, const GLdouble * params) { tunisGL.tunisVideoCaptureStreamParameterdvNV(video_capture_slot, stream, pname, params); }
TUNIS_FORCE_INLINE void  glVideoCaptureStreamParameterfvNV(GLuint video_capture_slot, GLuint stream, GLenum pname, const GLfloat * params) { tunisGL.tunisVideoCaptureStreamParameterfvNV(video_capture_slot, stream, pname, params); }
TUNIS_FORCE_INLINE void  glVideoCaptureStreamParameterivNV(GLuint video_capture_slot, GLuint stream, GLenum pname, const GLint * params) { tunisGL.tunisVideoCaptureStreamParameterivNV(video_capture_slot, stream, pname, params); }
TUNIS_FORCE_INLINE void  glViewport(GLint x, GLint y, GLsizei width, GLsizei height) { tunisGL.tunisViewport(x, y, width, height); }
TUNIS_FORCE_INLINE void  glViewportArrayv(GLuint first, GLsizei count, const GLfloat * v) { tunisGL.tunisViewportArrayv(first, count, v); }
TUNIS_FORCE_INLINE void  glViewportArrayvNV(GLuint first, GLsizei count, const GLfloat * v) { tunisGL.tunisViewportArrayvNV(first, count, v); }
TUNIS_FORCE_INLINE void  glViewportArrayvOES(GLuint first, GLsizei count, const GLfloat * v) { tunisGL.tunisViewportArrayvOES(first, count, v); }
TUNIS_FORCE_INLINE void  glViewportIndexedf(GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h) { tunisGL.tunisViewportIndexedf(index, x, y, w, h); }
TUNIS_FORCE_INLINE void  glViewportIndexedfNV(GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h) { tunisGL.tunisViewportIndexedfNV(index, x, y, w, h); }
TUNIS_FORCE_INLINE void  glViewportIndexedfOES(GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h) { tunisGL.tunisViewportIndexedfOES(index, x, y, w, h); }
TUNIS_FORCE_INLINE void  glViewportIndexedfv(GLuint index, const GLfloat * v) { tunisGL.tunisViewportIndexedfv(index, v); }
TUNIS_FORCE_INLINE void  glViewportIndexedfvNV(GLuint index, const GLfloat * v) { tunisGL.tunisViewportIndexedfvNV(index, v); }
TUNIS_FORCE_INLINE void  glViewportIndexedfvOES(GLuint index, const GLfloat * v) { tunisGL.tunisViewportIndexedfvOES(index, v); }
TUNIS_FORCE_INLINE void  glViewportPositionWScaleNV(GLuint index, GLfloat xcoeff, GLfloat ycoeff) { tunisGL.tunisViewportPositionWScaleNV(index, xcoeff, ycoeff); }
TUNIS_FORCE_INLINE void  glViewportSwizzleNV(GLuint index, GLenum swizzlex, GLenum swizzley, GLenum swizzlez, GLenum swizzlew) { tunisGL.tunisViewportSwizzleNV(index, swizzlex, swizzley, swizzlez, swizzlew); }
TUNIS_FORCE_INLINE void  glWaitSemaphoreEXT(GLuint semaphore, GLuint numBufferBarriers, const GLuint * buffers, GLuint numTextureBarriers, const GLuint * textures, const GLenum * srcLayouts) { tunisGL.tunisWaitSemaphoreEXT(semaphore, numBufferBarriers, buffers, numTextureBarriers, textures, srcLayouts); }
TUNIS_FORCE_INLINE void  glWaitSync(GLsync sync, GLbitfield flags, GLuint64 timeout) { tunisGL.tunisWaitSync(sync, flags, timeout); }
TUNIS_FORCE_INLINE void  glWaitSyncAPPLE(GLsync sync, GLbitfield flags, GLuint64 timeout) { tunisGL.tunisWaitSyncAPPLE(sync, flags, timeout); }
TUNIS_FORCE_INLINE void  glWaitVkSemaphoreNV(GLuint64 vkSemaphore) { tunisGL.tunisWaitVkSemaphoreNV(vkSemaphore); }
TUNIS_FORCE_INLINE void  glWeightPathsNV(GLuint resultPath, GLsizei numPaths, const GLuint * paths, const GLfloat * weights) { tunisGL.tunisWeightPathsNV(resultPath, numPaths, paths, weights); }
TUNIS_FORCE_INLINE void  glWeightPointerARB(GLint size, GLenum type, GLsizei stride, const void * pointer) { tunisGL.tunisWeightPointerARB(size, type, stride, pointer); }
TUNIS_FORCE_INLINE void  glWeightPointerOES(GLint size, GLenum type, GLsizei stride, const void * pointer) { tunisGL.tunisWeightPointerOES(size, type, stride, pointer); }
TUNIS_FORCE_INLINE void  glWeightbvARB(GLint size, const GLbyte * weights) { tunisGL.tunisWeightbvARB(size, weights); }
TUNIS_FORCE_INLINE void  glWeightdvARB(GLint size, const GLdouble * weights) { tunisGL.tunisWeightdvARB(size, weights); }
TUNIS_FORCE_INLINE void  glWeightfvARB(GLint size, const GLfloat * weights) { tunisGL.tunisWeightfvARB(size, weights); }
TUNIS_FORCE_INLINE void  glWeightivARB(GLint size, const GLint * weights) { tunisGL.tunisWeightivARB(size, weights); }
TUNIS_FORCE_INLINE void  glWeightsvARB(GLint size, const GLshort * weights) { tunisGL.tunisWeightsvARB(size, weights); }
TUNIS_FORCE_INLINE void  glWeightubvARB(GLint size, const GLubyte * weights) { tunisGL.tunisWeightubvARB(size, weights); }
TUNIS_FORCE_INLINE void  glWeightuivARB(GLint size, const GLuint * weights) { tunisGL.tunisWeightuivARB(size, weights); }
TUNIS_FORCE_INLINE void  glWeightusvARB(GLint size, const GLushort * weights) { tunisGL.tunisWeightusvARB(size, weights); }
TUNIS_FORCE_INLINE void  glWindowPos2d(GLdouble x, GLdouble y) { tunisGL.tunisWindowPos2d(x, y); }
TUNIS_FORCE_INLINE void  glWindowPos2dARB(GLdouble x, GLdouble y) { tunisGL.tunisWindowPos2dARB(x, y); }
TUNIS_FORCE_INLINE void  glWindowPos2dMESA(GLdouble x, GLdouble y) { tunisGL.tunisWindowPos2dMESA(x, y); }
TUNIS_FORCE_INLINE void  glWindowPos2dv(const GLdouble * v) { tunisGL.tunisWindowPos2dv(v); }
TUNIS_FORCE_INLINE void  glWindowPos2dvARB(const GLdouble * v) { tunisGL.tunisWindowPos2dvARB(v); }
TUNIS_FORCE_INLINE void  glWindowPos2dvMESA(const GLdouble * v) { tunisGL.tunisWindowPos2dvMESA(v); }
TUNIS_FORCE_INLINE void  glWindowPos2f(GLfloat x, GLfloat y) { tunisGL.tunisWindowPos2f(x, y); }
TUNIS_FORCE_INLINE void  glWindowPos2fARB(GLfloat x, GLfloat y) { tunisGL.tunisWindowPos2fARB(x, y); }
TUNIS_FORCE_INLINE void  glWindowPos2fMESA(GLfloat x, GLfloat y) { tunisGL.tunisWindowPos2fMESA(x, y); }
TUNIS_FORCE_INLINE void  glWindowPos2fv(const GLfloat * v) { tunisGL.tunisWindowPos2fv(v); }
TUNIS_FORCE_INLINE void  glWindowPos2fvARB(const GLfloat * v) { tunisGL.tunisWindowPos2fvARB(v); }
TUNIS_FORCE_INLINE void  glWindowPos2fvMESA(const GLfloat * v) { tunisGL.tunisWindowPos2fvMESA(v); }
TUNIS_FORCE_INLINE void  glWindowPos2i(GLint x, GLint y) { tunisGL.tunisWindowPos2i(x, y); }
TUNIS_FORCE_INLINE void  glWindowPos2iARB(GLint x, GLint y) { tunisGL.tunisWindowPos2iARB(x, y); }
TUNIS_FORCE_INLINE void  glWindowPos2iMESA(GLint x, GLint y) { tunisGL.tunisWindowPos2iMESA(x, y); }
TUNIS_FORCE_INLINE void  glWindowPos2iv(const GLint * v) { tunisGL.tunisWindowPos2iv(v); }
TUNIS_FORCE_INLINE void  glWindowPos2ivARB(const GLint * v) { tunisGL.tunisWindowPos2ivARB(v); }
TUNIS_FORCE_INLINE void  glWindowPos2ivMESA(const GLint * v) { tunisGL.tunisWindowPos2ivMESA(v); }
TUNIS_FORCE_INLINE void  glWindowPos2s(GLshort x, GLshort y) { tunisGL.tunisWindowPos2s(x, y); }
TUNIS_FORCE_INLINE void  glWindowPos2sARB(GLshort x, GLshort y) { tunisGL.tunisWindowPos2sARB(x, y); }
TUNIS_FORCE_INLINE void  glWindowPos2sMESA(GLshort x, GLshort y) { tunisGL.tunisWindowPos2sMESA(x, y); }
TUNIS_FORCE_INLINE void  glWindowPos2sv(const GLshort * v) { tunisGL.tunisWindowPos2sv(v); }
TUNIS_FORCE_INLINE void  glWindowPos2svARB(const GLshort * v) { tunisGL.tunisWindowPos2svARB(v); }
TUNIS_FORCE_INLINE void  glWindowPos2svMESA(const GLshort * v) { tunisGL.tunisWindowPos2svMESA(v); }
TUNIS_FORCE_INLINE void  glWindowPos3d(GLdouble x, GLdouble y, GLdouble z) { tunisGL.tunisWindowPos3d(x, y, z); }
TUNIS_FORCE_INLINE void  glWindowPos3dARB(GLdouble x, GLdouble y, GLdouble z) { tunisGL.tunisWindowPos3dARB(x, y, z); }
TUNIS_FORCE_INLINE void  glWindowPos3dMESA(GLdouble x, GLdouble y, GLdouble z) { tunisGL.tunisWindowPos3dMESA(x, y, z); }
TUNIS_FORCE_INLINE void  glWindowPos3dv(const GLdouble * v) { tunisGL.tunisWindowPos3dv(v); }
TUNIS_FORCE_INLINE void  glWindowPos3dvARB(const GLdouble * v) { tunisGL.tunisWindowPos3dvARB(v); }
TUNIS_FORCE_INLINE void  glWindowPos3dvMESA(const GLdouble * v) { tunisGL.tunisWindowPos3dvMESA(v); }
TUNIS_FORCE_INLINE void  glWindowPos3f(GLfloat x, GLfloat y, GLfloat z) { tunisGL.tunisWindowPos3f(x, y, z); }
TUNIS_FORCE_INLINE void  glWindowPos3fARB(GLfloat x, GLfloat y, GLfloat z) { tunisGL.tunisWindowPos3fARB(x, y, z); }
TUNIS_FORCE_INLINE void  glWindowPos3fMESA(GLfloat x, GLfloat y, GLfloat z) { tunisGL.tunisWindowPos3fMESA(x, y, z); }
TUNIS_FORCE_INLINE void  glWindowPos3fv(const GLfloat * v) { tunisGL.tunisWindowPos3fv(v); }
TUNIS_FORCE_INLINE void  glWindowPos3fvARB(const GLfloat * v) { tunisGL.tunisWindowPos3fvARB(v); }
TUNIS_FORCE_INLINE void  glWindowPos3fvMESA(const GLfloat * v) { tunisGL.tunisWindowPos3fvMESA(v); }
TUNIS_FORCE_INLINE void  glWindowPos3i(GLint x, GLint y, GLint z) { tunisGL.tunisWindowPos3i(x, y, z); }
TUNIS_FORCE_INLINE void  glWindowPos3iARB(GLint x, GLint y, GLint z) { tunisGL.tunisWindowPos3iARB(x, y, z); }
TUNIS_FORCE_INLINE void  glWindowPos3iMESA(GLint x, GLint y, GLint z) { tunisGL.tunisWindowPos3iMESA(x, y, z); }
TUNIS_FORCE_INLINE void  glWindowPos3iv(const GLint * v) { tunisGL.tunisWindowPos3iv(v); }
TUNIS_FORCE_INLINE void  glWindowPos3ivARB(const GLint * v) { tunisGL.tunisWindowPos3ivARB(v); }
TUNIS_FORCE_INLINE void  glWindowPos3ivMESA(const GLint * v) { tunisGL.tunisWindowPos3ivMESA(v); }
TUNIS_FORCE_INLINE void  glWindowPos3s(GLshort x, GLshort y, GLshort z) { tunisGL.tunisWindowPos3s(x, y, z); }
TUNIS_FORCE_INLINE void  glWindowPos3sARB(GLshort x, GLshort y, GLshort z) { tunisGL.tunisWindowPos3sARB(x, y, z); }
TUNIS_FORCE_INLINE void  glWindowPos3sMESA(GLshort x, GLshort y, GLshort z) { tunisGL.tunisWindowPos3sMESA(x, y, z); }
TUNIS_FORCE_INLINE void  glWindowPos3sv(const GLshort * v) { tunisGL.tunisWindowPos3sv(v); }
TUNIS_FORCE_INLINE void  glWindowPos3svARB(const GLshort * v) { tunisGL.tunisWindowPos3svARB(v); }
TUNIS_FORCE_INLINE void  glWindowPos3svMESA(const GLshort * v) { tunisGL.tunisWindowPos3svMESA(v); }
TUNIS_FORCE_INLINE void  glWindowPos4dMESA(GLdouble x, GLdouble y, GLdouble z, GLdouble w) { tunisGL.tunisWindowPos4dMESA(x, y, z, w); }
TUNIS_FORCE_INLINE void  glWindowPos4dvMESA(const GLdouble * v) { tunisGL.tunisWindowPos4dvMESA(v); }
TUNIS_FORCE_INLINE void  glWindowPos4fMESA(GLfloat x, GLfloat y, GLfloat z, GLfloat w) { tunisGL.tunisWindowPos4fMESA(x, y, z, w); }
TUNIS_FORCE_INLINE void  glWindowPos4fvMESA(const GLfloat * v) { tunisGL.tunisWindowPos4fvMESA(v); }
TUNIS_FORCE_INLINE void  glWindowPos4iMESA(GLint x, GLint y, GLint z, GLint w) { tunisGL.tunisWindowPos4iMESA(x, y, z, w); }
TUNIS_FORCE_INLINE void  glWindowPos4ivMESA(const GLint * v) { tunisGL.tunisWindowPos4ivMESA(v); }
TUNIS_FORCE_INLINE void  glWindowPos4sMESA(GLshort x, GLshort y, GLshort z, GLshort w) { tunisGL.tunisWindowPos4sMESA(x, y, z, w); }
TUNIS_FORCE_INLINE void  glWindowPos4svMESA(const GLshort * v) { tunisGL.tunisWindowPos4svMESA(v); }
TUNIS_FORCE_INLINE void  glWindowRectanglesEXT(GLenum mode, GLsizei count, const GLint * box) { tunisGL.tunisWindowRectanglesEXT(mode, count, box); }
TUNIS_FORCE_INLINE void  glWriteMaskEXT(GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW) { tunisGL.tunisWriteMaskEXT(res, in, outX, outY, outZ, outW); }


#ifdef __cplusplus
} /* extern "C" */
#endif

#ifdef TUNIS_GL_IMPLEMENTATION

#include <stdio.h>
#include <string.h>

#if !defined(NDEBUG)
    #include <time.h>
#endif

#if !defined(_WIN32) && !defined(__EMSCRIPTEN__)
    #include <dlfcn.h>
#endif

#ifndef TUNIS_SSCANF
    #if defined(_MSC_VER)
        #define TUNIS_SSCANF sscanf_s
    #else
        #define TUNIS_SSCANF sscanf
    #endif
#endif

#ifdef __cplusplus
extern "C"  {
#endif

#if defined(__EMSCRIPTEN__)
    extern void* emscripten_GetProcAddress(const char *name_);
#elif defined(_WIN32) && !defined(__CYGWIN__)
    static HMODULE s_tunisGLLib = NULL;
#else
    static void *s_tunisGLLib = NULL;
#endif

TunisGLConfig tunisGL;

static TunisGLProc tunisGLGetProcAddressDefaultImpl(const char *procName)
{
    TunisGLProc proc;
#if defined(__EMSCRIPTEN__)
    proc = (TunisGLProc)emscripten_GetProcAddress(procName);
#elif defined(_WIN32)
    proc = (TunisGLProc)GetProcAddress(s_tunisGLLib, procName);
    if (!proc)
    {
        proc = (TunisGLProc)wglGetProcAddress(procName);
    }
#else
    *(void **)(&proc) = dlsym(s_tunisGLLib, procName);
#endif
    return proc;
}

TunisGLGetProcAddressFunc tunisGLGetProcAddress = tunisGLGetProcAddressDefaultImpl;

static void tunisGLAddExtension(khronos_int8_t isGLES, const char* const extensionStr, khronos_usize_t extensionStrLength) {
    if(isGLES) {
        if (!tunisGL.support[GL_AMD_compressed_3DC_texture] && (extensionStrLength == 29) && strncmp(extensionStr, "GL_AMD_compressed_3DC_texture", extensionStrLength) == 0) { tunisGL.support[GL_AMD_compressed_3DC_texture] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_AMD_compressed_ATC_texture] && (extensionStrLength == 29) && strncmp(extensionStr, "GL_AMD_compressed_ATC_texture", extensionStrLength) == 0) { tunisGL.support[GL_AMD_compressed_ATC_texture] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_AMD_program_binary_Z400] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_AMD_program_binary_Z400", extensionStrLength) == 0) { tunisGL.support[GL_AMD_program_binary_Z400] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ANDROID_extension_pack_es31a] && (extensionStrLength == 31) && strncmp(extensionStr, "GL_ANDROID_extension_pack_es31a", extensionStrLength) == 0) { tunisGL.support[GL_ANDROID_extension_pack_es31a] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ANGLE_depth_texture] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_ANGLE_depth_texture", extensionStrLength) == 0) { tunisGL.support[GL_ANGLE_depth_texture] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ANGLE_framebuffer_blit] && (extensionStrLength == 25) && strncmp(extensionStr, "GL_ANGLE_framebuffer_blit", extensionStrLength) == 0) { tunisGL.support[GL_ANGLE_framebuffer_blit] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ANGLE_framebuffer_multisample] && (extensionStrLength == 32) && strncmp(extensionStr, "GL_ANGLE_framebuffer_multisample", extensionStrLength) == 0) { tunisGL.support[GL_ANGLE_framebuffer_multisample] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ANGLE_instanced_arrays] && (extensionStrLength == 25) && strncmp(extensionStr, "GL_ANGLE_instanced_arrays", extensionStrLength) == 0) { tunisGL.support[GL_ANGLE_instanced_arrays] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ANGLE_pack_reverse_row_order] && (extensionStrLength == 31) && strncmp(extensionStr, "GL_ANGLE_pack_reverse_row_order", extensionStrLength) == 0) { tunisGL.support[GL_ANGLE_pack_reverse_row_order] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ANGLE_program_binary] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_ANGLE_program_binary", extensionStrLength) == 0) { tunisGL.support[GL_ANGLE_program_binary] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ANGLE_texture_compression_dxt3] && (extensionStrLength == 33) && strncmp(extensionStr, "GL_ANGLE_texture_compression_dxt3", extensionStrLength) == 0) { tunisGL.support[GL_ANGLE_texture_compression_dxt3] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ANGLE_texture_compression_dxt5] && (extensionStrLength == 33) && strncmp(extensionStr, "GL_ANGLE_texture_compression_dxt5", extensionStrLength) == 0) { tunisGL.support[GL_ANGLE_texture_compression_dxt5] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ANGLE_texture_usage] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_ANGLE_texture_usage", extensionStrLength) == 0) { tunisGL.support[GL_ANGLE_texture_usage] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ANGLE_translated_shader_source] && (extensionStrLength == 33) && strncmp(extensionStr, "GL_ANGLE_translated_shader_source", extensionStrLength) == 0) { tunisGL.support[GL_ANGLE_translated_shader_source] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_APPLE_clip_distance] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_APPLE_clip_distance", extensionStrLength) == 0) { tunisGL.support[GL_APPLE_clip_distance] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_APPLE_color_buffer_packed_float] && (extensionStrLength == 34) && strncmp(extensionStr, "GL_APPLE_color_buffer_packed_float", extensionStrLength) == 0) { tunisGL.support[GL_APPLE_color_buffer_packed_float] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_APPLE_copy_texture_levels] && (extensionStrLength == 28) && strncmp(extensionStr, "GL_APPLE_copy_texture_levels", extensionStrLength) == 0) { tunisGL.support[GL_APPLE_copy_texture_levels] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_APPLE_framebuffer_multisample] && (extensionStrLength == 32) && strncmp(extensionStr, "GL_APPLE_framebuffer_multisample", extensionStrLength) == 0) { tunisGL.support[GL_APPLE_framebuffer_multisample] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_APPLE_sync] && (extensionStrLength == 13) && strncmp(extensionStr, "GL_APPLE_sync", extensionStrLength) == 0) { tunisGL.support[GL_APPLE_sync] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_APPLE_texture_2D_limited_npot] && (extensionStrLength == 32) && strncmp(extensionStr, "GL_APPLE_texture_2D_limited_npot", extensionStrLength) == 0) { tunisGL.support[GL_APPLE_texture_2D_limited_npot] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_APPLE_texture_format_BGRA8888] && (extensionStrLength == 32) && strncmp(extensionStr, "GL_APPLE_texture_format_BGRA8888", extensionStrLength) == 0) { tunisGL.support[GL_APPLE_texture_format_BGRA8888] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_APPLE_texture_max_level] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_APPLE_texture_max_level", extensionStrLength) == 0) { tunisGL.support[GL_APPLE_texture_max_level] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_APPLE_texture_packed_float] && (extensionStrLength == 29) && strncmp(extensionStr, "GL_APPLE_texture_packed_float", extensionStrLength) == 0) { tunisGL.support[GL_APPLE_texture_packed_float] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARM_mali_program_binary] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_ARM_mali_program_binary", extensionStrLength) == 0) { tunisGL.support[GL_ARM_mali_program_binary] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARM_mali_shader_binary] && (extensionStrLength == 25) && strncmp(extensionStr, "GL_ARM_mali_shader_binary", extensionStrLength) == 0) { tunisGL.support[GL_ARM_mali_shader_binary] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARM_rgba8] && (extensionStrLength == 12) && strncmp(extensionStr, "GL_ARM_rgba8", extensionStrLength) == 0) { tunisGL.support[GL_ARM_rgba8] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARM_shader_framebuffer_fetch] && (extensionStrLength == 31) && strncmp(extensionStr, "GL_ARM_shader_framebuffer_fetch", extensionStrLength) == 0) { tunisGL.support[GL_ARM_shader_framebuffer_fetch] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARM_shader_framebuffer_fetch_depth_stencil] && (extensionStrLength == 45) && strncmp(extensionStr, "GL_ARM_shader_framebuffer_fetch_depth_stencil", extensionStrLength) == 0) { tunisGL.support[GL_ARM_shader_framebuffer_fetch_depth_stencil] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_DMP_program_binary] && (extensionStrLength == 21) && strncmp(extensionStr, "GL_DMP_program_binary", extensionStrLength) == 0) { tunisGL.support[GL_DMP_program_binary] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_DMP_shader_binary] && (extensionStrLength == 20) && strncmp(extensionStr, "GL_DMP_shader_binary", extensionStrLength) == 0) { tunisGL.support[GL_DMP_shader_binary] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_EGL_image_array] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_EXT_EGL_image_array", extensionStrLength) == 0) { tunisGL.support[GL_EXT_EGL_image_array] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_YUV_target] && (extensionStrLength == 17) && strncmp(extensionStr, "GL_EXT_YUV_target", extensionStrLength) == 0) { tunisGL.support[GL_EXT_YUV_target] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_base_instance] && (extensionStrLength == 20) && strncmp(extensionStr, "GL_EXT_base_instance", extensionStrLength) == 0) { tunisGL.support[GL_EXT_base_instance] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_blend_func_extended] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_EXT_blend_func_extended", extensionStrLength) == 0) { tunisGL.support[GL_EXT_blend_func_extended] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_blend_minmax] && (extensionStrLength == 19) && strncmp(extensionStr, "GL_EXT_blend_minmax", extensionStrLength) == 0) { tunisGL.support[GL_EXT_blend_minmax] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_buffer_storage] && (extensionStrLength == 21) && strncmp(extensionStr, "GL_EXT_buffer_storage", extensionStrLength) == 0) { tunisGL.support[GL_EXT_buffer_storage] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_clear_texture] && (extensionStrLength == 20) && strncmp(extensionStr, "GL_EXT_clear_texture", extensionStrLength) == 0) { tunisGL.support[GL_EXT_clear_texture] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_clip_control] && (extensionStrLength == 19) && strncmp(extensionStr, "GL_EXT_clip_control", extensionStrLength) == 0) { tunisGL.support[GL_EXT_clip_control] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_clip_cull_distance] && (extensionStrLength == 25) && strncmp(extensionStr, "GL_EXT_clip_cull_distance", extensionStrLength) == 0) { tunisGL.support[GL_EXT_clip_cull_distance] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_color_buffer_float] && (extensionStrLength == 25) && strncmp(extensionStr, "GL_EXT_color_buffer_float", extensionStrLength) == 0) { tunisGL.support[GL_EXT_color_buffer_float] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_color_buffer_half_float] && (extensionStrLength == 30) && strncmp(extensionStr, "GL_EXT_color_buffer_half_float", extensionStrLength) == 0) { tunisGL.support[GL_EXT_color_buffer_half_float] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_conservative_depth] && (extensionStrLength == 25) && strncmp(extensionStr, "GL_EXT_conservative_depth", extensionStrLength) == 0) { tunisGL.support[GL_EXT_conservative_depth] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_copy_image] && (extensionStrLength == 17) && strncmp(extensionStr, "GL_EXT_copy_image", extensionStrLength) == 0) { tunisGL.support[GL_EXT_copy_image] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_discard_framebuffer] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_EXT_discard_framebuffer", extensionStrLength) == 0) { tunisGL.support[GL_EXT_discard_framebuffer] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_disjoint_timer_query] && (extensionStrLength == 27) && strncmp(extensionStr, "GL_EXT_disjoint_timer_query", extensionStrLength) == 0) { tunisGL.support[GL_EXT_disjoint_timer_query] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_draw_buffers] && (extensionStrLength == 19) && strncmp(extensionStr, "GL_EXT_draw_buffers", extensionStrLength) == 0) { tunisGL.support[GL_EXT_draw_buffers] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_draw_buffers_indexed] && (extensionStrLength == 27) && strncmp(extensionStr, "GL_EXT_draw_buffers_indexed", extensionStrLength) == 0) { tunisGL.support[GL_EXT_draw_buffers_indexed] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_draw_elements_base_vertex] && (extensionStrLength == 32) && strncmp(extensionStr, "GL_EXT_draw_elements_base_vertex", extensionStrLength) == 0) { tunisGL.support[GL_EXT_draw_elements_base_vertex] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_draw_transform_feedback] && (extensionStrLength == 30) && strncmp(extensionStr, "GL_EXT_draw_transform_feedback", extensionStrLength) == 0) { tunisGL.support[GL_EXT_draw_transform_feedback] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_external_buffer] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_EXT_external_buffer", extensionStrLength) == 0) { tunisGL.support[GL_EXT_external_buffer] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_float_blend] && (extensionStrLength == 18) && strncmp(extensionStr, "GL_EXT_float_blend", extensionStrLength) == 0) { tunisGL.support[GL_EXT_float_blend] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_geometry_point_size] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_EXT_geometry_point_size", extensionStrLength) == 0) { tunisGL.support[GL_EXT_geometry_point_size] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_geometry_shader] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_EXT_geometry_shader", extensionStrLength) == 0) { tunisGL.support[GL_EXT_geometry_shader] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_gpu_shader5] && (extensionStrLength == 18) && strncmp(extensionStr, "GL_EXT_gpu_shader5", extensionStrLength) == 0) { tunisGL.support[GL_EXT_gpu_shader5] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_instanced_arrays] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_EXT_instanced_arrays", extensionStrLength) == 0) { tunisGL.support[GL_EXT_instanced_arrays] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_map_buffer_range] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_EXT_map_buffer_range", extensionStrLength) == 0) { tunisGL.support[GL_EXT_map_buffer_range] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_memory_object] && (extensionStrLength == 20) && strncmp(extensionStr, "GL_EXT_memory_object", extensionStrLength) == 0) { tunisGL.support[GL_EXT_memory_object] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_memory_object_fd] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_EXT_memory_object_fd", extensionStrLength) == 0) { tunisGL.support[GL_EXT_memory_object_fd] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_memory_object_win32] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_EXT_memory_object_win32", extensionStrLength) == 0) { tunisGL.support[GL_EXT_memory_object_win32] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_multi_draw_arrays] && (extensionStrLength == 24) && strncmp(extensionStr, "GL_EXT_multi_draw_arrays", extensionStrLength) == 0) { tunisGL.support[GL_EXT_multi_draw_arrays] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_multi_draw_indirect] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_EXT_multi_draw_indirect", extensionStrLength) == 0) { tunisGL.support[GL_EXT_multi_draw_indirect] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_multisampled_compatibility] && (extensionStrLength == 33) && strncmp(extensionStr, "GL_EXT_multisampled_compatibility", extensionStrLength) == 0) { tunisGL.support[GL_EXT_multisampled_compatibility] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_multisampled_render_to_texture] && (extensionStrLength == 37) && strncmp(extensionStr, "GL_EXT_multisampled_render_to_texture", extensionStrLength) == 0) { tunisGL.support[GL_EXT_multisampled_render_to_texture] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_multiview_draw_buffers] && (extensionStrLength == 29) && strncmp(extensionStr, "GL_EXT_multiview_draw_buffers", extensionStrLength) == 0) { tunisGL.support[GL_EXT_multiview_draw_buffers] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_occlusion_query_boolean] && (extensionStrLength == 30) && strncmp(extensionStr, "GL_EXT_occlusion_query_boolean", extensionStrLength) == 0) { tunisGL.support[GL_EXT_occlusion_query_boolean] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_primitive_bounding_box] && (extensionStrLength == 29) && strncmp(extensionStr, "GL_EXT_primitive_bounding_box", extensionStrLength) == 0) { tunisGL.support[GL_EXT_primitive_bounding_box] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_protected_textures] && (extensionStrLength == 25) && strncmp(extensionStr, "GL_EXT_protected_textures", extensionStrLength) == 0) { tunisGL.support[GL_EXT_protected_textures] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_pvrtc_sRGB] && (extensionStrLength == 17) && strncmp(extensionStr, "GL_EXT_pvrtc_sRGB", extensionStrLength) == 0) { tunisGL.support[GL_EXT_pvrtc_sRGB] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_read_format_bgra] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_EXT_read_format_bgra", extensionStrLength) == 0) { tunisGL.support[GL_EXT_read_format_bgra] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_render_snorm] && (extensionStrLength == 19) && strncmp(extensionStr, "GL_EXT_render_snorm", extensionStrLength) == 0) { tunisGL.support[GL_EXT_render_snorm] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_robustness] && (extensionStrLength == 17) && strncmp(extensionStr, "GL_EXT_robustness", extensionStrLength) == 0) { tunisGL.support[GL_EXT_robustness] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_sRGB] && (extensionStrLength == 11) && strncmp(extensionStr, "GL_EXT_sRGB", extensionStrLength) == 0) { tunisGL.support[GL_EXT_sRGB] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_sRGB_write_control] && (extensionStrLength == 25) && strncmp(extensionStr, "GL_EXT_sRGB_write_control", extensionStrLength) == 0) { tunisGL.support[GL_EXT_sRGB_write_control] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_semaphore] && (extensionStrLength == 16) && strncmp(extensionStr, "GL_EXT_semaphore", extensionStrLength) == 0) { tunisGL.support[GL_EXT_semaphore] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_semaphore_fd] && (extensionStrLength == 19) && strncmp(extensionStr, "GL_EXT_semaphore_fd", extensionStrLength) == 0) { tunisGL.support[GL_EXT_semaphore_fd] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_semaphore_win32] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_EXT_semaphore_win32", extensionStrLength) == 0) { tunisGL.support[GL_EXT_semaphore_win32] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_shader_group_vote] && (extensionStrLength == 24) && strncmp(extensionStr, "GL_EXT_shader_group_vote", extensionStrLength) == 0) { tunisGL.support[GL_EXT_shader_group_vote] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_shader_implicit_conversions] && (extensionStrLength == 34) && strncmp(extensionStr, "GL_EXT_shader_implicit_conversions", extensionStrLength) == 0) { tunisGL.support[GL_EXT_shader_implicit_conversions] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_shader_io_blocks] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_EXT_shader_io_blocks", extensionStrLength) == 0) { tunisGL.support[GL_EXT_shader_io_blocks] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_shader_non_constant_global_initializers] && (extensionStrLength == 46) && strncmp(extensionStr, "GL_EXT_shader_non_constant_global_initializers", extensionStrLength) == 0) { tunisGL.support[GL_EXT_shader_non_constant_global_initializers] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_shader_pixel_local_storage] && (extensionStrLength == 33) && strncmp(extensionStr, "GL_EXT_shader_pixel_local_storage", extensionStrLength) == 0) { tunisGL.support[GL_EXT_shader_pixel_local_storage] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_shader_pixel_local_storage2] && (extensionStrLength == 34) && strncmp(extensionStr, "GL_EXT_shader_pixel_local_storage2", extensionStrLength) == 0) { tunisGL.support[GL_EXT_shader_pixel_local_storage2] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_shader_texture_lod] && (extensionStrLength == 25) && strncmp(extensionStr, "GL_EXT_shader_texture_lod", extensionStrLength) == 0) { tunisGL.support[GL_EXT_shader_texture_lod] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_shadow_samplers] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_EXT_shadow_samplers", extensionStrLength) == 0) { tunisGL.support[GL_EXT_shadow_samplers] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_sparse_texture] && (extensionStrLength == 21) && strncmp(extensionStr, "GL_EXT_sparse_texture", extensionStrLength) == 0) { tunisGL.support[GL_EXT_sparse_texture] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_sparse_texture2] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_EXT_sparse_texture2", extensionStrLength) == 0) { tunisGL.support[GL_EXT_sparse_texture2] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_tessellation_point_size] && (extensionStrLength == 30) && strncmp(extensionStr, "GL_EXT_tessellation_point_size", extensionStrLength) == 0) { tunisGL.support[GL_EXT_tessellation_point_size] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_tessellation_shader] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_EXT_tessellation_shader", extensionStrLength) == 0) { tunisGL.support[GL_EXT_tessellation_shader] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_texture_border_clamp] && (extensionStrLength == 27) && strncmp(extensionStr, "GL_EXT_texture_border_clamp", extensionStrLength) == 0) { tunisGL.support[GL_EXT_texture_border_clamp] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_texture_buffer] && (extensionStrLength == 21) && strncmp(extensionStr, "GL_EXT_texture_buffer", extensionStrLength) == 0) { tunisGL.support[GL_EXT_texture_buffer] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_texture_compression_astc_decode_mode] && (extensionStrLength == 43) && strncmp(extensionStr, "GL_EXT_texture_compression_astc_decode_mode", extensionStrLength) == 0) { tunisGL.support[GL_EXT_texture_compression_astc_decode_mode] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_texture_compression_bptc] && (extensionStrLength == 31) && strncmp(extensionStr, "GL_EXT_texture_compression_bptc", extensionStrLength) == 0) { tunisGL.support[GL_EXT_texture_compression_bptc] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_texture_compression_dxt1] && (extensionStrLength == 31) && strncmp(extensionStr, "GL_EXT_texture_compression_dxt1", extensionStrLength) == 0) { tunisGL.support[GL_EXT_texture_compression_dxt1] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_texture_compression_rgtc] && (extensionStrLength == 31) && strncmp(extensionStr, "GL_EXT_texture_compression_rgtc", extensionStrLength) == 0) { tunisGL.support[GL_EXT_texture_compression_rgtc] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_texture_compression_s3tc_srgb] && (extensionStrLength == 36) && strncmp(extensionStr, "GL_EXT_texture_compression_s3tc_srgb", extensionStrLength) == 0) { tunisGL.support[GL_EXT_texture_compression_s3tc_srgb] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_texture_cube_map_array] && (extensionStrLength == 29) && strncmp(extensionStr, "GL_EXT_texture_cube_map_array", extensionStrLength) == 0) { tunisGL.support[GL_EXT_texture_cube_map_array] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_texture_filter_anisotropic] && (extensionStrLength == 33) && strncmp(extensionStr, "GL_EXT_texture_filter_anisotropic", extensionStrLength) == 0) { tunisGL.support[GL_EXT_texture_filter_anisotropic] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_texture_format_BGRA8888] && (extensionStrLength == 30) && strncmp(extensionStr, "GL_EXT_texture_format_BGRA8888", extensionStrLength) == 0) { tunisGL.support[GL_EXT_texture_format_BGRA8888] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_texture_format_sRGB_override] && (extensionStrLength == 35) && strncmp(extensionStr, "GL_EXT_texture_format_sRGB_override", extensionStrLength) == 0) { tunisGL.support[GL_EXT_texture_format_sRGB_override] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_texture_lod_bias] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_EXT_texture_lod_bias", extensionStrLength) == 0) { tunisGL.support[GL_EXT_texture_lod_bias] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_texture_mirror_clamp_to_edge] && (extensionStrLength == 35) && strncmp(extensionStr, "GL_EXT_texture_mirror_clamp_to_edge", extensionStrLength) == 0) { tunisGL.support[GL_EXT_texture_mirror_clamp_to_edge] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_texture_norm16] && (extensionStrLength == 21) && strncmp(extensionStr, "GL_EXT_texture_norm16", extensionStrLength) == 0) { tunisGL.support[GL_EXT_texture_norm16] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_texture_rg] && (extensionStrLength == 17) && strncmp(extensionStr, "GL_EXT_texture_rg", extensionStrLength) == 0) { tunisGL.support[GL_EXT_texture_rg] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_texture_sRGB_R8] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_EXT_texture_sRGB_R8", extensionStrLength) == 0) { tunisGL.support[GL_EXT_texture_sRGB_R8] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_texture_sRGB_RG8] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_EXT_texture_sRGB_RG8", extensionStrLength) == 0) { tunisGL.support[GL_EXT_texture_sRGB_RG8] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_texture_storage] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_EXT_texture_storage", extensionStrLength) == 0) { tunisGL.support[GL_EXT_texture_storage] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_texture_type_2_10_10_10_REV] && (extensionStrLength == 34) && strncmp(extensionStr, "GL_EXT_texture_type_2_10_10_10_REV", extensionStrLength) == 0) { tunisGL.support[GL_EXT_texture_type_2_10_10_10_REV] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_texture_view] && (extensionStrLength == 19) && strncmp(extensionStr, "GL_EXT_texture_view", extensionStrLength) == 0) { tunisGL.support[GL_EXT_texture_view] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_unpack_subimage] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_EXT_unpack_subimage", extensionStrLength) == 0) { tunisGL.support[GL_EXT_unpack_subimage] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_win32_keyed_mutex] && (extensionStrLength == 24) && strncmp(extensionStr, "GL_EXT_win32_keyed_mutex", extensionStrLength) == 0) { tunisGL.support[GL_EXT_win32_keyed_mutex] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_FJ_shader_binary_GCCSO] && (extensionStrLength == 25) && strncmp(extensionStr, "GL_FJ_shader_binary_GCCSO", extensionStrLength) == 0) { tunisGL.support[GL_FJ_shader_binary_GCCSO] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_IMG_bindless_texture] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_IMG_bindless_texture", extensionStrLength) == 0) { tunisGL.support[GL_IMG_bindless_texture] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_IMG_framebuffer_downsample] && (extensionStrLength == 29) && strncmp(extensionStr, "GL_IMG_framebuffer_downsample", extensionStrLength) == 0) { tunisGL.support[GL_IMG_framebuffer_downsample] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_IMG_multisampled_render_to_texture] && (extensionStrLength == 37) && strncmp(extensionStr, "GL_IMG_multisampled_render_to_texture", extensionStrLength) == 0) { tunisGL.support[GL_IMG_multisampled_render_to_texture] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_IMG_program_binary] && (extensionStrLength == 21) && strncmp(extensionStr, "GL_IMG_program_binary", extensionStrLength) == 0) { tunisGL.support[GL_IMG_program_binary] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_IMG_read_format] && (extensionStrLength == 18) && strncmp(extensionStr, "GL_IMG_read_format", extensionStrLength) == 0) { tunisGL.support[GL_IMG_read_format] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_IMG_shader_binary] && (extensionStrLength == 20) && strncmp(extensionStr, "GL_IMG_shader_binary", extensionStrLength) == 0) { tunisGL.support[GL_IMG_shader_binary] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_IMG_texture_compression_pvrtc] && (extensionStrLength == 32) && strncmp(extensionStr, "GL_IMG_texture_compression_pvrtc", extensionStrLength) == 0) { tunisGL.support[GL_IMG_texture_compression_pvrtc] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_IMG_texture_compression_pvrtc2] && (extensionStrLength == 33) && strncmp(extensionStr, "GL_IMG_texture_compression_pvrtc2", extensionStrLength) == 0) { tunisGL.support[GL_IMG_texture_compression_pvrtc2] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_IMG_texture_env_enhanced_fixed_function] && (extensionStrLength == 42) && strncmp(extensionStr, "GL_IMG_texture_env_enhanced_fixed_function", extensionStrLength) == 0) { tunisGL.support[GL_IMG_texture_env_enhanced_fixed_function] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_IMG_texture_filter_cubic] && (extensionStrLength == 27) && strncmp(extensionStr, "GL_IMG_texture_filter_cubic", extensionStrLength) == 0) { tunisGL.support[GL_IMG_texture_filter_cubic] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_IMG_user_clip_plane] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_IMG_user_clip_plane", extensionStrLength) == 0) { tunisGL.support[GL_IMG_user_clip_plane] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_MESA_framebuffer_flip_y] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_MESA_framebuffer_flip_y", extensionStrLength) == 0) { tunisGL.support[GL_MESA_framebuffer_flip_y] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_MESA_program_binary_formats] && (extensionStrLength == 30) && strncmp(extensionStr, "GL_MESA_program_binary_formats", extensionStrLength) == 0) { tunisGL.support[GL_MESA_program_binary_formats] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_MESA_shader_integer_functions] && (extensionStrLength == 32) && strncmp(extensionStr, "GL_MESA_shader_integer_functions", extensionStrLength) == 0) { tunisGL.support[GL_MESA_shader_integer_functions] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NVX_blend_equation_advanced_multi_draw_buffers] && (extensionStrLength == 49) && strncmp(extensionStr, "GL_NVX_blend_equation_advanced_multi_draw_buffers", extensionStrLength) == 0) { tunisGL.support[GL_NVX_blend_equation_advanced_multi_draw_buffers] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_copy_buffer] && (extensionStrLength == 17) && strncmp(extensionStr, "GL_NV_copy_buffer", extensionStrLength) == 0) { tunisGL.support[GL_NV_copy_buffer] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_coverage_sample] && (extensionStrLength == 21) && strncmp(extensionStr, "GL_NV_coverage_sample", extensionStrLength) == 0) { tunisGL.support[GL_NV_coverage_sample] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_depth_nonlinear] && (extensionStrLength == 21) && strncmp(extensionStr, "GL_NV_depth_nonlinear", extensionStrLength) == 0) { tunisGL.support[GL_NV_depth_nonlinear] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_draw_buffers] && (extensionStrLength == 18) && strncmp(extensionStr, "GL_NV_draw_buffers", extensionStrLength) == 0) { tunisGL.support[GL_NV_draw_buffers] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_draw_instanced] && (extensionStrLength == 20) && strncmp(extensionStr, "GL_NV_draw_instanced", extensionStrLength) == 0) { tunisGL.support[GL_NV_draw_instanced] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_explicit_attrib_location] && (extensionStrLength == 30) && strncmp(extensionStr, "GL_NV_explicit_attrib_location", extensionStrLength) == 0) { tunisGL.support[GL_NV_explicit_attrib_location] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_fbo_color_attachments] && (extensionStrLength == 27) && strncmp(extensionStr, "GL_NV_fbo_color_attachments", extensionStrLength) == 0) { tunisGL.support[GL_NV_fbo_color_attachments] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_fence] && (extensionStrLength == 11) && strncmp(extensionStr, "GL_NV_fence", extensionStrLength) == 0) { tunisGL.support[GL_NV_fence] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_framebuffer_blit] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_NV_framebuffer_blit", extensionStrLength) == 0) { tunisGL.support[GL_NV_framebuffer_blit] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_framebuffer_multisample] && (extensionStrLength == 29) && strncmp(extensionStr, "GL_NV_framebuffer_multisample", extensionStrLength) == 0) { tunisGL.support[GL_NV_framebuffer_multisample] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_generate_mipmap_sRGB] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_NV_generate_mipmap_sRGB", extensionStrLength) == 0) { tunisGL.support[GL_NV_generate_mipmap_sRGB] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_image_formats] && (extensionStrLength == 19) && strncmp(extensionStr, "GL_NV_image_formats", extensionStrLength) == 0) { tunisGL.support[GL_NV_image_formats] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_instanced_arrays] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_NV_instanced_arrays", extensionStrLength) == 0) { tunisGL.support[GL_NV_instanced_arrays] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_non_square_matrices] && (extensionStrLength == 25) && strncmp(extensionStr, "GL_NV_non_square_matrices", extensionStrLength) == 0) { tunisGL.support[GL_NV_non_square_matrices] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_pixel_buffer_object] && (extensionStrLength == 25) && strncmp(extensionStr, "GL_NV_pixel_buffer_object", extensionStrLength) == 0) { tunisGL.support[GL_NV_pixel_buffer_object] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_polygon_mode] && (extensionStrLength == 18) && strncmp(extensionStr, "GL_NV_polygon_mode", extensionStrLength) == 0) { tunisGL.support[GL_NV_polygon_mode] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_read_buffer] && (extensionStrLength == 17) && strncmp(extensionStr, "GL_NV_read_buffer", extensionStrLength) == 0) { tunisGL.support[GL_NV_read_buffer] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_read_buffer_front] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_NV_read_buffer_front", extensionStrLength) == 0) { tunisGL.support[GL_NV_read_buffer_front] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_read_depth] && (extensionStrLength == 16) && strncmp(extensionStr, "GL_NV_read_depth", extensionStrLength) == 0) { tunisGL.support[GL_NV_read_depth] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_read_depth_stencil] && (extensionStrLength == 24) && strncmp(extensionStr, "GL_NV_read_depth_stencil", extensionStrLength) == 0) { tunisGL.support[GL_NV_read_depth_stencil] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_read_stencil] && (extensionStrLength == 18) && strncmp(extensionStr, "GL_NV_read_stencil", extensionStrLength) == 0) { tunisGL.support[GL_NV_read_stencil] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_sRGB_formats] && (extensionStrLength == 18) && strncmp(extensionStr, "GL_NV_sRGB_formats", extensionStrLength) == 0) { tunisGL.support[GL_NV_sRGB_formats] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_shader_noperspective_interpolation] && (extensionStrLength == 40) && strncmp(extensionStr, "GL_NV_shader_noperspective_interpolation", extensionStrLength) == 0) { tunisGL.support[GL_NV_shader_noperspective_interpolation] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_shadow_samplers_array] && (extensionStrLength == 27) && strncmp(extensionStr, "GL_NV_shadow_samplers_array", extensionStrLength) == 0) { tunisGL.support[GL_NV_shadow_samplers_array] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_shadow_samplers_cube] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_NV_shadow_samplers_cube", extensionStrLength) == 0) { tunisGL.support[GL_NV_shadow_samplers_cube] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_texture_border_clamp] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_NV_texture_border_clamp", extensionStrLength) == 0) { tunisGL.support[GL_NV_texture_border_clamp] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_texture_compression_s3tc_update] && (extensionStrLength == 37) && strncmp(extensionStr, "GL_NV_texture_compression_s3tc_update", extensionStrLength) == 0) { tunisGL.support[GL_NV_texture_compression_s3tc_update] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_texture_npot_2D_mipmap] && (extensionStrLength == 28) && strncmp(extensionStr, "GL_NV_texture_npot_2D_mipmap", extensionStrLength) == 0) { tunisGL.support[GL_NV_texture_npot_2D_mipmap] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_viewport_array] && (extensionStrLength == 20) && strncmp(extensionStr, "GL_NV_viewport_array", extensionStrLength) == 0) { tunisGL.support[GL_NV_viewport_array] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_OES_EGL_image] && (extensionStrLength == 16) && strncmp(extensionStr, "GL_OES_EGL_image", extensionStrLength) == 0) { tunisGL.support[GL_OES_EGL_image] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_OES_EGL_image_external] && (extensionStrLength == 25) && strncmp(extensionStr, "GL_OES_EGL_image_external", extensionStrLength) == 0) { tunisGL.support[GL_OES_EGL_image_external] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_OES_EGL_image_external_essl3] && (extensionStrLength == 31) && strncmp(extensionStr, "GL_OES_EGL_image_external_essl3", extensionStrLength) == 0) { tunisGL.support[GL_OES_EGL_image_external_essl3] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_OES_blend_equation_separate] && (extensionStrLength == 30) && strncmp(extensionStr, "GL_OES_blend_equation_separate", extensionStrLength) == 0) { tunisGL.support[GL_OES_blend_equation_separate] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_OES_blend_func_separate] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_OES_blend_func_separate", extensionStrLength) == 0) { tunisGL.support[GL_OES_blend_func_separate] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_OES_blend_subtract] && (extensionStrLength == 21) && strncmp(extensionStr, "GL_OES_blend_subtract", extensionStrLength) == 0) { tunisGL.support[GL_OES_blend_subtract] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_OES_byte_coordinates] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_OES_byte_coordinates", extensionStrLength) == 0) { tunisGL.support[GL_OES_byte_coordinates] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_OES_compressed_ETC1_RGB8_sub_texture] && (extensionStrLength == 39) && strncmp(extensionStr, "GL_OES_compressed_ETC1_RGB8_sub_texture", extensionStrLength) == 0) { tunisGL.support[GL_OES_compressed_ETC1_RGB8_sub_texture] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_OES_compressed_ETC1_RGB8_texture] && (extensionStrLength == 35) && strncmp(extensionStr, "GL_OES_compressed_ETC1_RGB8_texture", extensionStrLength) == 0) { tunisGL.support[GL_OES_compressed_ETC1_RGB8_texture] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_OES_compressed_paletted_texture] && (extensionStrLength == 34) && strncmp(extensionStr, "GL_OES_compressed_paletted_texture", extensionStrLength) == 0) { tunisGL.support[GL_OES_compressed_paletted_texture] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_OES_copy_image] && (extensionStrLength == 17) && strncmp(extensionStr, "GL_OES_copy_image", extensionStrLength) == 0) { tunisGL.support[GL_OES_copy_image] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_OES_depth24] && (extensionStrLength == 14) && strncmp(extensionStr, "GL_OES_depth24", extensionStrLength) == 0) { tunisGL.support[GL_OES_depth24] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_OES_depth32] && (extensionStrLength == 14) && strncmp(extensionStr, "GL_OES_depth32", extensionStrLength) == 0) { tunisGL.support[GL_OES_depth32] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_OES_depth_texture] && (extensionStrLength == 20) && strncmp(extensionStr, "GL_OES_depth_texture", extensionStrLength) == 0) { tunisGL.support[GL_OES_depth_texture] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_OES_draw_buffers_indexed] && (extensionStrLength == 27) && strncmp(extensionStr, "GL_OES_draw_buffers_indexed", extensionStrLength) == 0) { tunisGL.support[GL_OES_draw_buffers_indexed] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_OES_draw_elements_base_vertex] && (extensionStrLength == 32) && strncmp(extensionStr, "GL_OES_draw_elements_base_vertex", extensionStrLength) == 0) { tunisGL.support[GL_OES_draw_elements_base_vertex] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_OES_draw_texture] && (extensionStrLength == 19) && strncmp(extensionStr, "GL_OES_draw_texture", extensionStrLength) == 0) { tunisGL.support[GL_OES_draw_texture] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_OES_element_index_uint] && (extensionStrLength == 25) && strncmp(extensionStr, "GL_OES_element_index_uint", extensionStrLength) == 0) { tunisGL.support[GL_OES_element_index_uint] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_OES_extended_matrix_palette] && (extensionStrLength == 30) && strncmp(extensionStr, "GL_OES_extended_matrix_palette", extensionStrLength) == 0) { tunisGL.support[GL_OES_extended_matrix_palette] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_OES_fbo_render_mipmap] && (extensionStrLength == 24) && strncmp(extensionStr, "GL_OES_fbo_render_mipmap", extensionStrLength) == 0) { tunisGL.support[GL_OES_fbo_render_mipmap] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_OES_fixed_point] && (extensionStrLength == 18) && strncmp(extensionStr, "GL_OES_fixed_point", extensionStrLength) == 0) { tunisGL.support[GL_OES_fixed_point] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_OES_fragment_precision_high] && (extensionStrLength == 30) && strncmp(extensionStr, "GL_OES_fragment_precision_high", extensionStrLength) == 0) { tunisGL.support[GL_OES_fragment_precision_high] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_OES_framebuffer_object] && (extensionStrLength == 25) && strncmp(extensionStr, "GL_OES_framebuffer_object", extensionStrLength) == 0) { tunisGL.support[GL_OES_framebuffer_object] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_OES_geometry_point_size] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_OES_geometry_point_size", extensionStrLength) == 0) { tunisGL.support[GL_OES_geometry_point_size] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_OES_geometry_shader] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_OES_geometry_shader", extensionStrLength) == 0) { tunisGL.support[GL_OES_geometry_shader] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_OES_get_program_binary] && (extensionStrLength == 25) && strncmp(extensionStr, "GL_OES_get_program_binary", extensionStrLength) == 0) { tunisGL.support[GL_OES_get_program_binary] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_OES_gpu_shader5] && (extensionStrLength == 18) && strncmp(extensionStr, "GL_OES_gpu_shader5", extensionStrLength) == 0) { tunisGL.support[GL_OES_gpu_shader5] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_OES_mapbuffer] && (extensionStrLength == 16) && strncmp(extensionStr, "GL_OES_mapbuffer", extensionStrLength) == 0) { tunisGL.support[GL_OES_mapbuffer] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_OES_matrix_get] && (extensionStrLength == 17) && strncmp(extensionStr, "GL_OES_matrix_get", extensionStrLength) == 0) { tunisGL.support[GL_OES_matrix_get] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_OES_matrix_palette] && (extensionStrLength == 21) && strncmp(extensionStr, "GL_OES_matrix_palette", extensionStrLength) == 0) { tunisGL.support[GL_OES_matrix_palette] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_OES_packed_depth_stencil] && (extensionStrLength == 27) && strncmp(extensionStr, "GL_OES_packed_depth_stencil", extensionStrLength) == 0) { tunisGL.support[GL_OES_packed_depth_stencil] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_OES_point_size_array] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_OES_point_size_array", extensionStrLength) == 0) { tunisGL.support[GL_OES_point_size_array] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_OES_point_sprite] && (extensionStrLength == 19) && strncmp(extensionStr, "GL_OES_point_sprite", extensionStrLength) == 0) { tunisGL.support[GL_OES_point_sprite] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_OES_primitive_bounding_box] && (extensionStrLength == 29) && strncmp(extensionStr, "GL_OES_primitive_bounding_box", extensionStrLength) == 0) { tunisGL.support[GL_OES_primitive_bounding_box] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_OES_query_matrix] && (extensionStrLength == 19) && strncmp(extensionStr, "GL_OES_query_matrix", extensionStrLength) == 0) { tunisGL.support[GL_OES_query_matrix] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_OES_read_format] && (extensionStrLength == 18) && strncmp(extensionStr, "GL_OES_read_format", extensionStrLength) == 0) { tunisGL.support[GL_OES_read_format] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_OES_required_internalformat] && (extensionStrLength == 30) && strncmp(extensionStr, "GL_OES_required_internalformat", extensionStrLength) == 0) { tunisGL.support[GL_OES_required_internalformat] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_OES_rgb8_rgba8] && (extensionStrLength == 17) && strncmp(extensionStr, "GL_OES_rgb8_rgba8", extensionStrLength) == 0) { tunisGL.support[GL_OES_rgb8_rgba8] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_OES_sample_shading] && (extensionStrLength == 21) && strncmp(extensionStr, "GL_OES_sample_shading", extensionStrLength) == 0) { tunisGL.support[GL_OES_sample_shading] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_OES_sample_variables] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_OES_sample_variables", extensionStrLength) == 0) { tunisGL.support[GL_OES_sample_variables] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_OES_shader_image_atomic] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_OES_shader_image_atomic", extensionStrLength) == 0) { tunisGL.support[GL_OES_shader_image_atomic] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_OES_shader_io_blocks] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_OES_shader_io_blocks", extensionStrLength) == 0) { tunisGL.support[GL_OES_shader_io_blocks] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_OES_shader_multisample_interpolation] && (extensionStrLength == 39) && strncmp(extensionStr, "GL_OES_shader_multisample_interpolation", extensionStrLength) == 0) { tunisGL.support[GL_OES_shader_multisample_interpolation] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_OES_single_precision] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_OES_single_precision", extensionStrLength) == 0) { tunisGL.support[GL_OES_single_precision] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_OES_standard_derivatives] && (extensionStrLength == 27) && strncmp(extensionStr, "GL_OES_standard_derivatives", extensionStrLength) == 0) { tunisGL.support[GL_OES_standard_derivatives] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_OES_stencil1] && (extensionStrLength == 15) && strncmp(extensionStr, "GL_OES_stencil1", extensionStrLength) == 0) { tunisGL.support[GL_OES_stencil1] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_OES_stencil4] && (extensionStrLength == 15) && strncmp(extensionStr, "GL_OES_stencil4", extensionStrLength) == 0) { tunisGL.support[GL_OES_stencil4] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_OES_stencil8] && (extensionStrLength == 15) && strncmp(extensionStr, "GL_OES_stencil8", extensionStrLength) == 0) { tunisGL.support[GL_OES_stencil8] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_OES_stencil_wrap] && (extensionStrLength == 19) && strncmp(extensionStr, "GL_OES_stencil_wrap", extensionStrLength) == 0) { tunisGL.support[GL_OES_stencil_wrap] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_OES_surfaceless_context] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_OES_surfaceless_context", extensionStrLength) == 0) { tunisGL.support[GL_OES_surfaceless_context] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_OES_tessellation_point_size] && (extensionStrLength == 30) && strncmp(extensionStr, "GL_OES_tessellation_point_size", extensionStrLength) == 0) { tunisGL.support[GL_OES_tessellation_point_size] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_OES_tessellation_shader] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_OES_tessellation_shader", extensionStrLength) == 0) { tunisGL.support[GL_OES_tessellation_shader] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_OES_texture_3D] && (extensionStrLength == 17) && strncmp(extensionStr, "GL_OES_texture_3D", extensionStrLength) == 0) { tunisGL.support[GL_OES_texture_3D] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_OES_texture_border_clamp] && (extensionStrLength == 27) && strncmp(extensionStr, "GL_OES_texture_border_clamp", extensionStrLength) == 0) { tunisGL.support[GL_OES_texture_border_clamp] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_OES_texture_buffer] && (extensionStrLength == 21) && strncmp(extensionStr, "GL_OES_texture_buffer", extensionStrLength) == 0) { tunisGL.support[GL_OES_texture_buffer] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_OES_texture_compression_astc] && (extensionStrLength == 31) && strncmp(extensionStr, "GL_OES_texture_compression_astc", extensionStrLength) == 0) { tunisGL.support[GL_OES_texture_compression_astc] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_OES_texture_cube_map] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_OES_texture_cube_map", extensionStrLength) == 0) { tunisGL.support[GL_OES_texture_cube_map] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_OES_texture_cube_map_array] && (extensionStrLength == 29) && strncmp(extensionStr, "GL_OES_texture_cube_map_array", extensionStrLength) == 0) { tunisGL.support[GL_OES_texture_cube_map_array] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_OES_texture_env_crossbar] && (extensionStrLength == 27) && strncmp(extensionStr, "GL_OES_texture_env_crossbar", extensionStrLength) == 0) { tunisGL.support[GL_OES_texture_env_crossbar] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_OES_texture_float] && (extensionStrLength == 20) && strncmp(extensionStr, "GL_OES_texture_float", extensionStrLength) == 0) { tunisGL.support[GL_OES_texture_float] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_OES_texture_float_linear] && (extensionStrLength == 27) && strncmp(extensionStr, "GL_OES_texture_float_linear", extensionStrLength) == 0) { tunisGL.support[GL_OES_texture_float_linear] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_OES_texture_half_float] && (extensionStrLength == 25) && strncmp(extensionStr, "GL_OES_texture_half_float", extensionStrLength) == 0) { tunisGL.support[GL_OES_texture_half_float] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_OES_texture_half_float_linear] && (extensionStrLength == 32) && strncmp(extensionStr, "GL_OES_texture_half_float_linear", extensionStrLength) == 0) { tunisGL.support[GL_OES_texture_half_float_linear] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_OES_texture_mirrored_repeat] && (extensionStrLength == 30) && strncmp(extensionStr, "GL_OES_texture_mirrored_repeat", extensionStrLength) == 0) { tunisGL.support[GL_OES_texture_mirrored_repeat] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_OES_texture_npot] && (extensionStrLength == 19) && strncmp(extensionStr, "GL_OES_texture_npot", extensionStrLength) == 0) { tunisGL.support[GL_OES_texture_npot] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_OES_texture_stencil8] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_OES_texture_stencil8", extensionStrLength) == 0) { tunisGL.support[GL_OES_texture_stencil8] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_OES_texture_storage_multisample_2d_array] && (extensionStrLength == 43) && strncmp(extensionStr, "GL_OES_texture_storage_multisample_2d_array", extensionStrLength) == 0) { tunisGL.support[GL_OES_texture_storage_multisample_2d_array] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_OES_texture_view] && (extensionStrLength == 19) && strncmp(extensionStr, "GL_OES_texture_view", extensionStrLength) == 0) { tunisGL.support[GL_OES_texture_view] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_OES_vertex_array_object] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_OES_vertex_array_object", extensionStrLength) == 0) { tunisGL.support[GL_OES_vertex_array_object] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_OES_vertex_half_float] && (extensionStrLength == 24) && strncmp(extensionStr, "GL_OES_vertex_half_float", extensionStrLength) == 0) { tunisGL.support[GL_OES_vertex_half_float] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_OES_vertex_type_10_10_10_2] && (extensionStrLength == 29) && strncmp(extensionStr, "GL_OES_vertex_type_10_10_10_2", extensionStrLength) == 0) { tunisGL.support[GL_OES_vertex_type_10_10_10_2] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_OES_viewport_array] && (extensionStrLength == 21) && strncmp(extensionStr, "GL_OES_viewport_array", extensionStrLength) == 0) { tunisGL.support[GL_OES_viewport_array] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_OVR_multiview_multisampled_render_to_texture] && (extensionStrLength == 47) && strncmp(extensionStr, "GL_OVR_multiview_multisampled_render_to_texture", extensionStrLength) == 0) { tunisGL.support[GL_OVR_multiview_multisampled_render_to_texture] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_QCOM_alpha_test] && (extensionStrLength == 18) && strncmp(extensionStr, "GL_QCOM_alpha_test", extensionStrLength) == 0) { tunisGL.support[GL_QCOM_alpha_test] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_QCOM_binning_control] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_QCOM_binning_control", extensionStrLength) == 0) { tunisGL.support[GL_QCOM_binning_control] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_QCOM_driver_control] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_QCOM_driver_control", extensionStrLength) == 0) { tunisGL.support[GL_QCOM_driver_control] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_QCOM_extended_get] && (extensionStrLength == 20) && strncmp(extensionStr, "GL_QCOM_extended_get", extensionStrLength) == 0) { tunisGL.support[GL_QCOM_extended_get] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_QCOM_extended_get2] && (extensionStrLength == 21) && strncmp(extensionStr, "GL_QCOM_extended_get2", extensionStrLength) == 0) { tunisGL.support[GL_QCOM_extended_get2] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_QCOM_framebuffer_foveated] && (extensionStrLength == 28) && strncmp(extensionStr, "GL_QCOM_framebuffer_foveated", extensionStrLength) == 0) { tunisGL.support[GL_QCOM_framebuffer_foveated] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_QCOM_perfmon_global_mode] && (extensionStrLength == 27) && strncmp(extensionStr, "GL_QCOM_perfmon_global_mode", extensionStrLength) == 0) { tunisGL.support[GL_QCOM_perfmon_global_mode] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_QCOM_shader_framebuffer_fetch_noncoherent] && (extensionStrLength == 44) && strncmp(extensionStr, "GL_QCOM_shader_framebuffer_fetch_noncoherent", extensionStrLength) == 0) { tunisGL.support[GL_QCOM_shader_framebuffer_fetch_noncoherent] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_QCOM_shader_framebuffer_fetch_rate] && (extensionStrLength == 37) && strncmp(extensionStr, "GL_QCOM_shader_framebuffer_fetch_rate", extensionStrLength) == 0) { tunisGL.support[GL_QCOM_shader_framebuffer_fetch_rate] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_QCOM_texture_foveated] && (extensionStrLength == 24) && strncmp(extensionStr, "GL_QCOM_texture_foveated", extensionStrLength) == 0) { tunisGL.support[GL_QCOM_texture_foveated] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_QCOM_tiled_rendering] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_QCOM_tiled_rendering", extensionStrLength) == 0) { tunisGL.support[GL_QCOM_tiled_rendering] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_QCOM_writeonly_rendering] && (extensionStrLength == 27) && strncmp(extensionStr, "GL_QCOM_writeonly_rendering", extensionStrLength) == 0) { tunisGL.support[GL_QCOM_writeonly_rendering] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_VIV_shader_binary] && (extensionStrLength == 20) && strncmp(extensionStr, "GL_VIV_shader_binary", extensionStrLength) == 0) { tunisGL.support[GL_VIV_shader_binary] = KHRONOS_TRUE; return; }

        /*
         * Discovered a bug in Qualcomm Adreno 200 OpenGL ES driver, where
         * these three extensions are literally fused together.
         */
        if (!(tunisGL.support[GL_EXT_debug_label] && tunisGL.support[GL_EXT_debug_marker] && tunisGL.support[GL_EXT_robustness]) &&
            (extensionStrLength == 54) && strncmp(extensionStr, "GL_EXT_debug_labelGL_EXT_debug_markerGL_EXT_robustness", extensionStrLength) == 0)
        {
            tunisGL.support[GL_EXT_debug_label] = KHRONOS_TRUE;
            tunisGL.support[GL_EXT_debug_marker] = KHRONOS_TRUE;
            tunisGL.support[GL_EXT_robustness] = KHRONOS_TRUE;
            return;
        }
    } else {
        if (!tunisGL.support[GL_3DFX_multisample] && (extensionStrLength == 19) && strncmp(extensionStr, "GL_3DFX_multisample", extensionStrLength) == 0) { tunisGL.support[GL_3DFX_multisample] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_3DFX_tbuffer] && (extensionStrLength == 15) && strncmp(extensionStr, "GL_3DFX_tbuffer", extensionStrLength) == 0) { tunisGL.support[GL_3DFX_tbuffer] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_3DFX_texture_compression_FXT1] && (extensionStrLength == 32) && strncmp(extensionStr, "GL_3DFX_texture_compression_FXT1", extensionStrLength) == 0) { tunisGL.support[GL_3DFX_texture_compression_FXT1] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_AMD_blend_minmax_factor] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_AMD_blend_minmax_factor", extensionStrLength) == 0) { tunisGL.support[GL_AMD_blend_minmax_factor] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_AMD_conservative_depth] && (extensionStrLength == 25) && strncmp(extensionStr, "GL_AMD_conservative_depth", extensionStrLength) == 0) { tunisGL.support[GL_AMD_conservative_depth] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_AMD_debug_output] && (extensionStrLength == 19) && strncmp(extensionStr, "GL_AMD_debug_output", extensionStrLength) == 0) { tunisGL.support[GL_AMD_debug_output] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_AMD_depth_clamp_separate] && (extensionStrLength == 27) && strncmp(extensionStr, "GL_AMD_depth_clamp_separate", extensionStrLength) == 0) { tunisGL.support[GL_AMD_depth_clamp_separate] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_AMD_draw_buffers_blend] && (extensionStrLength == 25) && strncmp(extensionStr, "GL_AMD_draw_buffers_blend", extensionStrLength) == 0) { tunisGL.support[GL_AMD_draw_buffers_blend] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_AMD_framebuffer_multisample_advanced] && (extensionStrLength == 39) && strncmp(extensionStr, "GL_AMD_framebuffer_multisample_advanced", extensionStrLength) == 0) { tunisGL.support[GL_AMD_framebuffer_multisample_advanced] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_AMD_framebuffer_sample_positions] && (extensionStrLength == 35) && strncmp(extensionStr, "GL_AMD_framebuffer_sample_positions", extensionStrLength) == 0) { tunisGL.support[GL_AMD_framebuffer_sample_positions] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_AMD_gcn_shader] && (extensionStrLength == 17) && strncmp(extensionStr, "GL_AMD_gcn_shader", extensionStrLength) == 0) { tunisGL.support[GL_AMD_gcn_shader] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_AMD_gpu_shader_half_float] && (extensionStrLength == 28) && strncmp(extensionStr, "GL_AMD_gpu_shader_half_float", extensionStrLength) == 0) { tunisGL.support[GL_AMD_gpu_shader_half_float] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_AMD_gpu_shader_int16] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_AMD_gpu_shader_int16", extensionStrLength) == 0) { tunisGL.support[GL_AMD_gpu_shader_int16] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_AMD_gpu_shader_int64] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_AMD_gpu_shader_int64", extensionStrLength) == 0) { tunisGL.support[GL_AMD_gpu_shader_int64] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_AMD_interleaved_elements] && (extensionStrLength == 27) && strncmp(extensionStr, "GL_AMD_interleaved_elements", extensionStrLength) == 0) { tunisGL.support[GL_AMD_interleaved_elements] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_AMD_multi_draw_indirect] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_AMD_multi_draw_indirect", extensionStrLength) == 0) { tunisGL.support[GL_AMD_multi_draw_indirect] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_AMD_name_gen_delete] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_AMD_name_gen_delete", extensionStrLength) == 0) { tunisGL.support[GL_AMD_name_gen_delete] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_AMD_occlusion_query_event] && (extensionStrLength == 28) && strncmp(extensionStr, "GL_AMD_occlusion_query_event", extensionStrLength) == 0) { tunisGL.support[GL_AMD_occlusion_query_event] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_AMD_performance_monitor] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_AMD_performance_monitor", extensionStrLength) == 0) { tunisGL.support[GL_AMD_performance_monitor] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_AMD_pinned_memory] && (extensionStrLength == 20) && strncmp(extensionStr, "GL_AMD_pinned_memory", extensionStrLength) == 0) { tunisGL.support[GL_AMD_pinned_memory] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_AMD_query_buffer_object] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_AMD_query_buffer_object", extensionStrLength) == 0) { tunisGL.support[GL_AMD_query_buffer_object] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_AMD_sample_positions] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_AMD_sample_positions", extensionStrLength) == 0) { tunisGL.support[GL_AMD_sample_positions] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_AMD_seamless_cubemap_per_texture] && (extensionStrLength == 35) && strncmp(extensionStr, "GL_AMD_seamless_cubemap_per_texture", extensionStrLength) == 0) { tunisGL.support[GL_AMD_seamless_cubemap_per_texture] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_AMD_shader_atomic_counter_ops] && (extensionStrLength == 32) && strncmp(extensionStr, "GL_AMD_shader_atomic_counter_ops", extensionStrLength) == 0) { tunisGL.support[GL_AMD_shader_atomic_counter_ops] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_AMD_shader_ballot] && (extensionStrLength == 20) && strncmp(extensionStr, "GL_AMD_shader_ballot", extensionStrLength) == 0) { tunisGL.support[GL_AMD_shader_ballot] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_AMD_shader_explicit_vertex_parameter] && (extensionStrLength == 39) && strncmp(extensionStr, "GL_AMD_shader_explicit_vertex_parameter", extensionStrLength) == 0) { tunisGL.support[GL_AMD_shader_explicit_vertex_parameter] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_AMD_shader_gpu_shader_half_float_fetch] && (extensionStrLength == 41) && strncmp(extensionStr, "GL_AMD_shader_gpu_shader_half_float_fetch", extensionStrLength) == 0) { tunisGL.support[GL_AMD_shader_gpu_shader_half_float_fetch] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_AMD_shader_image_load_store_lod] && (extensionStrLength == 34) && strncmp(extensionStr, "GL_AMD_shader_image_load_store_lod", extensionStrLength) == 0) { tunisGL.support[GL_AMD_shader_image_load_store_lod] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_AMD_shader_stencil_export] && (extensionStrLength == 28) && strncmp(extensionStr, "GL_AMD_shader_stencil_export", extensionStrLength) == 0) { tunisGL.support[GL_AMD_shader_stencil_export] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_AMD_shader_trinary_minmax] && (extensionStrLength == 28) && strncmp(extensionStr, "GL_AMD_shader_trinary_minmax", extensionStrLength) == 0) { tunisGL.support[GL_AMD_shader_trinary_minmax] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_AMD_sparse_texture] && (extensionStrLength == 21) && strncmp(extensionStr, "GL_AMD_sparse_texture", extensionStrLength) == 0) { tunisGL.support[GL_AMD_sparse_texture] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_AMD_stencil_operation_extended] && (extensionStrLength == 33) && strncmp(extensionStr, "GL_AMD_stencil_operation_extended", extensionStrLength) == 0) { tunisGL.support[GL_AMD_stencil_operation_extended] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_AMD_texture_gather_bias_lod] && (extensionStrLength == 30) && strncmp(extensionStr, "GL_AMD_texture_gather_bias_lod", extensionStrLength) == 0) { tunisGL.support[GL_AMD_texture_gather_bias_lod] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_AMD_texture_texture4] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_AMD_texture_texture4", extensionStrLength) == 0) { tunisGL.support[GL_AMD_texture_texture4] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_AMD_transform_feedback3_lines_triangles] && (extensionStrLength == 42) && strncmp(extensionStr, "GL_AMD_transform_feedback3_lines_triangles", extensionStrLength) == 0) { tunisGL.support[GL_AMD_transform_feedback3_lines_triangles] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_AMD_transform_feedback4] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_AMD_transform_feedback4", extensionStrLength) == 0) { tunisGL.support[GL_AMD_transform_feedback4] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_AMD_vertex_shader_layer] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_AMD_vertex_shader_layer", extensionStrLength) == 0) { tunisGL.support[GL_AMD_vertex_shader_layer] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_AMD_vertex_shader_tessellator] && (extensionStrLength == 32) && strncmp(extensionStr, "GL_AMD_vertex_shader_tessellator", extensionStrLength) == 0) { tunisGL.support[GL_AMD_vertex_shader_tessellator] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_AMD_vertex_shader_viewport_index] && (extensionStrLength == 35) && strncmp(extensionStr, "GL_AMD_vertex_shader_viewport_index", extensionStrLength) == 0) { tunisGL.support[GL_AMD_vertex_shader_viewport_index] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_APPLE_aux_depth_stencil] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_APPLE_aux_depth_stencil", extensionStrLength) == 0) { tunisGL.support[GL_APPLE_aux_depth_stencil] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_APPLE_client_storage] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_APPLE_client_storage", extensionStrLength) == 0) { tunisGL.support[GL_APPLE_client_storage] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_APPLE_element_array] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_APPLE_element_array", extensionStrLength) == 0) { tunisGL.support[GL_APPLE_element_array] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_APPLE_fence] && (extensionStrLength == 14) && strncmp(extensionStr, "GL_APPLE_fence", extensionStrLength) == 0) { tunisGL.support[GL_APPLE_fence] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_APPLE_float_pixels] && (extensionStrLength == 21) && strncmp(extensionStr, "GL_APPLE_float_pixels", extensionStrLength) == 0) { tunisGL.support[GL_APPLE_float_pixels] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_APPLE_flush_buffer_range] && (extensionStrLength == 27) && strncmp(extensionStr, "GL_APPLE_flush_buffer_range", extensionStrLength) == 0) { tunisGL.support[GL_APPLE_flush_buffer_range] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_APPLE_object_purgeable] && (extensionStrLength == 25) && strncmp(extensionStr, "GL_APPLE_object_purgeable", extensionStrLength) == 0) { tunisGL.support[GL_APPLE_object_purgeable] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_APPLE_rgb_422] && (extensionStrLength == 16) && strncmp(extensionStr, "GL_APPLE_rgb_422", extensionStrLength) == 0) { tunisGL.support[GL_APPLE_rgb_422] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_APPLE_row_bytes] && (extensionStrLength == 18) && strncmp(extensionStr, "GL_APPLE_row_bytes", extensionStrLength) == 0) { tunisGL.support[GL_APPLE_row_bytes] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_APPLE_specular_vector] && (extensionStrLength == 24) && strncmp(extensionStr, "GL_APPLE_specular_vector", extensionStrLength) == 0) { tunisGL.support[GL_APPLE_specular_vector] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_APPLE_texture_range] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_APPLE_texture_range", extensionStrLength) == 0) { tunisGL.support[GL_APPLE_texture_range] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_APPLE_transform_hint] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_APPLE_transform_hint", extensionStrLength) == 0) { tunisGL.support[GL_APPLE_transform_hint] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_APPLE_vertex_array_object] && (extensionStrLength == 28) && strncmp(extensionStr, "GL_APPLE_vertex_array_object", extensionStrLength) == 0) { tunisGL.support[GL_APPLE_vertex_array_object] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_APPLE_vertex_array_range] && (extensionStrLength == 27) && strncmp(extensionStr, "GL_APPLE_vertex_array_range", extensionStrLength) == 0) { tunisGL.support[GL_APPLE_vertex_array_range] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_APPLE_vertex_program_evaluators] && (extensionStrLength == 34) && strncmp(extensionStr, "GL_APPLE_vertex_program_evaluators", extensionStrLength) == 0) { tunisGL.support[GL_APPLE_vertex_program_evaluators] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_APPLE_ycbcr_422] && (extensionStrLength == 18) && strncmp(extensionStr, "GL_APPLE_ycbcr_422", extensionStrLength) == 0) { tunisGL.support[GL_APPLE_ycbcr_422] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_ES2_compatibility] && (extensionStrLength == 24) && strncmp(extensionStr, "GL_ARB_ES2_compatibility", extensionStrLength) == 0) { tunisGL.support[GL_ARB_ES2_compatibility] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_ES3_1_compatibility] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_ARB_ES3_1_compatibility", extensionStrLength) == 0) { tunisGL.support[GL_ARB_ES3_1_compatibility] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_ES3_2_compatibility] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_ARB_ES3_2_compatibility", extensionStrLength) == 0) { tunisGL.support[GL_ARB_ES3_2_compatibility] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_ES3_compatibility] && (extensionStrLength == 24) && strncmp(extensionStr, "GL_ARB_ES3_compatibility", extensionStrLength) == 0) { tunisGL.support[GL_ARB_ES3_compatibility] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_arrays_of_arrays] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_ARB_arrays_of_arrays", extensionStrLength) == 0) { tunisGL.support[GL_ARB_arrays_of_arrays] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_base_instance] && (extensionStrLength == 20) && strncmp(extensionStr, "GL_ARB_base_instance", extensionStrLength) == 0) { tunisGL.support[GL_ARB_base_instance] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_bindless_texture] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_ARB_bindless_texture", extensionStrLength) == 0) { tunisGL.support[GL_ARB_bindless_texture] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_blend_func_extended] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_ARB_blend_func_extended", extensionStrLength) == 0) { tunisGL.support[GL_ARB_blend_func_extended] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_buffer_storage] && (extensionStrLength == 21) && strncmp(extensionStr, "GL_ARB_buffer_storage", extensionStrLength) == 0) { tunisGL.support[GL_ARB_buffer_storage] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_cl_event] && (extensionStrLength == 15) && strncmp(extensionStr, "GL_ARB_cl_event", extensionStrLength) == 0) { tunisGL.support[GL_ARB_cl_event] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_clear_buffer_object] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_ARB_clear_buffer_object", extensionStrLength) == 0) { tunisGL.support[GL_ARB_clear_buffer_object] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_clear_texture] && (extensionStrLength == 20) && strncmp(extensionStr, "GL_ARB_clear_texture", extensionStrLength) == 0) { tunisGL.support[GL_ARB_clear_texture] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_clip_control] && (extensionStrLength == 19) && strncmp(extensionStr, "GL_ARB_clip_control", extensionStrLength) == 0) { tunisGL.support[GL_ARB_clip_control] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_color_buffer_float] && (extensionStrLength == 25) && strncmp(extensionStr, "GL_ARB_color_buffer_float", extensionStrLength) == 0) { tunisGL.support[GL_ARB_color_buffer_float] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_compatibility] && (extensionStrLength == 20) && strncmp(extensionStr, "GL_ARB_compatibility", extensionStrLength) == 0) { tunisGL.support[GL_ARB_compatibility] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_compressed_texture_pixel_storage] && (extensionStrLength == 39) && strncmp(extensionStr, "GL_ARB_compressed_texture_pixel_storage", extensionStrLength) == 0) { tunisGL.support[GL_ARB_compressed_texture_pixel_storage] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_compute_shader] && (extensionStrLength == 21) && strncmp(extensionStr, "GL_ARB_compute_shader", extensionStrLength) == 0) { tunisGL.support[GL_ARB_compute_shader] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_compute_variable_group_size] && (extensionStrLength == 34) && strncmp(extensionStr, "GL_ARB_compute_variable_group_size", extensionStrLength) == 0) { tunisGL.support[GL_ARB_compute_variable_group_size] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_conditional_render_inverted] && (extensionStrLength == 34) && strncmp(extensionStr, "GL_ARB_conditional_render_inverted", extensionStrLength) == 0) { tunisGL.support[GL_ARB_conditional_render_inverted] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_conservative_depth] && (extensionStrLength == 25) && strncmp(extensionStr, "GL_ARB_conservative_depth", extensionStrLength) == 0) { tunisGL.support[GL_ARB_conservative_depth] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_copy_buffer] && (extensionStrLength == 18) && strncmp(extensionStr, "GL_ARB_copy_buffer", extensionStrLength) == 0) { tunisGL.support[GL_ARB_copy_buffer] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_copy_image] && (extensionStrLength == 17) && strncmp(extensionStr, "GL_ARB_copy_image", extensionStrLength) == 0) { tunisGL.support[GL_ARB_copy_image] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_cull_distance] && (extensionStrLength == 20) && strncmp(extensionStr, "GL_ARB_cull_distance", extensionStrLength) == 0) { tunisGL.support[GL_ARB_cull_distance] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_debug_output] && (extensionStrLength == 19) && strncmp(extensionStr, "GL_ARB_debug_output", extensionStrLength) == 0) { tunisGL.support[GL_ARB_debug_output] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_depth_buffer_float] && (extensionStrLength == 25) && strncmp(extensionStr, "GL_ARB_depth_buffer_float", extensionStrLength) == 0) { tunisGL.support[GL_ARB_depth_buffer_float] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_depth_clamp] && (extensionStrLength == 18) && strncmp(extensionStr, "GL_ARB_depth_clamp", extensionStrLength) == 0) { tunisGL.support[GL_ARB_depth_clamp] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_depth_texture] && (extensionStrLength == 20) && strncmp(extensionStr, "GL_ARB_depth_texture", extensionStrLength) == 0) { tunisGL.support[GL_ARB_depth_texture] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_derivative_control] && (extensionStrLength == 25) && strncmp(extensionStr, "GL_ARB_derivative_control", extensionStrLength) == 0) { tunisGL.support[GL_ARB_derivative_control] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_direct_state_access] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_ARB_direct_state_access", extensionStrLength) == 0) { tunisGL.support[GL_ARB_direct_state_access] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_draw_buffers] && (extensionStrLength == 19) && strncmp(extensionStr, "GL_ARB_draw_buffers", extensionStrLength) == 0) { tunisGL.support[GL_ARB_draw_buffers] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_draw_buffers_blend] && (extensionStrLength == 25) && strncmp(extensionStr, "GL_ARB_draw_buffers_blend", extensionStrLength) == 0) { tunisGL.support[GL_ARB_draw_buffers_blend] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_draw_elements_base_vertex] && (extensionStrLength == 32) && strncmp(extensionStr, "GL_ARB_draw_elements_base_vertex", extensionStrLength) == 0) { tunisGL.support[GL_ARB_draw_elements_base_vertex] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_draw_indirect] && (extensionStrLength == 20) && strncmp(extensionStr, "GL_ARB_draw_indirect", extensionStrLength) == 0) { tunisGL.support[GL_ARB_draw_indirect] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_draw_instanced] && (extensionStrLength == 21) && strncmp(extensionStr, "GL_ARB_draw_instanced", extensionStrLength) == 0) { tunisGL.support[GL_ARB_draw_instanced] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_enhanced_layouts] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_ARB_enhanced_layouts", extensionStrLength) == 0) { tunisGL.support[GL_ARB_enhanced_layouts] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_explicit_attrib_location] && (extensionStrLength == 31) && strncmp(extensionStr, "GL_ARB_explicit_attrib_location", extensionStrLength) == 0) { tunisGL.support[GL_ARB_explicit_attrib_location] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_explicit_uniform_location] && (extensionStrLength == 32) && strncmp(extensionStr, "GL_ARB_explicit_uniform_location", extensionStrLength) == 0) { tunisGL.support[GL_ARB_explicit_uniform_location] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_fragment_coord_conventions] && (extensionStrLength == 33) && strncmp(extensionStr, "GL_ARB_fragment_coord_conventions", extensionStrLength) == 0) { tunisGL.support[GL_ARB_fragment_coord_conventions] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_fragment_layer_viewport] && (extensionStrLength == 30) && strncmp(extensionStr, "GL_ARB_fragment_layer_viewport", extensionStrLength) == 0) { tunisGL.support[GL_ARB_fragment_layer_viewport] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_fragment_program] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_ARB_fragment_program", extensionStrLength) == 0) { tunisGL.support[GL_ARB_fragment_program] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_fragment_program_shadow] && (extensionStrLength == 30) && strncmp(extensionStr, "GL_ARB_fragment_program_shadow", extensionStrLength) == 0) { tunisGL.support[GL_ARB_fragment_program_shadow] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_fragment_shader] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_ARB_fragment_shader", extensionStrLength) == 0) { tunisGL.support[GL_ARB_fragment_shader] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_fragment_shader_interlock] && (extensionStrLength == 32) && strncmp(extensionStr, "GL_ARB_fragment_shader_interlock", extensionStrLength) == 0) { tunisGL.support[GL_ARB_fragment_shader_interlock] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_framebuffer_no_attachments] && (extensionStrLength == 33) && strncmp(extensionStr, "GL_ARB_framebuffer_no_attachments", extensionStrLength) == 0) { tunisGL.support[GL_ARB_framebuffer_no_attachments] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_framebuffer_object] && (extensionStrLength == 25) && strncmp(extensionStr, "GL_ARB_framebuffer_object", extensionStrLength) == 0) { tunisGL.support[GL_ARB_framebuffer_object] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_framebuffer_sRGB] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_ARB_framebuffer_sRGB", extensionStrLength) == 0) { tunisGL.support[GL_ARB_framebuffer_sRGB] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_geometry_shader4] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_ARB_geometry_shader4", extensionStrLength) == 0) { tunisGL.support[GL_ARB_geometry_shader4] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_get_program_binary] && (extensionStrLength == 25) && strncmp(extensionStr, "GL_ARB_get_program_binary", extensionStrLength) == 0) { tunisGL.support[GL_ARB_get_program_binary] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_get_texture_sub_image] && (extensionStrLength == 28) && strncmp(extensionStr, "GL_ARB_get_texture_sub_image", extensionStrLength) == 0) { tunisGL.support[GL_ARB_get_texture_sub_image] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_gl_spirv] && (extensionStrLength == 15) && strncmp(extensionStr, "GL_ARB_gl_spirv", extensionStrLength) == 0) { tunisGL.support[GL_ARB_gl_spirv] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_gpu_shader5] && (extensionStrLength == 18) && strncmp(extensionStr, "GL_ARB_gpu_shader5", extensionStrLength) == 0) { tunisGL.support[GL_ARB_gpu_shader5] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_gpu_shader_fp64] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_ARB_gpu_shader_fp64", extensionStrLength) == 0) { tunisGL.support[GL_ARB_gpu_shader_fp64] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_gpu_shader_int64] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_ARB_gpu_shader_int64", extensionStrLength) == 0) { tunisGL.support[GL_ARB_gpu_shader_int64] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_half_float_pixel] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_ARB_half_float_pixel", extensionStrLength) == 0) { tunisGL.support[GL_ARB_half_float_pixel] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_half_float_vertex] && (extensionStrLength == 24) && strncmp(extensionStr, "GL_ARB_half_float_vertex", extensionStrLength) == 0) { tunisGL.support[GL_ARB_half_float_vertex] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_imaging] && (extensionStrLength == 14) && strncmp(extensionStr, "GL_ARB_imaging", extensionStrLength) == 0) { tunisGL.support[GL_ARB_imaging] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_indirect_parameters] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_ARB_indirect_parameters", extensionStrLength) == 0) { tunisGL.support[GL_ARB_indirect_parameters] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_instanced_arrays] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_ARB_instanced_arrays", extensionStrLength) == 0) { tunisGL.support[GL_ARB_instanced_arrays] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_internalformat_query] && (extensionStrLength == 27) && strncmp(extensionStr, "GL_ARB_internalformat_query", extensionStrLength) == 0) { tunisGL.support[GL_ARB_internalformat_query] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_internalformat_query2] && (extensionStrLength == 28) && strncmp(extensionStr, "GL_ARB_internalformat_query2", extensionStrLength) == 0) { tunisGL.support[GL_ARB_internalformat_query2] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_invalidate_subdata] && (extensionStrLength == 25) && strncmp(extensionStr, "GL_ARB_invalidate_subdata", extensionStrLength) == 0) { tunisGL.support[GL_ARB_invalidate_subdata] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_map_buffer_alignment] && (extensionStrLength == 27) && strncmp(extensionStr, "GL_ARB_map_buffer_alignment", extensionStrLength) == 0) { tunisGL.support[GL_ARB_map_buffer_alignment] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_map_buffer_range] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_ARB_map_buffer_range", extensionStrLength) == 0) { tunisGL.support[GL_ARB_map_buffer_range] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_matrix_palette] && (extensionStrLength == 21) && strncmp(extensionStr, "GL_ARB_matrix_palette", extensionStrLength) == 0) { tunisGL.support[GL_ARB_matrix_palette] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_multi_bind] && (extensionStrLength == 17) && strncmp(extensionStr, "GL_ARB_multi_bind", extensionStrLength) == 0) { tunisGL.support[GL_ARB_multi_bind] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_multi_draw_indirect] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_ARB_multi_draw_indirect", extensionStrLength) == 0) { tunisGL.support[GL_ARB_multi_draw_indirect] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_multisample] && (extensionStrLength == 18) && strncmp(extensionStr, "GL_ARB_multisample", extensionStrLength) == 0) { tunisGL.support[GL_ARB_multisample] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_multitexture] && (extensionStrLength == 19) && strncmp(extensionStr, "GL_ARB_multitexture", extensionStrLength) == 0) { tunisGL.support[GL_ARB_multitexture] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_occlusion_query] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_ARB_occlusion_query", extensionStrLength) == 0) { tunisGL.support[GL_ARB_occlusion_query] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_occlusion_query2] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_ARB_occlusion_query2", extensionStrLength) == 0) { tunisGL.support[GL_ARB_occlusion_query2] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_parallel_shader_compile] && (extensionStrLength == 30) && strncmp(extensionStr, "GL_ARB_parallel_shader_compile", extensionStrLength) == 0) { tunisGL.support[GL_ARB_parallel_shader_compile] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_pipeline_statistics_query] && (extensionStrLength == 32) && strncmp(extensionStr, "GL_ARB_pipeline_statistics_query", extensionStrLength) == 0) { tunisGL.support[GL_ARB_pipeline_statistics_query] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_pixel_buffer_object] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_ARB_pixel_buffer_object", extensionStrLength) == 0) { tunisGL.support[GL_ARB_pixel_buffer_object] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_point_parameters] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_ARB_point_parameters", extensionStrLength) == 0) { tunisGL.support[GL_ARB_point_parameters] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_point_sprite] && (extensionStrLength == 19) && strncmp(extensionStr, "GL_ARB_point_sprite", extensionStrLength) == 0) { tunisGL.support[GL_ARB_point_sprite] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_polygon_offset_clamp] && (extensionStrLength == 27) && strncmp(extensionStr, "GL_ARB_polygon_offset_clamp", extensionStrLength) == 0) { tunisGL.support[GL_ARB_polygon_offset_clamp] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_post_depth_coverage] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_ARB_post_depth_coverage", extensionStrLength) == 0) { tunisGL.support[GL_ARB_post_depth_coverage] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_program_interface_query] && (extensionStrLength == 30) && strncmp(extensionStr, "GL_ARB_program_interface_query", extensionStrLength) == 0) { tunisGL.support[GL_ARB_program_interface_query] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_provoking_vertex] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_ARB_provoking_vertex", extensionStrLength) == 0) { tunisGL.support[GL_ARB_provoking_vertex] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_query_buffer_object] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_ARB_query_buffer_object", extensionStrLength) == 0) { tunisGL.support[GL_ARB_query_buffer_object] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_robust_buffer_access_behavior] && (extensionStrLength == 36) && strncmp(extensionStr, "GL_ARB_robust_buffer_access_behavior", extensionStrLength) == 0) { tunisGL.support[GL_ARB_robust_buffer_access_behavior] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_robustness] && (extensionStrLength == 17) && strncmp(extensionStr, "GL_ARB_robustness", extensionStrLength) == 0) { tunisGL.support[GL_ARB_robustness] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_robustness_isolation] && (extensionStrLength == 27) && strncmp(extensionStr, "GL_ARB_robustness_isolation", extensionStrLength) == 0) { tunisGL.support[GL_ARB_robustness_isolation] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_sample_locations] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_ARB_sample_locations", extensionStrLength) == 0) { tunisGL.support[GL_ARB_sample_locations] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_sample_shading] && (extensionStrLength == 21) && strncmp(extensionStr, "GL_ARB_sample_shading", extensionStrLength) == 0) { tunisGL.support[GL_ARB_sample_shading] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_sampler_objects] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_ARB_sampler_objects", extensionStrLength) == 0) { tunisGL.support[GL_ARB_sampler_objects] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_seamless_cube_map] && (extensionStrLength == 24) && strncmp(extensionStr, "GL_ARB_seamless_cube_map", extensionStrLength) == 0) { tunisGL.support[GL_ARB_seamless_cube_map] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_seamless_cubemap_per_texture] && (extensionStrLength == 35) && strncmp(extensionStr, "GL_ARB_seamless_cubemap_per_texture", extensionStrLength) == 0) { tunisGL.support[GL_ARB_seamless_cubemap_per_texture] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_separate_shader_objects] && (extensionStrLength == 30) && strncmp(extensionStr, "GL_ARB_separate_shader_objects", extensionStrLength) == 0) { tunisGL.support[GL_ARB_separate_shader_objects] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_shader_atomic_counter_ops] && (extensionStrLength == 32) && strncmp(extensionStr, "GL_ARB_shader_atomic_counter_ops", extensionStrLength) == 0) { tunisGL.support[GL_ARB_shader_atomic_counter_ops] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_shader_atomic_counters] && (extensionStrLength == 29) && strncmp(extensionStr, "GL_ARB_shader_atomic_counters", extensionStrLength) == 0) { tunisGL.support[GL_ARB_shader_atomic_counters] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_shader_ballot] && (extensionStrLength == 20) && strncmp(extensionStr, "GL_ARB_shader_ballot", extensionStrLength) == 0) { tunisGL.support[GL_ARB_shader_ballot] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_shader_bit_encoding] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_ARB_shader_bit_encoding", extensionStrLength) == 0) { tunisGL.support[GL_ARB_shader_bit_encoding] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_shader_clock] && (extensionStrLength == 19) && strncmp(extensionStr, "GL_ARB_shader_clock", extensionStrLength) == 0) { tunisGL.support[GL_ARB_shader_clock] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_shader_draw_parameters] && (extensionStrLength == 29) && strncmp(extensionStr, "GL_ARB_shader_draw_parameters", extensionStrLength) == 0) { tunisGL.support[GL_ARB_shader_draw_parameters] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_shader_group_vote] && (extensionStrLength == 24) && strncmp(extensionStr, "GL_ARB_shader_group_vote", extensionStrLength) == 0) { tunisGL.support[GL_ARB_shader_group_vote] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_shader_image_load_store] && (extensionStrLength == 30) && strncmp(extensionStr, "GL_ARB_shader_image_load_store", extensionStrLength) == 0) { tunisGL.support[GL_ARB_shader_image_load_store] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_shader_image_size] && (extensionStrLength == 24) && strncmp(extensionStr, "GL_ARB_shader_image_size", extensionStrLength) == 0) { tunisGL.support[GL_ARB_shader_image_size] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_shader_objects] && (extensionStrLength == 21) && strncmp(extensionStr, "GL_ARB_shader_objects", extensionStrLength) == 0) { tunisGL.support[GL_ARB_shader_objects] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_shader_precision] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_ARB_shader_precision", extensionStrLength) == 0) { tunisGL.support[GL_ARB_shader_precision] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_shader_stencil_export] && (extensionStrLength == 28) && strncmp(extensionStr, "GL_ARB_shader_stencil_export", extensionStrLength) == 0) { tunisGL.support[GL_ARB_shader_stencil_export] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_shader_storage_buffer_object] && (extensionStrLength == 35) && strncmp(extensionStr, "GL_ARB_shader_storage_buffer_object", extensionStrLength) == 0) { tunisGL.support[GL_ARB_shader_storage_buffer_object] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_shader_subroutine] && (extensionStrLength == 24) && strncmp(extensionStr, "GL_ARB_shader_subroutine", extensionStrLength) == 0) { tunisGL.support[GL_ARB_shader_subroutine] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_shader_texture_image_samples] && (extensionStrLength == 35) && strncmp(extensionStr, "GL_ARB_shader_texture_image_samples", extensionStrLength) == 0) { tunisGL.support[GL_ARB_shader_texture_image_samples] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_shader_texture_lod] && (extensionStrLength == 25) && strncmp(extensionStr, "GL_ARB_shader_texture_lod", extensionStrLength) == 0) { tunisGL.support[GL_ARB_shader_texture_lod] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_shader_viewport_layer_array] && (extensionStrLength == 34) && strncmp(extensionStr, "GL_ARB_shader_viewport_layer_array", extensionStrLength) == 0) { tunisGL.support[GL_ARB_shader_viewport_layer_array] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_shading_language_100] && (extensionStrLength == 27) && strncmp(extensionStr, "GL_ARB_shading_language_100", extensionStrLength) == 0) { tunisGL.support[GL_ARB_shading_language_100] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_shading_language_420pack] && (extensionStrLength == 31) && strncmp(extensionStr, "GL_ARB_shading_language_420pack", extensionStrLength) == 0) { tunisGL.support[GL_ARB_shading_language_420pack] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_shading_language_include] && (extensionStrLength == 31) && strncmp(extensionStr, "GL_ARB_shading_language_include", extensionStrLength) == 0) { tunisGL.support[GL_ARB_shading_language_include] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_shading_language_packing] && (extensionStrLength == 31) && strncmp(extensionStr, "GL_ARB_shading_language_packing", extensionStrLength) == 0) { tunisGL.support[GL_ARB_shading_language_packing] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_shadow] && (extensionStrLength == 13) && strncmp(extensionStr, "GL_ARB_shadow", extensionStrLength) == 0) { tunisGL.support[GL_ARB_shadow] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_shadow_ambient] && (extensionStrLength == 21) && strncmp(extensionStr, "GL_ARB_shadow_ambient", extensionStrLength) == 0) { tunisGL.support[GL_ARB_shadow_ambient] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_sparse_buffer] && (extensionStrLength == 20) && strncmp(extensionStr, "GL_ARB_sparse_buffer", extensionStrLength) == 0) { tunisGL.support[GL_ARB_sparse_buffer] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_sparse_texture] && (extensionStrLength == 21) && strncmp(extensionStr, "GL_ARB_sparse_texture", extensionStrLength) == 0) { tunisGL.support[GL_ARB_sparse_texture] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_sparse_texture2] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_ARB_sparse_texture2", extensionStrLength) == 0) { tunisGL.support[GL_ARB_sparse_texture2] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_sparse_texture_clamp] && (extensionStrLength == 27) && strncmp(extensionStr, "GL_ARB_sparse_texture_clamp", extensionStrLength) == 0) { tunisGL.support[GL_ARB_sparse_texture_clamp] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_spirv_extensions] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_ARB_spirv_extensions", extensionStrLength) == 0) { tunisGL.support[GL_ARB_spirv_extensions] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_stencil_texturing] && (extensionStrLength == 24) && strncmp(extensionStr, "GL_ARB_stencil_texturing", extensionStrLength) == 0) { tunisGL.support[GL_ARB_stencil_texturing] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_sync] && (extensionStrLength == 11) && strncmp(extensionStr, "GL_ARB_sync", extensionStrLength) == 0) { tunisGL.support[GL_ARB_sync] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_tessellation_shader] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_ARB_tessellation_shader", extensionStrLength) == 0) { tunisGL.support[GL_ARB_tessellation_shader] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_texture_barrier] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_ARB_texture_barrier", extensionStrLength) == 0) { tunisGL.support[GL_ARB_texture_barrier] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_texture_border_clamp] && (extensionStrLength == 27) && strncmp(extensionStr, "GL_ARB_texture_border_clamp", extensionStrLength) == 0) { tunisGL.support[GL_ARB_texture_border_clamp] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_texture_buffer_object] && (extensionStrLength == 28) && strncmp(extensionStr, "GL_ARB_texture_buffer_object", extensionStrLength) == 0) { tunisGL.support[GL_ARB_texture_buffer_object] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_texture_buffer_object_rgb32] && (extensionStrLength == 34) && strncmp(extensionStr, "GL_ARB_texture_buffer_object_rgb32", extensionStrLength) == 0) { tunisGL.support[GL_ARB_texture_buffer_object_rgb32] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_texture_buffer_range] && (extensionStrLength == 27) && strncmp(extensionStr, "GL_ARB_texture_buffer_range", extensionStrLength) == 0) { tunisGL.support[GL_ARB_texture_buffer_range] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_texture_compression] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_ARB_texture_compression", extensionStrLength) == 0) { tunisGL.support[GL_ARB_texture_compression] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_texture_compression_bptc] && (extensionStrLength == 31) && strncmp(extensionStr, "GL_ARB_texture_compression_bptc", extensionStrLength) == 0) { tunisGL.support[GL_ARB_texture_compression_bptc] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_texture_compression_rgtc] && (extensionStrLength == 31) && strncmp(extensionStr, "GL_ARB_texture_compression_rgtc", extensionStrLength) == 0) { tunisGL.support[GL_ARB_texture_compression_rgtc] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_texture_cube_map] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_ARB_texture_cube_map", extensionStrLength) == 0) { tunisGL.support[GL_ARB_texture_cube_map] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_texture_cube_map_array] && (extensionStrLength == 29) && strncmp(extensionStr, "GL_ARB_texture_cube_map_array", extensionStrLength) == 0) { tunisGL.support[GL_ARB_texture_cube_map_array] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_texture_env_add] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_ARB_texture_env_add", extensionStrLength) == 0) { tunisGL.support[GL_ARB_texture_env_add] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_texture_env_combine] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_ARB_texture_env_combine", extensionStrLength) == 0) { tunisGL.support[GL_ARB_texture_env_combine] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_texture_env_crossbar] && (extensionStrLength == 27) && strncmp(extensionStr, "GL_ARB_texture_env_crossbar", extensionStrLength) == 0) { tunisGL.support[GL_ARB_texture_env_crossbar] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_texture_env_dot3] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_ARB_texture_env_dot3", extensionStrLength) == 0) { tunisGL.support[GL_ARB_texture_env_dot3] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_texture_filter_anisotropic] && (extensionStrLength == 33) && strncmp(extensionStr, "GL_ARB_texture_filter_anisotropic", extensionStrLength) == 0) { tunisGL.support[GL_ARB_texture_filter_anisotropic] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_texture_filter_minmax] && (extensionStrLength == 28) && strncmp(extensionStr, "GL_ARB_texture_filter_minmax", extensionStrLength) == 0) { tunisGL.support[GL_ARB_texture_filter_minmax] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_texture_float] && (extensionStrLength == 20) && strncmp(extensionStr, "GL_ARB_texture_float", extensionStrLength) == 0) { tunisGL.support[GL_ARB_texture_float] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_texture_gather] && (extensionStrLength == 21) && strncmp(extensionStr, "GL_ARB_texture_gather", extensionStrLength) == 0) { tunisGL.support[GL_ARB_texture_gather] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_texture_mirror_clamp_to_edge] && (extensionStrLength == 35) && strncmp(extensionStr, "GL_ARB_texture_mirror_clamp_to_edge", extensionStrLength) == 0) { tunisGL.support[GL_ARB_texture_mirror_clamp_to_edge] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_texture_mirrored_repeat] && (extensionStrLength == 30) && strncmp(extensionStr, "GL_ARB_texture_mirrored_repeat", extensionStrLength) == 0) { tunisGL.support[GL_ARB_texture_mirrored_repeat] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_texture_multisample] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_ARB_texture_multisample", extensionStrLength) == 0) { tunisGL.support[GL_ARB_texture_multisample] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_texture_non_power_of_two] && (extensionStrLength == 31) && strncmp(extensionStr, "GL_ARB_texture_non_power_of_two", extensionStrLength) == 0) { tunisGL.support[GL_ARB_texture_non_power_of_two] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_texture_query_levels] && (extensionStrLength == 27) && strncmp(extensionStr, "GL_ARB_texture_query_levels", extensionStrLength) == 0) { tunisGL.support[GL_ARB_texture_query_levels] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_texture_query_lod] && (extensionStrLength == 24) && strncmp(extensionStr, "GL_ARB_texture_query_lod", extensionStrLength) == 0) { tunisGL.support[GL_ARB_texture_query_lod] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_texture_rectangle] && (extensionStrLength == 24) && strncmp(extensionStr, "GL_ARB_texture_rectangle", extensionStrLength) == 0) { tunisGL.support[GL_ARB_texture_rectangle] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_texture_rg] && (extensionStrLength == 17) && strncmp(extensionStr, "GL_ARB_texture_rg", extensionStrLength) == 0) { tunisGL.support[GL_ARB_texture_rg] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_texture_rgb10_a2ui] && (extensionStrLength == 25) && strncmp(extensionStr, "GL_ARB_texture_rgb10_a2ui", extensionStrLength) == 0) { tunisGL.support[GL_ARB_texture_rgb10_a2ui] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_texture_stencil8] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_ARB_texture_stencil8", extensionStrLength) == 0) { tunisGL.support[GL_ARB_texture_stencil8] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_texture_storage] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_ARB_texture_storage", extensionStrLength) == 0) { tunisGL.support[GL_ARB_texture_storage] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_texture_storage_multisample] && (extensionStrLength == 34) && strncmp(extensionStr, "GL_ARB_texture_storage_multisample", extensionStrLength) == 0) { tunisGL.support[GL_ARB_texture_storage_multisample] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_texture_swizzle] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_ARB_texture_swizzle", extensionStrLength) == 0) { tunisGL.support[GL_ARB_texture_swizzle] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_texture_view] && (extensionStrLength == 19) && strncmp(extensionStr, "GL_ARB_texture_view", extensionStrLength) == 0) { tunisGL.support[GL_ARB_texture_view] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_timer_query] && (extensionStrLength == 18) && strncmp(extensionStr, "GL_ARB_timer_query", extensionStrLength) == 0) { tunisGL.support[GL_ARB_timer_query] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_transform_feedback2] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_ARB_transform_feedback2", extensionStrLength) == 0) { tunisGL.support[GL_ARB_transform_feedback2] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_transform_feedback3] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_ARB_transform_feedback3", extensionStrLength) == 0) { tunisGL.support[GL_ARB_transform_feedback3] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_transform_feedback_instanced] && (extensionStrLength == 35) && strncmp(extensionStr, "GL_ARB_transform_feedback_instanced", extensionStrLength) == 0) { tunisGL.support[GL_ARB_transform_feedback_instanced] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_transform_feedback_overflow_query] && (extensionStrLength == 40) && strncmp(extensionStr, "GL_ARB_transform_feedback_overflow_query", extensionStrLength) == 0) { tunisGL.support[GL_ARB_transform_feedback_overflow_query] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_transpose_matrix] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_ARB_transpose_matrix", extensionStrLength) == 0) { tunisGL.support[GL_ARB_transpose_matrix] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_uniform_buffer_object] && (extensionStrLength == 28) && strncmp(extensionStr, "GL_ARB_uniform_buffer_object", extensionStrLength) == 0) { tunisGL.support[GL_ARB_uniform_buffer_object] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_vertex_array_bgra] && (extensionStrLength == 24) && strncmp(extensionStr, "GL_ARB_vertex_array_bgra", extensionStrLength) == 0) { tunisGL.support[GL_ARB_vertex_array_bgra] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_vertex_array_object] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_ARB_vertex_array_object", extensionStrLength) == 0) { tunisGL.support[GL_ARB_vertex_array_object] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_vertex_attrib_64bit] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_ARB_vertex_attrib_64bit", extensionStrLength) == 0) { tunisGL.support[GL_ARB_vertex_attrib_64bit] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_vertex_attrib_binding] && (extensionStrLength == 28) && strncmp(extensionStr, "GL_ARB_vertex_attrib_binding", extensionStrLength) == 0) { tunisGL.support[GL_ARB_vertex_attrib_binding] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_vertex_blend] && (extensionStrLength == 19) && strncmp(extensionStr, "GL_ARB_vertex_blend", extensionStrLength) == 0) { tunisGL.support[GL_ARB_vertex_blend] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_vertex_buffer_object] && (extensionStrLength == 27) && strncmp(extensionStr, "GL_ARB_vertex_buffer_object", extensionStrLength) == 0) { tunisGL.support[GL_ARB_vertex_buffer_object] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_vertex_program] && (extensionStrLength == 21) && strncmp(extensionStr, "GL_ARB_vertex_program", extensionStrLength) == 0) { tunisGL.support[GL_ARB_vertex_program] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_vertex_shader] && (extensionStrLength == 20) && strncmp(extensionStr, "GL_ARB_vertex_shader", extensionStrLength) == 0) { tunisGL.support[GL_ARB_vertex_shader] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_vertex_type_10f_11f_11f_rev] && (extensionStrLength == 34) && strncmp(extensionStr, "GL_ARB_vertex_type_10f_11f_11f_rev", extensionStrLength) == 0) { tunisGL.support[GL_ARB_vertex_type_10f_11f_11f_rev] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_vertex_type_2_10_10_10_rev] && (extensionStrLength == 33) && strncmp(extensionStr, "GL_ARB_vertex_type_2_10_10_10_rev", extensionStrLength) == 0) { tunisGL.support[GL_ARB_vertex_type_2_10_10_10_rev] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_viewport_array] && (extensionStrLength == 21) && strncmp(extensionStr, "GL_ARB_viewport_array", extensionStrLength) == 0) { tunisGL.support[GL_ARB_viewport_array] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_window_pos] && (extensionStrLength == 17) && strncmp(extensionStr, "GL_ARB_window_pos", extensionStrLength) == 0) { tunisGL.support[GL_ARB_window_pos] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ATI_draw_buffers] && (extensionStrLength == 19) && strncmp(extensionStr, "GL_ATI_draw_buffers", extensionStrLength) == 0) { tunisGL.support[GL_ATI_draw_buffers] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ATI_element_array] && (extensionStrLength == 20) && strncmp(extensionStr, "GL_ATI_element_array", extensionStrLength) == 0) { tunisGL.support[GL_ATI_element_array] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ATI_envmap_bumpmap] && (extensionStrLength == 21) && strncmp(extensionStr, "GL_ATI_envmap_bumpmap", extensionStrLength) == 0) { tunisGL.support[GL_ATI_envmap_bumpmap] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ATI_fragment_shader] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_ATI_fragment_shader", extensionStrLength) == 0) { tunisGL.support[GL_ATI_fragment_shader] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ATI_map_object_buffer] && (extensionStrLength == 24) && strncmp(extensionStr, "GL_ATI_map_object_buffer", extensionStrLength) == 0) { tunisGL.support[GL_ATI_map_object_buffer] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ATI_meminfo] && (extensionStrLength == 14) && strncmp(extensionStr, "GL_ATI_meminfo", extensionStrLength) == 0) { tunisGL.support[GL_ATI_meminfo] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ATI_pixel_format_float] && (extensionStrLength == 25) && strncmp(extensionStr, "GL_ATI_pixel_format_float", extensionStrLength) == 0) { tunisGL.support[GL_ATI_pixel_format_float] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ATI_pn_triangles] && (extensionStrLength == 19) && strncmp(extensionStr, "GL_ATI_pn_triangles", extensionStrLength) == 0) { tunisGL.support[GL_ATI_pn_triangles] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ATI_separate_stencil] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_ATI_separate_stencil", extensionStrLength) == 0) { tunisGL.support[GL_ATI_separate_stencil] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ATI_text_fragment_shader] && (extensionStrLength == 27) && strncmp(extensionStr, "GL_ATI_text_fragment_shader", extensionStrLength) == 0) { tunisGL.support[GL_ATI_text_fragment_shader] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ATI_texture_env_combine3] && (extensionStrLength == 27) && strncmp(extensionStr, "GL_ATI_texture_env_combine3", extensionStrLength) == 0) { tunisGL.support[GL_ATI_texture_env_combine3] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ATI_texture_float] && (extensionStrLength == 20) && strncmp(extensionStr, "GL_ATI_texture_float", extensionStrLength) == 0) { tunisGL.support[GL_ATI_texture_float] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ATI_texture_mirror_once] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_ATI_texture_mirror_once", extensionStrLength) == 0) { tunisGL.support[GL_ATI_texture_mirror_once] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ATI_vertex_array_object] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_ATI_vertex_array_object", extensionStrLength) == 0) { tunisGL.support[GL_ATI_vertex_array_object] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ATI_vertex_attrib_array_object] && (extensionStrLength == 33) && strncmp(extensionStr, "GL_ATI_vertex_attrib_array_object", extensionStrLength) == 0) { tunisGL.support[GL_ATI_vertex_attrib_array_object] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ATI_vertex_streams] && (extensionStrLength == 21) && strncmp(extensionStr, "GL_ATI_vertex_streams", extensionStrLength) == 0) { tunisGL.support[GL_ATI_vertex_streams] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXTX_framebuffer_mixed_formats] && (extensionStrLength == 33) && strncmp(extensionStr, "GL_EXTX_framebuffer_mixed_formats", extensionStrLength) == 0) { tunisGL.support[GL_EXTX_framebuffer_mixed_formats] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_422_pixels] && (extensionStrLength == 17) && strncmp(extensionStr, "GL_EXT_422_pixels", extensionStrLength) == 0) { tunisGL.support[GL_EXT_422_pixels] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_Cg_shader] && (extensionStrLength == 16) && strncmp(extensionStr, "GL_EXT_Cg_shader", extensionStrLength) == 0) { tunisGL.support[GL_EXT_Cg_shader] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_EGL_image_storage] && (extensionStrLength == 24) && strncmp(extensionStr, "GL_EXT_EGL_image_storage", extensionStrLength) == 0) { tunisGL.support[GL_EXT_EGL_image_storage] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_abgr] && (extensionStrLength == 11) && strncmp(extensionStr, "GL_EXT_abgr", extensionStrLength) == 0) { tunisGL.support[GL_EXT_abgr] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_bgra] && (extensionStrLength == 11) && strncmp(extensionStr, "GL_EXT_bgra", extensionStrLength) == 0) { tunisGL.support[GL_EXT_bgra] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_bindable_uniform] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_EXT_bindable_uniform", extensionStrLength) == 0) { tunisGL.support[GL_EXT_bindable_uniform] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_blend_color] && (extensionStrLength == 18) && strncmp(extensionStr, "GL_EXT_blend_color", extensionStrLength) == 0) { tunisGL.support[GL_EXT_blend_color] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_blend_equation_separate] && (extensionStrLength == 30) && strncmp(extensionStr, "GL_EXT_blend_equation_separate", extensionStrLength) == 0) { tunisGL.support[GL_EXT_blend_equation_separate] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_blend_func_separate] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_EXT_blend_func_separate", extensionStrLength) == 0) { tunisGL.support[GL_EXT_blend_func_separate] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_blend_logic_op] && (extensionStrLength == 21) && strncmp(extensionStr, "GL_EXT_blend_logic_op", extensionStrLength) == 0) { tunisGL.support[GL_EXT_blend_logic_op] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_blend_minmax] && (extensionStrLength == 19) && strncmp(extensionStr, "GL_EXT_blend_minmax", extensionStrLength) == 0) { tunisGL.support[GL_EXT_blend_minmax] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_blend_subtract] && (extensionStrLength == 21) && strncmp(extensionStr, "GL_EXT_blend_subtract", extensionStrLength) == 0) { tunisGL.support[GL_EXT_blend_subtract] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_clip_volume_hint] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_EXT_clip_volume_hint", extensionStrLength) == 0) { tunisGL.support[GL_EXT_clip_volume_hint] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_cmyka] && (extensionStrLength == 12) && strncmp(extensionStr, "GL_EXT_cmyka", extensionStrLength) == 0) { tunisGL.support[GL_EXT_cmyka] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_color_subtable] && (extensionStrLength == 21) && strncmp(extensionStr, "GL_EXT_color_subtable", extensionStrLength) == 0) { tunisGL.support[GL_EXT_color_subtable] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_compiled_vertex_array] && (extensionStrLength == 28) && strncmp(extensionStr, "GL_EXT_compiled_vertex_array", extensionStrLength) == 0) { tunisGL.support[GL_EXT_compiled_vertex_array] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_convolution] && (extensionStrLength == 18) && strncmp(extensionStr, "GL_EXT_convolution", extensionStrLength) == 0) { tunisGL.support[GL_EXT_convolution] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_coordinate_frame] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_EXT_coordinate_frame", extensionStrLength) == 0) { tunisGL.support[GL_EXT_coordinate_frame] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_copy_texture] && (extensionStrLength == 19) && strncmp(extensionStr, "GL_EXT_copy_texture", extensionStrLength) == 0) { tunisGL.support[GL_EXT_copy_texture] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_cull_vertex] && (extensionStrLength == 18) && strncmp(extensionStr, "GL_EXT_cull_vertex", extensionStrLength) == 0) { tunisGL.support[GL_EXT_cull_vertex] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_debug_label] && (extensionStrLength == 18) && strncmp(extensionStr, "GL_EXT_debug_label", extensionStrLength) == 0) { tunisGL.support[GL_EXT_debug_label] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_debug_marker] && (extensionStrLength == 19) && strncmp(extensionStr, "GL_EXT_debug_marker", extensionStrLength) == 0) { tunisGL.support[GL_EXT_debug_marker] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_depth_bounds_test] && (extensionStrLength == 24) && strncmp(extensionStr, "GL_EXT_depth_bounds_test", extensionStrLength) == 0) { tunisGL.support[GL_EXT_depth_bounds_test] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_direct_state_access] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_EXT_direct_state_access", extensionStrLength) == 0) { tunisGL.support[GL_EXT_direct_state_access] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_draw_buffers2] && (extensionStrLength == 20) && strncmp(extensionStr, "GL_EXT_draw_buffers2", extensionStrLength) == 0) { tunisGL.support[GL_EXT_draw_buffers2] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_draw_instanced] && (extensionStrLength == 21) && strncmp(extensionStr, "GL_EXT_draw_instanced", extensionStrLength) == 0) { tunisGL.support[GL_EXT_draw_instanced] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_draw_range_elements] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_EXT_draw_range_elements", extensionStrLength) == 0) { tunisGL.support[GL_EXT_draw_range_elements] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_external_buffer] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_EXT_external_buffer", extensionStrLength) == 0) { tunisGL.support[GL_EXT_external_buffer] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_fog_coord] && (extensionStrLength == 16) && strncmp(extensionStr, "GL_EXT_fog_coord", extensionStrLength) == 0) { tunisGL.support[GL_EXT_fog_coord] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_framebuffer_blit] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_EXT_framebuffer_blit", extensionStrLength) == 0) { tunisGL.support[GL_EXT_framebuffer_blit] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_framebuffer_multisample] && (extensionStrLength == 30) && strncmp(extensionStr, "GL_EXT_framebuffer_multisample", extensionStrLength) == 0) { tunisGL.support[GL_EXT_framebuffer_multisample] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_framebuffer_multisample_blit_scaled] && (extensionStrLength == 42) && strncmp(extensionStr, "GL_EXT_framebuffer_multisample_blit_scaled", extensionStrLength) == 0) { tunisGL.support[GL_EXT_framebuffer_multisample_blit_scaled] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_framebuffer_object] && (extensionStrLength == 25) && strncmp(extensionStr, "GL_EXT_framebuffer_object", extensionStrLength) == 0) { tunisGL.support[GL_EXT_framebuffer_object] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_framebuffer_sRGB] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_EXT_framebuffer_sRGB", extensionStrLength) == 0) { tunisGL.support[GL_EXT_framebuffer_sRGB] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_geometry_shader4] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_EXT_geometry_shader4", extensionStrLength) == 0) { tunisGL.support[GL_EXT_geometry_shader4] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_gpu_program_parameters] && (extensionStrLength == 29) && strncmp(extensionStr, "GL_EXT_gpu_program_parameters", extensionStrLength) == 0) { tunisGL.support[GL_EXT_gpu_program_parameters] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_gpu_shader4] && (extensionStrLength == 18) && strncmp(extensionStr, "GL_EXT_gpu_shader4", extensionStrLength) == 0) { tunisGL.support[GL_EXT_gpu_shader4] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_histogram] && (extensionStrLength == 16) && strncmp(extensionStr, "GL_EXT_histogram", extensionStrLength) == 0) { tunisGL.support[GL_EXT_histogram] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_import_sync_object] && (extensionStrLength == 25) && strncmp(extensionStr, "GL_EXT_import_sync_object", extensionStrLength) == 0) { tunisGL.support[GL_EXT_import_sync_object] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_index_array_formats] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_EXT_index_array_formats", extensionStrLength) == 0) { tunisGL.support[GL_EXT_index_array_formats] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_index_func] && (extensionStrLength == 17) && strncmp(extensionStr, "GL_EXT_index_func", extensionStrLength) == 0) { tunisGL.support[GL_EXT_index_func] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_index_material] && (extensionStrLength == 21) && strncmp(extensionStr, "GL_EXT_index_material", extensionStrLength) == 0) { tunisGL.support[GL_EXT_index_material] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_index_texture] && (extensionStrLength == 20) && strncmp(extensionStr, "GL_EXT_index_texture", extensionStrLength) == 0) { tunisGL.support[GL_EXT_index_texture] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_light_texture] && (extensionStrLength == 20) && strncmp(extensionStr, "GL_EXT_light_texture", extensionStrLength) == 0) { tunisGL.support[GL_EXT_light_texture] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_memory_object] && (extensionStrLength == 20) && strncmp(extensionStr, "GL_EXT_memory_object", extensionStrLength) == 0) { tunisGL.support[GL_EXT_memory_object] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_memory_object_fd] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_EXT_memory_object_fd", extensionStrLength) == 0) { tunisGL.support[GL_EXT_memory_object_fd] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_memory_object_win32] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_EXT_memory_object_win32", extensionStrLength) == 0) { tunisGL.support[GL_EXT_memory_object_win32] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_misc_attribute] && (extensionStrLength == 21) && strncmp(extensionStr, "GL_EXT_misc_attribute", extensionStrLength) == 0) { tunisGL.support[GL_EXT_misc_attribute] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_multi_draw_arrays] && (extensionStrLength == 24) && strncmp(extensionStr, "GL_EXT_multi_draw_arrays", extensionStrLength) == 0) { tunisGL.support[GL_EXT_multi_draw_arrays] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_multisample] && (extensionStrLength == 18) && strncmp(extensionStr, "GL_EXT_multisample", extensionStrLength) == 0) { tunisGL.support[GL_EXT_multisample] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_packed_depth_stencil] && (extensionStrLength == 27) && strncmp(extensionStr, "GL_EXT_packed_depth_stencil", extensionStrLength) == 0) { tunisGL.support[GL_EXT_packed_depth_stencil] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_packed_float] && (extensionStrLength == 19) && strncmp(extensionStr, "GL_EXT_packed_float", extensionStrLength) == 0) { tunisGL.support[GL_EXT_packed_float] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_packed_pixels] && (extensionStrLength == 20) && strncmp(extensionStr, "GL_EXT_packed_pixels", extensionStrLength) == 0) { tunisGL.support[GL_EXT_packed_pixels] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_paletted_texture] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_EXT_paletted_texture", extensionStrLength) == 0) { tunisGL.support[GL_EXT_paletted_texture] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_pixel_buffer_object] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_EXT_pixel_buffer_object", extensionStrLength) == 0) { tunisGL.support[GL_EXT_pixel_buffer_object] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_pixel_transform] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_EXT_pixel_transform", extensionStrLength) == 0) { tunisGL.support[GL_EXT_pixel_transform] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_pixel_transform_color_table] && (extensionStrLength == 34) && strncmp(extensionStr, "GL_EXT_pixel_transform_color_table", extensionStrLength) == 0) { tunisGL.support[GL_EXT_pixel_transform_color_table] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_point_parameters] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_EXT_point_parameters", extensionStrLength) == 0) { tunisGL.support[GL_EXT_point_parameters] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_polygon_offset] && (extensionStrLength == 21) && strncmp(extensionStr, "GL_EXT_polygon_offset", extensionStrLength) == 0) { tunisGL.support[GL_EXT_polygon_offset] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_polygon_offset_clamp] && (extensionStrLength == 27) && strncmp(extensionStr, "GL_EXT_polygon_offset_clamp", extensionStrLength) == 0) { tunisGL.support[GL_EXT_polygon_offset_clamp] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_post_depth_coverage] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_EXT_post_depth_coverage", extensionStrLength) == 0) { tunisGL.support[GL_EXT_post_depth_coverage] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_provoking_vertex] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_EXT_provoking_vertex", extensionStrLength) == 0) { tunisGL.support[GL_EXT_provoking_vertex] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_raster_multisample] && (extensionStrLength == 25) && strncmp(extensionStr, "GL_EXT_raster_multisample", extensionStrLength) == 0) { tunisGL.support[GL_EXT_raster_multisample] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_rescale_normal] && (extensionStrLength == 21) && strncmp(extensionStr, "GL_EXT_rescale_normal", extensionStrLength) == 0) { tunisGL.support[GL_EXT_rescale_normal] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_secondary_color] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_EXT_secondary_color", extensionStrLength) == 0) { tunisGL.support[GL_EXT_secondary_color] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_semaphore] && (extensionStrLength == 16) && strncmp(extensionStr, "GL_EXT_semaphore", extensionStrLength) == 0) { tunisGL.support[GL_EXT_semaphore] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_semaphore_fd] && (extensionStrLength == 19) && strncmp(extensionStr, "GL_EXT_semaphore_fd", extensionStrLength) == 0) { tunisGL.support[GL_EXT_semaphore_fd] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_semaphore_win32] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_EXT_semaphore_win32", extensionStrLength) == 0) { tunisGL.support[GL_EXT_semaphore_win32] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_separate_shader_objects] && (extensionStrLength == 30) && strncmp(extensionStr, "GL_EXT_separate_shader_objects", extensionStrLength) == 0) { tunisGL.support[GL_EXT_separate_shader_objects] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_separate_specular_color] && (extensionStrLength == 30) && strncmp(extensionStr, "GL_EXT_separate_specular_color", extensionStrLength) == 0) { tunisGL.support[GL_EXT_separate_specular_color] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_shader_framebuffer_fetch] && (extensionStrLength == 31) && strncmp(extensionStr, "GL_EXT_shader_framebuffer_fetch", extensionStrLength) == 0) { tunisGL.support[GL_EXT_shader_framebuffer_fetch] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_shader_framebuffer_fetch_non_coherent] && (extensionStrLength == 44) && strncmp(extensionStr, "GL_EXT_shader_framebuffer_fetch_non_coherent", extensionStrLength) == 0) { tunisGL.support[GL_EXT_shader_framebuffer_fetch_non_coherent] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_shader_image_load_formatted] && (extensionStrLength == 34) && strncmp(extensionStr, "GL_EXT_shader_image_load_formatted", extensionStrLength) == 0) { tunisGL.support[GL_EXT_shader_image_load_formatted] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_shader_image_load_store] && (extensionStrLength == 30) && strncmp(extensionStr, "GL_EXT_shader_image_load_store", extensionStrLength) == 0) { tunisGL.support[GL_EXT_shader_image_load_store] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_shader_integer_mix] && (extensionStrLength == 25) && strncmp(extensionStr, "GL_EXT_shader_integer_mix", extensionStrLength) == 0) { tunisGL.support[GL_EXT_shader_integer_mix] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_shadow_funcs] && (extensionStrLength == 19) && strncmp(extensionStr, "GL_EXT_shadow_funcs", extensionStrLength) == 0) { tunisGL.support[GL_EXT_shadow_funcs] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_shared_texture_palette] && (extensionStrLength == 29) && strncmp(extensionStr, "GL_EXT_shared_texture_palette", extensionStrLength) == 0) { tunisGL.support[GL_EXT_shared_texture_palette] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_sparse_texture2] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_EXT_sparse_texture2", extensionStrLength) == 0) { tunisGL.support[GL_EXT_sparse_texture2] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_stencil_clear_tag] && (extensionStrLength == 24) && strncmp(extensionStr, "GL_EXT_stencil_clear_tag", extensionStrLength) == 0) { tunisGL.support[GL_EXT_stencil_clear_tag] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_stencil_two_side] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_EXT_stencil_two_side", extensionStrLength) == 0) { tunisGL.support[GL_EXT_stencil_two_side] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_stencil_wrap] && (extensionStrLength == 19) && strncmp(extensionStr, "GL_EXT_stencil_wrap", extensionStrLength) == 0) { tunisGL.support[GL_EXT_stencil_wrap] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_subtexture] && (extensionStrLength == 17) && strncmp(extensionStr, "GL_EXT_subtexture", extensionStrLength) == 0) { tunisGL.support[GL_EXT_subtexture] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_texture] && (extensionStrLength == 14) && strncmp(extensionStr, "GL_EXT_texture", extensionStrLength) == 0) { tunisGL.support[GL_EXT_texture] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_texture3D] && (extensionStrLength == 16) && strncmp(extensionStr, "GL_EXT_texture3D", extensionStrLength) == 0) { tunisGL.support[GL_EXT_texture3D] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_texture_array] && (extensionStrLength == 20) && strncmp(extensionStr, "GL_EXT_texture_array", extensionStrLength) == 0) { tunisGL.support[GL_EXT_texture_array] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_texture_buffer_object] && (extensionStrLength == 28) && strncmp(extensionStr, "GL_EXT_texture_buffer_object", extensionStrLength) == 0) { tunisGL.support[GL_EXT_texture_buffer_object] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_texture_compression_dxt1] && (extensionStrLength == 31) && strncmp(extensionStr, "GL_EXT_texture_compression_dxt1", extensionStrLength) == 0) { tunisGL.support[GL_EXT_texture_compression_dxt1] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_texture_compression_latc] && (extensionStrLength == 31) && strncmp(extensionStr, "GL_EXT_texture_compression_latc", extensionStrLength) == 0) { tunisGL.support[GL_EXT_texture_compression_latc] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_texture_compression_rgtc] && (extensionStrLength == 31) && strncmp(extensionStr, "GL_EXT_texture_compression_rgtc", extensionStrLength) == 0) { tunisGL.support[GL_EXT_texture_compression_rgtc] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_texture_compression_s3tc] && (extensionStrLength == 31) && strncmp(extensionStr, "GL_EXT_texture_compression_s3tc", extensionStrLength) == 0) { tunisGL.support[GL_EXT_texture_compression_s3tc] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_texture_cube_map] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_EXT_texture_cube_map", extensionStrLength) == 0) { tunisGL.support[GL_EXT_texture_cube_map] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_texture_edge_clamp] && (extensionStrLength == 25) && strncmp(extensionStr, "GL_EXT_texture_edge_clamp", extensionStrLength) == 0) { tunisGL.support[GL_EXT_texture_edge_clamp] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_texture_env_add] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_EXT_texture_env_add", extensionStrLength) == 0) { tunisGL.support[GL_EXT_texture_env_add] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_texture_env_combine] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_EXT_texture_env_combine", extensionStrLength) == 0) { tunisGL.support[GL_EXT_texture_env_combine] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_texture_env_dot3] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_EXT_texture_env_dot3", extensionStrLength) == 0) { tunisGL.support[GL_EXT_texture_env_dot3] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_texture_filter_anisotropic] && (extensionStrLength == 33) && strncmp(extensionStr, "GL_EXT_texture_filter_anisotropic", extensionStrLength) == 0) { tunisGL.support[GL_EXT_texture_filter_anisotropic] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_texture_filter_minmax] && (extensionStrLength == 28) && strncmp(extensionStr, "GL_EXT_texture_filter_minmax", extensionStrLength) == 0) { tunisGL.support[GL_EXT_texture_filter_minmax] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_texture_integer] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_EXT_texture_integer", extensionStrLength) == 0) { tunisGL.support[GL_EXT_texture_integer] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_texture_lod] && (extensionStrLength == 18) && strncmp(extensionStr, "GL_EXT_texture_lod", extensionStrLength) == 0) { tunisGL.support[GL_EXT_texture_lod] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_texture_lod_bias] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_EXT_texture_lod_bias", extensionStrLength) == 0) { tunisGL.support[GL_EXT_texture_lod_bias] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_texture_mirror_clamp] && (extensionStrLength == 27) && strncmp(extensionStr, "GL_EXT_texture_mirror_clamp", extensionStrLength) == 0) { tunisGL.support[GL_EXT_texture_mirror_clamp] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_texture_object] && (extensionStrLength == 21) && strncmp(extensionStr, "GL_EXT_texture_object", extensionStrLength) == 0) { tunisGL.support[GL_EXT_texture_object] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_texture_perturb_normal] && (extensionStrLength == 29) && strncmp(extensionStr, "GL_EXT_texture_perturb_normal", extensionStrLength) == 0) { tunisGL.support[GL_EXT_texture_perturb_normal] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_texture_sRGB] && (extensionStrLength == 19) && strncmp(extensionStr, "GL_EXT_texture_sRGB", extensionStrLength) == 0) { tunisGL.support[GL_EXT_texture_sRGB] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_texture_sRGB_decode] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_EXT_texture_sRGB_decode", extensionStrLength) == 0) { tunisGL.support[GL_EXT_texture_sRGB_decode] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_texture_shared_exponent] && (extensionStrLength == 30) && strncmp(extensionStr, "GL_EXT_texture_shared_exponent", extensionStrLength) == 0) { tunisGL.support[GL_EXT_texture_shared_exponent] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_texture_snorm] && (extensionStrLength == 20) && strncmp(extensionStr, "GL_EXT_texture_snorm", extensionStrLength) == 0) { tunisGL.support[GL_EXT_texture_snorm] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_texture_storage] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_EXT_texture_storage", extensionStrLength) == 0) { tunisGL.support[GL_EXT_texture_storage] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_texture_swizzle] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_EXT_texture_swizzle", extensionStrLength) == 0) { tunisGL.support[GL_EXT_texture_swizzle] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_timer_query] && (extensionStrLength == 18) && strncmp(extensionStr, "GL_EXT_timer_query", extensionStrLength) == 0) { tunisGL.support[GL_EXT_timer_query] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_transform_feedback] && (extensionStrLength == 25) && strncmp(extensionStr, "GL_EXT_transform_feedback", extensionStrLength) == 0) { tunisGL.support[GL_EXT_transform_feedback] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_vertex_array] && (extensionStrLength == 19) && strncmp(extensionStr, "GL_EXT_vertex_array", extensionStrLength) == 0) { tunisGL.support[GL_EXT_vertex_array] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_vertex_array_bgra] && (extensionStrLength == 24) && strncmp(extensionStr, "GL_EXT_vertex_array_bgra", extensionStrLength) == 0) { tunisGL.support[GL_EXT_vertex_array_bgra] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_vertex_attrib_64bit] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_EXT_vertex_attrib_64bit", extensionStrLength) == 0) { tunisGL.support[GL_EXT_vertex_attrib_64bit] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_vertex_shader] && (extensionStrLength == 20) && strncmp(extensionStr, "GL_EXT_vertex_shader", extensionStrLength) == 0) { tunisGL.support[GL_EXT_vertex_shader] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_vertex_weighting] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_EXT_vertex_weighting", extensionStrLength) == 0) { tunisGL.support[GL_EXT_vertex_weighting] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_win32_keyed_mutex] && (extensionStrLength == 24) && strncmp(extensionStr, "GL_EXT_win32_keyed_mutex", extensionStrLength) == 0) { tunisGL.support[GL_EXT_win32_keyed_mutex] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_window_rectangles] && (extensionStrLength == 24) && strncmp(extensionStr, "GL_EXT_window_rectangles", extensionStrLength) == 0) { tunisGL.support[GL_EXT_window_rectangles] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_x11_sync_object] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_EXT_x11_sync_object", extensionStrLength) == 0) { tunisGL.support[GL_EXT_x11_sync_object] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_GREMEDY_frame_terminator] && (extensionStrLength == 27) && strncmp(extensionStr, "GL_GREMEDY_frame_terminator", extensionStrLength) == 0) { tunisGL.support[GL_GREMEDY_frame_terminator] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_GREMEDY_string_marker] && (extensionStrLength == 24) && strncmp(extensionStr, "GL_GREMEDY_string_marker", extensionStrLength) == 0) { tunisGL.support[GL_GREMEDY_string_marker] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_HP_convolution_border_modes] && (extensionStrLength == 30) && strncmp(extensionStr, "GL_HP_convolution_border_modes", extensionStrLength) == 0) { tunisGL.support[GL_HP_convolution_border_modes] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_HP_image_transform] && (extensionStrLength == 21) && strncmp(extensionStr, "GL_HP_image_transform", extensionStrLength) == 0) { tunisGL.support[GL_HP_image_transform] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_HP_occlusion_test] && (extensionStrLength == 20) && strncmp(extensionStr, "GL_HP_occlusion_test", extensionStrLength) == 0) { tunisGL.support[GL_HP_occlusion_test] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_HP_texture_lighting] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_HP_texture_lighting", extensionStrLength) == 0) { tunisGL.support[GL_HP_texture_lighting] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_IBM_cull_vertex] && (extensionStrLength == 18) && strncmp(extensionStr, "GL_IBM_cull_vertex", extensionStrLength) == 0) { tunisGL.support[GL_IBM_cull_vertex] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_IBM_multimode_draw_arrays] && (extensionStrLength == 28) && strncmp(extensionStr, "GL_IBM_multimode_draw_arrays", extensionStrLength) == 0) { tunisGL.support[GL_IBM_multimode_draw_arrays] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_IBM_rasterpos_clip] && (extensionStrLength == 21) && strncmp(extensionStr, "GL_IBM_rasterpos_clip", extensionStrLength) == 0) { tunisGL.support[GL_IBM_rasterpos_clip] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_IBM_static_data] && (extensionStrLength == 18) && strncmp(extensionStr, "GL_IBM_static_data", extensionStrLength) == 0) { tunisGL.support[GL_IBM_static_data] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_IBM_texture_mirrored_repeat] && (extensionStrLength == 30) && strncmp(extensionStr, "GL_IBM_texture_mirrored_repeat", extensionStrLength) == 0) { tunisGL.support[GL_IBM_texture_mirrored_repeat] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_IBM_vertex_array_lists] && (extensionStrLength == 25) && strncmp(extensionStr, "GL_IBM_vertex_array_lists", extensionStrLength) == 0) { tunisGL.support[GL_IBM_vertex_array_lists] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_INGR_blend_func_separate] && (extensionStrLength == 27) && strncmp(extensionStr, "GL_INGR_blend_func_separate", extensionStrLength) == 0) { tunisGL.support[GL_INGR_blend_func_separate] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_INGR_color_clamp] && (extensionStrLength == 19) && strncmp(extensionStr, "GL_INGR_color_clamp", extensionStrLength) == 0) { tunisGL.support[GL_INGR_color_clamp] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_INGR_interlace_read] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_INGR_interlace_read", extensionStrLength) == 0) { tunisGL.support[GL_INGR_interlace_read] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_INTEL_blackhole_render] && (extensionStrLength == 25) && strncmp(extensionStr, "GL_INTEL_blackhole_render", extensionStrLength) == 0) { tunisGL.support[GL_INTEL_blackhole_render] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_INTEL_conservative_rasterization] && (extensionStrLength == 35) && strncmp(extensionStr, "GL_INTEL_conservative_rasterization", extensionStrLength) == 0) { tunisGL.support[GL_INTEL_conservative_rasterization] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_INTEL_fragment_shader_ordering] && (extensionStrLength == 33) && strncmp(extensionStr, "GL_INTEL_fragment_shader_ordering", extensionStrLength) == 0) { tunisGL.support[GL_INTEL_fragment_shader_ordering] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_INTEL_framebuffer_CMAA] && (extensionStrLength == 25) && strncmp(extensionStr, "GL_INTEL_framebuffer_CMAA", extensionStrLength) == 0) { tunisGL.support[GL_INTEL_framebuffer_CMAA] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_INTEL_map_texture] && (extensionStrLength == 20) && strncmp(extensionStr, "GL_INTEL_map_texture", extensionStrLength) == 0) { tunisGL.support[GL_INTEL_map_texture] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_INTEL_parallel_arrays] && (extensionStrLength == 24) && strncmp(extensionStr, "GL_INTEL_parallel_arrays", extensionStrLength) == 0) { tunisGL.support[GL_INTEL_parallel_arrays] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_INTEL_performance_query] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_INTEL_performance_query", extensionStrLength) == 0) { tunisGL.support[GL_INTEL_performance_query] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_KHR_blend_equation_advanced] && (extensionStrLength == 30) && strncmp(extensionStr, "GL_KHR_blend_equation_advanced", extensionStrLength) == 0) { tunisGL.support[GL_KHR_blend_equation_advanced] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_KHR_blend_equation_advanced_coherent] && (extensionStrLength == 39) && strncmp(extensionStr, "GL_KHR_blend_equation_advanced_coherent", extensionStrLength) == 0) { tunisGL.support[GL_KHR_blend_equation_advanced_coherent] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_KHR_context_flush_control] && (extensionStrLength == 28) && strncmp(extensionStr, "GL_KHR_context_flush_control", extensionStrLength) == 0) { tunisGL.support[GL_KHR_context_flush_control] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_KHR_debug] && (extensionStrLength == 12) && strncmp(extensionStr, "GL_KHR_debug", extensionStrLength) == 0) { tunisGL.support[GL_KHR_debug] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_KHR_no_error] && (extensionStrLength == 15) && strncmp(extensionStr, "GL_KHR_no_error", extensionStrLength) == 0) { tunisGL.support[GL_KHR_no_error] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_KHR_parallel_shader_compile] && (extensionStrLength == 30) && strncmp(extensionStr, "GL_KHR_parallel_shader_compile", extensionStrLength) == 0) { tunisGL.support[GL_KHR_parallel_shader_compile] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_KHR_robust_buffer_access_behavior] && (extensionStrLength == 36) && strncmp(extensionStr, "GL_KHR_robust_buffer_access_behavior", extensionStrLength) == 0) { tunisGL.support[GL_KHR_robust_buffer_access_behavior] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_KHR_robustness] && (extensionStrLength == 17) && strncmp(extensionStr, "GL_KHR_robustness", extensionStrLength) == 0) { tunisGL.support[GL_KHR_robustness] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_KHR_texture_compression_astc_hdr] && (extensionStrLength == 35) && strncmp(extensionStr, "GL_KHR_texture_compression_astc_hdr", extensionStrLength) == 0) { tunisGL.support[GL_KHR_texture_compression_astc_hdr] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_KHR_texture_compression_astc_ldr] && (extensionStrLength == 35) && strncmp(extensionStr, "GL_KHR_texture_compression_astc_ldr", extensionStrLength) == 0) { tunisGL.support[GL_KHR_texture_compression_astc_ldr] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_KHR_texture_compression_astc_sliced_3d] && (extensionStrLength == 41) && strncmp(extensionStr, "GL_KHR_texture_compression_astc_sliced_3d", extensionStrLength) == 0) { tunisGL.support[GL_KHR_texture_compression_astc_sliced_3d] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_KTX_buffer_region] && (extensionStrLength == 20) && strncmp(extensionStr, "GL_KTX_buffer_region", extensionStrLength) == 0) { tunisGL.support[GL_KTX_buffer_region] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_MESAX_texture_stack] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_MESAX_texture_stack", extensionStrLength) == 0) { tunisGL.support[GL_MESAX_texture_stack] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_MESA_pack_invert] && (extensionStrLength == 19) && strncmp(extensionStr, "GL_MESA_pack_invert", extensionStrLength) == 0) { tunisGL.support[GL_MESA_pack_invert] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_MESA_program_binary_formats] && (extensionStrLength == 30) && strncmp(extensionStr, "GL_MESA_program_binary_formats", extensionStrLength) == 0) { tunisGL.support[GL_MESA_program_binary_formats] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_MESA_resize_buffers] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_MESA_resize_buffers", extensionStrLength) == 0) { tunisGL.support[GL_MESA_resize_buffers] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_MESA_shader_integer_functions] && (extensionStrLength == 32) && strncmp(extensionStr, "GL_MESA_shader_integer_functions", extensionStrLength) == 0) { tunisGL.support[GL_MESA_shader_integer_functions] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_MESA_tile_raster_order] && (extensionStrLength == 25) && strncmp(extensionStr, "GL_MESA_tile_raster_order", extensionStrLength) == 0) { tunisGL.support[GL_MESA_tile_raster_order] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_MESA_window_pos] && (extensionStrLength == 18) && strncmp(extensionStr, "GL_MESA_window_pos", extensionStrLength) == 0) { tunisGL.support[GL_MESA_window_pos] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_MESA_ycbcr_texture] && (extensionStrLength == 21) && strncmp(extensionStr, "GL_MESA_ycbcr_texture", extensionStrLength) == 0) { tunisGL.support[GL_MESA_ycbcr_texture] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NVX_blend_equation_advanced_multi_draw_buffers] && (extensionStrLength == 49) && strncmp(extensionStr, "GL_NVX_blend_equation_advanced_multi_draw_buffers", extensionStrLength) == 0) { tunisGL.support[GL_NVX_blend_equation_advanced_multi_draw_buffers] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NVX_conditional_render] && (extensionStrLength == 25) && strncmp(extensionStr, "GL_NVX_conditional_render", extensionStrLength) == 0) { tunisGL.support[GL_NVX_conditional_render] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NVX_gpu_memory_info] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_NVX_gpu_memory_info", extensionStrLength) == 0) { tunisGL.support[GL_NVX_gpu_memory_info] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NVX_linked_gpu_multicast] && (extensionStrLength == 27) && strncmp(extensionStr, "GL_NVX_linked_gpu_multicast", extensionStrLength) == 0) { tunisGL.support[GL_NVX_linked_gpu_multicast] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_ES1_1_compatibility] && (extensionStrLength == 25) && strncmp(extensionStr, "GL_NV_ES1_1_compatibility", extensionStrLength) == 0) { tunisGL.support[GL_NV_ES1_1_compatibility] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_ES3_1_compatibility] && (extensionStrLength == 25) && strncmp(extensionStr, "GL_NV_ES3_1_compatibility", extensionStrLength) == 0) { tunisGL.support[GL_NV_ES3_1_compatibility] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_alpha_to_coverage_dither_control] && (extensionStrLength == 38) && strncmp(extensionStr, "GL_NV_alpha_to_coverage_dither_control", extensionStrLength) == 0) { tunisGL.support[GL_NV_alpha_to_coverage_dither_control] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_bindless_multi_draw_indirect] && (extensionStrLength == 34) && strncmp(extensionStr, "GL_NV_bindless_multi_draw_indirect", extensionStrLength) == 0) { tunisGL.support[GL_NV_bindless_multi_draw_indirect] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_bindless_multi_draw_indirect_count] && (extensionStrLength == 40) && strncmp(extensionStr, "GL_NV_bindless_multi_draw_indirect_count", extensionStrLength) == 0) { tunisGL.support[GL_NV_bindless_multi_draw_indirect_count] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_bindless_texture] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_NV_bindless_texture", extensionStrLength) == 0) { tunisGL.support[GL_NV_bindless_texture] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_blend_equation_advanced] && (extensionStrLength == 29) && strncmp(extensionStr, "GL_NV_blend_equation_advanced", extensionStrLength) == 0) { tunisGL.support[GL_NV_blend_equation_advanced] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_blend_equation_advanced_coherent] && (extensionStrLength == 38) && strncmp(extensionStr, "GL_NV_blend_equation_advanced_coherent", extensionStrLength) == 0) { tunisGL.support[GL_NV_blend_equation_advanced_coherent] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_blend_minmax_factor] && (extensionStrLength == 25) && strncmp(extensionStr, "GL_NV_blend_minmax_factor", extensionStrLength) == 0) { tunisGL.support[GL_NV_blend_minmax_factor] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_blend_square] && (extensionStrLength == 18) && strncmp(extensionStr, "GL_NV_blend_square", extensionStrLength) == 0) { tunisGL.support[GL_NV_blend_square] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_clip_space_w_scaling] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_NV_clip_space_w_scaling", extensionStrLength) == 0) { tunisGL.support[GL_NV_clip_space_w_scaling] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_command_list] && (extensionStrLength == 18) && strncmp(extensionStr, "GL_NV_command_list", extensionStrLength) == 0) { tunisGL.support[GL_NV_command_list] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_compute_program5] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_NV_compute_program5", extensionStrLength) == 0) { tunisGL.support[GL_NV_compute_program5] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_conditional_render] && (extensionStrLength == 24) && strncmp(extensionStr, "GL_NV_conditional_render", extensionStrLength) == 0) { tunisGL.support[GL_NV_conditional_render] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_conservative_raster] && (extensionStrLength == 25) && strncmp(extensionStr, "GL_NV_conservative_raster", extensionStrLength) == 0) { tunisGL.support[GL_NV_conservative_raster] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_conservative_raster_dilate] && (extensionStrLength == 32) && strncmp(extensionStr, "GL_NV_conservative_raster_dilate", extensionStrLength) == 0) { tunisGL.support[GL_NV_conservative_raster_dilate] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_conservative_raster_pre_snap] && (extensionStrLength == 34) && strncmp(extensionStr, "GL_NV_conservative_raster_pre_snap", extensionStrLength) == 0) { tunisGL.support[GL_NV_conservative_raster_pre_snap] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_conservative_raster_pre_snap_triangles] && (extensionStrLength == 44) && strncmp(extensionStr, "GL_NV_conservative_raster_pre_snap_triangles", extensionStrLength) == 0) { tunisGL.support[GL_NV_conservative_raster_pre_snap_triangles] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_conservative_raster_underestimation] && (extensionStrLength == 41) && strncmp(extensionStr, "GL_NV_conservative_raster_underestimation", extensionStrLength) == 0) { tunisGL.support[GL_NV_conservative_raster_underestimation] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_copy_depth_to_color] && (extensionStrLength == 25) && strncmp(extensionStr, "GL_NV_copy_depth_to_color", extensionStrLength) == 0) { tunisGL.support[GL_NV_copy_depth_to_color] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_copy_image] && (extensionStrLength == 16) && strncmp(extensionStr, "GL_NV_copy_image", extensionStrLength) == 0) { tunisGL.support[GL_NV_copy_image] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_deep_texture3D] && (extensionStrLength == 20) && strncmp(extensionStr, "GL_NV_deep_texture3D", extensionStrLength) == 0) { tunisGL.support[GL_NV_deep_texture3D] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_depth_buffer_float] && (extensionStrLength == 24) && strncmp(extensionStr, "GL_NV_depth_buffer_float", extensionStrLength) == 0) { tunisGL.support[GL_NV_depth_buffer_float] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_depth_clamp] && (extensionStrLength == 17) && strncmp(extensionStr, "GL_NV_depth_clamp", extensionStrLength) == 0) { tunisGL.support[GL_NV_depth_clamp] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_draw_texture] && (extensionStrLength == 18) && strncmp(extensionStr, "GL_NV_draw_texture", extensionStrLength) == 0) { tunisGL.support[GL_NV_draw_texture] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_draw_vulkan_image] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_NV_draw_vulkan_image", extensionStrLength) == 0) { tunisGL.support[GL_NV_draw_vulkan_image] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_evaluators] && (extensionStrLength == 16) && strncmp(extensionStr, "GL_NV_evaluators", extensionStrLength) == 0) { tunisGL.support[GL_NV_evaluators] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_explicit_multisample] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_NV_explicit_multisample", extensionStrLength) == 0) { tunisGL.support[GL_NV_explicit_multisample] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_fence] && (extensionStrLength == 11) && strncmp(extensionStr, "GL_NV_fence", extensionStrLength) == 0) { tunisGL.support[GL_NV_fence] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_fill_rectangle] && (extensionStrLength == 20) && strncmp(extensionStr, "GL_NV_fill_rectangle", extensionStrLength) == 0) { tunisGL.support[GL_NV_fill_rectangle] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_float_buffer] && (extensionStrLength == 18) && strncmp(extensionStr, "GL_NV_float_buffer", extensionStrLength) == 0) { tunisGL.support[GL_NV_float_buffer] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_fog_distance] && (extensionStrLength == 18) && strncmp(extensionStr, "GL_NV_fog_distance", extensionStrLength) == 0) { tunisGL.support[GL_NV_fog_distance] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_fragment_coverage_to_color] && (extensionStrLength == 32) && strncmp(extensionStr, "GL_NV_fragment_coverage_to_color", extensionStrLength) == 0) { tunisGL.support[GL_NV_fragment_coverage_to_color] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_fragment_program] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_NV_fragment_program", extensionStrLength) == 0) { tunisGL.support[GL_NV_fragment_program] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_fragment_program2] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_NV_fragment_program2", extensionStrLength) == 0) { tunisGL.support[GL_NV_fragment_program2] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_fragment_program4] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_NV_fragment_program4", extensionStrLength) == 0) { tunisGL.support[GL_NV_fragment_program4] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_fragment_program_option] && (extensionStrLength == 29) && strncmp(extensionStr, "GL_NV_fragment_program_option", extensionStrLength) == 0) { tunisGL.support[GL_NV_fragment_program_option] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_fragment_shader_interlock] && (extensionStrLength == 31) && strncmp(extensionStr, "GL_NV_fragment_shader_interlock", extensionStrLength) == 0) { tunisGL.support[GL_NV_fragment_shader_interlock] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_framebuffer_mixed_samples] && (extensionStrLength == 31) && strncmp(extensionStr, "GL_NV_framebuffer_mixed_samples", extensionStrLength) == 0) { tunisGL.support[GL_NV_framebuffer_mixed_samples] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_framebuffer_multisample_coverage] && (extensionStrLength == 38) && strncmp(extensionStr, "GL_NV_framebuffer_multisample_coverage", extensionStrLength) == 0) { tunisGL.support[GL_NV_framebuffer_multisample_coverage] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_geometry_program4] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_NV_geometry_program4", extensionStrLength) == 0) { tunisGL.support[GL_NV_geometry_program4] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_geometry_shader4] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_NV_geometry_shader4", extensionStrLength) == 0) { tunisGL.support[GL_NV_geometry_shader4] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_geometry_shader_passthrough] && (extensionStrLength == 33) && strncmp(extensionStr, "GL_NV_geometry_shader_passthrough", extensionStrLength) == 0) { tunisGL.support[GL_NV_geometry_shader_passthrough] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_gpu_multicast] && (extensionStrLength == 19) && strncmp(extensionStr, "GL_NV_gpu_multicast", extensionStrLength) == 0) { tunisGL.support[GL_NV_gpu_multicast] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_gpu_program4] && (extensionStrLength == 18) && strncmp(extensionStr, "GL_NV_gpu_program4", extensionStrLength) == 0) { tunisGL.support[GL_NV_gpu_program4] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_gpu_program5] && (extensionStrLength == 18) && strncmp(extensionStr, "GL_NV_gpu_program5", extensionStrLength) == 0) { tunisGL.support[GL_NV_gpu_program5] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_gpu_program5_mem_extended] && (extensionStrLength == 31) && strncmp(extensionStr, "GL_NV_gpu_program5_mem_extended", extensionStrLength) == 0) { tunisGL.support[GL_NV_gpu_program5_mem_extended] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_gpu_shader5] && (extensionStrLength == 17) && strncmp(extensionStr, "GL_NV_gpu_shader5", extensionStrLength) == 0) { tunisGL.support[GL_NV_gpu_shader5] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_half_float] && (extensionStrLength == 16) && strncmp(extensionStr, "GL_NV_half_float", extensionStrLength) == 0) { tunisGL.support[GL_NV_half_float] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_internalformat_sample_query] && (extensionStrLength == 33) && strncmp(extensionStr, "GL_NV_internalformat_sample_query", extensionStrLength) == 0) { tunisGL.support[GL_NV_internalformat_sample_query] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_light_max_exponent] && (extensionStrLength == 24) && strncmp(extensionStr, "GL_NV_light_max_exponent", extensionStrLength) == 0) { tunisGL.support[GL_NV_light_max_exponent] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_multisample_coverage] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_NV_multisample_coverage", extensionStrLength) == 0) { tunisGL.support[GL_NV_multisample_coverage] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_multisample_filter_hint] && (extensionStrLength == 29) && strncmp(extensionStr, "GL_NV_multisample_filter_hint", extensionStrLength) == 0) { tunisGL.support[GL_NV_multisample_filter_hint] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_occlusion_query] && (extensionStrLength == 21) && strncmp(extensionStr, "GL_NV_occlusion_query", extensionStrLength) == 0) { tunisGL.support[GL_NV_occlusion_query] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_packed_depth_stencil] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_NV_packed_depth_stencil", extensionStrLength) == 0) { tunisGL.support[GL_NV_packed_depth_stencil] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_parameter_buffer_object] && (extensionStrLength == 29) && strncmp(extensionStr, "GL_NV_parameter_buffer_object", extensionStrLength) == 0) { tunisGL.support[GL_NV_parameter_buffer_object] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_parameter_buffer_object2] && (extensionStrLength == 30) && strncmp(extensionStr, "GL_NV_parameter_buffer_object2", extensionStrLength) == 0) { tunisGL.support[GL_NV_parameter_buffer_object2] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_path_rendering] && (extensionStrLength == 20) && strncmp(extensionStr, "GL_NV_path_rendering", extensionStrLength) == 0) { tunisGL.support[GL_NV_path_rendering] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_path_rendering_shared_edge] && (extensionStrLength == 32) && strncmp(extensionStr, "GL_NV_path_rendering_shared_edge", extensionStrLength) == 0) { tunisGL.support[GL_NV_path_rendering_shared_edge] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_pixel_data_range] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_NV_pixel_data_range", extensionStrLength) == 0) { tunisGL.support[GL_NV_pixel_data_range] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_point_sprite] && (extensionStrLength == 18) && strncmp(extensionStr, "GL_NV_point_sprite", extensionStrLength) == 0) { tunisGL.support[GL_NV_point_sprite] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_present_video] && (extensionStrLength == 19) && strncmp(extensionStr, "GL_NV_present_video", extensionStrLength) == 0) { tunisGL.support[GL_NV_present_video] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_primitive_restart] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_NV_primitive_restart", extensionStrLength) == 0) { tunisGL.support[GL_NV_primitive_restart] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_query_resource] && (extensionStrLength == 20) && strncmp(extensionStr, "GL_NV_query_resource", extensionStrLength) == 0) { tunisGL.support[GL_NV_query_resource] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_query_resource_tag] && (extensionStrLength == 24) && strncmp(extensionStr, "GL_NV_query_resource_tag", extensionStrLength) == 0) { tunisGL.support[GL_NV_query_resource_tag] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_register_combiners] && (extensionStrLength == 24) && strncmp(extensionStr, "GL_NV_register_combiners", extensionStrLength) == 0) { tunisGL.support[GL_NV_register_combiners] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_register_combiners2] && (extensionStrLength == 25) && strncmp(extensionStr, "GL_NV_register_combiners2", extensionStrLength) == 0) { tunisGL.support[GL_NV_register_combiners2] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_robustness_video_memory_purge] && (extensionStrLength == 35) && strncmp(extensionStr, "GL_NV_robustness_video_memory_purge", extensionStrLength) == 0) { tunisGL.support[GL_NV_robustness_video_memory_purge] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_sample_locations] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_NV_sample_locations", extensionStrLength) == 0) { tunisGL.support[GL_NV_sample_locations] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_sample_mask_override_coverage] && (extensionStrLength == 35) && strncmp(extensionStr, "GL_NV_sample_mask_override_coverage", extensionStrLength) == 0) { tunisGL.support[GL_NV_sample_mask_override_coverage] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_shader_atomic_counters] && (extensionStrLength == 28) && strncmp(extensionStr, "GL_NV_shader_atomic_counters", extensionStrLength) == 0) { tunisGL.support[GL_NV_shader_atomic_counters] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_shader_atomic_float] && (extensionStrLength == 25) && strncmp(extensionStr, "GL_NV_shader_atomic_float", extensionStrLength) == 0) { tunisGL.support[GL_NV_shader_atomic_float] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_shader_atomic_float64] && (extensionStrLength == 27) && strncmp(extensionStr, "GL_NV_shader_atomic_float64", extensionStrLength) == 0) { tunisGL.support[GL_NV_shader_atomic_float64] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_shader_atomic_fp16_vector] && (extensionStrLength == 31) && strncmp(extensionStr, "GL_NV_shader_atomic_fp16_vector", extensionStrLength) == 0) { tunisGL.support[GL_NV_shader_atomic_fp16_vector] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_shader_atomic_int64] && (extensionStrLength == 25) && strncmp(extensionStr, "GL_NV_shader_atomic_int64", extensionStrLength) == 0) { tunisGL.support[GL_NV_shader_atomic_int64] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_shader_buffer_load] && (extensionStrLength == 24) && strncmp(extensionStr, "GL_NV_shader_buffer_load", extensionStrLength) == 0) { tunisGL.support[GL_NV_shader_buffer_load] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_shader_buffer_store] && (extensionStrLength == 25) && strncmp(extensionStr, "GL_NV_shader_buffer_store", extensionStrLength) == 0) { tunisGL.support[GL_NV_shader_buffer_store] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_shader_storage_buffer_object] && (extensionStrLength == 34) && strncmp(extensionStr, "GL_NV_shader_storage_buffer_object", extensionStrLength) == 0) { tunisGL.support[GL_NV_shader_storage_buffer_object] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_shader_thread_group] && (extensionStrLength == 25) && strncmp(extensionStr, "GL_NV_shader_thread_group", extensionStrLength) == 0) { tunisGL.support[GL_NV_shader_thread_group] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_shader_thread_shuffle] && (extensionStrLength == 27) && strncmp(extensionStr, "GL_NV_shader_thread_shuffle", extensionStrLength) == 0) { tunisGL.support[GL_NV_shader_thread_shuffle] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_stereo_view_rendering] && (extensionStrLength == 27) && strncmp(extensionStr, "GL_NV_stereo_view_rendering", extensionStrLength) == 0) { tunisGL.support[GL_NV_stereo_view_rendering] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_tessellation_program5] && (extensionStrLength == 27) && strncmp(extensionStr, "GL_NV_tessellation_program5", extensionStrLength) == 0) { tunisGL.support[GL_NV_tessellation_program5] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_texgen_emboss] && (extensionStrLength == 19) && strncmp(extensionStr, "GL_NV_texgen_emboss", extensionStrLength) == 0) { tunisGL.support[GL_NV_texgen_emboss] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_texgen_reflection] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_NV_texgen_reflection", extensionStrLength) == 0) { tunisGL.support[GL_NV_texgen_reflection] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_texture_barrier] && (extensionStrLength == 21) && strncmp(extensionStr, "GL_NV_texture_barrier", extensionStrLength) == 0) { tunisGL.support[GL_NV_texture_barrier] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_texture_compression_vtc] && (extensionStrLength == 29) && strncmp(extensionStr, "GL_NV_texture_compression_vtc", extensionStrLength) == 0) { tunisGL.support[GL_NV_texture_compression_vtc] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_texture_env_combine4] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_NV_texture_env_combine4", extensionStrLength) == 0) { tunisGL.support[GL_NV_texture_env_combine4] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_texture_expand_normal] && (extensionStrLength == 27) && strncmp(extensionStr, "GL_NV_texture_expand_normal", extensionStrLength) == 0) { tunisGL.support[GL_NV_texture_expand_normal] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_texture_multisample] && (extensionStrLength == 25) && strncmp(extensionStr, "GL_NV_texture_multisample", extensionStrLength) == 0) { tunisGL.support[GL_NV_texture_multisample] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_texture_rectangle] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_NV_texture_rectangle", extensionStrLength) == 0) { tunisGL.support[GL_NV_texture_rectangle] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_texture_rectangle_compressed] && (extensionStrLength == 34) && strncmp(extensionStr, "GL_NV_texture_rectangle_compressed", extensionStrLength) == 0) { tunisGL.support[GL_NV_texture_rectangle_compressed] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_texture_shader] && (extensionStrLength == 20) && strncmp(extensionStr, "GL_NV_texture_shader", extensionStrLength) == 0) { tunisGL.support[GL_NV_texture_shader] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_texture_shader2] && (extensionStrLength == 21) && strncmp(extensionStr, "GL_NV_texture_shader2", extensionStrLength) == 0) { tunisGL.support[GL_NV_texture_shader2] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_texture_shader3] && (extensionStrLength == 21) && strncmp(extensionStr, "GL_NV_texture_shader3", extensionStrLength) == 0) { tunisGL.support[GL_NV_texture_shader3] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_transform_feedback] && (extensionStrLength == 24) && strncmp(extensionStr, "GL_NV_transform_feedback", extensionStrLength) == 0) { tunisGL.support[GL_NV_transform_feedback] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_transform_feedback2] && (extensionStrLength == 25) && strncmp(extensionStr, "GL_NV_transform_feedback2", extensionStrLength) == 0) { tunisGL.support[GL_NV_transform_feedback2] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_uniform_buffer_unified_memory] && (extensionStrLength == 35) && strncmp(extensionStr, "GL_NV_uniform_buffer_unified_memory", extensionStrLength) == 0) { tunisGL.support[GL_NV_uniform_buffer_unified_memory] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_vdpau_interop] && (extensionStrLength == 19) && strncmp(extensionStr, "GL_NV_vdpau_interop", extensionStrLength) == 0) { tunisGL.support[GL_NV_vdpau_interop] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_vertex_array_range] && (extensionStrLength == 24) && strncmp(extensionStr, "GL_NV_vertex_array_range", extensionStrLength) == 0) { tunisGL.support[GL_NV_vertex_array_range] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_vertex_array_range2] && (extensionStrLength == 25) && strncmp(extensionStr, "GL_NV_vertex_array_range2", extensionStrLength) == 0) { tunisGL.support[GL_NV_vertex_array_range2] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_vertex_attrib_integer_64bit] && (extensionStrLength == 33) && strncmp(extensionStr, "GL_NV_vertex_attrib_integer_64bit", extensionStrLength) == 0) { tunisGL.support[GL_NV_vertex_attrib_integer_64bit] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_vertex_buffer_unified_memory] && (extensionStrLength == 34) && strncmp(extensionStr, "GL_NV_vertex_buffer_unified_memory", extensionStrLength) == 0) { tunisGL.support[GL_NV_vertex_buffer_unified_memory] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_vertex_program] && (extensionStrLength == 20) && strncmp(extensionStr, "GL_NV_vertex_program", extensionStrLength) == 0) { tunisGL.support[GL_NV_vertex_program] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_vertex_program1_1] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_NV_vertex_program1_1", extensionStrLength) == 0) { tunisGL.support[GL_NV_vertex_program1_1] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_vertex_program2] && (extensionStrLength == 21) && strncmp(extensionStr, "GL_NV_vertex_program2", extensionStrLength) == 0) { tunisGL.support[GL_NV_vertex_program2] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_vertex_program2_option] && (extensionStrLength == 28) && strncmp(extensionStr, "GL_NV_vertex_program2_option", extensionStrLength) == 0) { tunisGL.support[GL_NV_vertex_program2_option] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_vertex_program3] && (extensionStrLength == 21) && strncmp(extensionStr, "GL_NV_vertex_program3", extensionStrLength) == 0) { tunisGL.support[GL_NV_vertex_program3] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_vertex_program4] && (extensionStrLength == 21) && strncmp(extensionStr, "GL_NV_vertex_program4", extensionStrLength) == 0) { tunisGL.support[GL_NV_vertex_program4] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_video_capture] && (extensionStrLength == 19) && strncmp(extensionStr, "GL_NV_video_capture", extensionStrLength) == 0) { tunisGL.support[GL_NV_video_capture] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_viewport_array2] && (extensionStrLength == 21) && strncmp(extensionStr, "GL_NV_viewport_array2", extensionStrLength) == 0) { tunisGL.support[GL_NV_viewport_array2] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_viewport_swizzle] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_NV_viewport_swizzle", extensionStrLength) == 0) { tunisGL.support[GL_NV_viewport_swizzle] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_OES_byte_coordinates] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_OES_byte_coordinates", extensionStrLength) == 0) { tunisGL.support[GL_OES_byte_coordinates] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_OES_compressed_paletted_texture] && (extensionStrLength == 34) && strncmp(extensionStr, "GL_OES_compressed_paletted_texture", extensionStrLength) == 0) { tunisGL.support[GL_OES_compressed_paletted_texture] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_OES_fixed_point] && (extensionStrLength == 18) && strncmp(extensionStr, "GL_OES_fixed_point", extensionStrLength) == 0) { tunisGL.support[GL_OES_fixed_point] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_OES_query_matrix] && (extensionStrLength == 19) && strncmp(extensionStr, "GL_OES_query_matrix", extensionStrLength) == 0) { tunisGL.support[GL_OES_query_matrix] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_OES_read_format] && (extensionStrLength == 18) && strncmp(extensionStr, "GL_OES_read_format", extensionStrLength) == 0) { tunisGL.support[GL_OES_read_format] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_OES_single_precision] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_OES_single_precision", extensionStrLength) == 0) { tunisGL.support[GL_OES_single_precision] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_OML_interlace] && (extensionStrLength == 16) && strncmp(extensionStr, "GL_OML_interlace", extensionStrLength) == 0) { tunisGL.support[GL_OML_interlace] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_OML_resample] && (extensionStrLength == 15) && strncmp(extensionStr, "GL_OML_resample", extensionStrLength) == 0) { tunisGL.support[GL_OML_resample] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_OML_subsample] && (extensionStrLength == 16) && strncmp(extensionStr, "GL_OML_subsample", extensionStrLength) == 0) { tunisGL.support[GL_OML_subsample] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_OVR_multiview] && (extensionStrLength == 16) && strncmp(extensionStr, "GL_OVR_multiview", extensionStrLength) == 0) { tunisGL.support[GL_OVR_multiview] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_OVR_multiview2] && (extensionStrLength == 17) && strncmp(extensionStr, "GL_OVR_multiview2", extensionStrLength) == 0) { tunisGL.support[GL_OVR_multiview2] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_PGI_misc_hints] && (extensionStrLength == 17) && strncmp(extensionStr, "GL_PGI_misc_hints", extensionStrLength) == 0) { tunisGL.support[GL_PGI_misc_hints] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_PGI_vertex_hints] && (extensionStrLength == 19) && strncmp(extensionStr, "GL_PGI_vertex_hints", extensionStrLength) == 0) { tunisGL.support[GL_PGI_vertex_hints] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_REND_screen_coordinates] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_REND_screen_coordinates", extensionStrLength) == 0) { tunisGL.support[GL_REND_screen_coordinates] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_S3_s3tc] && (extensionStrLength == 10) && strncmp(extensionStr, "GL_S3_s3tc", extensionStrLength) == 0) { tunisGL.support[GL_S3_s3tc] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_SGIS_detail_texture] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_SGIS_detail_texture", extensionStrLength) == 0) { tunisGL.support[GL_SGIS_detail_texture] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_SGIS_fog_function] && (extensionStrLength == 20) && strncmp(extensionStr, "GL_SGIS_fog_function", extensionStrLength) == 0) { tunisGL.support[GL_SGIS_fog_function] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_SGIS_generate_mipmap] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_SGIS_generate_mipmap", extensionStrLength) == 0) { tunisGL.support[GL_SGIS_generate_mipmap] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_SGIS_multisample] && (extensionStrLength == 19) && strncmp(extensionStr, "GL_SGIS_multisample", extensionStrLength) == 0) { tunisGL.support[GL_SGIS_multisample] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_SGIS_pixel_texture] && (extensionStrLength == 21) && strncmp(extensionStr, "GL_SGIS_pixel_texture", extensionStrLength) == 0) { tunisGL.support[GL_SGIS_pixel_texture] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_SGIS_point_line_texgen] && (extensionStrLength == 25) && strncmp(extensionStr, "GL_SGIS_point_line_texgen", extensionStrLength) == 0) { tunisGL.support[GL_SGIS_point_line_texgen] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_SGIS_point_parameters] && (extensionStrLength == 24) && strncmp(extensionStr, "GL_SGIS_point_parameters", extensionStrLength) == 0) { tunisGL.support[GL_SGIS_point_parameters] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_SGIS_sharpen_texture] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_SGIS_sharpen_texture", extensionStrLength) == 0) { tunisGL.support[GL_SGIS_sharpen_texture] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_SGIS_texture4D] && (extensionStrLength == 17) && strncmp(extensionStr, "GL_SGIS_texture4D", extensionStrLength) == 0) { tunisGL.support[GL_SGIS_texture4D] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_SGIS_texture_border_clamp] && (extensionStrLength == 28) && strncmp(extensionStr, "GL_SGIS_texture_border_clamp", extensionStrLength) == 0) { tunisGL.support[GL_SGIS_texture_border_clamp] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_SGIS_texture_color_mask] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_SGIS_texture_color_mask", extensionStrLength) == 0) { tunisGL.support[GL_SGIS_texture_color_mask] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_SGIS_texture_edge_clamp] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_SGIS_texture_edge_clamp", extensionStrLength) == 0) { tunisGL.support[GL_SGIS_texture_edge_clamp] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_SGIS_texture_filter4] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_SGIS_texture_filter4", extensionStrLength) == 0) { tunisGL.support[GL_SGIS_texture_filter4] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_SGIS_texture_lod] && (extensionStrLength == 19) && strncmp(extensionStr, "GL_SGIS_texture_lod", extensionStrLength) == 0) { tunisGL.support[GL_SGIS_texture_lod] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_SGIS_texture_select] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_SGIS_texture_select", extensionStrLength) == 0) { tunisGL.support[GL_SGIS_texture_select] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_SGIX_async] && (extensionStrLength == 13) && strncmp(extensionStr, "GL_SGIX_async", extensionStrLength) == 0) { tunisGL.support[GL_SGIX_async] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_SGIX_async_histogram] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_SGIX_async_histogram", extensionStrLength) == 0) { tunisGL.support[GL_SGIX_async_histogram] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_SGIX_async_pixel] && (extensionStrLength == 19) && strncmp(extensionStr, "GL_SGIX_async_pixel", extensionStrLength) == 0) { tunisGL.support[GL_SGIX_async_pixel] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_SGIX_blend_alpha_minmax] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_SGIX_blend_alpha_minmax", extensionStrLength) == 0) { tunisGL.support[GL_SGIX_blend_alpha_minmax] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_SGIX_calligraphic_fragment] && (extensionStrLength == 29) && strncmp(extensionStr, "GL_SGIX_calligraphic_fragment", extensionStrLength) == 0) { tunisGL.support[GL_SGIX_calligraphic_fragment] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_SGIX_clipmap] && (extensionStrLength == 15) && strncmp(extensionStr, "GL_SGIX_clipmap", extensionStrLength) == 0) { tunisGL.support[GL_SGIX_clipmap] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_SGIX_convolution_accuracy] && (extensionStrLength == 28) && strncmp(extensionStr, "GL_SGIX_convolution_accuracy", extensionStrLength) == 0) { tunisGL.support[GL_SGIX_convolution_accuracy] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_SGIX_depth_pass_instrument] && (extensionStrLength == 29) && strncmp(extensionStr, "GL_SGIX_depth_pass_instrument", extensionStrLength) == 0) { tunisGL.support[GL_SGIX_depth_pass_instrument] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_SGIX_depth_texture] && (extensionStrLength == 21) && strncmp(extensionStr, "GL_SGIX_depth_texture", extensionStrLength) == 0) { tunisGL.support[GL_SGIX_depth_texture] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_SGIX_flush_raster] && (extensionStrLength == 20) && strncmp(extensionStr, "GL_SGIX_flush_raster", extensionStrLength) == 0) { tunisGL.support[GL_SGIX_flush_raster] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_SGIX_fog_offset] && (extensionStrLength == 18) && strncmp(extensionStr, "GL_SGIX_fog_offset", extensionStrLength) == 0) { tunisGL.support[GL_SGIX_fog_offset] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_SGIX_fragment_lighting] && (extensionStrLength == 25) && strncmp(extensionStr, "GL_SGIX_fragment_lighting", extensionStrLength) == 0) { tunisGL.support[GL_SGIX_fragment_lighting] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_SGIX_framezoom] && (extensionStrLength == 17) && strncmp(extensionStr, "GL_SGIX_framezoom", extensionStrLength) == 0) { tunisGL.support[GL_SGIX_framezoom] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_SGIX_igloo_interface] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_SGIX_igloo_interface", extensionStrLength) == 0) { tunisGL.support[GL_SGIX_igloo_interface] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_SGIX_instruments] && (extensionStrLength == 19) && strncmp(extensionStr, "GL_SGIX_instruments", extensionStrLength) == 0) { tunisGL.support[GL_SGIX_instruments] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_SGIX_interlace] && (extensionStrLength == 17) && strncmp(extensionStr, "GL_SGIX_interlace", extensionStrLength) == 0) { tunisGL.support[GL_SGIX_interlace] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_SGIX_ir_instrument1] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_SGIX_ir_instrument1", extensionStrLength) == 0) { tunisGL.support[GL_SGIX_ir_instrument1] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_SGIX_list_priority] && (extensionStrLength == 21) && strncmp(extensionStr, "GL_SGIX_list_priority", extensionStrLength) == 0) { tunisGL.support[GL_SGIX_list_priority] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_SGIX_pixel_texture] && (extensionStrLength == 21) && strncmp(extensionStr, "GL_SGIX_pixel_texture", extensionStrLength) == 0) { tunisGL.support[GL_SGIX_pixel_texture] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_SGIX_pixel_tiles] && (extensionStrLength == 19) && strncmp(extensionStr, "GL_SGIX_pixel_tiles", extensionStrLength) == 0) { tunisGL.support[GL_SGIX_pixel_tiles] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_SGIX_polynomial_ffd] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_SGIX_polynomial_ffd", extensionStrLength) == 0) { tunisGL.support[GL_SGIX_polynomial_ffd] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_SGIX_reference_plane] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_SGIX_reference_plane", extensionStrLength) == 0) { tunisGL.support[GL_SGIX_reference_plane] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_SGIX_resample] && (extensionStrLength == 16) && strncmp(extensionStr, "GL_SGIX_resample", extensionStrLength) == 0) { tunisGL.support[GL_SGIX_resample] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_SGIX_scalebias_hint] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_SGIX_scalebias_hint", extensionStrLength) == 0) { tunisGL.support[GL_SGIX_scalebias_hint] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_SGIX_shadow] && (extensionStrLength == 14) && strncmp(extensionStr, "GL_SGIX_shadow", extensionStrLength) == 0) { tunisGL.support[GL_SGIX_shadow] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_SGIX_shadow_ambient] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_SGIX_shadow_ambient", extensionStrLength) == 0) { tunisGL.support[GL_SGIX_shadow_ambient] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_SGIX_sprite] && (extensionStrLength == 14) && strncmp(extensionStr, "GL_SGIX_sprite", extensionStrLength) == 0) { tunisGL.support[GL_SGIX_sprite] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_SGIX_subsample] && (extensionStrLength == 17) && strncmp(extensionStr, "GL_SGIX_subsample", extensionStrLength) == 0) { tunisGL.support[GL_SGIX_subsample] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_SGIX_tag_sample_buffer] && (extensionStrLength == 25) && strncmp(extensionStr, "GL_SGIX_tag_sample_buffer", extensionStrLength) == 0) { tunisGL.support[GL_SGIX_tag_sample_buffer] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_SGIX_texture_add_env] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_SGIX_texture_add_env", extensionStrLength) == 0) { tunisGL.support[GL_SGIX_texture_add_env] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_SGIX_texture_coordinate_clamp] && (extensionStrLength == 32) && strncmp(extensionStr, "GL_SGIX_texture_coordinate_clamp", extensionStrLength) == 0) { tunisGL.support[GL_SGIX_texture_coordinate_clamp] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_SGIX_texture_lod_bias] && (extensionStrLength == 24) && strncmp(extensionStr, "GL_SGIX_texture_lod_bias", extensionStrLength) == 0) { tunisGL.support[GL_SGIX_texture_lod_bias] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_SGIX_texture_multi_buffer] && (extensionStrLength == 28) && strncmp(extensionStr, "GL_SGIX_texture_multi_buffer", extensionStrLength) == 0) { tunisGL.support[GL_SGIX_texture_multi_buffer] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_SGIX_texture_scale_bias] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_SGIX_texture_scale_bias", extensionStrLength) == 0) { tunisGL.support[GL_SGIX_texture_scale_bias] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_SGIX_vertex_preclip] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_SGIX_vertex_preclip", extensionStrLength) == 0) { tunisGL.support[GL_SGIX_vertex_preclip] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_SGIX_ycrcb] && (extensionStrLength == 13) && strncmp(extensionStr, "GL_SGIX_ycrcb", extensionStrLength) == 0) { tunisGL.support[GL_SGIX_ycrcb] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_SGIX_ycrcb_subsample] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_SGIX_ycrcb_subsample", extensionStrLength) == 0) { tunisGL.support[GL_SGIX_ycrcb_subsample] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_SGIX_ycrcba] && (extensionStrLength == 14) && strncmp(extensionStr, "GL_SGIX_ycrcba", extensionStrLength) == 0) { tunisGL.support[GL_SGIX_ycrcba] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_SGI_color_matrix] && (extensionStrLength == 19) && strncmp(extensionStr, "GL_SGI_color_matrix", extensionStrLength) == 0) { tunisGL.support[GL_SGI_color_matrix] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_SGI_color_table] && (extensionStrLength == 18) && strncmp(extensionStr, "GL_SGI_color_table", extensionStrLength) == 0) { tunisGL.support[GL_SGI_color_table] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_SGI_texture_color_table] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_SGI_texture_color_table", extensionStrLength) == 0) { tunisGL.support[GL_SGI_texture_color_table] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_SUNX_constant_data] && (extensionStrLength == 21) && strncmp(extensionStr, "GL_SUNX_constant_data", extensionStrLength) == 0) { tunisGL.support[GL_SUNX_constant_data] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_SUN_convolution_border_modes] && (extensionStrLength == 31) && strncmp(extensionStr, "GL_SUN_convolution_border_modes", extensionStrLength) == 0) { tunisGL.support[GL_SUN_convolution_border_modes] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_SUN_global_alpha] && (extensionStrLength == 19) && strncmp(extensionStr, "GL_SUN_global_alpha", extensionStrLength) == 0) { tunisGL.support[GL_SUN_global_alpha] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_SUN_mesh_array] && (extensionStrLength == 17) && strncmp(extensionStr, "GL_SUN_mesh_array", extensionStrLength) == 0) { tunisGL.support[GL_SUN_mesh_array] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_SUN_slice_accum] && (extensionStrLength == 18) && strncmp(extensionStr, "GL_SUN_slice_accum", extensionStrLength) == 0) { tunisGL.support[GL_SUN_slice_accum] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_SUN_triangle_list] && (extensionStrLength == 20) && strncmp(extensionStr, "GL_SUN_triangle_list", extensionStrLength) == 0) { tunisGL.support[GL_SUN_triangle_list] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_SUN_vertex] && (extensionStrLength == 13) && strncmp(extensionStr, "GL_SUN_vertex", extensionStrLength) == 0) { tunisGL.support[GL_SUN_vertex] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_WIN_phong_shading] && (extensionStrLength == 20) && strncmp(extensionStr, "GL_WIN_phong_shading", extensionStrLength) == 0) { tunisGL.support[GL_WIN_phong_shading] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_WIN_specular_fog] && (extensionStrLength == 19) && strncmp(extensionStr, "GL_WIN_specular_fog", extensionStrLength) == 0) { tunisGL.support[GL_WIN_specular_fog] = KHRONOS_TRUE; return; }

    }
#if !defined(NDEBUG)
    fprintf(stderr, "tunisGLInit() : Found unwrangled extension: %.*s\n", (int)extensionStrLength, extensionStr);
#endif
}

khronos_int8_t tunisGLInit(void) {
    khronos_int8_t  isGLES = KHRONOS_FALSE;
    const char*     version = NULL;
    khronos_int32_t versionMajor = -1;
    khronos_int32_t versionMinor = -1;

#if !defined(NDEBUG)
    clock_t start = clock();
#endif

#if !defined(__EMSCRIPTEN__)
    if (s_tunisGLLib == NULL)
    {
#if defined(_WIN32)
        s_tunisGLLib = LoadLibraryA(TEXT("opengl32.dll"));
#else
        s_tunisGLLib = dlopen("libGL.so.1", RTLD_LAZY | RTLD_GLOBAL);
        if (s_tunisGLLib == NULL) s_tunisGLLib = dlopen("libGLESv3.so", RTLD_LAZY | RTLD_GLOBAL);
        if (s_tunisGLLib == NULL) s_tunisGLLib = dlopen("libGLESv2.so", RTLD_LAZY | RTLD_GLOBAL);
        if (s_tunisGLLib == NULL) s_tunisGLLib = dlopen(0, RTLD_LAZY | RTLD_GLOBAL);
#endif
    }
#endif

    memset(&tunisGL, 0, sizeof(TunisGLConfig));

    tunisGL.tunisAccum = (void (KHRONOS_APIENTRY *)(GLenum, GLfloat))tunisGLGetProcAddress("glAccum");
    tunisGL.tunisAccumxOES = (void (KHRONOS_APIENTRY *)(GLenum, GLfixed))tunisGLGetProcAddress("glAccumxOES");
    tunisGL.tunisAcquireKeyedMutexWin32EXT = (GLboolean(KHRONOS_APIENTRY *)(GLuint, GLuint64, GLuint))tunisGLGetProcAddress("glAcquireKeyedMutexWin32EXT");
    tunisGL.tunisActiveProgramEXT = (void (KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glActiveProgramEXT");
    tunisGL.tunisActiveShaderProgram = (void (KHRONOS_APIENTRY *)(GLuint, GLuint))tunisGLGetProcAddress("glActiveShaderProgram");
    tunisGL.tunisActiveShaderProgramEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLuint))tunisGLGetProcAddress("glActiveShaderProgramEXT");
    tunisGL.tunisActiveStencilFaceEXT = (void (KHRONOS_APIENTRY *)(GLenum))tunisGLGetProcAddress("glActiveStencilFaceEXT");
    tunisGL.tunisActiveTexture = (void (KHRONOS_APIENTRY *)(GLenum))tunisGLGetProcAddress("glActiveTexture");
    tunisGL.tunisActiveTextureARB = (void (KHRONOS_APIENTRY *)(GLenum))tunisGLGetProcAddress("glActiveTextureARB");
    tunisGL.tunisActiveVaryingNV = (void (KHRONOS_APIENTRY *)(GLuint, const GLchar *))tunisGLGetProcAddress("glActiveVaryingNV");
    tunisGL.tunisAlphaFragmentOp1ATI = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLuint, GLuint, GLuint, GLuint))tunisGLGetProcAddress("glAlphaFragmentOp1ATI");
    tunisGL.tunisAlphaFragmentOp2ATI = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint))tunisGLGetProcAddress("glAlphaFragmentOp2ATI");
    tunisGL.tunisAlphaFragmentOp3ATI = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint))tunisGLGetProcAddress("glAlphaFragmentOp3ATI");
    tunisGL.tunisAlphaFunc = (void (KHRONOS_APIENTRY *)(GLenum, GLfloat))tunisGLGetProcAddress("glAlphaFunc");
    tunisGL.tunisAlphaFuncQCOM = (void (KHRONOS_APIENTRY *)(GLenum, GLclampf))tunisGLGetProcAddress("glAlphaFuncQCOM");
    tunisGL.tunisAlphaFuncx = (void (KHRONOS_APIENTRY *)(GLenum, GLfixed))tunisGLGetProcAddress("glAlphaFuncx");
    tunisGL.tunisAlphaFuncxOES = (void (KHRONOS_APIENTRY *)(GLenum, GLfixed))tunisGLGetProcAddress("glAlphaFuncxOES");
    tunisGL.tunisAlphaToCoverageDitherControlNV = (void (KHRONOS_APIENTRY *)(GLenum))tunisGLGetProcAddress("glAlphaToCoverageDitherControlNV");
    tunisGL.tunisApplyFramebufferAttachmentCMAAINTEL = (void (KHRONOS_APIENTRY *)(void))tunisGLGetProcAddress("glApplyFramebufferAttachmentCMAAINTEL");
    tunisGL.tunisApplyTextureEXT = (void (KHRONOS_APIENTRY *)(GLenum))tunisGLGetProcAddress("glApplyTextureEXT");
    tunisGL.tunisAreProgramsResidentNV = (GLboolean(KHRONOS_APIENTRY *)(GLsizei, const GLuint *, GLboolean *))tunisGLGetProcAddress("glAreProgramsResidentNV");
    tunisGL.tunisAreTexturesResident = (GLboolean(KHRONOS_APIENTRY *)(GLsizei, const GLuint *, GLboolean *))tunisGLGetProcAddress("glAreTexturesResident");
    tunisGL.tunisAreTexturesResidentEXT = (GLboolean(KHRONOS_APIENTRY *)(GLsizei, const GLuint *, GLboolean *))tunisGLGetProcAddress("glAreTexturesResidentEXT");
    tunisGL.tunisArrayElement = (void (KHRONOS_APIENTRY *)(GLint))tunisGLGetProcAddress("glArrayElement");
    tunisGL.tunisArrayElementEXT = (void (KHRONOS_APIENTRY *)(GLint))tunisGLGetProcAddress("glArrayElementEXT");
    tunisGL.tunisArrayObjectATI = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLenum, GLsizei, GLuint, GLuint))tunisGLGetProcAddress("glArrayObjectATI");
    tunisGL.tunisAsyncMarkerSGIX = (void (KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glAsyncMarkerSGIX");
    tunisGL.tunisAttachObjectARB = (void (KHRONOS_APIENTRY *)(GLhandleARB, GLhandleARB))tunisGLGetProcAddress("glAttachObjectARB");
    tunisGL.tunisAttachShader = (void (KHRONOS_APIENTRY *)(GLuint, GLuint))tunisGLGetProcAddress("glAttachShader");
    tunisGL.tunisBegin = (void (KHRONOS_APIENTRY *)(GLenum))tunisGLGetProcAddress("glBegin");
    tunisGL.tunisBeginConditionalRender = (void (KHRONOS_APIENTRY *)(GLuint, GLenum))tunisGLGetProcAddress("glBeginConditionalRender");
    tunisGL.tunisBeginConditionalRenderNV = (void (KHRONOS_APIENTRY *)(GLuint, GLenum))tunisGLGetProcAddress("glBeginConditionalRenderNV");
    tunisGL.tunisBeginConditionalRenderNVX = (void (KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glBeginConditionalRenderNVX");
    tunisGL.tunisBeginFragmentShaderATI = (void (KHRONOS_APIENTRY *)(void))tunisGLGetProcAddress("glBeginFragmentShaderATI");
    tunisGL.tunisBeginOcclusionQueryNV = (void (KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glBeginOcclusionQueryNV");
    tunisGL.tunisBeginPerfMonitorAMD = (void (KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glBeginPerfMonitorAMD");
    tunisGL.tunisBeginPerfQueryINTEL = (void (KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glBeginPerfQueryINTEL");
    tunisGL.tunisBeginQuery = (void (KHRONOS_APIENTRY *)(GLenum, GLuint))tunisGLGetProcAddress("glBeginQuery");
    tunisGL.tunisBeginQueryARB = (void (KHRONOS_APIENTRY *)(GLenum, GLuint))tunisGLGetProcAddress("glBeginQueryARB");
    tunisGL.tunisBeginQueryEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLuint))tunisGLGetProcAddress("glBeginQueryEXT");
    tunisGL.tunisBeginQueryIndexed = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLuint))tunisGLGetProcAddress("glBeginQueryIndexed");
    tunisGL.tunisBeginTransformFeedback = (void (KHRONOS_APIENTRY *)(GLenum))tunisGLGetProcAddress("glBeginTransformFeedback");
    tunisGL.tunisBeginTransformFeedbackEXT = (void (KHRONOS_APIENTRY *)(GLenum))tunisGLGetProcAddress("glBeginTransformFeedbackEXT");
    tunisGL.tunisBeginTransformFeedbackNV = (void (KHRONOS_APIENTRY *)(GLenum))tunisGLGetProcAddress("glBeginTransformFeedbackNV");
    tunisGL.tunisBeginVertexShaderEXT = (void (KHRONOS_APIENTRY *)(void))tunisGLGetProcAddress("glBeginVertexShaderEXT");
    tunisGL.tunisBeginVideoCaptureNV = (void (KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glBeginVideoCaptureNV");
    tunisGL.tunisBindAttribLocation = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, const GLchar *))tunisGLGetProcAddress("glBindAttribLocation");
    tunisGL.tunisBindAttribLocationARB = (void (KHRONOS_APIENTRY *)(GLhandleARB, GLuint, const GLcharARB *))tunisGLGetProcAddress("glBindAttribLocationARB");
    tunisGL.tunisBindBuffer = (void (KHRONOS_APIENTRY *)(GLenum, GLuint))tunisGLGetProcAddress("glBindBuffer");
    tunisGL.tunisBindBufferARB = (void (KHRONOS_APIENTRY *)(GLenum, GLuint))tunisGLGetProcAddress("glBindBufferARB");
    tunisGL.tunisBindBufferBase = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLuint))tunisGLGetProcAddress("glBindBufferBase");
    tunisGL.tunisBindBufferBaseEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLuint))tunisGLGetProcAddress("glBindBufferBaseEXT");
    tunisGL.tunisBindBufferBaseNV = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLuint))tunisGLGetProcAddress("glBindBufferBaseNV");
    tunisGL.tunisBindBufferOffsetEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLuint, GLintptr))tunisGLGetProcAddress("glBindBufferOffsetEXT");
    tunisGL.tunisBindBufferOffsetNV = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLuint, GLintptr))tunisGLGetProcAddress("glBindBufferOffsetNV");
    tunisGL.tunisBindBufferRange = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLuint, GLintptr, GLsizeiptr))tunisGLGetProcAddress("glBindBufferRange");
    tunisGL.tunisBindBufferRangeEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLuint, GLintptr, GLsizeiptr))tunisGLGetProcAddress("glBindBufferRangeEXT");
    tunisGL.tunisBindBufferRangeNV = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLuint, GLintptr, GLsizeiptr))tunisGLGetProcAddress("glBindBufferRangeNV");
    tunisGL.tunisBindBuffersBase = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLsizei, const GLuint *))tunisGLGetProcAddress("glBindBuffersBase");
    tunisGL.tunisBindBuffersRange = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLsizei, const GLuint *, const GLintptr *, const GLsizeiptr *))tunisGLGetProcAddress("glBindBuffersRange");
    tunisGL.tunisBindFragDataLocation = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, const GLchar *))tunisGLGetProcAddress("glBindFragDataLocation");
    tunisGL.tunisBindFragDataLocationEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, const GLchar *))tunisGLGetProcAddress("glBindFragDataLocationEXT");
    tunisGL.tunisBindFragDataLocationIndexed = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLuint, const GLchar *))tunisGLGetProcAddress("glBindFragDataLocationIndexed");
    tunisGL.tunisBindFragDataLocationIndexedEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLuint, const GLchar *))tunisGLGetProcAddress("glBindFragDataLocationIndexedEXT");
    tunisGL.tunisBindFragmentShaderATI = (void (KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glBindFragmentShaderATI");
    tunisGL.tunisBindFramebuffer = (void (KHRONOS_APIENTRY *)(GLenum, GLuint))tunisGLGetProcAddress("glBindFramebuffer");
    tunisGL.tunisBindFramebufferEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLuint))tunisGLGetProcAddress("glBindFramebufferEXT");
    tunisGL.tunisBindFramebufferOES = (void (KHRONOS_APIENTRY *)(GLenum, GLuint))tunisGLGetProcAddress("glBindFramebufferOES");
    tunisGL.tunisBindImageTexture = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLint, GLboolean, GLint, GLenum, GLenum))tunisGLGetProcAddress("glBindImageTexture");
    tunisGL.tunisBindImageTextureEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLint, GLboolean, GLint, GLenum, GLint))tunisGLGetProcAddress("glBindImageTextureEXT");
    tunisGL.tunisBindImageTextures = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, const GLuint *))tunisGLGetProcAddress("glBindImageTextures");
    tunisGL.tunisBindLightParameterEXT = (GLuint(KHRONOS_APIENTRY *)(GLenum, GLenum))tunisGLGetProcAddress("glBindLightParameterEXT");
    tunisGL.tunisBindMaterialParameterEXT = (GLuint(KHRONOS_APIENTRY *)(GLenum, GLenum))tunisGLGetProcAddress("glBindMaterialParameterEXT");
    tunisGL.tunisBindMultiTextureEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLuint))tunisGLGetProcAddress("glBindMultiTextureEXT");
    tunisGL.tunisBindParameterEXT = (GLuint(KHRONOS_APIENTRY *)(GLenum))tunisGLGetProcAddress("glBindParameterEXT");
    tunisGL.tunisBindProgramARB = (void (KHRONOS_APIENTRY *)(GLenum, GLuint))tunisGLGetProcAddress("glBindProgramARB");
    tunisGL.tunisBindProgramNV = (void (KHRONOS_APIENTRY *)(GLenum, GLuint))tunisGLGetProcAddress("glBindProgramNV");
    tunisGL.tunisBindProgramPipeline = (void (KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glBindProgramPipeline");
    tunisGL.tunisBindProgramPipelineEXT = (void (KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glBindProgramPipelineEXT");
    tunisGL.tunisBindRenderbuffer = (void (KHRONOS_APIENTRY *)(GLenum, GLuint))tunisGLGetProcAddress("glBindRenderbuffer");
    tunisGL.tunisBindRenderbufferEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLuint))tunisGLGetProcAddress("glBindRenderbufferEXT");
    tunisGL.tunisBindRenderbufferOES = (void (KHRONOS_APIENTRY *)(GLenum, GLuint))tunisGLGetProcAddress("glBindRenderbufferOES");
    tunisGL.tunisBindSampler = (void (KHRONOS_APIENTRY *)(GLuint, GLuint))tunisGLGetProcAddress("glBindSampler");
    tunisGL.tunisBindSamplers = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, const GLuint *))tunisGLGetProcAddress("glBindSamplers");
    tunisGL.tunisBindTexGenParameterEXT = (GLuint(KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum))tunisGLGetProcAddress("glBindTexGenParameterEXT");
    tunisGL.tunisBindTexture = (void (KHRONOS_APIENTRY *)(GLenum, GLuint))tunisGLGetProcAddress("glBindTexture");
    tunisGL.tunisBindTextureEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLuint))tunisGLGetProcAddress("glBindTextureEXT");
    tunisGL.tunisBindTextureUnit = (void (KHRONOS_APIENTRY *)(GLuint, GLuint))tunisGLGetProcAddress("glBindTextureUnit");
    tunisGL.tunisBindTextureUnitParameterEXT = (GLuint(KHRONOS_APIENTRY *)(GLenum, GLenum))tunisGLGetProcAddress("glBindTextureUnitParameterEXT");
    tunisGL.tunisBindTextures = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, const GLuint *))tunisGLGetProcAddress("glBindTextures");
    tunisGL.tunisBindTransformFeedback = (void (KHRONOS_APIENTRY *)(GLenum, GLuint))tunisGLGetProcAddress("glBindTransformFeedback");
    tunisGL.tunisBindTransformFeedbackNV = (void (KHRONOS_APIENTRY *)(GLenum, GLuint))tunisGLGetProcAddress("glBindTransformFeedbackNV");
    tunisGL.tunisBindVertexArray = (void (KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glBindVertexArray");
    tunisGL.tunisBindVertexArrayAPPLE = (void (KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glBindVertexArrayAPPLE");
    tunisGL.tunisBindVertexArrayOES = (void (KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glBindVertexArrayOES");
    tunisGL.tunisBindVertexBuffer = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLintptr, GLsizei))tunisGLGetProcAddress("glBindVertexBuffer");
    tunisGL.tunisBindVertexBuffers = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, const GLuint *, const GLintptr *, const GLsizei *))tunisGLGetProcAddress("glBindVertexBuffers");
    tunisGL.tunisBindVertexShaderEXT = (void (KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glBindVertexShaderEXT");
    tunisGL.tunisBindVideoCaptureStreamBufferNV = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLenum, GLintptrARB))tunisGLGetProcAddress("glBindVideoCaptureStreamBufferNV");
    tunisGL.tunisBindVideoCaptureStreamTextureNV = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLenum, GLenum, GLuint))tunisGLGetProcAddress("glBindVideoCaptureStreamTextureNV");
    tunisGL.tunisBinormal3bEXT = (void (KHRONOS_APIENTRY *)(GLbyte, GLbyte, GLbyte))tunisGLGetProcAddress("glBinormal3bEXT");
    tunisGL.tunisBinormal3bvEXT = (void (KHRONOS_APIENTRY *)(const GLbyte *))tunisGLGetProcAddress("glBinormal3bvEXT");
    tunisGL.tunisBinormal3dEXT = (void (KHRONOS_APIENTRY *)(GLdouble, GLdouble, GLdouble))tunisGLGetProcAddress("glBinormal3dEXT");
    tunisGL.tunisBinormal3dvEXT = (void (KHRONOS_APIENTRY *)(const GLdouble *))tunisGLGetProcAddress("glBinormal3dvEXT");
    tunisGL.tunisBinormal3fEXT = (void (KHRONOS_APIENTRY *)(GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glBinormal3fEXT");
    tunisGL.tunisBinormal3fvEXT = (void (KHRONOS_APIENTRY *)(const GLfloat *))tunisGLGetProcAddress("glBinormal3fvEXT");
    tunisGL.tunisBinormal3iEXT = (void (KHRONOS_APIENTRY *)(GLint, GLint, GLint))tunisGLGetProcAddress("glBinormal3iEXT");
    tunisGL.tunisBinormal3ivEXT = (void (KHRONOS_APIENTRY *)(const GLint *))tunisGLGetProcAddress("glBinormal3ivEXT");
    tunisGL.tunisBinormal3sEXT = (void (KHRONOS_APIENTRY *)(GLshort, GLshort, GLshort))tunisGLGetProcAddress("glBinormal3sEXT");
    tunisGL.tunisBinormal3svEXT = (void (KHRONOS_APIENTRY *)(const GLshort *))tunisGLGetProcAddress("glBinormal3svEXT");
    tunisGL.tunisBinormalPointerEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, const void *))tunisGLGetProcAddress("glBinormalPointerEXT");
    tunisGL.tunisBitmap = (void (KHRONOS_APIENTRY *)(GLsizei, GLsizei, GLfloat, GLfloat, GLfloat, GLfloat, const GLubyte *))tunisGLGetProcAddress("glBitmap");
    tunisGL.tunisBitmapxOES = (void (KHRONOS_APIENTRY *)(GLsizei, GLsizei, GLfixed, GLfixed, GLfixed, GLfixed, const GLubyte *))tunisGLGetProcAddress("glBitmapxOES");
    tunisGL.tunisBlendBarrier = (void (KHRONOS_APIENTRY *)(void))tunisGLGetProcAddress("glBlendBarrier");
    tunisGL.tunisBlendBarrierKHR = (void (KHRONOS_APIENTRY *)(void))tunisGLGetProcAddress("glBlendBarrierKHR");
    tunisGL.tunisBlendBarrierNV = (void (KHRONOS_APIENTRY *)(void))tunisGLGetProcAddress("glBlendBarrierNV");
    tunisGL.tunisBlendColor = (void (KHRONOS_APIENTRY *)(GLfloat, GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glBlendColor");
    tunisGL.tunisBlendColorEXT = (void (KHRONOS_APIENTRY *)(GLfloat, GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glBlendColorEXT");
    tunisGL.tunisBlendColorxOES = (void (KHRONOS_APIENTRY *)(GLfixed, GLfixed, GLfixed, GLfixed))tunisGLGetProcAddress("glBlendColorxOES");
    tunisGL.tunisBlendEquation = (void (KHRONOS_APIENTRY *)(GLenum))tunisGLGetProcAddress("glBlendEquation");
    tunisGL.tunisBlendEquationEXT = (void (KHRONOS_APIENTRY *)(GLenum))tunisGLGetProcAddress("glBlendEquationEXT");
    tunisGL.tunisBlendEquationIndexedAMD = (void (KHRONOS_APIENTRY *)(GLuint, GLenum))tunisGLGetProcAddress("glBlendEquationIndexedAMD");
    tunisGL.tunisBlendEquationOES = (void (KHRONOS_APIENTRY *)(GLenum))tunisGLGetProcAddress("glBlendEquationOES");
    tunisGL.tunisBlendEquationSeparate = (void (KHRONOS_APIENTRY *)(GLenum, GLenum))tunisGLGetProcAddress("glBlendEquationSeparate");
    tunisGL.tunisBlendEquationSeparateEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum))tunisGLGetProcAddress("glBlendEquationSeparateEXT");
    tunisGL.tunisBlendEquationSeparateIndexedAMD = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLenum))tunisGLGetProcAddress("glBlendEquationSeparateIndexedAMD");
    tunisGL.tunisBlendEquationSeparateOES = (void (KHRONOS_APIENTRY *)(GLenum, GLenum))tunisGLGetProcAddress("glBlendEquationSeparateOES");
    tunisGL.tunisBlendEquationSeparatei = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLenum))tunisGLGetProcAddress("glBlendEquationSeparatei");
    tunisGL.tunisBlendEquationSeparateiARB = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLenum))tunisGLGetProcAddress("glBlendEquationSeparateiARB");
    tunisGL.tunisBlendEquationSeparateiEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLenum))tunisGLGetProcAddress("glBlendEquationSeparateiEXT");
    tunisGL.tunisBlendEquationSeparateiOES = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLenum))tunisGLGetProcAddress("glBlendEquationSeparateiOES");
    tunisGL.tunisBlendEquationi = (void (KHRONOS_APIENTRY *)(GLuint, GLenum))tunisGLGetProcAddress("glBlendEquationi");
    tunisGL.tunisBlendEquationiARB = (void (KHRONOS_APIENTRY *)(GLuint, GLenum))tunisGLGetProcAddress("glBlendEquationiARB");
    tunisGL.tunisBlendEquationiEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum))tunisGLGetProcAddress("glBlendEquationiEXT");
    tunisGL.tunisBlendEquationiOES = (void (KHRONOS_APIENTRY *)(GLuint, GLenum))tunisGLGetProcAddress("glBlendEquationiOES");
    tunisGL.tunisBlendFunc = (void (KHRONOS_APIENTRY *)(GLenum, GLenum))tunisGLGetProcAddress("glBlendFunc");
    tunisGL.tunisBlendFuncIndexedAMD = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLenum))tunisGLGetProcAddress("glBlendFuncIndexedAMD");
    tunisGL.tunisBlendFuncSeparate = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLenum))tunisGLGetProcAddress("glBlendFuncSeparate");
    tunisGL.tunisBlendFuncSeparateEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLenum))tunisGLGetProcAddress("glBlendFuncSeparateEXT");
    tunisGL.tunisBlendFuncSeparateINGR = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLenum))tunisGLGetProcAddress("glBlendFuncSeparateINGR");
    tunisGL.tunisBlendFuncSeparateIndexedAMD = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLenum, GLenum, GLenum))tunisGLGetProcAddress("glBlendFuncSeparateIndexedAMD");
    tunisGL.tunisBlendFuncSeparateOES = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLenum))tunisGLGetProcAddress("glBlendFuncSeparateOES");
    tunisGL.tunisBlendFuncSeparatei = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLenum, GLenum, GLenum))tunisGLGetProcAddress("glBlendFuncSeparatei");
    tunisGL.tunisBlendFuncSeparateiARB = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLenum, GLenum, GLenum))tunisGLGetProcAddress("glBlendFuncSeparateiARB");
    tunisGL.tunisBlendFuncSeparateiEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLenum, GLenum, GLenum))tunisGLGetProcAddress("glBlendFuncSeparateiEXT");
    tunisGL.tunisBlendFuncSeparateiOES = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLenum, GLenum, GLenum))tunisGLGetProcAddress("glBlendFuncSeparateiOES");
    tunisGL.tunisBlendFunci = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLenum))tunisGLGetProcAddress("glBlendFunci");
    tunisGL.tunisBlendFunciARB = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLenum))tunisGLGetProcAddress("glBlendFunciARB");
    tunisGL.tunisBlendFunciEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLenum))tunisGLGetProcAddress("glBlendFunciEXT");
    tunisGL.tunisBlendFunciOES = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLenum))tunisGLGetProcAddress("glBlendFunciOES");
    tunisGL.tunisBlendParameteriNV = (void (KHRONOS_APIENTRY *)(GLenum, GLint))tunisGLGetProcAddress("glBlendParameteriNV");
    tunisGL.tunisBlitFramebuffer = (void (KHRONOS_APIENTRY *)(GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLbitfield, GLenum))tunisGLGetProcAddress("glBlitFramebuffer");
    tunisGL.tunisBlitFramebufferANGLE = (void (KHRONOS_APIENTRY *)(GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLbitfield, GLenum))tunisGLGetProcAddress("glBlitFramebufferANGLE");
    tunisGL.tunisBlitFramebufferEXT = (void (KHRONOS_APIENTRY *)(GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLbitfield, GLenum))tunisGLGetProcAddress("glBlitFramebufferEXT");
    tunisGL.tunisBlitFramebufferNV = (void (KHRONOS_APIENTRY *)(GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLbitfield, GLenum))tunisGLGetProcAddress("glBlitFramebufferNV");
    tunisGL.tunisBlitNamedFramebuffer = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLbitfield, GLenum))tunisGLGetProcAddress("glBlitNamedFramebuffer");
    tunisGL.tunisBufferAddressRangeNV = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLuint64EXT, GLsizeiptr))tunisGLGetProcAddress("glBufferAddressRangeNV");
    tunisGL.tunisBufferData = (void (KHRONOS_APIENTRY *)(GLenum, GLsizeiptr, const void *, GLenum))tunisGLGetProcAddress("glBufferData");
    tunisGL.tunisBufferDataARB = (void (KHRONOS_APIENTRY *)(GLenum, GLsizeiptrARB, const void *, GLenum))tunisGLGetProcAddress("glBufferDataARB");
    tunisGL.tunisBufferPageCommitmentARB = (void (KHRONOS_APIENTRY *)(GLenum, GLintptr, GLsizeiptr, GLboolean))tunisGLGetProcAddress("glBufferPageCommitmentARB");
    tunisGL.tunisBufferParameteriAPPLE = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint))tunisGLGetProcAddress("glBufferParameteriAPPLE");
    tunisGL.tunisBufferRegionEnabled = (GLuint(KHRONOS_APIENTRY *)(void))tunisGLGetProcAddress("glBufferRegionEnabled");
    tunisGL.tunisBufferStorage = (void (KHRONOS_APIENTRY *)(GLenum, GLsizeiptr, const void *, GLbitfield))tunisGLGetProcAddress("glBufferStorage");
    tunisGL.tunisBufferStorageEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLsizeiptr, const void *, GLbitfield))tunisGLGetProcAddress("glBufferStorageEXT");
    tunisGL.tunisBufferStorageExternalEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLintptr, GLsizeiptr, GLeglClientBufferEXT, GLbitfield))tunisGLGetProcAddress("glBufferStorageExternalEXT");
    tunisGL.tunisBufferStorageMemEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLsizeiptr, GLuint, GLuint64))tunisGLGetProcAddress("glBufferStorageMemEXT");
    tunisGL.tunisBufferSubData = (void (KHRONOS_APIENTRY *)(GLenum, GLintptr, GLsizeiptr, const void *))tunisGLGetProcAddress("glBufferSubData");
    tunisGL.tunisBufferSubDataARB = (void (KHRONOS_APIENTRY *)(GLenum, GLintptrARB, GLsizeiptrARB, const void *))tunisGLGetProcAddress("glBufferSubDataARB");
    tunisGL.tunisCallCommandListNV = (void (KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glCallCommandListNV");
    tunisGL.tunisCallList = (void (KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glCallList");
    tunisGL.tunisCallLists = (void (KHRONOS_APIENTRY *)(GLsizei, GLenum, const void *))tunisGLGetProcAddress("glCallLists");
    tunisGL.tunisCheckFramebufferStatus = (GLenum(KHRONOS_APIENTRY *)(GLenum))tunisGLGetProcAddress("glCheckFramebufferStatus");
    tunisGL.tunisCheckFramebufferStatusEXT = (GLenum(KHRONOS_APIENTRY *)(GLenum))tunisGLGetProcAddress("glCheckFramebufferStatusEXT");
    tunisGL.tunisCheckFramebufferStatusOES = (GLenum(KHRONOS_APIENTRY *)(GLenum))tunisGLGetProcAddress("glCheckFramebufferStatusOES");
    tunisGL.tunisCheckNamedFramebufferStatus = (GLenum(KHRONOS_APIENTRY *)(GLuint, GLenum))tunisGLGetProcAddress("glCheckNamedFramebufferStatus");
    tunisGL.tunisCheckNamedFramebufferStatusEXT = (GLenum(KHRONOS_APIENTRY *)(GLuint, GLenum))tunisGLGetProcAddress("glCheckNamedFramebufferStatusEXT");
    tunisGL.tunisClampColor = (void (KHRONOS_APIENTRY *)(GLenum, GLenum))tunisGLGetProcAddress("glClampColor");
    tunisGL.tunisClampColorARB = (void (KHRONOS_APIENTRY *)(GLenum, GLenum))tunisGLGetProcAddress("glClampColorARB");
    tunisGL.tunisClear = (void (KHRONOS_APIENTRY *)(GLbitfield))tunisGLGetProcAddress("glClear");
    tunisGL.tunisClearAccum = (void (KHRONOS_APIENTRY *)(GLfloat, GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glClearAccum");
    tunisGL.tunisClearAccumxOES = (void (KHRONOS_APIENTRY *)(GLfixed, GLfixed, GLfixed, GLfixed))tunisGLGetProcAddress("glClearAccumxOES");
    tunisGL.tunisClearBufferData = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLenum, const void *))tunisGLGetProcAddress("glClearBufferData");
    tunisGL.tunisClearBufferSubData = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLintptr, GLsizeiptr, GLenum, GLenum, const void *))tunisGLGetProcAddress("glClearBufferSubData");
    tunisGL.tunisClearBufferfi = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLfloat, GLint))tunisGLGetProcAddress("glClearBufferfi");
    tunisGL.tunisClearBufferfv = (void (KHRONOS_APIENTRY *)(GLenum, GLint, const GLfloat *))tunisGLGetProcAddress("glClearBufferfv");
    tunisGL.tunisClearBufferiv = (void (KHRONOS_APIENTRY *)(GLenum, GLint, const GLint *))tunisGLGetProcAddress("glClearBufferiv");
    tunisGL.tunisClearBufferuiv = (void (KHRONOS_APIENTRY *)(GLenum, GLint, const GLuint *))tunisGLGetProcAddress("glClearBufferuiv");
    tunisGL.tunisClearColor = (void (KHRONOS_APIENTRY *)(GLfloat, GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glClearColor");
    tunisGL.tunisClearColorIiEXT = (void (KHRONOS_APIENTRY *)(GLint, GLint, GLint, GLint))tunisGLGetProcAddress("glClearColorIiEXT");
    tunisGL.tunisClearColorIuiEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLuint, GLuint))tunisGLGetProcAddress("glClearColorIuiEXT");
    tunisGL.tunisClearColorx = (void (KHRONOS_APIENTRY *)(GLfixed, GLfixed, GLfixed, GLfixed))tunisGLGetProcAddress("glClearColorx");
    tunisGL.tunisClearColorxOES = (void (KHRONOS_APIENTRY *)(GLfixed, GLfixed, GLfixed, GLfixed))tunisGLGetProcAddress("glClearColorxOES");
    tunisGL.tunisClearDepth = (void (KHRONOS_APIENTRY *)(GLdouble))tunisGLGetProcAddress("glClearDepth");
    tunisGL.tunisClearDepthdNV = (void (KHRONOS_APIENTRY *)(GLdouble))tunisGLGetProcAddress("glClearDepthdNV");
    tunisGL.tunisClearDepthf = (void (KHRONOS_APIENTRY *)(GLfloat))tunisGLGetProcAddress("glClearDepthf");
    tunisGL.tunisClearDepthfOES = (void (KHRONOS_APIENTRY *)(GLclampf))tunisGLGetProcAddress("glClearDepthfOES");
    tunisGL.tunisClearDepthx = (void (KHRONOS_APIENTRY *)(GLfixed))tunisGLGetProcAddress("glClearDepthx");
    tunisGL.tunisClearDepthxOES = (void (KHRONOS_APIENTRY *)(GLfixed))tunisGLGetProcAddress("glClearDepthxOES");
    tunisGL.tunisClearIndex = (void (KHRONOS_APIENTRY *)(GLfloat))tunisGLGetProcAddress("glClearIndex");
    tunisGL.tunisClearNamedBufferData = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLenum, GLenum, const void *))tunisGLGetProcAddress("glClearNamedBufferData");
    tunisGL.tunisClearNamedBufferDataEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLenum, GLenum, const void *))tunisGLGetProcAddress("glClearNamedBufferDataEXT");
    tunisGL.tunisClearNamedBufferSubData = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLintptr, GLsizeiptr, GLenum, GLenum, const void *))tunisGLGetProcAddress("glClearNamedBufferSubData");
    tunisGL.tunisClearNamedBufferSubDataEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLsizeiptr, GLsizeiptr, GLenum, GLenum, const void *))tunisGLGetProcAddress("glClearNamedBufferSubDataEXT");
    tunisGL.tunisClearNamedFramebufferfi = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint, GLfloat, GLint))tunisGLGetProcAddress("glClearNamedFramebufferfi");
    tunisGL.tunisClearNamedFramebufferfv = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint, const GLfloat *))tunisGLGetProcAddress("glClearNamedFramebufferfv");
    tunisGL.tunisClearNamedFramebufferiv = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint, const GLint *))tunisGLGetProcAddress("glClearNamedFramebufferiv");
    tunisGL.tunisClearNamedFramebufferuiv = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint, const GLuint *))tunisGLGetProcAddress("glClearNamedFramebufferuiv");
    tunisGL.tunisClearPixelLocalStorageuiEXT = (void (KHRONOS_APIENTRY *)(GLsizei, GLsizei, const GLuint *))tunisGLGetProcAddress("glClearPixelLocalStorageuiEXT");
    tunisGL.tunisClearStencil = (void (KHRONOS_APIENTRY *)(GLint))tunisGLGetProcAddress("glClearStencil");
    tunisGL.tunisClearTexImage = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLenum, GLenum, const void *))tunisGLGetProcAddress("glClearTexImage");
    tunisGL.tunisClearTexImageEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLenum, GLenum, const void *))tunisGLGetProcAddress("glClearTexImageEXT");
    tunisGL.tunisClearTexSubImage = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, const void *))tunisGLGetProcAddress("glClearTexSubImage");
    tunisGL.tunisClearTexSubImageEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, const void *))tunisGLGetProcAddress("glClearTexSubImageEXT");
    tunisGL.tunisClientActiveTexture = (void (KHRONOS_APIENTRY *)(GLenum))tunisGLGetProcAddress("glClientActiveTexture");
    tunisGL.tunisClientActiveTextureARB = (void (KHRONOS_APIENTRY *)(GLenum))tunisGLGetProcAddress("glClientActiveTextureARB");
    tunisGL.tunisClientActiveVertexStreamATI = (void (KHRONOS_APIENTRY *)(GLenum))tunisGLGetProcAddress("glClientActiveVertexStreamATI");
    tunisGL.tunisClientAttribDefaultEXT = (void (KHRONOS_APIENTRY *)(GLbitfield))tunisGLGetProcAddress("glClientAttribDefaultEXT");
    tunisGL.tunisClientWaitSync = (GLenum(KHRONOS_APIENTRY *)(GLsync, GLbitfield, GLuint64))tunisGLGetProcAddress("glClientWaitSync");
    tunisGL.tunisClientWaitSyncAPPLE = (GLenum(KHRONOS_APIENTRY *)(GLsync, GLbitfield, GLuint64))tunisGLGetProcAddress("glClientWaitSyncAPPLE");
    tunisGL.tunisClipControl = (void (KHRONOS_APIENTRY *)(GLenum, GLenum))tunisGLGetProcAddress("glClipControl");
    tunisGL.tunisClipControlEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum))tunisGLGetProcAddress("glClipControlEXT");
    tunisGL.tunisClipPlane = (void (KHRONOS_APIENTRY *)(GLenum, const GLdouble *))tunisGLGetProcAddress("glClipPlane");
    tunisGL.tunisClipPlanef = (void (KHRONOS_APIENTRY *)(GLenum, const GLfloat *))tunisGLGetProcAddress("glClipPlanef");
    tunisGL.tunisClipPlanefIMG = (void (KHRONOS_APIENTRY *)(GLenum, const GLfloat *))tunisGLGetProcAddress("glClipPlanefIMG");
    tunisGL.tunisClipPlanefOES = (void (KHRONOS_APIENTRY *)(GLenum, const GLfloat *))tunisGLGetProcAddress("glClipPlanefOES");
    tunisGL.tunisClipPlanex = (void (KHRONOS_APIENTRY *)(GLenum, const GLfixed *))tunisGLGetProcAddress("glClipPlanex");
    tunisGL.tunisClipPlanexIMG = (void (KHRONOS_APIENTRY *)(GLenum, const GLfixed *))tunisGLGetProcAddress("glClipPlanexIMG");
    tunisGL.tunisClipPlanexOES = (void (KHRONOS_APIENTRY *)(GLenum, const GLfixed *))tunisGLGetProcAddress("glClipPlanexOES");
    tunisGL.tunisColor3b = (void (KHRONOS_APIENTRY *)(GLbyte, GLbyte, GLbyte))tunisGLGetProcAddress("glColor3b");
    tunisGL.tunisColor3bv = (void (KHRONOS_APIENTRY *)(const GLbyte *))tunisGLGetProcAddress("glColor3bv");
    tunisGL.tunisColor3d = (void (KHRONOS_APIENTRY *)(GLdouble, GLdouble, GLdouble))tunisGLGetProcAddress("glColor3d");
    tunisGL.tunisColor3dv = (void (KHRONOS_APIENTRY *)(const GLdouble *))tunisGLGetProcAddress("glColor3dv");
    tunisGL.tunisColor3f = (void (KHRONOS_APIENTRY *)(GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glColor3f");
    tunisGL.tunisColor3fVertex3fSUN = (void (KHRONOS_APIENTRY *)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glColor3fVertex3fSUN");
    tunisGL.tunisColor3fVertex3fvSUN = (void (KHRONOS_APIENTRY *)(const GLfloat *, const GLfloat *))tunisGLGetProcAddress("glColor3fVertex3fvSUN");
    tunisGL.tunisColor3fv = (void (KHRONOS_APIENTRY *)(const GLfloat *))tunisGLGetProcAddress("glColor3fv");
    tunisGL.tunisColor3hNV = (void (KHRONOS_APIENTRY *)(GLhalfNV, GLhalfNV, GLhalfNV))tunisGLGetProcAddress("glColor3hNV");
    tunisGL.tunisColor3hvNV = (void (KHRONOS_APIENTRY *)(const GLhalfNV *))tunisGLGetProcAddress("glColor3hvNV");
    tunisGL.tunisColor3i = (void (KHRONOS_APIENTRY *)(GLint, GLint, GLint))tunisGLGetProcAddress("glColor3i");
    tunisGL.tunisColor3iv = (void (KHRONOS_APIENTRY *)(const GLint *))tunisGLGetProcAddress("glColor3iv");
    tunisGL.tunisColor3s = (void (KHRONOS_APIENTRY *)(GLshort, GLshort, GLshort))tunisGLGetProcAddress("glColor3s");
    tunisGL.tunisColor3sv = (void (KHRONOS_APIENTRY *)(const GLshort *))tunisGLGetProcAddress("glColor3sv");
    tunisGL.tunisColor3ub = (void (KHRONOS_APIENTRY *)(GLubyte, GLubyte, GLubyte))tunisGLGetProcAddress("glColor3ub");
    tunisGL.tunisColor3ubv = (void (KHRONOS_APIENTRY *)(const GLubyte *))tunisGLGetProcAddress("glColor3ubv");
    tunisGL.tunisColor3ui = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLuint))tunisGLGetProcAddress("glColor3ui");
    tunisGL.tunisColor3uiv = (void (KHRONOS_APIENTRY *)(const GLuint *))tunisGLGetProcAddress("glColor3uiv");
    tunisGL.tunisColor3us = (void (KHRONOS_APIENTRY *)(GLushort, GLushort, GLushort))tunisGLGetProcAddress("glColor3us");
    tunisGL.tunisColor3usv = (void (KHRONOS_APIENTRY *)(const GLushort *))tunisGLGetProcAddress("glColor3usv");
    tunisGL.tunisColor3xOES = (void (KHRONOS_APIENTRY *)(GLfixed, GLfixed, GLfixed))tunisGLGetProcAddress("glColor3xOES");
    tunisGL.tunisColor3xvOES = (void (KHRONOS_APIENTRY *)(const GLfixed *))tunisGLGetProcAddress("glColor3xvOES");
    tunisGL.tunisColor4b = (void (KHRONOS_APIENTRY *)(GLbyte, GLbyte, GLbyte, GLbyte))tunisGLGetProcAddress("glColor4b");
    tunisGL.tunisColor4bv = (void (KHRONOS_APIENTRY *)(const GLbyte *))tunisGLGetProcAddress("glColor4bv");
    tunisGL.tunisColor4d = (void (KHRONOS_APIENTRY *)(GLdouble, GLdouble, GLdouble, GLdouble))tunisGLGetProcAddress("glColor4d");
    tunisGL.tunisColor4dv = (void (KHRONOS_APIENTRY *)(const GLdouble *))tunisGLGetProcAddress("glColor4dv");
    tunisGL.tunisColor4f = (void (KHRONOS_APIENTRY *)(GLfloat, GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glColor4f");
    tunisGL.tunisColor4fNormal3fVertex3fSUN = (void (KHRONOS_APIENTRY *)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glColor4fNormal3fVertex3fSUN");
    tunisGL.tunisColor4fNormal3fVertex3fvSUN = (void (KHRONOS_APIENTRY *)(const GLfloat *, const GLfloat *, const GLfloat *))tunisGLGetProcAddress("glColor4fNormal3fVertex3fvSUN");
    tunisGL.tunisColor4fv = (void (KHRONOS_APIENTRY *)(const GLfloat *))tunisGLGetProcAddress("glColor4fv");
    tunisGL.tunisColor4hNV = (void (KHRONOS_APIENTRY *)(GLhalfNV, GLhalfNV, GLhalfNV, GLhalfNV))tunisGLGetProcAddress("glColor4hNV");
    tunisGL.tunisColor4hvNV = (void (KHRONOS_APIENTRY *)(const GLhalfNV *))tunisGLGetProcAddress("glColor4hvNV");
    tunisGL.tunisColor4i = (void (KHRONOS_APIENTRY *)(GLint, GLint, GLint, GLint))tunisGLGetProcAddress("glColor4i");
    tunisGL.tunisColor4iv = (void (KHRONOS_APIENTRY *)(const GLint *))tunisGLGetProcAddress("glColor4iv");
    tunisGL.tunisColor4s = (void (KHRONOS_APIENTRY *)(GLshort, GLshort, GLshort, GLshort))tunisGLGetProcAddress("glColor4s");
    tunisGL.tunisColor4sv = (void (KHRONOS_APIENTRY *)(const GLshort *))tunisGLGetProcAddress("glColor4sv");
    tunisGL.tunisColor4ub = (void (KHRONOS_APIENTRY *)(GLubyte, GLubyte, GLubyte, GLubyte))tunisGLGetProcAddress("glColor4ub");
    tunisGL.tunisColor4ubVertex2fSUN = (void (KHRONOS_APIENTRY *)(GLubyte, GLubyte, GLubyte, GLubyte, GLfloat, GLfloat))tunisGLGetProcAddress("glColor4ubVertex2fSUN");
    tunisGL.tunisColor4ubVertex2fvSUN = (void (KHRONOS_APIENTRY *)(const GLubyte *, const GLfloat *))tunisGLGetProcAddress("glColor4ubVertex2fvSUN");
    tunisGL.tunisColor4ubVertex3fSUN = (void (KHRONOS_APIENTRY *)(GLubyte, GLubyte, GLubyte, GLubyte, GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glColor4ubVertex3fSUN");
    tunisGL.tunisColor4ubVertex3fvSUN = (void (KHRONOS_APIENTRY *)(const GLubyte *, const GLfloat *))tunisGLGetProcAddress("glColor4ubVertex3fvSUN");
    tunisGL.tunisColor4ubv = (void (KHRONOS_APIENTRY *)(const GLubyte *))tunisGLGetProcAddress("glColor4ubv");
    tunisGL.tunisColor4ui = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLuint, GLuint))tunisGLGetProcAddress("glColor4ui");
    tunisGL.tunisColor4uiv = (void (KHRONOS_APIENTRY *)(const GLuint *))tunisGLGetProcAddress("glColor4uiv");
    tunisGL.tunisColor4us = (void (KHRONOS_APIENTRY *)(GLushort, GLushort, GLushort, GLushort))tunisGLGetProcAddress("glColor4us");
    tunisGL.tunisColor4usv = (void (KHRONOS_APIENTRY *)(const GLushort *))tunisGLGetProcAddress("glColor4usv");
    tunisGL.tunisColor4x = (void (KHRONOS_APIENTRY *)(GLfixed, GLfixed, GLfixed, GLfixed))tunisGLGetProcAddress("glColor4x");
    tunisGL.tunisColor4xOES = (void (KHRONOS_APIENTRY *)(GLfixed, GLfixed, GLfixed, GLfixed))tunisGLGetProcAddress("glColor4xOES");
    tunisGL.tunisColor4xvOES = (void (KHRONOS_APIENTRY *)(const GLfixed *))tunisGLGetProcAddress("glColor4xvOES");
    tunisGL.tunisColorFormatNV = (void (KHRONOS_APIENTRY *)(GLint, GLenum, GLsizei))tunisGLGetProcAddress("glColorFormatNV");
    tunisGL.tunisColorFragmentOp1ATI = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint))tunisGLGetProcAddress("glColorFragmentOp1ATI");
    tunisGL.tunisColorFragmentOp2ATI = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint))tunisGLGetProcAddress("glColorFragmentOp2ATI");
    tunisGL.tunisColorFragmentOp3ATI = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint))tunisGLGetProcAddress("glColorFragmentOp3ATI");
    tunisGL.tunisColorMask = (void (KHRONOS_APIENTRY *)(GLboolean, GLboolean, GLboolean, GLboolean))tunisGLGetProcAddress("glColorMask");
    tunisGL.tunisColorMaskIndexedEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLboolean, GLboolean, GLboolean, GLboolean))tunisGLGetProcAddress("glColorMaskIndexedEXT");
    tunisGL.tunisColorMaski = (void (KHRONOS_APIENTRY *)(GLuint, GLboolean, GLboolean, GLboolean, GLboolean))tunisGLGetProcAddress("glColorMaski");
    tunisGL.tunisColorMaskiEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLboolean, GLboolean, GLboolean, GLboolean))tunisGLGetProcAddress("glColorMaskiEXT");
    tunisGL.tunisColorMaskiOES = (void (KHRONOS_APIENTRY *)(GLuint, GLboolean, GLboolean, GLboolean, GLboolean))tunisGLGetProcAddress("glColorMaskiOES");
    tunisGL.tunisColorMaterial = (void (KHRONOS_APIENTRY *)(GLenum, GLenum))tunisGLGetProcAddress("glColorMaterial");
    tunisGL.tunisColorP3ui = (void (KHRONOS_APIENTRY *)(GLenum, GLuint))tunisGLGetProcAddress("glColorP3ui");
    tunisGL.tunisColorP3uiv = (void (KHRONOS_APIENTRY *)(GLenum, const GLuint *))tunisGLGetProcAddress("glColorP3uiv");
    tunisGL.tunisColorP4ui = (void (KHRONOS_APIENTRY *)(GLenum, GLuint))tunisGLGetProcAddress("glColorP4ui");
    tunisGL.tunisColorP4uiv = (void (KHRONOS_APIENTRY *)(GLenum, const GLuint *))tunisGLGetProcAddress("glColorP4uiv");
    tunisGL.tunisColorPointer = (void (KHRONOS_APIENTRY *)(GLint, GLenum, GLsizei, const void *))tunisGLGetProcAddress("glColorPointer");
    tunisGL.tunisColorPointerEXT = (void (KHRONOS_APIENTRY *)(GLint, GLenum, GLsizei, GLsizei, const void *))tunisGLGetProcAddress("glColorPointerEXT");
    tunisGL.tunisColorPointerListIBM = (void (KHRONOS_APIENTRY *)(GLint, GLenum, GLint, const void **, GLint))tunisGLGetProcAddress("glColorPointerListIBM");
    tunisGL.tunisColorPointervINTEL = (void (KHRONOS_APIENTRY *)(GLint, GLenum, const void **))tunisGLGetProcAddress("glColorPointervINTEL");
    tunisGL.tunisColorSubTable = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLsizei, GLenum, GLenum, const void *))tunisGLGetProcAddress("glColorSubTable");
    tunisGL.tunisColorSubTableEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLsizei, GLenum, GLenum, const void *))tunisGLGetProcAddress("glColorSubTableEXT");
    tunisGL.tunisColorTable = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLsizei, GLenum, GLenum, const void *))tunisGLGetProcAddress("glColorTable");
    tunisGL.tunisColorTableEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLsizei, GLenum, GLenum, const void *))tunisGLGetProcAddress("glColorTableEXT");
    tunisGL.tunisColorTableParameterfv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const GLfloat *))tunisGLGetProcAddress("glColorTableParameterfv");
    tunisGL.tunisColorTableParameterfvSGI = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const GLfloat *))tunisGLGetProcAddress("glColorTableParameterfvSGI");
    tunisGL.tunisColorTableParameteriv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const GLint *))tunisGLGetProcAddress("glColorTableParameteriv");
    tunisGL.tunisColorTableParameterivSGI = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const GLint *))tunisGLGetProcAddress("glColorTableParameterivSGI");
    tunisGL.tunisColorTableSGI = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLsizei, GLenum, GLenum, const void *))tunisGLGetProcAddress("glColorTableSGI");
    tunisGL.tunisCombinerInputNV = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLenum, GLenum, GLenum))tunisGLGetProcAddress("glCombinerInputNV");
    tunisGL.tunisCombinerOutputNV = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLenum, GLenum, GLenum, GLenum, GLboolean, GLboolean, GLboolean))tunisGLGetProcAddress("glCombinerOutputNV");
    tunisGL.tunisCombinerParameterfNV = (void (KHRONOS_APIENTRY *)(GLenum, GLfloat))tunisGLGetProcAddress("glCombinerParameterfNV");
    tunisGL.tunisCombinerParameterfvNV = (void (KHRONOS_APIENTRY *)(GLenum, const GLfloat *))tunisGLGetProcAddress("glCombinerParameterfvNV");
    tunisGL.tunisCombinerParameteriNV = (void (KHRONOS_APIENTRY *)(GLenum, GLint))tunisGLGetProcAddress("glCombinerParameteriNV");
    tunisGL.tunisCombinerParameterivNV = (void (KHRONOS_APIENTRY *)(GLenum, const GLint *))tunisGLGetProcAddress("glCombinerParameterivNV");
    tunisGL.tunisCombinerStageParameterfvNV = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const GLfloat *))tunisGLGetProcAddress("glCombinerStageParameterfvNV");
    tunisGL.tunisCommandListSegmentsNV = (void (KHRONOS_APIENTRY *)(GLuint, GLuint))tunisGLGetProcAddress("glCommandListSegmentsNV");
    tunisGL.tunisCompileCommandListNV = (void (KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glCompileCommandListNV");
    tunisGL.tunisCompileShader = (void (KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glCompileShader");
    tunisGL.tunisCompileShaderARB = (void (KHRONOS_APIENTRY *)(GLhandleARB))tunisGLGetProcAddress("glCompileShaderARB");
    tunisGL.tunisCompileShaderIncludeARB = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, const GLchar *const*, const GLint *))tunisGLGetProcAddress("glCompileShaderIncludeARB");
    tunisGL.tunisCompressedMultiTexImage1DEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint, GLenum, GLsizei, GLint, GLsizei, const void *))tunisGLGetProcAddress("glCompressedMultiTexImage1DEXT");
    tunisGL.tunisCompressedMultiTexImage2DEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint, GLenum, GLsizei, GLsizei, GLint, GLsizei, const void *))tunisGLGetProcAddress("glCompressedMultiTexImage2DEXT");
    tunisGL.tunisCompressedMultiTexImage3DEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLsizei, const void *))tunisGLGetProcAddress("glCompressedMultiTexImage3DEXT");
    tunisGL.tunisCompressedMultiTexSubImage1DEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint, GLint, GLsizei, GLenum, GLsizei, const void *))tunisGLGetProcAddress("glCompressedMultiTexSubImage1DEXT");
    tunisGL.tunisCompressedMultiTexSubImage2DEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLsizei, const void *))tunisGLGetProcAddress("glCompressedMultiTexSubImage2DEXT");
    tunisGL.tunisCompressedMultiTexSubImage3DEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, const void *))tunisGLGetProcAddress("glCompressedMultiTexSubImage3DEXT");
    tunisGL.tunisCompressedTexImage1D = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLenum, GLsizei, GLint, GLsizei, const void *))tunisGLGetProcAddress("glCompressedTexImage1D");
    tunisGL.tunisCompressedTexImage1DARB = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLenum, GLsizei, GLint, GLsizei, const void *))tunisGLGetProcAddress("glCompressedTexImage1DARB");
    tunisGL.tunisCompressedTexImage2D = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLenum, GLsizei, GLsizei, GLint, GLsizei, const void *))tunisGLGetProcAddress("glCompressedTexImage2D");
    tunisGL.tunisCompressedTexImage2DARB = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLenum, GLsizei, GLsizei, GLint, GLsizei, const void *))tunisGLGetProcAddress("glCompressedTexImage2DARB");
    tunisGL.tunisCompressedTexImage3D = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLsizei, const void *))tunisGLGetProcAddress("glCompressedTexImage3D");
    tunisGL.tunisCompressedTexImage3DARB = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLsizei, const void *))tunisGLGetProcAddress("glCompressedTexImage3DARB");
    tunisGL.tunisCompressedTexImage3DOES = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLsizei, const void *))tunisGLGetProcAddress("glCompressedTexImage3DOES");
    tunisGL.tunisCompressedTexSubImage1D = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLint, GLsizei, GLenum, GLsizei, const void *))tunisGLGetProcAddress("glCompressedTexSubImage1D");
    tunisGL.tunisCompressedTexSubImage1DARB = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLint, GLsizei, GLenum, GLsizei, const void *))tunisGLGetProcAddress("glCompressedTexSubImage1DARB");
    tunisGL.tunisCompressedTexSubImage2D = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLsizei, const void *))tunisGLGetProcAddress("glCompressedTexSubImage2D");
    tunisGL.tunisCompressedTexSubImage2DARB = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLsizei, const void *))tunisGLGetProcAddress("glCompressedTexSubImage2DARB");
    tunisGL.tunisCompressedTexSubImage3D = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, const void *))tunisGLGetProcAddress("glCompressedTexSubImage3D");
    tunisGL.tunisCompressedTexSubImage3DARB = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, const void *))tunisGLGetProcAddress("glCompressedTexSubImage3DARB");
    tunisGL.tunisCompressedTexSubImage3DOES = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, const void *))tunisGLGetProcAddress("glCompressedTexSubImage3DOES");
    tunisGL.tunisCompressedTextureImage1DEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint, GLenum, GLsizei, GLint, GLsizei, const void *))tunisGLGetProcAddress("glCompressedTextureImage1DEXT");
    tunisGL.tunisCompressedTextureImage2DEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint, GLenum, GLsizei, GLsizei, GLint, GLsizei, const void *))tunisGLGetProcAddress("glCompressedTextureImage2DEXT");
    tunisGL.tunisCompressedTextureImage3DEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLsizei, const void *))tunisGLGetProcAddress("glCompressedTextureImage3DEXT");
    tunisGL.tunisCompressedTextureSubImage1D = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLint, GLsizei, GLenum, GLsizei, const void *))tunisGLGetProcAddress("glCompressedTextureSubImage1D");
    tunisGL.tunisCompressedTextureSubImage1DEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint, GLint, GLsizei, GLenum, GLsizei, const void *))tunisGLGetProcAddress("glCompressedTextureSubImage1DEXT");
    tunisGL.tunisCompressedTextureSubImage2D = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLsizei, const void *))tunisGLGetProcAddress("glCompressedTextureSubImage2D");
    tunisGL.tunisCompressedTextureSubImage2DEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLsizei, const void *))tunisGLGetProcAddress("glCompressedTextureSubImage2DEXT");
    tunisGL.tunisCompressedTextureSubImage3D = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, const void *))tunisGLGetProcAddress("glCompressedTextureSubImage3D");
    tunisGL.tunisCompressedTextureSubImage3DEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, const void *))tunisGLGetProcAddress("glCompressedTextureSubImage3DEXT");
    tunisGL.tunisConservativeRasterParameterfNV = (void (KHRONOS_APIENTRY *)(GLenum, GLfloat))tunisGLGetProcAddress("glConservativeRasterParameterfNV");
    tunisGL.tunisConservativeRasterParameteriNV = (void (KHRONOS_APIENTRY *)(GLenum, GLint))tunisGLGetProcAddress("glConservativeRasterParameteriNV");
    tunisGL.tunisConvolutionFilter1D = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLsizei, GLenum, GLenum, const void *))tunisGLGetProcAddress("glConvolutionFilter1D");
    tunisGL.tunisConvolutionFilter1DEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLsizei, GLenum, GLenum, const void *))tunisGLGetProcAddress("glConvolutionFilter1DEXT");
    tunisGL.tunisConvolutionFilter2D = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLsizei, GLsizei, GLenum, GLenum, const void *))tunisGLGetProcAddress("glConvolutionFilter2D");
    tunisGL.tunisConvolutionFilter2DEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLsizei, GLsizei, GLenum, GLenum, const void *))tunisGLGetProcAddress("glConvolutionFilter2DEXT");
    tunisGL.tunisConvolutionParameterf = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfloat))tunisGLGetProcAddress("glConvolutionParameterf");
    tunisGL.tunisConvolutionParameterfEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfloat))tunisGLGetProcAddress("glConvolutionParameterfEXT");
    tunisGL.tunisConvolutionParameterfv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const GLfloat *))tunisGLGetProcAddress("glConvolutionParameterfv");
    tunisGL.tunisConvolutionParameterfvEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const GLfloat *))tunisGLGetProcAddress("glConvolutionParameterfvEXT");
    tunisGL.tunisConvolutionParameteri = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint))tunisGLGetProcAddress("glConvolutionParameteri");
    tunisGL.tunisConvolutionParameteriEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint))tunisGLGetProcAddress("glConvolutionParameteriEXT");
    tunisGL.tunisConvolutionParameteriv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const GLint *))tunisGLGetProcAddress("glConvolutionParameteriv");
    tunisGL.tunisConvolutionParameterivEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const GLint *))tunisGLGetProcAddress("glConvolutionParameterivEXT");
    tunisGL.tunisConvolutionParameterxOES = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfixed))tunisGLGetProcAddress("glConvolutionParameterxOES");
    tunisGL.tunisConvolutionParameterxvOES = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const GLfixed *))tunisGLGetProcAddress("glConvolutionParameterxvOES");
    tunisGL.tunisCopyBufferSubData = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLintptr, GLintptr, GLsizeiptr))tunisGLGetProcAddress("glCopyBufferSubData");
    tunisGL.tunisCopyBufferSubDataNV = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLintptr, GLintptr, GLsizeiptr))tunisGLGetProcAddress("glCopyBufferSubDataNV");
    tunisGL.tunisCopyColorSubTable = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLint, GLint, GLsizei))tunisGLGetProcAddress("glCopyColorSubTable");
    tunisGL.tunisCopyColorSubTableEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLint, GLint, GLsizei))tunisGLGetProcAddress("glCopyColorSubTableEXT");
    tunisGL.tunisCopyColorTable = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint, GLint, GLsizei))tunisGLGetProcAddress("glCopyColorTable");
    tunisGL.tunisCopyColorTableSGI = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint, GLint, GLsizei))tunisGLGetProcAddress("glCopyColorTableSGI");
    tunisGL.tunisCopyConvolutionFilter1D = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint, GLint, GLsizei))tunisGLGetProcAddress("glCopyConvolutionFilter1D");
    tunisGL.tunisCopyConvolutionFilter1DEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint, GLint, GLsizei))tunisGLGetProcAddress("glCopyConvolutionFilter1DEXT");
    tunisGL.tunisCopyConvolutionFilter2D = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint, GLint, GLsizei, GLsizei))tunisGLGetProcAddress("glCopyConvolutionFilter2D");
    tunisGL.tunisCopyConvolutionFilter2DEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint, GLint, GLsizei, GLsizei))tunisGLGetProcAddress("glCopyConvolutionFilter2DEXT");
    tunisGL.tunisCopyImageSubData = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint, GLint, GLint, GLint, GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei))tunisGLGetProcAddress("glCopyImageSubData");
    tunisGL.tunisCopyImageSubDataEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint, GLint, GLint, GLint, GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei))tunisGLGetProcAddress("glCopyImageSubDataEXT");
    tunisGL.tunisCopyImageSubDataNV = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint, GLint, GLint, GLint, GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei))tunisGLGetProcAddress("glCopyImageSubDataNV");
    tunisGL.tunisCopyImageSubDataOES = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint, GLint, GLint, GLint, GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei))tunisGLGetProcAddress("glCopyImageSubDataOES");
    tunisGL.tunisCopyMultiTexImage1DEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLint))tunisGLGetProcAddress("glCopyMultiTexImage1DEXT");
    tunisGL.tunisCopyMultiTexImage2DEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLsizei, GLint))tunisGLGetProcAddress("glCopyMultiTexImage2DEXT");
    tunisGL.tunisCopyMultiTexSubImage1DEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint, GLint, GLint, GLint, GLsizei))tunisGLGetProcAddress("glCopyMultiTexSubImage1DEXT");
    tunisGL.tunisCopyMultiTexSubImage2DEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei))tunisGLGetProcAddress("glCopyMultiTexSubImage2DEXT");
    tunisGL.tunisCopyMultiTexSubImage3DEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei))tunisGLGetProcAddress("glCopyMultiTexSubImage3DEXT");
    tunisGL.tunisCopyNamedBufferSubData = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLintptr, GLintptr, GLsizeiptr))tunisGLGetProcAddress("glCopyNamedBufferSubData");
    tunisGL.tunisCopyPathNV = (void (KHRONOS_APIENTRY *)(GLuint, GLuint))tunisGLGetProcAddress("glCopyPathNV");
    tunisGL.tunisCopyPixels = (void (KHRONOS_APIENTRY *)(GLint, GLint, GLsizei, GLsizei, GLenum))tunisGLGetProcAddress("glCopyPixels");
    tunisGL.tunisCopyTexImage1D = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLint))tunisGLGetProcAddress("glCopyTexImage1D");
    tunisGL.tunisCopyTexImage1DEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLint))tunisGLGetProcAddress("glCopyTexImage1DEXT");
    tunisGL.tunisCopyTexImage2D = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLsizei, GLint))tunisGLGetProcAddress("glCopyTexImage2D");
    tunisGL.tunisCopyTexImage2DEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLsizei, GLint))tunisGLGetProcAddress("glCopyTexImage2DEXT");
    tunisGL.tunisCopyTexSubImage1D = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLint, GLint, GLint, GLsizei))tunisGLGetProcAddress("glCopyTexSubImage1D");
    tunisGL.tunisCopyTexSubImage1DEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLint, GLint, GLint, GLsizei))tunisGLGetProcAddress("glCopyTexSubImage1DEXT");
    tunisGL.tunisCopyTexSubImage2D = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei))tunisGLGetProcAddress("glCopyTexSubImage2D");
    tunisGL.tunisCopyTexSubImage2DEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei))tunisGLGetProcAddress("glCopyTexSubImage2DEXT");
    tunisGL.tunisCopyTexSubImage3D = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei))tunisGLGetProcAddress("glCopyTexSubImage3D");
    tunisGL.tunisCopyTexSubImage3DEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei))tunisGLGetProcAddress("glCopyTexSubImage3DEXT");
    tunisGL.tunisCopyTexSubImage3DOES = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei))tunisGLGetProcAddress("glCopyTexSubImage3DOES");
    tunisGL.tunisCopyTextureImage1DEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLint))tunisGLGetProcAddress("glCopyTextureImage1DEXT");
    tunisGL.tunisCopyTextureImage2DEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLsizei, GLint))tunisGLGetProcAddress("glCopyTextureImage2DEXT");
    tunisGL.tunisCopyTextureLevelsAPPLE = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLint, GLsizei))tunisGLGetProcAddress("glCopyTextureLevelsAPPLE");
    tunisGL.tunisCopyTextureSubImage1D = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLint, GLint, GLint, GLsizei))tunisGLGetProcAddress("glCopyTextureSubImage1D");
    tunisGL.tunisCopyTextureSubImage1DEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei))tunisGLGetProcAddress("glCopyTextureSubImage1DEXT");
    tunisGL.tunisCopyTextureSubImage2D = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei))tunisGLGetProcAddress("glCopyTextureSubImage2D");
    tunisGL.tunisCopyTextureSubImage2DEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei))tunisGLGetProcAddress("glCopyTextureSubImage2DEXT");
    tunisGL.tunisCopyTextureSubImage3D = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei))tunisGLGetProcAddress("glCopyTextureSubImage3D");
    tunisGL.tunisCopyTextureSubImage3DEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei))tunisGLGetProcAddress("glCopyTextureSubImage3DEXT");
    tunisGL.tunisCoverFillPathInstancedNV = (void (KHRONOS_APIENTRY *)(GLsizei, GLenum, const void *, GLuint, GLenum, GLenum, const GLfloat *))tunisGLGetProcAddress("glCoverFillPathInstancedNV");
    tunisGL.tunisCoverFillPathNV = (void (KHRONOS_APIENTRY *)(GLuint, GLenum))tunisGLGetProcAddress("glCoverFillPathNV");
    tunisGL.tunisCoverStrokePathInstancedNV = (void (KHRONOS_APIENTRY *)(GLsizei, GLenum, const void *, GLuint, GLenum, GLenum, const GLfloat *))tunisGLGetProcAddress("glCoverStrokePathInstancedNV");
    tunisGL.tunisCoverStrokePathNV = (void (KHRONOS_APIENTRY *)(GLuint, GLenum))tunisGLGetProcAddress("glCoverStrokePathNV");
    tunisGL.tunisCoverageMaskNV = (void (KHRONOS_APIENTRY *)(GLboolean))tunisGLGetProcAddress("glCoverageMaskNV");
    tunisGL.tunisCoverageModulationNV = (void (KHRONOS_APIENTRY *)(GLenum))tunisGLGetProcAddress("glCoverageModulationNV");
    tunisGL.tunisCoverageModulationTableNV = (void (KHRONOS_APIENTRY *)(GLsizei, const GLfloat *))tunisGLGetProcAddress("glCoverageModulationTableNV");
    tunisGL.tunisCoverageOperationNV = (void (KHRONOS_APIENTRY *)(GLenum))tunisGLGetProcAddress("glCoverageOperationNV");
    tunisGL.tunisCreateBuffers = (void (KHRONOS_APIENTRY *)(GLsizei, GLuint *))tunisGLGetProcAddress("glCreateBuffers");
    tunisGL.tunisCreateCommandListsNV = (void (KHRONOS_APIENTRY *)(GLsizei, GLuint *))tunisGLGetProcAddress("glCreateCommandListsNV");
    tunisGL.tunisCreateFramebuffers = (void (KHRONOS_APIENTRY *)(GLsizei, GLuint *))tunisGLGetProcAddress("glCreateFramebuffers");
    tunisGL.tunisCreateMemoryObjectsEXT = (void (KHRONOS_APIENTRY *)(GLsizei, GLuint *))tunisGLGetProcAddress("glCreateMemoryObjectsEXT");
    tunisGL.tunisCreatePerfQueryINTEL = (void (KHRONOS_APIENTRY *)(GLuint, GLuint *))tunisGLGetProcAddress("glCreatePerfQueryINTEL");
    tunisGL.tunisCreateProgram = (GLuint(KHRONOS_APIENTRY *)(void))tunisGLGetProcAddress("glCreateProgram");
    tunisGL.tunisCreateProgramObjectARB = (GLhandleARB(KHRONOS_APIENTRY *)(void))tunisGLGetProcAddress("glCreateProgramObjectARB");
    tunisGL.tunisCreateProgramPipelines = (void (KHRONOS_APIENTRY *)(GLsizei, GLuint *))tunisGLGetProcAddress("glCreateProgramPipelines");
    tunisGL.tunisCreateQueries = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLuint *))tunisGLGetProcAddress("glCreateQueries");
    tunisGL.tunisCreateRenderbuffers = (void (KHRONOS_APIENTRY *)(GLsizei, GLuint *))tunisGLGetProcAddress("glCreateRenderbuffers");
    tunisGL.tunisCreateSamplers = (void (KHRONOS_APIENTRY *)(GLsizei, GLuint *))tunisGLGetProcAddress("glCreateSamplers");
    tunisGL.tunisCreateShader = (GLuint(KHRONOS_APIENTRY *)(GLenum))tunisGLGetProcAddress("glCreateShader");
    tunisGL.tunisCreateShaderObjectARB = (GLhandleARB(KHRONOS_APIENTRY *)(GLenum))tunisGLGetProcAddress("glCreateShaderObjectARB");
    tunisGL.tunisCreateShaderProgramEXT = (GLuint(KHRONOS_APIENTRY *)(GLenum, const GLchar *))tunisGLGetProcAddress("glCreateShaderProgramEXT");
    tunisGL.tunisCreateShaderProgramv = (GLuint(KHRONOS_APIENTRY *)(GLenum, GLsizei, const GLchar *const*))tunisGLGetProcAddress("glCreateShaderProgramv");
    tunisGL.tunisCreateShaderProgramvEXT = (GLuint(KHRONOS_APIENTRY *)(GLenum, GLsizei, const GLchar **))tunisGLGetProcAddress("glCreateShaderProgramvEXT");
    tunisGL.tunisCreateStatesNV = (void (KHRONOS_APIENTRY *)(GLsizei, GLuint *))tunisGLGetProcAddress("glCreateStatesNV");
    tunisGL.tunisCreateSyncFromCLeventARB = (GLsync(KHRONOS_APIENTRY *)(struct _cl_context *, struct _cl_event *, GLbitfield))tunisGLGetProcAddress("glCreateSyncFromCLeventARB");
    tunisGL.tunisCreateTextures = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLuint *))tunisGLGetProcAddress("glCreateTextures");
    tunisGL.tunisCreateTransformFeedbacks = (void (KHRONOS_APIENTRY *)(GLsizei, GLuint *))tunisGLGetProcAddress("glCreateTransformFeedbacks");
    tunisGL.tunisCreateVertexArrays = (void (KHRONOS_APIENTRY *)(GLsizei, GLuint *))tunisGLGetProcAddress("glCreateVertexArrays");
    tunisGL.tunisCullFace = (void (KHRONOS_APIENTRY *)(GLenum))tunisGLGetProcAddress("glCullFace");
    tunisGL.tunisCullParameterdvEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLdouble *))tunisGLGetProcAddress("glCullParameterdvEXT");
    tunisGL.tunisCullParameterfvEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLfloat *))tunisGLGetProcAddress("glCullParameterfvEXT");
    tunisGL.tunisCurrentPaletteMatrixARB = (void (KHRONOS_APIENTRY *)(GLint))tunisGLGetProcAddress("glCurrentPaletteMatrixARB");
    tunisGL.tunisCurrentPaletteMatrixOES = (void (KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glCurrentPaletteMatrixOES");
    tunisGL.tunisDebugMessageCallback = (void (KHRONOS_APIENTRY *)(GLDEBUGPROC, const void *))tunisGLGetProcAddress("glDebugMessageCallback");
    tunisGL.tunisDebugMessageCallbackAMD = (void (KHRONOS_APIENTRY *)(GLDEBUGPROCAMD, void *))tunisGLGetProcAddress("glDebugMessageCallbackAMD");
    tunisGL.tunisDebugMessageCallbackARB = (void (KHRONOS_APIENTRY *)(GLDEBUGPROCARB, const void *))tunisGLGetProcAddress("glDebugMessageCallbackARB");
    tunisGL.tunisDebugMessageCallbackKHR = (void (KHRONOS_APIENTRY *)(GLDEBUGPROCKHR, const void *))tunisGLGetProcAddress("glDebugMessageCallbackKHR");
    tunisGL.tunisDebugMessageControl = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLsizei, const GLuint *, GLboolean))tunisGLGetProcAddress("glDebugMessageControl");
    tunisGL.tunisDebugMessageControlARB = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLsizei, const GLuint *, GLboolean))tunisGLGetProcAddress("glDebugMessageControlARB");
    tunisGL.tunisDebugMessageControlKHR = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLsizei, const GLuint *, GLboolean))tunisGLGetProcAddress("glDebugMessageControlKHR");
    tunisGL.tunisDebugMessageEnableAMD = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLsizei, const GLuint *, GLboolean))tunisGLGetProcAddress("glDebugMessageEnableAMD");
    tunisGL.tunisDebugMessageInsert = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLuint, GLenum, GLsizei, const GLchar *))tunisGLGetProcAddress("glDebugMessageInsert");
    tunisGL.tunisDebugMessageInsertAMD = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLuint, GLsizei, const GLchar *))tunisGLGetProcAddress("glDebugMessageInsertAMD");
    tunisGL.tunisDebugMessageInsertARB = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLuint, GLenum, GLsizei, const GLchar *))tunisGLGetProcAddress("glDebugMessageInsertARB");
    tunisGL.tunisDebugMessageInsertKHR = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLuint, GLenum, GLsizei, const GLchar *))tunisGLGetProcAddress("glDebugMessageInsertKHR");
    tunisGL.tunisDeformSGIX = (void (KHRONOS_APIENTRY *)(GLbitfield))tunisGLGetProcAddress("glDeformSGIX");
    tunisGL.tunisDeformationMap3dSGIX = (void (KHRONOS_APIENTRY *)(GLenum, GLdouble, GLdouble, GLint, GLint, GLdouble, GLdouble, GLint, GLint, GLdouble, GLdouble, GLint, GLint, const GLdouble *))tunisGLGetProcAddress("glDeformationMap3dSGIX");
    tunisGL.tunisDeformationMap3fSGIX = (void (KHRONOS_APIENTRY *)(GLenum, GLfloat, GLfloat, GLint, GLint, GLfloat, GLfloat, GLint, GLint, GLfloat, GLfloat, GLint, GLint, const GLfloat *))tunisGLGetProcAddress("glDeformationMap3fSGIX");
    tunisGL.tunisDeleteAsyncMarkersSGIX = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei))tunisGLGetProcAddress("glDeleteAsyncMarkersSGIX");
    tunisGL.tunisDeleteBufferRegion = (void (KHRONOS_APIENTRY *)(GLenum))tunisGLGetProcAddress("glDeleteBufferRegion");
    tunisGL.tunisDeleteBuffers = (void (KHRONOS_APIENTRY *)(GLsizei, const GLuint *))tunisGLGetProcAddress("glDeleteBuffers");
    tunisGL.tunisDeleteBuffersARB = (void (KHRONOS_APIENTRY *)(GLsizei, const GLuint *))tunisGLGetProcAddress("glDeleteBuffersARB");
    tunisGL.tunisDeleteCommandListsNV = (void (KHRONOS_APIENTRY *)(GLsizei, const GLuint *))tunisGLGetProcAddress("glDeleteCommandListsNV");
    tunisGL.tunisDeleteFencesAPPLE = (void (KHRONOS_APIENTRY *)(GLsizei, const GLuint *))tunisGLGetProcAddress("glDeleteFencesAPPLE");
    tunisGL.tunisDeleteFencesNV = (void (KHRONOS_APIENTRY *)(GLsizei, const GLuint *))tunisGLGetProcAddress("glDeleteFencesNV");
    tunisGL.tunisDeleteFragmentShaderATI = (void (KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glDeleteFragmentShaderATI");
    tunisGL.tunisDeleteFramebuffers = (void (KHRONOS_APIENTRY *)(GLsizei, const GLuint *))tunisGLGetProcAddress("glDeleteFramebuffers");
    tunisGL.tunisDeleteFramebuffersEXT = (void (KHRONOS_APIENTRY *)(GLsizei, const GLuint *))tunisGLGetProcAddress("glDeleteFramebuffersEXT");
    tunisGL.tunisDeleteFramebuffersOES = (void (KHRONOS_APIENTRY *)(GLsizei, const GLuint *))tunisGLGetProcAddress("glDeleteFramebuffersOES");
    tunisGL.tunisDeleteLists = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei))tunisGLGetProcAddress("glDeleteLists");
    tunisGL.tunisDeleteMemoryObjectsEXT = (void (KHRONOS_APIENTRY *)(GLsizei, const GLuint *))tunisGLGetProcAddress("glDeleteMemoryObjectsEXT");
    tunisGL.tunisDeleteNamedStringARB = (void (KHRONOS_APIENTRY *)(GLint, const GLchar *))tunisGLGetProcAddress("glDeleteNamedStringARB");
    tunisGL.tunisDeleteNamesAMD = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, const GLuint *))tunisGLGetProcAddress("glDeleteNamesAMD");
    tunisGL.tunisDeleteObjectARB = (void (KHRONOS_APIENTRY *)(GLhandleARB))tunisGLGetProcAddress("glDeleteObjectARB");
    tunisGL.tunisDeleteOcclusionQueriesNV = (void (KHRONOS_APIENTRY *)(GLsizei, const GLuint *))tunisGLGetProcAddress("glDeleteOcclusionQueriesNV");
    tunisGL.tunisDeletePathsNV = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei))tunisGLGetProcAddress("glDeletePathsNV");
    tunisGL.tunisDeletePerfMonitorsAMD = (void (KHRONOS_APIENTRY *)(GLsizei, GLuint *))tunisGLGetProcAddress("glDeletePerfMonitorsAMD");
    tunisGL.tunisDeletePerfQueryINTEL = (void (KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glDeletePerfQueryINTEL");
    tunisGL.tunisDeleteProgram = (void (KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glDeleteProgram");
    tunisGL.tunisDeleteProgramPipelines = (void (KHRONOS_APIENTRY *)(GLsizei, const GLuint *))tunisGLGetProcAddress("glDeleteProgramPipelines");
    tunisGL.tunisDeleteProgramPipelinesEXT = (void (KHRONOS_APIENTRY *)(GLsizei, const GLuint *))tunisGLGetProcAddress("glDeleteProgramPipelinesEXT");
    tunisGL.tunisDeleteProgramsARB = (void (KHRONOS_APIENTRY *)(GLsizei, const GLuint *))tunisGLGetProcAddress("glDeleteProgramsARB");
    tunisGL.tunisDeleteProgramsNV = (void (KHRONOS_APIENTRY *)(GLsizei, const GLuint *))tunisGLGetProcAddress("glDeleteProgramsNV");
    tunisGL.tunisDeleteQueries = (void (KHRONOS_APIENTRY *)(GLsizei, const GLuint *))tunisGLGetProcAddress("glDeleteQueries");
    tunisGL.tunisDeleteQueriesARB = (void (KHRONOS_APIENTRY *)(GLsizei, const GLuint *))tunisGLGetProcAddress("glDeleteQueriesARB");
    tunisGL.tunisDeleteQueriesEXT = (void (KHRONOS_APIENTRY *)(GLsizei, const GLuint *))tunisGLGetProcAddress("glDeleteQueriesEXT");
    tunisGL.tunisDeleteQueryResourceTagNV = (void (KHRONOS_APIENTRY *)(GLsizei, const GLint *))tunisGLGetProcAddress("glDeleteQueryResourceTagNV");
    tunisGL.tunisDeleteRenderbuffers = (void (KHRONOS_APIENTRY *)(GLsizei, const GLuint *))tunisGLGetProcAddress("glDeleteRenderbuffers");
    tunisGL.tunisDeleteRenderbuffersEXT = (void (KHRONOS_APIENTRY *)(GLsizei, const GLuint *))tunisGLGetProcAddress("glDeleteRenderbuffersEXT");
    tunisGL.tunisDeleteRenderbuffersOES = (void (KHRONOS_APIENTRY *)(GLsizei, const GLuint *))tunisGLGetProcAddress("glDeleteRenderbuffersOES");
    tunisGL.tunisDeleteSamplers = (void (KHRONOS_APIENTRY *)(GLsizei, const GLuint *))tunisGLGetProcAddress("glDeleteSamplers");
    tunisGL.tunisDeleteSemaphoresEXT = (void (KHRONOS_APIENTRY *)(GLsizei, const GLuint *))tunisGLGetProcAddress("glDeleteSemaphoresEXT");
    tunisGL.tunisDeleteShader = (void (KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glDeleteShader");
    tunisGL.tunisDeleteStatesNV = (void (KHRONOS_APIENTRY *)(GLsizei, const GLuint *))tunisGLGetProcAddress("glDeleteStatesNV");
    tunisGL.tunisDeleteSync = (void (KHRONOS_APIENTRY *)(GLsync))tunisGLGetProcAddress("glDeleteSync");
    tunisGL.tunisDeleteSyncAPPLE = (void (KHRONOS_APIENTRY *)(GLsync))tunisGLGetProcAddress("glDeleteSyncAPPLE");
    tunisGL.tunisDeleteTextures = (void (KHRONOS_APIENTRY *)(GLsizei, const GLuint *))tunisGLGetProcAddress("glDeleteTextures");
    tunisGL.tunisDeleteTexturesEXT = (void (KHRONOS_APIENTRY *)(GLsizei, const GLuint *))tunisGLGetProcAddress("glDeleteTexturesEXT");
    tunisGL.tunisDeleteTransformFeedbacks = (void (KHRONOS_APIENTRY *)(GLsizei, const GLuint *))tunisGLGetProcAddress("glDeleteTransformFeedbacks");
    tunisGL.tunisDeleteTransformFeedbacksNV = (void (KHRONOS_APIENTRY *)(GLsizei, const GLuint *))tunisGLGetProcAddress("glDeleteTransformFeedbacksNV");
    tunisGL.tunisDeleteVertexArrays = (void (KHRONOS_APIENTRY *)(GLsizei, const GLuint *))tunisGLGetProcAddress("glDeleteVertexArrays");
    tunisGL.tunisDeleteVertexArraysAPPLE = (void (KHRONOS_APIENTRY *)(GLsizei, const GLuint *))tunisGLGetProcAddress("glDeleteVertexArraysAPPLE");
    tunisGL.tunisDeleteVertexArraysOES = (void (KHRONOS_APIENTRY *)(GLsizei, const GLuint *))tunisGLGetProcAddress("glDeleteVertexArraysOES");
    tunisGL.tunisDeleteVertexShaderEXT = (void (KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glDeleteVertexShaderEXT");
    tunisGL.tunisDepthBoundsEXT = (void (KHRONOS_APIENTRY *)(GLclampd, GLclampd))tunisGLGetProcAddress("glDepthBoundsEXT");
    tunisGL.tunisDepthBoundsdNV = (void (KHRONOS_APIENTRY *)(GLdouble, GLdouble))tunisGLGetProcAddress("glDepthBoundsdNV");
    tunisGL.tunisDepthFunc = (void (KHRONOS_APIENTRY *)(GLenum))tunisGLGetProcAddress("glDepthFunc");
    tunisGL.tunisDepthMask = (void (KHRONOS_APIENTRY *)(GLboolean))tunisGLGetProcAddress("glDepthMask");
    tunisGL.tunisDepthRange = (void (KHRONOS_APIENTRY *)(GLdouble, GLdouble))tunisGLGetProcAddress("glDepthRange");
    tunisGL.tunisDepthRangeArrayfvNV = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, const GLfloat *))tunisGLGetProcAddress("glDepthRangeArrayfvNV");
    tunisGL.tunisDepthRangeArrayfvOES = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, const GLfloat *))tunisGLGetProcAddress("glDepthRangeArrayfvOES");
    tunisGL.tunisDepthRangeArrayv = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, const GLdouble *))tunisGLGetProcAddress("glDepthRangeArrayv");
    tunisGL.tunisDepthRangeIndexed = (void (KHRONOS_APIENTRY *)(GLuint, GLdouble, GLdouble))tunisGLGetProcAddress("glDepthRangeIndexed");
    tunisGL.tunisDepthRangeIndexedfNV = (void (KHRONOS_APIENTRY *)(GLuint, GLfloat, GLfloat))tunisGLGetProcAddress("glDepthRangeIndexedfNV");
    tunisGL.tunisDepthRangeIndexedfOES = (void (KHRONOS_APIENTRY *)(GLuint, GLfloat, GLfloat))tunisGLGetProcAddress("glDepthRangeIndexedfOES");
    tunisGL.tunisDepthRangedNV = (void (KHRONOS_APIENTRY *)(GLdouble, GLdouble))tunisGLGetProcAddress("glDepthRangedNV");
    tunisGL.tunisDepthRangef = (void (KHRONOS_APIENTRY *)(GLfloat, GLfloat))tunisGLGetProcAddress("glDepthRangef");
    tunisGL.tunisDepthRangefOES = (void (KHRONOS_APIENTRY *)(GLclampf, GLclampf))tunisGLGetProcAddress("glDepthRangefOES");
    tunisGL.tunisDepthRangex = (void (KHRONOS_APIENTRY *)(GLfixed, GLfixed))tunisGLGetProcAddress("glDepthRangex");
    tunisGL.tunisDepthRangexOES = (void (KHRONOS_APIENTRY *)(GLfixed, GLfixed))tunisGLGetProcAddress("glDepthRangexOES");
    tunisGL.tunisDetachObjectARB = (void (KHRONOS_APIENTRY *)(GLhandleARB, GLhandleARB))tunisGLGetProcAddress("glDetachObjectARB");
    tunisGL.tunisDetachShader = (void (KHRONOS_APIENTRY *)(GLuint, GLuint))tunisGLGetProcAddress("glDetachShader");
    tunisGL.tunisDetailTexFuncSGIS = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, const GLfloat *))tunisGLGetProcAddress("glDetailTexFuncSGIS");
    tunisGL.tunisDisable = (void (KHRONOS_APIENTRY *)(GLenum))tunisGLGetProcAddress("glDisable");
    tunisGL.tunisDisableClientState = (void (KHRONOS_APIENTRY *)(GLenum))tunisGLGetProcAddress("glDisableClientState");
    tunisGL.tunisDisableClientStateIndexedEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLuint))tunisGLGetProcAddress("glDisableClientStateIndexedEXT");
    tunisGL.tunisDisableClientStateiEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLuint))tunisGLGetProcAddress("glDisableClientStateiEXT");
    tunisGL.tunisDisableDriverControlQCOM = (void (KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glDisableDriverControlQCOM");
    tunisGL.tunisDisableIndexedEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLuint))tunisGLGetProcAddress("glDisableIndexedEXT");
    tunisGL.tunisDisableVariantClientStateEXT = (void (KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glDisableVariantClientStateEXT");
    tunisGL.tunisDisableVertexArrayAttrib = (void (KHRONOS_APIENTRY *)(GLuint, GLuint))tunisGLGetProcAddress("glDisableVertexArrayAttrib");
    tunisGL.tunisDisableVertexArrayAttribEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLuint))tunisGLGetProcAddress("glDisableVertexArrayAttribEXT");
    tunisGL.tunisDisableVertexArrayEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum))tunisGLGetProcAddress("glDisableVertexArrayEXT");
    tunisGL.tunisDisableVertexAttribAPPLE = (void (KHRONOS_APIENTRY *)(GLuint, GLenum))tunisGLGetProcAddress("glDisableVertexAttribAPPLE");
    tunisGL.tunisDisableVertexAttribArray = (void (KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glDisableVertexAttribArray");
    tunisGL.tunisDisableVertexAttribArrayARB = (void (KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glDisableVertexAttribArrayARB");
    tunisGL.tunisDisablei = (void (KHRONOS_APIENTRY *)(GLenum, GLuint))tunisGLGetProcAddress("glDisablei");
    tunisGL.tunisDisableiEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLuint))tunisGLGetProcAddress("glDisableiEXT");
    tunisGL.tunisDisableiNV = (void (KHRONOS_APIENTRY *)(GLenum, GLuint))tunisGLGetProcAddress("glDisableiNV");
    tunisGL.tunisDisableiOES = (void (KHRONOS_APIENTRY *)(GLenum, GLuint))tunisGLGetProcAddress("glDisableiOES");
    tunisGL.tunisDiscardFramebufferEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, const GLenum *))tunisGLGetProcAddress("glDiscardFramebufferEXT");
    tunisGL.tunisDispatchCompute = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLuint))tunisGLGetProcAddress("glDispatchCompute");
    tunisGL.tunisDispatchComputeGroupSizeARB = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLuint, GLuint, GLuint, GLuint))tunisGLGetProcAddress("glDispatchComputeGroupSizeARB");
    tunisGL.tunisDispatchComputeIndirect = (void (KHRONOS_APIENTRY *)(GLintptr))tunisGLGetProcAddress("glDispatchComputeIndirect");
    tunisGL.tunisDrawArrays = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLsizei))tunisGLGetProcAddress("glDrawArrays");
    tunisGL.tunisDrawArraysEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLsizei))tunisGLGetProcAddress("glDrawArraysEXT");
    tunisGL.tunisDrawArraysIndirect = (void (KHRONOS_APIENTRY *)(GLenum, const void *))tunisGLGetProcAddress("glDrawArraysIndirect");
    tunisGL.tunisDrawArraysInstanced = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLsizei, GLsizei))tunisGLGetProcAddress("glDrawArraysInstanced");
    tunisGL.tunisDrawArraysInstancedANGLE = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLsizei, GLsizei))tunisGLGetProcAddress("glDrawArraysInstancedANGLE");
    tunisGL.tunisDrawArraysInstancedARB = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLsizei, GLsizei))tunisGLGetProcAddress("glDrawArraysInstancedARB");
    tunisGL.tunisDrawArraysInstancedBaseInstance = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLsizei, GLsizei, GLuint))tunisGLGetProcAddress("glDrawArraysInstancedBaseInstance");
    tunisGL.tunisDrawArraysInstancedBaseInstanceEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLsizei, GLsizei, GLuint))tunisGLGetProcAddress("glDrawArraysInstancedBaseInstanceEXT");
    tunisGL.tunisDrawArraysInstancedEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLsizei, GLsizei))tunisGLGetProcAddress("glDrawArraysInstancedEXT");
    tunisGL.tunisDrawArraysInstancedNV = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLsizei, GLsizei))tunisGLGetProcAddress("glDrawArraysInstancedNV");
    tunisGL.tunisDrawBuffer = (void (KHRONOS_APIENTRY *)(GLenum))tunisGLGetProcAddress("glDrawBuffer");
    tunisGL.tunisDrawBufferRegion = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLint, GLsizei, GLsizei, GLint, GLint))tunisGLGetProcAddress("glDrawBufferRegion");
    tunisGL.tunisDrawBuffers = (void (KHRONOS_APIENTRY *)(GLsizei, const GLenum *))tunisGLGetProcAddress("glDrawBuffers");
    tunisGL.tunisDrawBuffersARB = (void (KHRONOS_APIENTRY *)(GLsizei, const GLenum *))tunisGLGetProcAddress("glDrawBuffersARB");
    tunisGL.tunisDrawBuffersATI = (void (KHRONOS_APIENTRY *)(GLsizei, const GLenum *))tunisGLGetProcAddress("glDrawBuffersATI");
    tunisGL.tunisDrawBuffersEXT = (void (KHRONOS_APIENTRY *)(GLsizei, const GLenum *))tunisGLGetProcAddress("glDrawBuffersEXT");
    tunisGL.tunisDrawBuffersIndexedEXT = (void (KHRONOS_APIENTRY *)(GLint, const GLenum *, const GLint *))tunisGLGetProcAddress("glDrawBuffersIndexedEXT");
    tunisGL.tunisDrawBuffersNV = (void (KHRONOS_APIENTRY *)(GLsizei, const GLenum *))tunisGLGetProcAddress("glDrawBuffersNV");
    tunisGL.tunisDrawCommandsAddressNV = (void (KHRONOS_APIENTRY *)(GLenum, const GLuint64 *, const GLsizei *, GLuint))tunisGLGetProcAddress("glDrawCommandsAddressNV");
    tunisGL.tunisDrawCommandsNV = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, const GLintptr *, const GLsizei *, GLuint))tunisGLGetProcAddress("glDrawCommandsNV");
    tunisGL.tunisDrawCommandsStatesAddressNV = (void (KHRONOS_APIENTRY *)(const GLuint64 *, const GLsizei *, const GLuint *, const GLuint *, GLuint))tunisGLGetProcAddress("glDrawCommandsStatesAddressNV");
    tunisGL.tunisDrawCommandsStatesNV = (void (KHRONOS_APIENTRY *)(GLuint, const GLintptr *, const GLsizei *, const GLuint *, const GLuint *, GLuint))tunisGLGetProcAddress("glDrawCommandsStatesNV");
    tunisGL.tunisDrawElementArrayAPPLE = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLsizei))tunisGLGetProcAddress("glDrawElementArrayAPPLE");
    tunisGL.tunisDrawElementArrayATI = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei))tunisGLGetProcAddress("glDrawElementArrayATI");
    tunisGL.tunisDrawElements = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLenum, const void *))tunisGLGetProcAddress("glDrawElements");
    tunisGL.tunisDrawElementsBaseVertex = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLenum, const void *, GLint))tunisGLGetProcAddress("glDrawElementsBaseVertex");
    tunisGL.tunisDrawElementsBaseVertexEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLenum, const void *, GLint))tunisGLGetProcAddress("glDrawElementsBaseVertexEXT");
    tunisGL.tunisDrawElementsBaseVertexOES = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLenum, const void *, GLint))tunisGLGetProcAddress("glDrawElementsBaseVertexOES");
    tunisGL.tunisDrawElementsIndirect = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const void *))tunisGLGetProcAddress("glDrawElementsIndirect");
    tunisGL.tunisDrawElementsInstanced = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLenum, const void *, GLsizei))tunisGLGetProcAddress("glDrawElementsInstanced");
    tunisGL.tunisDrawElementsInstancedANGLE = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLenum, const void *, GLsizei))tunisGLGetProcAddress("glDrawElementsInstancedANGLE");
    tunisGL.tunisDrawElementsInstancedARB = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLenum, const void *, GLsizei))tunisGLGetProcAddress("glDrawElementsInstancedARB");
    tunisGL.tunisDrawElementsInstancedBaseInstance = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLenum, const void *, GLsizei, GLuint))tunisGLGetProcAddress("glDrawElementsInstancedBaseInstance");
    tunisGL.tunisDrawElementsInstancedBaseInstanceEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLenum, const void *, GLsizei, GLuint))tunisGLGetProcAddress("glDrawElementsInstancedBaseInstanceEXT");
    tunisGL.tunisDrawElementsInstancedBaseVertex = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLenum, const void *, GLsizei, GLint))tunisGLGetProcAddress("glDrawElementsInstancedBaseVertex");
    tunisGL.tunisDrawElementsInstancedBaseVertexBaseInstance = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLenum, const void *, GLsizei, GLint, GLuint))tunisGLGetProcAddress("glDrawElementsInstancedBaseVertexBaseInstance");
    tunisGL.tunisDrawElementsInstancedBaseVertexBaseInstanceEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLenum, const void *, GLsizei, GLint, GLuint))tunisGLGetProcAddress("glDrawElementsInstancedBaseVertexBaseInstanceEXT");
    tunisGL.tunisDrawElementsInstancedBaseVertexEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLenum, const void *, GLsizei, GLint))tunisGLGetProcAddress("glDrawElementsInstancedBaseVertexEXT");
    tunisGL.tunisDrawElementsInstancedBaseVertexOES = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLenum, const void *, GLsizei, GLint))tunisGLGetProcAddress("glDrawElementsInstancedBaseVertexOES");
    tunisGL.tunisDrawElementsInstancedEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLenum, const void *, GLsizei))tunisGLGetProcAddress("glDrawElementsInstancedEXT");
    tunisGL.tunisDrawElementsInstancedNV = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLenum, const void *, GLsizei))tunisGLGetProcAddress("glDrawElementsInstancedNV");
    tunisGL.tunisDrawMeshArraysSUN = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLsizei, GLsizei))tunisGLGetProcAddress("glDrawMeshArraysSUN");
    tunisGL.tunisDrawPixels = (void (KHRONOS_APIENTRY *)(GLsizei, GLsizei, GLenum, GLenum, const void *))tunisGLGetProcAddress("glDrawPixels");
    tunisGL.tunisDrawRangeElementArrayAPPLE = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLuint, GLint, GLsizei))tunisGLGetProcAddress("glDrawRangeElementArrayAPPLE");
    tunisGL.tunisDrawRangeElementArrayATI = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLuint, GLsizei))tunisGLGetProcAddress("glDrawRangeElementArrayATI");
    tunisGL.tunisDrawRangeElements = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLuint, GLsizei, GLenum, const void *))tunisGLGetProcAddress("glDrawRangeElements");
    tunisGL.tunisDrawRangeElementsBaseVertex = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLuint, GLsizei, GLenum, const void *, GLint))tunisGLGetProcAddress("glDrawRangeElementsBaseVertex");
    tunisGL.tunisDrawRangeElementsBaseVertexEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLuint, GLsizei, GLenum, const void *, GLint))tunisGLGetProcAddress("glDrawRangeElementsBaseVertexEXT");
    tunisGL.tunisDrawRangeElementsBaseVertexOES = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLuint, GLsizei, GLenum, const void *, GLint))tunisGLGetProcAddress("glDrawRangeElementsBaseVertexOES");
    tunisGL.tunisDrawRangeElementsEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLuint, GLsizei, GLenum, const void *))tunisGLGetProcAddress("glDrawRangeElementsEXT");
    tunisGL.tunisDrawTexfOES = (void (KHRONOS_APIENTRY *)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glDrawTexfOES");
    tunisGL.tunisDrawTexfvOES = (void (KHRONOS_APIENTRY *)(const GLfloat *))tunisGLGetProcAddress("glDrawTexfvOES");
    tunisGL.tunisDrawTexiOES = (void (KHRONOS_APIENTRY *)(GLint, GLint, GLint, GLint, GLint))tunisGLGetProcAddress("glDrawTexiOES");
    tunisGL.tunisDrawTexivOES = (void (KHRONOS_APIENTRY *)(const GLint *))tunisGLGetProcAddress("glDrawTexivOES");
    tunisGL.tunisDrawTexsOES = (void (KHRONOS_APIENTRY *)(GLshort, GLshort, GLshort, GLshort, GLshort))tunisGLGetProcAddress("glDrawTexsOES");
    tunisGL.tunisDrawTexsvOES = (void (KHRONOS_APIENTRY *)(const GLshort *))tunisGLGetProcAddress("glDrawTexsvOES");
    tunisGL.tunisDrawTextureNV = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glDrawTextureNV");
    tunisGL.tunisDrawTexxOES = (void (KHRONOS_APIENTRY *)(GLfixed, GLfixed, GLfixed, GLfixed, GLfixed))tunisGLGetProcAddress("glDrawTexxOES");
    tunisGL.tunisDrawTexxvOES = (void (KHRONOS_APIENTRY *)(const GLfixed *))tunisGLGetProcAddress("glDrawTexxvOES");
    tunisGL.tunisDrawTransformFeedback = (void (KHRONOS_APIENTRY *)(GLenum, GLuint))tunisGLGetProcAddress("glDrawTransformFeedback");
    tunisGL.tunisDrawTransformFeedbackEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLuint))tunisGLGetProcAddress("glDrawTransformFeedbackEXT");
    tunisGL.tunisDrawTransformFeedbackInstanced = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLsizei))tunisGLGetProcAddress("glDrawTransformFeedbackInstanced");
    tunisGL.tunisDrawTransformFeedbackInstancedEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLsizei))tunisGLGetProcAddress("glDrawTransformFeedbackInstancedEXT");
    tunisGL.tunisDrawTransformFeedbackNV = (void (KHRONOS_APIENTRY *)(GLenum, GLuint))tunisGLGetProcAddress("glDrawTransformFeedbackNV");
    tunisGL.tunisDrawTransformFeedbackStream = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLuint))tunisGLGetProcAddress("glDrawTransformFeedbackStream");
    tunisGL.tunisDrawTransformFeedbackStreamInstanced = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLuint, GLsizei))tunisGLGetProcAddress("glDrawTransformFeedbackStreamInstanced");
    tunisGL.tunisDrawVkImageNV = (void (KHRONOS_APIENTRY *)(GLuint64, GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glDrawVkImageNV");
    tunisGL.tunisEGLImageTargetRenderbufferStorageOES = (void (KHRONOS_APIENTRY *)(GLenum, GLeglImageOES))tunisGLGetProcAddress("glEGLImageTargetRenderbufferStorageOES");
    tunisGL.tunisEGLImageTargetTexStorageEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLeglImageOES, const GLint* ))tunisGLGetProcAddress("glEGLImageTargetTexStorageEXT");
    tunisGL.tunisEGLImageTargetTexture2DOES = (void (KHRONOS_APIENTRY *)(GLenum, GLeglImageOES))tunisGLGetProcAddress("glEGLImageTargetTexture2DOES");
    tunisGL.tunisEGLImageTargetTextureStorageEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLeglImageOES, const GLint* ))tunisGLGetProcAddress("glEGLImageTargetTextureStorageEXT");
    tunisGL.tunisEdgeFlag = (void (KHRONOS_APIENTRY *)(GLboolean))tunisGLGetProcAddress("glEdgeFlag");
    tunisGL.tunisEdgeFlagFormatNV = (void (KHRONOS_APIENTRY *)(GLsizei))tunisGLGetProcAddress("glEdgeFlagFormatNV");
    tunisGL.tunisEdgeFlagPointer = (void (KHRONOS_APIENTRY *)(GLsizei, const void *))tunisGLGetProcAddress("glEdgeFlagPointer");
    tunisGL.tunisEdgeFlagPointerEXT = (void (KHRONOS_APIENTRY *)(GLsizei, GLsizei, const GLboolean *))tunisGLGetProcAddress("glEdgeFlagPointerEXT");
    tunisGL.tunisEdgeFlagPointerListIBM = (void (KHRONOS_APIENTRY *)(GLint, const GLboolean **, GLint))tunisGLGetProcAddress("glEdgeFlagPointerListIBM");
    tunisGL.tunisEdgeFlagv = (void (KHRONOS_APIENTRY *)(const GLboolean *))tunisGLGetProcAddress("glEdgeFlagv");
    tunisGL.tunisElementPointerAPPLE = (void (KHRONOS_APIENTRY *)(GLenum, const void *))tunisGLGetProcAddress("glElementPointerAPPLE");
    tunisGL.tunisElementPointerATI = (void (KHRONOS_APIENTRY *)(GLenum, const void *))tunisGLGetProcAddress("glElementPointerATI");
    tunisGL.tunisEnable = (void (KHRONOS_APIENTRY *)(GLenum))tunisGLGetProcAddress("glEnable");
    tunisGL.tunisEnableClientState = (void (KHRONOS_APIENTRY *)(GLenum))tunisGLGetProcAddress("glEnableClientState");
    tunisGL.tunisEnableClientStateIndexedEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLuint))tunisGLGetProcAddress("glEnableClientStateIndexedEXT");
    tunisGL.tunisEnableClientStateiEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLuint))tunisGLGetProcAddress("glEnableClientStateiEXT");
    tunisGL.tunisEnableDriverControlQCOM = (void (KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glEnableDriverControlQCOM");
    tunisGL.tunisEnableIndexedEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLuint))tunisGLGetProcAddress("glEnableIndexedEXT");
    tunisGL.tunisEnableVariantClientStateEXT = (void (KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glEnableVariantClientStateEXT");
    tunisGL.tunisEnableVertexArrayAttrib = (void (KHRONOS_APIENTRY *)(GLuint, GLuint))tunisGLGetProcAddress("glEnableVertexArrayAttrib");
    tunisGL.tunisEnableVertexArrayAttribEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLuint))tunisGLGetProcAddress("glEnableVertexArrayAttribEXT");
    tunisGL.tunisEnableVertexArrayEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum))tunisGLGetProcAddress("glEnableVertexArrayEXT");
    tunisGL.tunisEnableVertexAttribAPPLE = (void (KHRONOS_APIENTRY *)(GLuint, GLenum))tunisGLGetProcAddress("glEnableVertexAttribAPPLE");
    tunisGL.tunisEnableVertexAttribArray = (void (KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glEnableVertexAttribArray");
    tunisGL.tunisEnableVertexAttribArrayARB = (void (KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glEnableVertexAttribArrayARB");
    tunisGL.tunisEnablei = (void (KHRONOS_APIENTRY *)(GLenum, GLuint))tunisGLGetProcAddress("glEnablei");
    tunisGL.tunisEnableiEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLuint))tunisGLGetProcAddress("glEnableiEXT");
    tunisGL.tunisEnableiNV = (void (KHRONOS_APIENTRY *)(GLenum, GLuint))tunisGLGetProcAddress("glEnableiNV");
    tunisGL.tunisEnableiOES = (void (KHRONOS_APIENTRY *)(GLenum, GLuint))tunisGLGetProcAddress("glEnableiOES");
    tunisGL.tunisEnd = (void (KHRONOS_APIENTRY *)(void))tunisGLGetProcAddress("glEnd");
    tunisGL.tunisEndConditionalRender = (void (KHRONOS_APIENTRY *)(void))tunisGLGetProcAddress("glEndConditionalRender");
    tunisGL.tunisEndConditionalRenderNV = (void (KHRONOS_APIENTRY *)(void))tunisGLGetProcAddress("glEndConditionalRenderNV");
    tunisGL.tunisEndConditionalRenderNVX = (void (KHRONOS_APIENTRY *)(void))tunisGLGetProcAddress("glEndConditionalRenderNVX");
    tunisGL.tunisEndFragmentShaderATI = (void (KHRONOS_APIENTRY *)(void))tunisGLGetProcAddress("glEndFragmentShaderATI");
    tunisGL.tunisEndList = (void (KHRONOS_APIENTRY *)(void))tunisGLGetProcAddress("glEndList");
    tunisGL.tunisEndOcclusionQueryNV = (void (KHRONOS_APIENTRY *)(void))tunisGLGetProcAddress("glEndOcclusionQueryNV");
    tunisGL.tunisEndPerfMonitorAMD = (void (KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glEndPerfMonitorAMD");
    tunisGL.tunisEndPerfQueryINTEL = (void (KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glEndPerfQueryINTEL");
    tunisGL.tunisEndQuery = (void (KHRONOS_APIENTRY *)(GLenum))tunisGLGetProcAddress("glEndQuery");
    tunisGL.tunisEndQueryARB = (void (KHRONOS_APIENTRY *)(GLenum))tunisGLGetProcAddress("glEndQueryARB");
    tunisGL.tunisEndQueryEXT = (void (KHRONOS_APIENTRY *)(GLenum))tunisGLGetProcAddress("glEndQueryEXT");
    tunisGL.tunisEndQueryIndexed = (void (KHRONOS_APIENTRY *)(GLenum, GLuint))tunisGLGetProcAddress("glEndQueryIndexed");
    tunisGL.tunisEndTilingQCOM = (void (KHRONOS_APIENTRY *)(GLbitfield))tunisGLGetProcAddress("glEndTilingQCOM");
    tunisGL.tunisEndTransformFeedback = (void (KHRONOS_APIENTRY *)(void))tunisGLGetProcAddress("glEndTransformFeedback");
    tunisGL.tunisEndTransformFeedbackEXT = (void (KHRONOS_APIENTRY *)(void))tunisGLGetProcAddress("glEndTransformFeedbackEXT");
    tunisGL.tunisEndTransformFeedbackNV = (void (KHRONOS_APIENTRY *)(void))tunisGLGetProcAddress("glEndTransformFeedbackNV");
    tunisGL.tunisEndVertexShaderEXT = (void (KHRONOS_APIENTRY *)(void))tunisGLGetProcAddress("glEndVertexShaderEXT");
    tunisGL.tunisEndVideoCaptureNV = (void (KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glEndVideoCaptureNV");
    tunisGL.tunisEvalCoord1d = (void (KHRONOS_APIENTRY *)(GLdouble))tunisGLGetProcAddress("glEvalCoord1d");
    tunisGL.tunisEvalCoord1dv = (void (KHRONOS_APIENTRY *)(const GLdouble *))tunisGLGetProcAddress("glEvalCoord1dv");
    tunisGL.tunisEvalCoord1f = (void (KHRONOS_APIENTRY *)(GLfloat))tunisGLGetProcAddress("glEvalCoord1f");
    tunisGL.tunisEvalCoord1fv = (void (KHRONOS_APIENTRY *)(const GLfloat *))tunisGLGetProcAddress("glEvalCoord1fv");
    tunisGL.tunisEvalCoord1xOES = (void (KHRONOS_APIENTRY *)(GLfixed))tunisGLGetProcAddress("glEvalCoord1xOES");
    tunisGL.tunisEvalCoord1xvOES = (void (KHRONOS_APIENTRY *)(const GLfixed *))tunisGLGetProcAddress("glEvalCoord1xvOES");
    tunisGL.tunisEvalCoord2d = (void (KHRONOS_APIENTRY *)(GLdouble, GLdouble))tunisGLGetProcAddress("glEvalCoord2d");
    tunisGL.tunisEvalCoord2dv = (void (KHRONOS_APIENTRY *)(const GLdouble *))tunisGLGetProcAddress("glEvalCoord2dv");
    tunisGL.tunisEvalCoord2f = (void (KHRONOS_APIENTRY *)(GLfloat, GLfloat))tunisGLGetProcAddress("glEvalCoord2f");
    tunisGL.tunisEvalCoord2fv = (void (KHRONOS_APIENTRY *)(const GLfloat *))tunisGLGetProcAddress("glEvalCoord2fv");
    tunisGL.tunisEvalCoord2xOES = (void (KHRONOS_APIENTRY *)(GLfixed, GLfixed))tunisGLGetProcAddress("glEvalCoord2xOES");
    tunisGL.tunisEvalCoord2xvOES = (void (KHRONOS_APIENTRY *)(const GLfixed *))tunisGLGetProcAddress("glEvalCoord2xvOES");
    tunisGL.tunisEvalMapsNV = (void (KHRONOS_APIENTRY *)(GLenum, GLenum))tunisGLGetProcAddress("glEvalMapsNV");
    tunisGL.tunisEvalMesh1 = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLint))tunisGLGetProcAddress("glEvalMesh1");
    tunisGL.tunisEvalMesh2 = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLint, GLint, GLint))tunisGLGetProcAddress("glEvalMesh2");
    tunisGL.tunisEvalPoint1 = (void (KHRONOS_APIENTRY *)(GLint))tunisGLGetProcAddress("glEvalPoint1");
    tunisGL.tunisEvalPoint2 = (void (KHRONOS_APIENTRY *)(GLint, GLint))tunisGLGetProcAddress("glEvalPoint2");
    tunisGL.tunisEvaluateDepthValuesARB = (void (KHRONOS_APIENTRY *)(void))tunisGLGetProcAddress("glEvaluateDepthValuesARB");
    tunisGL.tunisExecuteProgramNV = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, const GLfloat *))tunisGLGetProcAddress("glExecuteProgramNV");
    tunisGL.tunisExtGetBufferPointervQCOM = (void (KHRONOS_APIENTRY *)(GLenum, void **))tunisGLGetProcAddress("glExtGetBufferPointervQCOM");
    tunisGL.tunisExtGetBuffersQCOM = (void (KHRONOS_APIENTRY *)(GLuint *, GLint, GLint *))tunisGLGetProcAddress("glExtGetBuffersQCOM");
    tunisGL.tunisExtGetFramebuffersQCOM = (void (KHRONOS_APIENTRY *)(GLuint *, GLint, GLint *))tunisGLGetProcAddress("glExtGetFramebuffersQCOM");
    tunisGL.tunisExtGetProgramBinarySourceQCOM = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLchar *, GLint *))tunisGLGetProcAddress("glExtGetProgramBinarySourceQCOM");
    tunisGL.tunisExtGetProgramsQCOM = (void (KHRONOS_APIENTRY *)(GLuint *, GLint, GLint *))tunisGLGetProcAddress("glExtGetProgramsQCOM");
    tunisGL.tunisExtGetRenderbuffersQCOM = (void (KHRONOS_APIENTRY *)(GLuint *, GLint, GLint *))tunisGLGetProcAddress("glExtGetRenderbuffersQCOM");
    tunisGL.tunisExtGetShadersQCOM = (void (KHRONOS_APIENTRY *)(GLuint *, GLint, GLint *))tunisGLGetProcAddress("glExtGetShadersQCOM");
    tunisGL.tunisExtGetTexLevelParameterivQCOM = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint, GLenum, GLint *))tunisGLGetProcAddress("glExtGetTexLevelParameterivQCOM");
    tunisGL.tunisExtGetTexSubImageQCOM = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, void *))tunisGLGetProcAddress("glExtGetTexSubImageQCOM");
    tunisGL.tunisExtGetTexturesQCOM = (void (KHRONOS_APIENTRY *)(GLuint *, GLint, GLint *))tunisGLGetProcAddress("glExtGetTexturesQCOM");
    tunisGL.tunisExtIsProgramBinaryQCOM = (GLboolean(KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glExtIsProgramBinaryQCOM");
    tunisGL.tunisExtTexObjectStateOverrideiQCOM = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint))tunisGLGetProcAddress("glExtTexObjectStateOverrideiQCOM");
    tunisGL.tunisExtractComponentEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLuint))tunisGLGetProcAddress("glExtractComponentEXT");
    tunisGL.tunisFeedbackBuffer = (void (KHRONOS_APIENTRY *)(GLsizei, GLenum, GLfloat *))tunisGLGetProcAddress("glFeedbackBuffer");
    tunisGL.tunisFeedbackBufferxOES = (void (KHRONOS_APIENTRY *)(GLsizei, GLenum, const GLfixed *))tunisGLGetProcAddress("glFeedbackBufferxOES");
    tunisGL.tunisFenceSync = (GLsync(KHRONOS_APIENTRY *)(GLenum, GLbitfield))tunisGLGetProcAddress("glFenceSync");
    tunisGL.tunisFenceSyncAPPLE = (GLsync(KHRONOS_APIENTRY *)(GLenum, GLbitfield))tunisGLGetProcAddress("glFenceSyncAPPLE");
    tunisGL.tunisFinalCombinerInputNV = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLenum))tunisGLGetProcAddress("glFinalCombinerInputNV");
    tunisGL.tunisFinish = (void (KHRONOS_APIENTRY *)(void))tunisGLGetProcAddress("glFinish");
    tunisGL.tunisFinishAsyncSGIX = (GLint(KHRONOS_APIENTRY *)(GLuint *))tunisGLGetProcAddress("glFinishAsyncSGIX");
    tunisGL.tunisFinishFenceAPPLE = (void (KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glFinishFenceAPPLE");
    tunisGL.tunisFinishFenceNV = (void (KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glFinishFenceNV");
    tunisGL.tunisFinishObjectAPPLE = (void (KHRONOS_APIENTRY *)(GLenum, GLint))tunisGLGetProcAddress("glFinishObjectAPPLE");
    tunisGL.tunisFinishTextureSUNX = (void (KHRONOS_APIENTRY *)(void))tunisGLGetProcAddress("glFinishTextureSUNX");
    tunisGL.tunisFlush = (void (KHRONOS_APIENTRY *)(void))tunisGLGetProcAddress("glFlush");
    tunisGL.tunisFlushMappedBufferRange = (void (KHRONOS_APIENTRY *)(GLenum, GLintptr, GLsizeiptr))tunisGLGetProcAddress("glFlushMappedBufferRange");
    tunisGL.tunisFlushMappedBufferRangeAPPLE = (void (KHRONOS_APIENTRY *)(GLenum, GLintptr, GLsizeiptr))tunisGLGetProcAddress("glFlushMappedBufferRangeAPPLE");
    tunisGL.tunisFlushMappedBufferRangeEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLintptr, GLsizeiptr))tunisGLGetProcAddress("glFlushMappedBufferRangeEXT");
    tunisGL.tunisFlushMappedNamedBufferRange = (void (KHRONOS_APIENTRY *)(GLuint, GLintptr, GLsizeiptr))tunisGLGetProcAddress("glFlushMappedNamedBufferRange");
    tunisGL.tunisFlushMappedNamedBufferRangeEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLintptr, GLsizeiptr))tunisGLGetProcAddress("glFlushMappedNamedBufferRangeEXT");
    tunisGL.tunisFlushPixelDataRangeNV = (void (KHRONOS_APIENTRY *)(GLenum))tunisGLGetProcAddress("glFlushPixelDataRangeNV");
    tunisGL.tunisFlushRasterSGIX = (void (KHRONOS_APIENTRY *)(void))tunisGLGetProcAddress("glFlushRasterSGIX");
    tunisGL.tunisFlushStaticDataIBM = (void (KHRONOS_APIENTRY *)(GLenum))tunisGLGetProcAddress("glFlushStaticDataIBM");
    tunisGL.tunisFlushVertexArrayRangeAPPLE = (void (KHRONOS_APIENTRY *)(GLsizei, void *))tunisGLGetProcAddress("glFlushVertexArrayRangeAPPLE");
    tunisGL.tunisFlushVertexArrayRangeNV = (void (KHRONOS_APIENTRY *)(void))tunisGLGetProcAddress("glFlushVertexArrayRangeNV");
    tunisGL.tunisFogCoordFormatNV = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei))tunisGLGetProcAddress("glFogCoordFormatNV");
    tunisGL.tunisFogCoordPointer = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, const void *))tunisGLGetProcAddress("glFogCoordPointer");
    tunisGL.tunisFogCoordPointerEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, const void *))tunisGLGetProcAddress("glFogCoordPointerEXT");
    tunisGL.tunisFogCoordPointerListIBM = (void (KHRONOS_APIENTRY *)(GLenum, GLint, const void **, GLint))tunisGLGetProcAddress("glFogCoordPointerListIBM");
    tunisGL.tunisFogCoordd = (void (KHRONOS_APIENTRY *)(GLdouble))tunisGLGetProcAddress("glFogCoordd");
    tunisGL.tunisFogCoorddEXT = (void (KHRONOS_APIENTRY *)(GLdouble))tunisGLGetProcAddress("glFogCoorddEXT");
    tunisGL.tunisFogCoorddv = (void (KHRONOS_APIENTRY *)(const GLdouble *))tunisGLGetProcAddress("glFogCoorddv");
    tunisGL.tunisFogCoorddvEXT = (void (KHRONOS_APIENTRY *)(const GLdouble *))tunisGLGetProcAddress("glFogCoorddvEXT");
    tunisGL.tunisFogCoordf = (void (KHRONOS_APIENTRY *)(GLfloat))tunisGLGetProcAddress("glFogCoordf");
    tunisGL.tunisFogCoordfEXT = (void (KHRONOS_APIENTRY *)(GLfloat))tunisGLGetProcAddress("glFogCoordfEXT");
    tunisGL.tunisFogCoordfv = (void (KHRONOS_APIENTRY *)(const GLfloat *))tunisGLGetProcAddress("glFogCoordfv");
    tunisGL.tunisFogCoordfvEXT = (void (KHRONOS_APIENTRY *)(const GLfloat *))tunisGLGetProcAddress("glFogCoordfvEXT");
    tunisGL.tunisFogCoordhNV = (void (KHRONOS_APIENTRY *)(GLhalfNV))tunisGLGetProcAddress("glFogCoordhNV");
    tunisGL.tunisFogCoordhvNV = (void (KHRONOS_APIENTRY *)(const GLhalfNV *))tunisGLGetProcAddress("glFogCoordhvNV");
    tunisGL.tunisFogFuncSGIS = (void (KHRONOS_APIENTRY *)(GLsizei, const GLfloat *))tunisGLGetProcAddress("glFogFuncSGIS");
    tunisGL.tunisFogf = (void (KHRONOS_APIENTRY *)(GLenum, GLfloat))tunisGLGetProcAddress("glFogf");
    tunisGL.tunisFogfv = (void (KHRONOS_APIENTRY *)(GLenum, const GLfloat *))tunisGLGetProcAddress("glFogfv");
    tunisGL.tunisFogi = (void (KHRONOS_APIENTRY *)(GLenum, GLint))tunisGLGetProcAddress("glFogi");
    tunisGL.tunisFogiv = (void (KHRONOS_APIENTRY *)(GLenum, const GLint *))tunisGLGetProcAddress("glFogiv");
    tunisGL.tunisFogx = (void (KHRONOS_APIENTRY *)(GLenum, GLfixed))tunisGLGetProcAddress("glFogx");
    tunisGL.tunisFogxOES = (void (KHRONOS_APIENTRY *)(GLenum, GLfixed))tunisGLGetProcAddress("glFogxOES");
    tunisGL.tunisFogxv = (void (KHRONOS_APIENTRY *)(GLenum, const GLfixed *))tunisGLGetProcAddress("glFogxv");
    tunisGL.tunisFogxvOES = (void (KHRONOS_APIENTRY *)(GLenum, const GLfixed *))tunisGLGetProcAddress("glFogxvOES");
    tunisGL.tunisFragmentColorMaterialSGIX = (void (KHRONOS_APIENTRY *)(GLenum, GLenum))tunisGLGetProcAddress("glFragmentColorMaterialSGIX");
    tunisGL.tunisFragmentCoverageColorNV = (void (KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glFragmentCoverageColorNV");
    tunisGL.tunisFragmentLightModelfSGIX = (void (KHRONOS_APIENTRY *)(GLenum, GLfloat))tunisGLGetProcAddress("glFragmentLightModelfSGIX");
    tunisGL.tunisFragmentLightModelfvSGIX = (void (KHRONOS_APIENTRY *)(GLenum, const GLfloat *))tunisGLGetProcAddress("glFragmentLightModelfvSGIX");
    tunisGL.tunisFragmentLightModeliSGIX = (void (KHRONOS_APIENTRY *)(GLenum, GLint))tunisGLGetProcAddress("glFragmentLightModeliSGIX");
    tunisGL.tunisFragmentLightModelivSGIX = (void (KHRONOS_APIENTRY *)(GLenum, const GLint *))tunisGLGetProcAddress("glFragmentLightModelivSGIX");
    tunisGL.tunisFragmentLightfSGIX = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfloat))tunisGLGetProcAddress("glFragmentLightfSGIX");
    tunisGL.tunisFragmentLightfvSGIX = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const GLfloat *))tunisGLGetProcAddress("glFragmentLightfvSGIX");
    tunisGL.tunisFragmentLightiSGIX = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint))tunisGLGetProcAddress("glFragmentLightiSGIX");
    tunisGL.tunisFragmentLightivSGIX = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const GLint *))tunisGLGetProcAddress("glFragmentLightivSGIX");
    tunisGL.tunisFragmentMaterialfSGIX = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfloat))tunisGLGetProcAddress("glFragmentMaterialfSGIX");
    tunisGL.tunisFragmentMaterialfvSGIX = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const GLfloat *))tunisGLGetProcAddress("glFragmentMaterialfvSGIX");
    tunisGL.tunisFragmentMaterialiSGIX = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint))tunisGLGetProcAddress("glFragmentMaterialiSGIX");
    tunisGL.tunisFragmentMaterialivSGIX = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const GLint *))tunisGLGetProcAddress("glFragmentMaterialivSGIX");
    tunisGL.tunisFrameTerminatorGREMEDY = (void (KHRONOS_APIENTRY *)(void))tunisGLGetProcAddress("glFrameTerminatorGREMEDY");
    tunisGL.tunisFrameZoomSGIX = (void (KHRONOS_APIENTRY *)(GLint))tunisGLGetProcAddress("glFrameZoomSGIX");
    tunisGL.tunisFramebufferDrawBufferEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum))tunisGLGetProcAddress("glFramebufferDrawBufferEXT");
    tunisGL.tunisFramebufferDrawBuffersEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, const GLenum *))tunisGLGetProcAddress("glFramebufferDrawBuffersEXT");
    tunisGL.tunisFramebufferFetchBarrierEXT = (void (KHRONOS_APIENTRY *)(void))tunisGLGetProcAddress("glFramebufferFetchBarrierEXT");
    tunisGL.tunisFramebufferFetchBarrierQCOM = (void (KHRONOS_APIENTRY *)(void))tunisGLGetProcAddress("glFramebufferFetchBarrierQCOM");
    tunisGL.tunisFramebufferFoveationConfigQCOM = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLuint, GLuint, GLuint *))tunisGLGetProcAddress("glFramebufferFoveationConfigQCOM");
    tunisGL.tunisFramebufferFoveationParametersQCOM = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glFramebufferFoveationParametersQCOM");
    tunisGL.tunisFramebufferParameteri = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint))tunisGLGetProcAddress("glFramebufferParameteri");
    tunisGL.tunisFramebufferPixelLocalStorageSizeEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei))tunisGLGetProcAddress("glFramebufferPixelLocalStorageSizeEXT");
    tunisGL.tunisFramebufferReadBufferEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum))tunisGLGetProcAddress("glFramebufferReadBufferEXT");
    tunisGL.tunisFramebufferRenderbuffer = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLuint))tunisGLGetProcAddress("glFramebufferRenderbuffer");
    tunisGL.tunisFramebufferRenderbufferEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLuint))tunisGLGetProcAddress("glFramebufferRenderbufferEXT");
    tunisGL.tunisFramebufferRenderbufferOES = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLuint))tunisGLGetProcAddress("glFramebufferRenderbufferOES");
    tunisGL.tunisFramebufferSampleLocationsfvARB = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLsizei, const GLfloat *))tunisGLGetProcAddress("glFramebufferSampleLocationsfvARB");
    tunisGL.tunisFramebufferSampleLocationsfvNV = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLsizei, const GLfloat *))tunisGLGetProcAddress("glFramebufferSampleLocationsfvNV");
    tunisGL.tunisFramebufferSamplePositionsfvAMD = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLuint, const GLfloat *))tunisGLGetProcAddress("glFramebufferSamplePositionsfvAMD");
    tunisGL.tunisFramebufferTexture = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLuint, GLint))tunisGLGetProcAddress("glFramebufferTexture");
    tunisGL.tunisFramebufferTexture1D = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLuint, GLint))tunisGLGetProcAddress("glFramebufferTexture1D");
    tunisGL.tunisFramebufferTexture1DEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLuint, GLint))tunisGLGetProcAddress("glFramebufferTexture1DEXT");
    tunisGL.tunisFramebufferTexture2D = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLuint, GLint))tunisGLGetProcAddress("glFramebufferTexture2D");
    tunisGL.tunisFramebufferTexture2DDownsampleIMG = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLuint, GLint, GLint, GLint))tunisGLGetProcAddress("glFramebufferTexture2DDownsampleIMG");
    tunisGL.tunisFramebufferTexture2DEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLuint, GLint))tunisGLGetProcAddress("glFramebufferTexture2DEXT");
    tunisGL.tunisFramebufferTexture2DMultisampleEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLuint, GLint, GLsizei))tunisGLGetProcAddress("glFramebufferTexture2DMultisampleEXT");
    tunisGL.tunisFramebufferTexture2DMultisampleIMG = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLuint, GLint, GLsizei))tunisGLGetProcAddress("glFramebufferTexture2DMultisampleIMG");
    tunisGL.tunisFramebufferTexture2DOES = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLuint, GLint))tunisGLGetProcAddress("glFramebufferTexture2DOES");
    tunisGL.tunisFramebufferTexture3D = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLuint, GLint, GLint))tunisGLGetProcAddress("glFramebufferTexture3D");
    tunisGL.tunisFramebufferTexture3DEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLuint, GLint, GLint))tunisGLGetProcAddress("glFramebufferTexture3DEXT");
    tunisGL.tunisFramebufferTexture3DOES = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLuint, GLint, GLint))tunisGLGetProcAddress("glFramebufferTexture3DOES");
    tunisGL.tunisFramebufferTextureARB = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLuint, GLint))tunisGLGetProcAddress("glFramebufferTextureARB");
    tunisGL.tunisFramebufferTextureEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLuint, GLint))tunisGLGetProcAddress("glFramebufferTextureEXT");
    tunisGL.tunisFramebufferTextureFaceARB = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLuint, GLint, GLenum))tunisGLGetProcAddress("glFramebufferTextureFaceARB");
    tunisGL.tunisFramebufferTextureFaceEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLuint, GLint, GLenum))tunisGLGetProcAddress("glFramebufferTextureFaceEXT");
    tunisGL.tunisFramebufferTextureLayer = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLuint, GLint, GLint))tunisGLGetProcAddress("glFramebufferTextureLayer");
    tunisGL.tunisFramebufferTextureLayerARB = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLuint, GLint, GLint))tunisGLGetProcAddress("glFramebufferTextureLayerARB");
    tunisGL.tunisFramebufferTextureLayerDownsampleIMG = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLuint, GLint, GLint, GLint, GLint))tunisGLGetProcAddress("glFramebufferTextureLayerDownsampleIMG");
    tunisGL.tunisFramebufferTextureLayerEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLuint, GLint, GLint))tunisGLGetProcAddress("glFramebufferTextureLayerEXT");
    tunisGL.tunisFramebufferTextureMultisampleMultiviewOVR = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLuint, GLint, GLsizei, GLint, GLsizei))tunisGLGetProcAddress("glFramebufferTextureMultisampleMultiviewOVR");
    tunisGL.tunisFramebufferTextureMultiviewOVR = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLuint, GLint, GLint, GLsizei))tunisGLGetProcAddress("glFramebufferTextureMultiviewOVR");
    tunisGL.tunisFramebufferTextureOES = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLuint, GLint))tunisGLGetProcAddress("glFramebufferTextureOES");
    tunisGL.tunisFreeObjectBufferATI = (void (KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glFreeObjectBufferATI");
    tunisGL.tunisFrontFace = (void (KHRONOS_APIENTRY *)(GLenum))tunisGLGetProcAddress("glFrontFace");
    tunisGL.tunisFrustum = (void (KHRONOS_APIENTRY *)(GLdouble, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble))tunisGLGetProcAddress("glFrustum");
    tunisGL.tunisFrustumf = (void (KHRONOS_APIENTRY *)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glFrustumf");
    tunisGL.tunisFrustumfOES = (void (KHRONOS_APIENTRY *)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glFrustumfOES");
    tunisGL.tunisFrustumx = (void (KHRONOS_APIENTRY *)(GLfixed, GLfixed, GLfixed, GLfixed, GLfixed, GLfixed))tunisGLGetProcAddress("glFrustumx");
    tunisGL.tunisFrustumxOES = (void (KHRONOS_APIENTRY *)(GLfixed, GLfixed, GLfixed, GLfixed, GLfixed, GLfixed))tunisGLGetProcAddress("glFrustumxOES");
    tunisGL.tunisGenAsyncMarkersSGIX = (GLuint(KHRONOS_APIENTRY *)(GLsizei))tunisGLGetProcAddress("glGenAsyncMarkersSGIX");
    tunisGL.tunisGenBuffers = (void (KHRONOS_APIENTRY *)(GLsizei, GLuint *))tunisGLGetProcAddress("glGenBuffers");
    tunisGL.tunisGenBuffersARB = (void (KHRONOS_APIENTRY *)(GLsizei, GLuint *))tunisGLGetProcAddress("glGenBuffersARB");
    tunisGL.tunisGenFencesAPPLE = (void (KHRONOS_APIENTRY *)(GLsizei, GLuint *))tunisGLGetProcAddress("glGenFencesAPPLE");
    tunisGL.tunisGenFencesNV = (void (KHRONOS_APIENTRY *)(GLsizei, GLuint *))tunisGLGetProcAddress("glGenFencesNV");
    tunisGL.tunisGenFragmentShadersATI = (GLuint(KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glGenFragmentShadersATI");
    tunisGL.tunisGenFramebuffers = (void (KHRONOS_APIENTRY *)(GLsizei, GLuint *))tunisGLGetProcAddress("glGenFramebuffers");
    tunisGL.tunisGenFramebuffersEXT = (void (KHRONOS_APIENTRY *)(GLsizei, GLuint *))tunisGLGetProcAddress("glGenFramebuffersEXT");
    tunisGL.tunisGenFramebuffersOES = (void (KHRONOS_APIENTRY *)(GLsizei, GLuint *))tunisGLGetProcAddress("glGenFramebuffersOES");
    tunisGL.tunisGenLists = (GLuint(KHRONOS_APIENTRY *)(GLsizei))tunisGLGetProcAddress("glGenLists");
    tunisGL.tunisGenNamesAMD = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLuint *))tunisGLGetProcAddress("glGenNamesAMD");
    tunisGL.tunisGenOcclusionQueriesNV = (void (KHRONOS_APIENTRY *)(GLsizei, GLuint *))tunisGLGetProcAddress("glGenOcclusionQueriesNV");
    tunisGL.tunisGenPathsNV = (GLuint(KHRONOS_APIENTRY *)(GLsizei))tunisGLGetProcAddress("glGenPathsNV");
    tunisGL.tunisGenPerfMonitorsAMD = (void (KHRONOS_APIENTRY *)(GLsizei, GLuint *))tunisGLGetProcAddress("glGenPerfMonitorsAMD");
    tunisGL.tunisGenProgramPipelines = (void (KHRONOS_APIENTRY *)(GLsizei, GLuint *))tunisGLGetProcAddress("glGenProgramPipelines");
    tunisGL.tunisGenProgramPipelinesEXT = (void (KHRONOS_APIENTRY *)(GLsizei, GLuint *))tunisGLGetProcAddress("glGenProgramPipelinesEXT");
    tunisGL.tunisGenProgramsARB = (void (KHRONOS_APIENTRY *)(GLsizei, GLuint *))tunisGLGetProcAddress("glGenProgramsARB");
    tunisGL.tunisGenProgramsNV = (void (KHRONOS_APIENTRY *)(GLsizei, GLuint *))tunisGLGetProcAddress("glGenProgramsNV");
    tunisGL.tunisGenQueries = (void (KHRONOS_APIENTRY *)(GLsizei, GLuint *))tunisGLGetProcAddress("glGenQueries");
    tunisGL.tunisGenQueriesARB = (void (KHRONOS_APIENTRY *)(GLsizei, GLuint *))tunisGLGetProcAddress("glGenQueriesARB");
    tunisGL.tunisGenQueriesEXT = (void (KHRONOS_APIENTRY *)(GLsizei, GLuint *))tunisGLGetProcAddress("glGenQueriesEXT");
    tunisGL.tunisGenQueryResourceTagNV = (void (KHRONOS_APIENTRY *)(GLsizei, GLint *))tunisGLGetProcAddress("glGenQueryResourceTagNV");
    tunisGL.tunisGenRenderbuffers = (void (KHRONOS_APIENTRY *)(GLsizei, GLuint *))tunisGLGetProcAddress("glGenRenderbuffers");
    tunisGL.tunisGenRenderbuffersEXT = (void (KHRONOS_APIENTRY *)(GLsizei, GLuint *))tunisGLGetProcAddress("glGenRenderbuffersEXT");
    tunisGL.tunisGenRenderbuffersOES = (void (KHRONOS_APIENTRY *)(GLsizei, GLuint *))tunisGLGetProcAddress("glGenRenderbuffersOES");
    tunisGL.tunisGenSamplers = (void (KHRONOS_APIENTRY *)(GLsizei, GLuint *))tunisGLGetProcAddress("glGenSamplers");
    tunisGL.tunisGenSemaphoresEXT = (void (KHRONOS_APIENTRY *)(GLsizei, GLuint *))tunisGLGetProcAddress("glGenSemaphoresEXT");
    tunisGL.tunisGenSymbolsEXT = (GLuint(KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLuint))tunisGLGetProcAddress("glGenSymbolsEXT");
    tunisGL.tunisGenTextures = (void (KHRONOS_APIENTRY *)(GLsizei, GLuint *))tunisGLGetProcAddress("glGenTextures");
    tunisGL.tunisGenTexturesEXT = (void (KHRONOS_APIENTRY *)(GLsizei, GLuint *))tunisGLGetProcAddress("glGenTexturesEXT");
    tunisGL.tunisGenTransformFeedbacks = (void (KHRONOS_APIENTRY *)(GLsizei, GLuint *))tunisGLGetProcAddress("glGenTransformFeedbacks");
    tunisGL.tunisGenTransformFeedbacksNV = (void (KHRONOS_APIENTRY *)(GLsizei, GLuint *))tunisGLGetProcAddress("glGenTransformFeedbacksNV");
    tunisGL.tunisGenVertexArrays = (void (KHRONOS_APIENTRY *)(GLsizei, GLuint *))tunisGLGetProcAddress("glGenVertexArrays");
    tunisGL.tunisGenVertexArraysAPPLE = (void (KHRONOS_APIENTRY *)(GLsizei, GLuint *))tunisGLGetProcAddress("glGenVertexArraysAPPLE");
    tunisGL.tunisGenVertexArraysOES = (void (KHRONOS_APIENTRY *)(GLsizei, GLuint *))tunisGLGetProcAddress("glGenVertexArraysOES");
    tunisGL.tunisGenVertexShadersEXT = (GLuint(KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glGenVertexShadersEXT");
    tunisGL.tunisGenerateMipmap = (void (KHRONOS_APIENTRY *)(GLenum))tunisGLGetProcAddress("glGenerateMipmap");
    tunisGL.tunisGenerateMipmapEXT = (void (KHRONOS_APIENTRY *)(GLenum))tunisGLGetProcAddress("glGenerateMipmapEXT");
    tunisGL.tunisGenerateMipmapOES = (void (KHRONOS_APIENTRY *)(GLenum))tunisGLGetProcAddress("glGenerateMipmapOES");
    tunisGL.tunisGenerateMultiTexMipmapEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum))tunisGLGetProcAddress("glGenerateMultiTexMipmapEXT");
    tunisGL.tunisGenerateTextureMipmap = (void (KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glGenerateTextureMipmap");
    tunisGL.tunisGenerateTextureMipmapEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum))tunisGLGetProcAddress("glGenerateTextureMipmapEXT");
    tunisGL.tunisGetActiveAtomicCounterBufferiv = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLenum, GLint *))tunisGLGetProcAddress("glGetActiveAtomicCounterBufferiv");
    tunisGL.tunisGetActiveAttrib = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLsizei, GLsizei *, GLint *, GLenum *, GLchar *))tunisGLGetProcAddress("glGetActiveAttrib");
    tunisGL.tunisGetActiveAttribARB = (void (KHRONOS_APIENTRY *)(GLhandleARB, GLuint, GLsizei, GLsizei *, GLint *, GLenum *, GLcharARB *))tunisGLGetProcAddress("glGetActiveAttribARB");
    tunisGL.tunisGetActiveSubroutineName = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLuint, GLsizei, GLsizei *, GLchar *))tunisGLGetProcAddress("glGetActiveSubroutineName");
    tunisGL.tunisGetActiveSubroutineUniformName = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLuint, GLsizei, GLsizei *, GLchar *))tunisGLGetProcAddress("glGetActiveSubroutineUniformName");
    tunisGL.tunisGetActiveSubroutineUniformiv = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLuint, GLenum, GLint *))tunisGLGetProcAddress("glGetActiveSubroutineUniformiv");
    tunisGL.tunisGetActiveUniform = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLsizei, GLsizei *, GLint *, GLenum *, GLchar *))tunisGLGetProcAddress("glGetActiveUniform");
    tunisGL.tunisGetActiveUniformARB = (void (KHRONOS_APIENTRY *)(GLhandleARB, GLuint, GLsizei, GLsizei *, GLint *, GLenum *, GLcharARB *))tunisGLGetProcAddress("glGetActiveUniformARB");
    tunisGL.tunisGetActiveUniformBlockName = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLsizei, GLsizei *, GLchar *))tunisGLGetProcAddress("glGetActiveUniformBlockName");
    tunisGL.tunisGetActiveUniformBlockiv = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLenum, GLint *))tunisGLGetProcAddress("glGetActiveUniformBlockiv");
    tunisGL.tunisGetActiveUniformName = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLsizei, GLsizei *, GLchar *))tunisGLGetProcAddress("glGetActiveUniformName");
    tunisGL.tunisGetActiveUniformsiv = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, const GLuint *, GLenum, GLint *))tunisGLGetProcAddress("glGetActiveUniformsiv");
    tunisGL.tunisGetActiveVaryingNV = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLsizei, GLsizei *, GLsizei *, GLenum *, GLchar *))tunisGLGetProcAddress("glGetActiveVaryingNV");
    tunisGL.tunisGetArrayObjectfvATI = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfloat *))tunisGLGetProcAddress("glGetArrayObjectfvATI");
    tunisGL.tunisGetArrayObjectivATI = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint *))tunisGLGetProcAddress("glGetArrayObjectivATI");
    tunisGL.tunisGetAttachedObjectsARB = (void (KHRONOS_APIENTRY *)(GLhandleARB, GLsizei, GLsizei *, GLhandleARB *))tunisGLGetProcAddress("glGetAttachedObjectsARB");
    tunisGL.tunisGetAttachedShaders = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, GLsizei *, GLuint *))tunisGLGetProcAddress("glGetAttachedShaders");
    tunisGL.tunisGetAttribLocation = (GLint(KHRONOS_APIENTRY *)(GLuint, const GLchar *))tunisGLGetProcAddress("glGetAttribLocation");
    tunisGL.tunisGetAttribLocationARB = (GLint(KHRONOS_APIENTRY *)(GLhandleARB, const GLcharARB *))tunisGLGetProcAddress("glGetAttribLocationARB");
    tunisGL.tunisGetBooleanIndexedvEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLboolean *))tunisGLGetProcAddress("glGetBooleanIndexedvEXT");
    tunisGL.tunisGetBooleani_v = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLboolean *))tunisGLGetProcAddress("glGetBooleani_v");
    tunisGL.tunisGetBooleanv = (void (KHRONOS_APIENTRY *)(GLenum, GLboolean *))tunisGLGetProcAddress("glGetBooleanv");
    tunisGL.tunisGetBufferParameteri64v = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint64 *))tunisGLGetProcAddress("glGetBufferParameteri64v");
    tunisGL.tunisGetBufferParameteriv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint *))tunisGLGetProcAddress("glGetBufferParameteriv");
    tunisGL.tunisGetBufferParameterivARB = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint *))tunisGLGetProcAddress("glGetBufferParameterivARB");
    tunisGL.tunisGetBufferParameterui64vNV = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLuint64EXT *))tunisGLGetProcAddress("glGetBufferParameterui64vNV");
    tunisGL.tunisGetBufferPointerv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, void **))tunisGLGetProcAddress("glGetBufferPointerv");
    tunisGL.tunisGetBufferPointervARB = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, void **))tunisGLGetProcAddress("glGetBufferPointervARB");
    tunisGL.tunisGetBufferPointervOES = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, void **))tunisGLGetProcAddress("glGetBufferPointervOES");
    tunisGL.tunisGetBufferSubData = (void (KHRONOS_APIENTRY *)(GLenum, GLintptr, GLsizeiptr, void *))tunisGLGetProcAddress("glGetBufferSubData");
    tunisGL.tunisGetBufferSubDataARB = (void (KHRONOS_APIENTRY *)(GLenum, GLintptrARB, GLsizeiptrARB, void *))tunisGLGetProcAddress("glGetBufferSubDataARB");
    tunisGL.tunisGetClipPlane = (void (KHRONOS_APIENTRY *)(GLenum, GLdouble *))tunisGLGetProcAddress("glGetClipPlane");
    tunisGL.tunisGetClipPlanef = (void (KHRONOS_APIENTRY *)(GLenum, GLfloat *))tunisGLGetProcAddress("glGetClipPlanef");
    tunisGL.tunisGetClipPlanefOES = (void (KHRONOS_APIENTRY *)(GLenum, GLfloat *))tunisGLGetProcAddress("glGetClipPlanefOES");
    tunisGL.tunisGetClipPlanex = (void (KHRONOS_APIENTRY *)(GLenum, GLfixed *))tunisGLGetProcAddress("glGetClipPlanex");
    tunisGL.tunisGetClipPlanexOES = (void (KHRONOS_APIENTRY *)(GLenum, GLfixed *))tunisGLGetProcAddress("glGetClipPlanexOES");
    tunisGL.tunisGetColorTable = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, void *))tunisGLGetProcAddress("glGetColorTable");
    tunisGL.tunisGetColorTableEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, void *))tunisGLGetProcAddress("glGetColorTableEXT");
    tunisGL.tunisGetColorTableParameterfv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfloat *))tunisGLGetProcAddress("glGetColorTableParameterfv");
    tunisGL.tunisGetColorTableParameterfvEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfloat *))tunisGLGetProcAddress("glGetColorTableParameterfvEXT");
    tunisGL.tunisGetColorTableParameterfvSGI = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfloat *))tunisGLGetProcAddress("glGetColorTableParameterfvSGI");
    tunisGL.tunisGetColorTableParameteriv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint *))tunisGLGetProcAddress("glGetColorTableParameteriv");
    tunisGL.tunisGetColorTableParameterivEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint *))tunisGLGetProcAddress("glGetColorTableParameterivEXT");
    tunisGL.tunisGetColorTableParameterivSGI = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint *))tunisGLGetProcAddress("glGetColorTableParameterivSGI");
    tunisGL.tunisGetColorTableSGI = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, void *))tunisGLGetProcAddress("glGetColorTableSGI");
    tunisGL.tunisGetCombinerInputParameterfvNV = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLenum, GLfloat *))tunisGLGetProcAddress("glGetCombinerInputParameterfvNV");
    tunisGL.tunisGetCombinerInputParameterivNV = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLenum, GLint *))tunisGLGetProcAddress("glGetCombinerInputParameterivNV");
    tunisGL.tunisGetCombinerOutputParameterfvNV = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLfloat *))tunisGLGetProcAddress("glGetCombinerOutputParameterfvNV");
    tunisGL.tunisGetCombinerOutputParameterivNV = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLint *))tunisGLGetProcAddress("glGetCombinerOutputParameterivNV");
    tunisGL.tunisGetCombinerStageParameterfvNV = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfloat *))tunisGLGetProcAddress("glGetCombinerStageParameterfvNV");
    tunisGL.tunisGetCommandHeaderNV = (GLuint(KHRONOS_APIENTRY *)(GLenum, GLuint))tunisGLGetProcAddress("glGetCommandHeaderNV");
    tunisGL.tunisGetCompressedMultiTexImageEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint, void *))tunisGLGetProcAddress("glGetCompressedMultiTexImageEXT");
    tunisGL.tunisGetCompressedTexImage = (void (KHRONOS_APIENTRY *)(GLenum, GLint, void *))tunisGLGetProcAddress("glGetCompressedTexImage");
    tunisGL.tunisGetCompressedTexImageARB = (void (KHRONOS_APIENTRY *)(GLenum, GLint, void *))tunisGLGetProcAddress("glGetCompressedTexImageARB");
    tunisGL.tunisGetCompressedTextureImage = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, void *))tunisGLGetProcAddress("glGetCompressedTextureImage");
    tunisGL.tunisGetCompressedTextureImageEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint, void *))tunisGLGetProcAddress("glGetCompressedTextureImageEXT");
    tunisGL.tunisGetCompressedTextureSubImage = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLsizei, void *))tunisGLGetProcAddress("glGetCompressedTextureSubImage");
    tunisGL.tunisGetConvolutionFilter = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, void *))tunisGLGetProcAddress("glGetConvolutionFilter");
    tunisGL.tunisGetConvolutionFilterEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, void *))tunisGLGetProcAddress("glGetConvolutionFilterEXT");
    tunisGL.tunisGetConvolutionParameterfv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfloat *))tunisGLGetProcAddress("glGetConvolutionParameterfv");
    tunisGL.tunisGetConvolutionParameterfvEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfloat *))tunisGLGetProcAddress("glGetConvolutionParameterfvEXT");
    tunisGL.tunisGetConvolutionParameteriv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint *))tunisGLGetProcAddress("glGetConvolutionParameteriv");
    tunisGL.tunisGetConvolutionParameterivEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint *))tunisGLGetProcAddress("glGetConvolutionParameterivEXT");
    tunisGL.tunisGetConvolutionParameterxvOES = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfixed *))tunisGLGetProcAddress("glGetConvolutionParameterxvOES");
    tunisGL.tunisGetCoverageModulationTableNV = (void (KHRONOS_APIENTRY *)(GLsizei, GLfloat *))tunisGLGetProcAddress("glGetCoverageModulationTableNV");
    tunisGL.tunisGetDebugMessageLog = (GLuint(KHRONOS_APIENTRY *)(GLuint, GLsizei, GLenum *, GLenum *, GLuint *, GLenum *, GLsizei *, GLchar *))tunisGLGetProcAddress("glGetDebugMessageLog");
    tunisGL.tunisGetDebugMessageLogAMD = (GLuint(KHRONOS_APIENTRY *)(GLuint, GLsizei, GLenum *, GLuint *, GLuint *, GLsizei *, GLchar *))tunisGLGetProcAddress("glGetDebugMessageLogAMD");
    tunisGL.tunisGetDebugMessageLogARB = (GLuint(KHRONOS_APIENTRY *)(GLuint, GLsizei, GLenum *, GLenum *, GLuint *, GLenum *, GLsizei *, GLchar *))tunisGLGetProcAddress("glGetDebugMessageLogARB");
    tunisGL.tunisGetDebugMessageLogKHR = (GLuint(KHRONOS_APIENTRY *)(GLuint, GLsizei, GLenum *, GLenum *, GLuint *, GLenum *, GLsizei *, GLchar *))tunisGLGetProcAddress("glGetDebugMessageLogKHR");
    tunisGL.tunisGetDetailTexFuncSGIS = (void (KHRONOS_APIENTRY *)(GLenum, GLfloat *))tunisGLGetProcAddress("glGetDetailTexFuncSGIS");
    tunisGL.tunisGetDoubleIndexedvEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLdouble *))tunisGLGetProcAddress("glGetDoubleIndexedvEXT");
    tunisGL.tunisGetDoublei_v = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLdouble *))tunisGLGetProcAddress("glGetDoublei_v");
    tunisGL.tunisGetDoublei_vEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLdouble *))tunisGLGetProcAddress("glGetDoublei_vEXT");
    tunisGL.tunisGetDoublev = (void (KHRONOS_APIENTRY *)(GLenum, GLdouble *))tunisGLGetProcAddress("glGetDoublev");
    tunisGL.tunisGetDriverControlStringQCOM = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, GLsizei *, GLchar *))tunisGLGetProcAddress("glGetDriverControlStringQCOM");
    tunisGL.tunisGetDriverControlsQCOM = (void (KHRONOS_APIENTRY *)(GLint *, GLsizei, GLuint *))tunisGLGetProcAddress("glGetDriverControlsQCOM");
    tunisGL.tunisGetError = (GLenum(KHRONOS_APIENTRY *)(void))tunisGLGetProcAddress("glGetError");
    tunisGL.tunisGetFenceivNV = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint *))tunisGLGetProcAddress("glGetFenceivNV");
    tunisGL.tunisGetFinalCombinerInputParameterfvNV = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfloat *))tunisGLGetProcAddress("glGetFinalCombinerInputParameterfvNV");
    tunisGL.tunisGetFinalCombinerInputParameterivNV = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint *))tunisGLGetProcAddress("glGetFinalCombinerInputParameterivNV");
    tunisGL.tunisGetFirstPerfQueryIdINTEL = (void (KHRONOS_APIENTRY *)(GLuint *))tunisGLGetProcAddress("glGetFirstPerfQueryIdINTEL");
    tunisGL.tunisGetFixedv = (void (KHRONOS_APIENTRY *)(GLenum, GLfixed *))tunisGLGetProcAddress("glGetFixedv");
    tunisGL.tunisGetFixedvOES = (void (KHRONOS_APIENTRY *)(GLenum, GLfixed *))tunisGLGetProcAddress("glGetFixedvOES");
    tunisGL.tunisGetFloatIndexedvEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLfloat *))tunisGLGetProcAddress("glGetFloatIndexedvEXT");
    tunisGL.tunisGetFloati_v = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLfloat *))tunisGLGetProcAddress("glGetFloati_v");
    tunisGL.tunisGetFloati_vEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLfloat *))tunisGLGetProcAddress("glGetFloati_vEXT");
    tunisGL.tunisGetFloati_vNV = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLfloat *))tunisGLGetProcAddress("glGetFloati_vNV");
    tunisGL.tunisGetFloati_vOES = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLfloat *))tunisGLGetProcAddress("glGetFloati_vOES");
    tunisGL.tunisGetFloatv = (void (KHRONOS_APIENTRY *)(GLenum, GLfloat *))tunisGLGetProcAddress("glGetFloatv");
    tunisGL.tunisGetFogFuncSGIS = (void (KHRONOS_APIENTRY *)(GLfloat *))tunisGLGetProcAddress("glGetFogFuncSGIS");
    tunisGL.tunisGetFragDataIndex = (GLint(KHRONOS_APIENTRY *)(GLuint, const GLchar *))tunisGLGetProcAddress("glGetFragDataIndex");
    tunisGL.tunisGetFragDataIndexEXT = (GLint(KHRONOS_APIENTRY *)(GLuint, const GLchar *))tunisGLGetProcAddress("glGetFragDataIndexEXT");
    tunisGL.tunisGetFragDataLocation = (GLint(KHRONOS_APIENTRY *)(GLuint, const GLchar *))tunisGLGetProcAddress("glGetFragDataLocation");
    tunisGL.tunisGetFragDataLocationEXT = (GLint(KHRONOS_APIENTRY *)(GLuint, const GLchar *))tunisGLGetProcAddress("glGetFragDataLocationEXT");
    tunisGL.tunisGetFragmentLightfvSGIX = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfloat *))tunisGLGetProcAddress("glGetFragmentLightfvSGIX");
    tunisGL.tunisGetFragmentLightivSGIX = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint *))tunisGLGetProcAddress("glGetFragmentLightivSGIX");
    tunisGL.tunisGetFragmentMaterialfvSGIX = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfloat *))tunisGLGetProcAddress("glGetFragmentMaterialfvSGIX");
    tunisGL.tunisGetFragmentMaterialivSGIX = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint *))tunisGLGetProcAddress("glGetFragmentMaterialivSGIX");
    tunisGL.tunisGetFramebufferAttachmentParameteriv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLint *))tunisGLGetProcAddress("glGetFramebufferAttachmentParameteriv");
    tunisGL.tunisGetFramebufferAttachmentParameterivEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLint *))tunisGLGetProcAddress("glGetFramebufferAttachmentParameterivEXT");
    tunisGL.tunisGetFramebufferAttachmentParameterivOES = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLint *))tunisGLGetProcAddress("glGetFramebufferAttachmentParameterivOES");
    tunisGL.tunisGetFramebufferParameterfvAMD = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLuint, GLuint, GLsizei, GLfloat *))tunisGLGetProcAddress("glGetFramebufferParameterfvAMD");
    tunisGL.tunisGetFramebufferParameteriv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint *))tunisGLGetProcAddress("glGetFramebufferParameteriv");
    tunisGL.tunisGetFramebufferParameterivEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint *))tunisGLGetProcAddress("glGetFramebufferParameterivEXT");
    tunisGL.tunisGetFramebufferPixelLocalStorageSizeEXT = (GLsizei(KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glGetFramebufferPixelLocalStorageSizeEXT");
    tunisGL.tunisGetGraphicsResetStatus = (GLenum(KHRONOS_APIENTRY *)(void))tunisGLGetProcAddress("glGetGraphicsResetStatus");
    tunisGL.tunisGetGraphicsResetStatusARB = (GLenum(KHRONOS_APIENTRY *)(void))tunisGLGetProcAddress("glGetGraphicsResetStatusARB");
    tunisGL.tunisGetGraphicsResetStatusEXT = (GLenum(KHRONOS_APIENTRY *)(void))tunisGLGetProcAddress("glGetGraphicsResetStatusEXT");
    tunisGL.tunisGetGraphicsResetStatusKHR = (GLenum(KHRONOS_APIENTRY *)(void))tunisGLGetProcAddress("glGetGraphicsResetStatusKHR");
    tunisGL.tunisGetHandleARB = (GLhandleARB(KHRONOS_APIENTRY *)(GLenum))tunisGLGetProcAddress("glGetHandleARB");
    tunisGL.tunisGetHistogram = (void (KHRONOS_APIENTRY *)(GLenum, GLboolean, GLenum, GLenum, void *))tunisGLGetProcAddress("glGetHistogram");
    tunisGL.tunisGetHistogramEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLboolean, GLenum, GLenum, void *))tunisGLGetProcAddress("glGetHistogramEXT");
    tunisGL.tunisGetHistogramParameterfv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfloat *))tunisGLGetProcAddress("glGetHistogramParameterfv");
    tunisGL.tunisGetHistogramParameterfvEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfloat *))tunisGLGetProcAddress("glGetHistogramParameterfvEXT");
    tunisGL.tunisGetHistogramParameteriv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint *))tunisGLGetProcAddress("glGetHistogramParameteriv");
    tunisGL.tunisGetHistogramParameterivEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint *))tunisGLGetProcAddress("glGetHistogramParameterivEXT");
    tunisGL.tunisGetHistogramParameterxvOES = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfixed *))tunisGLGetProcAddress("glGetHistogramParameterxvOES");
    tunisGL.tunisGetImageHandleARB = (GLuint64(KHRONOS_APIENTRY *)(GLuint, GLint, GLboolean, GLint, GLenum))tunisGLGetProcAddress("glGetImageHandleARB");
    tunisGL.tunisGetImageHandleNV = (GLuint64(KHRONOS_APIENTRY *)(GLuint, GLint, GLboolean, GLint, GLenum))tunisGLGetProcAddress("glGetImageHandleNV");
    tunisGL.tunisGetImageTransformParameterfvHP = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfloat *))tunisGLGetProcAddress("glGetImageTransformParameterfvHP");
    tunisGL.tunisGetImageTransformParameterivHP = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint *))tunisGLGetProcAddress("glGetImageTransformParameterivHP");
    tunisGL.tunisGetInfoLogARB = (void (KHRONOS_APIENTRY *)(GLhandleARB, GLsizei, GLsizei *, GLcharARB *))tunisGLGetProcAddress("glGetInfoLogARB");
    tunisGL.tunisGetInstrumentsSGIX = (GLint(KHRONOS_APIENTRY *)(void))tunisGLGetProcAddress("glGetInstrumentsSGIX");
    tunisGL.tunisGetInteger64i_v = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLint64 *))tunisGLGetProcAddress("glGetInteger64i_v");
    tunisGL.tunisGetInteger64v = (void (KHRONOS_APIENTRY *)(GLenum, GLint64 *))tunisGLGetProcAddress("glGetInteger64v");
    tunisGL.tunisGetInteger64vAPPLE = (void (KHRONOS_APIENTRY *)(GLenum, GLint64 *))tunisGLGetProcAddress("glGetInteger64vAPPLE");
    tunisGL.tunisGetIntegerIndexedvEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLint *))tunisGLGetProcAddress("glGetIntegerIndexedvEXT");
    tunisGL.tunisGetIntegeri_v = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLint *))tunisGLGetProcAddress("glGetIntegeri_v");
    tunisGL.tunisGetIntegeri_vEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLint *))tunisGLGetProcAddress("glGetIntegeri_vEXT");
    tunisGL.tunisGetIntegerui64i_vNV = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLuint64EXT *))tunisGLGetProcAddress("glGetIntegerui64i_vNV");
    tunisGL.tunisGetIntegerui64vNV = (void (KHRONOS_APIENTRY *)(GLenum, GLuint64EXT *))tunisGLGetProcAddress("glGetIntegerui64vNV");
    tunisGL.tunisGetIntegerv = (void (KHRONOS_APIENTRY *)(GLenum, GLint *))tunisGLGetProcAddress("glGetIntegerv");
    tunisGL.tunisGetInternalformatSampleivNV = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLsizei, GLenum, GLsizei, GLint *))tunisGLGetProcAddress("glGetInternalformatSampleivNV");
    tunisGL.tunisGetInternalformati64v = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLsizei, GLint64 *))tunisGLGetProcAddress("glGetInternalformati64v");
    tunisGL.tunisGetInternalformativ = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLsizei, GLint *))tunisGLGetProcAddress("glGetInternalformativ");
    tunisGL.tunisGetInvariantBooleanvEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLboolean *))tunisGLGetProcAddress("glGetInvariantBooleanvEXT");
    tunisGL.tunisGetInvariantFloatvEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLfloat *))tunisGLGetProcAddress("glGetInvariantFloatvEXT");
    tunisGL.tunisGetInvariantIntegervEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint *))tunisGLGetProcAddress("glGetInvariantIntegervEXT");
    tunisGL.tunisGetLightfv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfloat *))tunisGLGetProcAddress("glGetLightfv");
    tunisGL.tunisGetLightiv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint *))tunisGLGetProcAddress("glGetLightiv");
    tunisGL.tunisGetLightxOES = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfixed *))tunisGLGetProcAddress("glGetLightxOES");
    tunisGL.tunisGetLightxv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfixed *))tunisGLGetProcAddress("glGetLightxv");
    tunisGL.tunisGetLightxvOES = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfixed *))tunisGLGetProcAddress("glGetLightxvOES");
    tunisGL.tunisGetListParameterfvSGIX = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLfloat *))tunisGLGetProcAddress("glGetListParameterfvSGIX");
    tunisGL.tunisGetListParameterivSGIX = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint *))tunisGLGetProcAddress("glGetListParameterivSGIX");
    tunisGL.tunisGetLocalConstantBooleanvEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLboolean *))tunisGLGetProcAddress("glGetLocalConstantBooleanvEXT");
    tunisGL.tunisGetLocalConstantFloatvEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLfloat *))tunisGLGetProcAddress("glGetLocalConstantFloatvEXT");
    tunisGL.tunisGetLocalConstantIntegervEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint *))tunisGLGetProcAddress("glGetLocalConstantIntegervEXT");
    tunisGL.tunisGetMapAttribParameterfvNV = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLenum, GLfloat *))tunisGLGetProcAddress("glGetMapAttribParameterfvNV");
    tunisGL.tunisGetMapAttribParameterivNV = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLenum, GLint *))tunisGLGetProcAddress("glGetMapAttribParameterivNV");
    tunisGL.tunisGetMapControlPointsNV = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLenum, GLsizei, GLsizei, GLboolean, void *))tunisGLGetProcAddress("glGetMapControlPointsNV");
    tunisGL.tunisGetMapParameterfvNV = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfloat *))tunisGLGetProcAddress("glGetMapParameterfvNV");
    tunisGL.tunisGetMapParameterivNV = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint *))tunisGLGetProcAddress("glGetMapParameterivNV");
    tunisGL.tunisGetMapdv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLdouble *))tunisGLGetProcAddress("glGetMapdv");
    tunisGL.tunisGetMapfv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfloat *))tunisGLGetProcAddress("glGetMapfv");
    tunisGL.tunisGetMapiv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint *))tunisGLGetProcAddress("glGetMapiv");
    tunisGL.tunisGetMapxvOES = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfixed *))tunisGLGetProcAddress("glGetMapxvOES");
    tunisGL.tunisGetMaterialfv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfloat *))tunisGLGetProcAddress("glGetMaterialfv");
    tunisGL.tunisGetMaterialiv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint *))tunisGLGetProcAddress("glGetMaterialiv");
    tunisGL.tunisGetMaterialxOES = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfixed))tunisGLGetProcAddress("glGetMaterialxOES");
    tunisGL.tunisGetMaterialxv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfixed *))tunisGLGetProcAddress("glGetMaterialxv");
    tunisGL.tunisGetMaterialxvOES = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfixed *))tunisGLGetProcAddress("glGetMaterialxvOES");
    tunisGL.tunisGetMemoryObjectParameterivEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint *))tunisGLGetProcAddress("glGetMemoryObjectParameterivEXT");
    tunisGL.tunisGetMinmax = (void (KHRONOS_APIENTRY *)(GLenum, GLboolean, GLenum, GLenum, void *))tunisGLGetProcAddress("glGetMinmax");
    tunisGL.tunisGetMinmaxEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLboolean, GLenum, GLenum, void *))tunisGLGetProcAddress("glGetMinmaxEXT");
    tunisGL.tunisGetMinmaxParameterfv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfloat *))tunisGLGetProcAddress("glGetMinmaxParameterfv");
    tunisGL.tunisGetMinmaxParameterfvEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfloat *))tunisGLGetProcAddress("glGetMinmaxParameterfvEXT");
    tunisGL.tunisGetMinmaxParameteriv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint *))tunisGLGetProcAddress("glGetMinmaxParameteriv");
    tunisGL.tunisGetMinmaxParameterivEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint *))tunisGLGetProcAddress("glGetMinmaxParameterivEXT");
    tunisGL.tunisGetMultiTexEnvfvEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLfloat *))tunisGLGetProcAddress("glGetMultiTexEnvfvEXT");
    tunisGL.tunisGetMultiTexEnvivEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLint *))tunisGLGetProcAddress("glGetMultiTexEnvivEXT");
    tunisGL.tunisGetMultiTexGendvEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLdouble *))tunisGLGetProcAddress("glGetMultiTexGendvEXT");
    tunisGL.tunisGetMultiTexGenfvEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLfloat *))tunisGLGetProcAddress("glGetMultiTexGenfvEXT");
    tunisGL.tunisGetMultiTexGenivEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLint *))tunisGLGetProcAddress("glGetMultiTexGenivEXT");
    tunisGL.tunisGetMultiTexImageEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint, GLenum, GLenum, void *))tunisGLGetProcAddress("glGetMultiTexImageEXT");
    tunisGL.tunisGetMultiTexLevelParameterfvEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint, GLenum, GLfloat *))tunisGLGetProcAddress("glGetMultiTexLevelParameterfvEXT");
    tunisGL.tunisGetMultiTexLevelParameterivEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint, GLenum, GLint *))tunisGLGetProcAddress("glGetMultiTexLevelParameterivEXT");
    tunisGL.tunisGetMultiTexParameterIivEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLint *))tunisGLGetProcAddress("glGetMultiTexParameterIivEXT");
    tunisGL.tunisGetMultiTexParameterIuivEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLuint *))tunisGLGetProcAddress("glGetMultiTexParameterIuivEXT");
    tunisGL.tunisGetMultiTexParameterfvEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLfloat *))tunisGLGetProcAddress("glGetMultiTexParameterfvEXT");
    tunisGL.tunisGetMultiTexParameterivEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLint *))tunisGLGetProcAddress("glGetMultiTexParameterivEXT");
    tunisGL.tunisGetMultisamplefv = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLfloat *))tunisGLGetProcAddress("glGetMultisamplefv");
    tunisGL.tunisGetMultisamplefvNV = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLfloat *))tunisGLGetProcAddress("glGetMultisamplefvNV");
    tunisGL.tunisGetNamedBufferParameteri64v = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint64 *))tunisGLGetProcAddress("glGetNamedBufferParameteri64v");
    tunisGL.tunisGetNamedBufferParameteriv = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint *))tunisGLGetProcAddress("glGetNamedBufferParameteriv");
    tunisGL.tunisGetNamedBufferParameterivEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint *))tunisGLGetProcAddress("glGetNamedBufferParameterivEXT");
    tunisGL.tunisGetNamedBufferParameterui64vNV = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLuint64EXT *))tunisGLGetProcAddress("glGetNamedBufferParameterui64vNV");
    tunisGL.tunisGetNamedBufferPointerv = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, void **))tunisGLGetProcAddress("glGetNamedBufferPointerv");
    tunisGL.tunisGetNamedBufferPointervEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, void **))tunisGLGetProcAddress("glGetNamedBufferPointervEXT");
    tunisGL.tunisGetNamedBufferSubData = (void (KHRONOS_APIENTRY *)(GLuint, GLintptr, GLsizeiptr, void *))tunisGLGetProcAddress("glGetNamedBufferSubData");
    tunisGL.tunisGetNamedBufferSubDataEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLintptr, GLsizeiptr, void *))tunisGLGetProcAddress("glGetNamedBufferSubDataEXT");
    tunisGL.tunisGetNamedFramebufferAttachmentParameteriv = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLenum, GLint *))tunisGLGetProcAddress("glGetNamedFramebufferAttachmentParameteriv");
    tunisGL.tunisGetNamedFramebufferAttachmentParameterivEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLenum, GLint *))tunisGLGetProcAddress("glGetNamedFramebufferAttachmentParameterivEXT");
    tunisGL.tunisGetNamedFramebufferParameterfvAMD = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLuint, GLuint, GLsizei, GLfloat *))tunisGLGetProcAddress("glGetNamedFramebufferParameterfvAMD");
    tunisGL.tunisGetNamedFramebufferParameteriv = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint *))tunisGLGetProcAddress("glGetNamedFramebufferParameteriv");
    tunisGL.tunisGetNamedFramebufferParameterivEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint *))tunisGLGetProcAddress("glGetNamedFramebufferParameterivEXT");
    tunisGL.tunisGetNamedProgramLocalParameterIivEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLuint, GLint *))tunisGLGetProcAddress("glGetNamedProgramLocalParameterIivEXT");
    tunisGL.tunisGetNamedProgramLocalParameterIuivEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLuint, GLuint *))tunisGLGetProcAddress("glGetNamedProgramLocalParameterIuivEXT");
    tunisGL.tunisGetNamedProgramLocalParameterdvEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLuint, GLdouble *))tunisGLGetProcAddress("glGetNamedProgramLocalParameterdvEXT");
    tunisGL.tunisGetNamedProgramLocalParameterfvEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLuint, GLfloat *))tunisGLGetProcAddress("glGetNamedProgramLocalParameterfvEXT");
    tunisGL.tunisGetNamedProgramStringEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLenum, void *))tunisGLGetProcAddress("glGetNamedProgramStringEXT");
    tunisGL.tunisGetNamedProgramivEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLenum, GLint *))tunisGLGetProcAddress("glGetNamedProgramivEXT");
    tunisGL.tunisGetNamedRenderbufferParameteriv = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint *))tunisGLGetProcAddress("glGetNamedRenderbufferParameteriv");
    tunisGL.tunisGetNamedRenderbufferParameterivEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint *))tunisGLGetProcAddress("glGetNamedRenderbufferParameterivEXT");
    tunisGL.tunisGetNamedStringARB = (void (KHRONOS_APIENTRY *)(GLint, const GLchar *, GLsizei, GLint *, GLchar *))tunisGLGetProcAddress("glGetNamedStringARB");
    tunisGL.tunisGetNamedStringivARB = (void (KHRONOS_APIENTRY *)(GLint, const GLchar *, GLenum, GLint *))tunisGLGetProcAddress("glGetNamedStringivARB");
    tunisGL.tunisGetNextPerfQueryIdINTEL = (void (KHRONOS_APIENTRY *)(GLuint, GLuint *))tunisGLGetProcAddress("glGetNextPerfQueryIdINTEL");
    tunisGL.tunisGetObjectBufferfvATI = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLfloat *))tunisGLGetProcAddress("glGetObjectBufferfvATI");
    tunisGL.tunisGetObjectBufferivATI = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint *))tunisGLGetProcAddress("glGetObjectBufferivATI");
    tunisGL.tunisGetObjectLabel = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLsizei, GLsizei *, GLchar *))tunisGLGetProcAddress("glGetObjectLabel");
    tunisGL.tunisGetObjectLabelEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLsizei, GLsizei *, GLchar *))tunisGLGetProcAddress("glGetObjectLabelEXT");
    tunisGL.tunisGetObjectLabelKHR = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLsizei, GLsizei *, GLchar *))tunisGLGetProcAddress("glGetObjectLabelKHR");
    tunisGL.tunisGetObjectParameterfvARB = (void (KHRONOS_APIENTRY *)(GLhandleARB, GLenum, GLfloat *))tunisGLGetProcAddress("glGetObjectParameterfvARB");
    tunisGL.tunisGetObjectParameterivAPPLE = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLenum, GLint *))tunisGLGetProcAddress("glGetObjectParameterivAPPLE");
    tunisGL.tunisGetObjectParameterivARB = (void (KHRONOS_APIENTRY *)(GLhandleARB, GLenum, GLint *))tunisGLGetProcAddress("glGetObjectParameterivARB");
    tunisGL.tunisGetObjectPtrLabel = (void (KHRONOS_APIENTRY *)(const void *, GLsizei, GLsizei *, GLchar *))tunisGLGetProcAddress("glGetObjectPtrLabel");
    tunisGL.tunisGetObjectPtrLabelKHR = (void (KHRONOS_APIENTRY *)(const void *, GLsizei, GLsizei *, GLchar *))tunisGLGetProcAddress("glGetObjectPtrLabelKHR");
    tunisGL.tunisGetOcclusionQueryivNV = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint *))tunisGLGetProcAddress("glGetOcclusionQueryivNV");
    tunisGL.tunisGetOcclusionQueryuivNV = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLuint *))tunisGLGetProcAddress("glGetOcclusionQueryuivNV");
    tunisGL.tunisGetPathColorGenfvNV = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfloat *))tunisGLGetProcAddress("glGetPathColorGenfvNV");
    tunisGL.tunisGetPathColorGenivNV = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint *))tunisGLGetProcAddress("glGetPathColorGenivNV");
    tunisGL.tunisGetPathCommandsNV = (void (KHRONOS_APIENTRY *)(GLuint, GLubyte *))tunisGLGetProcAddress("glGetPathCommandsNV");
    tunisGL.tunisGetPathCoordsNV = (void (KHRONOS_APIENTRY *)(GLuint, GLfloat *))tunisGLGetProcAddress("glGetPathCoordsNV");
    tunisGL.tunisGetPathDashArrayNV = (void (KHRONOS_APIENTRY *)(GLuint, GLfloat *))tunisGLGetProcAddress("glGetPathDashArrayNV");
    tunisGL.tunisGetPathLengthNV = (GLfloat(KHRONOS_APIENTRY *)(GLuint, GLsizei, GLsizei))tunisGLGetProcAddress("glGetPathLengthNV");
    tunisGL.tunisGetPathMetricRangeNV = (void (KHRONOS_APIENTRY *)(GLbitfield, GLuint, GLsizei, GLsizei, GLfloat *))tunisGLGetProcAddress("glGetPathMetricRangeNV");
    tunisGL.tunisGetPathMetricsNV = (void (KHRONOS_APIENTRY *)(GLbitfield, GLsizei, GLenum, const void *, GLuint, GLsizei, GLfloat *))tunisGLGetProcAddress("glGetPathMetricsNV");
    tunisGL.tunisGetPathParameterfvNV = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLfloat *))tunisGLGetProcAddress("glGetPathParameterfvNV");
    tunisGL.tunisGetPathParameterivNV = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint *))tunisGLGetProcAddress("glGetPathParameterivNV");
    tunisGL.tunisGetPathSpacingNV = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLenum, const void *, GLuint, GLfloat, GLfloat, GLenum, GLfloat *))tunisGLGetProcAddress("glGetPathSpacingNV");
    tunisGL.tunisGetPathTexGenfvNV = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfloat *))tunisGLGetProcAddress("glGetPathTexGenfvNV");
    tunisGL.tunisGetPathTexGenivNV = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint *))tunisGLGetProcAddress("glGetPathTexGenivNV");
    tunisGL.tunisGetPerfCounterInfoINTEL = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLuint, GLchar *, GLuint, GLchar *, GLuint *, GLuint *, GLuint *, GLuint *, GLuint64 *))tunisGLGetProcAddress("glGetPerfCounterInfoINTEL");
    tunisGL.tunisGetPerfMonitorCounterDataAMD = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLsizei, GLuint *, GLint *))tunisGLGetProcAddress("glGetPerfMonitorCounterDataAMD");
    tunisGL.tunisGetPerfMonitorCounterInfoAMD = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLenum, void *))tunisGLGetProcAddress("glGetPerfMonitorCounterInfoAMD");
    tunisGL.tunisGetPerfMonitorCounterStringAMD = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLsizei, GLsizei *, GLchar *))tunisGLGetProcAddress("glGetPerfMonitorCounterStringAMD");
    tunisGL.tunisGetPerfMonitorCountersAMD = (void (KHRONOS_APIENTRY *)(GLuint, GLint *, GLint *, GLsizei, GLuint *))tunisGLGetProcAddress("glGetPerfMonitorCountersAMD");
    tunisGL.tunisGetPerfMonitorGroupStringAMD = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, GLsizei *, GLchar *))tunisGLGetProcAddress("glGetPerfMonitorGroupStringAMD");
    tunisGL.tunisGetPerfMonitorGroupsAMD = (void (KHRONOS_APIENTRY *)(GLint *, GLsizei, GLuint *))tunisGLGetProcAddress("glGetPerfMonitorGroupsAMD");
    tunisGL.tunisGetPerfQueryDataINTEL = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLsizei, void *, GLuint *))tunisGLGetProcAddress("glGetPerfQueryDataINTEL");
    tunisGL.tunisGetPerfQueryIdByNameINTEL = (void (KHRONOS_APIENTRY *)(GLchar *, GLuint *))tunisGLGetProcAddress("glGetPerfQueryIdByNameINTEL");
    tunisGL.tunisGetPerfQueryInfoINTEL = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLchar *, GLuint *, GLuint *, GLuint *, GLuint *))tunisGLGetProcAddress("glGetPerfQueryInfoINTEL");
    tunisGL.tunisGetPixelMapfv = (void (KHRONOS_APIENTRY *)(GLenum, GLfloat *))tunisGLGetProcAddress("glGetPixelMapfv");
    tunisGL.tunisGetPixelMapuiv = (void (KHRONOS_APIENTRY *)(GLenum, GLuint *))tunisGLGetProcAddress("glGetPixelMapuiv");
    tunisGL.tunisGetPixelMapusv = (void (KHRONOS_APIENTRY *)(GLenum, GLushort *))tunisGLGetProcAddress("glGetPixelMapusv");
    tunisGL.tunisGetPixelMapxv = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLfixed *))tunisGLGetProcAddress("glGetPixelMapxv");
    tunisGL.tunisGetPixelTexGenParameterfvSGIS = (void (KHRONOS_APIENTRY *)(GLenum, GLfloat *))tunisGLGetProcAddress("glGetPixelTexGenParameterfvSGIS");
    tunisGL.tunisGetPixelTexGenParameterivSGIS = (void (KHRONOS_APIENTRY *)(GLenum, GLint *))tunisGLGetProcAddress("glGetPixelTexGenParameterivSGIS");
    tunisGL.tunisGetPixelTransformParameterfvEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfloat *))tunisGLGetProcAddress("glGetPixelTransformParameterfvEXT");
    tunisGL.tunisGetPixelTransformParameterivEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint *))tunisGLGetProcAddress("glGetPixelTransformParameterivEXT");
    tunisGL.tunisGetPointerIndexedvEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, void **))tunisGLGetProcAddress("glGetPointerIndexedvEXT");
    tunisGL.tunisGetPointeri_vEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, void **))tunisGLGetProcAddress("glGetPointeri_vEXT");
    tunisGL.tunisGetPointerv = (void (KHRONOS_APIENTRY *)(GLenum, void **))tunisGLGetProcAddress("glGetPointerv");
    tunisGL.tunisGetPointervEXT = (void (KHRONOS_APIENTRY *)(GLenum, void **))tunisGLGetProcAddress("glGetPointervEXT");
    tunisGL.tunisGetPointervKHR = (void (KHRONOS_APIENTRY *)(GLenum, void **))tunisGLGetProcAddress("glGetPointervKHR");
    tunisGL.tunisGetPolygonStipple = (void (KHRONOS_APIENTRY *)(GLubyte *))tunisGLGetProcAddress("glGetPolygonStipple");
    tunisGL.tunisGetProgramBinary = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, GLsizei *, GLenum *, void *))tunisGLGetProcAddress("glGetProgramBinary");
    tunisGL.tunisGetProgramBinaryOES = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, GLsizei *, GLenum *, void *))tunisGLGetProcAddress("glGetProgramBinaryOES");
    tunisGL.tunisGetProgramEnvParameterIivNV = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLint *))tunisGLGetProcAddress("glGetProgramEnvParameterIivNV");
    tunisGL.tunisGetProgramEnvParameterIuivNV = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLuint *))tunisGLGetProcAddress("glGetProgramEnvParameterIuivNV");
    tunisGL.tunisGetProgramEnvParameterdvARB = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLdouble *))tunisGLGetProcAddress("glGetProgramEnvParameterdvARB");
    tunisGL.tunisGetProgramEnvParameterfvARB = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLfloat *))tunisGLGetProcAddress("glGetProgramEnvParameterfvARB");
    tunisGL.tunisGetProgramInfoLog = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, GLsizei *, GLchar *))tunisGLGetProcAddress("glGetProgramInfoLog");
    tunisGL.tunisGetProgramInterfaceiv = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLenum, GLint *))tunisGLGetProcAddress("glGetProgramInterfaceiv");
    tunisGL.tunisGetProgramLocalParameterIivNV = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLint *))tunisGLGetProcAddress("glGetProgramLocalParameterIivNV");
    tunisGL.tunisGetProgramLocalParameterIuivNV = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLuint *))tunisGLGetProcAddress("glGetProgramLocalParameterIuivNV");
    tunisGL.tunisGetProgramLocalParameterdvARB = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLdouble *))tunisGLGetProcAddress("glGetProgramLocalParameterdvARB");
    tunisGL.tunisGetProgramLocalParameterfvARB = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLfloat *))tunisGLGetProcAddress("glGetProgramLocalParameterfvARB");
    tunisGL.tunisGetProgramNamedParameterdvNV = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, const GLubyte *, GLdouble *))tunisGLGetProcAddress("glGetProgramNamedParameterdvNV");
    tunisGL.tunisGetProgramNamedParameterfvNV = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, const GLubyte *, GLfloat *))tunisGLGetProcAddress("glGetProgramNamedParameterfvNV");
    tunisGL.tunisGetProgramParameterdvNV = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLenum, GLdouble *))tunisGLGetProcAddress("glGetProgramParameterdvNV");
    tunisGL.tunisGetProgramParameterfvNV = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLenum, GLfloat *))tunisGLGetProcAddress("glGetProgramParameterfvNV");
    tunisGL.tunisGetProgramPipelineInfoLog = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, GLsizei *, GLchar *))tunisGLGetProcAddress("glGetProgramPipelineInfoLog");
    tunisGL.tunisGetProgramPipelineInfoLogEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, GLsizei *, GLchar *))tunisGLGetProcAddress("glGetProgramPipelineInfoLogEXT");
    tunisGL.tunisGetProgramPipelineiv = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint *))tunisGLGetProcAddress("glGetProgramPipelineiv");
    tunisGL.tunisGetProgramPipelineivEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint *))tunisGLGetProcAddress("glGetProgramPipelineivEXT");
    tunisGL.tunisGetProgramResourceIndex = (GLuint(KHRONOS_APIENTRY *)(GLuint, GLenum, const GLchar *))tunisGLGetProcAddress("glGetProgramResourceIndex");
    tunisGL.tunisGetProgramResourceLocation = (GLint(KHRONOS_APIENTRY *)(GLuint, GLenum, const GLchar *))tunisGLGetProcAddress("glGetProgramResourceLocation");
    tunisGL.tunisGetProgramResourceLocationIndex = (GLint(KHRONOS_APIENTRY *)(GLuint, GLenum, const GLchar *))tunisGLGetProcAddress("glGetProgramResourceLocationIndex");
    tunisGL.tunisGetProgramResourceLocationIndexEXT = (GLint(KHRONOS_APIENTRY *)(GLuint, GLenum, const GLchar *))tunisGLGetProcAddress("glGetProgramResourceLocationIndexEXT");
    tunisGL.tunisGetProgramResourceName = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLuint, GLsizei, GLsizei *, GLchar *))tunisGLGetProcAddress("glGetProgramResourceName");
    tunisGL.tunisGetProgramResourcefvNV = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLuint, GLsizei, const GLenum *, GLsizei, GLsizei *, GLfloat *))tunisGLGetProcAddress("glGetProgramResourcefvNV");
    tunisGL.tunisGetProgramResourceiv = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLuint, GLsizei, const GLenum *, GLsizei, GLsizei *, GLint *))tunisGLGetProcAddress("glGetProgramResourceiv");
    tunisGL.tunisGetProgramStageiv = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLenum, GLint *))tunisGLGetProcAddress("glGetProgramStageiv");
    tunisGL.tunisGetProgramStringARB = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, void *))tunisGLGetProcAddress("glGetProgramStringARB");
    tunisGL.tunisGetProgramStringNV = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLubyte *))tunisGLGetProcAddress("glGetProgramStringNV");
    tunisGL.tunisGetProgramSubroutineParameteruivNV = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLuint *))tunisGLGetProcAddress("glGetProgramSubroutineParameteruivNV");
    tunisGL.tunisGetProgramiv = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint *))tunisGLGetProcAddress("glGetProgramiv");
    tunisGL.tunisGetProgramivARB = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint *))tunisGLGetProcAddress("glGetProgramivARB");
    tunisGL.tunisGetProgramivNV = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint *))tunisGLGetProcAddress("glGetProgramivNV");
    tunisGL.tunisGetQueryBufferObjecti64v = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLenum, GLintptr))tunisGLGetProcAddress("glGetQueryBufferObjecti64v");
    tunisGL.tunisGetQueryBufferObjectiv = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLenum, GLintptr))tunisGLGetProcAddress("glGetQueryBufferObjectiv");
    tunisGL.tunisGetQueryBufferObjectui64v = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLenum, GLintptr))tunisGLGetProcAddress("glGetQueryBufferObjectui64v");
    tunisGL.tunisGetQueryBufferObjectuiv = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLenum, GLintptr))tunisGLGetProcAddress("glGetQueryBufferObjectuiv");
    tunisGL.tunisGetQueryIndexediv = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLenum, GLint *))tunisGLGetProcAddress("glGetQueryIndexediv");
    tunisGL.tunisGetQueryObjecti64v = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint64 *))tunisGLGetProcAddress("glGetQueryObjecti64v");
    tunisGL.tunisGetQueryObjecti64vEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint64 *))tunisGLGetProcAddress("glGetQueryObjecti64vEXT");
    tunisGL.tunisGetQueryObjectiv = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint *))tunisGLGetProcAddress("glGetQueryObjectiv");
    tunisGL.tunisGetQueryObjectivARB = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint *))tunisGLGetProcAddress("glGetQueryObjectivARB");
    tunisGL.tunisGetQueryObjectivEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint *))tunisGLGetProcAddress("glGetQueryObjectivEXT");
    tunisGL.tunisGetQueryObjectui64v = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLuint64 *))tunisGLGetProcAddress("glGetQueryObjectui64v");
    tunisGL.tunisGetQueryObjectui64vEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLuint64 *))tunisGLGetProcAddress("glGetQueryObjectui64vEXT");
    tunisGL.tunisGetQueryObjectuiv = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLuint *))tunisGLGetProcAddress("glGetQueryObjectuiv");
    tunisGL.tunisGetQueryObjectuivARB = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLuint *))tunisGLGetProcAddress("glGetQueryObjectuivARB");
    tunisGL.tunisGetQueryObjectuivEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLuint *))tunisGLGetProcAddress("glGetQueryObjectuivEXT");
    tunisGL.tunisGetQueryiv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint *))tunisGLGetProcAddress("glGetQueryiv");
    tunisGL.tunisGetQueryivARB = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint *))tunisGLGetProcAddress("glGetQueryivARB");
    tunisGL.tunisGetQueryivEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint *))tunisGLGetProcAddress("glGetQueryivEXT");
    tunisGL.tunisGetRenderbufferParameteriv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint *))tunisGLGetProcAddress("glGetRenderbufferParameteriv");
    tunisGL.tunisGetRenderbufferParameterivEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint *))tunisGLGetProcAddress("glGetRenderbufferParameterivEXT");
    tunisGL.tunisGetRenderbufferParameterivOES = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint *))tunisGLGetProcAddress("glGetRenderbufferParameterivOES");
    tunisGL.tunisGetSamplerParameterIiv = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint *))tunisGLGetProcAddress("glGetSamplerParameterIiv");
    tunisGL.tunisGetSamplerParameterIivEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint *))tunisGLGetProcAddress("glGetSamplerParameterIivEXT");
    tunisGL.tunisGetSamplerParameterIivOES = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint *))tunisGLGetProcAddress("glGetSamplerParameterIivOES");
    tunisGL.tunisGetSamplerParameterIuiv = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLuint *))tunisGLGetProcAddress("glGetSamplerParameterIuiv");
    tunisGL.tunisGetSamplerParameterIuivEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLuint *))tunisGLGetProcAddress("glGetSamplerParameterIuivEXT");
    tunisGL.tunisGetSamplerParameterIuivOES = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLuint *))tunisGLGetProcAddress("glGetSamplerParameterIuivOES");
    tunisGL.tunisGetSamplerParameterfv = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLfloat *))tunisGLGetProcAddress("glGetSamplerParameterfv");
    tunisGL.tunisGetSamplerParameteriv = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint *))tunisGLGetProcAddress("glGetSamplerParameteriv");
    tunisGL.tunisGetSemaphoreParameterui64vEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLuint64 *))tunisGLGetProcAddress("glGetSemaphoreParameterui64vEXT");
    tunisGL.tunisGetSeparableFilter = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, void *, void *, void *))tunisGLGetProcAddress("glGetSeparableFilter");
    tunisGL.tunisGetSeparableFilterEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, void *, void *, void *))tunisGLGetProcAddress("glGetSeparableFilterEXT");
    tunisGL.tunisGetShaderInfoLog = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, GLsizei *, GLchar *))tunisGLGetProcAddress("glGetShaderInfoLog");
    tunisGL.tunisGetShaderPrecisionFormat = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint *, GLint *))tunisGLGetProcAddress("glGetShaderPrecisionFormat");
    tunisGL.tunisGetShaderSource = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, GLsizei *, GLchar *))tunisGLGetProcAddress("glGetShaderSource");
    tunisGL.tunisGetShaderSourceARB = (void (KHRONOS_APIENTRY *)(GLhandleARB, GLsizei, GLsizei *, GLcharARB *))tunisGLGetProcAddress("glGetShaderSourceARB");
    tunisGL.tunisGetShaderiv = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint *))tunisGLGetProcAddress("glGetShaderiv");
    tunisGL.tunisGetSharpenTexFuncSGIS = (void (KHRONOS_APIENTRY *)(GLenum, GLfloat *))tunisGLGetProcAddress("glGetSharpenTexFuncSGIS");
    tunisGL.tunisGetStageIndexNV = (GLushort(KHRONOS_APIENTRY *)(GLenum))tunisGLGetProcAddress("glGetStageIndexNV");
    tunisGL.tunisGetString = (const GLubyte *(KHRONOS_APIENTRY *)(GLenum))tunisGLGetProcAddress("glGetString");
    tunisGL.tunisGetStringi = (const GLubyte *(KHRONOS_APIENTRY *)(GLenum, GLuint))tunisGLGetProcAddress("glGetStringi");
    tunisGL.tunisGetSubroutineIndex = (GLuint(KHRONOS_APIENTRY *)(GLuint, GLenum, const GLchar *))tunisGLGetProcAddress("glGetSubroutineIndex");
    tunisGL.tunisGetSubroutineUniformLocation = (GLint(KHRONOS_APIENTRY *)(GLuint, GLenum, const GLchar *))tunisGLGetProcAddress("glGetSubroutineUniformLocation");
    tunisGL.tunisGetSynciv = (void (KHRONOS_APIENTRY *)(GLsync, GLenum, GLsizei, GLsizei *, GLint *))tunisGLGetProcAddress("glGetSynciv");
    tunisGL.tunisGetSyncivAPPLE = (void (KHRONOS_APIENTRY *)(GLsync, GLenum, GLsizei, GLsizei *, GLint *))tunisGLGetProcAddress("glGetSyncivAPPLE");
    tunisGL.tunisGetTexBumpParameterfvATI = (void (KHRONOS_APIENTRY *)(GLenum, GLfloat *))tunisGLGetProcAddress("glGetTexBumpParameterfvATI");
    tunisGL.tunisGetTexBumpParameterivATI = (void (KHRONOS_APIENTRY *)(GLenum, GLint *))tunisGLGetProcAddress("glGetTexBumpParameterivATI");
    tunisGL.tunisGetTexEnvfv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfloat *))tunisGLGetProcAddress("glGetTexEnvfv");
    tunisGL.tunisGetTexEnviv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint *))tunisGLGetProcAddress("glGetTexEnviv");
    tunisGL.tunisGetTexEnvxv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfixed *))tunisGLGetProcAddress("glGetTexEnvxv");
    tunisGL.tunisGetTexEnvxvOES = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfixed *))tunisGLGetProcAddress("glGetTexEnvxvOES");
    tunisGL.tunisGetTexFilterFuncSGIS = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfloat *))tunisGLGetProcAddress("glGetTexFilterFuncSGIS");
    tunisGL.tunisGetTexGendv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLdouble *))tunisGLGetProcAddress("glGetTexGendv");
    tunisGL.tunisGetTexGenfv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfloat *))tunisGLGetProcAddress("glGetTexGenfv");
    tunisGL.tunisGetTexGenfvOES = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfloat *))tunisGLGetProcAddress("glGetTexGenfvOES");
    tunisGL.tunisGetTexGeniv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint *))tunisGLGetProcAddress("glGetTexGeniv");
    tunisGL.tunisGetTexGenivOES = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint *))tunisGLGetProcAddress("glGetTexGenivOES");
    tunisGL.tunisGetTexGenxvOES = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfixed *))tunisGLGetProcAddress("glGetTexGenxvOES");
    tunisGL.tunisGetTexImage = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLenum, GLenum, void *))tunisGLGetProcAddress("glGetTexImage");
    tunisGL.tunisGetTexLevelParameterfv = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLenum, GLfloat *))tunisGLGetProcAddress("glGetTexLevelParameterfv");
    tunisGL.tunisGetTexLevelParameteriv = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLenum, GLint *))tunisGLGetProcAddress("glGetTexLevelParameteriv");
    tunisGL.tunisGetTexLevelParameterxvOES = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLenum, GLfixed *))tunisGLGetProcAddress("glGetTexLevelParameterxvOES");
    tunisGL.tunisGetTexParameterIiv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint *))tunisGLGetProcAddress("glGetTexParameterIiv");
    tunisGL.tunisGetTexParameterIivEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint *))tunisGLGetProcAddress("glGetTexParameterIivEXT");
    tunisGL.tunisGetTexParameterIivOES = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint *))tunisGLGetProcAddress("glGetTexParameterIivOES");
    tunisGL.tunisGetTexParameterIuiv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLuint *))tunisGLGetProcAddress("glGetTexParameterIuiv");
    tunisGL.tunisGetTexParameterIuivEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLuint *))tunisGLGetProcAddress("glGetTexParameterIuivEXT");
    tunisGL.tunisGetTexParameterIuivOES = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLuint *))tunisGLGetProcAddress("glGetTexParameterIuivOES");
    tunisGL.tunisGetTexParameterPointervAPPLE = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, void **))tunisGLGetProcAddress("glGetTexParameterPointervAPPLE");
    tunisGL.tunisGetTexParameterfv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfloat *))tunisGLGetProcAddress("glGetTexParameterfv");
    tunisGL.tunisGetTexParameteriv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint *))tunisGLGetProcAddress("glGetTexParameteriv");
    tunisGL.tunisGetTexParameterxv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfixed *))tunisGLGetProcAddress("glGetTexParameterxv");
    tunisGL.tunisGetTexParameterxvOES = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfixed *))tunisGLGetProcAddress("glGetTexParameterxvOES");
    tunisGL.tunisGetTextureHandleARB = (GLuint64(KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glGetTextureHandleARB");
    tunisGL.tunisGetTextureHandleIMG = (GLuint64(KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glGetTextureHandleIMG");
    tunisGL.tunisGetTextureHandleNV = (GLuint64(KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glGetTextureHandleNV");
    tunisGL.tunisGetTextureImage = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLenum, GLenum, GLsizei, void *))tunisGLGetProcAddress("glGetTextureImage");
    tunisGL.tunisGetTextureImageEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint, GLenum, GLenum, void *))tunisGLGetProcAddress("glGetTextureImageEXT");
    tunisGL.tunisGetTextureLevelParameterfv = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLenum, GLfloat *))tunisGLGetProcAddress("glGetTextureLevelParameterfv");
    tunisGL.tunisGetTextureLevelParameterfvEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint, GLenum, GLfloat *))tunisGLGetProcAddress("glGetTextureLevelParameterfvEXT");
    tunisGL.tunisGetTextureLevelParameteriv = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLenum, GLint *))tunisGLGetProcAddress("glGetTextureLevelParameteriv");
    tunisGL.tunisGetTextureLevelParameterivEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint, GLenum, GLint *))tunisGLGetProcAddress("glGetTextureLevelParameterivEXT");
    tunisGL.tunisGetTextureParameterIiv = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint *))tunisGLGetProcAddress("glGetTextureParameterIiv");
    tunisGL.tunisGetTextureParameterIivEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLenum, GLint *))tunisGLGetProcAddress("glGetTextureParameterIivEXT");
    tunisGL.tunisGetTextureParameterIuiv = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLuint *))tunisGLGetProcAddress("glGetTextureParameterIuiv");
    tunisGL.tunisGetTextureParameterIuivEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLenum, GLuint *))tunisGLGetProcAddress("glGetTextureParameterIuivEXT");
    tunisGL.tunisGetTextureParameterfv = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLfloat *))tunisGLGetProcAddress("glGetTextureParameterfv");
    tunisGL.tunisGetTextureParameterfvEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLenum, GLfloat *))tunisGLGetProcAddress("glGetTextureParameterfvEXT");
    tunisGL.tunisGetTextureParameteriv = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint *))tunisGLGetProcAddress("glGetTextureParameteriv");
    tunisGL.tunisGetTextureParameterivEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLenum, GLint *))tunisGLGetProcAddress("glGetTextureParameterivEXT");
    tunisGL.tunisGetTextureSamplerHandleARB = (GLuint64(KHRONOS_APIENTRY *)(GLuint, GLuint))tunisGLGetProcAddress("glGetTextureSamplerHandleARB");
    tunisGL.tunisGetTextureSamplerHandleIMG = (GLuint64(KHRONOS_APIENTRY *)(GLuint, GLuint))tunisGLGetProcAddress("glGetTextureSamplerHandleIMG");
    tunisGL.tunisGetTextureSamplerHandleNV = (GLuint64(KHRONOS_APIENTRY *)(GLuint, GLuint))tunisGLGetProcAddress("glGetTextureSamplerHandleNV");
    tunisGL.tunisGetTextureSubImage = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, GLsizei, void *))tunisGLGetProcAddress("glGetTextureSubImage");
    tunisGL.tunisGetTrackMatrixivNV = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLenum, GLint *))tunisGLGetProcAddress("glGetTrackMatrixivNV");
    tunisGL.tunisGetTransformFeedbackVarying = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLsizei, GLsizei *, GLsizei *, GLenum *, GLchar *))tunisGLGetProcAddress("glGetTransformFeedbackVarying");
    tunisGL.tunisGetTransformFeedbackVaryingEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLsizei, GLsizei *, GLsizei *, GLenum *, GLchar *))tunisGLGetProcAddress("glGetTransformFeedbackVaryingEXT");
    tunisGL.tunisGetTransformFeedbackVaryingNV = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLint *))tunisGLGetProcAddress("glGetTransformFeedbackVaryingNV");
    tunisGL.tunisGetTransformFeedbacki64_v = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLuint, GLint64 *))tunisGLGetProcAddress("glGetTransformFeedbacki64_v");
    tunisGL.tunisGetTransformFeedbacki_v = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLuint, GLint *))tunisGLGetProcAddress("glGetTransformFeedbacki_v");
    tunisGL.tunisGetTransformFeedbackiv = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint *))tunisGLGetProcAddress("glGetTransformFeedbackiv");
    tunisGL.tunisGetTranslatedShaderSourceANGLE = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, GLsizei *, GLchar *))tunisGLGetProcAddress("glGetTranslatedShaderSourceANGLE");
    tunisGL.tunisGetUniformBlockIndex = (GLuint(KHRONOS_APIENTRY *)(GLuint, const GLchar *))tunisGLGetProcAddress("glGetUniformBlockIndex");
    tunisGL.tunisGetUniformBufferSizeEXT = (GLint(KHRONOS_APIENTRY *)(GLuint, GLint))tunisGLGetProcAddress("glGetUniformBufferSizeEXT");
    tunisGL.tunisGetUniformIndices = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, const GLchar *const*, GLuint *))tunisGLGetProcAddress("glGetUniformIndices");
    tunisGL.tunisGetUniformLocation = (GLint(KHRONOS_APIENTRY *)(GLuint, const GLchar *))tunisGLGetProcAddress("glGetUniformLocation");
    tunisGL.tunisGetUniformLocationARB = (GLint(KHRONOS_APIENTRY *)(GLhandleARB, const GLcharARB *))tunisGLGetProcAddress("glGetUniformLocationARB");
    tunisGL.tunisGetUniformOffsetEXT = (GLintptr(KHRONOS_APIENTRY *)(GLuint, GLint))tunisGLGetProcAddress("glGetUniformOffsetEXT");
    tunisGL.tunisGetUniformSubroutineuiv = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLuint *))tunisGLGetProcAddress("glGetUniformSubroutineuiv");
    tunisGL.tunisGetUniformdv = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLdouble *))tunisGLGetProcAddress("glGetUniformdv");
    tunisGL.tunisGetUniformfv = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLfloat *))tunisGLGetProcAddress("glGetUniformfv");
    tunisGL.tunisGetUniformfvARB = (void (KHRONOS_APIENTRY *)(GLhandleARB, GLint, GLfloat *))tunisGLGetProcAddress("glGetUniformfvARB");
    tunisGL.tunisGetUniformi64vARB = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLint64 *))tunisGLGetProcAddress("glGetUniformi64vARB");
    tunisGL.tunisGetUniformi64vNV = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLint64EXT *))tunisGLGetProcAddress("glGetUniformi64vNV");
    tunisGL.tunisGetUniformiv = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLint *))tunisGLGetProcAddress("glGetUniformiv");
    tunisGL.tunisGetUniformivARB = (void (KHRONOS_APIENTRY *)(GLhandleARB, GLint, GLint *))tunisGLGetProcAddress("glGetUniformivARB");
    tunisGL.tunisGetUniformui64vARB = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLuint64 *))tunisGLGetProcAddress("glGetUniformui64vARB");
    tunisGL.tunisGetUniformui64vNV = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLuint64EXT *))tunisGLGetProcAddress("glGetUniformui64vNV");
    tunisGL.tunisGetUniformuiv = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLuint *))tunisGLGetProcAddress("glGetUniformuiv");
    tunisGL.tunisGetUniformuivEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLuint *))tunisGLGetProcAddress("glGetUniformuivEXT");
    tunisGL.tunisGetUnsignedBytei_vEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLubyte *))tunisGLGetProcAddress("glGetUnsignedBytei_vEXT");
    tunisGL.tunisGetUnsignedBytevEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLubyte *))tunisGLGetProcAddress("glGetUnsignedBytevEXT");
    tunisGL.tunisGetVariantArrayObjectfvATI = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLfloat *))tunisGLGetProcAddress("glGetVariantArrayObjectfvATI");
    tunisGL.tunisGetVariantArrayObjectivATI = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint *))tunisGLGetProcAddress("glGetVariantArrayObjectivATI");
    tunisGL.tunisGetVariantBooleanvEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLboolean *))tunisGLGetProcAddress("glGetVariantBooleanvEXT");
    tunisGL.tunisGetVariantFloatvEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLfloat *))tunisGLGetProcAddress("glGetVariantFloatvEXT");
    tunisGL.tunisGetVariantIntegervEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint *))tunisGLGetProcAddress("glGetVariantIntegervEXT");
    tunisGL.tunisGetVariantPointervEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, void **))tunisGLGetProcAddress("glGetVariantPointervEXT");
    tunisGL.tunisGetVaryingLocationNV = (GLint(KHRONOS_APIENTRY *)(GLuint, const GLchar *))tunisGLGetProcAddress("glGetVaryingLocationNV");
    tunisGL.tunisGetVertexArrayIndexed64iv = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLenum, GLint64 *))tunisGLGetProcAddress("glGetVertexArrayIndexed64iv");
    tunisGL.tunisGetVertexArrayIndexediv = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLenum, GLint *))tunisGLGetProcAddress("glGetVertexArrayIndexediv");
    tunisGL.tunisGetVertexArrayIntegeri_vEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLenum, GLint *))tunisGLGetProcAddress("glGetVertexArrayIntegeri_vEXT");
    tunisGL.tunisGetVertexArrayIntegervEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint *))tunisGLGetProcAddress("glGetVertexArrayIntegervEXT");
    tunisGL.tunisGetVertexArrayPointeri_vEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLenum, void **))tunisGLGetProcAddress("glGetVertexArrayPointeri_vEXT");
    tunisGL.tunisGetVertexArrayPointervEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, void **))tunisGLGetProcAddress("glGetVertexArrayPointervEXT");
    tunisGL.tunisGetVertexArrayiv = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint *))tunisGLGetProcAddress("glGetVertexArrayiv");
    tunisGL.tunisGetVertexAttribArrayObjectfvATI = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLfloat *))tunisGLGetProcAddress("glGetVertexAttribArrayObjectfvATI");
    tunisGL.tunisGetVertexAttribArrayObjectivATI = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint *))tunisGLGetProcAddress("glGetVertexAttribArrayObjectivATI");
    tunisGL.tunisGetVertexAttribIiv = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint *))tunisGLGetProcAddress("glGetVertexAttribIiv");
    tunisGL.tunisGetVertexAttribIivEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint *))tunisGLGetProcAddress("glGetVertexAttribIivEXT");
    tunisGL.tunisGetVertexAttribIuiv = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLuint *))tunisGLGetProcAddress("glGetVertexAttribIuiv");
    tunisGL.tunisGetVertexAttribIuivEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLuint *))tunisGLGetProcAddress("glGetVertexAttribIuivEXT");
    tunisGL.tunisGetVertexAttribLdv = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLdouble *))tunisGLGetProcAddress("glGetVertexAttribLdv");
    tunisGL.tunisGetVertexAttribLdvEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLdouble *))tunisGLGetProcAddress("glGetVertexAttribLdvEXT");
    tunisGL.tunisGetVertexAttribLi64vNV = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint64EXT *))tunisGLGetProcAddress("glGetVertexAttribLi64vNV");
    tunisGL.tunisGetVertexAttribLui64vARB = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLuint64EXT *))tunisGLGetProcAddress("glGetVertexAttribLui64vARB");
    tunisGL.tunisGetVertexAttribLui64vNV = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLuint64EXT *))tunisGLGetProcAddress("glGetVertexAttribLui64vNV");
    tunisGL.tunisGetVertexAttribPointerv = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, void **))tunisGLGetProcAddress("glGetVertexAttribPointerv");
    tunisGL.tunisGetVertexAttribPointervARB = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, void **))tunisGLGetProcAddress("glGetVertexAttribPointervARB");
    tunisGL.tunisGetVertexAttribPointervNV = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, void **))tunisGLGetProcAddress("glGetVertexAttribPointervNV");
    tunisGL.tunisGetVertexAttribdv = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLdouble *))tunisGLGetProcAddress("glGetVertexAttribdv");
    tunisGL.tunisGetVertexAttribdvARB = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLdouble *))tunisGLGetProcAddress("glGetVertexAttribdvARB");
    tunisGL.tunisGetVertexAttribdvNV = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLdouble *))tunisGLGetProcAddress("glGetVertexAttribdvNV");
    tunisGL.tunisGetVertexAttribfv = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLfloat *))tunisGLGetProcAddress("glGetVertexAttribfv");
    tunisGL.tunisGetVertexAttribfvARB = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLfloat *))tunisGLGetProcAddress("glGetVertexAttribfvARB");
    tunisGL.tunisGetVertexAttribfvNV = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLfloat *))tunisGLGetProcAddress("glGetVertexAttribfvNV");
    tunisGL.tunisGetVertexAttribiv = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint *))tunisGLGetProcAddress("glGetVertexAttribiv");
    tunisGL.tunisGetVertexAttribivARB = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint *))tunisGLGetProcAddress("glGetVertexAttribivARB");
    tunisGL.tunisGetVertexAttribivNV = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint *))tunisGLGetProcAddress("glGetVertexAttribivNV");
    tunisGL.tunisGetVideoCaptureStreamdvNV = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLenum, GLdouble *))tunisGLGetProcAddress("glGetVideoCaptureStreamdvNV");
    tunisGL.tunisGetVideoCaptureStreamfvNV = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLenum, GLfloat *))tunisGLGetProcAddress("glGetVideoCaptureStreamfvNV");
    tunisGL.tunisGetVideoCaptureStreamivNV = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLenum, GLint *))tunisGLGetProcAddress("glGetVideoCaptureStreamivNV");
    tunisGL.tunisGetVideoCaptureivNV = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint *))tunisGLGetProcAddress("glGetVideoCaptureivNV");
    tunisGL.tunisGetVideoi64vNV = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint64EXT *))tunisGLGetProcAddress("glGetVideoi64vNV");
    tunisGL.tunisGetVideoivNV = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint *))tunisGLGetProcAddress("glGetVideoivNV");
    tunisGL.tunisGetVideoui64vNV = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLuint64EXT *))tunisGLGetProcAddress("glGetVideoui64vNV");
    tunisGL.tunisGetVideouivNV = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLuint *))tunisGLGetProcAddress("glGetVideouivNV");
    tunisGL.tunisGetVkProcAddrNV = (GLVULKANPROCNV(KHRONOS_APIENTRY *)(const GLchar *))tunisGLGetProcAddress("glGetVkProcAddrNV");
    tunisGL.tunisGetnColorTable = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLsizei, void *))tunisGLGetProcAddress("glGetnColorTable");
    tunisGL.tunisGetnColorTableARB = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLsizei, void *))tunisGLGetProcAddress("glGetnColorTableARB");
    tunisGL.tunisGetnCompressedTexImage = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLsizei, void *))tunisGLGetProcAddress("glGetnCompressedTexImage");
    tunisGL.tunisGetnCompressedTexImageARB = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLsizei, void *))tunisGLGetProcAddress("glGetnCompressedTexImageARB");
    tunisGL.tunisGetnConvolutionFilter = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLsizei, void *))tunisGLGetProcAddress("glGetnConvolutionFilter");
    tunisGL.tunisGetnConvolutionFilterARB = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLsizei, void *))tunisGLGetProcAddress("glGetnConvolutionFilterARB");
    tunisGL.tunisGetnHistogram = (void (KHRONOS_APIENTRY *)(GLenum, GLboolean, GLenum, GLenum, GLsizei, void *))tunisGLGetProcAddress("glGetnHistogram");
    tunisGL.tunisGetnHistogramARB = (void (KHRONOS_APIENTRY *)(GLenum, GLboolean, GLenum, GLenum, GLsizei, void *))tunisGLGetProcAddress("glGetnHistogramARB");
    tunisGL.tunisGetnMapdv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLsizei, GLdouble *))tunisGLGetProcAddress("glGetnMapdv");
    tunisGL.tunisGetnMapdvARB = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLsizei, GLdouble *))tunisGLGetProcAddress("glGetnMapdvARB");
    tunisGL.tunisGetnMapfv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLsizei, GLfloat *))tunisGLGetProcAddress("glGetnMapfv");
    tunisGL.tunisGetnMapfvARB = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLsizei, GLfloat *))tunisGLGetProcAddress("glGetnMapfvARB");
    tunisGL.tunisGetnMapiv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLsizei, GLint *))tunisGLGetProcAddress("glGetnMapiv");
    tunisGL.tunisGetnMapivARB = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLsizei, GLint *))tunisGLGetProcAddress("glGetnMapivARB");
    tunisGL.tunisGetnMinmax = (void (KHRONOS_APIENTRY *)(GLenum, GLboolean, GLenum, GLenum, GLsizei, void *))tunisGLGetProcAddress("glGetnMinmax");
    tunisGL.tunisGetnMinmaxARB = (void (KHRONOS_APIENTRY *)(GLenum, GLboolean, GLenum, GLenum, GLsizei, void *))tunisGLGetProcAddress("glGetnMinmaxARB");
    tunisGL.tunisGetnPixelMapfv = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLfloat *))tunisGLGetProcAddress("glGetnPixelMapfv");
    tunisGL.tunisGetnPixelMapfvARB = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLfloat *))tunisGLGetProcAddress("glGetnPixelMapfvARB");
    tunisGL.tunisGetnPixelMapuiv = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLuint *))tunisGLGetProcAddress("glGetnPixelMapuiv");
    tunisGL.tunisGetnPixelMapuivARB = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLuint *))tunisGLGetProcAddress("glGetnPixelMapuivARB");
    tunisGL.tunisGetnPixelMapusv = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLushort *))tunisGLGetProcAddress("glGetnPixelMapusv");
    tunisGL.tunisGetnPixelMapusvARB = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLushort *))tunisGLGetProcAddress("glGetnPixelMapusvARB");
    tunisGL.tunisGetnPolygonStipple = (void (KHRONOS_APIENTRY *)(GLsizei, GLubyte *))tunisGLGetProcAddress("glGetnPolygonStipple");
    tunisGL.tunisGetnPolygonStippleARB = (void (KHRONOS_APIENTRY *)(GLsizei, GLubyte *))tunisGLGetProcAddress("glGetnPolygonStippleARB");
    tunisGL.tunisGetnSeparableFilter = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLsizei, void *, GLsizei, void *, void *))tunisGLGetProcAddress("glGetnSeparableFilter");
    tunisGL.tunisGetnSeparableFilterARB = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLsizei, void *, GLsizei, void *, void *))tunisGLGetProcAddress("glGetnSeparableFilterARB");
    tunisGL.tunisGetnTexImage = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLenum, GLenum, GLsizei, void *))tunisGLGetProcAddress("glGetnTexImage");
    tunisGL.tunisGetnTexImageARB = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLenum, GLenum, GLsizei, void *))tunisGLGetProcAddress("glGetnTexImageARB");
    tunisGL.tunisGetnUniformdv = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, GLdouble *))tunisGLGetProcAddress("glGetnUniformdv");
    tunisGL.tunisGetnUniformdvARB = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, GLdouble *))tunisGLGetProcAddress("glGetnUniformdvARB");
    tunisGL.tunisGetnUniformfv = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, GLfloat *))tunisGLGetProcAddress("glGetnUniformfv");
    tunisGL.tunisGetnUniformfvARB = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, GLfloat *))tunisGLGetProcAddress("glGetnUniformfvARB");
    tunisGL.tunisGetnUniformfvEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, GLfloat *))tunisGLGetProcAddress("glGetnUniformfvEXT");
    tunisGL.tunisGetnUniformfvKHR = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, GLfloat *))tunisGLGetProcAddress("glGetnUniformfvKHR");
    tunisGL.tunisGetnUniformi64vARB = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, GLint64 *))tunisGLGetProcAddress("glGetnUniformi64vARB");
    tunisGL.tunisGetnUniformiv = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, GLint *))tunisGLGetProcAddress("glGetnUniformiv");
    tunisGL.tunisGetnUniformivARB = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, GLint *))tunisGLGetProcAddress("glGetnUniformivARB");
    tunisGL.tunisGetnUniformivEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, GLint *))tunisGLGetProcAddress("glGetnUniformivEXT");
    tunisGL.tunisGetnUniformivKHR = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, GLint *))tunisGLGetProcAddress("glGetnUniformivKHR");
    tunisGL.tunisGetnUniformui64vARB = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, GLuint64 *))tunisGLGetProcAddress("glGetnUniformui64vARB");
    tunisGL.tunisGetnUniformuiv = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, GLuint *))tunisGLGetProcAddress("glGetnUniformuiv");
    tunisGL.tunisGetnUniformuivARB = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, GLuint *))tunisGLGetProcAddress("glGetnUniformuivARB");
    tunisGL.tunisGetnUniformuivKHR = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, GLuint *))tunisGLGetProcAddress("glGetnUniformuivKHR");
    tunisGL.tunisGlobalAlphaFactorbSUN = (void (KHRONOS_APIENTRY *)(GLbyte))tunisGLGetProcAddress("glGlobalAlphaFactorbSUN");
    tunisGL.tunisGlobalAlphaFactordSUN = (void (KHRONOS_APIENTRY *)(GLdouble))tunisGLGetProcAddress("glGlobalAlphaFactordSUN");
    tunisGL.tunisGlobalAlphaFactorfSUN = (void (KHRONOS_APIENTRY *)(GLfloat))tunisGLGetProcAddress("glGlobalAlphaFactorfSUN");
    tunisGL.tunisGlobalAlphaFactoriSUN = (void (KHRONOS_APIENTRY *)(GLint))tunisGLGetProcAddress("glGlobalAlphaFactoriSUN");
    tunisGL.tunisGlobalAlphaFactorsSUN = (void (KHRONOS_APIENTRY *)(GLshort))tunisGLGetProcAddress("glGlobalAlphaFactorsSUN");
    tunisGL.tunisGlobalAlphaFactorubSUN = (void (KHRONOS_APIENTRY *)(GLubyte))tunisGLGetProcAddress("glGlobalAlphaFactorubSUN");
    tunisGL.tunisGlobalAlphaFactoruiSUN = (void (KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glGlobalAlphaFactoruiSUN");
    tunisGL.tunisGlobalAlphaFactorusSUN = (void (KHRONOS_APIENTRY *)(GLushort))tunisGLGetProcAddress("glGlobalAlphaFactorusSUN");
    tunisGL.tunisHint = (void (KHRONOS_APIENTRY *)(GLenum, GLenum))tunisGLGetProcAddress("glHint");
    tunisGL.tunisHintPGI = (void (KHRONOS_APIENTRY *)(GLenum, GLint))tunisGLGetProcAddress("glHintPGI");
    tunisGL.tunisHistogram = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLenum, GLboolean))tunisGLGetProcAddress("glHistogram");
    tunisGL.tunisHistogramEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLenum, GLboolean))tunisGLGetProcAddress("glHistogramEXT");
    tunisGL.tunisIglooInterfaceSGIX = (void (KHRONOS_APIENTRY *)(GLenum, const void *))tunisGLGetProcAddress("glIglooInterfaceSGIX");
    tunisGL.tunisImageTransformParameterfHP = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfloat))tunisGLGetProcAddress("glImageTransformParameterfHP");
    tunisGL.tunisImageTransformParameterfvHP = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const GLfloat *))tunisGLGetProcAddress("glImageTransformParameterfvHP");
    tunisGL.tunisImageTransformParameteriHP = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint))tunisGLGetProcAddress("glImageTransformParameteriHP");
    tunisGL.tunisImageTransformParameterivHP = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const GLint *))tunisGLGetProcAddress("glImageTransformParameterivHP");
    tunisGL.tunisImportMemoryFdEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLuint64, GLenum, GLint))tunisGLGetProcAddress("glImportMemoryFdEXT");
    tunisGL.tunisImportMemoryWin32HandleEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLuint64, GLenum, void *))tunisGLGetProcAddress("glImportMemoryWin32HandleEXT");
    tunisGL.tunisImportMemoryWin32NameEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLuint64, GLenum, const void *))tunisGLGetProcAddress("glImportMemoryWin32NameEXT");
    tunisGL.tunisImportSemaphoreFdEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint))tunisGLGetProcAddress("glImportSemaphoreFdEXT");
    tunisGL.tunisImportSemaphoreWin32HandleEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, void *))tunisGLGetProcAddress("glImportSemaphoreWin32HandleEXT");
    tunisGL.tunisImportSemaphoreWin32NameEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, const void *))tunisGLGetProcAddress("glImportSemaphoreWin32NameEXT");
    tunisGL.tunisImportSyncEXT = (GLsync(KHRONOS_APIENTRY *)(GLenum, GLintptr, GLbitfield))tunisGLGetProcAddress("glImportSyncEXT");
    tunisGL.tunisIndexFormatNV = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei))tunisGLGetProcAddress("glIndexFormatNV");
    tunisGL.tunisIndexFuncEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLclampf))tunisGLGetProcAddress("glIndexFuncEXT");
    tunisGL.tunisIndexMask = (void (KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glIndexMask");
    tunisGL.tunisIndexMaterialEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum))tunisGLGetProcAddress("glIndexMaterialEXT");
    tunisGL.tunisIndexPointer = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, const void *))tunisGLGetProcAddress("glIndexPointer");
    tunisGL.tunisIndexPointerEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLsizei, const void *))tunisGLGetProcAddress("glIndexPointerEXT");
    tunisGL.tunisIndexPointerListIBM = (void (KHRONOS_APIENTRY *)(GLenum, GLint, const void **, GLint))tunisGLGetProcAddress("glIndexPointerListIBM");
    tunisGL.tunisIndexd = (void (KHRONOS_APIENTRY *)(GLdouble))tunisGLGetProcAddress("glIndexd");
    tunisGL.tunisIndexdv = (void (KHRONOS_APIENTRY *)(const GLdouble *))tunisGLGetProcAddress("glIndexdv");
    tunisGL.tunisIndexf = (void (KHRONOS_APIENTRY *)(GLfloat))tunisGLGetProcAddress("glIndexf");
    tunisGL.tunisIndexfv = (void (KHRONOS_APIENTRY *)(const GLfloat *))tunisGLGetProcAddress("glIndexfv");
    tunisGL.tunisIndexi = (void (KHRONOS_APIENTRY *)(GLint))tunisGLGetProcAddress("glIndexi");
    tunisGL.tunisIndexiv = (void (KHRONOS_APIENTRY *)(const GLint *))tunisGLGetProcAddress("glIndexiv");
    tunisGL.tunisIndexs = (void (KHRONOS_APIENTRY *)(GLshort))tunisGLGetProcAddress("glIndexs");
    tunisGL.tunisIndexsv = (void (KHRONOS_APIENTRY *)(const GLshort *))tunisGLGetProcAddress("glIndexsv");
    tunisGL.tunisIndexub = (void (KHRONOS_APIENTRY *)(GLubyte))tunisGLGetProcAddress("glIndexub");
    tunisGL.tunisIndexubv = (void (KHRONOS_APIENTRY *)(const GLubyte *))tunisGLGetProcAddress("glIndexubv");
    tunisGL.tunisIndexxOES = (void (KHRONOS_APIENTRY *)(GLfixed))tunisGLGetProcAddress("glIndexxOES");
    tunisGL.tunisIndexxvOES = (void (KHRONOS_APIENTRY *)(const GLfixed *))tunisGLGetProcAddress("glIndexxvOES");
    tunisGL.tunisInitNames = (void (KHRONOS_APIENTRY *)(void))tunisGLGetProcAddress("glInitNames");
    tunisGL.tunisInsertComponentEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLuint))tunisGLGetProcAddress("glInsertComponentEXT");
    tunisGL.tunisInsertEventMarkerEXT = (void (KHRONOS_APIENTRY *)(GLsizei, const GLchar *))tunisGLGetProcAddress("glInsertEventMarkerEXT");
    tunisGL.tunisInstrumentsBufferSGIX = (void (KHRONOS_APIENTRY *)(GLsizei, GLint *))tunisGLGetProcAddress("glInstrumentsBufferSGIX");
    tunisGL.tunisInterleavedArrays = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, const void *))tunisGLGetProcAddress("glInterleavedArrays");
    tunisGL.tunisInterpolatePathsNV = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLuint, GLfloat))tunisGLGetProcAddress("glInterpolatePathsNV");
    tunisGL.tunisInvalidateBufferData = (void (KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glInvalidateBufferData");
    tunisGL.tunisInvalidateBufferSubData = (void (KHRONOS_APIENTRY *)(GLuint, GLintptr, GLsizeiptr))tunisGLGetProcAddress("glInvalidateBufferSubData");
    tunisGL.tunisInvalidateFramebuffer = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, const GLenum *))tunisGLGetProcAddress("glInvalidateFramebuffer");
    tunisGL.tunisInvalidateNamedFramebufferData = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, const GLenum *))tunisGLGetProcAddress("glInvalidateNamedFramebufferData");
    tunisGL.tunisInvalidateNamedFramebufferSubData = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, const GLenum *, GLint, GLint, GLsizei, GLsizei))tunisGLGetProcAddress("glInvalidateNamedFramebufferSubData");
    tunisGL.tunisInvalidateSubFramebuffer = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, const GLenum *, GLint, GLint, GLsizei, GLsizei))tunisGLGetProcAddress("glInvalidateSubFramebuffer");
    tunisGL.tunisInvalidateTexImage = (void (KHRONOS_APIENTRY *)(GLuint, GLint))tunisGLGetProcAddress("glInvalidateTexImage");
    tunisGL.tunisInvalidateTexSubImage = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei))tunisGLGetProcAddress("glInvalidateTexSubImage");
    tunisGL.tunisIsAsyncMarkerSGIX = (GLboolean(KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glIsAsyncMarkerSGIX");
    tunisGL.tunisIsBuffer = (GLboolean(KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glIsBuffer");
    tunisGL.tunisIsBufferARB = (GLboolean(KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glIsBufferARB");
    tunisGL.tunisIsBufferResidentNV = (GLboolean(KHRONOS_APIENTRY *)(GLenum))tunisGLGetProcAddress("glIsBufferResidentNV");
    tunisGL.tunisIsCommandListNV = (GLboolean(KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glIsCommandListNV");
    tunisGL.tunisIsEnabled = (GLboolean(KHRONOS_APIENTRY *)(GLenum))tunisGLGetProcAddress("glIsEnabled");
    tunisGL.tunisIsEnabledIndexedEXT = (GLboolean(KHRONOS_APIENTRY *)(GLenum, GLuint))tunisGLGetProcAddress("glIsEnabledIndexedEXT");
    tunisGL.tunisIsEnabledi = (GLboolean(KHRONOS_APIENTRY *)(GLenum, GLuint))tunisGLGetProcAddress("glIsEnabledi");
    tunisGL.tunisIsEnablediEXT = (GLboolean(KHRONOS_APIENTRY *)(GLenum, GLuint))tunisGLGetProcAddress("glIsEnablediEXT");
    tunisGL.tunisIsEnablediNV = (GLboolean(KHRONOS_APIENTRY *)(GLenum, GLuint))tunisGLGetProcAddress("glIsEnablediNV");
    tunisGL.tunisIsEnablediOES = (GLboolean(KHRONOS_APIENTRY *)(GLenum, GLuint))tunisGLGetProcAddress("glIsEnablediOES");
    tunisGL.tunisIsFenceAPPLE = (GLboolean(KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glIsFenceAPPLE");
    tunisGL.tunisIsFenceNV = (GLboolean(KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glIsFenceNV");
    tunisGL.tunisIsFramebuffer = (GLboolean(KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glIsFramebuffer");
    tunisGL.tunisIsFramebufferEXT = (GLboolean(KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glIsFramebufferEXT");
    tunisGL.tunisIsFramebufferOES = (GLboolean(KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glIsFramebufferOES");
    tunisGL.tunisIsImageHandleResidentARB = (GLboolean(KHRONOS_APIENTRY *)(GLuint64))tunisGLGetProcAddress("glIsImageHandleResidentARB");
    tunisGL.tunisIsImageHandleResidentNV = (GLboolean(KHRONOS_APIENTRY *)(GLuint64))tunisGLGetProcAddress("glIsImageHandleResidentNV");
    tunisGL.tunisIsList = (GLboolean(KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glIsList");
    tunisGL.tunisIsMemoryObjectEXT = (GLboolean(KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glIsMemoryObjectEXT");
    tunisGL.tunisIsNameAMD = (GLboolean(KHRONOS_APIENTRY *)(GLenum, GLuint))tunisGLGetProcAddress("glIsNameAMD");
    tunisGL.tunisIsNamedBufferResidentNV = (GLboolean(KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glIsNamedBufferResidentNV");
    tunisGL.tunisIsNamedStringARB = (GLboolean(KHRONOS_APIENTRY *)(GLint, const GLchar *))tunisGLGetProcAddress("glIsNamedStringARB");
    tunisGL.tunisIsObjectBufferATI = (GLboolean(KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glIsObjectBufferATI");
    tunisGL.tunisIsOcclusionQueryNV = (GLboolean(KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glIsOcclusionQueryNV");
    tunisGL.tunisIsPathNV = (GLboolean(KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glIsPathNV");
    tunisGL.tunisIsPointInFillPathNV = (GLboolean(KHRONOS_APIENTRY *)(GLuint, GLuint, GLfloat, GLfloat))tunisGLGetProcAddress("glIsPointInFillPathNV");
    tunisGL.tunisIsPointInStrokePathNV = (GLboolean(KHRONOS_APIENTRY *)(GLuint, GLfloat, GLfloat))tunisGLGetProcAddress("glIsPointInStrokePathNV");
    tunisGL.tunisIsProgram = (GLboolean(KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glIsProgram");
    tunisGL.tunisIsProgramARB = (GLboolean(KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glIsProgramARB");
    tunisGL.tunisIsProgramNV = (GLboolean(KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glIsProgramNV");
    tunisGL.tunisIsProgramPipeline = (GLboolean(KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glIsProgramPipeline");
    tunisGL.tunisIsProgramPipelineEXT = (GLboolean(KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glIsProgramPipelineEXT");
    tunisGL.tunisIsQuery = (GLboolean(KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glIsQuery");
    tunisGL.tunisIsQueryARB = (GLboolean(KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glIsQueryARB");
    tunisGL.tunisIsQueryEXT = (GLboolean(KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glIsQueryEXT");
    tunisGL.tunisIsRenderbuffer = (GLboolean(KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glIsRenderbuffer");
    tunisGL.tunisIsRenderbufferEXT = (GLboolean(KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glIsRenderbufferEXT");
    tunisGL.tunisIsRenderbufferOES = (GLboolean(KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glIsRenderbufferOES");
    tunisGL.tunisIsSampler = (GLboolean(KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glIsSampler");
    tunisGL.tunisIsSemaphoreEXT = (GLboolean(KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glIsSemaphoreEXT");
    tunisGL.tunisIsShader = (GLboolean(KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glIsShader");
    tunisGL.tunisIsStateNV = (GLboolean(KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glIsStateNV");
    tunisGL.tunisIsSync = (GLboolean(KHRONOS_APIENTRY *)(GLsync))tunisGLGetProcAddress("glIsSync");
    tunisGL.tunisIsSyncAPPLE = (GLboolean(KHRONOS_APIENTRY *)(GLsync))tunisGLGetProcAddress("glIsSyncAPPLE");
    tunisGL.tunisIsTexture = (GLboolean(KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glIsTexture");
    tunisGL.tunisIsTextureEXT = (GLboolean(KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glIsTextureEXT");
    tunisGL.tunisIsTextureHandleResidentARB = (GLboolean(KHRONOS_APIENTRY *)(GLuint64))tunisGLGetProcAddress("glIsTextureHandleResidentARB");
    tunisGL.tunisIsTextureHandleResidentNV = (GLboolean(KHRONOS_APIENTRY *)(GLuint64))tunisGLGetProcAddress("glIsTextureHandleResidentNV");
    tunisGL.tunisIsTransformFeedback = (GLboolean(KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glIsTransformFeedback");
    tunisGL.tunisIsTransformFeedbackNV = (GLboolean(KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glIsTransformFeedbackNV");
    tunisGL.tunisIsVariantEnabledEXT = (GLboolean(KHRONOS_APIENTRY *)(GLuint, GLenum))tunisGLGetProcAddress("glIsVariantEnabledEXT");
    tunisGL.tunisIsVertexArray = (GLboolean(KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glIsVertexArray");
    tunisGL.tunisIsVertexArrayAPPLE = (GLboolean(KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glIsVertexArrayAPPLE");
    tunisGL.tunisIsVertexArrayOES = (GLboolean(KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glIsVertexArrayOES");
    tunisGL.tunisIsVertexAttribEnabledAPPLE = (GLboolean(KHRONOS_APIENTRY *)(GLuint, GLenum))tunisGLGetProcAddress("glIsVertexAttribEnabledAPPLE");
    tunisGL.tunisLGPUCopyImageSubDataNVX = (void (KHRONOS_APIENTRY *)(GLuint, GLbitfield, GLuint, GLenum, GLint, GLint, GLint, GLint, GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei))tunisGLGetProcAddress("glLGPUCopyImageSubDataNVX");
    tunisGL.tunisLGPUInterlockNVX = (void (KHRONOS_APIENTRY *)(void))tunisGLGetProcAddress("glLGPUInterlockNVX");
    tunisGL.tunisLGPUNamedBufferSubDataNVX = (void (KHRONOS_APIENTRY *)(GLbitfield, GLuint, GLintptr, GLsizeiptr, const void *))tunisGLGetProcAddress("glLGPUNamedBufferSubDataNVX");
    tunisGL.tunisLabelObjectEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLsizei, const GLchar *))tunisGLGetProcAddress("glLabelObjectEXT");
    tunisGL.tunisLightEnviSGIX = (void (KHRONOS_APIENTRY *)(GLenum, GLint))tunisGLGetProcAddress("glLightEnviSGIX");
    tunisGL.tunisLightModelf = (void (KHRONOS_APIENTRY *)(GLenum, GLfloat))tunisGLGetProcAddress("glLightModelf");
    tunisGL.tunisLightModelfv = (void (KHRONOS_APIENTRY *)(GLenum, const GLfloat *))tunisGLGetProcAddress("glLightModelfv");
    tunisGL.tunisLightModeli = (void (KHRONOS_APIENTRY *)(GLenum, GLint))tunisGLGetProcAddress("glLightModeli");
    tunisGL.tunisLightModeliv = (void (KHRONOS_APIENTRY *)(GLenum, const GLint *))tunisGLGetProcAddress("glLightModeliv");
    tunisGL.tunisLightModelx = (void (KHRONOS_APIENTRY *)(GLenum, GLfixed))tunisGLGetProcAddress("glLightModelx");
    tunisGL.tunisLightModelxOES = (void (KHRONOS_APIENTRY *)(GLenum, GLfixed))tunisGLGetProcAddress("glLightModelxOES");
    tunisGL.tunisLightModelxv = (void (KHRONOS_APIENTRY *)(GLenum, const GLfixed *))tunisGLGetProcAddress("glLightModelxv");
    tunisGL.tunisLightModelxvOES = (void (KHRONOS_APIENTRY *)(GLenum, const GLfixed *))tunisGLGetProcAddress("glLightModelxvOES");
    tunisGL.tunisLightf = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfloat))tunisGLGetProcAddress("glLightf");
    tunisGL.tunisLightfv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const GLfloat *))tunisGLGetProcAddress("glLightfv");
    tunisGL.tunisLighti = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint))tunisGLGetProcAddress("glLighti");
    tunisGL.tunisLightiv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const GLint *))tunisGLGetProcAddress("glLightiv");
    tunisGL.tunisLightx = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfixed))tunisGLGetProcAddress("glLightx");
    tunisGL.tunisLightxOES = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfixed))tunisGLGetProcAddress("glLightxOES");
    tunisGL.tunisLightxv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const GLfixed *))tunisGLGetProcAddress("glLightxv");
    tunisGL.tunisLightxvOES = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const GLfixed *))tunisGLGetProcAddress("glLightxvOES");
    tunisGL.tunisLineStipple = (void (KHRONOS_APIENTRY *)(GLint, GLushort))tunisGLGetProcAddress("glLineStipple");
    tunisGL.tunisLineWidth = (void (KHRONOS_APIENTRY *)(GLfloat))tunisGLGetProcAddress("glLineWidth");
    tunisGL.tunisLineWidthx = (void (KHRONOS_APIENTRY *)(GLfixed))tunisGLGetProcAddress("glLineWidthx");
    tunisGL.tunisLineWidthxOES = (void (KHRONOS_APIENTRY *)(GLfixed))tunisGLGetProcAddress("glLineWidthxOES");
    tunisGL.tunisLinkProgram = (void (KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glLinkProgram");
    tunisGL.tunisLinkProgramARB = (void (KHRONOS_APIENTRY *)(GLhandleARB))tunisGLGetProcAddress("glLinkProgramARB");
    tunisGL.tunisListBase = (void (KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glListBase");
    tunisGL.tunisListDrawCommandsStatesClientNV = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, const void **, const GLsizei *, const GLuint *, const GLuint *, GLuint))tunisGLGetProcAddress("glListDrawCommandsStatesClientNV");
    tunisGL.tunisListParameterfSGIX = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLfloat))tunisGLGetProcAddress("glListParameterfSGIX");
    tunisGL.tunisListParameterfvSGIX = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, const GLfloat *))tunisGLGetProcAddress("glListParameterfvSGIX");
    tunisGL.tunisListParameteriSGIX = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint))tunisGLGetProcAddress("glListParameteriSGIX");
    tunisGL.tunisListParameterivSGIX = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, const GLint *))tunisGLGetProcAddress("glListParameterivSGIX");
    tunisGL.tunisLoadIdentity = (void (KHRONOS_APIENTRY *)(void))tunisGLGetProcAddress("glLoadIdentity");
    tunisGL.tunisLoadIdentityDeformationMapSGIX = (void (KHRONOS_APIENTRY *)(GLbitfield))tunisGLGetProcAddress("glLoadIdentityDeformationMapSGIX");
    tunisGL.tunisLoadMatrixd = (void (KHRONOS_APIENTRY *)(const GLdouble *))tunisGLGetProcAddress("glLoadMatrixd");
    tunisGL.tunisLoadMatrixf = (void (KHRONOS_APIENTRY *)(const GLfloat *))tunisGLGetProcAddress("glLoadMatrixf");
    tunisGL.tunisLoadMatrixx = (void (KHRONOS_APIENTRY *)(const GLfixed *))tunisGLGetProcAddress("glLoadMatrixx");
    tunisGL.tunisLoadMatrixxOES = (void (KHRONOS_APIENTRY *)(const GLfixed *))tunisGLGetProcAddress("glLoadMatrixxOES");
    tunisGL.tunisLoadName = (void (KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glLoadName");
    tunisGL.tunisLoadPaletteFromModelViewMatrixOES = (void (KHRONOS_APIENTRY *)(void))tunisGLGetProcAddress("glLoadPaletteFromModelViewMatrixOES");
    tunisGL.tunisLoadProgramNV = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLsizei, const GLubyte *))tunisGLGetProcAddress("glLoadProgramNV");
    tunisGL.tunisLoadTransposeMatrixd = (void (KHRONOS_APIENTRY *)(const GLdouble *))tunisGLGetProcAddress("glLoadTransposeMatrixd");
    tunisGL.tunisLoadTransposeMatrixdARB = (void (KHRONOS_APIENTRY *)(const GLdouble *))tunisGLGetProcAddress("glLoadTransposeMatrixdARB");
    tunisGL.tunisLoadTransposeMatrixf = (void (KHRONOS_APIENTRY *)(const GLfloat *))tunisGLGetProcAddress("glLoadTransposeMatrixf");
    tunisGL.tunisLoadTransposeMatrixfARB = (void (KHRONOS_APIENTRY *)(const GLfloat *))tunisGLGetProcAddress("glLoadTransposeMatrixfARB");
    tunisGL.tunisLoadTransposeMatrixxOES = (void (KHRONOS_APIENTRY *)(const GLfixed *))tunisGLGetProcAddress("glLoadTransposeMatrixxOES");
    tunisGL.tunisLockArraysEXT = (void (KHRONOS_APIENTRY *)(GLint, GLsizei))tunisGLGetProcAddress("glLockArraysEXT");
    tunisGL.tunisLogicOp = (void (KHRONOS_APIENTRY *)(GLenum))tunisGLGetProcAddress("glLogicOp");
    tunisGL.tunisMakeBufferNonResidentNV = (void (KHRONOS_APIENTRY *)(GLenum))tunisGLGetProcAddress("glMakeBufferNonResidentNV");
    tunisGL.tunisMakeBufferResidentNV = (void (KHRONOS_APIENTRY *)(GLenum, GLenum))tunisGLGetProcAddress("glMakeBufferResidentNV");
    tunisGL.tunisMakeImageHandleNonResidentARB = (void (KHRONOS_APIENTRY *)(GLuint64))tunisGLGetProcAddress("glMakeImageHandleNonResidentARB");
    tunisGL.tunisMakeImageHandleNonResidentNV = (void (KHRONOS_APIENTRY *)(GLuint64))tunisGLGetProcAddress("glMakeImageHandleNonResidentNV");
    tunisGL.tunisMakeImageHandleResidentARB = (void (KHRONOS_APIENTRY *)(GLuint64, GLenum))tunisGLGetProcAddress("glMakeImageHandleResidentARB");
    tunisGL.tunisMakeImageHandleResidentNV = (void (KHRONOS_APIENTRY *)(GLuint64, GLenum))tunisGLGetProcAddress("glMakeImageHandleResidentNV");
    tunisGL.tunisMakeNamedBufferNonResidentNV = (void (KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glMakeNamedBufferNonResidentNV");
    tunisGL.tunisMakeNamedBufferResidentNV = (void (KHRONOS_APIENTRY *)(GLuint, GLenum))tunisGLGetProcAddress("glMakeNamedBufferResidentNV");
    tunisGL.tunisMakeTextureHandleNonResidentARB = (void (KHRONOS_APIENTRY *)(GLuint64))tunisGLGetProcAddress("glMakeTextureHandleNonResidentARB");
    tunisGL.tunisMakeTextureHandleNonResidentNV = (void (KHRONOS_APIENTRY *)(GLuint64))tunisGLGetProcAddress("glMakeTextureHandleNonResidentNV");
    tunisGL.tunisMakeTextureHandleResidentARB = (void (KHRONOS_APIENTRY *)(GLuint64))tunisGLGetProcAddress("glMakeTextureHandleResidentARB");
    tunisGL.tunisMakeTextureHandleResidentNV = (void (KHRONOS_APIENTRY *)(GLuint64))tunisGLGetProcAddress("glMakeTextureHandleResidentNV");
    tunisGL.tunisMap1d = (void (KHRONOS_APIENTRY *)(GLenum, GLdouble, GLdouble, GLint, GLint, const GLdouble *))tunisGLGetProcAddress("glMap1d");
    tunisGL.tunisMap1f = (void (KHRONOS_APIENTRY *)(GLenum, GLfloat, GLfloat, GLint, GLint, const GLfloat *))tunisGLGetProcAddress("glMap1f");
    tunisGL.tunisMap1xOES = (void (KHRONOS_APIENTRY *)(GLenum, GLfixed, GLfixed, GLint, GLint, GLfixed))tunisGLGetProcAddress("glMap1xOES");
    tunisGL.tunisMap2d = (void (KHRONOS_APIENTRY *)(GLenum, GLdouble, GLdouble, GLint, GLint, GLdouble, GLdouble, GLint, GLint, const GLdouble *))tunisGLGetProcAddress("glMap2d");
    tunisGL.tunisMap2f = (void (KHRONOS_APIENTRY *)(GLenum, GLfloat, GLfloat, GLint, GLint, GLfloat, GLfloat, GLint, GLint, const GLfloat *))tunisGLGetProcAddress("glMap2f");
    tunisGL.tunisMap2xOES = (void (KHRONOS_APIENTRY *)(GLenum, GLfixed, GLfixed, GLint, GLint, GLfixed, GLfixed, GLint, GLint, GLfixed))tunisGLGetProcAddress("glMap2xOES");
    tunisGL.tunisMapBuffer = (void *(KHRONOS_APIENTRY *)(GLenum, GLenum))tunisGLGetProcAddress("glMapBuffer");
    tunisGL.tunisMapBufferARB = (void *(KHRONOS_APIENTRY *)(GLenum, GLenum))tunisGLGetProcAddress("glMapBufferARB");
    tunisGL.tunisMapBufferOES = (void *(KHRONOS_APIENTRY *)(GLenum, GLenum))tunisGLGetProcAddress("glMapBufferOES");
    tunisGL.tunisMapBufferRange = (void *(KHRONOS_APIENTRY *)(GLenum, GLintptr, GLsizeiptr, GLbitfield))tunisGLGetProcAddress("glMapBufferRange");
    tunisGL.tunisMapBufferRangeEXT = (void *(KHRONOS_APIENTRY *)(GLenum, GLintptr, GLsizeiptr, GLbitfield))tunisGLGetProcAddress("glMapBufferRangeEXT");
    tunisGL.tunisMapControlPointsNV = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLenum, GLsizei, GLsizei, GLint, GLint, GLboolean, const void *))tunisGLGetProcAddress("glMapControlPointsNV");
    tunisGL.tunisMapGrid1d = (void (KHRONOS_APIENTRY *)(GLint, GLdouble, GLdouble))tunisGLGetProcAddress("glMapGrid1d");
    tunisGL.tunisMapGrid1f = (void (KHRONOS_APIENTRY *)(GLint, GLfloat, GLfloat))tunisGLGetProcAddress("glMapGrid1f");
    tunisGL.tunisMapGrid1xOES = (void (KHRONOS_APIENTRY *)(GLint, GLfixed, GLfixed))tunisGLGetProcAddress("glMapGrid1xOES");
    tunisGL.tunisMapGrid2d = (void (KHRONOS_APIENTRY *)(GLint, GLdouble, GLdouble, GLint, GLdouble, GLdouble))tunisGLGetProcAddress("glMapGrid2d");
    tunisGL.tunisMapGrid2f = (void (KHRONOS_APIENTRY *)(GLint, GLfloat, GLfloat, GLint, GLfloat, GLfloat))tunisGLGetProcAddress("glMapGrid2f");
    tunisGL.tunisMapGrid2xOES = (void (KHRONOS_APIENTRY *)(GLint, GLfixed, GLfixed, GLfixed, GLfixed))tunisGLGetProcAddress("glMapGrid2xOES");
    tunisGL.tunisMapNamedBuffer = (void *(KHRONOS_APIENTRY *)(GLuint, GLenum))tunisGLGetProcAddress("glMapNamedBuffer");
    tunisGL.tunisMapNamedBufferEXT = (void *(KHRONOS_APIENTRY *)(GLuint, GLenum))tunisGLGetProcAddress("glMapNamedBufferEXT");
    tunisGL.tunisMapNamedBufferRange = (void *(KHRONOS_APIENTRY *)(GLuint, GLintptr, GLsizeiptr, GLbitfield))tunisGLGetProcAddress("glMapNamedBufferRange");
    tunisGL.tunisMapNamedBufferRangeEXT = (void *(KHRONOS_APIENTRY *)(GLuint, GLintptr, GLsizeiptr, GLbitfield))tunisGLGetProcAddress("glMapNamedBufferRangeEXT");
    tunisGL.tunisMapObjectBufferATI = (void *(KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glMapObjectBufferATI");
    tunisGL.tunisMapParameterfvNV = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const GLfloat *))tunisGLGetProcAddress("glMapParameterfvNV");
    tunisGL.tunisMapParameterivNV = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const GLint *))tunisGLGetProcAddress("glMapParameterivNV");
    tunisGL.tunisMapTexture2DINTEL = (void *(KHRONOS_APIENTRY *)(GLuint, GLint, GLbitfield, GLint *, GLenum *))tunisGLGetProcAddress("glMapTexture2DINTEL");
    tunisGL.tunisMapVertexAttrib1dAPPLE = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLdouble, GLdouble, GLint, GLint, const GLdouble *))tunisGLGetProcAddress("glMapVertexAttrib1dAPPLE");
    tunisGL.tunisMapVertexAttrib1fAPPLE = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLfloat, GLfloat, GLint, GLint, const GLfloat *))tunisGLGetProcAddress("glMapVertexAttrib1fAPPLE");
    tunisGL.tunisMapVertexAttrib2dAPPLE = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLdouble, GLdouble, GLint, GLint, GLdouble, GLdouble, GLint, GLint, const GLdouble *))tunisGLGetProcAddress("glMapVertexAttrib2dAPPLE");
    tunisGL.tunisMapVertexAttrib2fAPPLE = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLfloat, GLfloat, GLint, GLint, GLfloat, GLfloat, GLint, GLint, const GLfloat *))tunisGLGetProcAddress("glMapVertexAttrib2fAPPLE");
    tunisGL.tunisMaterialf = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfloat))tunisGLGetProcAddress("glMaterialf");
    tunisGL.tunisMaterialfv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const GLfloat *))tunisGLGetProcAddress("glMaterialfv");
    tunisGL.tunisMateriali = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint))tunisGLGetProcAddress("glMateriali");
    tunisGL.tunisMaterialiv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const GLint *))tunisGLGetProcAddress("glMaterialiv");
    tunisGL.tunisMaterialx = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfixed))tunisGLGetProcAddress("glMaterialx");
    tunisGL.tunisMaterialxOES = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfixed))tunisGLGetProcAddress("glMaterialxOES");
    tunisGL.tunisMaterialxv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const GLfixed *))tunisGLGetProcAddress("glMaterialxv");
    tunisGL.tunisMaterialxvOES = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const GLfixed *))tunisGLGetProcAddress("glMaterialxvOES");
    tunisGL.tunisMatrixFrustumEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble))tunisGLGetProcAddress("glMatrixFrustumEXT");
    tunisGL.tunisMatrixIndexPointerARB = (void (KHRONOS_APIENTRY *)(GLint, GLenum, GLsizei, const void *))tunisGLGetProcAddress("glMatrixIndexPointerARB");
    tunisGL.tunisMatrixIndexPointerOES = (void (KHRONOS_APIENTRY *)(GLint, GLenum, GLsizei, const void *))tunisGLGetProcAddress("glMatrixIndexPointerOES");
    tunisGL.tunisMatrixIndexubvARB = (void (KHRONOS_APIENTRY *)(GLint, const GLubyte *))tunisGLGetProcAddress("glMatrixIndexubvARB");
    tunisGL.tunisMatrixIndexuivARB = (void (KHRONOS_APIENTRY *)(GLint, const GLuint *))tunisGLGetProcAddress("glMatrixIndexuivARB");
    tunisGL.tunisMatrixIndexusvARB = (void (KHRONOS_APIENTRY *)(GLint, const GLushort *))tunisGLGetProcAddress("glMatrixIndexusvARB");
    tunisGL.tunisMatrixLoad3x2fNV = (void (KHRONOS_APIENTRY *)(GLenum, const GLfloat *))tunisGLGetProcAddress("glMatrixLoad3x2fNV");
    tunisGL.tunisMatrixLoad3x3fNV = (void (KHRONOS_APIENTRY *)(GLenum, const GLfloat *))tunisGLGetProcAddress("glMatrixLoad3x3fNV");
    tunisGL.tunisMatrixLoadIdentityEXT = (void (KHRONOS_APIENTRY *)(GLenum))tunisGLGetProcAddress("glMatrixLoadIdentityEXT");
    tunisGL.tunisMatrixLoadTranspose3x3fNV = (void (KHRONOS_APIENTRY *)(GLenum, const GLfloat *))tunisGLGetProcAddress("glMatrixLoadTranspose3x3fNV");
    tunisGL.tunisMatrixLoadTransposedEXT = (void (KHRONOS_APIENTRY *)(GLenum, const GLdouble *))tunisGLGetProcAddress("glMatrixLoadTransposedEXT");
    tunisGL.tunisMatrixLoadTransposefEXT = (void (KHRONOS_APIENTRY *)(GLenum, const GLfloat *))tunisGLGetProcAddress("glMatrixLoadTransposefEXT");
    tunisGL.tunisMatrixLoaddEXT = (void (KHRONOS_APIENTRY *)(GLenum, const GLdouble *))tunisGLGetProcAddress("glMatrixLoaddEXT");
    tunisGL.tunisMatrixLoadfEXT = (void (KHRONOS_APIENTRY *)(GLenum, const GLfloat *))tunisGLGetProcAddress("glMatrixLoadfEXT");
    tunisGL.tunisMatrixMode = (void (KHRONOS_APIENTRY *)(GLenum))tunisGLGetProcAddress("glMatrixMode");
    tunisGL.tunisMatrixMult3x2fNV = (void (KHRONOS_APIENTRY *)(GLenum, const GLfloat *))tunisGLGetProcAddress("glMatrixMult3x2fNV");
    tunisGL.tunisMatrixMult3x3fNV = (void (KHRONOS_APIENTRY *)(GLenum, const GLfloat *))tunisGLGetProcAddress("glMatrixMult3x3fNV");
    tunisGL.tunisMatrixMultTranspose3x3fNV = (void (KHRONOS_APIENTRY *)(GLenum, const GLfloat *))tunisGLGetProcAddress("glMatrixMultTranspose3x3fNV");
    tunisGL.tunisMatrixMultTransposedEXT = (void (KHRONOS_APIENTRY *)(GLenum, const GLdouble *))tunisGLGetProcAddress("glMatrixMultTransposedEXT");
    tunisGL.tunisMatrixMultTransposefEXT = (void (KHRONOS_APIENTRY *)(GLenum, const GLfloat *))tunisGLGetProcAddress("glMatrixMultTransposefEXT");
    tunisGL.tunisMatrixMultdEXT = (void (KHRONOS_APIENTRY *)(GLenum, const GLdouble *))tunisGLGetProcAddress("glMatrixMultdEXT");
    tunisGL.tunisMatrixMultfEXT = (void (KHRONOS_APIENTRY *)(GLenum, const GLfloat *))tunisGLGetProcAddress("glMatrixMultfEXT");
    tunisGL.tunisMatrixOrthoEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble))tunisGLGetProcAddress("glMatrixOrthoEXT");
    tunisGL.tunisMatrixPopEXT = (void (KHRONOS_APIENTRY *)(GLenum))tunisGLGetProcAddress("glMatrixPopEXT");
    tunisGL.tunisMatrixPushEXT = (void (KHRONOS_APIENTRY *)(GLenum))tunisGLGetProcAddress("glMatrixPushEXT");
    tunisGL.tunisMatrixRotatedEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLdouble, GLdouble, GLdouble, GLdouble))tunisGLGetProcAddress("glMatrixRotatedEXT");
    tunisGL.tunisMatrixRotatefEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLfloat, GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glMatrixRotatefEXT");
    tunisGL.tunisMatrixScaledEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLdouble, GLdouble, GLdouble))tunisGLGetProcAddress("glMatrixScaledEXT");
    tunisGL.tunisMatrixScalefEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glMatrixScalefEXT");
    tunisGL.tunisMatrixTranslatedEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLdouble, GLdouble, GLdouble))tunisGLGetProcAddress("glMatrixTranslatedEXT");
    tunisGL.tunisMatrixTranslatefEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glMatrixTranslatefEXT");
    tunisGL.tunisMaxShaderCompilerThreadsARB = (void (KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glMaxShaderCompilerThreadsARB");
    tunisGL.tunisMaxShaderCompilerThreadsKHR = (void (KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glMaxShaderCompilerThreadsKHR");
    tunisGL.tunisMemoryBarrier = (void (KHRONOS_APIENTRY *)(GLbitfield))tunisGLGetProcAddress("glMemoryBarrier");
    tunisGL.tunisMemoryBarrierByRegion = (void (KHRONOS_APIENTRY *)(GLbitfield))tunisGLGetProcAddress("glMemoryBarrierByRegion");
    tunisGL.tunisMemoryBarrierEXT = (void (KHRONOS_APIENTRY *)(GLbitfield))tunisGLGetProcAddress("glMemoryBarrierEXT");
    tunisGL.tunisMemoryObjectParameterivEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, const GLint *))tunisGLGetProcAddress("glMemoryObjectParameterivEXT");
    tunisGL.tunisMinSampleShading = (void (KHRONOS_APIENTRY *)(GLfloat))tunisGLGetProcAddress("glMinSampleShading");
    tunisGL.tunisMinSampleShadingARB = (void (KHRONOS_APIENTRY *)(GLfloat))tunisGLGetProcAddress("glMinSampleShadingARB");
    tunisGL.tunisMinSampleShadingOES = (void (KHRONOS_APIENTRY *)(GLfloat))tunisGLGetProcAddress("glMinSampleShadingOES");
    tunisGL.tunisMinmax = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLboolean))tunisGLGetProcAddress("glMinmax");
    tunisGL.tunisMinmaxEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLboolean))tunisGLGetProcAddress("glMinmaxEXT");
    tunisGL.tunisMultMatrixd = (void (KHRONOS_APIENTRY *)(const GLdouble *))tunisGLGetProcAddress("glMultMatrixd");
    tunisGL.tunisMultMatrixf = (void (KHRONOS_APIENTRY *)(const GLfloat *))tunisGLGetProcAddress("glMultMatrixf");
    tunisGL.tunisMultMatrixx = (void (KHRONOS_APIENTRY *)(const GLfixed *))tunisGLGetProcAddress("glMultMatrixx");
    tunisGL.tunisMultMatrixxOES = (void (KHRONOS_APIENTRY *)(const GLfixed *))tunisGLGetProcAddress("glMultMatrixxOES");
    tunisGL.tunisMultTransposeMatrixd = (void (KHRONOS_APIENTRY *)(const GLdouble *))tunisGLGetProcAddress("glMultTransposeMatrixd");
    tunisGL.tunisMultTransposeMatrixdARB = (void (KHRONOS_APIENTRY *)(const GLdouble *))tunisGLGetProcAddress("glMultTransposeMatrixdARB");
    tunisGL.tunisMultTransposeMatrixf = (void (KHRONOS_APIENTRY *)(const GLfloat *))tunisGLGetProcAddress("glMultTransposeMatrixf");
    tunisGL.tunisMultTransposeMatrixfARB = (void (KHRONOS_APIENTRY *)(const GLfloat *))tunisGLGetProcAddress("glMultTransposeMatrixfARB");
    tunisGL.tunisMultTransposeMatrixxOES = (void (KHRONOS_APIENTRY *)(const GLfixed *))tunisGLGetProcAddress("glMultTransposeMatrixxOES");
    tunisGL.tunisMultiDrawArrays = (void (KHRONOS_APIENTRY *)(GLenum, const GLint *, const GLsizei *, GLsizei))tunisGLGetProcAddress("glMultiDrawArrays");
    tunisGL.tunisMultiDrawArraysEXT = (void (KHRONOS_APIENTRY *)(GLenum, const GLint *, const GLsizei *, GLsizei))tunisGLGetProcAddress("glMultiDrawArraysEXT");
    tunisGL.tunisMultiDrawArraysIndirect = (void (KHRONOS_APIENTRY *)(GLenum, const void *, GLsizei, GLsizei))tunisGLGetProcAddress("glMultiDrawArraysIndirect");
    tunisGL.tunisMultiDrawArraysIndirectAMD = (void (KHRONOS_APIENTRY *)(GLenum, const void *, GLsizei, GLsizei))tunisGLGetProcAddress("glMultiDrawArraysIndirectAMD");
    tunisGL.tunisMultiDrawArraysIndirectBindlessCountNV = (void (KHRONOS_APIENTRY *)(GLenum, const void *, GLsizei, GLsizei, GLsizei, GLint))tunisGLGetProcAddress("glMultiDrawArraysIndirectBindlessCountNV");
    tunisGL.tunisMultiDrawArraysIndirectBindlessNV = (void (KHRONOS_APIENTRY *)(GLenum, const void *, GLsizei, GLsizei, GLint))tunisGLGetProcAddress("glMultiDrawArraysIndirectBindlessNV");
    tunisGL.tunisMultiDrawArraysIndirectCount = (void (KHRONOS_APIENTRY *)(GLenum, const void *, GLintptr, GLsizei, GLsizei))tunisGLGetProcAddress("glMultiDrawArraysIndirectCount");
    tunisGL.tunisMultiDrawArraysIndirectCountARB = (void (KHRONOS_APIENTRY *)(GLenum, const void *, GLintptr, GLsizei, GLsizei))tunisGLGetProcAddress("glMultiDrawArraysIndirectCountARB");
    tunisGL.tunisMultiDrawArraysIndirectEXT = (void (KHRONOS_APIENTRY *)(GLenum, const void *, GLsizei, GLsizei))tunisGLGetProcAddress("glMultiDrawArraysIndirectEXT");
    tunisGL.tunisMultiDrawElementArrayAPPLE = (void (KHRONOS_APIENTRY *)(GLenum, const GLint *, const GLsizei *, GLsizei))tunisGLGetProcAddress("glMultiDrawElementArrayAPPLE");
    tunisGL.tunisMultiDrawElements = (void (KHRONOS_APIENTRY *)(GLenum, const GLsizei *, GLenum, const void *const*, GLsizei))tunisGLGetProcAddress("glMultiDrawElements");
    tunisGL.tunisMultiDrawElementsBaseVertex = (void (KHRONOS_APIENTRY *)(GLenum, const GLsizei *, GLenum, const void *const*, GLsizei, const GLint *))tunisGLGetProcAddress("glMultiDrawElementsBaseVertex");
    tunisGL.tunisMultiDrawElementsBaseVertexEXT = (void (KHRONOS_APIENTRY *)(GLenum, const GLsizei *, GLenum, const void *const*, GLsizei, const GLint *))tunisGLGetProcAddress("glMultiDrawElementsBaseVertexEXT");
    tunisGL.tunisMultiDrawElementsEXT = (void (KHRONOS_APIENTRY *)(GLenum, const GLsizei *, GLenum, const void *const*, GLsizei))tunisGLGetProcAddress("glMultiDrawElementsEXT");
    tunisGL.tunisMultiDrawElementsIndirect = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const void *, GLsizei, GLsizei))tunisGLGetProcAddress("glMultiDrawElementsIndirect");
    tunisGL.tunisMultiDrawElementsIndirectAMD = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const void *, GLsizei, GLsizei))tunisGLGetProcAddress("glMultiDrawElementsIndirectAMD");
    tunisGL.tunisMultiDrawElementsIndirectBindlessCountNV = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const void *, GLsizei, GLsizei, GLsizei, GLint))tunisGLGetProcAddress("glMultiDrawElementsIndirectBindlessCountNV");
    tunisGL.tunisMultiDrawElementsIndirectBindlessNV = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const void *, GLsizei, GLsizei, GLint))tunisGLGetProcAddress("glMultiDrawElementsIndirectBindlessNV");
    tunisGL.tunisMultiDrawElementsIndirectCount = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const void *, GLintptr, GLsizei, GLsizei))tunisGLGetProcAddress("glMultiDrawElementsIndirectCount");
    tunisGL.tunisMultiDrawElementsIndirectCountARB = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const void *, GLintptr, GLsizei, GLsizei))tunisGLGetProcAddress("glMultiDrawElementsIndirectCountARB");
    tunisGL.tunisMultiDrawElementsIndirectEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const void *, GLsizei, GLsizei))tunisGLGetProcAddress("glMultiDrawElementsIndirectEXT");
    tunisGL.tunisMultiDrawRangeElementArrayAPPLE = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLuint, const GLint *, const GLsizei *, GLsizei))tunisGLGetProcAddress("glMultiDrawRangeElementArrayAPPLE");
    tunisGL.tunisMultiModeDrawArraysIBM = (void (KHRONOS_APIENTRY *)(const GLenum *, const GLint *, const GLsizei *, GLsizei, GLint))tunisGLGetProcAddress("glMultiModeDrawArraysIBM");
    tunisGL.tunisMultiModeDrawElementsIBM = (void (KHRONOS_APIENTRY *)(const GLenum *, const GLsizei *, GLenum, const void *const*, GLsizei, GLint))tunisGLGetProcAddress("glMultiModeDrawElementsIBM");
    tunisGL.tunisMultiTexBufferEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLuint))tunisGLGetProcAddress("glMultiTexBufferEXT");
    tunisGL.tunisMultiTexCoord1bOES = (void (KHRONOS_APIENTRY *)(GLenum, GLbyte))tunisGLGetProcAddress("glMultiTexCoord1bOES");
    tunisGL.tunisMultiTexCoord1bvOES = (void (KHRONOS_APIENTRY *)(GLenum, const GLbyte *))tunisGLGetProcAddress("glMultiTexCoord1bvOES");
    tunisGL.tunisMultiTexCoord1d = (void (KHRONOS_APIENTRY *)(GLenum, GLdouble))tunisGLGetProcAddress("glMultiTexCoord1d");
    tunisGL.tunisMultiTexCoord1dARB = (void (KHRONOS_APIENTRY *)(GLenum, GLdouble))tunisGLGetProcAddress("glMultiTexCoord1dARB");
    tunisGL.tunisMultiTexCoord1dv = (void (KHRONOS_APIENTRY *)(GLenum, const GLdouble *))tunisGLGetProcAddress("glMultiTexCoord1dv");
    tunisGL.tunisMultiTexCoord1dvARB = (void (KHRONOS_APIENTRY *)(GLenum, const GLdouble *))tunisGLGetProcAddress("glMultiTexCoord1dvARB");
    tunisGL.tunisMultiTexCoord1f = (void (KHRONOS_APIENTRY *)(GLenum, GLfloat))tunisGLGetProcAddress("glMultiTexCoord1f");
    tunisGL.tunisMultiTexCoord1fARB = (void (KHRONOS_APIENTRY *)(GLenum, GLfloat))tunisGLGetProcAddress("glMultiTexCoord1fARB");
    tunisGL.tunisMultiTexCoord1fv = (void (KHRONOS_APIENTRY *)(GLenum, const GLfloat *))tunisGLGetProcAddress("glMultiTexCoord1fv");
    tunisGL.tunisMultiTexCoord1fvARB = (void (KHRONOS_APIENTRY *)(GLenum, const GLfloat *))tunisGLGetProcAddress("glMultiTexCoord1fvARB");
    tunisGL.tunisMultiTexCoord1hNV = (void (KHRONOS_APIENTRY *)(GLenum, GLhalfNV))tunisGLGetProcAddress("glMultiTexCoord1hNV");
    tunisGL.tunisMultiTexCoord1hvNV = (void (KHRONOS_APIENTRY *)(GLenum, const GLhalfNV *))tunisGLGetProcAddress("glMultiTexCoord1hvNV");
    tunisGL.tunisMultiTexCoord1i = (void (KHRONOS_APIENTRY *)(GLenum, GLint))tunisGLGetProcAddress("glMultiTexCoord1i");
    tunisGL.tunisMultiTexCoord1iARB = (void (KHRONOS_APIENTRY *)(GLenum, GLint))tunisGLGetProcAddress("glMultiTexCoord1iARB");
    tunisGL.tunisMultiTexCoord1iv = (void (KHRONOS_APIENTRY *)(GLenum, const GLint *))tunisGLGetProcAddress("glMultiTexCoord1iv");
    tunisGL.tunisMultiTexCoord1ivARB = (void (KHRONOS_APIENTRY *)(GLenum, const GLint *))tunisGLGetProcAddress("glMultiTexCoord1ivARB");
    tunisGL.tunisMultiTexCoord1s = (void (KHRONOS_APIENTRY *)(GLenum, GLshort))tunisGLGetProcAddress("glMultiTexCoord1s");
    tunisGL.tunisMultiTexCoord1sARB = (void (KHRONOS_APIENTRY *)(GLenum, GLshort))tunisGLGetProcAddress("glMultiTexCoord1sARB");
    tunisGL.tunisMultiTexCoord1sv = (void (KHRONOS_APIENTRY *)(GLenum, const GLshort *))tunisGLGetProcAddress("glMultiTexCoord1sv");
    tunisGL.tunisMultiTexCoord1svARB = (void (KHRONOS_APIENTRY *)(GLenum, const GLshort *))tunisGLGetProcAddress("glMultiTexCoord1svARB");
    tunisGL.tunisMultiTexCoord1xOES = (void (KHRONOS_APIENTRY *)(GLenum, GLfixed))tunisGLGetProcAddress("glMultiTexCoord1xOES");
    tunisGL.tunisMultiTexCoord1xvOES = (void (KHRONOS_APIENTRY *)(GLenum, const GLfixed *))tunisGLGetProcAddress("glMultiTexCoord1xvOES");
    tunisGL.tunisMultiTexCoord2bOES = (void (KHRONOS_APIENTRY *)(GLenum, GLbyte, GLbyte))tunisGLGetProcAddress("glMultiTexCoord2bOES");
    tunisGL.tunisMultiTexCoord2bvOES = (void (KHRONOS_APIENTRY *)(GLenum, const GLbyte *))tunisGLGetProcAddress("glMultiTexCoord2bvOES");
    tunisGL.tunisMultiTexCoord2d = (void (KHRONOS_APIENTRY *)(GLenum, GLdouble, GLdouble))tunisGLGetProcAddress("glMultiTexCoord2d");
    tunisGL.tunisMultiTexCoord2dARB = (void (KHRONOS_APIENTRY *)(GLenum, GLdouble, GLdouble))tunisGLGetProcAddress("glMultiTexCoord2dARB");
    tunisGL.tunisMultiTexCoord2dv = (void (KHRONOS_APIENTRY *)(GLenum, const GLdouble *))tunisGLGetProcAddress("glMultiTexCoord2dv");
    tunisGL.tunisMultiTexCoord2dvARB = (void (KHRONOS_APIENTRY *)(GLenum, const GLdouble *))tunisGLGetProcAddress("glMultiTexCoord2dvARB");
    tunisGL.tunisMultiTexCoord2f = (void (KHRONOS_APIENTRY *)(GLenum, GLfloat, GLfloat))tunisGLGetProcAddress("glMultiTexCoord2f");
    tunisGL.tunisMultiTexCoord2fARB = (void (KHRONOS_APIENTRY *)(GLenum, GLfloat, GLfloat))tunisGLGetProcAddress("glMultiTexCoord2fARB");
    tunisGL.tunisMultiTexCoord2fv = (void (KHRONOS_APIENTRY *)(GLenum, const GLfloat *))tunisGLGetProcAddress("glMultiTexCoord2fv");
    tunisGL.tunisMultiTexCoord2fvARB = (void (KHRONOS_APIENTRY *)(GLenum, const GLfloat *))tunisGLGetProcAddress("glMultiTexCoord2fvARB");
    tunisGL.tunisMultiTexCoord2hNV = (void (KHRONOS_APIENTRY *)(GLenum, GLhalfNV, GLhalfNV))tunisGLGetProcAddress("glMultiTexCoord2hNV");
    tunisGL.tunisMultiTexCoord2hvNV = (void (KHRONOS_APIENTRY *)(GLenum, const GLhalfNV *))tunisGLGetProcAddress("glMultiTexCoord2hvNV");
    tunisGL.tunisMultiTexCoord2i = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLint))tunisGLGetProcAddress("glMultiTexCoord2i");
    tunisGL.tunisMultiTexCoord2iARB = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLint))tunisGLGetProcAddress("glMultiTexCoord2iARB");
    tunisGL.tunisMultiTexCoord2iv = (void (KHRONOS_APIENTRY *)(GLenum, const GLint *))tunisGLGetProcAddress("glMultiTexCoord2iv");
    tunisGL.tunisMultiTexCoord2ivARB = (void (KHRONOS_APIENTRY *)(GLenum, const GLint *))tunisGLGetProcAddress("glMultiTexCoord2ivARB");
    tunisGL.tunisMultiTexCoord2s = (void (KHRONOS_APIENTRY *)(GLenum, GLshort, GLshort))tunisGLGetProcAddress("glMultiTexCoord2s");
    tunisGL.tunisMultiTexCoord2sARB = (void (KHRONOS_APIENTRY *)(GLenum, GLshort, GLshort))tunisGLGetProcAddress("glMultiTexCoord2sARB");
    tunisGL.tunisMultiTexCoord2sv = (void (KHRONOS_APIENTRY *)(GLenum, const GLshort *))tunisGLGetProcAddress("glMultiTexCoord2sv");
    tunisGL.tunisMultiTexCoord2svARB = (void (KHRONOS_APIENTRY *)(GLenum, const GLshort *))tunisGLGetProcAddress("glMultiTexCoord2svARB");
    tunisGL.tunisMultiTexCoord2xOES = (void (KHRONOS_APIENTRY *)(GLenum, GLfixed, GLfixed))tunisGLGetProcAddress("glMultiTexCoord2xOES");
    tunisGL.tunisMultiTexCoord2xvOES = (void (KHRONOS_APIENTRY *)(GLenum, const GLfixed *))tunisGLGetProcAddress("glMultiTexCoord2xvOES");
    tunisGL.tunisMultiTexCoord3bOES = (void (KHRONOS_APIENTRY *)(GLenum, GLbyte, GLbyte, GLbyte))tunisGLGetProcAddress("glMultiTexCoord3bOES");
    tunisGL.tunisMultiTexCoord3bvOES = (void (KHRONOS_APIENTRY *)(GLenum, const GLbyte *))tunisGLGetProcAddress("glMultiTexCoord3bvOES");
    tunisGL.tunisMultiTexCoord3d = (void (KHRONOS_APIENTRY *)(GLenum, GLdouble, GLdouble, GLdouble))tunisGLGetProcAddress("glMultiTexCoord3d");
    tunisGL.tunisMultiTexCoord3dARB = (void (KHRONOS_APIENTRY *)(GLenum, GLdouble, GLdouble, GLdouble))tunisGLGetProcAddress("glMultiTexCoord3dARB");
    tunisGL.tunisMultiTexCoord3dv = (void (KHRONOS_APIENTRY *)(GLenum, const GLdouble *))tunisGLGetProcAddress("glMultiTexCoord3dv");
    tunisGL.tunisMultiTexCoord3dvARB = (void (KHRONOS_APIENTRY *)(GLenum, const GLdouble *))tunisGLGetProcAddress("glMultiTexCoord3dvARB");
    tunisGL.tunisMultiTexCoord3f = (void (KHRONOS_APIENTRY *)(GLenum, GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glMultiTexCoord3f");
    tunisGL.tunisMultiTexCoord3fARB = (void (KHRONOS_APIENTRY *)(GLenum, GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glMultiTexCoord3fARB");
    tunisGL.tunisMultiTexCoord3fv = (void (KHRONOS_APIENTRY *)(GLenum, const GLfloat *))tunisGLGetProcAddress("glMultiTexCoord3fv");
    tunisGL.tunisMultiTexCoord3fvARB = (void (KHRONOS_APIENTRY *)(GLenum, const GLfloat *))tunisGLGetProcAddress("glMultiTexCoord3fvARB");
    tunisGL.tunisMultiTexCoord3hNV = (void (KHRONOS_APIENTRY *)(GLenum, GLhalfNV, GLhalfNV, GLhalfNV))tunisGLGetProcAddress("glMultiTexCoord3hNV");
    tunisGL.tunisMultiTexCoord3hvNV = (void (KHRONOS_APIENTRY *)(GLenum, const GLhalfNV *))tunisGLGetProcAddress("glMultiTexCoord3hvNV");
    tunisGL.tunisMultiTexCoord3i = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLint, GLint))tunisGLGetProcAddress("glMultiTexCoord3i");
    tunisGL.tunisMultiTexCoord3iARB = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLint, GLint))tunisGLGetProcAddress("glMultiTexCoord3iARB");
    tunisGL.tunisMultiTexCoord3iv = (void (KHRONOS_APIENTRY *)(GLenum, const GLint *))tunisGLGetProcAddress("glMultiTexCoord3iv");
    tunisGL.tunisMultiTexCoord3ivARB = (void (KHRONOS_APIENTRY *)(GLenum, const GLint *))tunisGLGetProcAddress("glMultiTexCoord3ivARB");
    tunisGL.tunisMultiTexCoord3s = (void (KHRONOS_APIENTRY *)(GLenum, GLshort, GLshort, GLshort))tunisGLGetProcAddress("glMultiTexCoord3s");
    tunisGL.tunisMultiTexCoord3sARB = (void (KHRONOS_APIENTRY *)(GLenum, GLshort, GLshort, GLshort))tunisGLGetProcAddress("glMultiTexCoord3sARB");
    tunisGL.tunisMultiTexCoord3sv = (void (KHRONOS_APIENTRY *)(GLenum, const GLshort *))tunisGLGetProcAddress("glMultiTexCoord3sv");
    tunisGL.tunisMultiTexCoord3svARB = (void (KHRONOS_APIENTRY *)(GLenum, const GLshort *))tunisGLGetProcAddress("glMultiTexCoord3svARB");
    tunisGL.tunisMultiTexCoord3xOES = (void (KHRONOS_APIENTRY *)(GLenum, GLfixed, GLfixed, GLfixed))tunisGLGetProcAddress("glMultiTexCoord3xOES");
    tunisGL.tunisMultiTexCoord3xvOES = (void (KHRONOS_APIENTRY *)(GLenum, const GLfixed *))tunisGLGetProcAddress("glMultiTexCoord3xvOES");
    tunisGL.tunisMultiTexCoord4bOES = (void (KHRONOS_APIENTRY *)(GLenum, GLbyte, GLbyte, GLbyte, GLbyte))tunisGLGetProcAddress("glMultiTexCoord4bOES");
    tunisGL.tunisMultiTexCoord4bvOES = (void (KHRONOS_APIENTRY *)(GLenum, const GLbyte *))tunisGLGetProcAddress("glMultiTexCoord4bvOES");
    tunisGL.tunisMultiTexCoord4d = (void (KHRONOS_APIENTRY *)(GLenum, GLdouble, GLdouble, GLdouble, GLdouble))tunisGLGetProcAddress("glMultiTexCoord4d");
    tunisGL.tunisMultiTexCoord4dARB = (void (KHRONOS_APIENTRY *)(GLenum, GLdouble, GLdouble, GLdouble, GLdouble))tunisGLGetProcAddress("glMultiTexCoord4dARB");
    tunisGL.tunisMultiTexCoord4dv = (void (KHRONOS_APIENTRY *)(GLenum, const GLdouble *))tunisGLGetProcAddress("glMultiTexCoord4dv");
    tunisGL.tunisMultiTexCoord4dvARB = (void (KHRONOS_APIENTRY *)(GLenum, const GLdouble *))tunisGLGetProcAddress("glMultiTexCoord4dvARB");
    tunisGL.tunisMultiTexCoord4f = (void (KHRONOS_APIENTRY *)(GLenum, GLfloat, GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glMultiTexCoord4f");
    tunisGL.tunisMultiTexCoord4fARB = (void (KHRONOS_APIENTRY *)(GLenum, GLfloat, GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glMultiTexCoord4fARB");
    tunisGL.tunisMultiTexCoord4fv = (void (KHRONOS_APIENTRY *)(GLenum, const GLfloat *))tunisGLGetProcAddress("glMultiTexCoord4fv");
    tunisGL.tunisMultiTexCoord4fvARB = (void (KHRONOS_APIENTRY *)(GLenum, const GLfloat *))tunisGLGetProcAddress("glMultiTexCoord4fvARB");
    tunisGL.tunisMultiTexCoord4hNV = (void (KHRONOS_APIENTRY *)(GLenum, GLhalfNV, GLhalfNV, GLhalfNV, GLhalfNV))tunisGLGetProcAddress("glMultiTexCoord4hNV");
    tunisGL.tunisMultiTexCoord4hvNV = (void (KHRONOS_APIENTRY *)(GLenum, const GLhalfNV *))tunisGLGetProcAddress("glMultiTexCoord4hvNV");
    tunisGL.tunisMultiTexCoord4i = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLint, GLint, GLint))tunisGLGetProcAddress("glMultiTexCoord4i");
    tunisGL.tunisMultiTexCoord4iARB = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLint, GLint, GLint))tunisGLGetProcAddress("glMultiTexCoord4iARB");
    tunisGL.tunisMultiTexCoord4iv = (void (KHRONOS_APIENTRY *)(GLenum, const GLint *))tunisGLGetProcAddress("glMultiTexCoord4iv");
    tunisGL.tunisMultiTexCoord4ivARB = (void (KHRONOS_APIENTRY *)(GLenum, const GLint *))tunisGLGetProcAddress("glMultiTexCoord4ivARB");
    tunisGL.tunisMultiTexCoord4s = (void (KHRONOS_APIENTRY *)(GLenum, GLshort, GLshort, GLshort, GLshort))tunisGLGetProcAddress("glMultiTexCoord4s");
    tunisGL.tunisMultiTexCoord4sARB = (void (KHRONOS_APIENTRY *)(GLenum, GLshort, GLshort, GLshort, GLshort))tunisGLGetProcAddress("glMultiTexCoord4sARB");
    tunisGL.tunisMultiTexCoord4sv = (void (KHRONOS_APIENTRY *)(GLenum, const GLshort *))tunisGLGetProcAddress("glMultiTexCoord4sv");
    tunisGL.tunisMultiTexCoord4svARB = (void (KHRONOS_APIENTRY *)(GLenum, const GLshort *))tunisGLGetProcAddress("glMultiTexCoord4svARB");
    tunisGL.tunisMultiTexCoord4x = (void (KHRONOS_APIENTRY *)(GLenum, GLfixed, GLfixed, GLfixed, GLfixed))tunisGLGetProcAddress("glMultiTexCoord4x");
    tunisGL.tunisMultiTexCoord4xOES = (void (KHRONOS_APIENTRY *)(GLenum, GLfixed, GLfixed, GLfixed, GLfixed))tunisGLGetProcAddress("glMultiTexCoord4xOES");
    tunisGL.tunisMultiTexCoord4xvOES = (void (KHRONOS_APIENTRY *)(GLenum, const GLfixed *))tunisGLGetProcAddress("glMultiTexCoord4xvOES");
    tunisGL.tunisMultiTexCoordP1ui = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLuint))tunisGLGetProcAddress("glMultiTexCoordP1ui");
    tunisGL.tunisMultiTexCoordP1uiv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const GLuint *))tunisGLGetProcAddress("glMultiTexCoordP1uiv");
    tunisGL.tunisMultiTexCoordP2ui = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLuint))tunisGLGetProcAddress("glMultiTexCoordP2ui");
    tunisGL.tunisMultiTexCoordP2uiv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const GLuint *))tunisGLGetProcAddress("glMultiTexCoordP2uiv");
    tunisGL.tunisMultiTexCoordP3ui = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLuint))tunisGLGetProcAddress("glMultiTexCoordP3ui");
    tunisGL.tunisMultiTexCoordP3uiv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const GLuint *))tunisGLGetProcAddress("glMultiTexCoordP3uiv");
    tunisGL.tunisMultiTexCoordP4ui = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLuint))tunisGLGetProcAddress("glMultiTexCoordP4ui");
    tunisGL.tunisMultiTexCoordP4uiv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const GLuint *))tunisGLGetProcAddress("glMultiTexCoordP4uiv");
    tunisGL.tunisMultiTexCoordPointerEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLenum, GLsizei, const void *))tunisGLGetProcAddress("glMultiTexCoordPointerEXT");
    tunisGL.tunisMultiTexEnvfEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLfloat))tunisGLGetProcAddress("glMultiTexEnvfEXT");
    tunisGL.tunisMultiTexEnvfvEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, const GLfloat *))tunisGLGetProcAddress("glMultiTexEnvfvEXT");
    tunisGL.tunisMultiTexEnviEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLint))tunisGLGetProcAddress("glMultiTexEnviEXT");
    tunisGL.tunisMultiTexEnvivEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, const GLint *))tunisGLGetProcAddress("glMultiTexEnvivEXT");
    tunisGL.tunisMultiTexGendEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLdouble))tunisGLGetProcAddress("glMultiTexGendEXT");
    tunisGL.tunisMultiTexGendvEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, const GLdouble *))tunisGLGetProcAddress("glMultiTexGendvEXT");
    tunisGL.tunisMultiTexGenfEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLfloat))tunisGLGetProcAddress("glMultiTexGenfEXT");
    tunisGL.tunisMultiTexGenfvEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, const GLfloat *))tunisGLGetProcAddress("glMultiTexGenfvEXT");
    tunisGL.tunisMultiTexGeniEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLint))tunisGLGetProcAddress("glMultiTexGeniEXT");
    tunisGL.tunisMultiTexGenivEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, const GLint *))tunisGLGetProcAddress("glMultiTexGenivEXT");
    tunisGL.tunisMultiTexImage1DEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint, GLint, GLsizei, GLint, GLenum, GLenum, const void *))tunisGLGetProcAddress("glMultiTexImage1DEXT");
    tunisGL.tunisMultiTexImage2DEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint, GLint, GLsizei, GLsizei, GLint, GLenum, GLenum, const void *))tunisGLGetProcAddress("glMultiTexImage2DEXT");
    tunisGL.tunisMultiTexImage3DEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint, GLint, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, const void *))tunisGLGetProcAddress("glMultiTexImage3DEXT");
    tunisGL.tunisMultiTexParameterIivEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, const GLint *))tunisGLGetProcAddress("glMultiTexParameterIivEXT");
    tunisGL.tunisMultiTexParameterIuivEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, const GLuint *))tunisGLGetProcAddress("glMultiTexParameterIuivEXT");
    tunisGL.tunisMultiTexParameterfEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLfloat))tunisGLGetProcAddress("glMultiTexParameterfEXT");
    tunisGL.tunisMultiTexParameterfvEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, const GLfloat *))tunisGLGetProcAddress("glMultiTexParameterfvEXT");
    tunisGL.tunisMultiTexParameteriEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLint))tunisGLGetProcAddress("glMultiTexParameteriEXT");
    tunisGL.tunisMultiTexParameterivEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, const GLint *))tunisGLGetProcAddress("glMultiTexParameterivEXT");
    tunisGL.tunisMultiTexRenderbufferEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLuint))tunisGLGetProcAddress("glMultiTexRenderbufferEXT");
    tunisGL.tunisMultiTexSubImage1DEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint, GLint, GLsizei, GLenum, GLenum, const void *))tunisGLGetProcAddress("glMultiTexSubImage1DEXT");
    tunisGL.tunisMultiTexSubImage2DEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, const void *))tunisGLGetProcAddress("glMultiTexSubImage2DEXT");
    tunisGL.tunisMultiTexSubImage3DEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, const void *))tunisGLGetProcAddress("glMultiTexSubImage3DEXT");
    tunisGL.tunisMulticastBarrierNV = (void (KHRONOS_APIENTRY *)(void))tunisGLGetProcAddress("glMulticastBarrierNV");
    tunisGL.tunisMulticastBlitFramebufferNV = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLbitfield, GLenum))tunisGLGetProcAddress("glMulticastBlitFramebufferNV");
    tunisGL.tunisMulticastBufferSubDataNV = (void (KHRONOS_APIENTRY *)(GLbitfield, GLuint, GLintptr, GLsizeiptr, const void *))tunisGLGetProcAddress("glMulticastBufferSubDataNV");
    tunisGL.tunisMulticastCopyBufferSubDataNV = (void (KHRONOS_APIENTRY *)(GLuint, GLbitfield, GLuint, GLuint, GLintptr, GLintptr, GLsizeiptr))tunisGLGetProcAddress("glMulticastCopyBufferSubDataNV");
    tunisGL.tunisMulticastCopyImageSubDataNV = (void (KHRONOS_APIENTRY *)(GLuint, GLbitfield, GLuint, GLenum, GLint, GLint, GLint, GLint, GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei))tunisGLGetProcAddress("glMulticastCopyImageSubDataNV");
    tunisGL.tunisMulticastFramebufferSampleLocationsfvNV = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLuint, GLsizei, const GLfloat *))tunisGLGetProcAddress("glMulticastFramebufferSampleLocationsfvNV");
    tunisGL.tunisMulticastGetQueryObjecti64vNV = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLenum, GLint64 *))tunisGLGetProcAddress("glMulticastGetQueryObjecti64vNV");
    tunisGL.tunisMulticastGetQueryObjectivNV = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLenum, GLint *))tunisGLGetProcAddress("glMulticastGetQueryObjectivNV");
    tunisGL.tunisMulticastGetQueryObjectui64vNV = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLenum, GLuint64 *))tunisGLGetProcAddress("glMulticastGetQueryObjectui64vNV");
    tunisGL.tunisMulticastGetQueryObjectuivNV = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLenum, GLuint *))tunisGLGetProcAddress("glMulticastGetQueryObjectuivNV");
    tunisGL.tunisMulticastWaitSyncNV = (void (KHRONOS_APIENTRY *)(GLuint, GLbitfield))tunisGLGetProcAddress("glMulticastWaitSyncNV");
    tunisGL.tunisNamedBufferData = (void (KHRONOS_APIENTRY *)(GLuint, GLsizeiptr, const void *, GLenum))tunisGLGetProcAddress("glNamedBufferData");
    tunisGL.tunisNamedBufferDataEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLsizeiptr, const void *, GLenum))tunisGLGetProcAddress("glNamedBufferDataEXT");
    tunisGL.tunisNamedBufferPageCommitmentARB = (void (KHRONOS_APIENTRY *)(GLuint, GLintptr, GLsizeiptr, GLboolean))tunisGLGetProcAddress("glNamedBufferPageCommitmentARB");
    tunisGL.tunisNamedBufferPageCommitmentEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLintptr, GLsizeiptr, GLboolean))tunisGLGetProcAddress("glNamedBufferPageCommitmentEXT");
    tunisGL.tunisNamedBufferStorage = (void (KHRONOS_APIENTRY *)(GLuint, GLsizeiptr, const void *, GLbitfield))tunisGLGetProcAddress("glNamedBufferStorage");
    tunisGL.tunisNamedBufferStorageEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLsizeiptr, const void *, GLbitfield))tunisGLGetProcAddress("glNamedBufferStorageEXT");
    tunisGL.tunisNamedBufferStorageExternalEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLintptr, GLsizeiptr, GLeglClientBufferEXT, GLbitfield))tunisGLGetProcAddress("glNamedBufferStorageExternalEXT");
    tunisGL.tunisNamedBufferStorageMemEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLsizeiptr, GLuint, GLuint64))tunisGLGetProcAddress("glNamedBufferStorageMemEXT");
    tunisGL.tunisNamedBufferSubData = (void (KHRONOS_APIENTRY *)(GLuint, GLintptr, GLsizeiptr, const void *))tunisGLGetProcAddress("glNamedBufferSubData");
    tunisGL.tunisNamedBufferSubDataEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLintptr, GLsizeiptr, const void *))tunisGLGetProcAddress("glNamedBufferSubDataEXT");
    tunisGL.tunisNamedCopyBufferSubDataEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLintptr, GLintptr, GLsizeiptr))tunisGLGetProcAddress("glNamedCopyBufferSubDataEXT");
    tunisGL.tunisNamedFramebufferDrawBuffer = (void (KHRONOS_APIENTRY *)(GLuint, GLenum))tunisGLGetProcAddress("glNamedFramebufferDrawBuffer");
    tunisGL.tunisNamedFramebufferDrawBuffers = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, const GLenum *))tunisGLGetProcAddress("glNamedFramebufferDrawBuffers");
    tunisGL.tunisNamedFramebufferParameteri = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint))tunisGLGetProcAddress("glNamedFramebufferParameteri");
    tunisGL.tunisNamedFramebufferParameteriEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint))tunisGLGetProcAddress("glNamedFramebufferParameteriEXT");
    tunisGL.tunisNamedFramebufferReadBuffer = (void (KHRONOS_APIENTRY *)(GLuint, GLenum))tunisGLGetProcAddress("glNamedFramebufferReadBuffer");
    tunisGL.tunisNamedFramebufferRenderbuffer = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLenum, GLuint))tunisGLGetProcAddress("glNamedFramebufferRenderbuffer");
    tunisGL.tunisNamedFramebufferRenderbufferEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLenum, GLuint))tunisGLGetProcAddress("glNamedFramebufferRenderbufferEXT");
    tunisGL.tunisNamedFramebufferSampleLocationsfvARB = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLsizei, const GLfloat *))tunisGLGetProcAddress("glNamedFramebufferSampleLocationsfvARB");
    tunisGL.tunisNamedFramebufferSampleLocationsfvNV = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLsizei, const GLfloat *))tunisGLGetProcAddress("glNamedFramebufferSampleLocationsfvNV");
    tunisGL.tunisNamedFramebufferSamplePositionsfvAMD = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLuint, const GLfloat *))tunisGLGetProcAddress("glNamedFramebufferSamplePositionsfvAMD");
    tunisGL.tunisNamedFramebufferTexture = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLuint, GLint))tunisGLGetProcAddress("glNamedFramebufferTexture");
    tunisGL.tunisNamedFramebufferTexture1DEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLenum, GLuint, GLint))tunisGLGetProcAddress("glNamedFramebufferTexture1DEXT");
    tunisGL.tunisNamedFramebufferTexture2DEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLenum, GLuint, GLint))tunisGLGetProcAddress("glNamedFramebufferTexture2DEXT");
    tunisGL.tunisNamedFramebufferTexture3DEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLenum, GLuint, GLint, GLint))tunisGLGetProcAddress("glNamedFramebufferTexture3DEXT");
    tunisGL.tunisNamedFramebufferTextureEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLuint, GLint))tunisGLGetProcAddress("glNamedFramebufferTextureEXT");
    tunisGL.tunisNamedFramebufferTextureFaceEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLuint, GLint, GLenum))tunisGLGetProcAddress("glNamedFramebufferTextureFaceEXT");
    tunisGL.tunisNamedFramebufferTextureLayer = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLuint, GLint, GLint))tunisGLGetProcAddress("glNamedFramebufferTextureLayer");
    tunisGL.tunisNamedFramebufferTextureLayerEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLuint, GLint, GLint))tunisGLGetProcAddress("glNamedFramebufferTextureLayerEXT");
    tunisGL.tunisNamedProgramLocalParameter4dEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLuint, GLdouble, GLdouble, GLdouble, GLdouble))tunisGLGetProcAddress("glNamedProgramLocalParameter4dEXT");
    tunisGL.tunisNamedProgramLocalParameter4dvEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLuint, const GLdouble *))tunisGLGetProcAddress("glNamedProgramLocalParameter4dvEXT");
    tunisGL.tunisNamedProgramLocalParameter4fEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLuint, GLfloat, GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glNamedProgramLocalParameter4fEXT");
    tunisGL.tunisNamedProgramLocalParameter4fvEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLuint, const GLfloat *))tunisGLGetProcAddress("glNamedProgramLocalParameter4fvEXT");
    tunisGL.tunisNamedProgramLocalParameterI4iEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLuint, GLint, GLint, GLint, GLint))tunisGLGetProcAddress("glNamedProgramLocalParameterI4iEXT");
    tunisGL.tunisNamedProgramLocalParameterI4ivEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLuint, const GLint *))tunisGLGetProcAddress("glNamedProgramLocalParameterI4ivEXT");
    tunisGL.tunisNamedProgramLocalParameterI4uiEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLuint, GLuint, GLuint, GLuint, GLuint))tunisGLGetProcAddress("glNamedProgramLocalParameterI4uiEXT");
    tunisGL.tunisNamedProgramLocalParameterI4uivEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLuint, const GLuint *))tunisGLGetProcAddress("glNamedProgramLocalParameterI4uivEXT");
    tunisGL.tunisNamedProgramLocalParameters4fvEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLuint, GLsizei, const GLfloat *))tunisGLGetProcAddress("glNamedProgramLocalParameters4fvEXT");
    tunisGL.tunisNamedProgramLocalParametersI4ivEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLuint, GLsizei, const GLint *))tunisGLGetProcAddress("glNamedProgramLocalParametersI4ivEXT");
    tunisGL.tunisNamedProgramLocalParametersI4uivEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLuint, GLsizei, const GLuint *))tunisGLGetProcAddress("glNamedProgramLocalParametersI4uivEXT");
    tunisGL.tunisNamedProgramStringEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLenum, GLsizei, const void *))tunisGLGetProcAddress("glNamedProgramStringEXT");
    tunisGL.tunisNamedRenderbufferStorage = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLsizei, GLsizei))tunisGLGetProcAddress("glNamedRenderbufferStorage");
    tunisGL.tunisNamedRenderbufferStorageEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLsizei, GLsizei))tunisGLGetProcAddress("glNamedRenderbufferStorageEXT");
    tunisGL.tunisNamedRenderbufferStorageMultisample = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, GLenum, GLsizei, GLsizei))tunisGLGetProcAddress("glNamedRenderbufferStorageMultisample");
    tunisGL.tunisNamedRenderbufferStorageMultisampleAdvancedAMD = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, GLsizei, GLenum, GLsizei, GLsizei))tunisGLGetProcAddress("glNamedRenderbufferStorageMultisampleAdvancedAMD");
    tunisGL.tunisNamedRenderbufferStorageMultisampleCoverageEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, GLsizei, GLenum, GLsizei, GLsizei))tunisGLGetProcAddress("glNamedRenderbufferStorageMultisampleCoverageEXT");
    tunisGL.tunisNamedRenderbufferStorageMultisampleEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, GLenum, GLsizei, GLsizei))tunisGLGetProcAddress("glNamedRenderbufferStorageMultisampleEXT");
    tunisGL.tunisNamedStringARB = (void (KHRONOS_APIENTRY *)(GLenum, GLint, const GLchar *, GLint, const GLchar *))tunisGLGetProcAddress("glNamedStringARB");
    tunisGL.tunisNewBufferRegion = (GLuint(KHRONOS_APIENTRY *)(GLenum))tunisGLGetProcAddress("glNewBufferRegion");
    tunisGL.tunisNewList = (void (KHRONOS_APIENTRY *)(GLuint, GLenum))tunisGLGetProcAddress("glNewList");
    tunisGL.tunisNewObjectBufferATI = (GLuint(KHRONOS_APIENTRY *)(GLsizei, const void *, GLenum))tunisGLGetProcAddress("glNewObjectBufferATI");
    tunisGL.tunisNormal3b = (void (KHRONOS_APIENTRY *)(GLbyte, GLbyte, GLbyte))tunisGLGetProcAddress("glNormal3b");
    tunisGL.tunisNormal3bv = (void (KHRONOS_APIENTRY *)(const GLbyte *))tunisGLGetProcAddress("glNormal3bv");
    tunisGL.tunisNormal3d = (void (KHRONOS_APIENTRY *)(GLdouble, GLdouble, GLdouble))tunisGLGetProcAddress("glNormal3d");
    tunisGL.tunisNormal3dv = (void (KHRONOS_APIENTRY *)(const GLdouble *))tunisGLGetProcAddress("glNormal3dv");
    tunisGL.tunisNormal3f = (void (KHRONOS_APIENTRY *)(GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glNormal3f");
    tunisGL.tunisNormal3fVertex3fSUN = (void (KHRONOS_APIENTRY *)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glNormal3fVertex3fSUN");
    tunisGL.tunisNormal3fVertex3fvSUN = (void (KHRONOS_APIENTRY *)(const GLfloat *, const GLfloat *))tunisGLGetProcAddress("glNormal3fVertex3fvSUN");
    tunisGL.tunisNormal3fv = (void (KHRONOS_APIENTRY *)(const GLfloat *))tunisGLGetProcAddress("glNormal3fv");
    tunisGL.tunisNormal3hNV = (void (KHRONOS_APIENTRY *)(GLhalfNV, GLhalfNV, GLhalfNV))tunisGLGetProcAddress("glNormal3hNV");
    tunisGL.tunisNormal3hvNV = (void (KHRONOS_APIENTRY *)(const GLhalfNV *))tunisGLGetProcAddress("glNormal3hvNV");
    tunisGL.tunisNormal3i = (void (KHRONOS_APIENTRY *)(GLint, GLint, GLint))tunisGLGetProcAddress("glNormal3i");
    tunisGL.tunisNormal3iv = (void (KHRONOS_APIENTRY *)(const GLint *))tunisGLGetProcAddress("glNormal3iv");
    tunisGL.tunisNormal3s = (void (KHRONOS_APIENTRY *)(GLshort, GLshort, GLshort))tunisGLGetProcAddress("glNormal3s");
    tunisGL.tunisNormal3sv = (void (KHRONOS_APIENTRY *)(const GLshort *))tunisGLGetProcAddress("glNormal3sv");
    tunisGL.tunisNormal3x = (void (KHRONOS_APIENTRY *)(GLfixed, GLfixed, GLfixed))tunisGLGetProcAddress("glNormal3x");
    tunisGL.tunisNormal3xOES = (void (KHRONOS_APIENTRY *)(GLfixed, GLfixed, GLfixed))tunisGLGetProcAddress("glNormal3xOES");
    tunisGL.tunisNormal3xvOES = (void (KHRONOS_APIENTRY *)(const GLfixed *))tunisGLGetProcAddress("glNormal3xvOES");
    tunisGL.tunisNormalFormatNV = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei))tunisGLGetProcAddress("glNormalFormatNV");
    tunisGL.tunisNormalP3ui = (void (KHRONOS_APIENTRY *)(GLenum, GLuint))tunisGLGetProcAddress("glNormalP3ui");
    tunisGL.tunisNormalP3uiv = (void (KHRONOS_APIENTRY *)(GLenum, const GLuint *))tunisGLGetProcAddress("glNormalP3uiv");
    tunisGL.tunisNormalPointer = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, const void *))tunisGLGetProcAddress("glNormalPointer");
    tunisGL.tunisNormalPointerEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLsizei, const void *))tunisGLGetProcAddress("glNormalPointerEXT");
    tunisGL.tunisNormalPointerListIBM = (void (KHRONOS_APIENTRY *)(GLenum, GLint, const void **, GLint))tunisGLGetProcAddress("glNormalPointerListIBM");
    tunisGL.tunisNormalPointervINTEL = (void (KHRONOS_APIENTRY *)(GLenum, const void **))tunisGLGetProcAddress("glNormalPointervINTEL");
    tunisGL.tunisNormalStream3bATI = (void (KHRONOS_APIENTRY *)(GLenum, GLbyte, GLbyte, GLbyte))tunisGLGetProcAddress("glNormalStream3bATI");
    tunisGL.tunisNormalStream3bvATI = (void (KHRONOS_APIENTRY *)(GLenum, const GLbyte *))tunisGLGetProcAddress("glNormalStream3bvATI");
    tunisGL.tunisNormalStream3dATI = (void (KHRONOS_APIENTRY *)(GLenum, GLdouble, GLdouble, GLdouble))tunisGLGetProcAddress("glNormalStream3dATI");
    tunisGL.tunisNormalStream3dvATI = (void (KHRONOS_APIENTRY *)(GLenum, const GLdouble *))tunisGLGetProcAddress("glNormalStream3dvATI");
    tunisGL.tunisNormalStream3fATI = (void (KHRONOS_APIENTRY *)(GLenum, GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glNormalStream3fATI");
    tunisGL.tunisNormalStream3fvATI = (void (KHRONOS_APIENTRY *)(GLenum, const GLfloat *))tunisGLGetProcAddress("glNormalStream3fvATI");
    tunisGL.tunisNormalStream3iATI = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLint, GLint))tunisGLGetProcAddress("glNormalStream3iATI");
    tunisGL.tunisNormalStream3ivATI = (void (KHRONOS_APIENTRY *)(GLenum, const GLint *))tunisGLGetProcAddress("glNormalStream3ivATI");
    tunisGL.tunisNormalStream3sATI = (void (KHRONOS_APIENTRY *)(GLenum, GLshort, GLshort, GLshort))tunisGLGetProcAddress("glNormalStream3sATI");
    tunisGL.tunisNormalStream3svATI = (void (KHRONOS_APIENTRY *)(GLenum, const GLshort *))tunisGLGetProcAddress("glNormalStream3svATI");
    tunisGL.tunisObjectLabel = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLsizei, const GLchar *))tunisGLGetProcAddress("glObjectLabel");
    tunisGL.tunisObjectLabelKHR = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLsizei, const GLchar *))tunisGLGetProcAddress("glObjectLabelKHR");
    tunisGL.tunisObjectPtrLabel = (void (KHRONOS_APIENTRY *)(const void *, GLsizei, const GLchar *))tunisGLGetProcAddress("glObjectPtrLabel");
    tunisGL.tunisObjectPtrLabelKHR = (void (KHRONOS_APIENTRY *)(const void *, GLsizei, const GLchar *))tunisGLGetProcAddress("glObjectPtrLabelKHR");
    tunisGL.tunisObjectPurgeableAPPLE = (GLenum(KHRONOS_APIENTRY *)(GLenum, GLuint, GLenum))tunisGLGetProcAddress("glObjectPurgeableAPPLE");
    tunisGL.tunisObjectUnpurgeableAPPLE = (GLenum(KHRONOS_APIENTRY *)(GLenum, GLuint, GLenum))tunisGLGetProcAddress("glObjectUnpurgeableAPPLE");
    tunisGL.tunisOrtho = (void (KHRONOS_APIENTRY *)(GLdouble, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble))tunisGLGetProcAddress("glOrtho");
    tunisGL.tunisOrthof = (void (KHRONOS_APIENTRY *)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glOrthof");
    tunisGL.tunisOrthofOES = (void (KHRONOS_APIENTRY *)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glOrthofOES");
    tunisGL.tunisOrthox = (void (KHRONOS_APIENTRY *)(GLfixed, GLfixed, GLfixed, GLfixed, GLfixed, GLfixed))tunisGLGetProcAddress("glOrthox");
    tunisGL.tunisOrthoxOES = (void (KHRONOS_APIENTRY *)(GLfixed, GLfixed, GLfixed, GLfixed, GLfixed, GLfixed))tunisGLGetProcAddress("glOrthoxOES");
    tunisGL.tunisPNTrianglesfATI = (void (KHRONOS_APIENTRY *)(GLenum, GLfloat))tunisGLGetProcAddress("glPNTrianglesfATI");
    tunisGL.tunisPNTrianglesiATI = (void (KHRONOS_APIENTRY *)(GLenum, GLint))tunisGLGetProcAddress("glPNTrianglesiATI");
    tunisGL.tunisPassTexCoordATI = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLenum))tunisGLGetProcAddress("glPassTexCoordATI");
    tunisGL.tunisPassThrough = (void (KHRONOS_APIENTRY *)(GLfloat))tunisGLGetProcAddress("glPassThrough");
    tunisGL.tunisPassThroughxOES = (void (KHRONOS_APIENTRY *)(GLfixed))tunisGLGetProcAddress("glPassThroughxOES");
    tunisGL.tunisPatchParameterfv = (void (KHRONOS_APIENTRY *)(GLenum, const GLfloat *))tunisGLGetProcAddress("glPatchParameterfv");
    tunisGL.tunisPatchParameteri = (void (KHRONOS_APIENTRY *)(GLenum, GLint))tunisGLGetProcAddress("glPatchParameteri");
    tunisGL.tunisPatchParameteriEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLint))tunisGLGetProcAddress("glPatchParameteriEXT");
    tunisGL.tunisPatchParameteriOES = (void (KHRONOS_APIENTRY *)(GLenum, GLint))tunisGLGetProcAddress("glPatchParameteriOES");
    tunisGL.tunisPathColorGenNV = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, const GLfloat *))tunisGLGetProcAddress("glPathColorGenNV");
    tunisGL.tunisPathCommandsNV = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, const GLubyte *, GLsizei, GLenum, const void *))tunisGLGetProcAddress("glPathCommandsNV");
    tunisGL.tunisPathCoordsNV = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, GLenum, const void *))tunisGLGetProcAddress("glPathCoordsNV");
    tunisGL.tunisPathCoverDepthFuncNV = (void (KHRONOS_APIENTRY *)(GLenum))tunisGLGetProcAddress("glPathCoverDepthFuncNV");
    tunisGL.tunisPathDashArrayNV = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, const GLfloat *))tunisGLGetProcAddress("glPathDashArrayNV");
    tunisGL.tunisPathFogGenNV = (void (KHRONOS_APIENTRY *)(GLenum))tunisGLGetProcAddress("glPathFogGenNV");
    tunisGL.tunisPathGlyphIndexArrayNV = (GLenum(KHRONOS_APIENTRY *)(GLuint, GLenum, const void *, GLbitfield, GLuint, GLsizei, GLuint, GLfloat))tunisGLGetProcAddress("glPathGlyphIndexArrayNV");
    tunisGL.tunisPathGlyphIndexRangeNV = (GLenum(KHRONOS_APIENTRY *)(GLenum, const void *, GLbitfield, GLuint, GLfloat, GLuint[2]))tunisGLGetProcAddress("glPathGlyphIndexRangeNV");
    tunisGL.tunisPathGlyphRangeNV = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, const void *, GLbitfield, GLuint, GLsizei, GLenum, GLuint, GLfloat))tunisGLGetProcAddress("glPathGlyphRangeNV");
    tunisGL.tunisPathGlyphsNV = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, const void *, GLbitfield, GLsizei, GLenum, const void *, GLenum, GLuint, GLfloat))tunisGLGetProcAddress("glPathGlyphsNV");
    tunisGL.tunisPathMemoryGlyphIndexArrayNV = (GLenum(KHRONOS_APIENTRY *)(GLuint, GLenum, GLsizeiptr, const void *, GLsizei, GLuint, GLsizei, GLuint, GLfloat))tunisGLGetProcAddress("glPathMemoryGlyphIndexArrayNV");
    tunisGL.tunisPathParameterfNV = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLfloat))tunisGLGetProcAddress("glPathParameterfNV");
    tunisGL.tunisPathParameterfvNV = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, const GLfloat *))tunisGLGetProcAddress("glPathParameterfvNV");
    tunisGL.tunisPathParameteriNV = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint))tunisGLGetProcAddress("glPathParameteriNV");
    tunisGL.tunisPathParameterivNV = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, const GLint *))tunisGLGetProcAddress("glPathParameterivNV");
    tunisGL.tunisPathStencilDepthOffsetNV = (void (KHRONOS_APIENTRY *)(GLfloat, GLfloat))tunisGLGetProcAddress("glPathStencilDepthOffsetNV");
    tunisGL.tunisPathStencilFuncNV = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLuint))tunisGLGetProcAddress("glPathStencilFuncNV");
    tunisGL.tunisPathStringNV = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLsizei, const void *))tunisGLGetProcAddress("glPathStringNV");
    tunisGL.tunisPathSubCommandsNV = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, GLsizei, GLsizei, const GLubyte *, GLsizei, GLenum, const void *))tunisGLGetProcAddress("glPathSubCommandsNV");
    tunisGL.tunisPathSubCoordsNV = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, GLsizei, GLenum, const void *))tunisGLGetProcAddress("glPathSubCoordsNV");
    tunisGL.tunisPathTexGenNV = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint, const GLfloat *))tunisGLGetProcAddress("glPathTexGenNV");
    tunisGL.tunisPauseTransformFeedback = (void (KHRONOS_APIENTRY *)(void))tunisGLGetProcAddress("glPauseTransformFeedback");
    tunisGL.tunisPauseTransformFeedbackNV = (void (KHRONOS_APIENTRY *)(void))tunisGLGetProcAddress("glPauseTransformFeedbackNV");
    tunisGL.tunisPixelDataRangeNV = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, const void *))tunisGLGetProcAddress("glPixelDataRangeNV");
    tunisGL.tunisPixelMapfv = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, const GLfloat *))tunisGLGetProcAddress("glPixelMapfv");
    tunisGL.tunisPixelMapuiv = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, const GLuint *))tunisGLGetProcAddress("glPixelMapuiv");
    tunisGL.tunisPixelMapusv = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, const GLushort *))tunisGLGetProcAddress("glPixelMapusv");
    tunisGL.tunisPixelMapx = (void (KHRONOS_APIENTRY *)(GLenum, GLint, const GLfixed *))tunisGLGetProcAddress("glPixelMapx");
    tunisGL.tunisPixelStoref = (void (KHRONOS_APIENTRY *)(GLenum, GLfloat))tunisGLGetProcAddress("glPixelStoref");
    tunisGL.tunisPixelStorei = (void (KHRONOS_APIENTRY *)(GLenum, GLint))tunisGLGetProcAddress("glPixelStorei");
    tunisGL.tunisPixelStorex = (void (KHRONOS_APIENTRY *)(GLenum, GLfixed))tunisGLGetProcAddress("glPixelStorex");
    tunisGL.tunisPixelTexGenParameterfSGIS = (void (KHRONOS_APIENTRY *)(GLenum, GLfloat))tunisGLGetProcAddress("glPixelTexGenParameterfSGIS");
    tunisGL.tunisPixelTexGenParameterfvSGIS = (void (KHRONOS_APIENTRY *)(GLenum, const GLfloat *))tunisGLGetProcAddress("glPixelTexGenParameterfvSGIS");
    tunisGL.tunisPixelTexGenParameteriSGIS = (void (KHRONOS_APIENTRY *)(GLenum, GLint))tunisGLGetProcAddress("glPixelTexGenParameteriSGIS");
    tunisGL.tunisPixelTexGenParameterivSGIS = (void (KHRONOS_APIENTRY *)(GLenum, const GLint *))tunisGLGetProcAddress("glPixelTexGenParameterivSGIS");
    tunisGL.tunisPixelTexGenSGIX = (void (KHRONOS_APIENTRY *)(GLenum))tunisGLGetProcAddress("glPixelTexGenSGIX");
    tunisGL.tunisPixelTransferf = (void (KHRONOS_APIENTRY *)(GLenum, GLfloat))tunisGLGetProcAddress("glPixelTransferf");
    tunisGL.tunisPixelTransferi = (void (KHRONOS_APIENTRY *)(GLenum, GLint))tunisGLGetProcAddress("glPixelTransferi");
    tunisGL.tunisPixelTransferxOES = (void (KHRONOS_APIENTRY *)(GLenum, GLfixed))tunisGLGetProcAddress("glPixelTransferxOES");
    tunisGL.tunisPixelTransformParameterfEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfloat))tunisGLGetProcAddress("glPixelTransformParameterfEXT");
    tunisGL.tunisPixelTransformParameterfvEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const GLfloat *))tunisGLGetProcAddress("glPixelTransformParameterfvEXT");
    tunisGL.tunisPixelTransformParameteriEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint))tunisGLGetProcAddress("glPixelTransformParameteriEXT");
    tunisGL.tunisPixelTransformParameterivEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const GLint *))tunisGLGetProcAddress("glPixelTransformParameterivEXT");
    tunisGL.tunisPixelZoom = (void (KHRONOS_APIENTRY *)(GLfloat, GLfloat))tunisGLGetProcAddress("glPixelZoom");
    tunisGL.tunisPixelZoomxOES = (void (KHRONOS_APIENTRY *)(GLfixed, GLfixed))tunisGLGetProcAddress("glPixelZoomxOES");
    tunisGL.tunisPointAlongPathNV = (GLboolean(KHRONOS_APIENTRY *)(GLuint, GLsizei, GLsizei, GLfloat, GLfloat *, GLfloat *, GLfloat *, GLfloat *))tunisGLGetProcAddress("glPointAlongPathNV");
    tunisGL.tunisPointParameterf = (void (KHRONOS_APIENTRY *)(GLenum, GLfloat))tunisGLGetProcAddress("glPointParameterf");
    tunisGL.tunisPointParameterfARB = (void (KHRONOS_APIENTRY *)(GLenum, GLfloat))tunisGLGetProcAddress("glPointParameterfARB");
    tunisGL.tunisPointParameterfEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLfloat))tunisGLGetProcAddress("glPointParameterfEXT");
    tunisGL.tunisPointParameterfSGIS = (void (KHRONOS_APIENTRY *)(GLenum, GLfloat))tunisGLGetProcAddress("glPointParameterfSGIS");
    tunisGL.tunisPointParameterfv = (void (KHRONOS_APIENTRY *)(GLenum, const GLfloat *))tunisGLGetProcAddress("glPointParameterfv");
    tunisGL.tunisPointParameterfvARB = (void (KHRONOS_APIENTRY *)(GLenum, const GLfloat *))tunisGLGetProcAddress("glPointParameterfvARB");
    tunisGL.tunisPointParameterfvEXT = (void (KHRONOS_APIENTRY *)(GLenum, const GLfloat *))tunisGLGetProcAddress("glPointParameterfvEXT");
    tunisGL.tunisPointParameterfvSGIS = (void (KHRONOS_APIENTRY *)(GLenum, const GLfloat *))tunisGLGetProcAddress("glPointParameterfvSGIS");
    tunisGL.tunisPointParameteri = (void (KHRONOS_APIENTRY *)(GLenum, GLint))tunisGLGetProcAddress("glPointParameteri");
    tunisGL.tunisPointParameteriNV = (void (KHRONOS_APIENTRY *)(GLenum, GLint))tunisGLGetProcAddress("glPointParameteriNV");
    tunisGL.tunisPointParameteriv = (void (KHRONOS_APIENTRY *)(GLenum, const GLint *))tunisGLGetProcAddress("glPointParameteriv");
    tunisGL.tunisPointParameterivNV = (void (KHRONOS_APIENTRY *)(GLenum, const GLint *))tunisGLGetProcAddress("glPointParameterivNV");
    tunisGL.tunisPointParameterx = (void (KHRONOS_APIENTRY *)(GLenum, GLfixed))tunisGLGetProcAddress("glPointParameterx");
    tunisGL.tunisPointParameterxOES = (void (KHRONOS_APIENTRY *)(GLenum, GLfixed))tunisGLGetProcAddress("glPointParameterxOES");
    tunisGL.tunisPointParameterxv = (void (KHRONOS_APIENTRY *)(GLenum, const GLfixed *))tunisGLGetProcAddress("glPointParameterxv");
    tunisGL.tunisPointParameterxvOES = (void (KHRONOS_APIENTRY *)(GLenum, const GLfixed *))tunisGLGetProcAddress("glPointParameterxvOES");
    tunisGL.tunisPointSize = (void (KHRONOS_APIENTRY *)(GLfloat))tunisGLGetProcAddress("glPointSize");
    tunisGL.tunisPointSizePointerOES = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, const void *))tunisGLGetProcAddress("glPointSizePointerOES");
    tunisGL.tunisPointSizex = (void (KHRONOS_APIENTRY *)(GLfixed))tunisGLGetProcAddress("glPointSizex");
    tunisGL.tunisPointSizexOES = (void (KHRONOS_APIENTRY *)(GLfixed))tunisGLGetProcAddress("glPointSizexOES");
    tunisGL.tunisPollAsyncSGIX = (GLint(KHRONOS_APIENTRY *)(GLuint *))tunisGLGetProcAddress("glPollAsyncSGIX");
    tunisGL.tunisPollInstrumentsSGIX = (GLint(KHRONOS_APIENTRY *)(GLint *))tunisGLGetProcAddress("glPollInstrumentsSGIX");
    tunisGL.tunisPolygonMode = (void (KHRONOS_APIENTRY *)(GLenum, GLenum))tunisGLGetProcAddress("glPolygonMode");
    tunisGL.tunisPolygonModeNV = (void (KHRONOS_APIENTRY *)(GLenum, GLenum))tunisGLGetProcAddress("glPolygonModeNV");
    tunisGL.tunisPolygonOffset = (void (KHRONOS_APIENTRY *)(GLfloat, GLfloat))tunisGLGetProcAddress("glPolygonOffset");
    tunisGL.tunisPolygonOffsetClamp = (void (KHRONOS_APIENTRY *)(GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glPolygonOffsetClamp");
    tunisGL.tunisPolygonOffsetClampEXT = (void (KHRONOS_APIENTRY *)(GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glPolygonOffsetClampEXT");
    tunisGL.tunisPolygonOffsetEXT = (void (KHRONOS_APIENTRY *)(GLfloat, GLfloat))tunisGLGetProcAddress("glPolygonOffsetEXT");
    tunisGL.tunisPolygonOffsetx = (void (KHRONOS_APIENTRY *)(GLfixed, GLfixed))tunisGLGetProcAddress("glPolygonOffsetx");
    tunisGL.tunisPolygonOffsetxOES = (void (KHRONOS_APIENTRY *)(GLfixed, GLfixed))tunisGLGetProcAddress("glPolygonOffsetxOES");
    tunisGL.tunisPolygonStipple = (void (KHRONOS_APIENTRY *)(const GLubyte *))tunisGLGetProcAddress("glPolygonStipple");
    tunisGL.tunisPopAttrib = (void (KHRONOS_APIENTRY *)(void))tunisGLGetProcAddress("glPopAttrib");
    tunisGL.tunisPopClientAttrib = (void (KHRONOS_APIENTRY *)(void))tunisGLGetProcAddress("glPopClientAttrib");
    tunisGL.tunisPopDebugGroup = (void (KHRONOS_APIENTRY *)(void))tunisGLGetProcAddress("glPopDebugGroup");
    tunisGL.tunisPopDebugGroupKHR = (void (KHRONOS_APIENTRY *)(void))tunisGLGetProcAddress("glPopDebugGroupKHR");
    tunisGL.tunisPopGroupMarkerEXT = (void (KHRONOS_APIENTRY *)(void))tunisGLGetProcAddress("glPopGroupMarkerEXT");
    tunisGL.tunisPopMatrix = (void (KHRONOS_APIENTRY *)(void))tunisGLGetProcAddress("glPopMatrix");
    tunisGL.tunisPopName = (void (KHRONOS_APIENTRY *)(void))tunisGLGetProcAddress("glPopName");
    tunisGL.tunisPresentFrameDualFillNV = (void (KHRONOS_APIENTRY *)(GLuint, GLuint64EXT, GLuint, GLuint, GLenum, GLenum, GLuint, GLenum, GLuint, GLenum, GLuint, GLenum, GLuint))tunisGLGetProcAddress("glPresentFrameDualFillNV");
    tunisGL.tunisPresentFrameKeyedNV = (void (KHRONOS_APIENTRY *)(GLuint, GLuint64EXT, GLuint, GLuint, GLenum, GLenum, GLuint, GLuint, GLenum, GLuint, GLuint))tunisGLGetProcAddress("glPresentFrameKeyedNV");
    tunisGL.tunisPrimitiveBoundingBox = (void (KHRONOS_APIENTRY *)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glPrimitiveBoundingBox");
    tunisGL.tunisPrimitiveBoundingBoxARB = (void (KHRONOS_APIENTRY *)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glPrimitiveBoundingBoxARB");
    tunisGL.tunisPrimitiveBoundingBoxEXT = (void (KHRONOS_APIENTRY *)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glPrimitiveBoundingBoxEXT");
    tunisGL.tunisPrimitiveBoundingBoxOES = (void (KHRONOS_APIENTRY *)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glPrimitiveBoundingBoxOES");
    tunisGL.tunisPrimitiveRestartIndex = (void (KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glPrimitiveRestartIndex");
    tunisGL.tunisPrimitiveRestartIndexNV = (void (KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glPrimitiveRestartIndexNV");
    tunisGL.tunisPrimitiveRestartNV = (void (KHRONOS_APIENTRY *)(void))tunisGLGetProcAddress("glPrimitiveRestartNV");
    tunisGL.tunisPrioritizeTextures = (void (KHRONOS_APIENTRY *)(GLsizei, const GLuint *, const GLfloat *))tunisGLGetProcAddress("glPrioritizeTextures");
    tunisGL.tunisPrioritizeTexturesEXT = (void (KHRONOS_APIENTRY *)(GLsizei, const GLuint *, const GLclampf *))tunisGLGetProcAddress("glPrioritizeTexturesEXT");
    tunisGL.tunisPrioritizeTexturesxOES = (void (KHRONOS_APIENTRY *)(GLsizei, const GLuint *, const GLfixed *))tunisGLGetProcAddress("glPrioritizeTexturesxOES");
    tunisGL.tunisProgramBinary = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, const void *, GLsizei))tunisGLGetProcAddress("glProgramBinary");
    tunisGL.tunisProgramBinaryOES = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, const void *, GLint))tunisGLGetProcAddress("glProgramBinaryOES");
    tunisGL.tunisProgramBufferParametersIivNV = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLuint, GLsizei, const GLint *))tunisGLGetProcAddress("glProgramBufferParametersIivNV");
    tunisGL.tunisProgramBufferParametersIuivNV = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLuint, GLsizei, const GLuint *))tunisGLGetProcAddress("glProgramBufferParametersIuivNV");
    tunisGL.tunisProgramBufferParametersfvNV = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLuint, GLsizei, const GLfloat *))tunisGLGetProcAddress("glProgramBufferParametersfvNV");
    tunisGL.tunisProgramEnvParameter4dARB = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLdouble, GLdouble, GLdouble, GLdouble))tunisGLGetProcAddress("glProgramEnvParameter4dARB");
    tunisGL.tunisProgramEnvParameter4dvARB = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, const GLdouble *))tunisGLGetProcAddress("glProgramEnvParameter4dvARB");
    tunisGL.tunisProgramEnvParameter4fARB = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLfloat, GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glProgramEnvParameter4fARB");
    tunisGL.tunisProgramEnvParameter4fvARB = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, const GLfloat *))tunisGLGetProcAddress("glProgramEnvParameter4fvARB");
    tunisGL.tunisProgramEnvParameterI4iNV = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLint, GLint, GLint, GLint))tunisGLGetProcAddress("glProgramEnvParameterI4iNV");
    tunisGL.tunisProgramEnvParameterI4ivNV = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, const GLint *))tunisGLGetProcAddress("glProgramEnvParameterI4ivNV");
    tunisGL.tunisProgramEnvParameterI4uiNV = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLuint, GLuint, GLuint, GLuint))tunisGLGetProcAddress("glProgramEnvParameterI4uiNV");
    tunisGL.tunisProgramEnvParameterI4uivNV = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, const GLuint *))tunisGLGetProcAddress("glProgramEnvParameterI4uivNV");
    tunisGL.tunisProgramEnvParameters4fvEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLsizei, const GLfloat *))tunisGLGetProcAddress("glProgramEnvParameters4fvEXT");
    tunisGL.tunisProgramEnvParametersI4ivNV = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLsizei, const GLint *))tunisGLGetProcAddress("glProgramEnvParametersI4ivNV");
    tunisGL.tunisProgramEnvParametersI4uivNV = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLsizei, const GLuint *))tunisGLGetProcAddress("glProgramEnvParametersI4uivNV");
    tunisGL.tunisProgramLocalParameter4dARB = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLdouble, GLdouble, GLdouble, GLdouble))tunisGLGetProcAddress("glProgramLocalParameter4dARB");
    tunisGL.tunisProgramLocalParameter4dvARB = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, const GLdouble *))tunisGLGetProcAddress("glProgramLocalParameter4dvARB");
    tunisGL.tunisProgramLocalParameter4fARB = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLfloat, GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glProgramLocalParameter4fARB");
    tunisGL.tunisProgramLocalParameter4fvARB = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, const GLfloat *))tunisGLGetProcAddress("glProgramLocalParameter4fvARB");
    tunisGL.tunisProgramLocalParameterI4iNV = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLint, GLint, GLint, GLint))tunisGLGetProcAddress("glProgramLocalParameterI4iNV");
    tunisGL.tunisProgramLocalParameterI4ivNV = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, const GLint *))tunisGLGetProcAddress("glProgramLocalParameterI4ivNV");
    tunisGL.tunisProgramLocalParameterI4uiNV = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLuint, GLuint, GLuint, GLuint))tunisGLGetProcAddress("glProgramLocalParameterI4uiNV");
    tunisGL.tunisProgramLocalParameterI4uivNV = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, const GLuint *))tunisGLGetProcAddress("glProgramLocalParameterI4uivNV");
    tunisGL.tunisProgramLocalParameters4fvEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLsizei, const GLfloat *))tunisGLGetProcAddress("glProgramLocalParameters4fvEXT");
    tunisGL.tunisProgramLocalParametersI4ivNV = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLsizei, const GLint *))tunisGLGetProcAddress("glProgramLocalParametersI4ivNV");
    tunisGL.tunisProgramLocalParametersI4uivNV = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLsizei, const GLuint *))tunisGLGetProcAddress("glProgramLocalParametersI4uivNV");
    tunisGL.tunisProgramNamedParameter4dNV = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, const GLubyte *, GLdouble, GLdouble, GLdouble, GLdouble))tunisGLGetProcAddress("glProgramNamedParameter4dNV");
    tunisGL.tunisProgramNamedParameter4dvNV = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, const GLubyte *, const GLdouble *))tunisGLGetProcAddress("glProgramNamedParameter4dvNV");
    tunisGL.tunisProgramNamedParameter4fNV = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, const GLubyte *, GLfloat, GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glProgramNamedParameter4fNV");
    tunisGL.tunisProgramNamedParameter4fvNV = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, const GLubyte *, const GLfloat *))tunisGLGetProcAddress("glProgramNamedParameter4fvNV");
    tunisGL.tunisProgramParameter4dNV = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLdouble, GLdouble, GLdouble, GLdouble))tunisGLGetProcAddress("glProgramParameter4dNV");
    tunisGL.tunisProgramParameter4dvNV = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, const GLdouble *))tunisGLGetProcAddress("glProgramParameter4dvNV");
    tunisGL.tunisProgramParameter4fNV = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLfloat, GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glProgramParameter4fNV");
    tunisGL.tunisProgramParameter4fvNV = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, const GLfloat *))tunisGLGetProcAddress("glProgramParameter4fvNV");
    tunisGL.tunisProgramParameteri = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint))tunisGLGetProcAddress("glProgramParameteri");
    tunisGL.tunisProgramParameteriARB = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint))tunisGLGetProcAddress("glProgramParameteriARB");
    tunisGL.tunisProgramParameteriEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint))tunisGLGetProcAddress("glProgramParameteriEXT");
    tunisGL.tunisProgramParameters4dvNV = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLsizei, const GLdouble *))tunisGLGetProcAddress("glProgramParameters4dvNV");
    tunisGL.tunisProgramParameters4fvNV = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLsizei, const GLfloat *))tunisGLGetProcAddress("glProgramParameters4fvNV");
    tunisGL.tunisProgramPathFragmentInputGenNV = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLenum, GLint, const GLfloat *))tunisGLGetProcAddress("glProgramPathFragmentInputGenNV");
    tunisGL.tunisProgramStringARB = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLsizei, const void *))tunisGLGetProcAddress("glProgramStringARB");
    tunisGL.tunisProgramSubroutineParametersuivNV = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, const GLuint *))tunisGLGetProcAddress("glProgramSubroutineParametersuivNV");
    tunisGL.tunisProgramUniform1d = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLdouble))tunisGLGetProcAddress("glProgramUniform1d");
    tunisGL.tunisProgramUniform1dEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLdouble))tunisGLGetProcAddress("glProgramUniform1dEXT");
    tunisGL.tunisProgramUniform1dv = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, const GLdouble *))tunisGLGetProcAddress("glProgramUniform1dv");
    tunisGL.tunisProgramUniform1dvEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, const GLdouble *))tunisGLGetProcAddress("glProgramUniform1dvEXT");
    tunisGL.tunisProgramUniform1f = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLfloat))tunisGLGetProcAddress("glProgramUniform1f");
    tunisGL.tunisProgramUniform1fEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLfloat))tunisGLGetProcAddress("glProgramUniform1fEXT");
    tunisGL.tunisProgramUniform1fv = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, const GLfloat *))tunisGLGetProcAddress("glProgramUniform1fv");
    tunisGL.tunisProgramUniform1fvEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, const GLfloat *))tunisGLGetProcAddress("glProgramUniform1fvEXT");
    tunisGL.tunisProgramUniform1i = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLint))tunisGLGetProcAddress("glProgramUniform1i");
    tunisGL.tunisProgramUniform1i64ARB = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLint64))tunisGLGetProcAddress("glProgramUniform1i64ARB");
    tunisGL.tunisProgramUniform1i64NV = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLint64EXT))tunisGLGetProcAddress("glProgramUniform1i64NV");
    tunisGL.tunisProgramUniform1i64vARB = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, const GLint64 *))tunisGLGetProcAddress("glProgramUniform1i64vARB");
    tunisGL.tunisProgramUniform1i64vNV = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, const GLint64EXT *))tunisGLGetProcAddress("glProgramUniform1i64vNV");
    tunisGL.tunisProgramUniform1iEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLint))tunisGLGetProcAddress("glProgramUniform1iEXT");
    tunisGL.tunisProgramUniform1iv = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, const GLint *))tunisGLGetProcAddress("glProgramUniform1iv");
    tunisGL.tunisProgramUniform1ivEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, const GLint *))tunisGLGetProcAddress("glProgramUniform1ivEXT");
    tunisGL.tunisProgramUniform1ui = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLuint))tunisGLGetProcAddress("glProgramUniform1ui");
    tunisGL.tunisProgramUniform1ui64ARB = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLuint64))tunisGLGetProcAddress("glProgramUniform1ui64ARB");
    tunisGL.tunisProgramUniform1ui64NV = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLuint64EXT))tunisGLGetProcAddress("glProgramUniform1ui64NV");
    tunisGL.tunisProgramUniform1ui64vARB = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, const GLuint64 *))tunisGLGetProcAddress("glProgramUniform1ui64vARB");
    tunisGL.tunisProgramUniform1ui64vNV = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, const GLuint64EXT *))tunisGLGetProcAddress("glProgramUniform1ui64vNV");
    tunisGL.tunisProgramUniform1uiEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLuint))tunisGLGetProcAddress("glProgramUniform1uiEXT");
    tunisGL.tunisProgramUniform1uiv = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, const GLuint *))tunisGLGetProcAddress("glProgramUniform1uiv");
    tunisGL.tunisProgramUniform1uivEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, const GLuint *))tunisGLGetProcAddress("glProgramUniform1uivEXT");
    tunisGL.tunisProgramUniform2d = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLdouble, GLdouble))tunisGLGetProcAddress("glProgramUniform2d");
    tunisGL.tunisProgramUniform2dEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLdouble, GLdouble))tunisGLGetProcAddress("glProgramUniform2dEXT");
    tunisGL.tunisProgramUniform2dv = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, const GLdouble *))tunisGLGetProcAddress("glProgramUniform2dv");
    tunisGL.tunisProgramUniform2dvEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, const GLdouble *))tunisGLGetProcAddress("glProgramUniform2dvEXT");
    tunisGL.tunisProgramUniform2f = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLfloat, GLfloat))tunisGLGetProcAddress("glProgramUniform2f");
    tunisGL.tunisProgramUniform2fEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLfloat, GLfloat))tunisGLGetProcAddress("glProgramUniform2fEXT");
    tunisGL.tunisProgramUniform2fv = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, const GLfloat *))tunisGLGetProcAddress("glProgramUniform2fv");
    tunisGL.tunisProgramUniform2fvEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, const GLfloat *))tunisGLGetProcAddress("glProgramUniform2fvEXT");
    tunisGL.tunisProgramUniform2i = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLint, GLint))tunisGLGetProcAddress("glProgramUniform2i");
    tunisGL.tunisProgramUniform2i64ARB = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLint64, GLint64))tunisGLGetProcAddress("glProgramUniform2i64ARB");
    tunisGL.tunisProgramUniform2i64NV = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLint64EXT, GLint64EXT))tunisGLGetProcAddress("glProgramUniform2i64NV");
    tunisGL.tunisProgramUniform2i64vARB = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, const GLint64 *))tunisGLGetProcAddress("glProgramUniform2i64vARB");
    tunisGL.tunisProgramUniform2i64vNV = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, const GLint64EXT *))tunisGLGetProcAddress("glProgramUniform2i64vNV");
    tunisGL.tunisProgramUniform2iEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLint, GLint))tunisGLGetProcAddress("glProgramUniform2iEXT");
    tunisGL.tunisProgramUniform2iv = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, const GLint *))tunisGLGetProcAddress("glProgramUniform2iv");
    tunisGL.tunisProgramUniform2ivEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, const GLint *))tunisGLGetProcAddress("glProgramUniform2ivEXT");
    tunisGL.tunisProgramUniform2ui = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLuint, GLuint))tunisGLGetProcAddress("glProgramUniform2ui");
    tunisGL.tunisProgramUniform2ui64ARB = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLuint64, GLuint64))tunisGLGetProcAddress("glProgramUniform2ui64ARB");
    tunisGL.tunisProgramUniform2ui64NV = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLuint64EXT, GLuint64EXT))tunisGLGetProcAddress("glProgramUniform2ui64NV");
    tunisGL.tunisProgramUniform2ui64vARB = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, const GLuint64 *))tunisGLGetProcAddress("glProgramUniform2ui64vARB");
    tunisGL.tunisProgramUniform2ui64vNV = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, const GLuint64EXT *))tunisGLGetProcAddress("glProgramUniform2ui64vNV");
    tunisGL.tunisProgramUniform2uiEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLuint, GLuint))tunisGLGetProcAddress("glProgramUniform2uiEXT");
    tunisGL.tunisProgramUniform2uiv = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, const GLuint *))tunisGLGetProcAddress("glProgramUniform2uiv");
    tunisGL.tunisProgramUniform2uivEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, const GLuint *))tunisGLGetProcAddress("glProgramUniform2uivEXT");
    tunisGL.tunisProgramUniform3d = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLdouble, GLdouble, GLdouble))tunisGLGetProcAddress("glProgramUniform3d");
    tunisGL.tunisProgramUniform3dEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLdouble, GLdouble, GLdouble))tunisGLGetProcAddress("glProgramUniform3dEXT");
    tunisGL.tunisProgramUniform3dv = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, const GLdouble *))tunisGLGetProcAddress("glProgramUniform3dv");
    tunisGL.tunisProgramUniform3dvEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, const GLdouble *))tunisGLGetProcAddress("glProgramUniform3dvEXT");
    tunisGL.tunisProgramUniform3f = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glProgramUniform3f");
    tunisGL.tunisProgramUniform3fEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glProgramUniform3fEXT");
    tunisGL.tunisProgramUniform3fv = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, const GLfloat *))tunisGLGetProcAddress("glProgramUniform3fv");
    tunisGL.tunisProgramUniform3fvEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, const GLfloat *))tunisGLGetProcAddress("glProgramUniform3fvEXT");
    tunisGL.tunisProgramUniform3i = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLint, GLint, GLint))tunisGLGetProcAddress("glProgramUniform3i");
    tunisGL.tunisProgramUniform3i64ARB = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLint64, GLint64, GLint64))tunisGLGetProcAddress("glProgramUniform3i64ARB");
    tunisGL.tunisProgramUniform3i64NV = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLint64EXT, GLint64EXT, GLint64EXT))tunisGLGetProcAddress("glProgramUniform3i64NV");
    tunisGL.tunisProgramUniform3i64vARB = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, const GLint64 *))tunisGLGetProcAddress("glProgramUniform3i64vARB");
    tunisGL.tunisProgramUniform3i64vNV = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, const GLint64EXT *))tunisGLGetProcAddress("glProgramUniform3i64vNV");
    tunisGL.tunisProgramUniform3iEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLint, GLint, GLint))tunisGLGetProcAddress("glProgramUniform3iEXT");
    tunisGL.tunisProgramUniform3iv = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, const GLint *))tunisGLGetProcAddress("glProgramUniform3iv");
    tunisGL.tunisProgramUniform3ivEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, const GLint *))tunisGLGetProcAddress("glProgramUniform3ivEXT");
    tunisGL.tunisProgramUniform3ui = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLuint, GLuint, GLuint))tunisGLGetProcAddress("glProgramUniform3ui");
    tunisGL.tunisProgramUniform3ui64ARB = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLuint64, GLuint64, GLuint64))tunisGLGetProcAddress("glProgramUniform3ui64ARB");
    tunisGL.tunisProgramUniform3ui64NV = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLuint64EXT, GLuint64EXT, GLuint64EXT))tunisGLGetProcAddress("glProgramUniform3ui64NV");
    tunisGL.tunisProgramUniform3ui64vARB = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, const GLuint64 *))tunisGLGetProcAddress("glProgramUniform3ui64vARB");
    tunisGL.tunisProgramUniform3ui64vNV = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, const GLuint64EXT *))tunisGLGetProcAddress("glProgramUniform3ui64vNV");
    tunisGL.tunisProgramUniform3uiEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLuint, GLuint, GLuint))tunisGLGetProcAddress("glProgramUniform3uiEXT");
    tunisGL.tunisProgramUniform3uiv = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, const GLuint *))tunisGLGetProcAddress("glProgramUniform3uiv");
    tunisGL.tunisProgramUniform3uivEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, const GLuint *))tunisGLGetProcAddress("glProgramUniform3uivEXT");
    tunisGL.tunisProgramUniform4d = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLdouble, GLdouble, GLdouble, GLdouble))tunisGLGetProcAddress("glProgramUniform4d");
    tunisGL.tunisProgramUniform4dEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLdouble, GLdouble, GLdouble, GLdouble))tunisGLGetProcAddress("glProgramUniform4dEXT");
    tunisGL.tunisProgramUniform4dv = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, const GLdouble *))tunisGLGetProcAddress("glProgramUniform4dv");
    tunisGL.tunisProgramUniform4dvEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, const GLdouble *))tunisGLGetProcAddress("glProgramUniform4dvEXT");
    tunisGL.tunisProgramUniform4f = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLfloat, GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glProgramUniform4f");
    tunisGL.tunisProgramUniform4fEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLfloat, GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glProgramUniform4fEXT");
    tunisGL.tunisProgramUniform4fv = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, const GLfloat *))tunisGLGetProcAddress("glProgramUniform4fv");
    tunisGL.tunisProgramUniform4fvEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, const GLfloat *))tunisGLGetProcAddress("glProgramUniform4fvEXT");
    tunisGL.tunisProgramUniform4i = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLint, GLint, GLint, GLint))tunisGLGetProcAddress("glProgramUniform4i");
    tunisGL.tunisProgramUniform4i64ARB = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLint64, GLint64, GLint64, GLint64))tunisGLGetProcAddress("glProgramUniform4i64ARB");
    tunisGL.tunisProgramUniform4i64NV = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLint64EXT, GLint64EXT, GLint64EXT, GLint64EXT))tunisGLGetProcAddress("glProgramUniform4i64NV");
    tunisGL.tunisProgramUniform4i64vARB = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, const GLint64 *))tunisGLGetProcAddress("glProgramUniform4i64vARB");
    tunisGL.tunisProgramUniform4i64vNV = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, const GLint64EXT *))tunisGLGetProcAddress("glProgramUniform4i64vNV");
    tunisGL.tunisProgramUniform4iEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLint, GLint, GLint, GLint))tunisGLGetProcAddress("glProgramUniform4iEXT");
    tunisGL.tunisProgramUniform4iv = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, const GLint *))tunisGLGetProcAddress("glProgramUniform4iv");
    tunisGL.tunisProgramUniform4ivEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, const GLint *))tunisGLGetProcAddress("glProgramUniform4ivEXT");
    tunisGL.tunisProgramUniform4ui = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLuint, GLuint, GLuint, GLuint))tunisGLGetProcAddress("glProgramUniform4ui");
    tunisGL.tunisProgramUniform4ui64ARB = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLuint64, GLuint64, GLuint64, GLuint64))tunisGLGetProcAddress("glProgramUniform4ui64ARB");
    tunisGL.tunisProgramUniform4ui64NV = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLuint64EXT, GLuint64EXT, GLuint64EXT, GLuint64EXT))tunisGLGetProcAddress("glProgramUniform4ui64NV");
    tunisGL.tunisProgramUniform4ui64vARB = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, const GLuint64 *))tunisGLGetProcAddress("glProgramUniform4ui64vARB");
    tunisGL.tunisProgramUniform4ui64vNV = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, const GLuint64EXT *))tunisGLGetProcAddress("glProgramUniform4ui64vNV");
    tunisGL.tunisProgramUniform4uiEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLuint, GLuint, GLuint, GLuint))tunisGLGetProcAddress("glProgramUniform4uiEXT");
    tunisGL.tunisProgramUniform4uiv = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, const GLuint *))tunisGLGetProcAddress("glProgramUniform4uiv");
    tunisGL.tunisProgramUniform4uivEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, const GLuint *))tunisGLGetProcAddress("glProgramUniform4uivEXT");
    tunisGL.tunisProgramUniformHandleui64ARB = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLuint64))tunisGLGetProcAddress("glProgramUniformHandleui64ARB");
    tunisGL.tunisProgramUniformHandleui64IMG = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLuint64))tunisGLGetProcAddress("glProgramUniformHandleui64IMG");
    tunisGL.tunisProgramUniformHandleui64NV = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLuint64))tunisGLGetProcAddress("glProgramUniformHandleui64NV");
    tunisGL.tunisProgramUniformHandleui64vARB = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, const GLuint64 *))tunisGLGetProcAddress("glProgramUniformHandleui64vARB");
    tunisGL.tunisProgramUniformHandleui64vIMG = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, const GLuint64 *))tunisGLGetProcAddress("glProgramUniformHandleui64vIMG");
    tunisGL.tunisProgramUniformHandleui64vNV = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, const GLuint64 *))tunisGLGetProcAddress("glProgramUniformHandleui64vNV");
    tunisGL.tunisProgramUniformMatrix2dv = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *))tunisGLGetProcAddress("glProgramUniformMatrix2dv");
    tunisGL.tunisProgramUniformMatrix2dvEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *))tunisGLGetProcAddress("glProgramUniformMatrix2dvEXT");
    tunisGL.tunisProgramUniformMatrix2fv = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *))tunisGLGetProcAddress("glProgramUniformMatrix2fv");
    tunisGL.tunisProgramUniformMatrix2fvEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *))tunisGLGetProcAddress("glProgramUniformMatrix2fvEXT");
    tunisGL.tunisProgramUniformMatrix2x3dv = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *))tunisGLGetProcAddress("glProgramUniformMatrix2x3dv");
    tunisGL.tunisProgramUniformMatrix2x3dvEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *))tunisGLGetProcAddress("glProgramUniformMatrix2x3dvEXT");
    tunisGL.tunisProgramUniformMatrix2x3fv = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *))tunisGLGetProcAddress("glProgramUniformMatrix2x3fv");
    tunisGL.tunisProgramUniformMatrix2x3fvEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *))tunisGLGetProcAddress("glProgramUniformMatrix2x3fvEXT");
    tunisGL.tunisProgramUniformMatrix2x4dv = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *))tunisGLGetProcAddress("glProgramUniformMatrix2x4dv");
    tunisGL.tunisProgramUniformMatrix2x4dvEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *))tunisGLGetProcAddress("glProgramUniformMatrix2x4dvEXT");
    tunisGL.tunisProgramUniformMatrix2x4fv = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *))tunisGLGetProcAddress("glProgramUniformMatrix2x4fv");
    tunisGL.tunisProgramUniformMatrix2x4fvEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *))tunisGLGetProcAddress("glProgramUniformMatrix2x4fvEXT");
    tunisGL.tunisProgramUniformMatrix3dv = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *))tunisGLGetProcAddress("glProgramUniformMatrix3dv");
    tunisGL.tunisProgramUniformMatrix3dvEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *))tunisGLGetProcAddress("glProgramUniformMatrix3dvEXT");
    tunisGL.tunisProgramUniformMatrix3fv = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *))tunisGLGetProcAddress("glProgramUniformMatrix3fv");
    tunisGL.tunisProgramUniformMatrix3fvEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *))tunisGLGetProcAddress("glProgramUniformMatrix3fvEXT");
    tunisGL.tunisProgramUniformMatrix3x2dv = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *))tunisGLGetProcAddress("glProgramUniformMatrix3x2dv");
    tunisGL.tunisProgramUniformMatrix3x2dvEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *))tunisGLGetProcAddress("glProgramUniformMatrix3x2dvEXT");
    tunisGL.tunisProgramUniformMatrix3x2fv = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *))tunisGLGetProcAddress("glProgramUniformMatrix3x2fv");
    tunisGL.tunisProgramUniformMatrix3x2fvEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *))tunisGLGetProcAddress("glProgramUniformMatrix3x2fvEXT");
    tunisGL.tunisProgramUniformMatrix3x4dv = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *))tunisGLGetProcAddress("glProgramUniformMatrix3x4dv");
    tunisGL.tunisProgramUniformMatrix3x4dvEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *))tunisGLGetProcAddress("glProgramUniformMatrix3x4dvEXT");
    tunisGL.tunisProgramUniformMatrix3x4fv = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *))tunisGLGetProcAddress("glProgramUniformMatrix3x4fv");
    tunisGL.tunisProgramUniformMatrix3x4fvEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *))tunisGLGetProcAddress("glProgramUniformMatrix3x4fvEXT");
    tunisGL.tunisProgramUniformMatrix4dv = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *))tunisGLGetProcAddress("glProgramUniformMatrix4dv");
    tunisGL.tunisProgramUniformMatrix4dvEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *))tunisGLGetProcAddress("glProgramUniformMatrix4dvEXT");
    tunisGL.tunisProgramUniformMatrix4fv = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *))tunisGLGetProcAddress("glProgramUniformMatrix4fv");
    tunisGL.tunisProgramUniformMatrix4fvEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *))tunisGLGetProcAddress("glProgramUniformMatrix4fvEXT");
    tunisGL.tunisProgramUniformMatrix4x2dv = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *))tunisGLGetProcAddress("glProgramUniformMatrix4x2dv");
    tunisGL.tunisProgramUniformMatrix4x2dvEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *))tunisGLGetProcAddress("glProgramUniformMatrix4x2dvEXT");
    tunisGL.tunisProgramUniformMatrix4x2fv = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *))tunisGLGetProcAddress("glProgramUniformMatrix4x2fv");
    tunisGL.tunisProgramUniformMatrix4x2fvEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *))tunisGLGetProcAddress("glProgramUniformMatrix4x2fvEXT");
    tunisGL.tunisProgramUniformMatrix4x3dv = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *))tunisGLGetProcAddress("glProgramUniformMatrix4x3dv");
    tunisGL.tunisProgramUniformMatrix4x3dvEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *))tunisGLGetProcAddress("glProgramUniformMatrix4x3dvEXT");
    tunisGL.tunisProgramUniformMatrix4x3fv = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *))tunisGLGetProcAddress("glProgramUniformMatrix4x3fv");
    tunisGL.tunisProgramUniformMatrix4x3fvEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *))tunisGLGetProcAddress("glProgramUniformMatrix4x3fvEXT");
    tunisGL.tunisProgramUniformui64NV = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLuint64EXT))tunisGLGetProcAddress("glProgramUniformui64NV");
    tunisGL.tunisProgramUniformui64vNV = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, const GLuint64EXT *))tunisGLGetProcAddress("glProgramUniformui64vNV");
    tunisGL.tunisProgramVertexLimitNV = (void (KHRONOS_APIENTRY *)(GLenum, GLint))tunisGLGetProcAddress("glProgramVertexLimitNV");
    tunisGL.tunisProvokingVertex = (void (KHRONOS_APIENTRY *)(GLenum))tunisGLGetProcAddress("glProvokingVertex");
    tunisGL.tunisProvokingVertexEXT = (void (KHRONOS_APIENTRY *)(GLenum))tunisGLGetProcAddress("glProvokingVertexEXT");
    tunisGL.tunisPushAttrib = (void (KHRONOS_APIENTRY *)(GLbitfield))tunisGLGetProcAddress("glPushAttrib");
    tunisGL.tunisPushClientAttrib = (void (KHRONOS_APIENTRY *)(GLbitfield))tunisGLGetProcAddress("glPushClientAttrib");
    tunisGL.tunisPushClientAttribDefaultEXT = (void (KHRONOS_APIENTRY *)(GLbitfield))tunisGLGetProcAddress("glPushClientAttribDefaultEXT");
    tunisGL.tunisPushDebugGroup = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLsizei, const GLchar *))tunisGLGetProcAddress("glPushDebugGroup");
    tunisGL.tunisPushDebugGroupKHR = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLsizei, const GLchar *))tunisGLGetProcAddress("glPushDebugGroupKHR");
    tunisGL.tunisPushGroupMarkerEXT = (void (KHRONOS_APIENTRY *)(GLsizei, const GLchar *))tunisGLGetProcAddress("glPushGroupMarkerEXT");
    tunisGL.tunisPushMatrix = (void (KHRONOS_APIENTRY *)(void))tunisGLGetProcAddress("glPushMatrix");
    tunisGL.tunisPushName = (void (KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glPushName");
    tunisGL.tunisQueryCounter = (void (KHRONOS_APIENTRY *)(GLuint, GLenum))tunisGLGetProcAddress("glQueryCounter");
    tunisGL.tunisQueryCounterEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum))tunisGLGetProcAddress("glQueryCounterEXT");
    tunisGL.tunisQueryMatrixxOES = (GLbitfield(KHRONOS_APIENTRY *)(GLfixed *, GLint *))tunisGLGetProcAddress("glQueryMatrixxOES");
    tunisGL.tunisQueryObjectParameteruiAMD = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLenum, GLuint))tunisGLGetProcAddress("glQueryObjectParameteruiAMD");
    tunisGL.tunisQueryResourceNV = (GLint(KHRONOS_APIENTRY *)(GLenum, GLint, GLuint, GLint *))tunisGLGetProcAddress("glQueryResourceNV");
    tunisGL.tunisQueryResourceTagNV = (void (KHRONOS_APIENTRY *)(GLint, const GLchar *))tunisGLGetProcAddress("glQueryResourceTagNV");
    tunisGL.tunisRasterPos2d = (void (KHRONOS_APIENTRY *)(GLdouble, GLdouble))tunisGLGetProcAddress("glRasterPos2d");
    tunisGL.tunisRasterPos2dv = (void (KHRONOS_APIENTRY *)(const GLdouble *))tunisGLGetProcAddress("glRasterPos2dv");
    tunisGL.tunisRasterPos2f = (void (KHRONOS_APIENTRY *)(GLfloat, GLfloat))tunisGLGetProcAddress("glRasterPos2f");
    tunisGL.tunisRasterPos2fv = (void (KHRONOS_APIENTRY *)(const GLfloat *))tunisGLGetProcAddress("glRasterPos2fv");
    tunisGL.tunisRasterPos2i = (void (KHRONOS_APIENTRY *)(GLint, GLint))tunisGLGetProcAddress("glRasterPos2i");
    tunisGL.tunisRasterPos2iv = (void (KHRONOS_APIENTRY *)(const GLint *))tunisGLGetProcAddress("glRasterPos2iv");
    tunisGL.tunisRasterPos2s = (void (KHRONOS_APIENTRY *)(GLshort, GLshort))tunisGLGetProcAddress("glRasterPos2s");
    tunisGL.tunisRasterPos2sv = (void (KHRONOS_APIENTRY *)(const GLshort *))tunisGLGetProcAddress("glRasterPos2sv");
    tunisGL.tunisRasterPos2xOES = (void (KHRONOS_APIENTRY *)(GLfixed, GLfixed))tunisGLGetProcAddress("glRasterPos2xOES");
    tunisGL.tunisRasterPos2xvOES = (void (KHRONOS_APIENTRY *)(const GLfixed *))tunisGLGetProcAddress("glRasterPos2xvOES");
    tunisGL.tunisRasterPos3d = (void (KHRONOS_APIENTRY *)(GLdouble, GLdouble, GLdouble))tunisGLGetProcAddress("glRasterPos3d");
    tunisGL.tunisRasterPos3dv = (void (KHRONOS_APIENTRY *)(const GLdouble *))tunisGLGetProcAddress("glRasterPos3dv");
    tunisGL.tunisRasterPos3f = (void (KHRONOS_APIENTRY *)(GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glRasterPos3f");
    tunisGL.tunisRasterPos3fv = (void (KHRONOS_APIENTRY *)(const GLfloat *))tunisGLGetProcAddress("glRasterPos3fv");
    tunisGL.tunisRasterPos3i = (void (KHRONOS_APIENTRY *)(GLint, GLint, GLint))tunisGLGetProcAddress("glRasterPos3i");
    tunisGL.tunisRasterPos3iv = (void (KHRONOS_APIENTRY *)(const GLint *))tunisGLGetProcAddress("glRasterPos3iv");
    tunisGL.tunisRasterPos3s = (void (KHRONOS_APIENTRY *)(GLshort, GLshort, GLshort))tunisGLGetProcAddress("glRasterPos3s");
    tunisGL.tunisRasterPos3sv = (void (KHRONOS_APIENTRY *)(const GLshort *))tunisGLGetProcAddress("glRasterPos3sv");
    tunisGL.tunisRasterPos3xOES = (void (KHRONOS_APIENTRY *)(GLfixed, GLfixed, GLfixed))tunisGLGetProcAddress("glRasterPos3xOES");
    tunisGL.tunisRasterPos3xvOES = (void (KHRONOS_APIENTRY *)(const GLfixed *))tunisGLGetProcAddress("glRasterPos3xvOES");
    tunisGL.tunisRasterPos4d = (void (KHRONOS_APIENTRY *)(GLdouble, GLdouble, GLdouble, GLdouble))tunisGLGetProcAddress("glRasterPos4d");
    tunisGL.tunisRasterPos4dv = (void (KHRONOS_APIENTRY *)(const GLdouble *))tunisGLGetProcAddress("glRasterPos4dv");
    tunisGL.tunisRasterPos4f = (void (KHRONOS_APIENTRY *)(GLfloat, GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glRasterPos4f");
    tunisGL.tunisRasterPos4fv = (void (KHRONOS_APIENTRY *)(const GLfloat *))tunisGLGetProcAddress("glRasterPos4fv");
    tunisGL.tunisRasterPos4i = (void (KHRONOS_APIENTRY *)(GLint, GLint, GLint, GLint))tunisGLGetProcAddress("glRasterPos4i");
    tunisGL.tunisRasterPos4iv = (void (KHRONOS_APIENTRY *)(const GLint *))tunisGLGetProcAddress("glRasterPos4iv");
    tunisGL.tunisRasterPos4s = (void (KHRONOS_APIENTRY *)(GLshort, GLshort, GLshort, GLshort))tunisGLGetProcAddress("glRasterPos4s");
    tunisGL.tunisRasterPos4sv = (void (KHRONOS_APIENTRY *)(const GLshort *))tunisGLGetProcAddress("glRasterPos4sv");
    tunisGL.tunisRasterPos4xOES = (void (KHRONOS_APIENTRY *)(GLfixed, GLfixed, GLfixed, GLfixed))tunisGLGetProcAddress("glRasterPos4xOES");
    tunisGL.tunisRasterPos4xvOES = (void (KHRONOS_APIENTRY *)(const GLfixed *))tunisGLGetProcAddress("glRasterPos4xvOES");
    tunisGL.tunisRasterSamplesEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLboolean))tunisGLGetProcAddress("glRasterSamplesEXT");
    tunisGL.tunisReadBuffer = (void (KHRONOS_APIENTRY *)(GLenum))tunisGLGetProcAddress("glReadBuffer");
    tunisGL.tunisReadBufferIndexedEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLint))tunisGLGetProcAddress("glReadBufferIndexedEXT");
    tunisGL.tunisReadBufferNV = (void (KHRONOS_APIENTRY *)(GLenum))tunisGLGetProcAddress("glReadBufferNV");
    tunisGL.tunisReadBufferRegion = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLint, GLsizei, GLsizei))tunisGLGetProcAddress("glReadBufferRegion");
    tunisGL.tunisReadInstrumentsSGIX = (void (KHRONOS_APIENTRY *)(GLint))tunisGLGetProcAddress("glReadInstrumentsSGIX");
    tunisGL.tunisReadPixels = (void (KHRONOS_APIENTRY *)(GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, void *))tunisGLGetProcAddress("glReadPixels");
    tunisGL.tunisReadnPixels = (void (KHRONOS_APIENTRY *)(GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, GLsizei, void *))tunisGLGetProcAddress("glReadnPixels");
    tunisGL.tunisReadnPixelsARB = (void (KHRONOS_APIENTRY *)(GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, GLsizei, void *))tunisGLGetProcAddress("glReadnPixelsARB");
    tunisGL.tunisReadnPixelsEXT = (void (KHRONOS_APIENTRY *)(GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, GLsizei, void *))tunisGLGetProcAddress("glReadnPixelsEXT");
    tunisGL.tunisReadnPixelsKHR = (void (KHRONOS_APIENTRY *)(GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, GLsizei, void *))tunisGLGetProcAddress("glReadnPixelsKHR");
    tunisGL.tunisRectd = (void (KHRONOS_APIENTRY *)(GLdouble, GLdouble, GLdouble, GLdouble))tunisGLGetProcAddress("glRectd");
    tunisGL.tunisRectdv = (void (KHRONOS_APIENTRY *)(const GLdouble *, const GLdouble *))tunisGLGetProcAddress("glRectdv");
    tunisGL.tunisRectf = (void (KHRONOS_APIENTRY *)(GLfloat, GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glRectf");
    tunisGL.tunisRectfv = (void (KHRONOS_APIENTRY *)(const GLfloat *, const GLfloat *))tunisGLGetProcAddress("glRectfv");
    tunisGL.tunisRecti = (void (KHRONOS_APIENTRY *)(GLint, GLint, GLint, GLint))tunisGLGetProcAddress("glRecti");
    tunisGL.tunisRectiv = (void (KHRONOS_APIENTRY *)(const GLint *, const GLint *))tunisGLGetProcAddress("glRectiv");
    tunisGL.tunisRects = (void (KHRONOS_APIENTRY *)(GLshort, GLshort, GLshort, GLshort))tunisGLGetProcAddress("glRects");
    tunisGL.tunisRectsv = (void (KHRONOS_APIENTRY *)(const GLshort *, const GLshort *))tunisGLGetProcAddress("glRectsv");
    tunisGL.tunisRectxOES = (void (KHRONOS_APIENTRY *)(GLfixed, GLfixed, GLfixed, GLfixed))tunisGLGetProcAddress("glRectxOES");
    tunisGL.tunisRectxvOES = (void (KHRONOS_APIENTRY *)(const GLfixed *, const GLfixed *))tunisGLGetProcAddress("glRectxvOES");
    tunisGL.tunisReferencePlaneSGIX = (void (KHRONOS_APIENTRY *)(const GLdouble *))tunisGLGetProcAddress("glReferencePlaneSGIX");
    tunisGL.tunisReleaseKeyedMutexWin32EXT = (GLboolean(KHRONOS_APIENTRY *)(GLuint, GLuint64))tunisGLGetProcAddress("glReleaseKeyedMutexWin32EXT");
    tunisGL.tunisReleaseShaderCompiler = (void (KHRONOS_APIENTRY *)(void))tunisGLGetProcAddress("glReleaseShaderCompiler");
    tunisGL.tunisRenderGpuMaskNV = (void (KHRONOS_APIENTRY *)(GLbitfield))tunisGLGetProcAddress("glRenderGpuMaskNV");
    tunisGL.tunisRenderMode = (GLint(KHRONOS_APIENTRY *)(GLenum))tunisGLGetProcAddress("glRenderMode");
    tunisGL.tunisRenderbufferStorage = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLsizei, GLsizei))tunisGLGetProcAddress("glRenderbufferStorage");
    tunisGL.tunisRenderbufferStorageEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLsizei, GLsizei))tunisGLGetProcAddress("glRenderbufferStorageEXT");
    tunisGL.tunisRenderbufferStorageMultisample = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLenum, GLsizei, GLsizei))tunisGLGetProcAddress("glRenderbufferStorageMultisample");
    tunisGL.tunisRenderbufferStorageMultisampleANGLE = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLenum, GLsizei, GLsizei))tunisGLGetProcAddress("glRenderbufferStorageMultisampleANGLE");
    tunisGL.tunisRenderbufferStorageMultisampleAPPLE = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLenum, GLsizei, GLsizei))tunisGLGetProcAddress("glRenderbufferStorageMultisampleAPPLE");
    tunisGL.tunisRenderbufferStorageMultisampleAdvancedAMD = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLsizei, GLenum, GLsizei, GLsizei))tunisGLGetProcAddress("glRenderbufferStorageMultisampleAdvancedAMD");
    tunisGL.tunisRenderbufferStorageMultisampleCoverageNV = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLsizei, GLenum, GLsizei, GLsizei))tunisGLGetProcAddress("glRenderbufferStorageMultisampleCoverageNV");
    tunisGL.tunisRenderbufferStorageMultisampleEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLenum, GLsizei, GLsizei))tunisGLGetProcAddress("glRenderbufferStorageMultisampleEXT");
    tunisGL.tunisRenderbufferStorageMultisampleIMG = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLenum, GLsizei, GLsizei))tunisGLGetProcAddress("glRenderbufferStorageMultisampleIMG");
    tunisGL.tunisRenderbufferStorageMultisampleNV = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLenum, GLsizei, GLsizei))tunisGLGetProcAddress("glRenderbufferStorageMultisampleNV");
    tunisGL.tunisRenderbufferStorageOES = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLsizei, GLsizei))tunisGLGetProcAddress("glRenderbufferStorageOES");
    tunisGL.tunisReplacementCodePointerSUN = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, const void **))tunisGLGetProcAddress("glReplacementCodePointerSUN");
    tunisGL.tunisReplacementCodeubSUN = (void (KHRONOS_APIENTRY *)(GLubyte))tunisGLGetProcAddress("glReplacementCodeubSUN");
    tunisGL.tunisReplacementCodeubvSUN = (void (KHRONOS_APIENTRY *)(const GLubyte *))tunisGLGetProcAddress("glReplacementCodeubvSUN");
    tunisGL.tunisReplacementCodeuiColor3fVertex3fSUN = (void (KHRONOS_APIENTRY *)(GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glReplacementCodeuiColor3fVertex3fSUN");
    tunisGL.tunisReplacementCodeuiColor3fVertex3fvSUN = (void (KHRONOS_APIENTRY *)(const GLuint *, const GLfloat *, const GLfloat *))tunisGLGetProcAddress("glReplacementCodeuiColor3fVertex3fvSUN");
    tunisGL.tunisReplacementCodeuiColor4fNormal3fVertex3fSUN = (void (KHRONOS_APIENTRY *)(GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glReplacementCodeuiColor4fNormal3fVertex3fSUN");
    tunisGL.tunisReplacementCodeuiColor4fNormal3fVertex3fvSUN = (void (KHRONOS_APIENTRY *)(const GLuint *, const GLfloat *, const GLfloat *, const GLfloat *))tunisGLGetProcAddress("glReplacementCodeuiColor4fNormal3fVertex3fvSUN");
    tunisGL.tunisReplacementCodeuiColor4ubVertex3fSUN = (void (KHRONOS_APIENTRY *)(GLuint, GLubyte, GLubyte, GLubyte, GLubyte, GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glReplacementCodeuiColor4ubVertex3fSUN");
    tunisGL.tunisReplacementCodeuiColor4ubVertex3fvSUN = (void (KHRONOS_APIENTRY *)(const GLuint *, const GLubyte *, const GLfloat *))tunisGLGetProcAddress("glReplacementCodeuiColor4ubVertex3fvSUN");
    tunisGL.tunisReplacementCodeuiNormal3fVertex3fSUN = (void (KHRONOS_APIENTRY *)(GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glReplacementCodeuiNormal3fVertex3fSUN");
    tunisGL.tunisReplacementCodeuiNormal3fVertex3fvSUN = (void (KHRONOS_APIENTRY *)(const GLuint *, const GLfloat *, const GLfloat *))tunisGLGetProcAddress("glReplacementCodeuiNormal3fVertex3fvSUN");
    tunisGL.tunisReplacementCodeuiSUN = (void (KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glReplacementCodeuiSUN");
    tunisGL.tunisReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN = (void (KHRONOS_APIENTRY *)(GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN");
    tunisGL.tunisReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN = (void (KHRONOS_APIENTRY *)(const GLuint *, const GLfloat *, const GLfloat *, const GLfloat *, const GLfloat *))tunisGLGetProcAddress("glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN");
    tunisGL.tunisReplacementCodeuiTexCoord2fNormal3fVertex3fSUN = (void (KHRONOS_APIENTRY *)(GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN");
    tunisGL.tunisReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN = (void (KHRONOS_APIENTRY *)(const GLuint *, const GLfloat *, const GLfloat *, const GLfloat *))tunisGLGetProcAddress("glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN");
    tunisGL.tunisReplacementCodeuiTexCoord2fVertex3fSUN = (void (KHRONOS_APIENTRY *)(GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glReplacementCodeuiTexCoord2fVertex3fSUN");
    tunisGL.tunisReplacementCodeuiTexCoord2fVertex3fvSUN = (void (KHRONOS_APIENTRY *)(const GLuint *, const GLfloat *, const GLfloat *))tunisGLGetProcAddress("glReplacementCodeuiTexCoord2fVertex3fvSUN");
    tunisGL.tunisReplacementCodeuiVertex3fSUN = (void (KHRONOS_APIENTRY *)(GLuint, GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glReplacementCodeuiVertex3fSUN");
    tunisGL.tunisReplacementCodeuiVertex3fvSUN = (void (KHRONOS_APIENTRY *)(const GLuint *, const GLfloat *))tunisGLGetProcAddress("glReplacementCodeuiVertex3fvSUN");
    tunisGL.tunisReplacementCodeuivSUN = (void (KHRONOS_APIENTRY *)(const GLuint *))tunisGLGetProcAddress("glReplacementCodeuivSUN");
    tunisGL.tunisReplacementCodeusSUN = (void (KHRONOS_APIENTRY *)(GLushort))tunisGLGetProcAddress("glReplacementCodeusSUN");
    tunisGL.tunisReplacementCodeusvSUN = (void (KHRONOS_APIENTRY *)(const GLushort *))tunisGLGetProcAddress("glReplacementCodeusvSUN");
    tunisGL.tunisRequestResidentProgramsNV = (void (KHRONOS_APIENTRY *)(GLsizei, const GLuint *))tunisGLGetProcAddress("glRequestResidentProgramsNV");
    tunisGL.tunisResetHistogram = (void (KHRONOS_APIENTRY *)(GLenum))tunisGLGetProcAddress("glResetHistogram");
    tunisGL.tunisResetHistogramEXT = (void (KHRONOS_APIENTRY *)(GLenum))tunisGLGetProcAddress("glResetHistogramEXT");
    tunisGL.tunisResetMinmax = (void (KHRONOS_APIENTRY *)(GLenum))tunisGLGetProcAddress("glResetMinmax");
    tunisGL.tunisResetMinmaxEXT = (void (KHRONOS_APIENTRY *)(GLenum))tunisGLGetProcAddress("glResetMinmaxEXT");
    tunisGL.tunisResizeBuffersMESA = (void (KHRONOS_APIENTRY *)(void))tunisGLGetProcAddress("glResizeBuffersMESA");
    tunisGL.tunisResolveDepthValuesNV = (void (KHRONOS_APIENTRY *)(void))tunisGLGetProcAddress("glResolveDepthValuesNV");
    tunisGL.tunisResolveMultisampleFramebufferAPPLE = (void (KHRONOS_APIENTRY *)(void))tunisGLGetProcAddress("glResolveMultisampleFramebufferAPPLE");
    tunisGL.tunisResumeTransformFeedback = (void (KHRONOS_APIENTRY *)(void))tunisGLGetProcAddress("glResumeTransformFeedback");
    tunisGL.tunisResumeTransformFeedbackNV = (void (KHRONOS_APIENTRY *)(void))tunisGLGetProcAddress("glResumeTransformFeedbackNV");
    tunisGL.tunisRotated = (void (KHRONOS_APIENTRY *)(GLdouble, GLdouble, GLdouble, GLdouble))tunisGLGetProcAddress("glRotated");
    tunisGL.tunisRotatef = (void (KHRONOS_APIENTRY *)(GLfloat, GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glRotatef");
    tunisGL.tunisRotatex = (void (KHRONOS_APIENTRY *)(GLfixed, GLfixed, GLfixed, GLfixed))tunisGLGetProcAddress("glRotatex");
    tunisGL.tunisRotatexOES = (void (KHRONOS_APIENTRY *)(GLfixed, GLfixed, GLfixed, GLfixed))tunisGLGetProcAddress("glRotatexOES");
    tunisGL.tunisSampleCoverage = (void (KHRONOS_APIENTRY *)(GLfloat, GLboolean))tunisGLGetProcAddress("glSampleCoverage");
    tunisGL.tunisSampleCoverageARB = (void (KHRONOS_APIENTRY *)(GLfloat, GLboolean))tunisGLGetProcAddress("glSampleCoverageARB");
    tunisGL.tunisSampleCoveragex = (void (KHRONOS_APIENTRY *)(GLclampx, GLboolean))tunisGLGetProcAddress("glSampleCoveragex");
    tunisGL.tunisSampleCoveragexOES = (void (KHRONOS_APIENTRY *)(GLclampx, GLboolean))tunisGLGetProcAddress("glSampleCoveragexOES");
    tunisGL.tunisSampleMapATI = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLenum))tunisGLGetProcAddress("glSampleMapATI");
    tunisGL.tunisSampleMaskEXT = (void (KHRONOS_APIENTRY *)(GLclampf, GLboolean))tunisGLGetProcAddress("glSampleMaskEXT");
    tunisGL.tunisSampleMaskIndexedNV = (void (KHRONOS_APIENTRY *)(GLuint, GLbitfield))tunisGLGetProcAddress("glSampleMaskIndexedNV");
    tunisGL.tunisSampleMaskSGIS = (void (KHRONOS_APIENTRY *)(GLclampf, GLboolean))tunisGLGetProcAddress("glSampleMaskSGIS");
    tunisGL.tunisSampleMaski = (void (KHRONOS_APIENTRY *)(GLuint, GLbitfield))tunisGLGetProcAddress("glSampleMaski");
    tunisGL.tunisSamplePatternEXT = (void (KHRONOS_APIENTRY *)(GLenum))tunisGLGetProcAddress("glSamplePatternEXT");
    tunisGL.tunisSamplePatternSGIS = (void (KHRONOS_APIENTRY *)(GLenum))tunisGLGetProcAddress("glSamplePatternSGIS");
    tunisGL.tunisSamplerParameterIiv = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, const GLint *))tunisGLGetProcAddress("glSamplerParameterIiv");
    tunisGL.tunisSamplerParameterIivEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, const GLint *))tunisGLGetProcAddress("glSamplerParameterIivEXT");
    tunisGL.tunisSamplerParameterIivOES = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, const GLint *))tunisGLGetProcAddress("glSamplerParameterIivOES");
    tunisGL.tunisSamplerParameterIuiv = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, const GLuint *))tunisGLGetProcAddress("glSamplerParameterIuiv");
    tunisGL.tunisSamplerParameterIuivEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, const GLuint *))tunisGLGetProcAddress("glSamplerParameterIuivEXT");
    tunisGL.tunisSamplerParameterIuivOES = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, const GLuint *))tunisGLGetProcAddress("glSamplerParameterIuivOES");
    tunisGL.tunisSamplerParameterf = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLfloat))tunisGLGetProcAddress("glSamplerParameterf");
    tunisGL.tunisSamplerParameterfv = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, const GLfloat *))tunisGLGetProcAddress("glSamplerParameterfv");
    tunisGL.tunisSamplerParameteri = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint))tunisGLGetProcAddress("glSamplerParameteri");
    tunisGL.tunisSamplerParameteriv = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, const GLint *))tunisGLGetProcAddress("glSamplerParameteriv");
    tunisGL.tunisScaled = (void (KHRONOS_APIENTRY *)(GLdouble, GLdouble, GLdouble))tunisGLGetProcAddress("glScaled");
    tunisGL.tunisScalef = (void (KHRONOS_APIENTRY *)(GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glScalef");
    tunisGL.tunisScalex = (void (KHRONOS_APIENTRY *)(GLfixed, GLfixed, GLfixed))tunisGLGetProcAddress("glScalex");
    tunisGL.tunisScalexOES = (void (KHRONOS_APIENTRY *)(GLfixed, GLfixed, GLfixed))tunisGLGetProcAddress("glScalexOES");
    tunisGL.tunisScissor = (void (KHRONOS_APIENTRY *)(GLint, GLint, GLsizei, GLsizei))tunisGLGetProcAddress("glScissor");
    tunisGL.tunisScissorArrayv = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, const GLint *))tunisGLGetProcAddress("glScissorArrayv");
    tunisGL.tunisScissorArrayvNV = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, const GLint *))tunisGLGetProcAddress("glScissorArrayvNV");
    tunisGL.tunisScissorArrayvOES = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, const GLint *))tunisGLGetProcAddress("glScissorArrayvOES");
    tunisGL.tunisScissorIndexed = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLint, GLsizei, GLsizei))tunisGLGetProcAddress("glScissorIndexed");
    tunisGL.tunisScissorIndexedNV = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLint, GLsizei, GLsizei))tunisGLGetProcAddress("glScissorIndexedNV");
    tunisGL.tunisScissorIndexedOES = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLint, GLsizei, GLsizei))tunisGLGetProcAddress("glScissorIndexedOES");
    tunisGL.tunisScissorIndexedv = (void (KHRONOS_APIENTRY *)(GLuint, const GLint *))tunisGLGetProcAddress("glScissorIndexedv");
    tunisGL.tunisScissorIndexedvNV = (void (KHRONOS_APIENTRY *)(GLuint, const GLint *))tunisGLGetProcAddress("glScissorIndexedvNV");
    tunisGL.tunisScissorIndexedvOES = (void (KHRONOS_APIENTRY *)(GLuint, const GLint *))tunisGLGetProcAddress("glScissorIndexedvOES");
    tunisGL.tunisSecondaryColor3b = (void (KHRONOS_APIENTRY *)(GLbyte, GLbyte, GLbyte))tunisGLGetProcAddress("glSecondaryColor3b");
    tunisGL.tunisSecondaryColor3bEXT = (void (KHRONOS_APIENTRY *)(GLbyte, GLbyte, GLbyte))tunisGLGetProcAddress("glSecondaryColor3bEXT");
    tunisGL.tunisSecondaryColor3bv = (void (KHRONOS_APIENTRY *)(const GLbyte *))tunisGLGetProcAddress("glSecondaryColor3bv");
    tunisGL.tunisSecondaryColor3bvEXT = (void (KHRONOS_APIENTRY *)(const GLbyte *))tunisGLGetProcAddress("glSecondaryColor3bvEXT");
    tunisGL.tunisSecondaryColor3d = (void (KHRONOS_APIENTRY *)(GLdouble, GLdouble, GLdouble))tunisGLGetProcAddress("glSecondaryColor3d");
    tunisGL.tunisSecondaryColor3dEXT = (void (KHRONOS_APIENTRY *)(GLdouble, GLdouble, GLdouble))tunisGLGetProcAddress("glSecondaryColor3dEXT");
    tunisGL.tunisSecondaryColor3dv = (void (KHRONOS_APIENTRY *)(const GLdouble *))tunisGLGetProcAddress("glSecondaryColor3dv");
    tunisGL.tunisSecondaryColor3dvEXT = (void (KHRONOS_APIENTRY *)(const GLdouble *))tunisGLGetProcAddress("glSecondaryColor3dvEXT");
    tunisGL.tunisSecondaryColor3f = (void (KHRONOS_APIENTRY *)(GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glSecondaryColor3f");
    tunisGL.tunisSecondaryColor3fEXT = (void (KHRONOS_APIENTRY *)(GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glSecondaryColor3fEXT");
    tunisGL.tunisSecondaryColor3fv = (void (KHRONOS_APIENTRY *)(const GLfloat *))tunisGLGetProcAddress("glSecondaryColor3fv");
    tunisGL.tunisSecondaryColor3fvEXT = (void (KHRONOS_APIENTRY *)(const GLfloat *))tunisGLGetProcAddress("glSecondaryColor3fvEXT");
    tunisGL.tunisSecondaryColor3hNV = (void (KHRONOS_APIENTRY *)(GLhalfNV, GLhalfNV, GLhalfNV))tunisGLGetProcAddress("glSecondaryColor3hNV");
    tunisGL.tunisSecondaryColor3hvNV = (void (KHRONOS_APIENTRY *)(const GLhalfNV *))tunisGLGetProcAddress("glSecondaryColor3hvNV");
    tunisGL.tunisSecondaryColor3i = (void (KHRONOS_APIENTRY *)(GLint, GLint, GLint))tunisGLGetProcAddress("glSecondaryColor3i");
    tunisGL.tunisSecondaryColor3iEXT = (void (KHRONOS_APIENTRY *)(GLint, GLint, GLint))tunisGLGetProcAddress("glSecondaryColor3iEXT");
    tunisGL.tunisSecondaryColor3iv = (void (KHRONOS_APIENTRY *)(const GLint *))tunisGLGetProcAddress("glSecondaryColor3iv");
    tunisGL.tunisSecondaryColor3ivEXT = (void (KHRONOS_APIENTRY *)(const GLint *))tunisGLGetProcAddress("glSecondaryColor3ivEXT");
    tunisGL.tunisSecondaryColor3s = (void (KHRONOS_APIENTRY *)(GLshort, GLshort, GLshort))tunisGLGetProcAddress("glSecondaryColor3s");
    tunisGL.tunisSecondaryColor3sEXT = (void (KHRONOS_APIENTRY *)(GLshort, GLshort, GLshort))tunisGLGetProcAddress("glSecondaryColor3sEXT");
    tunisGL.tunisSecondaryColor3sv = (void (KHRONOS_APIENTRY *)(const GLshort *))tunisGLGetProcAddress("glSecondaryColor3sv");
    tunisGL.tunisSecondaryColor3svEXT = (void (KHRONOS_APIENTRY *)(const GLshort *))tunisGLGetProcAddress("glSecondaryColor3svEXT");
    tunisGL.tunisSecondaryColor3ub = (void (KHRONOS_APIENTRY *)(GLubyte, GLubyte, GLubyte))tunisGLGetProcAddress("glSecondaryColor3ub");
    tunisGL.tunisSecondaryColor3ubEXT = (void (KHRONOS_APIENTRY *)(GLubyte, GLubyte, GLubyte))tunisGLGetProcAddress("glSecondaryColor3ubEXT");
    tunisGL.tunisSecondaryColor3ubv = (void (KHRONOS_APIENTRY *)(const GLubyte *))tunisGLGetProcAddress("glSecondaryColor3ubv");
    tunisGL.tunisSecondaryColor3ubvEXT = (void (KHRONOS_APIENTRY *)(const GLubyte *))tunisGLGetProcAddress("glSecondaryColor3ubvEXT");
    tunisGL.tunisSecondaryColor3ui = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLuint))tunisGLGetProcAddress("glSecondaryColor3ui");
    tunisGL.tunisSecondaryColor3uiEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLuint))tunisGLGetProcAddress("glSecondaryColor3uiEXT");
    tunisGL.tunisSecondaryColor3uiv = (void (KHRONOS_APIENTRY *)(const GLuint *))tunisGLGetProcAddress("glSecondaryColor3uiv");
    tunisGL.tunisSecondaryColor3uivEXT = (void (KHRONOS_APIENTRY *)(const GLuint *))tunisGLGetProcAddress("glSecondaryColor3uivEXT");
    tunisGL.tunisSecondaryColor3us = (void (KHRONOS_APIENTRY *)(GLushort, GLushort, GLushort))tunisGLGetProcAddress("glSecondaryColor3us");
    tunisGL.tunisSecondaryColor3usEXT = (void (KHRONOS_APIENTRY *)(GLushort, GLushort, GLushort))tunisGLGetProcAddress("glSecondaryColor3usEXT");
    tunisGL.tunisSecondaryColor3usv = (void (KHRONOS_APIENTRY *)(const GLushort *))tunisGLGetProcAddress("glSecondaryColor3usv");
    tunisGL.tunisSecondaryColor3usvEXT = (void (KHRONOS_APIENTRY *)(const GLushort *))tunisGLGetProcAddress("glSecondaryColor3usvEXT");
    tunisGL.tunisSecondaryColorFormatNV = (void (KHRONOS_APIENTRY *)(GLint, GLenum, GLsizei))tunisGLGetProcAddress("glSecondaryColorFormatNV");
    tunisGL.tunisSecondaryColorP3ui = (void (KHRONOS_APIENTRY *)(GLenum, GLuint))tunisGLGetProcAddress("glSecondaryColorP3ui");
    tunisGL.tunisSecondaryColorP3uiv = (void (KHRONOS_APIENTRY *)(GLenum, const GLuint *))tunisGLGetProcAddress("glSecondaryColorP3uiv");
    tunisGL.tunisSecondaryColorPointer = (void (KHRONOS_APIENTRY *)(GLint, GLenum, GLsizei, const void *))tunisGLGetProcAddress("glSecondaryColorPointer");
    tunisGL.tunisSecondaryColorPointerEXT = (void (KHRONOS_APIENTRY *)(GLint, GLenum, GLsizei, const void *))tunisGLGetProcAddress("glSecondaryColorPointerEXT");
    tunisGL.tunisSecondaryColorPointerListIBM = (void (KHRONOS_APIENTRY *)(GLint, GLenum, GLint, const void **, GLint))tunisGLGetProcAddress("glSecondaryColorPointerListIBM");
    tunisGL.tunisSelectBuffer = (void (KHRONOS_APIENTRY *)(GLsizei, GLuint *))tunisGLGetProcAddress("glSelectBuffer");
    tunisGL.tunisSelectPerfMonitorCountersAMD = (void (KHRONOS_APIENTRY *)(GLuint, GLboolean, GLuint, GLint, GLuint *))tunisGLGetProcAddress("glSelectPerfMonitorCountersAMD");
    tunisGL.tunisSemaphoreParameterui64vEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, const GLuint64 *))tunisGLGetProcAddress("glSemaphoreParameterui64vEXT");
    tunisGL.tunisSeparableFilter2D = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLsizei, GLsizei, GLenum, GLenum, const void *, const void *))tunisGLGetProcAddress("glSeparableFilter2D");
    tunisGL.tunisSeparableFilter2DEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLsizei, GLsizei, GLenum, GLenum, const void *, const void *))tunisGLGetProcAddress("glSeparableFilter2DEXT");
    tunisGL.tunisSetFenceAPPLE = (void (KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glSetFenceAPPLE");
    tunisGL.tunisSetFenceNV = (void (KHRONOS_APIENTRY *)(GLuint, GLenum))tunisGLGetProcAddress("glSetFenceNV");
    tunisGL.tunisSetFragmentShaderConstantATI = (void (KHRONOS_APIENTRY *)(GLuint, const GLfloat *))tunisGLGetProcAddress("glSetFragmentShaderConstantATI");
    tunisGL.tunisSetInvariantEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, const void *))tunisGLGetProcAddress("glSetInvariantEXT");
    tunisGL.tunisSetLocalConstantEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, const void *))tunisGLGetProcAddress("glSetLocalConstantEXT");
    tunisGL.tunisSetMultisamplefvAMD = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, const GLfloat *))tunisGLGetProcAddress("glSetMultisamplefvAMD");
    tunisGL.tunisShadeModel = (void (KHRONOS_APIENTRY *)(GLenum))tunisGLGetProcAddress("glShadeModel");
    tunisGL.tunisShaderBinary = (void (KHRONOS_APIENTRY *)(GLsizei, const GLuint *, GLenum, const void *, GLsizei))tunisGLGetProcAddress("glShaderBinary");
    tunisGL.tunisShaderOp1EXT = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLuint))tunisGLGetProcAddress("glShaderOp1EXT");
    tunisGL.tunisShaderOp2EXT = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLuint, GLuint))tunisGLGetProcAddress("glShaderOp2EXT");
    tunisGL.tunisShaderOp3EXT = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLuint, GLuint, GLuint))tunisGLGetProcAddress("glShaderOp3EXT");
    tunisGL.tunisShaderSource = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, const GLchar *const*, const GLint *))tunisGLGetProcAddress("glShaderSource");
    tunisGL.tunisShaderSourceARB = (void (KHRONOS_APIENTRY *)(GLhandleARB, GLsizei, const GLcharARB **, const GLint *))tunisGLGetProcAddress("glShaderSourceARB");
    tunisGL.tunisShaderStorageBlockBinding = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLuint))tunisGLGetProcAddress("glShaderStorageBlockBinding");
    tunisGL.tunisSharpenTexFuncSGIS = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, const GLfloat *))tunisGLGetProcAddress("glSharpenTexFuncSGIS");
    tunisGL.tunisSignalSemaphoreEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, const GLuint *, GLuint, const GLuint *, const GLenum *))tunisGLGetProcAddress("glSignalSemaphoreEXT");
    tunisGL.tunisSignalVkFenceNV = (void (KHRONOS_APIENTRY *)(GLuint64))tunisGLGetProcAddress("glSignalVkFenceNV");
    tunisGL.tunisSignalVkSemaphoreNV = (void (KHRONOS_APIENTRY *)(GLuint64))tunisGLGetProcAddress("glSignalVkSemaphoreNV");
    tunisGL.tunisSpecializeShader = (void (KHRONOS_APIENTRY *)(GLuint, const GLchar *, GLuint, const GLuint *, const GLuint *))tunisGLGetProcAddress("glSpecializeShader");
    tunisGL.tunisSpecializeShaderARB = (void (KHRONOS_APIENTRY *)(GLuint, const GLchar *, GLuint, const GLuint *, const GLuint *))tunisGLGetProcAddress("glSpecializeShaderARB");
    tunisGL.tunisSpriteParameterfSGIX = (void (KHRONOS_APIENTRY *)(GLenum, GLfloat))tunisGLGetProcAddress("glSpriteParameterfSGIX");
    tunisGL.tunisSpriteParameterfvSGIX = (void (KHRONOS_APIENTRY *)(GLenum, const GLfloat *))tunisGLGetProcAddress("glSpriteParameterfvSGIX");
    tunisGL.tunisSpriteParameteriSGIX = (void (KHRONOS_APIENTRY *)(GLenum, GLint))tunisGLGetProcAddress("glSpriteParameteriSGIX");
    tunisGL.tunisSpriteParameterivSGIX = (void (KHRONOS_APIENTRY *)(GLenum, const GLint *))tunisGLGetProcAddress("glSpriteParameterivSGIX");
    tunisGL.tunisStartInstrumentsSGIX = (void (KHRONOS_APIENTRY *)(void))tunisGLGetProcAddress("glStartInstrumentsSGIX");
    tunisGL.tunisStartTilingQCOM = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLuint, GLuint, GLbitfield))tunisGLGetProcAddress("glStartTilingQCOM");
    tunisGL.tunisStateCaptureNV = (void (KHRONOS_APIENTRY *)(GLuint, GLenum))tunisGLGetProcAddress("glStateCaptureNV");
    tunisGL.tunisStencilClearTagEXT = (void (KHRONOS_APIENTRY *)(GLsizei, GLuint))tunisGLGetProcAddress("glStencilClearTagEXT");
    tunisGL.tunisStencilFillPathInstancedNV = (void (KHRONOS_APIENTRY *)(GLsizei, GLenum, const void *, GLuint, GLenum, GLuint, GLenum, const GLfloat *))tunisGLGetProcAddress("glStencilFillPathInstancedNV");
    tunisGL.tunisStencilFillPathNV = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLuint))tunisGLGetProcAddress("glStencilFillPathNV");
    tunisGL.tunisStencilFunc = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLuint))tunisGLGetProcAddress("glStencilFunc");
    tunisGL.tunisStencilFuncSeparate = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint, GLuint))tunisGLGetProcAddress("glStencilFuncSeparate");
    tunisGL.tunisStencilFuncSeparateATI = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint, GLuint))tunisGLGetProcAddress("glStencilFuncSeparateATI");
    tunisGL.tunisStencilMask = (void (KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glStencilMask");
    tunisGL.tunisStencilMaskSeparate = (void (KHRONOS_APIENTRY *)(GLenum, GLuint))tunisGLGetProcAddress("glStencilMaskSeparate");
    tunisGL.tunisStencilOp = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum))tunisGLGetProcAddress("glStencilOp");
    tunisGL.tunisStencilOpSeparate = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLenum))tunisGLGetProcAddress("glStencilOpSeparate");
    tunisGL.tunisStencilOpSeparateATI = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLenum))tunisGLGetProcAddress("glStencilOpSeparateATI");
    tunisGL.tunisStencilOpValueAMD = (void (KHRONOS_APIENTRY *)(GLenum, GLuint))tunisGLGetProcAddress("glStencilOpValueAMD");
    tunisGL.tunisStencilStrokePathInstancedNV = (void (KHRONOS_APIENTRY *)(GLsizei, GLenum, const void *, GLuint, GLint, GLuint, GLenum, const GLfloat *))tunisGLGetProcAddress("glStencilStrokePathInstancedNV");
    tunisGL.tunisStencilStrokePathNV = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLuint))tunisGLGetProcAddress("glStencilStrokePathNV");
    tunisGL.tunisStencilThenCoverFillPathInstancedNV = (void (KHRONOS_APIENTRY *)(GLsizei, GLenum, const void *, GLuint, GLenum, GLuint, GLenum, GLenum, const GLfloat *))tunisGLGetProcAddress("glStencilThenCoverFillPathInstancedNV");
    tunisGL.tunisStencilThenCoverFillPathNV = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLuint, GLenum))tunisGLGetProcAddress("glStencilThenCoverFillPathNV");
    tunisGL.tunisStencilThenCoverStrokePathInstancedNV = (void (KHRONOS_APIENTRY *)(GLsizei, GLenum, const void *, GLuint, GLint, GLuint, GLenum, GLenum, const GLfloat *))tunisGLGetProcAddress("glStencilThenCoverStrokePathInstancedNV");
    tunisGL.tunisStencilThenCoverStrokePathNV = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLuint, GLenum))tunisGLGetProcAddress("glStencilThenCoverStrokePathNV");
    tunisGL.tunisStopInstrumentsSGIX = (void (KHRONOS_APIENTRY *)(GLint))tunisGLGetProcAddress("glStopInstrumentsSGIX");
    tunisGL.tunisStringMarkerGREMEDY = (void (KHRONOS_APIENTRY *)(GLsizei, const void *))tunisGLGetProcAddress("glStringMarkerGREMEDY");
    tunisGL.tunisSubpixelPrecisionBiasNV = (void (KHRONOS_APIENTRY *)(GLuint, GLuint))tunisGLGetProcAddress("glSubpixelPrecisionBiasNV");
    tunisGL.tunisSwizzleEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLenum, GLenum, GLenum, GLenum))tunisGLGetProcAddress("glSwizzleEXT");
    tunisGL.tunisSyncTextureINTEL = (void (KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glSyncTextureINTEL");
    tunisGL.tunisTagSampleBufferSGIX = (void (KHRONOS_APIENTRY *)(void))tunisGLGetProcAddress("glTagSampleBufferSGIX");
    tunisGL.tunisTangent3bEXT = (void (KHRONOS_APIENTRY *)(GLbyte, GLbyte, GLbyte))tunisGLGetProcAddress("glTangent3bEXT");
    tunisGL.tunisTangent3bvEXT = (void (KHRONOS_APIENTRY *)(const GLbyte *))tunisGLGetProcAddress("glTangent3bvEXT");
    tunisGL.tunisTangent3dEXT = (void (KHRONOS_APIENTRY *)(GLdouble, GLdouble, GLdouble))tunisGLGetProcAddress("glTangent3dEXT");
    tunisGL.tunisTangent3dvEXT = (void (KHRONOS_APIENTRY *)(const GLdouble *))tunisGLGetProcAddress("glTangent3dvEXT");
    tunisGL.tunisTangent3fEXT = (void (KHRONOS_APIENTRY *)(GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glTangent3fEXT");
    tunisGL.tunisTangent3fvEXT = (void (KHRONOS_APIENTRY *)(const GLfloat *))tunisGLGetProcAddress("glTangent3fvEXT");
    tunisGL.tunisTangent3iEXT = (void (KHRONOS_APIENTRY *)(GLint, GLint, GLint))tunisGLGetProcAddress("glTangent3iEXT");
    tunisGL.tunisTangent3ivEXT = (void (KHRONOS_APIENTRY *)(const GLint *))tunisGLGetProcAddress("glTangent3ivEXT");
    tunisGL.tunisTangent3sEXT = (void (KHRONOS_APIENTRY *)(GLshort, GLshort, GLshort))tunisGLGetProcAddress("glTangent3sEXT");
    tunisGL.tunisTangent3svEXT = (void (KHRONOS_APIENTRY *)(const GLshort *))tunisGLGetProcAddress("glTangent3svEXT");
    tunisGL.tunisTangentPointerEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, const void *))tunisGLGetProcAddress("glTangentPointerEXT");
    tunisGL.tunisTbufferMask3DFX = (void (KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glTbufferMask3DFX");
    tunisGL.tunisTessellationFactorAMD = (void (KHRONOS_APIENTRY *)(GLfloat))tunisGLGetProcAddress("glTessellationFactorAMD");
    tunisGL.tunisTessellationModeAMD = (void (KHRONOS_APIENTRY *)(GLenum))tunisGLGetProcAddress("glTessellationModeAMD");
    tunisGL.tunisTestFenceAPPLE = (GLboolean(KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glTestFenceAPPLE");
    tunisGL.tunisTestFenceNV = (GLboolean(KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glTestFenceNV");
    tunisGL.tunisTestObjectAPPLE = (GLboolean(KHRONOS_APIENTRY *)(GLenum, GLuint))tunisGLGetProcAddress("glTestObjectAPPLE");
    tunisGL.tunisTexBuffer = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLuint))tunisGLGetProcAddress("glTexBuffer");
    tunisGL.tunisTexBufferARB = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLuint))tunisGLGetProcAddress("glTexBufferARB");
    tunisGL.tunisTexBufferEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLuint))tunisGLGetProcAddress("glTexBufferEXT");
    tunisGL.tunisTexBufferOES = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLuint))tunisGLGetProcAddress("glTexBufferOES");
    tunisGL.tunisTexBufferRange = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLuint, GLintptr, GLsizeiptr))tunisGLGetProcAddress("glTexBufferRange");
    tunisGL.tunisTexBufferRangeEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLuint, GLintptr, GLsizeiptr))tunisGLGetProcAddress("glTexBufferRangeEXT");
    tunisGL.tunisTexBufferRangeOES = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLuint, GLintptr, GLsizeiptr))tunisGLGetProcAddress("glTexBufferRangeOES");
    tunisGL.tunisTexBumpParameterfvATI = (void (KHRONOS_APIENTRY *)(GLenum, const GLfloat *))tunisGLGetProcAddress("glTexBumpParameterfvATI");
    tunisGL.tunisTexBumpParameterivATI = (void (KHRONOS_APIENTRY *)(GLenum, const GLint *))tunisGLGetProcAddress("glTexBumpParameterivATI");
    tunisGL.tunisTexCoord1bOES = (void (KHRONOS_APIENTRY *)(GLbyte))tunisGLGetProcAddress("glTexCoord1bOES");
    tunisGL.tunisTexCoord1bvOES = (void (KHRONOS_APIENTRY *)(const GLbyte *))tunisGLGetProcAddress("glTexCoord1bvOES");
    tunisGL.tunisTexCoord1d = (void (KHRONOS_APIENTRY *)(GLdouble))tunisGLGetProcAddress("glTexCoord1d");
    tunisGL.tunisTexCoord1dv = (void (KHRONOS_APIENTRY *)(const GLdouble *))tunisGLGetProcAddress("glTexCoord1dv");
    tunisGL.tunisTexCoord1f = (void (KHRONOS_APIENTRY *)(GLfloat))tunisGLGetProcAddress("glTexCoord1f");
    tunisGL.tunisTexCoord1fv = (void (KHRONOS_APIENTRY *)(const GLfloat *))tunisGLGetProcAddress("glTexCoord1fv");
    tunisGL.tunisTexCoord1hNV = (void (KHRONOS_APIENTRY *)(GLhalfNV))tunisGLGetProcAddress("glTexCoord1hNV");
    tunisGL.tunisTexCoord1hvNV = (void (KHRONOS_APIENTRY *)(const GLhalfNV *))tunisGLGetProcAddress("glTexCoord1hvNV");
    tunisGL.tunisTexCoord1i = (void (KHRONOS_APIENTRY *)(GLint))tunisGLGetProcAddress("glTexCoord1i");
    tunisGL.tunisTexCoord1iv = (void (KHRONOS_APIENTRY *)(const GLint *))tunisGLGetProcAddress("glTexCoord1iv");
    tunisGL.tunisTexCoord1s = (void (KHRONOS_APIENTRY *)(GLshort))tunisGLGetProcAddress("glTexCoord1s");
    tunisGL.tunisTexCoord1sv = (void (KHRONOS_APIENTRY *)(const GLshort *))tunisGLGetProcAddress("glTexCoord1sv");
    tunisGL.tunisTexCoord1xOES = (void (KHRONOS_APIENTRY *)(GLfixed))tunisGLGetProcAddress("glTexCoord1xOES");
    tunisGL.tunisTexCoord1xvOES = (void (KHRONOS_APIENTRY *)(const GLfixed *))tunisGLGetProcAddress("glTexCoord1xvOES");
    tunisGL.tunisTexCoord2bOES = (void (KHRONOS_APIENTRY *)(GLbyte, GLbyte))tunisGLGetProcAddress("glTexCoord2bOES");
    tunisGL.tunisTexCoord2bvOES = (void (KHRONOS_APIENTRY *)(const GLbyte *))tunisGLGetProcAddress("glTexCoord2bvOES");
    tunisGL.tunisTexCoord2d = (void (KHRONOS_APIENTRY *)(GLdouble, GLdouble))tunisGLGetProcAddress("glTexCoord2d");
    tunisGL.tunisTexCoord2dv = (void (KHRONOS_APIENTRY *)(const GLdouble *))tunisGLGetProcAddress("glTexCoord2dv");
    tunisGL.tunisTexCoord2f = (void (KHRONOS_APIENTRY *)(GLfloat, GLfloat))tunisGLGetProcAddress("glTexCoord2f");
    tunisGL.tunisTexCoord2fColor3fVertex3fSUN = (void (KHRONOS_APIENTRY *)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glTexCoord2fColor3fVertex3fSUN");
    tunisGL.tunisTexCoord2fColor3fVertex3fvSUN = (void (KHRONOS_APIENTRY *)(const GLfloat *, const GLfloat *, const GLfloat *))tunisGLGetProcAddress("glTexCoord2fColor3fVertex3fvSUN");
    tunisGL.tunisTexCoord2fColor4fNormal3fVertex3fSUN = (void (KHRONOS_APIENTRY *)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glTexCoord2fColor4fNormal3fVertex3fSUN");
    tunisGL.tunisTexCoord2fColor4fNormal3fVertex3fvSUN = (void (KHRONOS_APIENTRY *)(const GLfloat *, const GLfloat *, const GLfloat *, const GLfloat *))tunisGLGetProcAddress("glTexCoord2fColor4fNormal3fVertex3fvSUN");
    tunisGL.tunisTexCoord2fColor4ubVertex3fSUN = (void (KHRONOS_APIENTRY *)(GLfloat, GLfloat, GLubyte, GLubyte, GLubyte, GLubyte, GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glTexCoord2fColor4ubVertex3fSUN");
    tunisGL.tunisTexCoord2fColor4ubVertex3fvSUN = (void (KHRONOS_APIENTRY *)(const GLfloat *, const GLubyte *, const GLfloat *))tunisGLGetProcAddress("glTexCoord2fColor4ubVertex3fvSUN");
    tunisGL.tunisTexCoord2fNormal3fVertex3fSUN = (void (KHRONOS_APIENTRY *)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glTexCoord2fNormal3fVertex3fSUN");
    tunisGL.tunisTexCoord2fNormal3fVertex3fvSUN = (void (KHRONOS_APIENTRY *)(const GLfloat *, const GLfloat *, const GLfloat *))tunisGLGetProcAddress("glTexCoord2fNormal3fVertex3fvSUN");
    tunisGL.tunisTexCoord2fVertex3fSUN = (void (KHRONOS_APIENTRY *)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glTexCoord2fVertex3fSUN");
    tunisGL.tunisTexCoord2fVertex3fvSUN = (void (KHRONOS_APIENTRY *)(const GLfloat *, const GLfloat *))tunisGLGetProcAddress("glTexCoord2fVertex3fvSUN");
    tunisGL.tunisTexCoord2fv = (void (KHRONOS_APIENTRY *)(const GLfloat *))tunisGLGetProcAddress("glTexCoord2fv");
    tunisGL.tunisTexCoord2hNV = (void (KHRONOS_APIENTRY *)(GLhalfNV, GLhalfNV))tunisGLGetProcAddress("glTexCoord2hNV");
    tunisGL.tunisTexCoord2hvNV = (void (KHRONOS_APIENTRY *)(const GLhalfNV *))tunisGLGetProcAddress("glTexCoord2hvNV");
    tunisGL.tunisTexCoord2i = (void (KHRONOS_APIENTRY *)(GLint, GLint))tunisGLGetProcAddress("glTexCoord2i");
    tunisGL.tunisTexCoord2iv = (void (KHRONOS_APIENTRY *)(const GLint *))tunisGLGetProcAddress("glTexCoord2iv");
    tunisGL.tunisTexCoord2s = (void (KHRONOS_APIENTRY *)(GLshort, GLshort))tunisGLGetProcAddress("glTexCoord2s");
    tunisGL.tunisTexCoord2sv = (void (KHRONOS_APIENTRY *)(const GLshort *))tunisGLGetProcAddress("glTexCoord2sv");
    tunisGL.tunisTexCoord2xOES = (void (KHRONOS_APIENTRY *)(GLfixed, GLfixed))tunisGLGetProcAddress("glTexCoord2xOES");
    tunisGL.tunisTexCoord2xvOES = (void (KHRONOS_APIENTRY *)(const GLfixed *))tunisGLGetProcAddress("glTexCoord2xvOES");
    tunisGL.tunisTexCoord3bOES = (void (KHRONOS_APIENTRY *)(GLbyte, GLbyte, GLbyte))tunisGLGetProcAddress("glTexCoord3bOES");
    tunisGL.tunisTexCoord3bvOES = (void (KHRONOS_APIENTRY *)(const GLbyte *))tunisGLGetProcAddress("glTexCoord3bvOES");
    tunisGL.tunisTexCoord3d = (void (KHRONOS_APIENTRY *)(GLdouble, GLdouble, GLdouble))tunisGLGetProcAddress("glTexCoord3d");
    tunisGL.tunisTexCoord3dv = (void (KHRONOS_APIENTRY *)(const GLdouble *))tunisGLGetProcAddress("glTexCoord3dv");
    tunisGL.tunisTexCoord3f = (void (KHRONOS_APIENTRY *)(GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glTexCoord3f");
    tunisGL.tunisTexCoord3fv = (void (KHRONOS_APIENTRY *)(const GLfloat *))tunisGLGetProcAddress("glTexCoord3fv");
    tunisGL.tunisTexCoord3hNV = (void (KHRONOS_APIENTRY *)(GLhalfNV, GLhalfNV, GLhalfNV))tunisGLGetProcAddress("glTexCoord3hNV");
    tunisGL.tunisTexCoord3hvNV = (void (KHRONOS_APIENTRY *)(const GLhalfNV *))tunisGLGetProcAddress("glTexCoord3hvNV");
    tunisGL.tunisTexCoord3i = (void (KHRONOS_APIENTRY *)(GLint, GLint, GLint))tunisGLGetProcAddress("glTexCoord3i");
    tunisGL.tunisTexCoord3iv = (void (KHRONOS_APIENTRY *)(const GLint *))tunisGLGetProcAddress("glTexCoord3iv");
    tunisGL.tunisTexCoord3s = (void (KHRONOS_APIENTRY *)(GLshort, GLshort, GLshort))tunisGLGetProcAddress("glTexCoord3s");
    tunisGL.tunisTexCoord3sv = (void (KHRONOS_APIENTRY *)(const GLshort *))tunisGLGetProcAddress("glTexCoord3sv");
    tunisGL.tunisTexCoord3xOES = (void (KHRONOS_APIENTRY *)(GLfixed, GLfixed, GLfixed))tunisGLGetProcAddress("glTexCoord3xOES");
    tunisGL.tunisTexCoord3xvOES = (void (KHRONOS_APIENTRY *)(const GLfixed *))tunisGLGetProcAddress("glTexCoord3xvOES");
    tunisGL.tunisTexCoord4bOES = (void (KHRONOS_APIENTRY *)(GLbyte, GLbyte, GLbyte, GLbyte))tunisGLGetProcAddress("glTexCoord4bOES");
    tunisGL.tunisTexCoord4bvOES = (void (KHRONOS_APIENTRY *)(const GLbyte *))tunisGLGetProcAddress("glTexCoord4bvOES");
    tunisGL.tunisTexCoord4d = (void (KHRONOS_APIENTRY *)(GLdouble, GLdouble, GLdouble, GLdouble))tunisGLGetProcAddress("glTexCoord4d");
    tunisGL.tunisTexCoord4dv = (void (KHRONOS_APIENTRY *)(const GLdouble *))tunisGLGetProcAddress("glTexCoord4dv");
    tunisGL.tunisTexCoord4f = (void (KHRONOS_APIENTRY *)(GLfloat, GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glTexCoord4f");
    tunisGL.tunisTexCoord4fColor4fNormal3fVertex4fSUN = (void (KHRONOS_APIENTRY *)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glTexCoord4fColor4fNormal3fVertex4fSUN");
    tunisGL.tunisTexCoord4fColor4fNormal3fVertex4fvSUN = (void (KHRONOS_APIENTRY *)(const GLfloat *, const GLfloat *, const GLfloat *, const GLfloat *))tunisGLGetProcAddress("glTexCoord4fColor4fNormal3fVertex4fvSUN");
    tunisGL.tunisTexCoord4fVertex4fSUN = (void (KHRONOS_APIENTRY *)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glTexCoord4fVertex4fSUN");
    tunisGL.tunisTexCoord4fVertex4fvSUN = (void (KHRONOS_APIENTRY *)(const GLfloat *, const GLfloat *))tunisGLGetProcAddress("glTexCoord4fVertex4fvSUN");
    tunisGL.tunisTexCoord4fv = (void (KHRONOS_APIENTRY *)(const GLfloat *))tunisGLGetProcAddress("glTexCoord4fv");
    tunisGL.tunisTexCoord4hNV = (void (KHRONOS_APIENTRY *)(GLhalfNV, GLhalfNV, GLhalfNV, GLhalfNV))tunisGLGetProcAddress("glTexCoord4hNV");
    tunisGL.tunisTexCoord4hvNV = (void (KHRONOS_APIENTRY *)(const GLhalfNV *))tunisGLGetProcAddress("glTexCoord4hvNV");
    tunisGL.tunisTexCoord4i = (void (KHRONOS_APIENTRY *)(GLint, GLint, GLint, GLint))tunisGLGetProcAddress("glTexCoord4i");
    tunisGL.tunisTexCoord4iv = (void (KHRONOS_APIENTRY *)(const GLint *))tunisGLGetProcAddress("glTexCoord4iv");
    tunisGL.tunisTexCoord4s = (void (KHRONOS_APIENTRY *)(GLshort, GLshort, GLshort, GLshort))tunisGLGetProcAddress("glTexCoord4s");
    tunisGL.tunisTexCoord4sv = (void (KHRONOS_APIENTRY *)(const GLshort *))tunisGLGetProcAddress("glTexCoord4sv");
    tunisGL.tunisTexCoord4xOES = (void (KHRONOS_APIENTRY *)(GLfixed, GLfixed, GLfixed, GLfixed))tunisGLGetProcAddress("glTexCoord4xOES");
    tunisGL.tunisTexCoord4xvOES = (void (KHRONOS_APIENTRY *)(const GLfixed *))tunisGLGetProcAddress("glTexCoord4xvOES");
    tunisGL.tunisTexCoordFormatNV = (void (KHRONOS_APIENTRY *)(GLint, GLenum, GLsizei))tunisGLGetProcAddress("glTexCoordFormatNV");
    tunisGL.tunisTexCoordP1ui = (void (KHRONOS_APIENTRY *)(GLenum, GLuint))tunisGLGetProcAddress("glTexCoordP1ui");
    tunisGL.tunisTexCoordP1uiv = (void (KHRONOS_APIENTRY *)(GLenum, const GLuint *))tunisGLGetProcAddress("glTexCoordP1uiv");
    tunisGL.tunisTexCoordP2ui = (void (KHRONOS_APIENTRY *)(GLenum, GLuint))tunisGLGetProcAddress("glTexCoordP2ui");
    tunisGL.tunisTexCoordP2uiv = (void (KHRONOS_APIENTRY *)(GLenum, const GLuint *))tunisGLGetProcAddress("glTexCoordP2uiv");
    tunisGL.tunisTexCoordP3ui = (void (KHRONOS_APIENTRY *)(GLenum, GLuint))tunisGLGetProcAddress("glTexCoordP3ui");
    tunisGL.tunisTexCoordP3uiv = (void (KHRONOS_APIENTRY *)(GLenum, const GLuint *))tunisGLGetProcAddress("glTexCoordP3uiv");
    tunisGL.tunisTexCoordP4ui = (void (KHRONOS_APIENTRY *)(GLenum, GLuint))tunisGLGetProcAddress("glTexCoordP4ui");
    tunisGL.tunisTexCoordP4uiv = (void (KHRONOS_APIENTRY *)(GLenum, const GLuint *))tunisGLGetProcAddress("glTexCoordP4uiv");
    tunisGL.tunisTexCoordPointer = (void (KHRONOS_APIENTRY *)(GLint, GLenum, GLsizei, const void *))tunisGLGetProcAddress("glTexCoordPointer");
    tunisGL.tunisTexCoordPointerEXT = (void (KHRONOS_APIENTRY *)(GLint, GLenum, GLsizei, GLsizei, const void *))tunisGLGetProcAddress("glTexCoordPointerEXT");
    tunisGL.tunisTexCoordPointerListIBM = (void (KHRONOS_APIENTRY *)(GLint, GLenum, GLint, const void **, GLint))tunisGLGetProcAddress("glTexCoordPointerListIBM");
    tunisGL.tunisTexCoordPointervINTEL = (void (KHRONOS_APIENTRY *)(GLint, GLenum, const void **))tunisGLGetProcAddress("glTexCoordPointervINTEL");
    tunisGL.tunisTexEnvf = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfloat))tunisGLGetProcAddress("glTexEnvf");
    tunisGL.tunisTexEnvfv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const GLfloat *))tunisGLGetProcAddress("glTexEnvfv");
    tunisGL.tunisTexEnvi = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint))tunisGLGetProcAddress("glTexEnvi");
    tunisGL.tunisTexEnviv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const GLint *))tunisGLGetProcAddress("glTexEnviv");
    tunisGL.tunisTexEnvx = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfixed))tunisGLGetProcAddress("glTexEnvx");
    tunisGL.tunisTexEnvxOES = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfixed))tunisGLGetProcAddress("glTexEnvxOES");
    tunisGL.tunisTexEnvxv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const GLfixed *))tunisGLGetProcAddress("glTexEnvxv");
    tunisGL.tunisTexEnvxvOES = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const GLfixed *))tunisGLGetProcAddress("glTexEnvxvOES");
    tunisGL.tunisTexFilterFuncSGIS = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLsizei, const GLfloat *))tunisGLGetProcAddress("glTexFilterFuncSGIS");
    tunisGL.tunisTexGend = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLdouble))tunisGLGetProcAddress("glTexGend");
    tunisGL.tunisTexGendv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const GLdouble *))tunisGLGetProcAddress("glTexGendv");
    tunisGL.tunisTexGenf = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfloat))tunisGLGetProcAddress("glTexGenf");
    tunisGL.tunisTexGenfOES = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfloat))tunisGLGetProcAddress("glTexGenfOES");
    tunisGL.tunisTexGenfv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const GLfloat *))tunisGLGetProcAddress("glTexGenfv");
    tunisGL.tunisTexGenfvOES = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const GLfloat *))tunisGLGetProcAddress("glTexGenfvOES");
    tunisGL.tunisTexGeni = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint))tunisGLGetProcAddress("glTexGeni");
    tunisGL.tunisTexGeniOES = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint))tunisGLGetProcAddress("glTexGeniOES");
    tunisGL.tunisTexGeniv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const GLint *))tunisGLGetProcAddress("glTexGeniv");
    tunisGL.tunisTexGenivOES = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const GLint *))tunisGLGetProcAddress("glTexGenivOES");
    tunisGL.tunisTexGenxOES = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfixed))tunisGLGetProcAddress("glTexGenxOES");
    tunisGL.tunisTexGenxvOES = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const GLfixed *))tunisGLGetProcAddress("glTexGenxvOES");
    tunisGL.tunisTexImage1D = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLint, GLsizei, GLint, GLenum, GLenum, const void *))tunisGLGetProcAddress("glTexImage1D");
    tunisGL.tunisTexImage2D = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLint, GLsizei, GLsizei, GLint, GLenum, GLenum, const void *))tunisGLGetProcAddress("glTexImage2D");
    tunisGL.tunisTexImage2DMultisample = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLboolean))tunisGLGetProcAddress("glTexImage2DMultisample");
    tunisGL.tunisTexImage2DMultisampleCoverageNV = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLsizei, GLint, GLsizei, GLsizei, GLboolean))tunisGLGetProcAddress("glTexImage2DMultisampleCoverageNV");
    tunisGL.tunisTexImage3D = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLint, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, const void *))tunisGLGetProcAddress("glTexImage3D");
    tunisGL.tunisTexImage3DEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, const void *))tunisGLGetProcAddress("glTexImage3DEXT");
    tunisGL.tunisTexImage3DMultisample = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean))tunisGLGetProcAddress("glTexImage3DMultisample");
    tunisGL.tunisTexImage3DMultisampleCoverageNV = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLsizei, GLint, GLsizei, GLsizei, GLsizei, GLboolean))tunisGLGetProcAddress("glTexImage3DMultisampleCoverageNV");
    tunisGL.tunisTexImage3DOES = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, const void *))tunisGLGetProcAddress("glTexImage3DOES");
    tunisGL.tunisTexImage4DSGIS = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, const void *))tunisGLGetProcAddress("glTexImage4DSGIS");
    tunisGL.tunisTexPageCommitmentARB = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLboolean))tunisGLGetProcAddress("glTexPageCommitmentARB");
    tunisGL.tunisTexPageCommitmentEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLboolean))tunisGLGetProcAddress("glTexPageCommitmentEXT");
    tunisGL.tunisTexParameterIiv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const GLint *))tunisGLGetProcAddress("glTexParameterIiv");
    tunisGL.tunisTexParameterIivEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const GLint *))tunisGLGetProcAddress("glTexParameterIivEXT");
    tunisGL.tunisTexParameterIivOES = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const GLint *))tunisGLGetProcAddress("glTexParameterIivOES");
    tunisGL.tunisTexParameterIuiv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const GLuint *))tunisGLGetProcAddress("glTexParameterIuiv");
    tunisGL.tunisTexParameterIuivEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const GLuint *))tunisGLGetProcAddress("glTexParameterIuivEXT");
    tunisGL.tunisTexParameterIuivOES = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const GLuint *))tunisGLGetProcAddress("glTexParameterIuivOES");
    tunisGL.tunisTexParameterf = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfloat))tunisGLGetProcAddress("glTexParameterf");
    tunisGL.tunisTexParameterfv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const GLfloat *))tunisGLGetProcAddress("glTexParameterfv");
    tunisGL.tunisTexParameteri = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint))tunisGLGetProcAddress("glTexParameteri");
    tunisGL.tunisTexParameteriv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const GLint *))tunisGLGetProcAddress("glTexParameteriv");
    tunisGL.tunisTexParameterx = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfixed))tunisGLGetProcAddress("glTexParameterx");
    tunisGL.tunisTexParameterxOES = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfixed))tunisGLGetProcAddress("glTexParameterxOES");
    tunisGL.tunisTexParameterxv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const GLfixed *))tunisGLGetProcAddress("glTexParameterxv");
    tunisGL.tunisTexParameterxvOES = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const GLfixed *))tunisGLGetProcAddress("glTexParameterxvOES");
    tunisGL.tunisTexRenderbufferNV = (void (KHRONOS_APIENTRY *)(GLenum, GLuint))tunisGLGetProcAddress("glTexRenderbufferNV");
    tunisGL.tunisTexStorage1D = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLenum, GLsizei))tunisGLGetProcAddress("glTexStorage1D");
    tunisGL.tunisTexStorage1DEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLenum, GLsizei))tunisGLGetProcAddress("glTexStorage1DEXT");
    tunisGL.tunisTexStorage2D = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLenum, GLsizei, GLsizei))tunisGLGetProcAddress("glTexStorage2D");
    tunisGL.tunisTexStorage2DEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLenum, GLsizei, GLsizei))tunisGLGetProcAddress("glTexStorage2DEXT");
    tunisGL.tunisTexStorage2DMultisample = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLboolean))tunisGLGetProcAddress("glTexStorage2DMultisample");
    tunisGL.tunisTexStorage3D = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei))tunisGLGetProcAddress("glTexStorage3D");
    tunisGL.tunisTexStorage3DEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei))tunisGLGetProcAddress("glTexStorage3DEXT");
    tunisGL.tunisTexStorage3DMultisample = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean))tunisGLGetProcAddress("glTexStorage3DMultisample");
    tunisGL.tunisTexStorage3DMultisampleOES = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean))tunisGLGetProcAddress("glTexStorage3DMultisampleOES");
    tunisGL.tunisTexStorageMem1DEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLenum, GLsizei, GLuint, GLuint64))tunisGLGetProcAddress("glTexStorageMem1DEXT");
    tunisGL.tunisTexStorageMem2DEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLuint, GLuint64))tunisGLGetProcAddress("glTexStorageMem2DEXT");
    tunisGL.tunisTexStorageMem2DMultisampleEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLboolean, GLuint, GLuint64))tunisGLGetProcAddress("glTexStorageMem2DMultisampleEXT");
    tunisGL.tunisTexStorageMem3DEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLuint, GLuint64))tunisGLGetProcAddress("glTexStorageMem3DEXT");
    tunisGL.tunisTexStorageMem3DMultisampleEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean, GLuint, GLuint64))tunisGLGetProcAddress("glTexStorageMem3DMultisampleEXT");
    tunisGL.tunisTexStorageSparseAMD = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLsizei, GLsizei, GLsizei, GLsizei, GLbitfield))tunisGLGetProcAddress("glTexStorageSparseAMD");
    tunisGL.tunisTexSubImage1D = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLint, GLsizei, GLenum, GLenum, const void *))tunisGLGetProcAddress("glTexSubImage1D");
    tunisGL.tunisTexSubImage1DEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLint, GLsizei, GLenum, GLenum, const void *))tunisGLGetProcAddress("glTexSubImage1DEXT");
    tunisGL.tunisTexSubImage2D = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, const void *))tunisGLGetProcAddress("glTexSubImage2D");
    tunisGL.tunisTexSubImage2DEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, const void *))tunisGLGetProcAddress("glTexSubImage2DEXT");
    tunisGL.tunisTexSubImage3D = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, const void *))tunisGLGetProcAddress("glTexSubImage3D");
    tunisGL.tunisTexSubImage3DEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, const void *))tunisGLGetProcAddress("glTexSubImage3DEXT");
    tunisGL.tunisTexSubImage3DOES = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, const void *))tunisGLGetProcAddress("glTexSubImage3DOES");
    tunisGL.tunisTexSubImage4DSGIS = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLsizei, GLenum, GLenum, const void *))tunisGLGetProcAddress("glTexSubImage4DSGIS");
    tunisGL.tunisTextureBarrier = (void (KHRONOS_APIENTRY *)(void))tunisGLGetProcAddress("glTextureBarrier");
    tunisGL.tunisTextureBarrierNV = (void (KHRONOS_APIENTRY *)(void))tunisGLGetProcAddress("glTextureBarrierNV");
    tunisGL.tunisTextureBuffer = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLuint))tunisGLGetProcAddress("glTextureBuffer");
    tunisGL.tunisTextureBufferEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLenum, GLuint))tunisGLGetProcAddress("glTextureBufferEXT");
    tunisGL.tunisTextureBufferRange = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLuint, GLintptr, GLsizeiptr))tunisGLGetProcAddress("glTextureBufferRange");
    tunisGL.tunisTextureBufferRangeEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLenum, GLuint, GLintptr, GLsizeiptr))tunisGLGetProcAddress("glTextureBufferRangeEXT");
    tunisGL.tunisTextureColorMaskSGIS = (void (KHRONOS_APIENTRY *)(GLboolean, GLboolean, GLboolean, GLboolean))tunisGLGetProcAddress("glTextureColorMaskSGIS");
    tunisGL.tunisTextureFoveationParametersQCOM = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glTextureFoveationParametersQCOM");
    tunisGL.tunisTextureImage1DEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint, GLint, GLsizei, GLint, GLenum, GLenum, const void *))tunisGLGetProcAddress("glTextureImage1DEXT");
    tunisGL.tunisTextureImage2DEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint, GLint, GLsizei, GLsizei, GLint, GLenum, GLenum, const void *))tunisGLGetProcAddress("glTextureImage2DEXT");
    tunisGL.tunisTextureImage2DMultisampleCoverageNV = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLsizei, GLsizei, GLint, GLsizei, GLsizei, GLboolean))tunisGLGetProcAddress("glTextureImage2DMultisampleCoverageNV");
    tunisGL.tunisTextureImage2DMultisampleNV = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLsizei, GLint, GLsizei, GLsizei, GLboolean))tunisGLGetProcAddress("glTextureImage2DMultisampleNV");
    tunisGL.tunisTextureImage3DEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint, GLint, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, const void *))tunisGLGetProcAddress("glTextureImage3DEXT");
    tunisGL.tunisTextureImage3DMultisampleCoverageNV = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLsizei, GLsizei, GLint, GLsizei, GLsizei, GLsizei, GLboolean))tunisGLGetProcAddress("glTextureImage3DMultisampleCoverageNV");
    tunisGL.tunisTextureImage3DMultisampleNV = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLsizei, GLint, GLsizei, GLsizei, GLsizei, GLboolean))tunisGLGetProcAddress("glTextureImage3DMultisampleNV");
    tunisGL.tunisTextureLightEXT = (void (KHRONOS_APIENTRY *)(GLenum))tunisGLGetProcAddress("glTextureLightEXT");
    tunisGL.tunisTextureMaterialEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum))tunisGLGetProcAddress("glTextureMaterialEXT");
    tunisGL.tunisTextureNormalEXT = (void (KHRONOS_APIENTRY *)(GLenum))tunisGLGetProcAddress("glTextureNormalEXT");
    tunisGL.tunisTexturePageCommitmentEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLboolean))tunisGLGetProcAddress("glTexturePageCommitmentEXT");
    tunisGL.tunisTextureParameterIiv = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, const GLint *))tunisGLGetProcAddress("glTextureParameterIiv");
    tunisGL.tunisTextureParameterIivEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLenum, const GLint *))tunisGLGetProcAddress("glTextureParameterIivEXT");
    tunisGL.tunisTextureParameterIuiv = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, const GLuint *))tunisGLGetProcAddress("glTextureParameterIuiv");
    tunisGL.tunisTextureParameterIuivEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLenum, const GLuint *))tunisGLGetProcAddress("glTextureParameterIuivEXT");
    tunisGL.tunisTextureParameterf = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLfloat))tunisGLGetProcAddress("glTextureParameterf");
    tunisGL.tunisTextureParameterfEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLenum, GLfloat))tunisGLGetProcAddress("glTextureParameterfEXT");
    tunisGL.tunisTextureParameterfv = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, const GLfloat *))tunisGLGetProcAddress("glTextureParameterfv");
    tunisGL.tunisTextureParameterfvEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLenum, const GLfloat *))tunisGLGetProcAddress("glTextureParameterfvEXT");
    tunisGL.tunisTextureParameteri = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint))tunisGLGetProcAddress("glTextureParameteri");
    tunisGL.tunisTextureParameteriEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLenum, GLint))tunisGLGetProcAddress("glTextureParameteriEXT");
    tunisGL.tunisTextureParameteriv = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, const GLint *))tunisGLGetProcAddress("glTextureParameteriv");
    tunisGL.tunisTextureParameterivEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLenum, const GLint *))tunisGLGetProcAddress("glTextureParameterivEXT");
    tunisGL.tunisTextureRangeAPPLE = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, const void *))tunisGLGetProcAddress("glTextureRangeAPPLE");
    tunisGL.tunisTextureRenderbufferEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLuint))tunisGLGetProcAddress("glTextureRenderbufferEXT");
    tunisGL.tunisTextureStorage1D = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, GLenum, GLsizei))tunisGLGetProcAddress("glTextureStorage1D");
    tunisGL.tunisTextureStorage1DEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLsizei, GLenum, GLsizei))tunisGLGetProcAddress("glTextureStorage1DEXT");
    tunisGL.tunisTextureStorage2D = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, GLenum, GLsizei, GLsizei))tunisGLGetProcAddress("glTextureStorage2D");
    tunisGL.tunisTextureStorage2DEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLsizei, GLenum, GLsizei, GLsizei))tunisGLGetProcAddress("glTextureStorage2DEXT");
    tunisGL.tunisTextureStorage2DMultisample = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLboolean))tunisGLGetProcAddress("glTextureStorage2DMultisample");
    tunisGL.tunisTextureStorage2DMultisampleEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLboolean))tunisGLGetProcAddress("glTextureStorage2DMultisampleEXT");
    tunisGL.tunisTextureStorage3D = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLsizei))tunisGLGetProcAddress("glTextureStorage3D");
    tunisGL.tunisTextureStorage3DEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei))tunisGLGetProcAddress("glTextureStorage3DEXT");
    tunisGL.tunisTextureStorage3DMultisample = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean))tunisGLGetProcAddress("glTextureStorage3DMultisample");
    tunisGL.tunisTextureStorage3DMultisampleEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean))tunisGLGetProcAddress("glTextureStorage3DMultisampleEXT");
    tunisGL.tunisTextureStorageMem1DEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, GLenum, GLsizei, GLuint, GLuint64))tunisGLGetProcAddress("glTextureStorageMem1DEXT");
    tunisGL.tunisTextureStorageMem2DEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLuint, GLuint64))tunisGLGetProcAddress("glTextureStorageMem2DEXT");
    tunisGL.tunisTextureStorageMem2DMultisampleEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLboolean, GLuint, GLuint64))tunisGLGetProcAddress("glTextureStorageMem2DMultisampleEXT");
    tunisGL.tunisTextureStorageMem3DEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLuint, GLuint64))tunisGLGetProcAddress("glTextureStorageMem3DEXT");
    tunisGL.tunisTextureStorageMem3DMultisampleEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean, GLuint, GLuint64))tunisGLGetProcAddress("glTextureStorageMem3DMultisampleEXT");
    tunisGL.tunisTextureStorageSparseAMD = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLenum, GLsizei, GLsizei, GLsizei, GLsizei, GLbitfield))tunisGLGetProcAddress("glTextureStorageSparseAMD");
    tunisGL.tunisTextureSubImage1D = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLint, GLsizei, GLenum, GLenum, const void *))tunisGLGetProcAddress("glTextureSubImage1D");
    tunisGL.tunisTextureSubImage1DEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint, GLint, GLsizei, GLenum, GLenum, const void *))tunisGLGetProcAddress("glTextureSubImage1DEXT");
    tunisGL.tunisTextureSubImage2D = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, const void *))tunisGLGetProcAddress("glTextureSubImage2D");
    tunisGL.tunisTextureSubImage2DEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, const void *))tunisGLGetProcAddress("glTextureSubImage2DEXT");
    tunisGL.tunisTextureSubImage3D = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, const void *))tunisGLGetProcAddress("glTextureSubImage3D");
    tunisGL.tunisTextureSubImage3DEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, const void *))tunisGLGetProcAddress("glTextureSubImage3DEXT");
    tunisGL.tunisTextureView = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLuint, GLenum, GLuint, GLuint, GLuint, GLuint))tunisGLGetProcAddress("glTextureView");
    tunisGL.tunisTextureViewEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLuint, GLenum, GLuint, GLuint, GLuint, GLuint))tunisGLGetProcAddress("glTextureViewEXT");
    tunisGL.tunisTextureViewOES = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLuint, GLenum, GLuint, GLuint, GLuint, GLuint))tunisGLGetProcAddress("glTextureViewOES");
    tunisGL.tunisTrackMatrixNV = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLenum, GLenum))tunisGLGetProcAddress("glTrackMatrixNV");
    tunisGL.tunisTransformFeedbackAttribsNV = (void (KHRONOS_APIENTRY *)(GLsizei, const GLint *, GLenum))tunisGLGetProcAddress("glTransformFeedbackAttribsNV");
    tunisGL.tunisTransformFeedbackBufferBase = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLuint))tunisGLGetProcAddress("glTransformFeedbackBufferBase");
    tunisGL.tunisTransformFeedbackBufferRange = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLuint, GLintptr, GLsizeiptr))tunisGLGetProcAddress("glTransformFeedbackBufferRange");
    tunisGL.tunisTransformFeedbackStreamAttribsNV = (void (KHRONOS_APIENTRY *)(GLsizei, const GLint *, GLsizei, const GLint *, GLenum))tunisGLGetProcAddress("glTransformFeedbackStreamAttribsNV");
    tunisGL.tunisTransformFeedbackVaryings = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, const GLchar *const*, GLenum))tunisGLGetProcAddress("glTransformFeedbackVaryings");
    tunisGL.tunisTransformFeedbackVaryingsEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, const GLchar *const*, GLenum))tunisGLGetProcAddress("glTransformFeedbackVaryingsEXT");
    tunisGL.tunisTransformFeedbackVaryingsNV = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, const GLint *, GLenum))tunisGLGetProcAddress("glTransformFeedbackVaryingsNV");
    tunisGL.tunisTransformPathNV = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLenum, const GLfloat *))tunisGLGetProcAddress("glTransformPathNV");
    tunisGL.tunisTranslated = (void (KHRONOS_APIENTRY *)(GLdouble, GLdouble, GLdouble))tunisGLGetProcAddress("glTranslated");
    tunisGL.tunisTranslatef = (void (KHRONOS_APIENTRY *)(GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glTranslatef");
    tunisGL.tunisTranslatex = (void (KHRONOS_APIENTRY *)(GLfixed, GLfixed, GLfixed))tunisGLGetProcAddress("glTranslatex");
    tunisGL.tunisTranslatexOES = (void (KHRONOS_APIENTRY *)(GLfixed, GLfixed, GLfixed))tunisGLGetProcAddress("glTranslatexOES");
    tunisGL.tunisUniform1d = (void (KHRONOS_APIENTRY *)(GLint, GLdouble))tunisGLGetProcAddress("glUniform1d");
    tunisGL.tunisUniform1dv = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, const GLdouble *))tunisGLGetProcAddress("glUniform1dv");
    tunisGL.tunisUniform1f = (void (KHRONOS_APIENTRY *)(GLint, GLfloat))tunisGLGetProcAddress("glUniform1f");
    tunisGL.tunisUniform1fARB = (void (KHRONOS_APIENTRY *)(GLint, GLfloat))tunisGLGetProcAddress("glUniform1fARB");
    tunisGL.tunisUniform1fv = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, const GLfloat *))tunisGLGetProcAddress("glUniform1fv");
    tunisGL.tunisUniform1fvARB = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, const GLfloat *))tunisGLGetProcAddress("glUniform1fvARB");
    tunisGL.tunisUniform1i = (void (KHRONOS_APIENTRY *)(GLint, GLint))tunisGLGetProcAddress("glUniform1i");
    tunisGL.tunisUniform1i64ARB = (void (KHRONOS_APIENTRY *)(GLint, GLint64))tunisGLGetProcAddress("glUniform1i64ARB");
    tunisGL.tunisUniform1i64NV = (void (KHRONOS_APIENTRY *)(GLint, GLint64EXT))tunisGLGetProcAddress("glUniform1i64NV");
    tunisGL.tunisUniform1i64vARB = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, const GLint64 *))tunisGLGetProcAddress("glUniform1i64vARB");
    tunisGL.tunisUniform1i64vNV = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, const GLint64EXT *))tunisGLGetProcAddress("glUniform1i64vNV");
    tunisGL.tunisUniform1iARB = (void (KHRONOS_APIENTRY *)(GLint, GLint))tunisGLGetProcAddress("glUniform1iARB");
    tunisGL.tunisUniform1iv = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, const GLint *))tunisGLGetProcAddress("glUniform1iv");
    tunisGL.tunisUniform1ivARB = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, const GLint *))tunisGLGetProcAddress("glUniform1ivARB");
    tunisGL.tunisUniform1ui = (void (KHRONOS_APIENTRY *)(GLint, GLuint))tunisGLGetProcAddress("glUniform1ui");
    tunisGL.tunisUniform1ui64ARB = (void (KHRONOS_APIENTRY *)(GLint, GLuint64))tunisGLGetProcAddress("glUniform1ui64ARB");
    tunisGL.tunisUniform1ui64NV = (void (KHRONOS_APIENTRY *)(GLint, GLuint64EXT))tunisGLGetProcAddress("glUniform1ui64NV");
    tunisGL.tunisUniform1ui64vARB = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, const GLuint64 *))tunisGLGetProcAddress("glUniform1ui64vARB");
    tunisGL.tunisUniform1ui64vNV = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, const GLuint64EXT *))tunisGLGetProcAddress("glUniform1ui64vNV");
    tunisGL.tunisUniform1uiEXT = (void (KHRONOS_APIENTRY *)(GLint, GLuint))tunisGLGetProcAddress("glUniform1uiEXT");
    tunisGL.tunisUniform1uiv = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, const GLuint *))tunisGLGetProcAddress("glUniform1uiv");
    tunisGL.tunisUniform1uivEXT = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, const GLuint *))tunisGLGetProcAddress("glUniform1uivEXT");
    tunisGL.tunisUniform2d = (void (KHRONOS_APIENTRY *)(GLint, GLdouble, GLdouble))tunisGLGetProcAddress("glUniform2d");
    tunisGL.tunisUniform2dv = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, const GLdouble *))tunisGLGetProcAddress("glUniform2dv");
    tunisGL.tunisUniform2f = (void (KHRONOS_APIENTRY *)(GLint, GLfloat, GLfloat))tunisGLGetProcAddress("glUniform2f");
    tunisGL.tunisUniform2fARB = (void (KHRONOS_APIENTRY *)(GLint, GLfloat, GLfloat))tunisGLGetProcAddress("glUniform2fARB");
    tunisGL.tunisUniform2fv = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, const GLfloat *))tunisGLGetProcAddress("glUniform2fv");
    tunisGL.tunisUniform2fvARB = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, const GLfloat *))tunisGLGetProcAddress("glUniform2fvARB");
    tunisGL.tunisUniform2i = (void (KHRONOS_APIENTRY *)(GLint, GLint, GLint))tunisGLGetProcAddress("glUniform2i");
    tunisGL.tunisUniform2i64ARB = (void (KHRONOS_APIENTRY *)(GLint, GLint64, GLint64))tunisGLGetProcAddress("glUniform2i64ARB");
    tunisGL.tunisUniform2i64NV = (void (KHRONOS_APIENTRY *)(GLint, GLint64EXT, GLint64EXT))tunisGLGetProcAddress("glUniform2i64NV");
    tunisGL.tunisUniform2i64vARB = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, const GLint64 *))tunisGLGetProcAddress("glUniform2i64vARB");
    tunisGL.tunisUniform2i64vNV = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, const GLint64EXT *))tunisGLGetProcAddress("glUniform2i64vNV");
    tunisGL.tunisUniform2iARB = (void (KHRONOS_APIENTRY *)(GLint, GLint, GLint))tunisGLGetProcAddress("glUniform2iARB");
    tunisGL.tunisUniform2iv = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, const GLint *))tunisGLGetProcAddress("glUniform2iv");
    tunisGL.tunisUniform2ivARB = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, const GLint *))tunisGLGetProcAddress("glUniform2ivARB");
    tunisGL.tunisUniform2ui = (void (KHRONOS_APIENTRY *)(GLint, GLuint, GLuint))tunisGLGetProcAddress("glUniform2ui");
    tunisGL.tunisUniform2ui64ARB = (void (KHRONOS_APIENTRY *)(GLint, GLuint64, GLuint64))tunisGLGetProcAddress("glUniform2ui64ARB");
    tunisGL.tunisUniform2ui64NV = (void (KHRONOS_APIENTRY *)(GLint, GLuint64EXT, GLuint64EXT))tunisGLGetProcAddress("glUniform2ui64NV");
    tunisGL.tunisUniform2ui64vARB = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, const GLuint64 *))tunisGLGetProcAddress("glUniform2ui64vARB");
    tunisGL.tunisUniform2ui64vNV = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, const GLuint64EXT *))tunisGLGetProcAddress("glUniform2ui64vNV");
    tunisGL.tunisUniform2uiEXT = (void (KHRONOS_APIENTRY *)(GLint, GLuint, GLuint))tunisGLGetProcAddress("glUniform2uiEXT");
    tunisGL.tunisUniform2uiv = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, const GLuint *))tunisGLGetProcAddress("glUniform2uiv");
    tunisGL.tunisUniform2uivEXT = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, const GLuint *))tunisGLGetProcAddress("glUniform2uivEXT");
    tunisGL.tunisUniform3d = (void (KHRONOS_APIENTRY *)(GLint, GLdouble, GLdouble, GLdouble))tunisGLGetProcAddress("glUniform3d");
    tunisGL.tunisUniform3dv = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, const GLdouble *))tunisGLGetProcAddress("glUniform3dv");
    tunisGL.tunisUniform3f = (void (KHRONOS_APIENTRY *)(GLint, GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glUniform3f");
    tunisGL.tunisUniform3fARB = (void (KHRONOS_APIENTRY *)(GLint, GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glUniform3fARB");
    tunisGL.tunisUniform3fv = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, const GLfloat *))tunisGLGetProcAddress("glUniform3fv");
    tunisGL.tunisUniform3fvARB = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, const GLfloat *))tunisGLGetProcAddress("glUniform3fvARB");
    tunisGL.tunisUniform3i = (void (KHRONOS_APIENTRY *)(GLint, GLint, GLint, GLint))tunisGLGetProcAddress("glUniform3i");
    tunisGL.tunisUniform3i64ARB = (void (KHRONOS_APIENTRY *)(GLint, GLint64, GLint64, GLint64))tunisGLGetProcAddress("glUniform3i64ARB");
    tunisGL.tunisUniform3i64NV = (void (KHRONOS_APIENTRY *)(GLint, GLint64EXT, GLint64EXT, GLint64EXT))tunisGLGetProcAddress("glUniform3i64NV");
    tunisGL.tunisUniform3i64vARB = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, const GLint64 *))tunisGLGetProcAddress("glUniform3i64vARB");
    tunisGL.tunisUniform3i64vNV = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, const GLint64EXT *))tunisGLGetProcAddress("glUniform3i64vNV");
    tunisGL.tunisUniform3iARB = (void (KHRONOS_APIENTRY *)(GLint, GLint, GLint, GLint))tunisGLGetProcAddress("glUniform3iARB");
    tunisGL.tunisUniform3iv = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, const GLint *))tunisGLGetProcAddress("glUniform3iv");
    tunisGL.tunisUniform3ivARB = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, const GLint *))tunisGLGetProcAddress("glUniform3ivARB");
    tunisGL.tunisUniform3ui = (void (KHRONOS_APIENTRY *)(GLint, GLuint, GLuint, GLuint))tunisGLGetProcAddress("glUniform3ui");
    tunisGL.tunisUniform3ui64ARB = (void (KHRONOS_APIENTRY *)(GLint, GLuint64, GLuint64, GLuint64))tunisGLGetProcAddress("glUniform3ui64ARB");
    tunisGL.tunisUniform3ui64NV = (void (KHRONOS_APIENTRY *)(GLint, GLuint64EXT, GLuint64EXT, GLuint64EXT))tunisGLGetProcAddress("glUniform3ui64NV");
    tunisGL.tunisUniform3ui64vARB = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, const GLuint64 *))tunisGLGetProcAddress("glUniform3ui64vARB");
    tunisGL.tunisUniform3ui64vNV = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, const GLuint64EXT *))tunisGLGetProcAddress("glUniform3ui64vNV");
    tunisGL.tunisUniform3uiEXT = (void (KHRONOS_APIENTRY *)(GLint, GLuint, GLuint, GLuint))tunisGLGetProcAddress("glUniform3uiEXT");
    tunisGL.tunisUniform3uiv = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, const GLuint *))tunisGLGetProcAddress("glUniform3uiv");
    tunisGL.tunisUniform3uivEXT = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, const GLuint *))tunisGLGetProcAddress("glUniform3uivEXT");
    tunisGL.tunisUniform4d = (void (KHRONOS_APIENTRY *)(GLint, GLdouble, GLdouble, GLdouble, GLdouble))tunisGLGetProcAddress("glUniform4d");
    tunisGL.tunisUniform4dv = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, const GLdouble *))tunisGLGetProcAddress("glUniform4dv");
    tunisGL.tunisUniform4f = (void (KHRONOS_APIENTRY *)(GLint, GLfloat, GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glUniform4f");
    tunisGL.tunisUniform4fARB = (void (KHRONOS_APIENTRY *)(GLint, GLfloat, GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glUniform4fARB");
    tunisGL.tunisUniform4fv = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, const GLfloat *))tunisGLGetProcAddress("glUniform4fv");
    tunisGL.tunisUniform4fvARB = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, const GLfloat *))tunisGLGetProcAddress("glUniform4fvARB");
    tunisGL.tunisUniform4i = (void (KHRONOS_APIENTRY *)(GLint, GLint, GLint, GLint, GLint))tunisGLGetProcAddress("glUniform4i");
    tunisGL.tunisUniform4i64ARB = (void (KHRONOS_APIENTRY *)(GLint, GLint64, GLint64, GLint64, GLint64))tunisGLGetProcAddress("glUniform4i64ARB");
    tunisGL.tunisUniform4i64NV = (void (KHRONOS_APIENTRY *)(GLint, GLint64EXT, GLint64EXT, GLint64EXT, GLint64EXT))tunisGLGetProcAddress("glUniform4i64NV");
    tunisGL.tunisUniform4i64vARB = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, const GLint64 *))tunisGLGetProcAddress("glUniform4i64vARB");
    tunisGL.tunisUniform4i64vNV = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, const GLint64EXT *))tunisGLGetProcAddress("glUniform4i64vNV");
    tunisGL.tunisUniform4iARB = (void (KHRONOS_APIENTRY *)(GLint, GLint, GLint, GLint, GLint))tunisGLGetProcAddress("glUniform4iARB");
    tunisGL.tunisUniform4iv = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, const GLint *))tunisGLGetProcAddress("glUniform4iv");
    tunisGL.tunisUniform4ivARB = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, const GLint *))tunisGLGetProcAddress("glUniform4ivARB");
    tunisGL.tunisUniform4ui = (void (KHRONOS_APIENTRY *)(GLint, GLuint, GLuint, GLuint, GLuint))tunisGLGetProcAddress("glUniform4ui");
    tunisGL.tunisUniform4ui64ARB = (void (KHRONOS_APIENTRY *)(GLint, GLuint64, GLuint64, GLuint64, GLuint64))tunisGLGetProcAddress("glUniform4ui64ARB");
    tunisGL.tunisUniform4ui64NV = (void (KHRONOS_APIENTRY *)(GLint, GLuint64EXT, GLuint64EXT, GLuint64EXT, GLuint64EXT))tunisGLGetProcAddress("glUniform4ui64NV");
    tunisGL.tunisUniform4ui64vARB = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, const GLuint64 *))tunisGLGetProcAddress("glUniform4ui64vARB");
    tunisGL.tunisUniform4ui64vNV = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, const GLuint64EXT *))tunisGLGetProcAddress("glUniform4ui64vNV");
    tunisGL.tunisUniform4uiEXT = (void (KHRONOS_APIENTRY *)(GLint, GLuint, GLuint, GLuint, GLuint))tunisGLGetProcAddress("glUniform4uiEXT");
    tunisGL.tunisUniform4uiv = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, const GLuint *))tunisGLGetProcAddress("glUniform4uiv");
    tunisGL.tunisUniform4uivEXT = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, const GLuint *))tunisGLGetProcAddress("glUniform4uivEXT");
    tunisGL.tunisUniformBlockBinding = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLuint))tunisGLGetProcAddress("glUniformBlockBinding");
    tunisGL.tunisUniformBufferEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLuint))tunisGLGetProcAddress("glUniformBufferEXT");
    tunisGL.tunisUniformHandleui64ARB = (void (KHRONOS_APIENTRY *)(GLint, GLuint64))tunisGLGetProcAddress("glUniformHandleui64ARB");
    tunisGL.tunisUniformHandleui64IMG = (void (KHRONOS_APIENTRY *)(GLint, GLuint64))tunisGLGetProcAddress("glUniformHandleui64IMG");
    tunisGL.tunisUniformHandleui64NV = (void (KHRONOS_APIENTRY *)(GLint, GLuint64))tunisGLGetProcAddress("glUniformHandleui64NV");
    tunisGL.tunisUniformHandleui64vARB = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, const GLuint64 *))tunisGLGetProcAddress("glUniformHandleui64vARB");
    tunisGL.tunisUniformHandleui64vIMG = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, const GLuint64 *))tunisGLGetProcAddress("glUniformHandleui64vIMG");
    tunisGL.tunisUniformHandleui64vNV = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, const GLuint64 *))tunisGLGetProcAddress("glUniformHandleui64vNV");
    tunisGL.tunisUniformMatrix2dv = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, GLboolean, const GLdouble *))tunisGLGetProcAddress("glUniformMatrix2dv");
    tunisGL.tunisUniformMatrix2fv = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, GLboolean, const GLfloat *))tunisGLGetProcAddress("glUniformMatrix2fv");
    tunisGL.tunisUniformMatrix2fvARB = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, GLboolean, const GLfloat *))tunisGLGetProcAddress("glUniformMatrix2fvARB");
    tunisGL.tunisUniformMatrix2x3dv = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, GLboolean, const GLdouble *))tunisGLGetProcAddress("glUniformMatrix2x3dv");
    tunisGL.tunisUniformMatrix2x3fv = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, GLboolean, const GLfloat *))tunisGLGetProcAddress("glUniformMatrix2x3fv");
    tunisGL.tunisUniformMatrix2x3fvNV = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, GLboolean, const GLfloat *))tunisGLGetProcAddress("glUniformMatrix2x3fvNV");
    tunisGL.tunisUniformMatrix2x4dv = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, GLboolean, const GLdouble *))tunisGLGetProcAddress("glUniformMatrix2x4dv");
    tunisGL.tunisUniformMatrix2x4fv = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, GLboolean, const GLfloat *))tunisGLGetProcAddress("glUniformMatrix2x4fv");
    tunisGL.tunisUniformMatrix2x4fvNV = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, GLboolean, const GLfloat *))tunisGLGetProcAddress("glUniformMatrix2x4fvNV");
    tunisGL.tunisUniformMatrix3dv = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, GLboolean, const GLdouble *))tunisGLGetProcAddress("glUniformMatrix3dv");
    tunisGL.tunisUniformMatrix3fv = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, GLboolean, const GLfloat *))tunisGLGetProcAddress("glUniformMatrix3fv");
    tunisGL.tunisUniformMatrix3fvARB = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, GLboolean, const GLfloat *))tunisGLGetProcAddress("glUniformMatrix3fvARB");
    tunisGL.tunisUniformMatrix3x2dv = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, GLboolean, const GLdouble *))tunisGLGetProcAddress("glUniformMatrix3x2dv");
    tunisGL.tunisUniformMatrix3x2fv = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, GLboolean, const GLfloat *))tunisGLGetProcAddress("glUniformMatrix3x2fv");
    tunisGL.tunisUniformMatrix3x2fvNV = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, GLboolean, const GLfloat *))tunisGLGetProcAddress("glUniformMatrix3x2fvNV");
    tunisGL.tunisUniformMatrix3x4dv = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, GLboolean, const GLdouble *))tunisGLGetProcAddress("glUniformMatrix3x4dv");
    tunisGL.tunisUniformMatrix3x4fv = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, GLboolean, const GLfloat *))tunisGLGetProcAddress("glUniformMatrix3x4fv");
    tunisGL.tunisUniformMatrix3x4fvNV = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, GLboolean, const GLfloat *))tunisGLGetProcAddress("glUniformMatrix3x4fvNV");
    tunisGL.tunisUniformMatrix4dv = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, GLboolean, const GLdouble *))tunisGLGetProcAddress("glUniformMatrix4dv");
    tunisGL.tunisUniformMatrix4fv = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, GLboolean, const GLfloat *))tunisGLGetProcAddress("glUniformMatrix4fv");
    tunisGL.tunisUniformMatrix4fvARB = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, GLboolean, const GLfloat *))tunisGLGetProcAddress("glUniformMatrix4fvARB");
    tunisGL.tunisUniformMatrix4x2dv = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, GLboolean, const GLdouble *))tunisGLGetProcAddress("glUniformMatrix4x2dv");
    tunisGL.tunisUniformMatrix4x2fv = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, GLboolean, const GLfloat *))tunisGLGetProcAddress("glUniformMatrix4x2fv");
    tunisGL.tunisUniformMatrix4x2fvNV = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, GLboolean, const GLfloat *))tunisGLGetProcAddress("glUniformMatrix4x2fvNV");
    tunisGL.tunisUniformMatrix4x3dv = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, GLboolean, const GLdouble *))tunisGLGetProcAddress("glUniformMatrix4x3dv");
    tunisGL.tunisUniformMatrix4x3fv = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, GLboolean, const GLfloat *))tunisGLGetProcAddress("glUniformMatrix4x3fv");
    tunisGL.tunisUniformMatrix4x3fvNV = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, GLboolean, const GLfloat *))tunisGLGetProcAddress("glUniformMatrix4x3fvNV");
    tunisGL.tunisUniformSubroutinesuiv = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, const GLuint *))tunisGLGetProcAddress("glUniformSubroutinesuiv");
    tunisGL.tunisUniformui64NV = (void (KHRONOS_APIENTRY *)(GLint, GLuint64EXT))tunisGLGetProcAddress("glUniformui64NV");
    tunisGL.tunisUniformui64vNV = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, const GLuint64EXT *))tunisGLGetProcAddress("glUniformui64vNV");
    tunisGL.tunisUnlockArraysEXT = (void (KHRONOS_APIENTRY *)(void))tunisGLGetProcAddress("glUnlockArraysEXT");
    tunisGL.tunisUnmapBuffer = (GLboolean(KHRONOS_APIENTRY *)(GLenum))tunisGLGetProcAddress("glUnmapBuffer");
    tunisGL.tunisUnmapBufferARB = (GLboolean(KHRONOS_APIENTRY *)(GLenum))tunisGLGetProcAddress("glUnmapBufferARB");
    tunisGL.tunisUnmapBufferOES = (GLboolean(KHRONOS_APIENTRY *)(GLenum))tunisGLGetProcAddress("glUnmapBufferOES");
    tunisGL.tunisUnmapNamedBuffer = (GLboolean(KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glUnmapNamedBuffer");
    tunisGL.tunisUnmapNamedBufferEXT = (GLboolean(KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glUnmapNamedBufferEXT");
    tunisGL.tunisUnmapObjectBufferATI = (void (KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glUnmapObjectBufferATI");
    tunisGL.tunisUnmapTexture2DINTEL = (void (KHRONOS_APIENTRY *)(GLuint, GLint))tunisGLGetProcAddress("glUnmapTexture2DINTEL");
    tunisGL.tunisUpdateObjectBufferATI = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLsizei, const void *, GLenum))tunisGLGetProcAddress("glUpdateObjectBufferATI");
    tunisGL.tunisUseProgram = (void (KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glUseProgram");
    tunisGL.tunisUseProgramObjectARB = (void (KHRONOS_APIENTRY *)(GLhandleARB))tunisGLGetProcAddress("glUseProgramObjectARB");
    tunisGL.tunisUseProgramStages = (void (KHRONOS_APIENTRY *)(GLuint, GLbitfield, GLuint))tunisGLGetProcAddress("glUseProgramStages");
    tunisGL.tunisUseProgramStagesEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLbitfield, GLuint))tunisGLGetProcAddress("glUseProgramStagesEXT");
    tunisGL.tunisUseShaderProgramEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLuint))tunisGLGetProcAddress("glUseShaderProgramEXT");
    tunisGL.tunisVDPAUFiniNV = (void (KHRONOS_APIENTRY *)(void))tunisGLGetProcAddress("glVDPAUFiniNV");
    tunisGL.tunisVDPAUGetSurfaceivNV = (void (KHRONOS_APIENTRY *)(GLvdpauSurfaceNV, GLenum, GLsizei, GLsizei *, GLint *))tunisGLGetProcAddress("glVDPAUGetSurfaceivNV");
    tunisGL.tunisVDPAUInitNV = (void (KHRONOS_APIENTRY *)(const void *, const void *))tunisGLGetProcAddress("glVDPAUInitNV");
    tunisGL.tunisVDPAUIsSurfaceNV = (GLboolean(KHRONOS_APIENTRY *)(GLvdpauSurfaceNV))tunisGLGetProcAddress("glVDPAUIsSurfaceNV");
    tunisGL.tunisVDPAUMapSurfacesNV = (void (KHRONOS_APIENTRY *)(GLsizei, const GLvdpauSurfaceNV *))tunisGLGetProcAddress("glVDPAUMapSurfacesNV");
    tunisGL.tunisVDPAURegisterOutputSurfaceNV = (GLvdpauSurfaceNV(KHRONOS_APIENTRY *)(const void *, GLenum, GLsizei, const GLuint *))tunisGLGetProcAddress("glVDPAURegisterOutputSurfaceNV");
    tunisGL.tunisVDPAURegisterVideoSurfaceNV = (GLvdpauSurfaceNV(KHRONOS_APIENTRY *)(const void *, GLenum, GLsizei, const GLuint *))tunisGLGetProcAddress("glVDPAURegisterVideoSurfaceNV");
    tunisGL.tunisVDPAUSurfaceAccessNV = (void (KHRONOS_APIENTRY *)(GLvdpauSurfaceNV, GLenum))tunisGLGetProcAddress("glVDPAUSurfaceAccessNV");
    tunisGL.tunisVDPAUUnmapSurfacesNV = (void (KHRONOS_APIENTRY *)(GLsizei, const GLvdpauSurfaceNV *))tunisGLGetProcAddress("glVDPAUUnmapSurfacesNV");
    tunisGL.tunisVDPAUUnregisterSurfaceNV = (void (KHRONOS_APIENTRY *)(GLvdpauSurfaceNV))tunisGLGetProcAddress("glVDPAUUnregisterSurfaceNV");
    tunisGL.tunisValidateProgram = (void (KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glValidateProgram");
    tunisGL.tunisValidateProgramARB = (void (KHRONOS_APIENTRY *)(GLhandleARB))tunisGLGetProcAddress("glValidateProgramARB");
    tunisGL.tunisValidateProgramPipeline = (void (KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glValidateProgramPipeline");
    tunisGL.tunisValidateProgramPipelineEXT = (void (KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glValidateProgramPipelineEXT");
    tunisGL.tunisVariantArrayObjectATI = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLsizei, GLuint, GLuint))tunisGLGetProcAddress("glVariantArrayObjectATI");
    tunisGL.tunisVariantPointerEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLuint, const void *))tunisGLGetProcAddress("glVariantPointerEXT");
    tunisGL.tunisVariantbvEXT = (void (KHRONOS_APIENTRY *)(GLuint, const GLbyte *))tunisGLGetProcAddress("glVariantbvEXT");
    tunisGL.tunisVariantdvEXT = (void (KHRONOS_APIENTRY *)(GLuint, const GLdouble *))tunisGLGetProcAddress("glVariantdvEXT");
    tunisGL.tunisVariantfvEXT = (void (KHRONOS_APIENTRY *)(GLuint, const GLfloat *))tunisGLGetProcAddress("glVariantfvEXT");
    tunisGL.tunisVariantivEXT = (void (KHRONOS_APIENTRY *)(GLuint, const GLint *))tunisGLGetProcAddress("glVariantivEXT");
    tunisGL.tunisVariantsvEXT = (void (KHRONOS_APIENTRY *)(GLuint, const GLshort *))tunisGLGetProcAddress("glVariantsvEXT");
    tunisGL.tunisVariantubvEXT = (void (KHRONOS_APIENTRY *)(GLuint, const GLubyte *))tunisGLGetProcAddress("glVariantubvEXT");
    tunisGL.tunisVariantuivEXT = (void (KHRONOS_APIENTRY *)(GLuint, const GLuint *))tunisGLGetProcAddress("glVariantuivEXT");
    tunisGL.tunisVariantusvEXT = (void (KHRONOS_APIENTRY *)(GLuint, const GLushort *))tunisGLGetProcAddress("glVariantusvEXT");
    tunisGL.tunisVertex2bOES = (void (KHRONOS_APIENTRY *)(GLbyte, GLbyte))tunisGLGetProcAddress("glVertex2bOES");
    tunisGL.tunisVertex2bvOES = (void (KHRONOS_APIENTRY *)(const GLbyte *))tunisGLGetProcAddress("glVertex2bvOES");
    tunisGL.tunisVertex2d = (void (KHRONOS_APIENTRY *)(GLdouble, GLdouble))tunisGLGetProcAddress("glVertex2d");
    tunisGL.tunisVertex2dv = (void (KHRONOS_APIENTRY *)(const GLdouble *))tunisGLGetProcAddress("glVertex2dv");
    tunisGL.tunisVertex2f = (void (KHRONOS_APIENTRY *)(GLfloat, GLfloat))tunisGLGetProcAddress("glVertex2f");
    tunisGL.tunisVertex2fv = (void (KHRONOS_APIENTRY *)(const GLfloat *))tunisGLGetProcAddress("glVertex2fv");
    tunisGL.tunisVertex2hNV = (void (KHRONOS_APIENTRY *)(GLhalfNV, GLhalfNV))tunisGLGetProcAddress("glVertex2hNV");
    tunisGL.tunisVertex2hvNV = (void (KHRONOS_APIENTRY *)(const GLhalfNV *))tunisGLGetProcAddress("glVertex2hvNV");
    tunisGL.tunisVertex2i = (void (KHRONOS_APIENTRY *)(GLint, GLint))tunisGLGetProcAddress("glVertex2i");
    tunisGL.tunisVertex2iv = (void (KHRONOS_APIENTRY *)(const GLint *))tunisGLGetProcAddress("glVertex2iv");
    tunisGL.tunisVertex2s = (void (KHRONOS_APIENTRY *)(GLshort, GLshort))tunisGLGetProcAddress("glVertex2s");
    tunisGL.tunisVertex2sv = (void (KHRONOS_APIENTRY *)(const GLshort *))tunisGLGetProcAddress("glVertex2sv");
    tunisGL.tunisVertex2xOES = (void (KHRONOS_APIENTRY *)(GLfixed))tunisGLGetProcAddress("glVertex2xOES");
    tunisGL.tunisVertex2xvOES = (void (KHRONOS_APIENTRY *)(const GLfixed *))tunisGLGetProcAddress("glVertex2xvOES");
    tunisGL.tunisVertex3bOES = (void (KHRONOS_APIENTRY *)(GLbyte, GLbyte, GLbyte))tunisGLGetProcAddress("glVertex3bOES");
    tunisGL.tunisVertex3bvOES = (void (KHRONOS_APIENTRY *)(const GLbyte *))tunisGLGetProcAddress("glVertex3bvOES");
    tunisGL.tunisVertex3d = (void (KHRONOS_APIENTRY *)(GLdouble, GLdouble, GLdouble))tunisGLGetProcAddress("glVertex3d");
    tunisGL.tunisVertex3dv = (void (KHRONOS_APIENTRY *)(const GLdouble *))tunisGLGetProcAddress("glVertex3dv");
    tunisGL.tunisVertex3f = (void (KHRONOS_APIENTRY *)(GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glVertex3f");
    tunisGL.tunisVertex3fv = (void (KHRONOS_APIENTRY *)(const GLfloat *))tunisGLGetProcAddress("glVertex3fv");
    tunisGL.tunisVertex3hNV = (void (KHRONOS_APIENTRY *)(GLhalfNV, GLhalfNV, GLhalfNV))tunisGLGetProcAddress("glVertex3hNV");
    tunisGL.tunisVertex3hvNV = (void (KHRONOS_APIENTRY *)(const GLhalfNV *))tunisGLGetProcAddress("glVertex3hvNV");
    tunisGL.tunisVertex3i = (void (KHRONOS_APIENTRY *)(GLint, GLint, GLint))tunisGLGetProcAddress("glVertex3i");
    tunisGL.tunisVertex3iv = (void (KHRONOS_APIENTRY *)(const GLint *))tunisGLGetProcAddress("glVertex3iv");
    tunisGL.tunisVertex3s = (void (KHRONOS_APIENTRY *)(GLshort, GLshort, GLshort))tunisGLGetProcAddress("glVertex3s");
    tunisGL.tunisVertex3sv = (void (KHRONOS_APIENTRY *)(const GLshort *))tunisGLGetProcAddress("glVertex3sv");
    tunisGL.tunisVertex3xOES = (void (KHRONOS_APIENTRY *)(GLfixed, GLfixed))tunisGLGetProcAddress("glVertex3xOES");
    tunisGL.tunisVertex3xvOES = (void (KHRONOS_APIENTRY *)(const GLfixed *))tunisGLGetProcAddress("glVertex3xvOES");
    tunisGL.tunisVertex4bOES = (void (KHRONOS_APIENTRY *)(GLbyte, GLbyte, GLbyte, GLbyte))tunisGLGetProcAddress("glVertex4bOES");
    tunisGL.tunisVertex4bvOES = (void (KHRONOS_APIENTRY *)(const GLbyte *))tunisGLGetProcAddress("glVertex4bvOES");
    tunisGL.tunisVertex4d = (void (KHRONOS_APIENTRY *)(GLdouble, GLdouble, GLdouble, GLdouble))tunisGLGetProcAddress("glVertex4d");
    tunisGL.tunisVertex4dv = (void (KHRONOS_APIENTRY *)(const GLdouble *))tunisGLGetProcAddress("glVertex4dv");
    tunisGL.tunisVertex4f = (void (KHRONOS_APIENTRY *)(GLfloat, GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glVertex4f");
    tunisGL.tunisVertex4fv = (void (KHRONOS_APIENTRY *)(const GLfloat *))tunisGLGetProcAddress("glVertex4fv");
    tunisGL.tunisVertex4hNV = (void (KHRONOS_APIENTRY *)(GLhalfNV, GLhalfNV, GLhalfNV, GLhalfNV))tunisGLGetProcAddress("glVertex4hNV");
    tunisGL.tunisVertex4hvNV = (void (KHRONOS_APIENTRY *)(const GLhalfNV *))tunisGLGetProcAddress("glVertex4hvNV");
    tunisGL.tunisVertex4i = (void (KHRONOS_APIENTRY *)(GLint, GLint, GLint, GLint))tunisGLGetProcAddress("glVertex4i");
    tunisGL.tunisVertex4iv = (void (KHRONOS_APIENTRY *)(const GLint *))tunisGLGetProcAddress("glVertex4iv");
    tunisGL.tunisVertex4s = (void (KHRONOS_APIENTRY *)(GLshort, GLshort, GLshort, GLshort))tunisGLGetProcAddress("glVertex4s");
    tunisGL.tunisVertex4sv = (void (KHRONOS_APIENTRY *)(const GLshort *))tunisGLGetProcAddress("glVertex4sv");
    tunisGL.tunisVertex4xOES = (void (KHRONOS_APIENTRY *)(GLfixed, GLfixed, GLfixed))tunisGLGetProcAddress("glVertex4xOES");
    tunisGL.tunisVertex4xvOES = (void (KHRONOS_APIENTRY *)(const GLfixed *))tunisGLGetProcAddress("glVertex4xvOES");
    tunisGL.tunisVertexArrayAttribBinding = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLuint))tunisGLGetProcAddress("glVertexArrayAttribBinding");
    tunisGL.tunisVertexArrayAttribFormat = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLint, GLenum, GLboolean, GLuint))tunisGLGetProcAddress("glVertexArrayAttribFormat");
    tunisGL.tunisVertexArrayAttribIFormat = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLint, GLenum, GLuint))tunisGLGetProcAddress("glVertexArrayAttribIFormat");
    tunisGL.tunisVertexArrayAttribLFormat = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLint, GLenum, GLuint))tunisGLGetProcAddress("glVertexArrayAttribLFormat");
    tunisGL.tunisVertexArrayBindVertexBufferEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLuint, GLintptr, GLsizei))tunisGLGetProcAddress("glVertexArrayBindVertexBufferEXT");
    tunisGL.tunisVertexArrayBindingDivisor = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLuint))tunisGLGetProcAddress("glVertexArrayBindingDivisor");
    tunisGL.tunisVertexArrayColorOffsetEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLint, GLenum, GLsizei, GLintptr))tunisGLGetProcAddress("glVertexArrayColorOffsetEXT");
    tunisGL.tunisVertexArrayEdgeFlagOffsetEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLsizei, GLintptr))tunisGLGetProcAddress("glVertexArrayEdgeFlagOffsetEXT");
    tunisGL.tunisVertexArrayElementBuffer = (void (KHRONOS_APIENTRY *)(GLuint, GLuint))tunisGLGetProcAddress("glVertexArrayElementBuffer");
    tunisGL.tunisVertexArrayFogCoordOffsetEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLenum, GLsizei, GLintptr))tunisGLGetProcAddress("glVertexArrayFogCoordOffsetEXT");
    tunisGL.tunisVertexArrayIndexOffsetEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLenum, GLsizei, GLintptr))tunisGLGetProcAddress("glVertexArrayIndexOffsetEXT");
    tunisGL.tunisVertexArrayMultiTexCoordOffsetEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLenum, GLint, GLenum, GLsizei, GLintptr))tunisGLGetProcAddress("glVertexArrayMultiTexCoordOffsetEXT");
    tunisGL.tunisVertexArrayNormalOffsetEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLenum, GLsizei, GLintptr))tunisGLGetProcAddress("glVertexArrayNormalOffsetEXT");
    tunisGL.tunisVertexArrayParameteriAPPLE = (void (KHRONOS_APIENTRY *)(GLenum, GLint))tunisGLGetProcAddress("glVertexArrayParameteriAPPLE");
    tunisGL.tunisVertexArrayRangeAPPLE = (void (KHRONOS_APIENTRY *)(GLsizei, void *))tunisGLGetProcAddress("glVertexArrayRangeAPPLE");
    tunisGL.tunisVertexArrayRangeNV = (void (KHRONOS_APIENTRY *)(GLsizei, const void *))tunisGLGetProcAddress("glVertexArrayRangeNV");
    tunisGL.tunisVertexArraySecondaryColorOffsetEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLint, GLenum, GLsizei, GLintptr))tunisGLGetProcAddress("glVertexArraySecondaryColorOffsetEXT");
    tunisGL.tunisVertexArrayTexCoordOffsetEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLint, GLenum, GLsizei, GLintptr))tunisGLGetProcAddress("glVertexArrayTexCoordOffsetEXT");
    tunisGL.tunisVertexArrayVertexAttribBindingEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLuint))tunisGLGetProcAddress("glVertexArrayVertexAttribBindingEXT");
    tunisGL.tunisVertexArrayVertexAttribDivisorEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLuint))tunisGLGetProcAddress("glVertexArrayVertexAttribDivisorEXT");
    tunisGL.tunisVertexArrayVertexAttribFormatEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLint, GLenum, GLboolean, GLuint))tunisGLGetProcAddress("glVertexArrayVertexAttribFormatEXT");
    tunisGL.tunisVertexArrayVertexAttribIFormatEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLint, GLenum, GLuint))tunisGLGetProcAddress("glVertexArrayVertexAttribIFormatEXT");
    tunisGL.tunisVertexArrayVertexAttribIOffsetEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLuint, GLint, GLenum, GLsizei, GLintptr))tunisGLGetProcAddress("glVertexArrayVertexAttribIOffsetEXT");
    tunisGL.tunisVertexArrayVertexAttribLFormatEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLint, GLenum, GLuint))tunisGLGetProcAddress("glVertexArrayVertexAttribLFormatEXT");
    tunisGL.tunisVertexArrayVertexAttribLOffsetEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLuint, GLint, GLenum, GLsizei, GLintptr))tunisGLGetProcAddress("glVertexArrayVertexAttribLOffsetEXT");
    tunisGL.tunisVertexArrayVertexAttribOffsetEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLuint, GLint, GLenum, GLboolean, GLsizei, GLintptr))tunisGLGetProcAddress("glVertexArrayVertexAttribOffsetEXT");
    tunisGL.tunisVertexArrayVertexBindingDivisorEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLuint))tunisGLGetProcAddress("glVertexArrayVertexBindingDivisorEXT");
    tunisGL.tunisVertexArrayVertexBuffer = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLuint, GLintptr, GLsizei))tunisGLGetProcAddress("glVertexArrayVertexBuffer");
    tunisGL.tunisVertexArrayVertexBuffers = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLsizei, const GLuint *, const GLintptr *, const GLsizei *))tunisGLGetProcAddress("glVertexArrayVertexBuffers");
    tunisGL.tunisVertexArrayVertexOffsetEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLint, GLenum, GLsizei, GLintptr))tunisGLGetProcAddress("glVertexArrayVertexOffsetEXT");
    tunisGL.tunisVertexAttrib1d = (void (KHRONOS_APIENTRY *)(GLuint, GLdouble))tunisGLGetProcAddress("glVertexAttrib1d");
    tunisGL.tunisVertexAttrib1dARB = (void (KHRONOS_APIENTRY *)(GLuint, GLdouble))tunisGLGetProcAddress("glVertexAttrib1dARB");
    tunisGL.tunisVertexAttrib1dNV = (void (KHRONOS_APIENTRY *)(GLuint, GLdouble))tunisGLGetProcAddress("glVertexAttrib1dNV");
    tunisGL.tunisVertexAttrib1dv = (void (KHRONOS_APIENTRY *)(GLuint, const GLdouble *))tunisGLGetProcAddress("glVertexAttrib1dv");
    tunisGL.tunisVertexAttrib1dvARB = (void (KHRONOS_APIENTRY *)(GLuint, const GLdouble *))tunisGLGetProcAddress("glVertexAttrib1dvARB");
    tunisGL.tunisVertexAttrib1dvNV = (void (KHRONOS_APIENTRY *)(GLuint, const GLdouble *))tunisGLGetProcAddress("glVertexAttrib1dvNV");
    tunisGL.tunisVertexAttrib1f = (void (KHRONOS_APIENTRY *)(GLuint, GLfloat))tunisGLGetProcAddress("glVertexAttrib1f");
    tunisGL.tunisVertexAttrib1fARB = (void (KHRONOS_APIENTRY *)(GLuint, GLfloat))tunisGLGetProcAddress("glVertexAttrib1fARB");
    tunisGL.tunisVertexAttrib1fNV = (void (KHRONOS_APIENTRY *)(GLuint, GLfloat))tunisGLGetProcAddress("glVertexAttrib1fNV");
    tunisGL.tunisVertexAttrib1fv = (void (KHRONOS_APIENTRY *)(GLuint, const GLfloat *))tunisGLGetProcAddress("glVertexAttrib1fv");
    tunisGL.tunisVertexAttrib1fvARB = (void (KHRONOS_APIENTRY *)(GLuint, const GLfloat *))tunisGLGetProcAddress("glVertexAttrib1fvARB");
    tunisGL.tunisVertexAttrib1fvNV = (void (KHRONOS_APIENTRY *)(GLuint, const GLfloat *))tunisGLGetProcAddress("glVertexAttrib1fvNV");
    tunisGL.tunisVertexAttrib1hNV = (void (KHRONOS_APIENTRY *)(GLuint, GLhalfNV))tunisGLGetProcAddress("glVertexAttrib1hNV");
    tunisGL.tunisVertexAttrib1hvNV = (void (KHRONOS_APIENTRY *)(GLuint, const GLhalfNV *))tunisGLGetProcAddress("glVertexAttrib1hvNV");
    tunisGL.tunisVertexAttrib1s = (void (KHRONOS_APIENTRY *)(GLuint, GLshort))tunisGLGetProcAddress("glVertexAttrib1s");
    tunisGL.tunisVertexAttrib1sARB = (void (KHRONOS_APIENTRY *)(GLuint, GLshort))tunisGLGetProcAddress("glVertexAttrib1sARB");
    tunisGL.tunisVertexAttrib1sNV = (void (KHRONOS_APIENTRY *)(GLuint, GLshort))tunisGLGetProcAddress("glVertexAttrib1sNV");
    tunisGL.tunisVertexAttrib1sv = (void (KHRONOS_APIENTRY *)(GLuint, const GLshort *))tunisGLGetProcAddress("glVertexAttrib1sv");
    tunisGL.tunisVertexAttrib1svARB = (void (KHRONOS_APIENTRY *)(GLuint, const GLshort *))tunisGLGetProcAddress("glVertexAttrib1svARB");
    tunisGL.tunisVertexAttrib1svNV = (void (KHRONOS_APIENTRY *)(GLuint, const GLshort *))tunisGLGetProcAddress("glVertexAttrib1svNV");
    tunisGL.tunisVertexAttrib2d = (void (KHRONOS_APIENTRY *)(GLuint, GLdouble, GLdouble))tunisGLGetProcAddress("glVertexAttrib2d");
    tunisGL.tunisVertexAttrib2dARB = (void (KHRONOS_APIENTRY *)(GLuint, GLdouble, GLdouble))tunisGLGetProcAddress("glVertexAttrib2dARB");
    tunisGL.tunisVertexAttrib2dNV = (void (KHRONOS_APIENTRY *)(GLuint, GLdouble, GLdouble))tunisGLGetProcAddress("glVertexAttrib2dNV");
    tunisGL.tunisVertexAttrib2dv = (void (KHRONOS_APIENTRY *)(GLuint, const GLdouble *))tunisGLGetProcAddress("glVertexAttrib2dv");
    tunisGL.tunisVertexAttrib2dvARB = (void (KHRONOS_APIENTRY *)(GLuint, const GLdouble *))tunisGLGetProcAddress("glVertexAttrib2dvARB");
    tunisGL.tunisVertexAttrib2dvNV = (void (KHRONOS_APIENTRY *)(GLuint, const GLdouble *))tunisGLGetProcAddress("glVertexAttrib2dvNV");
    tunisGL.tunisVertexAttrib2f = (void (KHRONOS_APIENTRY *)(GLuint, GLfloat, GLfloat))tunisGLGetProcAddress("glVertexAttrib2f");
    tunisGL.tunisVertexAttrib2fARB = (void (KHRONOS_APIENTRY *)(GLuint, GLfloat, GLfloat))tunisGLGetProcAddress("glVertexAttrib2fARB");
    tunisGL.tunisVertexAttrib2fNV = (void (KHRONOS_APIENTRY *)(GLuint, GLfloat, GLfloat))tunisGLGetProcAddress("glVertexAttrib2fNV");
    tunisGL.tunisVertexAttrib2fv = (void (KHRONOS_APIENTRY *)(GLuint, const GLfloat *))tunisGLGetProcAddress("glVertexAttrib2fv");
    tunisGL.tunisVertexAttrib2fvARB = (void (KHRONOS_APIENTRY *)(GLuint, const GLfloat *))tunisGLGetProcAddress("glVertexAttrib2fvARB");
    tunisGL.tunisVertexAttrib2fvNV = (void (KHRONOS_APIENTRY *)(GLuint, const GLfloat *))tunisGLGetProcAddress("glVertexAttrib2fvNV");
    tunisGL.tunisVertexAttrib2hNV = (void (KHRONOS_APIENTRY *)(GLuint, GLhalfNV, GLhalfNV))tunisGLGetProcAddress("glVertexAttrib2hNV");
    tunisGL.tunisVertexAttrib2hvNV = (void (KHRONOS_APIENTRY *)(GLuint, const GLhalfNV *))tunisGLGetProcAddress("glVertexAttrib2hvNV");
    tunisGL.tunisVertexAttrib2s = (void (KHRONOS_APIENTRY *)(GLuint, GLshort, GLshort))tunisGLGetProcAddress("glVertexAttrib2s");
    tunisGL.tunisVertexAttrib2sARB = (void (KHRONOS_APIENTRY *)(GLuint, GLshort, GLshort))tunisGLGetProcAddress("glVertexAttrib2sARB");
    tunisGL.tunisVertexAttrib2sNV = (void (KHRONOS_APIENTRY *)(GLuint, GLshort, GLshort))tunisGLGetProcAddress("glVertexAttrib2sNV");
    tunisGL.tunisVertexAttrib2sv = (void (KHRONOS_APIENTRY *)(GLuint, const GLshort *))tunisGLGetProcAddress("glVertexAttrib2sv");
    tunisGL.tunisVertexAttrib2svARB = (void (KHRONOS_APIENTRY *)(GLuint, const GLshort *))tunisGLGetProcAddress("glVertexAttrib2svARB");
    tunisGL.tunisVertexAttrib2svNV = (void (KHRONOS_APIENTRY *)(GLuint, const GLshort *))tunisGLGetProcAddress("glVertexAttrib2svNV");
    tunisGL.tunisVertexAttrib3d = (void (KHRONOS_APIENTRY *)(GLuint, GLdouble, GLdouble, GLdouble))tunisGLGetProcAddress("glVertexAttrib3d");
    tunisGL.tunisVertexAttrib3dARB = (void (KHRONOS_APIENTRY *)(GLuint, GLdouble, GLdouble, GLdouble))tunisGLGetProcAddress("glVertexAttrib3dARB");
    tunisGL.tunisVertexAttrib3dNV = (void (KHRONOS_APIENTRY *)(GLuint, GLdouble, GLdouble, GLdouble))tunisGLGetProcAddress("glVertexAttrib3dNV");
    tunisGL.tunisVertexAttrib3dv = (void (KHRONOS_APIENTRY *)(GLuint, const GLdouble *))tunisGLGetProcAddress("glVertexAttrib3dv");
    tunisGL.tunisVertexAttrib3dvARB = (void (KHRONOS_APIENTRY *)(GLuint, const GLdouble *))tunisGLGetProcAddress("glVertexAttrib3dvARB");
    tunisGL.tunisVertexAttrib3dvNV = (void (KHRONOS_APIENTRY *)(GLuint, const GLdouble *))tunisGLGetProcAddress("glVertexAttrib3dvNV");
    tunisGL.tunisVertexAttrib3f = (void (KHRONOS_APIENTRY *)(GLuint, GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glVertexAttrib3f");
    tunisGL.tunisVertexAttrib3fARB = (void (KHRONOS_APIENTRY *)(GLuint, GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glVertexAttrib3fARB");
    tunisGL.tunisVertexAttrib3fNV = (void (KHRONOS_APIENTRY *)(GLuint, GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glVertexAttrib3fNV");
    tunisGL.tunisVertexAttrib3fv = (void (KHRONOS_APIENTRY *)(GLuint, const GLfloat *))tunisGLGetProcAddress("glVertexAttrib3fv");
    tunisGL.tunisVertexAttrib3fvARB = (void (KHRONOS_APIENTRY *)(GLuint, const GLfloat *))tunisGLGetProcAddress("glVertexAttrib3fvARB");
    tunisGL.tunisVertexAttrib3fvNV = (void (KHRONOS_APIENTRY *)(GLuint, const GLfloat *))tunisGLGetProcAddress("glVertexAttrib3fvNV");
    tunisGL.tunisVertexAttrib3hNV = (void (KHRONOS_APIENTRY *)(GLuint, GLhalfNV, GLhalfNV, GLhalfNV))tunisGLGetProcAddress("glVertexAttrib3hNV");
    tunisGL.tunisVertexAttrib3hvNV = (void (KHRONOS_APIENTRY *)(GLuint, const GLhalfNV *))tunisGLGetProcAddress("glVertexAttrib3hvNV");
    tunisGL.tunisVertexAttrib3s = (void (KHRONOS_APIENTRY *)(GLuint, GLshort, GLshort, GLshort))tunisGLGetProcAddress("glVertexAttrib3s");
    tunisGL.tunisVertexAttrib3sARB = (void (KHRONOS_APIENTRY *)(GLuint, GLshort, GLshort, GLshort))tunisGLGetProcAddress("glVertexAttrib3sARB");
    tunisGL.tunisVertexAttrib3sNV = (void (KHRONOS_APIENTRY *)(GLuint, GLshort, GLshort, GLshort))tunisGLGetProcAddress("glVertexAttrib3sNV");
    tunisGL.tunisVertexAttrib3sv = (void (KHRONOS_APIENTRY *)(GLuint, const GLshort *))tunisGLGetProcAddress("glVertexAttrib3sv");
    tunisGL.tunisVertexAttrib3svARB = (void (KHRONOS_APIENTRY *)(GLuint, const GLshort *))tunisGLGetProcAddress("glVertexAttrib3svARB");
    tunisGL.tunisVertexAttrib3svNV = (void (KHRONOS_APIENTRY *)(GLuint, const GLshort *))tunisGLGetProcAddress("glVertexAttrib3svNV");
    tunisGL.tunisVertexAttrib4Nbv = (void (KHRONOS_APIENTRY *)(GLuint, const GLbyte *))tunisGLGetProcAddress("glVertexAttrib4Nbv");
    tunisGL.tunisVertexAttrib4NbvARB = (void (KHRONOS_APIENTRY *)(GLuint, const GLbyte *))tunisGLGetProcAddress("glVertexAttrib4NbvARB");
    tunisGL.tunisVertexAttrib4Niv = (void (KHRONOS_APIENTRY *)(GLuint, const GLint *))tunisGLGetProcAddress("glVertexAttrib4Niv");
    tunisGL.tunisVertexAttrib4NivARB = (void (KHRONOS_APIENTRY *)(GLuint, const GLint *))tunisGLGetProcAddress("glVertexAttrib4NivARB");
    tunisGL.tunisVertexAttrib4Nsv = (void (KHRONOS_APIENTRY *)(GLuint, const GLshort *))tunisGLGetProcAddress("glVertexAttrib4Nsv");
    tunisGL.tunisVertexAttrib4NsvARB = (void (KHRONOS_APIENTRY *)(GLuint, const GLshort *))tunisGLGetProcAddress("glVertexAttrib4NsvARB");
    tunisGL.tunisVertexAttrib4Nub = (void (KHRONOS_APIENTRY *)(GLuint, GLubyte, GLubyte, GLubyte, GLubyte))tunisGLGetProcAddress("glVertexAttrib4Nub");
    tunisGL.tunisVertexAttrib4NubARB = (void (KHRONOS_APIENTRY *)(GLuint, GLubyte, GLubyte, GLubyte, GLubyte))tunisGLGetProcAddress("glVertexAttrib4NubARB");
    tunisGL.tunisVertexAttrib4Nubv = (void (KHRONOS_APIENTRY *)(GLuint, const GLubyte *))tunisGLGetProcAddress("glVertexAttrib4Nubv");
    tunisGL.tunisVertexAttrib4NubvARB = (void (KHRONOS_APIENTRY *)(GLuint, const GLubyte *))tunisGLGetProcAddress("glVertexAttrib4NubvARB");
    tunisGL.tunisVertexAttrib4Nuiv = (void (KHRONOS_APIENTRY *)(GLuint, const GLuint *))tunisGLGetProcAddress("glVertexAttrib4Nuiv");
    tunisGL.tunisVertexAttrib4NuivARB = (void (KHRONOS_APIENTRY *)(GLuint, const GLuint *))tunisGLGetProcAddress("glVertexAttrib4NuivARB");
    tunisGL.tunisVertexAttrib4Nusv = (void (KHRONOS_APIENTRY *)(GLuint, const GLushort *))tunisGLGetProcAddress("glVertexAttrib4Nusv");
    tunisGL.tunisVertexAttrib4NusvARB = (void (KHRONOS_APIENTRY *)(GLuint, const GLushort *))tunisGLGetProcAddress("glVertexAttrib4NusvARB");
    tunisGL.tunisVertexAttrib4bv = (void (KHRONOS_APIENTRY *)(GLuint, const GLbyte *))tunisGLGetProcAddress("glVertexAttrib4bv");
    tunisGL.tunisVertexAttrib4bvARB = (void (KHRONOS_APIENTRY *)(GLuint, const GLbyte *))tunisGLGetProcAddress("glVertexAttrib4bvARB");
    tunisGL.tunisVertexAttrib4d = (void (KHRONOS_APIENTRY *)(GLuint, GLdouble, GLdouble, GLdouble, GLdouble))tunisGLGetProcAddress("glVertexAttrib4d");
    tunisGL.tunisVertexAttrib4dARB = (void (KHRONOS_APIENTRY *)(GLuint, GLdouble, GLdouble, GLdouble, GLdouble))tunisGLGetProcAddress("glVertexAttrib4dARB");
    tunisGL.tunisVertexAttrib4dNV = (void (KHRONOS_APIENTRY *)(GLuint, GLdouble, GLdouble, GLdouble, GLdouble))tunisGLGetProcAddress("glVertexAttrib4dNV");
    tunisGL.tunisVertexAttrib4dv = (void (KHRONOS_APIENTRY *)(GLuint, const GLdouble *))tunisGLGetProcAddress("glVertexAttrib4dv");
    tunisGL.tunisVertexAttrib4dvARB = (void (KHRONOS_APIENTRY *)(GLuint, const GLdouble *))tunisGLGetProcAddress("glVertexAttrib4dvARB");
    tunisGL.tunisVertexAttrib4dvNV = (void (KHRONOS_APIENTRY *)(GLuint, const GLdouble *))tunisGLGetProcAddress("glVertexAttrib4dvNV");
    tunisGL.tunisVertexAttrib4f = (void (KHRONOS_APIENTRY *)(GLuint, GLfloat, GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glVertexAttrib4f");
    tunisGL.tunisVertexAttrib4fARB = (void (KHRONOS_APIENTRY *)(GLuint, GLfloat, GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glVertexAttrib4fARB");
    tunisGL.tunisVertexAttrib4fNV = (void (KHRONOS_APIENTRY *)(GLuint, GLfloat, GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glVertexAttrib4fNV");
    tunisGL.tunisVertexAttrib4fv = (void (KHRONOS_APIENTRY *)(GLuint, const GLfloat *))tunisGLGetProcAddress("glVertexAttrib4fv");
    tunisGL.tunisVertexAttrib4fvARB = (void (KHRONOS_APIENTRY *)(GLuint, const GLfloat *))tunisGLGetProcAddress("glVertexAttrib4fvARB");
    tunisGL.tunisVertexAttrib4fvNV = (void (KHRONOS_APIENTRY *)(GLuint, const GLfloat *))tunisGLGetProcAddress("glVertexAttrib4fvNV");
    tunisGL.tunisVertexAttrib4hNV = (void (KHRONOS_APIENTRY *)(GLuint, GLhalfNV, GLhalfNV, GLhalfNV, GLhalfNV))tunisGLGetProcAddress("glVertexAttrib4hNV");
    tunisGL.tunisVertexAttrib4hvNV = (void (KHRONOS_APIENTRY *)(GLuint, const GLhalfNV *))tunisGLGetProcAddress("glVertexAttrib4hvNV");
    tunisGL.tunisVertexAttrib4iv = (void (KHRONOS_APIENTRY *)(GLuint, const GLint *))tunisGLGetProcAddress("glVertexAttrib4iv");
    tunisGL.tunisVertexAttrib4ivARB = (void (KHRONOS_APIENTRY *)(GLuint, const GLint *))tunisGLGetProcAddress("glVertexAttrib4ivARB");
    tunisGL.tunisVertexAttrib4s = (void (KHRONOS_APIENTRY *)(GLuint, GLshort, GLshort, GLshort, GLshort))tunisGLGetProcAddress("glVertexAttrib4s");
    tunisGL.tunisVertexAttrib4sARB = (void (KHRONOS_APIENTRY *)(GLuint, GLshort, GLshort, GLshort, GLshort))tunisGLGetProcAddress("glVertexAttrib4sARB");
    tunisGL.tunisVertexAttrib4sNV = (void (KHRONOS_APIENTRY *)(GLuint, GLshort, GLshort, GLshort, GLshort))tunisGLGetProcAddress("glVertexAttrib4sNV");
    tunisGL.tunisVertexAttrib4sv = (void (KHRONOS_APIENTRY *)(GLuint, const GLshort *))tunisGLGetProcAddress("glVertexAttrib4sv");
    tunisGL.tunisVertexAttrib4svARB = (void (KHRONOS_APIENTRY *)(GLuint, const GLshort *))tunisGLGetProcAddress("glVertexAttrib4svARB");
    tunisGL.tunisVertexAttrib4svNV = (void (KHRONOS_APIENTRY *)(GLuint, const GLshort *))tunisGLGetProcAddress("glVertexAttrib4svNV");
    tunisGL.tunisVertexAttrib4ubNV = (void (KHRONOS_APIENTRY *)(GLuint, GLubyte, GLubyte, GLubyte, GLubyte))tunisGLGetProcAddress("glVertexAttrib4ubNV");
    tunisGL.tunisVertexAttrib4ubv = (void (KHRONOS_APIENTRY *)(GLuint, const GLubyte *))tunisGLGetProcAddress("glVertexAttrib4ubv");
    tunisGL.tunisVertexAttrib4ubvARB = (void (KHRONOS_APIENTRY *)(GLuint, const GLubyte *))tunisGLGetProcAddress("glVertexAttrib4ubvARB");
    tunisGL.tunisVertexAttrib4ubvNV = (void (KHRONOS_APIENTRY *)(GLuint, const GLubyte *))tunisGLGetProcAddress("glVertexAttrib4ubvNV");
    tunisGL.tunisVertexAttrib4uiv = (void (KHRONOS_APIENTRY *)(GLuint, const GLuint *))tunisGLGetProcAddress("glVertexAttrib4uiv");
    tunisGL.tunisVertexAttrib4uivARB = (void (KHRONOS_APIENTRY *)(GLuint, const GLuint *))tunisGLGetProcAddress("glVertexAttrib4uivARB");
    tunisGL.tunisVertexAttrib4usv = (void (KHRONOS_APIENTRY *)(GLuint, const GLushort *))tunisGLGetProcAddress("glVertexAttrib4usv");
    tunisGL.tunisVertexAttrib4usvARB = (void (KHRONOS_APIENTRY *)(GLuint, const GLushort *))tunisGLGetProcAddress("glVertexAttrib4usvARB");
    tunisGL.tunisVertexAttribArrayObjectATI = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLenum, GLboolean, GLsizei, GLuint, GLuint))tunisGLGetProcAddress("glVertexAttribArrayObjectATI");
    tunisGL.tunisVertexAttribBinding = (void (KHRONOS_APIENTRY *)(GLuint, GLuint))tunisGLGetProcAddress("glVertexAttribBinding");
    tunisGL.tunisVertexAttribDivisor = (void (KHRONOS_APIENTRY *)(GLuint, GLuint))tunisGLGetProcAddress("glVertexAttribDivisor");
    tunisGL.tunisVertexAttribDivisorANGLE = (void (KHRONOS_APIENTRY *)(GLuint, GLuint))tunisGLGetProcAddress("glVertexAttribDivisorANGLE");
    tunisGL.tunisVertexAttribDivisorARB = (void (KHRONOS_APIENTRY *)(GLuint, GLuint))tunisGLGetProcAddress("glVertexAttribDivisorARB");
    tunisGL.tunisVertexAttribDivisorEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLuint))tunisGLGetProcAddress("glVertexAttribDivisorEXT");
    tunisGL.tunisVertexAttribDivisorNV = (void (KHRONOS_APIENTRY *)(GLuint, GLuint))tunisGLGetProcAddress("glVertexAttribDivisorNV");
    tunisGL.tunisVertexAttribFormat = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLenum, GLboolean, GLuint))tunisGLGetProcAddress("glVertexAttribFormat");
    tunisGL.tunisVertexAttribFormatNV = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLenum, GLboolean, GLsizei))tunisGLGetProcAddress("glVertexAttribFormatNV");
    tunisGL.tunisVertexAttribI1i = (void (KHRONOS_APIENTRY *)(GLuint, GLint))tunisGLGetProcAddress("glVertexAttribI1i");
    tunisGL.tunisVertexAttribI1iEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint))tunisGLGetProcAddress("glVertexAttribI1iEXT");
    tunisGL.tunisVertexAttribI1iv = (void (KHRONOS_APIENTRY *)(GLuint, const GLint *))tunisGLGetProcAddress("glVertexAttribI1iv");
    tunisGL.tunisVertexAttribI1ivEXT = (void (KHRONOS_APIENTRY *)(GLuint, const GLint *))tunisGLGetProcAddress("glVertexAttribI1ivEXT");
    tunisGL.tunisVertexAttribI1ui = (void (KHRONOS_APIENTRY *)(GLuint, GLuint))tunisGLGetProcAddress("glVertexAttribI1ui");
    tunisGL.tunisVertexAttribI1uiEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLuint))tunisGLGetProcAddress("glVertexAttribI1uiEXT");
    tunisGL.tunisVertexAttribI1uiv = (void (KHRONOS_APIENTRY *)(GLuint, const GLuint *))tunisGLGetProcAddress("glVertexAttribI1uiv");
    tunisGL.tunisVertexAttribI1uivEXT = (void (KHRONOS_APIENTRY *)(GLuint, const GLuint *))tunisGLGetProcAddress("glVertexAttribI1uivEXT");
    tunisGL.tunisVertexAttribI2i = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLint))tunisGLGetProcAddress("glVertexAttribI2i");
    tunisGL.tunisVertexAttribI2iEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLint))tunisGLGetProcAddress("glVertexAttribI2iEXT");
    tunisGL.tunisVertexAttribI2iv = (void (KHRONOS_APIENTRY *)(GLuint, const GLint *))tunisGLGetProcAddress("glVertexAttribI2iv");
    tunisGL.tunisVertexAttribI2ivEXT = (void (KHRONOS_APIENTRY *)(GLuint, const GLint *))tunisGLGetProcAddress("glVertexAttribI2ivEXT");
    tunisGL.tunisVertexAttribI2ui = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLuint))tunisGLGetProcAddress("glVertexAttribI2ui");
    tunisGL.tunisVertexAttribI2uiEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLuint))tunisGLGetProcAddress("glVertexAttribI2uiEXT");
    tunisGL.tunisVertexAttribI2uiv = (void (KHRONOS_APIENTRY *)(GLuint, const GLuint *))tunisGLGetProcAddress("glVertexAttribI2uiv");
    tunisGL.tunisVertexAttribI2uivEXT = (void (KHRONOS_APIENTRY *)(GLuint, const GLuint *))tunisGLGetProcAddress("glVertexAttribI2uivEXT");
    tunisGL.tunisVertexAttribI3i = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLint, GLint))tunisGLGetProcAddress("glVertexAttribI3i");
    tunisGL.tunisVertexAttribI3iEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLint, GLint))tunisGLGetProcAddress("glVertexAttribI3iEXT");
    tunisGL.tunisVertexAttribI3iv = (void (KHRONOS_APIENTRY *)(GLuint, const GLint *))tunisGLGetProcAddress("glVertexAttribI3iv");
    tunisGL.tunisVertexAttribI3ivEXT = (void (KHRONOS_APIENTRY *)(GLuint, const GLint *))tunisGLGetProcAddress("glVertexAttribI3ivEXT");
    tunisGL.tunisVertexAttribI3ui = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLuint, GLuint))tunisGLGetProcAddress("glVertexAttribI3ui");
    tunisGL.tunisVertexAttribI3uiEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLuint, GLuint))tunisGLGetProcAddress("glVertexAttribI3uiEXT");
    tunisGL.tunisVertexAttribI3uiv = (void (KHRONOS_APIENTRY *)(GLuint, const GLuint *))tunisGLGetProcAddress("glVertexAttribI3uiv");
    tunisGL.tunisVertexAttribI3uivEXT = (void (KHRONOS_APIENTRY *)(GLuint, const GLuint *))tunisGLGetProcAddress("glVertexAttribI3uivEXT");
    tunisGL.tunisVertexAttribI4bv = (void (KHRONOS_APIENTRY *)(GLuint, const GLbyte *))tunisGLGetProcAddress("glVertexAttribI4bv");
    tunisGL.tunisVertexAttribI4bvEXT = (void (KHRONOS_APIENTRY *)(GLuint, const GLbyte *))tunisGLGetProcAddress("glVertexAttribI4bvEXT");
    tunisGL.tunisVertexAttribI4i = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLint, GLint, GLint))tunisGLGetProcAddress("glVertexAttribI4i");
    tunisGL.tunisVertexAttribI4iEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLint, GLint, GLint))tunisGLGetProcAddress("glVertexAttribI4iEXT");
    tunisGL.tunisVertexAttribI4iv = (void (KHRONOS_APIENTRY *)(GLuint, const GLint *))tunisGLGetProcAddress("glVertexAttribI4iv");
    tunisGL.tunisVertexAttribI4ivEXT = (void (KHRONOS_APIENTRY *)(GLuint, const GLint *))tunisGLGetProcAddress("glVertexAttribI4ivEXT");
    tunisGL.tunisVertexAttribI4sv = (void (KHRONOS_APIENTRY *)(GLuint, const GLshort *))tunisGLGetProcAddress("glVertexAttribI4sv");
    tunisGL.tunisVertexAttribI4svEXT = (void (KHRONOS_APIENTRY *)(GLuint, const GLshort *))tunisGLGetProcAddress("glVertexAttribI4svEXT");
    tunisGL.tunisVertexAttribI4ubv = (void (KHRONOS_APIENTRY *)(GLuint, const GLubyte *))tunisGLGetProcAddress("glVertexAttribI4ubv");
    tunisGL.tunisVertexAttribI4ubvEXT = (void (KHRONOS_APIENTRY *)(GLuint, const GLubyte *))tunisGLGetProcAddress("glVertexAttribI4ubvEXT");
    tunisGL.tunisVertexAttribI4ui = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLuint, GLuint, GLuint))tunisGLGetProcAddress("glVertexAttribI4ui");
    tunisGL.tunisVertexAttribI4uiEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLuint, GLuint, GLuint))tunisGLGetProcAddress("glVertexAttribI4uiEXT");
    tunisGL.tunisVertexAttribI4uiv = (void (KHRONOS_APIENTRY *)(GLuint, const GLuint *))tunisGLGetProcAddress("glVertexAttribI4uiv");
    tunisGL.tunisVertexAttribI4uivEXT = (void (KHRONOS_APIENTRY *)(GLuint, const GLuint *))tunisGLGetProcAddress("glVertexAttribI4uivEXT");
    tunisGL.tunisVertexAttribI4usv = (void (KHRONOS_APIENTRY *)(GLuint, const GLushort *))tunisGLGetProcAddress("glVertexAttribI4usv");
    tunisGL.tunisVertexAttribI4usvEXT = (void (KHRONOS_APIENTRY *)(GLuint, const GLushort *))tunisGLGetProcAddress("glVertexAttribI4usvEXT");
    tunisGL.tunisVertexAttribIFormat = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLenum, GLuint))tunisGLGetProcAddress("glVertexAttribIFormat");
    tunisGL.tunisVertexAttribIFormatNV = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLenum, GLsizei))tunisGLGetProcAddress("glVertexAttribIFormatNV");
    tunisGL.tunisVertexAttribIPointer = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLenum, GLsizei, const void *))tunisGLGetProcAddress("glVertexAttribIPointer");
    tunisGL.tunisVertexAttribIPointerEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLenum, GLsizei, const void *))tunisGLGetProcAddress("glVertexAttribIPointerEXT");
    tunisGL.tunisVertexAttribL1d = (void (KHRONOS_APIENTRY *)(GLuint, GLdouble))tunisGLGetProcAddress("glVertexAttribL1d");
    tunisGL.tunisVertexAttribL1dEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLdouble))tunisGLGetProcAddress("glVertexAttribL1dEXT");
    tunisGL.tunisVertexAttribL1dv = (void (KHRONOS_APIENTRY *)(GLuint, const GLdouble *))tunisGLGetProcAddress("glVertexAttribL1dv");
    tunisGL.tunisVertexAttribL1dvEXT = (void (KHRONOS_APIENTRY *)(GLuint, const GLdouble *))tunisGLGetProcAddress("glVertexAttribL1dvEXT");
    tunisGL.tunisVertexAttribL1i64NV = (void (KHRONOS_APIENTRY *)(GLuint, GLint64EXT))tunisGLGetProcAddress("glVertexAttribL1i64NV");
    tunisGL.tunisVertexAttribL1i64vNV = (void (KHRONOS_APIENTRY *)(GLuint, const GLint64EXT *))tunisGLGetProcAddress("glVertexAttribL1i64vNV");
    tunisGL.tunisVertexAttribL1ui64ARB = (void (KHRONOS_APIENTRY *)(GLuint, GLuint64EXT))tunisGLGetProcAddress("glVertexAttribL1ui64ARB");
    tunisGL.tunisVertexAttribL1ui64NV = (void (KHRONOS_APIENTRY *)(GLuint, GLuint64EXT))tunisGLGetProcAddress("glVertexAttribL1ui64NV");
    tunisGL.tunisVertexAttribL1ui64vARB = (void (KHRONOS_APIENTRY *)(GLuint, const GLuint64EXT *))tunisGLGetProcAddress("glVertexAttribL1ui64vARB");
    tunisGL.tunisVertexAttribL1ui64vNV = (void (KHRONOS_APIENTRY *)(GLuint, const GLuint64EXT *))tunisGLGetProcAddress("glVertexAttribL1ui64vNV");
    tunisGL.tunisVertexAttribL2d = (void (KHRONOS_APIENTRY *)(GLuint, GLdouble, GLdouble))tunisGLGetProcAddress("glVertexAttribL2d");
    tunisGL.tunisVertexAttribL2dEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLdouble, GLdouble))tunisGLGetProcAddress("glVertexAttribL2dEXT");
    tunisGL.tunisVertexAttribL2dv = (void (KHRONOS_APIENTRY *)(GLuint, const GLdouble *))tunisGLGetProcAddress("glVertexAttribL2dv");
    tunisGL.tunisVertexAttribL2dvEXT = (void (KHRONOS_APIENTRY *)(GLuint, const GLdouble *))tunisGLGetProcAddress("glVertexAttribL2dvEXT");
    tunisGL.tunisVertexAttribL2i64NV = (void (KHRONOS_APIENTRY *)(GLuint, GLint64EXT, GLint64EXT))tunisGLGetProcAddress("glVertexAttribL2i64NV");
    tunisGL.tunisVertexAttribL2i64vNV = (void (KHRONOS_APIENTRY *)(GLuint, const GLint64EXT *))tunisGLGetProcAddress("glVertexAttribL2i64vNV");
    tunisGL.tunisVertexAttribL2ui64NV = (void (KHRONOS_APIENTRY *)(GLuint, GLuint64EXT, GLuint64EXT))tunisGLGetProcAddress("glVertexAttribL2ui64NV");
    tunisGL.tunisVertexAttribL2ui64vNV = (void (KHRONOS_APIENTRY *)(GLuint, const GLuint64EXT *))tunisGLGetProcAddress("glVertexAttribL2ui64vNV");
    tunisGL.tunisVertexAttribL3d = (void (KHRONOS_APIENTRY *)(GLuint, GLdouble, GLdouble, GLdouble))tunisGLGetProcAddress("glVertexAttribL3d");
    tunisGL.tunisVertexAttribL3dEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLdouble, GLdouble, GLdouble))tunisGLGetProcAddress("glVertexAttribL3dEXT");
    tunisGL.tunisVertexAttribL3dv = (void (KHRONOS_APIENTRY *)(GLuint, const GLdouble *))tunisGLGetProcAddress("glVertexAttribL3dv");
    tunisGL.tunisVertexAttribL3dvEXT = (void (KHRONOS_APIENTRY *)(GLuint, const GLdouble *))tunisGLGetProcAddress("glVertexAttribL3dvEXT");
    tunisGL.tunisVertexAttribL3i64NV = (void (KHRONOS_APIENTRY *)(GLuint, GLint64EXT, GLint64EXT, GLint64EXT))tunisGLGetProcAddress("glVertexAttribL3i64NV");
    tunisGL.tunisVertexAttribL3i64vNV = (void (KHRONOS_APIENTRY *)(GLuint, const GLint64EXT *))tunisGLGetProcAddress("glVertexAttribL3i64vNV");
    tunisGL.tunisVertexAttribL3ui64NV = (void (KHRONOS_APIENTRY *)(GLuint, GLuint64EXT, GLuint64EXT, GLuint64EXT))tunisGLGetProcAddress("glVertexAttribL3ui64NV");
    tunisGL.tunisVertexAttribL3ui64vNV = (void (KHRONOS_APIENTRY *)(GLuint, const GLuint64EXT *))tunisGLGetProcAddress("glVertexAttribL3ui64vNV");
    tunisGL.tunisVertexAttribL4d = (void (KHRONOS_APIENTRY *)(GLuint, GLdouble, GLdouble, GLdouble, GLdouble))tunisGLGetProcAddress("glVertexAttribL4d");
    tunisGL.tunisVertexAttribL4dEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLdouble, GLdouble, GLdouble, GLdouble))tunisGLGetProcAddress("glVertexAttribL4dEXT");
    tunisGL.tunisVertexAttribL4dv = (void (KHRONOS_APIENTRY *)(GLuint, const GLdouble *))tunisGLGetProcAddress("glVertexAttribL4dv");
    tunisGL.tunisVertexAttribL4dvEXT = (void (KHRONOS_APIENTRY *)(GLuint, const GLdouble *))tunisGLGetProcAddress("glVertexAttribL4dvEXT");
    tunisGL.tunisVertexAttribL4i64NV = (void (KHRONOS_APIENTRY *)(GLuint, GLint64EXT, GLint64EXT, GLint64EXT, GLint64EXT))tunisGLGetProcAddress("glVertexAttribL4i64NV");
    tunisGL.tunisVertexAttribL4i64vNV = (void (KHRONOS_APIENTRY *)(GLuint, const GLint64EXT *))tunisGLGetProcAddress("glVertexAttribL4i64vNV");
    tunisGL.tunisVertexAttribL4ui64NV = (void (KHRONOS_APIENTRY *)(GLuint, GLuint64EXT, GLuint64EXT, GLuint64EXT, GLuint64EXT))tunisGLGetProcAddress("glVertexAttribL4ui64NV");
    tunisGL.tunisVertexAttribL4ui64vNV = (void (KHRONOS_APIENTRY *)(GLuint, const GLuint64EXT *))tunisGLGetProcAddress("glVertexAttribL4ui64vNV");
    tunisGL.tunisVertexAttribLFormat = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLenum, GLuint))tunisGLGetProcAddress("glVertexAttribLFormat");
    tunisGL.tunisVertexAttribLFormatNV = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLenum, GLsizei))tunisGLGetProcAddress("glVertexAttribLFormatNV");
    tunisGL.tunisVertexAttribLPointer = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLenum, GLsizei, const void *))tunisGLGetProcAddress("glVertexAttribLPointer");
    tunisGL.tunisVertexAttribLPointerEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLenum, GLsizei, const void *))tunisGLGetProcAddress("glVertexAttribLPointerEXT");
    tunisGL.tunisVertexAttribP1ui = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLboolean, GLuint))tunisGLGetProcAddress("glVertexAttribP1ui");
    tunisGL.tunisVertexAttribP1uiv = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLboolean, const GLuint *))tunisGLGetProcAddress("glVertexAttribP1uiv");
    tunisGL.tunisVertexAttribP2ui = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLboolean, GLuint))tunisGLGetProcAddress("glVertexAttribP2ui");
    tunisGL.tunisVertexAttribP2uiv = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLboolean, const GLuint *))tunisGLGetProcAddress("glVertexAttribP2uiv");
    tunisGL.tunisVertexAttribP3ui = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLboolean, GLuint))tunisGLGetProcAddress("glVertexAttribP3ui");
    tunisGL.tunisVertexAttribP3uiv = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLboolean, const GLuint *))tunisGLGetProcAddress("glVertexAttribP3uiv");
    tunisGL.tunisVertexAttribP4ui = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLboolean, GLuint))tunisGLGetProcAddress("glVertexAttribP4ui");
    tunisGL.tunisVertexAttribP4uiv = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLboolean, const GLuint *))tunisGLGetProcAddress("glVertexAttribP4uiv");
    tunisGL.tunisVertexAttribParameteriAMD = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint))tunisGLGetProcAddress("glVertexAttribParameteriAMD");
    tunisGL.tunisVertexAttribPointer = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLenum, GLboolean, GLsizei, const void *))tunisGLGetProcAddress("glVertexAttribPointer");
    tunisGL.tunisVertexAttribPointerARB = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLenum, GLboolean, GLsizei, const void *))tunisGLGetProcAddress("glVertexAttribPointerARB");
    tunisGL.tunisVertexAttribPointerNV = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLenum, GLsizei, const void *))tunisGLGetProcAddress("glVertexAttribPointerNV");
    tunisGL.tunisVertexAttribs1dvNV = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, const GLdouble *))tunisGLGetProcAddress("glVertexAttribs1dvNV");
    tunisGL.tunisVertexAttribs1fvNV = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, const GLfloat *))tunisGLGetProcAddress("glVertexAttribs1fvNV");
    tunisGL.tunisVertexAttribs1hvNV = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, const GLhalfNV *))tunisGLGetProcAddress("glVertexAttribs1hvNV");
    tunisGL.tunisVertexAttribs1svNV = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, const GLshort *))tunisGLGetProcAddress("glVertexAttribs1svNV");
    tunisGL.tunisVertexAttribs2dvNV = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, const GLdouble *))tunisGLGetProcAddress("glVertexAttribs2dvNV");
    tunisGL.tunisVertexAttribs2fvNV = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, const GLfloat *))tunisGLGetProcAddress("glVertexAttribs2fvNV");
    tunisGL.tunisVertexAttribs2hvNV = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, const GLhalfNV *))tunisGLGetProcAddress("glVertexAttribs2hvNV");
    tunisGL.tunisVertexAttribs2svNV = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, const GLshort *))tunisGLGetProcAddress("glVertexAttribs2svNV");
    tunisGL.tunisVertexAttribs3dvNV = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, const GLdouble *))tunisGLGetProcAddress("glVertexAttribs3dvNV");
    tunisGL.tunisVertexAttribs3fvNV = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, const GLfloat *))tunisGLGetProcAddress("glVertexAttribs3fvNV");
    tunisGL.tunisVertexAttribs3hvNV = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, const GLhalfNV *))tunisGLGetProcAddress("glVertexAttribs3hvNV");
    tunisGL.tunisVertexAttribs3svNV = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, const GLshort *))tunisGLGetProcAddress("glVertexAttribs3svNV");
    tunisGL.tunisVertexAttribs4dvNV = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, const GLdouble *))tunisGLGetProcAddress("glVertexAttribs4dvNV");
    tunisGL.tunisVertexAttribs4fvNV = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, const GLfloat *))tunisGLGetProcAddress("glVertexAttribs4fvNV");
    tunisGL.tunisVertexAttribs4hvNV = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, const GLhalfNV *))tunisGLGetProcAddress("glVertexAttribs4hvNV");
    tunisGL.tunisVertexAttribs4svNV = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, const GLshort *))tunisGLGetProcAddress("glVertexAttribs4svNV");
    tunisGL.tunisVertexAttribs4ubvNV = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, const GLubyte *))tunisGLGetProcAddress("glVertexAttribs4ubvNV");
    tunisGL.tunisVertexBindingDivisor = (void (KHRONOS_APIENTRY *)(GLuint, GLuint))tunisGLGetProcAddress("glVertexBindingDivisor");
    tunisGL.tunisVertexBlendARB = (void (KHRONOS_APIENTRY *)(GLint))tunisGLGetProcAddress("glVertexBlendARB");
    tunisGL.tunisVertexBlendEnvfATI = (void (KHRONOS_APIENTRY *)(GLenum, GLfloat))tunisGLGetProcAddress("glVertexBlendEnvfATI");
    tunisGL.tunisVertexBlendEnviATI = (void (KHRONOS_APIENTRY *)(GLenum, GLint))tunisGLGetProcAddress("glVertexBlendEnviATI");
    tunisGL.tunisVertexFormatNV = (void (KHRONOS_APIENTRY *)(GLint, GLenum, GLsizei))tunisGLGetProcAddress("glVertexFormatNV");
    tunisGL.tunisVertexP2ui = (void (KHRONOS_APIENTRY *)(GLenum, GLuint))tunisGLGetProcAddress("glVertexP2ui");
    tunisGL.tunisVertexP2uiv = (void (KHRONOS_APIENTRY *)(GLenum, const GLuint *))tunisGLGetProcAddress("glVertexP2uiv");
    tunisGL.tunisVertexP3ui = (void (KHRONOS_APIENTRY *)(GLenum, GLuint))tunisGLGetProcAddress("glVertexP3ui");
    tunisGL.tunisVertexP3uiv = (void (KHRONOS_APIENTRY *)(GLenum, const GLuint *))tunisGLGetProcAddress("glVertexP3uiv");
    tunisGL.tunisVertexP4ui = (void (KHRONOS_APIENTRY *)(GLenum, GLuint))tunisGLGetProcAddress("glVertexP4ui");
    tunisGL.tunisVertexP4uiv = (void (KHRONOS_APIENTRY *)(GLenum, const GLuint *))tunisGLGetProcAddress("glVertexP4uiv");
    tunisGL.tunisVertexPointer = (void (KHRONOS_APIENTRY *)(GLint, GLenum, GLsizei, const void *))tunisGLGetProcAddress("glVertexPointer");
    tunisGL.tunisVertexPointerEXT = (void (KHRONOS_APIENTRY *)(GLint, GLenum, GLsizei, GLsizei, const void *))tunisGLGetProcAddress("glVertexPointerEXT");
    tunisGL.tunisVertexPointerListIBM = (void (KHRONOS_APIENTRY *)(GLint, GLenum, GLint, const void **, GLint))tunisGLGetProcAddress("glVertexPointerListIBM");
    tunisGL.tunisVertexPointervINTEL = (void (KHRONOS_APIENTRY *)(GLint, GLenum, const void **))tunisGLGetProcAddress("glVertexPointervINTEL");
    tunisGL.tunisVertexStream1dATI = (void (KHRONOS_APIENTRY *)(GLenum, GLdouble))tunisGLGetProcAddress("glVertexStream1dATI");
    tunisGL.tunisVertexStream1dvATI = (void (KHRONOS_APIENTRY *)(GLenum, const GLdouble *))tunisGLGetProcAddress("glVertexStream1dvATI");
    tunisGL.tunisVertexStream1fATI = (void (KHRONOS_APIENTRY *)(GLenum, GLfloat))tunisGLGetProcAddress("glVertexStream1fATI");
    tunisGL.tunisVertexStream1fvATI = (void (KHRONOS_APIENTRY *)(GLenum, const GLfloat *))tunisGLGetProcAddress("glVertexStream1fvATI");
    tunisGL.tunisVertexStream1iATI = (void (KHRONOS_APIENTRY *)(GLenum, GLint))tunisGLGetProcAddress("glVertexStream1iATI");
    tunisGL.tunisVertexStream1ivATI = (void (KHRONOS_APIENTRY *)(GLenum, const GLint *))tunisGLGetProcAddress("glVertexStream1ivATI");
    tunisGL.tunisVertexStream1sATI = (void (KHRONOS_APIENTRY *)(GLenum, GLshort))tunisGLGetProcAddress("glVertexStream1sATI");
    tunisGL.tunisVertexStream1svATI = (void (KHRONOS_APIENTRY *)(GLenum, const GLshort *))tunisGLGetProcAddress("glVertexStream1svATI");
    tunisGL.tunisVertexStream2dATI = (void (KHRONOS_APIENTRY *)(GLenum, GLdouble, GLdouble))tunisGLGetProcAddress("glVertexStream2dATI");
    tunisGL.tunisVertexStream2dvATI = (void (KHRONOS_APIENTRY *)(GLenum, const GLdouble *))tunisGLGetProcAddress("glVertexStream2dvATI");
    tunisGL.tunisVertexStream2fATI = (void (KHRONOS_APIENTRY *)(GLenum, GLfloat, GLfloat))tunisGLGetProcAddress("glVertexStream2fATI");
    tunisGL.tunisVertexStream2fvATI = (void (KHRONOS_APIENTRY *)(GLenum, const GLfloat *))tunisGLGetProcAddress("glVertexStream2fvATI");
    tunisGL.tunisVertexStream2iATI = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLint))tunisGLGetProcAddress("glVertexStream2iATI");
    tunisGL.tunisVertexStream2ivATI = (void (KHRONOS_APIENTRY *)(GLenum, const GLint *))tunisGLGetProcAddress("glVertexStream2ivATI");
    tunisGL.tunisVertexStream2sATI = (void (KHRONOS_APIENTRY *)(GLenum, GLshort, GLshort))tunisGLGetProcAddress("glVertexStream2sATI");
    tunisGL.tunisVertexStream2svATI = (void (KHRONOS_APIENTRY *)(GLenum, const GLshort *))tunisGLGetProcAddress("glVertexStream2svATI");
    tunisGL.tunisVertexStream3dATI = (void (KHRONOS_APIENTRY *)(GLenum, GLdouble, GLdouble, GLdouble))tunisGLGetProcAddress("glVertexStream3dATI");
    tunisGL.tunisVertexStream3dvATI = (void (KHRONOS_APIENTRY *)(GLenum, const GLdouble *))tunisGLGetProcAddress("glVertexStream3dvATI");
    tunisGL.tunisVertexStream3fATI = (void (KHRONOS_APIENTRY *)(GLenum, GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glVertexStream3fATI");
    tunisGL.tunisVertexStream3fvATI = (void (KHRONOS_APIENTRY *)(GLenum, const GLfloat *))tunisGLGetProcAddress("glVertexStream3fvATI");
    tunisGL.tunisVertexStream3iATI = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLint, GLint))tunisGLGetProcAddress("glVertexStream3iATI");
    tunisGL.tunisVertexStream3ivATI = (void (KHRONOS_APIENTRY *)(GLenum, const GLint *))tunisGLGetProcAddress("glVertexStream3ivATI");
    tunisGL.tunisVertexStream3sATI = (void (KHRONOS_APIENTRY *)(GLenum, GLshort, GLshort, GLshort))tunisGLGetProcAddress("glVertexStream3sATI");
    tunisGL.tunisVertexStream3svATI = (void (KHRONOS_APIENTRY *)(GLenum, const GLshort *))tunisGLGetProcAddress("glVertexStream3svATI");
    tunisGL.tunisVertexStream4dATI = (void (KHRONOS_APIENTRY *)(GLenum, GLdouble, GLdouble, GLdouble, GLdouble))tunisGLGetProcAddress("glVertexStream4dATI");
    tunisGL.tunisVertexStream4dvATI = (void (KHRONOS_APIENTRY *)(GLenum, const GLdouble *))tunisGLGetProcAddress("glVertexStream4dvATI");
    tunisGL.tunisVertexStream4fATI = (void (KHRONOS_APIENTRY *)(GLenum, GLfloat, GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glVertexStream4fATI");
    tunisGL.tunisVertexStream4fvATI = (void (KHRONOS_APIENTRY *)(GLenum, const GLfloat *))tunisGLGetProcAddress("glVertexStream4fvATI");
    tunisGL.tunisVertexStream4iATI = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLint, GLint, GLint))tunisGLGetProcAddress("glVertexStream4iATI");
    tunisGL.tunisVertexStream4ivATI = (void (KHRONOS_APIENTRY *)(GLenum, const GLint *))tunisGLGetProcAddress("glVertexStream4ivATI");
    tunisGL.tunisVertexStream4sATI = (void (KHRONOS_APIENTRY *)(GLenum, GLshort, GLshort, GLshort, GLshort))tunisGLGetProcAddress("glVertexStream4sATI");
    tunisGL.tunisVertexStream4svATI = (void (KHRONOS_APIENTRY *)(GLenum, const GLshort *))tunisGLGetProcAddress("glVertexStream4svATI");
    tunisGL.tunisVertexWeightPointerEXT = (void (KHRONOS_APIENTRY *)(GLint, GLenum, GLsizei, const void *))tunisGLGetProcAddress("glVertexWeightPointerEXT");
    tunisGL.tunisVertexWeightfEXT = (void (KHRONOS_APIENTRY *)(GLfloat))tunisGLGetProcAddress("glVertexWeightfEXT");
    tunisGL.tunisVertexWeightfvEXT = (void (KHRONOS_APIENTRY *)(const GLfloat *))tunisGLGetProcAddress("glVertexWeightfvEXT");
    tunisGL.tunisVertexWeighthNV = (void (KHRONOS_APIENTRY *)(GLhalfNV))tunisGLGetProcAddress("glVertexWeighthNV");
    tunisGL.tunisVertexWeighthvNV = (void (KHRONOS_APIENTRY *)(const GLhalfNV *))tunisGLGetProcAddress("glVertexWeighthvNV");
    tunisGL.tunisVideoCaptureNV = (GLenum(KHRONOS_APIENTRY *)(GLuint, GLuint *, GLuint64EXT *))tunisGLGetProcAddress("glVideoCaptureNV");
    tunisGL.tunisVideoCaptureStreamParameterdvNV = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLenum, const GLdouble *))tunisGLGetProcAddress("glVideoCaptureStreamParameterdvNV");
    tunisGL.tunisVideoCaptureStreamParameterfvNV = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLenum, const GLfloat *))tunisGLGetProcAddress("glVideoCaptureStreamParameterfvNV");
    tunisGL.tunisVideoCaptureStreamParameterivNV = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLenum, const GLint *))tunisGLGetProcAddress("glVideoCaptureStreamParameterivNV");
    tunisGL.tunisViewport = (void (KHRONOS_APIENTRY *)(GLint, GLint, GLsizei, GLsizei))tunisGLGetProcAddress("glViewport");
    tunisGL.tunisViewportArrayv = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, const GLfloat *))tunisGLGetProcAddress("glViewportArrayv");
    tunisGL.tunisViewportArrayvNV = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, const GLfloat *))tunisGLGetProcAddress("glViewportArrayvNV");
    tunisGL.tunisViewportArrayvOES = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, const GLfloat *))tunisGLGetProcAddress("glViewportArrayvOES");
    tunisGL.tunisViewportIndexedf = (void (KHRONOS_APIENTRY *)(GLuint, GLfloat, GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glViewportIndexedf");
    tunisGL.tunisViewportIndexedfNV = (void (KHRONOS_APIENTRY *)(GLuint, GLfloat, GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glViewportIndexedfNV");
    tunisGL.tunisViewportIndexedfOES = (void (KHRONOS_APIENTRY *)(GLuint, GLfloat, GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glViewportIndexedfOES");
    tunisGL.tunisViewportIndexedfv = (void (KHRONOS_APIENTRY *)(GLuint, const GLfloat *))tunisGLGetProcAddress("glViewportIndexedfv");
    tunisGL.tunisViewportIndexedfvNV = (void (KHRONOS_APIENTRY *)(GLuint, const GLfloat *))tunisGLGetProcAddress("glViewportIndexedfvNV");
    tunisGL.tunisViewportIndexedfvOES = (void (KHRONOS_APIENTRY *)(GLuint, const GLfloat *))tunisGLGetProcAddress("glViewportIndexedfvOES");
    tunisGL.tunisViewportPositionWScaleNV = (void (KHRONOS_APIENTRY *)(GLuint, GLfloat, GLfloat))tunisGLGetProcAddress("glViewportPositionWScaleNV");
    tunisGL.tunisViewportSwizzleNV = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLenum, GLenum, GLenum))tunisGLGetProcAddress("glViewportSwizzleNV");
    tunisGL.tunisWaitSemaphoreEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, const GLuint *, GLuint, const GLuint *, const GLenum *))tunisGLGetProcAddress("glWaitSemaphoreEXT");
    tunisGL.tunisWaitSync = (void (KHRONOS_APIENTRY *)(GLsync, GLbitfield, GLuint64))tunisGLGetProcAddress("glWaitSync");
    tunisGL.tunisWaitSyncAPPLE = (void (KHRONOS_APIENTRY *)(GLsync, GLbitfield, GLuint64))tunisGLGetProcAddress("glWaitSyncAPPLE");
    tunisGL.tunisWaitVkSemaphoreNV = (void (KHRONOS_APIENTRY *)(GLuint64))tunisGLGetProcAddress("glWaitVkSemaphoreNV");
    tunisGL.tunisWeightPathsNV = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, const GLuint *, const GLfloat *))tunisGLGetProcAddress("glWeightPathsNV");
    tunisGL.tunisWeightPointerARB = (void (KHRONOS_APIENTRY *)(GLint, GLenum, GLsizei, const void *))tunisGLGetProcAddress("glWeightPointerARB");
    tunisGL.tunisWeightPointerOES = (void (KHRONOS_APIENTRY *)(GLint, GLenum, GLsizei, const void *))tunisGLGetProcAddress("glWeightPointerOES");
    tunisGL.tunisWeightbvARB = (void (KHRONOS_APIENTRY *)(GLint, const GLbyte *))tunisGLGetProcAddress("glWeightbvARB");
    tunisGL.tunisWeightdvARB = (void (KHRONOS_APIENTRY *)(GLint, const GLdouble *))tunisGLGetProcAddress("glWeightdvARB");
    tunisGL.tunisWeightfvARB = (void (KHRONOS_APIENTRY *)(GLint, const GLfloat *))tunisGLGetProcAddress("glWeightfvARB");
    tunisGL.tunisWeightivARB = (void (KHRONOS_APIENTRY *)(GLint, const GLint *))tunisGLGetProcAddress("glWeightivARB");
    tunisGL.tunisWeightsvARB = (void (KHRONOS_APIENTRY *)(GLint, const GLshort *))tunisGLGetProcAddress("glWeightsvARB");
    tunisGL.tunisWeightubvARB = (void (KHRONOS_APIENTRY *)(GLint, const GLubyte *))tunisGLGetProcAddress("glWeightubvARB");
    tunisGL.tunisWeightuivARB = (void (KHRONOS_APIENTRY *)(GLint, const GLuint *))tunisGLGetProcAddress("glWeightuivARB");
    tunisGL.tunisWeightusvARB = (void (KHRONOS_APIENTRY *)(GLint, const GLushort *))tunisGLGetProcAddress("glWeightusvARB");
    tunisGL.tunisWindowPos2d = (void (KHRONOS_APIENTRY *)(GLdouble, GLdouble))tunisGLGetProcAddress("glWindowPos2d");
    tunisGL.tunisWindowPos2dARB = (void (KHRONOS_APIENTRY *)(GLdouble, GLdouble))tunisGLGetProcAddress("glWindowPos2dARB");
    tunisGL.tunisWindowPos2dMESA = (void (KHRONOS_APIENTRY *)(GLdouble, GLdouble))tunisGLGetProcAddress("glWindowPos2dMESA");
    tunisGL.tunisWindowPos2dv = (void (KHRONOS_APIENTRY *)(const GLdouble *))tunisGLGetProcAddress("glWindowPos2dv");
    tunisGL.tunisWindowPos2dvARB = (void (KHRONOS_APIENTRY *)(const GLdouble *))tunisGLGetProcAddress("glWindowPos2dvARB");
    tunisGL.tunisWindowPos2dvMESA = (void (KHRONOS_APIENTRY *)(const GLdouble *))tunisGLGetProcAddress("glWindowPos2dvMESA");
    tunisGL.tunisWindowPos2f = (void (KHRONOS_APIENTRY *)(GLfloat, GLfloat))tunisGLGetProcAddress("glWindowPos2f");
    tunisGL.tunisWindowPos2fARB = (void (KHRONOS_APIENTRY *)(GLfloat, GLfloat))tunisGLGetProcAddress("glWindowPos2fARB");
    tunisGL.tunisWindowPos2fMESA = (void (KHRONOS_APIENTRY *)(GLfloat, GLfloat))tunisGLGetProcAddress("glWindowPos2fMESA");
    tunisGL.tunisWindowPos2fv = (void (KHRONOS_APIENTRY *)(const GLfloat *))tunisGLGetProcAddress("glWindowPos2fv");
    tunisGL.tunisWindowPos2fvARB = (void (KHRONOS_APIENTRY *)(const GLfloat *))tunisGLGetProcAddress("glWindowPos2fvARB");
    tunisGL.tunisWindowPos2fvMESA = (void (KHRONOS_APIENTRY *)(const GLfloat *))tunisGLGetProcAddress("glWindowPos2fvMESA");
    tunisGL.tunisWindowPos2i = (void (KHRONOS_APIENTRY *)(GLint, GLint))tunisGLGetProcAddress("glWindowPos2i");
    tunisGL.tunisWindowPos2iARB = (void (KHRONOS_APIENTRY *)(GLint, GLint))tunisGLGetProcAddress("glWindowPos2iARB");
    tunisGL.tunisWindowPos2iMESA = (void (KHRONOS_APIENTRY *)(GLint, GLint))tunisGLGetProcAddress("glWindowPos2iMESA");
    tunisGL.tunisWindowPos2iv = (void (KHRONOS_APIENTRY *)(const GLint *))tunisGLGetProcAddress("glWindowPos2iv");
    tunisGL.tunisWindowPos2ivARB = (void (KHRONOS_APIENTRY *)(const GLint *))tunisGLGetProcAddress("glWindowPos2ivARB");
    tunisGL.tunisWindowPos2ivMESA = (void (KHRONOS_APIENTRY *)(const GLint *))tunisGLGetProcAddress("glWindowPos2ivMESA");
    tunisGL.tunisWindowPos2s = (void (KHRONOS_APIENTRY *)(GLshort, GLshort))tunisGLGetProcAddress("glWindowPos2s");
    tunisGL.tunisWindowPos2sARB = (void (KHRONOS_APIENTRY *)(GLshort, GLshort))tunisGLGetProcAddress("glWindowPos2sARB");
    tunisGL.tunisWindowPos2sMESA = (void (KHRONOS_APIENTRY *)(GLshort, GLshort))tunisGLGetProcAddress("glWindowPos2sMESA");
    tunisGL.tunisWindowPos2sv = (void (KHRONOS_APIENTRY *)(const GLshort *))tunisGLGetProcAddress("glWindowPos2sv");
    tunisGL.tunisWindowPos2svARB = (void (KHRONOS_APIENTRY *)(const GLshort *))tunisGLGetProcAddress("glWindowPos2svARB");
    tunisGL.tunisWindowPos2svMESA = (void (KHRONOS_APIENTRY *)(const GLshort *))tunisGLGetProcAddress("glWindowPos2svMESA");
    tunisGL.tunisWindowPos3d = (void (KHRONOS_APIENTRY *)(GLdouble, GLdouble, GLdouble))tunisGLGetProcAddress("glWindowPos3d");
    tunisGL.tunisWindowPos3dARB = (void (KHRONOS_APIENTRY *)(GLdouble, GLdouble, GLdouble))tunisGLGetProcAddress("glWindowPos3dARB");
    tunisGL.tunisWindowPos3dMESA = (void (KHRONOS_APIENTRY *)(GLdouble, GLdouble, GLdouble))tunisGLGetProcAddress("glWindowPos3dMESA");
    tunisGL.tunisWindowPos3dv = (void (KHRONOS_APIENTRY *)(const GLdouble *))tunisGLGetProcAddress("glWindowPos3dv");
    tunisGL.tunisWindowPos3dvARB = (void (KHRONOS_APIENTRY *)(const GLdouble *))tunisGLGetProcAddress("glWindowPos3dvARB");
    tunisGL.tunisWindowPos3dvMESA = (void (KHRONOS_APIENTRY *)(const GLdouble *))tunisGLGetProcAddress("glWindowPos3dvMESA");
    tunisGL.tunisWindowPos3f = (void (KHRONOS_APIENTRY *)(GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glWindowPos3f");
    tunisGL.tunisWindowPos3fARB = (void (KHRONOS_APIENTRY *)(GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glWindowPos3fARB");
    tunisGL.tunisWindowPos3fMESA = (void (KHRONOS_APIENTRY *)(GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glWindowPos3fMESA");
    tunisGL.tunisWindowPos3fv = (void (KHRONOS_APIENTRY *)(const GLfloat *))tunisGLGetProcAddress("glWindowPos3fv");
    tunisGL.tunisWindowPos3fvARB = (void (KHRONOS_APIENTRY *)(const GLfloat *))tunisGLGetProcAddress("glWindowPos3fvARB");
    tunisGL.tunisWindowPos3fvMESA = (void (KHRONOS_APIENTRY *)(const GLfloat *))tunisGLGetProcAddress("glWindowPos3fvMESA");
    tunisGL.tunisWindowPos3i = (void (KHRONOS_APIENTRY *)(GLint, GLint, GLint))tunisGLGetProcAddress("glWindowPos3i");
    tunisGL.tunisWindowPos3iARB = (void (KHRONOS_APIENTRY *)(GLint, GLint, GLint))tunisGLGetProcAddress("glWindowPos3iARB");
    tunisGL.tunisWindowPos3iMESA = (void (KHRONOS_APIENTRY *)(GLint, GLint, GLint))tunisGLGetProcAddress("glWindowPos3iMESA");
    tunisGL.tunisWindowPos3iv = (void (KHRONOS_APIENTRY *)(const GLint *))tunisGLGetProcAddress("glWindowPos3iv");
    tunisGL.tunisWindowPos3ivARB = (void (KHRONOS_APIENTRY *)(const GLint *))tunisGLGetProcAddress("glWindowPos3ivARB");
    tunisGL.tunisWindowPos3ivMESA = (void (KHRONOS_APIENTRY *)(const GLint *))tunisGLGetProcAddress("glWindowPos3ivMESA");
    tunisGL.tunisWindowPos3s = (void (KHRONOS_APIENTRY *)(GLshort, GLshort, GLshort))tunisGLGetProcAddress("glWindowPos3s");
    tunisGL.tunisWindowPos3sARB = (void (KHRONOS_APIENTRY *)(GLshort, GLshort, GLshort))tunisGLGetProcAddress("glWindowPos3sARB");
    tunisGL.tunisWindowPos3sMESA = (void (KHRONOS_APIENTRY *)(GLshort, GLshort, GLshort))tunisGLGetProcAddress("glWindowPos3sMESA");
    tunisGL.tunisWindowPos3sv = (void (KHRONOS_APIENTRY *)(const GLshort *))tunisGLGetProcAddress("glWindowPos3sv");
    tunisGL.tunisWindowPos3svARB = (void (KHRONOS_APIENTRY *)(const GLshort *))tunisGLGetProcAddress("glWindowPos3svARB");
    tunisGL.tunisWindowPos3svMESA = (void (KHRONOS_APIENTRY *)(const GLshort *))tunisGLGetProcAddress("glWindowPos3svMESA");
    tunisGL.tunisWindowPos4dMESA = (void (KHRONOS_APIENTRY *)(GLdouble, GLdouble, GLdouble, GLdouble))tunisGLGetProcAddress("glWindowPos4dMESA");
    tunisGL.tunisWindowPos4dvMESA = (void (KHRONOS_APIENTRY *)(const GLdouble *))tunisGLGetProcAddress("glWindowPos4dvMESA");
    tunisGL.tunisWindowPos4fMESA = (void (KHRONOS_APIENTRY *)(GLfloat, GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glWindowPos4fMESA");
    tunisGL.tunisWindowPos4fvMESA = (void (KHRONOS_APIENTRY *)(const GLfloat *))tunisGLGetProcAddress("glWindowPos4fvMESA");
    tunisGL.tunisWindowPos4iMESA = (void (KHRONOS_APIENTRY *)(GLint, GLint, GLint, GLint))tunisGLGetProcAddress("glWindowPos4iMESA");
    tunisGL.tunisWindowPos4ivMESA = (void (KHRONOS_APIENTRY *)(const GLint *))tunisGLGetProcAddress("glWindowPos4ivMESA");
    tunisGL.tunisWindowPos4sMESA = (void (KHRONOS_APIENTRY *)(GLshort, GLshort, GLshort, GLshort))tunisGLGetProcAddress("glWindowPos4sMESA");
    tunisGL.tunisWindowPos4svMESA = (void (KHRONOS_APIENTRY *)(const GLshort *))tunisGLGetProcAddress("glWindowPos4svMESA");
    tunisGL.tunisWindowRectanglesEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, const GLint *))tunisGLGetProcAddress("glWindowRectanglesEXT");
    tunisGL.tunisWriteMaskEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLenum, GLenum, GLenum, GLenum))tunisGLGetProcAddress("glWriteMaskEXT");

    if (!tunisGL.tunisGetError) {
        fprintf(stderr, "Could not find 'glGetError'\n");
        return KHRONOS_FALSE;
    }

    if (!tunisGL.tunisGetString) {
        fprintf(stderr, "Could not find 'glGetString'\n");
        return KHRONOS_FALSE;
    }

    version  = (const char*)tunisGL.tunisGetString(GL_VERSION);

    if(!version) {
        fprintf(stderr, "tunisGLInit() : Missing GL context. Make sure your context is created and made current prior to calling tunisGLInit.\n");
        return KHRONOS_FALSE;
    }

    if ((TUNIS_SSCANF(version, "OpenGL ES %d.%d",    &versionMajor, &versionMinor) == 2) ||
        (TUNIS_SSCANF(version, "OpenGL ES-CM %d.%d", &versionMajor, &versionMinor) == 2)) {
        isGLES = KHRONOS_TRUE;
    } else if (TUNIS_SSCANF(version, "%d.%d", &versionMajor, &versionMinor) != 2) {
        fprintf(stderr, "tunisGLInit() : Could not determine OpenGL/OpenGLES version.\n");
        return KHRONOS_FALSE;
    }

    if(isGLES) {
        tunisGL.support[GL_VERSION_ES_CM_1_0] = ((versionMajor > 1) || ((versionMajor == 1) && (versionMinor >= 0)));
        tunisGL.support[GL_ES_VERSION_2_0] = ((versionMajor > 2) || ((versionMajor == 2) && (versionMinor >= 0)));
        tunisGL.support[GL_ES_VERSION_3_0] = ((versionMajor > 3) || ((versionMajor == 3) && (versionMinor >= 0)));
        tunisGL.support[GL_ES_VERSION_3_1] = ((versionMajor > 3) || ((versionMajor == 3) && (versionMinor >= 1)));
        tunisGL.support[GL_ES_VERSION_3_2] = ((versionMajor > 3) || ((versionMajor == 3) && (versionMinor >= 2)));
        tunisGL.support[GL_SC_VERSION_2_0] = ((versionMajor > 2) || ((versionMajor == 2) && (versionMinor >= 0)));

    } else {
        tunisGL.support[GL_VERSION_1_0] = ((versionMajor > 1) || ((versionMajor == 1) && (versionMinor >= 0)));
        tunisGL.support[GL_VERSION_1_1] = ((versionMajor > 1) || ((versionMajor == 1) && (versionMinor >= 1)));
        tunisGL.support[GL_VERSION_1_2] = ((versionMajor > 1) || ((versionMajor == 1) && (versionMinor >= 2)));
        tunisGL.support[GL_VERSION_1_3] = ((versionMajor > 1) || ((versionMajor == 1) && (versionMinor >= 3)));
        tunisGL.support[GL_VERSION_1_4] = ((versionMajor > 1) || ((versionMajor == 1) && (versionMinor >= 4)));
        tunisGL.support[GL_VERSION_1_5] = ((versionMajor > 1) || ((versionMajor == 1) && (versionMinor >= 5)));
        tunisGL.support[GL_VERSION_2_0] = ((versionMajor > 2) || ((versionMajor == 2) && (versionMinor >= 0)));
        tunisGL.support[GL_VERSION_2_1] = ((versionMajor > 2) || ((versionMajor == 2) && (versionMinor >= 1)));
        tunisGL.support[GL_VERSION_3_0] = ((versionMajor > 3) || ((versionMajor == 3) && (versionMinor >= 0)));
        tunisGL.support[GL_VERSION_3_1] = ((versionMajor > 3) || ((versionMajor == 3) && (versionMinor >= 1)));
        tunisGL.support[GL_VERSION_3_2] = ((versionMajor > 3) || ((versionMajor == 3) && (versionMinor >= 2)));
        tunisGL.support[GL_VERSION_3_3] = ((versionMajor > 3) || ((versionMajor == 3) && (versionMinor >= 3)));
        tunisGL.support[GL_VERSION_4_0] = ((versionMajor > 4) || ((versionMajor == 4) && (versionMinor >= 0)));
        tunisGL.support[GL_VERSION_4_1] = ((versionMajor > 4) || ((versionMajor == 4) && (versionMinor >= 1)));
        tunisGL.support[GL_VERSION_4_2] = ((versionMajor > 4) || ((versionMajor == 4) && (versionMinor >= 2)));
        tunisGL.support[GL_VERSION_4_3] = ((versionMajor > 4) || ((versionMajor == 4) && (versionMinor >= 3)));
        tunisGL.support[GL_VERSION_4_4] = ((versionMajor > 4) || ((versionMajor == 4) && (versionMinor >= 4)));
        tunisGL.support[GL_VERSION_4_5] = ((versionMajor > 4) || ((versionMajor == 4) && (versionMinor >= 5)));
        tunisGL.support[GL_VERSION_4_6] = ((versionMajor > 4) || ((versionMajor == 4) && (versionMinor >= 6)));

    }

    if (tunisGL.support[GL_VERSION_3_0] || tunisGL.support[GL_ES_VERSION_3_0]) {
        khronos_int32_t i = 0;
        khronos_int32_t nExtensionsCount = 0;
        tunisGL.tunisGetIntegerv(GL_NUM_EXTENSIONS, &nExtensionsCount);
        while(i < nExtensionsCount)
        {
            const char* extensionStr = (const char*)tunisGL.tunisGetStringi(GL_EXTENSIONS, i++);
            tunisGLAddExtension(isGLES, extensionStr, strlen(extensionStr));
        }
    } else {
        const char* extensionsStr = (const char*)tunisGL.tunisGetString(GL_EXTENSIONS);
        while (extensionsStr) {
            const char* spacerPos = strchr(extensionsStr, ' ');
            khronos_usize_t extensionsStrLength = spacerPos ? (khronos_usize_t)(spacerPos++ - extensionsStr) : strlen(extensionsStr);
            tunisGLAddExtension(isGLES, extensionsStr, extensionsStrLength);
            extensionsStr = spacerPos;
        }
    }

#if !defined(NDEBUG)
    {
        clock_t end = clock();
        double elapsed_time = (end-start)/(double)CLOCKS_PER_SEC*1000.0;
        fprintf(stderr, "tunisGLInit() : elapsed time: %.2fms\n", elapsed_time );
    }
#endif

    return KHRONOS_TRUE;
}

void tunisGLShutdown(void) {
    memset(&tunisGL, 0, sizeof(TunisGLConfig));

#if !defined(__EMSCRIPTEN__)
    if (s_tunisGLLib)
    {
#if defined(_WIN32)
        FreeLibrary(s_tunisGLLib);
#else
        dlclose(s_tunisGLLib);
#endif
        s_tunisGLLib = NULL;
    }
#endif

}

void _tunisGLCheckError(const char* fileName, int lineNumber) {
    GLenum eErrorID = tunisGL.tunisGetError();
    if (eErrorID != GL_NO_ERROR) {
        do {
            static const char* errMsg[] = {
                "GL_INVALID_ENUM: An unacceptable value is specified for an enumerated argument.",
                "GL_INVALID_VALUE: A numeric argument is out of range.",
                "GL_INVALID_OPERATION: The specified operation is not allowed in the current state.",
                "GL_STACK_OVERFLOW: This function caused a stack overflow.",
                "GL_STACK_UNDERFLOW: This function would cause a stack underflow.",
                "GL_OUT_OF_MEMORY: There is not enough memory left to execute the command.",
                "GL_INVALID_FRAMEBUFFER_OPERATION: The command is trying to render to or read from the framebuffer while the currently bound framebuffer is not framebuffer complete.",
                "GL_CONTEXT_LOST: The context has been lost, due to a graphics card reset."
            };

            khronos_usize_t errorIndex = eErrorID - GL_INVALID_ENUM;
            if (errorIndex > sizeof(errMsg)) {
                fprintf(stderr, "tunisGLCheckError : file %s, line %d : Unknown error 0x%X\n", fileName, lineNumber, eErrorID);
            } else {
                fprintf(stderr, "tunisGLCheckError : file %s, line %d : %s\n", fileName, lineNumber, errMsg[errorIndex]);
            }
        } while((eErrorID = tunisGL.tunisGetError()) != GL_NO_ERROR);
    }
}

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif /* TUNIS_IMPLEMENTATION */

#endif /* _TUNIS_GL_H_ */

