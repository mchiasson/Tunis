/*
   TunisGL.h
       A Public domain ANSI C (C89) compliant GL/GLES extension wrangler

   Generated using GLBrebis on Sun, 23 Sep 2018 18:03:24 GMT
   https://github.com/mchiasson/GLBrebis

   NO WARRANTY IMPLIED; USE AT YOUR OWN RISK

   Suports the following OpenGL contexts:
     - OpenGL 1.0
     - OpenGL 1.1
     - OpenGL 1.2
     - OpenGL 1.3
     - OpenGL 1.4
     - OpenGL 1.5
     - OpenGL 2.0
     - OpenGL 2.1
     - OpenGL 3.0
     - OpenGL 3.1
     - OpenGL 3.2
     - OpenGL 3.3
     - OpenGL 4.0
     - OpenGL 4.1
     - OpenGL 4.2
     - OpenGL 4.3
     - OpenGL 4.4
     - OpenGL 4.5
     - OpenGL 4.6
     - OpenGL ES CM 1.0
     - OpenGL ES 2.0
     - OpenGL ES 3.1
     - OpenGL ES 3.2
     - OpenGL SC 2.0 (unverified)
     - WebGL (Emscripten in either asm.js or wasm format)

   Do this:

     #define TUNIS_GL_IMPLEMENTATION

   before you include this file in *one* C or C++ file to create the implementation.
     // i.e. it should look like this:
     #include ...
     #include ...
     #include ...
     #define TUNIS_GL_IMPLEMENTATION
     #include "TunisGL.h"

   Before you can use any GL or GLES functions from this header make sure to
   call tunisGLInit() soon after creating your GL or GLES context, and make sure
   that it returns KHRONOS_TRUE. To  clean up the loaded function pointer table
   and close any opened GL/GLES library handle opened by this wrangler, you can
   call tunisGLShutdown().

LICENSE

------------------------------------------------------------------------------
This software is available under 2 licenses -- choose whichever you prefer.
------------------------------------------------------------------------------
ALTERNATIVE A - MIT License
Copyright (c) 2017-2018 Mathieu-Andr√© Chiasson
Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
of the Software, and to permit persons to whom the Software is furnished to do
so, subject to the following conditions:
The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
------------------------------------------------------------------------------
ALTERNATIVE B - Public Domain (www.unlicense.org)
This is free and unencumbered software released into the public domain.
Anyone is free to copy, modify, publish, use, compile, sell, or distribute this
software, either in source code form or as a compiled binary, for any purpose,
commercial or non-commercial, and by any means.
In jurisdictions that recognize copyright laws, the author or authors of this
software dedicate any and all copyright interest in the software to the public
domain. We make this dedication for the benefit of the public at large and to
the detriment of our heirs and successors. We intend this dedication to be an
overt act of relinquishment in perpetuity of all present and future rights to
this software under copyright law.
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
------------------------------------------------------------------------------
*/

#if !defined(_TUNIS_GL_H_)
#define _TUNIS_GL_H_ 1

/*******************************************************************************
 * FOLLOWING SECTION IS FROM KHR/khrplatform.h, available here:
 * https://www.khronos.org/registry/EGL/api/KHR/khrplatform.h
 ******************************************************************************/
#ifndef __khrplatform_h_
#define __khrplatform_h_

/*
** Copyright (c) 2008-2018 The Khronos Group Inc.
**
** Permission is hereby granted, free of charge, to any person obtaining a
** copy of this software and/or associated documentation files (the
** "Materials"), to deal in the Materials without restriction, including
** without limitation the rights to use, copy, modify, merge, publish,
** distribute, sublicense, and/or sell copies of the Materials, and to
** permit persons to whom the Materials are furnished to do so, subject to
** the following conditions:
**
** The above copyright notice and this permission notice shall be included
** in all copies or substantial portions of the Materials.
**
** THE MATERIALS ARE PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
** EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
** MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
** IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
** CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
** TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
** MATERIALS OR THE USE OR OTHER DEALINGS IN THE MATERIALS.
*/

/* Khronos platform-specific types and definitions.
 *
 * The master copy of khrplatform.h is maintained in the Khronos EGL
 * Registry repository at https://github.com/KhronosGroup/EGL-Registry
 * The last semantic modification to khrplatform.h was at commit ID:
 *      67a3e0864c2d75ea5287b9f3d2eb74a745936692
 *
 * Adopters may modify this file to suit their platform. Adopters are
 * encouraged to submit platform specific modifications to the Khronos
 * group so that they can be included in future versions of this file.
 * Please submit changes by filing pull requests or issues on
 * the EGL Registry repository linked above.
 *
 *
 * See the Implementer's Guidelines for information about where this file
 * should be located on your system and for more details of its use:
 *    http://www.khronos.org/registry/implementers_guide.pdf
 *
 * This file should be included as
 *        #include <KHR/khrplatform.h>
 * by Khronos client API header files that use its types and defines.
 *
 * The types in khrplatform.h should only be used to define API-specific types.
 *
 * Types defined in khrplatform.h:
 *    khronos_int8_t              signed   8  bit
 *    khronos_uint8_t             unsigned 8  bit
 *    khronos_int16_t             signed   16 bit
 *    khronos_uint16_t            unsigned 16 bit
 *    khronos_int32_t             signed   32 bit
 *    khronos_uint32_t            unsigned 32 bit
 *    khronos_int64_t             signed   64 bit
 *    khronos_uint64_t            unsigned 64 bit
 *    khronos_intptr_t            signed   same number of bits as a pointer
 *    khronos_uintptr_t           unsigned same number of bits as a pointer
 *    khronos_ssize_t             signed   size
 *    khronos_usize_t             unsigned size
 *    khronos_float_t             signed   32 bit floating point
 *    khronos_time_ns_t           unsigned 64 bit time in nanoseconds
 *    khronos_utime_nanoseconds_t unsigned time interval or absolute time in
 *                                         nanoseconds
 *    khronos_stime_nanoseconds_t signed time interval in nanoseconds
 *    khronos_boolean_enum_t      enumerated boolean type. This should
 *      only be used as a base type when a client API's boolean type is
 *      an enum. Client APIs which use an integer or other type for
 *      booleans cannot use this as the base type for their boolean.
 *
 * Tokens defined in khrplatform.h:
 *
 *    KHRONOS_FALSE, KHRONOS_TRUE Enumerated boolean false/true values.
 *
 *    KHRONOS_SUPPORT_INT64 is 1 if 64 bit integers are supported; otherwise 0.
 *    KHRONOS_SUPPORT_FLOAT is 1 if floats are supported; otherwise 0.
 *
 * Calling convention macros defined in this file:
 *    KHRONOS_APICALL
 *    KHRONOS_APIENTRY
 *    KHRONOS_APIATTRIBUTES
 *
 * These may be used in function prototypes as:
 *
 *      KHRONOS_APICALL void KHRONOS_APIENTRY funcname(
 *                                  int arg1,
 *                                  int arg2) KHRONOS_APIATTRIBUTES;
 */

/*-------------------------------------------------------------------------
 * Definition of KHRONOS_APICALL
 *-------------------------------------------------------------------------
 * This precedes the return type of the function in the function prototype.
 */
#if defined(_WIN32) && !defined(__SCITECH_SNAP__)
#   define KHRONOS_APICALL __declspec(dllimport)
#elif defined (__SYMBIAN32__)
#   define KHRONOS_APICALL IMPORT_C
#elif defined(__ANDROID__)
#   define KHRONOS_APICALL __attribute__((visibility("default")))
#else
#   define KHRONOS_APICALL
#endif

/*-------------------------------------------------------------------------
 * Definition of KHRONOS_APIENTRY
 *-------------------------------------------------------------------------
 * This follows the return type of the function  and precedes the function
 * name in the function prototype.
 */
#if defined(_WIN32) && !defined(_WIN32_WCE) && !defined(__SCITECH_SNAP__)
    /* Win32 but not WinCE */
#   define KHRONOS_APIENTRY __stdcall
#else
#   define KHRONOS_APIENTRY
#endif

/*-------------------------------------------------------------------------
 * Definition of KHRONOS_APIATTRIBUTES
 *-------------------------------------------------------------------------
 * This follows the closing parenthesis of the function prototype arguments.
 */
#if defined (__ARMCC_2__)
#define KHRONOS_APIATTRIBUTES __softfp
#else
#define KHRONOS_APIATTRIBUTES
#endif

/*-------------------------------------------------------------------------
 * basic type definitions
 *-----------------------------------------------------------------------*/
#if (defined(__STDC_VERSION__) && __STDC_VERSION__ >= 199901L) || defined(__GNUC__) || defined(__SCO__) || defined(__USLC__)


/*
 * Using <stdint.h>
 */
#include <stdint.h>
typedef int32_t                 khronos_int32_t;
typedef uint32_t                khronos_uint32_t;
typedef int64_t                 khronos_int64_t;
typedef uint64_t                khronos_uint64_t;
#define KHRONOS_SUPPORT_INT64   1
#define KHRONOS_SUPPORT_FLOAT   1

#elif defined(__VMS ) || defined(__sgi)

/*
 * Using <inttypes.h>
 */
#include <inttypes.h>
typedef int32_t                 khronos_int32_t;
typedef uint32_t                khronos_uint32_t;
typedef int64_t                 khronos_int64_t;
typedef uint64_t                khronos_uint64_t;
#define KHRONOS_SUPPORT_INT64   1
#define KHRONOS_SUPPORT_FLOAT   1

#elif defined(_WIN32) && !defined(__SCITECH_SNAP__)

/*
 * Win32
 */
typedef __int32                 khronos_int32_t;
typedef unsigned __int32        khronos_uint32_t;
typedef __int64                 khronos_int64_t;
typedef unsigned __int64        khronos_uint64_t;
#define KHRONOS_SUPPORT_INT64   1
#define KHRONOS_SUPPORT_FLOAT   1

#elif defined(__sun__) || defined(__digital__)

/*
 * Sun or Digital
 */
typedef int                     khronos_int32_t;
typedef unsigned int            khronos_uint32_t;
#if defined(__arch64__) || defined(_LP64)
typedef long int                khronos_int64_t;
typedef unsigned long int       khronos_uint64_t;
#else
typedef long long int           khronos_int64_t;
typedef unsigned long long int  khronos_uint64_t;
#endif /* __arch64__ */
#define KHRONOS_SUPPORT_INT64   1
#define KHRONOS_SUPPORT_FLOAT   1

#elif 0

/*
 * Hypothetical platform with no float or int64 support
 */
typedef int                     khronos_int32_t;
typedef unsigned int            khronos_uint32_t;
#define KHRONOS_SUPPORT_INT64   0
#define KHRONOS_SUPPORT_FLOAT   0

#else

/*
 * Generic fallback
 */
#include <stdint.h>
typedef int32_t                 khronos_int32_t;
typedef uint32_t                khronos_uint32_t;
typedef int64_t                 khronos_int64_t;
typedef uint64_t                khronos_uint64_t;
#define KHRONOS_SUPPORT_INT64   1
#define KHRONOS_SUPPORT_FLOAT   1

#endif


/*
 * Types that are (so far) the same on all platforms
 */
typedef signed   char          khronos_int8_t;
typedef unsigned char          khronos_uint8_t;
typedef signed   short int     khronos_int16_t;
typedef unsigned short int     khronos_uint16_t;

/*
 * Types that differ between LLP64 and LP64 architectures - in LLP64,
 * pointers are 64 bits, but 'long' is still 32 bits. Win64 appears
 * to be the only LLP64 architecture in current use.
 */
#ifdef _WIN64
typedef signed   long long int khronos_intptr_t;
typedef unsigned long long int khronos_uintptr_t;
typedef signed   long long int khronos_ssize_t;
typedef unsigned long long int khronos_usize_t;
#else
typedef signed   long  int     khronos_intptr_t;
typedef unsigned long  int     khronos_uintptr_t;
typedef signed   long  int     khronos_ssize_t;
typedef unsigned long  int     khronos_usize_t;
#endif

#if KHRONOS_SUPPORT_FLOAT
/*
 * Float type
 */
typedef          float         khronos_float_t;
#endif

#if KHRONOS_SUPPORT_INT64
/* Time types
 *
 * These types can be used to represent a time interval in nanoseconds or
 * an absolute Unadjusted System Time.  Unadjusted System Time is the number
 * of nanoseconds since some arbitrary system event (e.g. since the last
 * time the system booted).  The Unadjusted System Time is an unsigned
 * 64 bit value that wraps back to 0 every 584 years.  Time intervals
 * may be either signed or unsigned.
 */
typedef khronos_uint64_t       khronos_utime_nanoseconds_t;
typedef khronos_int64_t        khronos_stime_nanoseconds_t;
#endif

/*
 * Dummy value used to pad enum types to 32 bits.
 */
#ifndef KHRONOS_MAX_ENUM
#define KHRONOS_MAX_ENUM 0x7FFFFFFF
#endif

/*
 * Enumerated boolean type
 *
 * Values other than zero should be considered to be true.  Therefore
 * comparisons should not be made against KHRONOS_TRUE.
 */
typedef enum {
    KHRONOS_FALSE = 0,
    KHRONOS_TRUE  = 1,
    KHRONOS_BOOLEAN_ENUM_FORCE_SIZE = KHRONOS_MAX_ENUM
} khronos_boolean_enum_t;

#endif /* __khrplatform_h_ */

/*******************************************************************************
 * END OF KHR/khrplatform.h SECTION
 ******************************************************************************/


#if defined(__glu_h__)
#error "GL/glu.h cannot be included before TunisGL.h"
#endif

#if defined(__gl_h_)
#error "GL/gl.h cannot be included before TunisGL.h"
#endif

#if defined(__gl2_h_)
#error "GL/gl2.h cannot be included before TunisGL.h"
#endif

#if defined(__glcorearb_h_)
#error "GL/glcorearb.h cannot be included before TunisGL.h"
#endif

#if defined(__gl20_h_)
#error "GLES2/gl2.h cannot be included before TunisGL.h"
#endif

#if defined(__gl_es20_h_)
#error "OpenGLES/ES2/gl.h cannot be included before TunisGL.h"
#endif

#if defined(__gl30_h_)
#error "GLES3/gl3.h cannot be included before TunisGL.h"
#endif

#if defined(__gl_es30_h_)
#error "OpenGLES/ES3/gl.h cannot be included before TunisGL.h"
#endif

#if defined(__gl31_h_)
#error "GLES3/gl31.h cannot be included before TunisGL.h"
#endif

#if defined(__gl32_h_)
#error "GLES3/gl32.h cannot be included before TunisGL.h"
#endif

#if defined(__glext_h_)
#error "GL/glext.h cannot be included before TunisGL.h"
#endif

#if defined(__gl2ext_h_)
#error "GL/glext.h cannot be included before TunisGL.h"
#endif

#if defined(__gl_es20ext_h_)
#error "OpenGLES/ES2/glext.h cannot be included before TunisGL.h"
#endif

#if defined(__gl_es30ext_h_)
#error "OpenGLES/ES3/glext.h cannot be included before TunisGL.h"
#endif

#if defined(__gltypes_h_)
#error "gltypes.h cannot be included before TunisGL.h"
#endif

#define __gl_h_ 1
#define __gl2_h_ 1
#define __glcorearb_h_ 1
#define __gl20_h_ 1
#define __gl_es20_h_ 1
#define __gl30_h_ 1
#define __gl_es30_h_ 1
#define __gl31_h_ 1
#define __gl32_h_ 1
#define __glext_h_ 1
#define __gl2ext_h_ 1
#define __gl_es20ext_h_ 1
#define __gl_es30ext_h_ 1
#define __gltypes_h_ 1

#if defined(_WIN32) && !defined(__CYGWIN__)
    #if !defined(WIN32_LEAN_AND_MEAN)
        #define WIN32_LEAN_AND_MEAN 1
        #include <Windows.h>
        #undef WIN32_LEAN_AND_MEAN
    #else
        #include <Windows.h>
    #endif
#endif

#if !defined(TUNIS_FORCE_INLINE)
    #if defined(_MSC_VER)
        #define TUNIS_FORCE_INLINE __forceinline
    #elif ( (defined(__GNUC__) && (__GNUC__ >= 4) ) || defined(__clang__) )
        #define TUNIS_FORCE_INLINE __attribute__((always_inline)) __inline__
    #else
        #define TUNIS_FORCE_INLINE inline
    #endif
#endif

/* GL and GL ES Definitions */
#define GL_NEXT_BUFFER_NV -2
#define GL_SKIP_COMPONENTS4_NV -3
#define GL_SKIP_COMPONENTS3_NV -4
#define GL_SKIP_COMPONENTS2_NV -5
#define GL_SKIP_COMPONENTS1_NV -6
#define GL_FALSE 0
#define GL_LAYOUT_DEFAULT_INTEL 0
#define GL_NONE 0
#define GL_NONE_OES 0
#define GL_NO_ERROR 0
#define GL_ZERO 0
#define GL_KTX_FRONT_REGION 0x0
#define GL_CLOSE_PATH_NV 0x00
#define GL_POINTS 0x0000
#define GL_TERMINATE_SEQUENCE_COMMAND_NV 0x0000
#define GL_PERFQUERY_SINGLE_CONTEXT_INTEL 0x00000000
#define GL_2X_BIT_ATI 0x00000001
#define GL_CLIENT_PIXEL_STORE_BIT 0x00000001
#define GL_COLOR_BUFFER_BIT0_QCOM 0x00000001
#define GL_CONTEXT_CORE_PROFILE_BIT 0x00000001
#define GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT 0x00000001
#define GL_CURRENT_BIT 0x00000001
#define GL_FOVEATION_ENABLE_BIT_QCOM 0x00000001
#define GL_PERFQUERY_GLOBAL_CONTEXT_INTEL 0x00000001
#define GL_QUERY_DEPTH_PASS_EVENT_BIT_AMD 0x00000001
#define GL_RED_BIT_ATI 0x00000001
#define GL_SYNC_FLUSH_COMMANDS_BIT 0x00000001
#define GL_SYNC_FLUSH_COMMANDS_BIT_APPLE 0x00000001
#define GL_TEXTURE_DEFORMATION_BIT_SGIX 0x00000001
#define GL_TEXTURE_STORAGE_SPARSE_BIT_AMD 0x00000001
#define GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT 0x00000001
#define GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT_EXT 0x00000001
#define GL_VERTEX_SHADER_BIT 0x00000001
#define GL_VERTEX_SHADER_BIT_EXT 0x00000001
#define GL_4X_BIT_ATI 0x00000002
#define GL_CLIENT_VERTEX_ARRAY_BIT 0x00000002
#define GL_COLOR_BUFFER_BIT1_QCOM 0x00000002
#define GL_COMP_BIT_ATI 0x00000002
#define GL_CONTEXT_COMPATIBILITY_PROFILE_BIT 0x00000002
#define GL_CONTEXT_FLAG_DEBUG_BIT 0x00000002
#define GL_CONTEXT_FLAG_DEBUG_BIT_KHR 0x00000002
#define GL_ELEMENT_ARRAY_BARRIER_BIT 0x00000002
#define GL_ELEMENT_ARRAY_BARRIER_BIT_EXT 0x00000002
#define GL_FOVEATION_SCALED_BIN_METHOD_BIT_QCOM 0x00000002
#define GL_FRAGMENT_SHADER_BIT 0x00000002
#define GL_FRAGMENT_SHADER_BIT_EXT 0x00000002
#define GL_GEOMETRY_DEFORMATION_BIT_SGIX 0x00000002
#define GL_GREEN_BIT_ATI 0x00000002
#define GL_POINT_BIT 0x00000002
#define GL_QUERY_DEPTH_FAIL_EVENT_BIT_AMD 0x00000002
#define GL_8X_BIT_ATI 0x00000004
#define GL_BLUE_BIT_ATI 0x00000004
#define GL_COLOR_BUFFER_BIT2_QCOM 0x00000004
#define GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT 0x00000004
#define GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT_ARB 0x00000004
#define GL_FOVEATION_SUBSAMPLED_LAYOUT_METHOD_BIT_QCOM 0x00000004
#define GL_GEOMETRY_SHADER_BIT 0x00000004
#define GL_GEOMETRY_SHADER_BIT_EXT 0x00000004
#define GL_GEOMETRY_SHADER_BIT_OES 0x00000004
#define GL_LINE_BIT 0x00000004
#define GL_NEGATE_BIT_ATI 0x00000004
#define GL_QUERY_STENCIL_FAIL_EVENT_BIT_AMD 0x00000004
#define GL_UNIFORM_BARRIER_BIT 0x00000004
#define GL_UNIFORM_BARRIER_BIT_EXT 0x00000004
#define GL_VERTEX23_BIT_PGI 0x00000004
#define GL_BIAS_BIT_ATI 0x00000008
#define GL_COLOR_BUFFER_BIT3_QCOM 0x00000008
#define GL_CONTEXT_FLAG_NO_ERROR_BIT 0x00000008
#define GL_CONTEXT_FLAG_NO_ERROR_BIT_KHR 0x00000008
#define GL_HALF_BIT_ATI 0x00000008
#define GL_POLYGON_BIT 0x00000008
#define GL_QUERY_DEPTH_BOUNDS_FAIL_EVENT_BIT_AMD 0x00000008
#define GL_TESS_CONTROL_SHADER_BIT 0x00000008
#define GL_TESS_CONTROL_SHADER_BIT_EXT 0x00000008
#define GL_TESS_CONTROL_SHADER_BIT_OES 0x00000008
#define GL_TEXTURE_FETCH_BARRIER_BIT 0x00000008
#define GL_TEXTURE_FETCH_BARRIER_BIT_EXT 0x00000008
#define GL_VERTEX4_BIT_PGI 0x00000008
#define GL_COLOR_BUFFER_BIT4_QCOM 0x00000010
#define GL_CONTEXT_FLAG_PROTECTED_CONTENT_BIT_EXT 0x00000010
#define GL_POLYGON_STIPPLE_BIT 0x00000010
#define GL_QUARTER_BIT_ATI 0x00000010
#define GL_SHADER_GLOBAL_ACCESS_BARRIER_BIT_NV 0x00000010
#define GL_TESS_EVALUATION_SHADER_BIT 0x00000010
#define GL_TESS_EVALUATION_SHADER_BIT_EXT 0x00000010
#define GL_TESS_EVALUATION_SHADER_BIT_OES 0x00000010
#define GL_COLOR_BUFFER_BIT5_QCOM 0x00000020
#define GL_COMPUTE_SHADER_BIT 0x00000020
#define GL_EIGHTH_BIT_ATI 0x00000020
#define GL_PIXEL_MODE_BIT 0x00000020
#define GL_SHADER_IMAGE_ACCESS_BARRIER_BIT 0x00000020
#define GL_SHADER_IMAGE_ACCESS_BARRIER_BIT_EXT 0x00000020
#define GL_COLOR_BUFFER_BIT6_QCOM 0x00000040
#define GL_COMMAND_BARRIER_BIT 0x00000040
#define GL_COMMAND_BARRIER_BIT_EXT 0x00000040
#define GL_LIGHTING_BIT 0x00000040
#define GL_MESH_SHADER_BIT_NV 0x00000040
#define GL_SATURATE_BIT_ATI 0x00000040
#define GL_COLOR_BUFFER_BIT7_QCOM 0x00000080
#define GL_FOG_BIT 0x00000080
#define GL_PIXEL_BUFFER_BARRIER_BIT 0x00000080
#define GL_PIXEL_BUFFER_BARRIER_BIT_EXT 0x00000080
#define GL_TASK_SHADER_BIT_NV 0x00000080
#define GL_DEPTH_BUFFER_BIT 0x00000100
#define GL_DEPTH_BUFFER_BIT0_QCOM 0x00000100
#define GL_TEXTURE_UPDATE_BARRIER_BIT 0x00000100
#define GL_TEXTURE_UPDATE_BARRIER_BIT_EXT 0x00000100
#define GL_ACCUM_BUFFER_BIT 0x00000200
#define GL_BUFFER_UPDATE_BARRIER_BIT 0x00000200
#define GL_BUFFER_UPDATE_BARRIER_BIT_EXT 0x00000200
#define GL_DEPTH_BUFFER_BIT1_QCOM 0x00000200
#define GL_DEPTH_BUFFER_BIT2_QCOM 0x00000400
#define GL_FRAMEBUFFER_BARRIER_BIT 0x00000400
#define GL_FRAMEBUFFER_BARRIER_BIT_EXT 0x00000400
#define GL_STENCIL_BUFFER_BIT 0x00000400
#define GL_DEPTH_BUFFER_BIT3_QCOM 0x00000800
#define GL_TRANSFORM_FEEDBACK_BARRIER_BIT 0x00000800
#define GL_TRANSFORM_FEEDBACK_BARRIER_BIT_EXT 0x00000800
#define GL_VIEWPORT_BIT 0x00000800
#define GL_ATOMIC_COUNTER_BARRIER_BIT 0x00001000
#define GL_ATOMIC_COUNTER_BARRIER_BIT_EXT 0x00001000
#define GL_DEPTH_BUFFER_BIT4_QCOM 0x00001000
#define GL_TRANSFORM_BIT 0x00001000
#define GL_DEPTH_BUFFER_BIT5_QCOM 0x00002000
#define GL_ENABLE_BIT 0x00002000
#define GL_SHADER_STORAGE_BARRIER_BIT 0x00002000
#define GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT 0x00004000
#define GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT_EXT 0x00004000
#define GL_COLOR_BUFFER_BIT 0x00004000
#define GL_DEPTH_BUFFER_BIT6_QCOM 0x00004000
#define GL_COVERAGE_BUFFER_BIT_NV 0x00008000
#define GL_DEPTH_BUFFER_BIT7_QCOM 0x00008000
#define GL_HINT_BIT 0x00008000
#define GL_QUERY_BUFFER_BARRIER_BIT 0x00008000
#define GL_LINES 0x0001
#define GL_MAP_READ_BIT 0x0001
#define GL_MAP_READ_BIT_EXT 0x0001
#define GL_NOP_COMMAND_NV 0x0001
#define GL_RESTART_SUN 0x0001
#define GL_TRACE_OPERATIONS_BIT_MESA 0x0001
#define GL_COLOR3_BIT_PGI 0x00010000
#define GL_EVAL_BIT 0x00010000
#define GL_FONT_X_MIN_BOUNDS_BIT_NV 0x00010000
#define GL_STENCIL_BUFFER_BIT0_QCOM 0x00010000
#define GL_DRAW_ELEMENTS_COMMAND_NV 0x0002
#define GL_LINE_LOOP 0x0002
#define GL_MAP_WRITE_BIT 0x0002
#define GL_MAP_WRITE_BIT_EXT 0x0002
#define GL_REPLACE_MIDDLE_SUN 0x0002
#define GL_TRACE_PRIMITIVES_BIT_MESA 0x0002
#define GL_COLOR4_BIT_PGI 0x00020000
#define GL_FONT_Y_MIN_BOUNDS_BIT_NV 0x00020000
#define GL_LIST_BIT 0x00020000
#define GL_STENCIL_BUFFER_BIT1_QCOM 0x00020000
#define GL_DRAW_ARRAYS_COMMAND_NV 0x0003
#define GL_LINE_STRIP 0x0003
#define GL_REPLACE_OLDEST_SUN 0x0003
#define GL_DRAW_ELEMENTS_STRIP_COMMAND_NV 0x0004
#define GL_MAP_INVALIDATE_RANGE_BIT 0x0004
#define GL_MAP_INVALIDATE_RANGE_BIT_EXT 0x0004
#define GL_TRACE_ARRAYS_BIT_MESA 0x0004
#define GL_TRIANGLES 0x0004
#define GL_EDGEFLAG_BIT_PGI 0x00040000
#define GL_FONT_X_MAX_BOUNDS_BIT_NV 0x00040000
#define GL_STENCIL_BUFFER_BIT2_QCOM 0x00040000
#define GL_TEXTURE_BIT 0x00040000
#define GL_DRAW_ARRAYS_STRIP_COMMAND_NV 0x0005
#define GL_TRIANGLE_STRIP 0x0005
#define GL_DRAW_ELEMENTS_INSTANCED_COMMAND_NV 0x0006
#define GL_TRIANGLE_FAN 0x0006
#define GL_DRAW_ARRAYS_INSTANCED_COMMAND_NV 0x0007
#define GL_QUADS 0x0007
#define GL_QUADS_EXT 0x0007
#define GL_QUADS_OES 0x0007
#define GL_ELEMENT_ADDRESS_COMMAND_NV 0x0008
#define GL_MAP_INVALIDATE_BUFFER_BIT 0x0008
#define GL_MAP_INVALIDATE_BUFFER_BIT_EXT 0x0008
#define GL_QUAD_STRIP 0x0008
#define GL_TRACE_TEXTURES_BIT_MESA 0x0008
#define GL_FONT_Y_MAX_BOUNDS_BIT_NV 0x00080000
#define GL_INDEX_BIT_PGI 0x00080000
#define GL_SCISSOR_BIT 0x00080000
#define GL_STENCIL_BUFFER_BIT3_QCOM 0x00080000
#define GL_ATTRIBUTE_ADDRESS_COMMAND_NV 0x0009
#define GL_POLYGON 0x0009
#define GL_LINES_ADJACENCY 0x000A
#define GL_LINES_ADJACENCY_ARB 0x000A
#define GL_LINES_ADJACENCY_EXT 0x000A
#define GL_LINES_ADJACENCY_OES 0x000A
#define GL_UNIFORM_ADDRESS_COMMAND_NV 0x000A
#define GL_BLEND_COLOR_COMMAND_NV 0x000B
#define GL_LINE_STRIP_ADJACENCY 0x000B
#define GL_LINE_STRIP_ADJACENCY_ARB 0x000B
#define GL_LINE_STRIP_ADJACENCY_EXT 0x000B
#define GL_LINE_STRIP_ADJACENCY_OES 0x000B
#define GL_STENCIL_REF_COMMAND_NV 0x000C
#define GL_TRIANGLES_ADJACENCY 0x000C
#define GL_TRIANGLES_ADJACENCY_ARB 0x000C
#define GL_TRIANGLES_ADJACENCY_EXT 0x000C
#define GL_TRIANGLES_ADJACENCY_OES 0x000C
#define GL_LINE_WIDTH_COMMAND_NV 0x000D
#define GL_TRIANGLE_STRIP_ADJACENCY 0x000D
#define GL_TRIANGLE_STRIP_ADJACENCY_ARB 0x000D
#define GL_TRIANGLE_STRIP_ADJACENCY_EXT 0x000D
#define GL_TRIANGLE_STRIP_ADJACENCY_OES 0x000D
#define GL_PATCHES 0x000E
#define GL_PATCHES_EXT 0x000E
#define GL_PATCHES_OES 0x000E
#define GL_POLYGON_OFFSET_COMMAND_NV 0x000E
#define GL_ALPHA_REF_COMMAND_NV 0x000F
#define GL_MAP_FLUSH_EXPLICIT_BIT 0x0010
#define GL_MAP_FLUSH_EXPLICIT_BIT_EXT 0x0010
#define GL_TRACE_PIXELS_BIT_MESA 0x0010
#define GL_VIEWPORT_COMMAND_NV 0x0010
#define GL_FONT_UNITS_PER_EM_BIT_NV 0x00100000
#define GL_MAT_AMBIENT_BIT_PGI 0x00100000
#define GL_STENCIL_BUFFER_BIT4_QCOM 0x00100000
#define GL_SCISSOR_COMMAND_NV 0x0011
#define GL_FRONT_FACE_COMMAND_NV 0x0012
#define GL_MAP_UNSYNCHRONIZED_BIT 0x0020
#define GL_MAP_UNSYNCHRONIZED_BIT_EXT 0x0020
#define GL_TRACE_ERRORS_BIT_MESA 0x0020
#define GL_FONT_ASCENDER_BIT_NV 0x00200000
#define GL_MAT_AMBIENT_AND_DIFFUSE_BIT_PGI 0x00200000
#define GL_STENCIL_BUFFER_BIT5_QCOM 0x00200000
#define GL_MAP_PERSISTENT_BIT 0x0040
#define GL_MAP_PERSISTENT_BIT_EXT 0x0040
#define GL_FONT_DESCENDER_BIT_NV 0x00400000
#define GL_MAT_DIFFUSE_BIT_PGI 0x00400000
#define GL_STENCIL_BUFFER_BIT6_QCOM 0x00400000
#define GL_MAP_COHERENT_BIT 0x0080
#define GL_MAP_COHERENT_BIT_EXT 0x0080
#define GL_FONT_HEIGHT_BIT_NV 0x00800000
#define GL_MAT_EMISSION_BIT_PGI 0x00800000
#define GL_STENCIL_BUFFER_BIT7_QCOM 0x00800000
#define GL_BOLD_BIT_NV 0x01
#define GL_GLYPH_WIDTH_BIT_NV 0x01
#define GL_ACCUM 0x0100
#define GL_DYNAMIC_STORAGE_BIT 0x0100
#define GL_DYNAMIC_STORAGE_BIT_EXT 0x0100
#define GL_FONT_MAX_ADVANCE_WIDTH_BIT_NV 0x01000000
#define GL_MAT_COLOR_INDEXES_BIT_PGI 0x01000000
#define GL_MULTISAMPLE_BUFFER_BIT0_QCOM 0x01000000
#define GL_LOAD 0x0101
#define GL_RETURN 0x0102
#define GL_MULT 0x0103
#define GL_ADD 0x0104
#define GL_GLYPH_HEIGHT_BIT_NV 0x02
#define GL_ITALIC_BIT_NV 0x02
#define GL_MOVE_TO_NV 0x02
#define GL_CLIENT_STORAGE_BIT 0x0200
#define GL_CLIENT_STORAGE_BIT_EXT 0x0200
#define GL_NEVER 0x0200
#define GL_FONT_MAX_ADVANCE_HEIGHT_BIT_NV 0x02000000
#define GL_MAT_SHININESS_BIT_PGI 0x02000000
#define GL_MULTISAMPLE_BUFFER_BIT1_QCOM 0x02000000
#define GL_LESS 0x0201
#define GL_EQUAL 0x0202
#define GL_LEQUAL 0x0203
#define GL_GREATER 0x0204
#define GL_NOTEQUAL 0x0205
#define GL_GEQUAL 0x0206
#define GL_ALWAYS 0x0207
#define GL_RELATIVE_MOVE_TO_NV 0x03
#define GL_SRC_COLOR 0x0300
#define GL_ONE_MINUS_SRC_COLOR 0x0301
#define GL_SRC_ALPHA 0x0302
#define GL_ONE_MINUS_SRC_ALPHA 0x0303
#define GL_DST_ALPHA 0x0304
#define GL_ONE_MINUS_DST_ALPHA 0x0305
#define GL_DST_COLOR 0x0306
#define GL_ONE_MINUS_DST_COLOR 0x0307
#define GL_SRC_ALPHA_SATURATE 0x0308
#define GL_SRC_ALPHA_SATURATE_EXT 0x0308
#define GL_GLYPH_HORIZONTAL_BEARING_X_BIT_NV 0x04
#define GL_LINE_TO_NV 0x04
#define GL_FRONT_LEFT 0x0400
#define GL_SPARSE_STORAGE_BIT_ARB 0x0400
#define GL_FONT_UNDERLINE_POSITION_BIT_NV 0x04000000
#define GL_MAT_SPECULAR_BIT_PGI 0x04000000
#define GL_MULTISAMPLE_BUFFER_BIT2_QCOM 0x04000000
#define GL_FRONT_RIGHT 0x0401
#define GL_BACK_LEFT 0x0402
#define GL_BACK_RIGHT 0x0403
#define GL_FRONT 0x0404
#define GL_BACK 0x0405
#define GL_LEFT 0x0406
#define GL_RIGHT 0x0407
#define GL_FRONT_AND_BACK 0x0408
#define GL_AUX0 0x0409
#define GL_AUX1 0x040A
#define GL_AUX2 0x040B
#define GL_AUX3 0x040C
#define GL_RELATIVE_LINE_TO_NV 0x05
#define GL_INVALID_ENUM 0x0500
#define GL_INVALID_VALUE 0x0501
#define GL_INVALID_OPERATION 0x0502
#define GL_STACK_OVERFLOW 0x0503
#define GL_STACK_OVERFLOW_KHR 0x0503
#define GL_STACK_UNDERFLOW 0x0504
#define GL_STACK_UNDERFLOW_KHR 0x0504
#define GL_OUT_OF_MEMORY 0x0505
#define GL_INVALID_FRAMEBUFFER_OPERATION 0x0506
#define GL_INVALID_FRAMEBUFFER_OPERATION_EXT 0x0506
#define GL_INVALID_FRAMEBUFFER_OPERATION_OES 0x0506
#define GL_CONTEXT_LOST 0x0507
#define GL_CONTEXT_LOST_KHR 0x0507
#define GL_HORIZONTAL_LINE_TO_NV 0x06
#define GL_2D 0x0600
#define GL_3D 0x0601
#define GL_3D_COLOR 0x0602
#define GL_3D_COLOR_TEXTURE 0x0603
#define GL_4D_COLOR_TEXTURE 0x0604
#define GL_RELATIVE_HORIZONTAL_LINE_TO_NV 0x07
#define GL_PASS_THROUGH_TOKEN 0x0700
#define GL_POINT_TOKEN 0x0701
#define GL_LINE_TOKEN 0x0702
#define GL_POLYGON_TOKEN 0x0703
#define GL_BITMAP_TOKEN 0x0704
#define GL_DRAW_PIXEL_TOKEN 0x0705
#define GL_COPY_PIXEL_TOKEN 0x0706
#define GL_LINE_RESET_TOKEN 0x0707
#define GL_GLYPH_HORIZONTAL_BEARING_Y_BIT_NV 0x08
#define GL_VERTICAL_LINE_TO_NV 0x08
#define GL_EXP 0x0800
#define GL_LGPU_SEPARATE_STORAGE_BIT_NVX 0x0800
#define GL_PER_GPU_STORAGE_BIT_NV 0x0800
#define GL_FONT_UNDERLINE_THICKNESS_BIT_NV 0x08000000
#define GL_MULTISAMPLE_BUFFER_BIT3_QCOM 0x08000000
#define GL_NORMAL_BIT_PGI 0x08000000
#define GL_EXP2 0x0801
#define GL_RELATIVE_VERTICAL_LINE_TO_NV 0x09
#define GL_CW 0x0900
#define GL_CCW 0x0901
#define GL_QUADRATIC_CURVE_TO_NV 0x0A
#define GL_COEFF 0x0A00
#define GL_ORDER 0x0A01
#define GL_DOMAIN 0x0A02
#define GL_RELATIVE_QUADRATIC_CURVE_TO_NV 0x0B
#define GL_CURRENT_COLOR 0x0B00
#define GL_CURRENT_INDEX 0x0B01
#define GL_CURRENT_NORMAL 0x0B02
#define GL_CURRENT_TEXTURE_COORDS 0x0B03
#define GL_CURRENT_RASTER_COLOR 0x0B04
#define GL_CURRENT_RASTER_INDEX 0x0B05
#define GL_CURRENT_RASTER_TEXTURE_COORDS 0x0B06
#define GL_CURRENT_RASTER_POSITION 0x0B07
#define GL_CURRENT_RASTER_POSITION_VALID 0x0B08
#define GL_CURRENT_RASTER_DISTANCE 0x0B09
#define GL_POINT_SMOOTH 0x0B10
#define GL_POINT_SIZE 0x0B11
#define GL_POINT_SIZE_RANGE 0x0B12
#define GL_SMOOTH_POINT_SIZE_RANGE 0x0B12
#define GL_POINT_SIZE_GRANULARITY 0x0B13
#define GL_SMOOTH_POINT_SIZE_GRANULARITY 0x0B13
#define GL_LINE_SMOOTH 0x0B20
#define GL_LINE_WIDTH 0x0B21
#define GL_LINE_WIDTH_RANGE 0x0B22
#define GL_SMOOTH_LINE_WIDTH_RANGE 0x0B22
#define GL_LINE_WIDTH_GRANULARITY 0x0B23
#define GL_SMOOTH_LINE_WIDTH_GRANULARITY 0x0B23
#define GL_LINE_STIPPLE 0x0B24
#define GL_LINE_STIPPLE_PATTERN 0x0B25
#define GL_LINE_STIPPLE_REPEAT 0x0B26
#define GL_LIST_MODE 0x0B30
#define GL_MAX_LIST_NESTING 0x0B31
#define GL_LIST_BASE 0x0B32
#define GL_LIST_INDEX 0x0B33
#define GL_POLYGON_MODE 0x0B40
#define GL_POLYGON_MODE_NV 0x0B40
#define GL_POLYGON_SMOOTH 0x0B41
#define GL_POLYGON_STIPPLE 0x0B42
#define GL_EDGE_FLAG 0x0B43
#define GL_CULL_FACE 0x0B44
#define GL_CULL_FACE_MODE 0x0B45
#define GL_FRONT_FACE 0x0B46
#define GL_LIGHTING 0x0B50
#define GL_LIGHT_MODEL_LOCAL_VIEWER 0x0B51
#define GL_LIGHT_MODEL_TWO_SIDE 0x0B52
#define GL_LIGHT_MODEL_AMBIENT 0x0B53
#define GL_SHADE_MODEL 0x0B54
#define GL_COLOR_MATERIAL_FACE 0x0B55
#define GL_COLOR_MATERIAL_PARAMETER 0x0B56
#define GL_COLOR_MATERIAL 0x0B57
#define GL_FOG 0x0B60
#define GL_FOG_INDEX 0x0B61
#define GL_FOG_DENSITY 0x0B62
#define GL_FOG_START 0x0B63
#define GL_FOG_END 0x0B64
#define GL_FOG_MODE 0x0B65
#define GL_FOG_COLOR 0x0B66
#define GL_DEPTH_RANGE 0x0B70
#define GL_DEPTH_TEST 0x0B71
#define GL_DEPTH_WRITEMASK 0x0B72
#define GL_DEPTH_CLEAR_VALUE 0x0B73
#define GL_DEPTH_FUNC 0x0B74
#define GL_ACCUM_CLEAR_VALUE 0x0B80
#define GL_STENCIL_TEST 0x0B90
#define GL_STENCIL_CLEAR_VALUE 0x0B91
#define GL_STENCIL_FUNC 0x0B92
#define GL_STENCIL_VALUE_MASK 0x0B93
#define GL_STENCIL_FAIL 0x0B94
#define GL_STENCIL_PASS_DEPTH_FAIL 0x0B95
#define GL_STENCIL_PASS_DEPTH_PASS 0x0B96
#define GL_STENCIL_REF 0x0B97
#define GL_STENCIL_WRITEMASK 0x0B98
#define GL_MATRIX_MODE 0x0BA0
#define GL_NORMALIZE 0x0BA1
#define GL_VIEWPORT 0x0BA2
#define GL_MODELVIEW0_STACK_DEPTH_EXT 0x0BA3
#define GL_MODELVIEW_STACK_DEPTH 0x0BA3
#define GL_PATH_MODELVIEW_STACK_DEPTH_NV 0x0BA3
#define GL_PATH_PROJECTION_STACK_DEPTH_NV 0x0BA4
#define GL_PROJECTION_STACK_DEPTH 0x0BA4
#define GL_TEXTURE_STACK_DEPTH 0x0BA5
#define GL_MODELVIEW0_MATRIX_EXT 0x0BA6
#define GL_MODELVIEW_MATRIX 0x0BA6
#define GL_PATH_MODELVIEW_MATRIX_NV 0x0BA6
#define GL_PATH_PROJECTION_MATRIX_NV 0x0BA7
#define GL_PROJECTION_MATRIX 0x0BA7
#define GL_TEXTURE_MATRIX 0x0BA8
#define GL_ATTRIB_STACK_DEPTH 0x0BB0
#define GL_CLIENT_ATTRIB_STACK_DEPTH 0x0BB1
#define GL_ALPHA_TEST 0x0BC0
#define GL_ALPHA_TEST_QCOM 0x0BC0
#define GL_ALPHA_TEST_FUNC 0x0BC1
#define GL_ALPHA_TEST_FUNC_QCOM 0x0BC1
#define GL_ALPHA_TEST_REF 0x0BC2
#define GL_ALPHA_TEST_REF_QCOM 0x0BC2
#define GL_DITHER 0x0BD0
#define GL_BLEND_DST 0x0BE0
#define GL_BLEND_SRC 0x0BE1
#define GL_BLEND 0x0BE2
#define GL_LOGIC_OP_MODE 0x0BF0
#define GL_INDEX_LOGIC_OP 0x0BF1
#define GL_LOGIC_OP 0x0BF1
#define GL_COLOR_LOGIC_OP 0x0BF2
#define GL_CUBIC_CURVE_TO_NV 0x0C
#define GL_AUX_BUFFERS 0x0C00
#define GL_DRAW_BUFFER 0x0C01
#define GL_DRAW_BUFFER_EXT 0x0C01
#define GL_READ_BUFFER 0x0C02
#define GL_READ_BUFFER_EXT 0x0C02
#define GL_READ_BUFFER_NV 0x0C02
#define GL_SCISSOR_BOX 0x0C10
#define GL_SCISSOR_TEST 0x0C11
#define GL_INDEX_CLEAR_VALUE 0x0C20
#define GL_INDEX_WRITEMASK 0x0C21
#define GL_COLOR_CLEAR_VALUE 0x0C22
#define GL_COLOR_WRITEMASK 0x0C23
#define GL_INDEX_MODE 0x0C30
#define GL_RGBA_MODE 0x0C31
#define GL_DOUBLEBUFFER 0x0C32
#define GL_STEREO 0x0C33
#define GL_RENDER_MODE 0x0C40
#define GL_PERSPECTIVE_CORRECTION_HINT 0x0C50
#define GL_POINT_SMOOTH_HINT 0x0C51
#define GL_LINE_SMOOTH_HINT 0x0C52
#define GL_POLYGON_SMOOTH_HINT 0x0C53
#define GL_FOG_HINT 0x0C54
#define GL_TEXTURE_GEN_S 0x0C60
#define GL_TEXTURE_GEN_T 0x0C61
#define GL_TEXTURE_GEN_R 0x0C62
#define GL_TEXTURE_GEN_Q 0x0C63
#define GL_PIXEL_MAP_I_TO_I 0x0C70
#define GL_PIXEL_MAP_S_TO_S 0x0C71
#define GL_PIXEL_MAP_I_TO_R 0x0C72
#define GL_PIXEL_MAP_I_TO_G 0x0C73
#define GL_PIXEL_MAP_I_TO_B 0x0C74
#define GL_PIXEL_MAP_I_TO_A 0x0C75
#define GL_PIXEL_MAP_R_TO_R 0x0C76
#define GL_PIXEL_MAP_G_TO_G 0x0C77
#define GL_PIXEL_MAP_B_TO_B 0x0C78
#define GL_PIXEL_MAP_A_TO_A 0x0C79
#define GL_PIXEL_MAP_I_TO_I_SIZE 0x0CB0
#define GL_PIXEL_MAP_S_TO_S_SIZE 0x0CB1
#define GL_PIXEL_MAP_I_TO_R_SIZE 0x0CB2
#define GL_PIXEL_MAP_I_TO_G_SIZE 0x0CB3
#define GL_PIXEL_MAP_I_TO_B_SIZE 0x0CB4
#define GL_PIXEL_MAP_I_TO_A_SIZE 0x0CB5
#define GL_PIXEL_MAP_R_TO_R_SIZE 0x0CB6
#define GL_PIXEL_MAP_G_TO_G_SIZE 0x0CB7
#define GL_PIXEL_MAP_B_TO_B_SIZE 0x0CB8
#define GL_PIXEL_MAP_A_TO_A_SIZE 0x0CB9
#define GL_UNPACK_SWAP_BYTES 0x0CF0
#define GL_UNPACK_LSB_FIRST 0x0CF1
#define GL_UNPACK_ROW_LENGTH 0x0CF2
#define GL_UNPACK_ROW_LENGTH_EXT 0x0CF2
#define GL_UNPACK_SKIP_ROWS 0x0CF3
#define GL_UNPACK_SKIP_ROWS_EXT 0x0CF3
#define GL_UNPACK_SKIP_PIXELS 0x0CF4
#define GL_UNPACK_SKIP_PIXELS_EXT 0x0CF4
#define GL_UNPACK_ALIGNMENT 0x0CF5
#define GL_RELATIVE_CUBIC_CURVE_TO_NV 0x0D
#define GL_PACK_SWAP_BYTES 0x0D00
#define GL_PACK_LSB_FIRST 0x0D01
#define GL_PACK_ROW_LENGTH 0x0D02
#define GL_PACK_SKIP_ROWS 0x0D03
#define GL_PACK_SKIP_PIXELS 0x0D04
#define GL_PACK_ALIGNMENT 0x0D05
#define GL_MAP_COLOR 0x0D10
#define GL_MAP_STENCIL 0x0D11
#define GL_INDEX_SHIFT 0x0D12
#define GL_INDEX_OFFSET 0x0D13
#define GL_RED_SCALE 0x0D14
#define GL_RED_BIAS 0x0D15
#define GL_ZOOM_X 0x0D16
#define GL_ZOOM_Y 0x0D17
#define GL_GREEN_SCALE 0x0D18
#define GL_GREEN_BIAS 0x0D19
#define GL_BLUE_SCALE 0x0D1A
#define GL_BLUE_BIAS 0x0D1B
#define GL_ALPHA_SCALE 0x0D1C
#define GL_ALPHA_BIAS 0x0D1D
#define GL_DEPTH_SCALE 0x0D1E
#define GL_DEPTH_BIAS 0x0D1F
#define GL_MAX_EVAL_ORDER 0x0D30
#define GL_MAX_LIGHTS 0x0D31
#define GL_MAX_CLIP_DISTANCES 0x0D32
#define GL_MAX_CLIP_DISTANCES_APPLE 0x0D32
#define GL_MAX_CLIP_DISTANCES_EXT 0x0D32
#define GL_MAX_CLIP_PLANES 0x0D32
#define GL_MAX_CLIP_PLANES_IMG 0x0D32
#define GL_MAX_TEXTURE_SIZE 0x0D33
#define GL_MAX_PIXEL_MAP_TABLE 0x0D34
#define GL_MAX_ATTRIB_STACK_DEPTH 0x0D35
#define GL_MAX_MODELVIEW_STACK_DEPTH 0x0D36
#define GL_PATH_MAX_MODELVIEW_STACK_DEPTH_NV 0x0D36
#define GL_MAX_NAME_STACK_DEPTH 0x0D37
#define GL_MAX_PROJECTION_STACK_DEPTH 0x0D38
#define GL_PATH_MAX_PROJECTION_STACK_DEPTH_NV 0x0D38
#define GL_MAX_TEXTURE_STACK_DEPTH 0x0D39
#define GL_MAX_VIEWPORT_DIMS 0x0D3A
#define GL_MAX_CLIENT_ATTRIB_STACK_DEPTH 0x0D3B
#define GL_SUBPIXEL_BITS 0x0D50
#define GL_INDEX_BITS 0x0D51
#define GL_RED_BITS 0x0D52
#define GL_GREEN_BITS 0x0D53
#define GL_BLUE_BITS 0x0D54
#define GL_ALPHA_BITS 0x0D55
#define GL_DEPTH_BITS 0x0D56
#define GL_STENCIL_BITS 0x0D57
#define GL_ACCUM_RED_BITS 0x0D58
#define GL_ACCUM_GREEN_BITS 0x0D59
#define GL_ACCUM_BLUE_BITS 0x0D5A
#define GL_ACCUM_ALPHA_BITS 0x0D5B
#define GL_NAME_STACK_DEPTH 0x0D70
#define GL_AUTO_NORMAL 0x0D80
#define GL_MAP1_COLOR_4 0x0D90
#define GL_MAP1_INDEX 0x0D91
#define GL_MAP1_NORMAL 0x0D92
#define GL_MAP1_TEXTURE_COORD_1 0x0D93
#define GL_MAP1_TEXTURE_COORD_2 0x0D94
#define GL_MAP1_TEXTURE_COORD_3 0x0D95
#define GL_MAP1_TEXTURE_COORD_4 0x0D96
#define GL_MAP1_VERTEX_3 0x0D97
#define GL_MAP1_VERTEX_4 0x0D98
#define GL_MAP2_COLOR_4 0x0DB0
#define GL_MAP2_INDEX 0x0DB1
#define GL_MAP2_NORMAL 0x0DB2
#define GL_MAP2_TEXTURE_COORD_1 0x0DB3
#define GL_MAP2_TEXTURE_COORD_2 0x0DB4
#define GL_MAP2_TEXTURE_COORD_3 0x0DB5
#define GL_MAP2_TEXTURE_COORD_4 0x0DB6
#define GL_MAP2_VERTEX_3 0x0DB7
#define GL_MAP2_VERTEX_4 0x0DB8
#define GL_MAP1_GRID_DOMAIN 0x0DD0
#define GL_MAP1_GRID_SEGMENTS 0x0DD1
#define GL_MAP2_GRID_DOMAIN 0x0DD2
#define GL_MAP2_GRID_SEGMENTS 0x0DD3
#define GL_TEXTURE_1D 0x0DE0
#define GL_TEXTURE_2D 0x0DE1
#define GL_FEEDBACK_BUFFER_POINTER 0x0DF0
#define GL_FEEDBACK_BUFFER_SIZE 0x0DF1
#define GL_FEEDBACK_BUFFER_TYPE 0x0DF2
#define GL_SELECTION_BUFFER_POINTER 0x0DF3
#define GL_SELECTION_BUFFER_SIZE 0x0DF4
#define GL_SMOOTH_QUADRATIC_CURVE_TO_NV 0x0E
#define GL_RELATIVE_SMOOTH_QUADRATIC_CURVE_TO_NV 0x0F
#define GL_KTX_BACK_REGION 0x1
#define GL_GLYPH_HORIZONTAL_BEARING_ADVANCE_BIT_NV 0x10
#define GL_SMOOTH_CUBIC_CURVE_TO_NV 0x10
#define GL_GLYPH_HAS_KERNING_BIT_NV 0x100
#define GL_TEXTURE_WIDTH 0x1000
#define GL_FONT_HAS_KERNING_BIT_NV 0x10000000
#define GL_MULTISAMPLE_BUFFER_BIT4_QCOM 0x10000000
#define GL_TEXCOORD1_BIT_PGI 0x10000000
#define GL_TEXTURE_HEIGHT 0x1001
#define GL_TEXTURE_COMPONENTS 0x1003
#define GL_TEXTURE_INTERNAL_FORMAT 0x1003
#define GL_TEXTURE_BORDER_COLOR 0x1004
#define GL_TEXTURE_BORDER_COLOR_EXT 0x1004
#define GL_TEXTURE_BORDER_COLOR_NV 0x1004
#define GL_TEXTURE_BORDER_COLOR_OES 0x1004
#define GL_TEXTURE_BORDER 0x1005
#define GL_TEXTURE_TARGET 0x1006
#define GL_RELATIVE_SMOOTH_CUBIC_CURVE_TO_NV 0x11
#define GL_DONT_CARE 0x1100
#define GL_FASTEST 0x1101
#define GL_NICEST 0x1102
#define GL_SMALL_CCW_ARC_TO_NV 0x12
#define GL_AMBIENT 0x1200
#define GL_DIFFUSE 0x1201
#define GL_SPECULAR 0x1202
#define GL_POSITION 0x1203
#define GL_SPOT_DIRECTION 0x1204
#define GL_SPOT_EXPONENT 0x1205
#define GL_SPOT_CUTOFF 0x1206
#define GL_CONSTANT_ATTENUATION 0x1207
#define GL_LINEAR_ATTENUATION 0x1208
#define GL_QUADRATIC_ATTENUATION 0x1209
#define GL_RELATIVE_SMALL_CCW_ARC_TO_NV 0x13
#define GL_COMPILE 0x1300
#define GL_COMPILE_AND_EXECUTE 0x1301
#define GL_SMALL_CW_ARC_TO_NV 0x14
#define GL_BYTE 0x1400
#define GL_UNSIGNED_BYTE 0x1401
#define GL_SHORT 0x1402
#define GL_UNSIGNED_SHORT 0x1403
#define GL_INT 0x1404
#define GL_UNSIGNED_INT 0x1405
#define GL_FLOAT 0x1406
#define GL_2_BYTES 0x1407
#define GL_2_BYTES_NV 0x1407
#define GL_3_BYTES 0x1408
#define GL_3_BYTES_NV 0x1408
#define GL_4_BYTES 0x1409
#define GL_4_BYTES_NV 0x1409
#define GL_DOUBLE 0x140A
#define GL_DOUBLE_EXT 0x140A
#define GL_HALF_APPLE 0x140B
#define GL_HALF_FLOAT 0x140B
#define GL_HALF_FLOAT_ARB 0x140B
#define GL_HALF_FLOAT_NV 0x140B
#define GL_FIXED 0x140C
#define GL_FIXED_OES 0x140C
#define GL_INT64_ARB 0x140E
#define GL_INT64_NV 0x140E
#define GL_UNSIGNED_INT64_ARB 0x140F
#define GL_UNSIGNED_INT64_NV 0x140F
#define GL_RELATIVE_SMALL_CW_ARC_TO_NV 0x15
#define GL_CLEAR 0x1500
#define GL_AND 0x1501
#define GL_AND_REVERSE 0x1502
#define GL_COPY 0x1503
#define GL_AND_INVERTED 0x1504
#define GL_NOOP 0x1505
#define GL_XOR 0x1506
#define GL_XOR_NV 0x1506
#define GL_OR 0x1507
#define GL_NOR 0x1508
#define GL_EQUIV 0x1509
#define GL_INVERT 0x150A
#define GL_OR_REVERSE 0x150B
#define GL_COPY_INVERTED 0x150C
#define GL_OR_INVERTED 0x150D
#define GL_NAND 0x150E
#define GL_SET 0x150F
#define GL_LARGE_CCW_ARC_TO_NV 0x16
#define GL_EMISSION 0x1600
#define GL_SHININESS 0x1601
#define GL_AMBIENT_AND_DIFFUSE 0x1602
#define GL_COLOR_INDEXES 0x1603
#define GL_RELATIVE_LARGE_CCW_ARC_TO_NV 0x17
#define GL_MODELVIEW 0x1700
#define GL_MODELVIEW0_ARB 0x1700
#define GL_MODELVIEW0_EXT 0x1700
#define GL_PATH_MODELVIEW_NV 0x1700
#define GL_PATH_PROJECTION_NV 0x1701
#define GL_PROJECTION 0x1701
#define GL_TEXTURE 0x1702
#define GL_LARGE_CW_ARC_TO_NV 0x18
#define GL_COLOR 0x1800
#define GL_COLOR_EXT 0x1800
#define GL_DEPTH 0x1801
#define GL_DEPTH_EXT 0x1801
#define GL_STENCIL 0x1802
#define GL_STENCIL_EXT 0x1802
#define GL_RELATIVE_LARGE_CW_ARC_TO_NV 0x19
#define GL_COLOR_INDEX 0x1900
#define GL_STENCIL_INDEX 0x1901
#define GL_STENCIL_INDEX_OES 0x1901
#define GL_DEPTH_COMPONENT 0x1902
#define GL_RED 0x1903
#define GL_RED_EXT 0x1903
#define GL_RED_NV 0x1903
#define GL_GREEN 0x1904
#define GL_GREEN_NV 0x1904
#define GL_BLUE 0x1905
#define GL_BLUE_NV 0x1905
#define GL_ALPHA 0x1906
#define GL_RGB 0x1907
#define GL_RGBA 0x1908
#define GL_LUMINANCE 0x1909
#define GL_LUMINANCE_ALPHA 0x190A
#define GL_RASTER_POSITION_UNCLIPPED_IBM 0x19262
#define GL_CONIC_CURVE_TO_NV 0x1A
#define GL_BITMAP 0x1A00
#define GL_PREFER_DOUBLEBUFFER_HINT_PGI 0x1A1F8
#define GL_CONSERVE_MEMORY_HINT_PGI 0x1A1FD
#define GL_RECLAIM_MEMORY_HINT_PGI 0x1A1FE
#define GL_NATIVE_GRAPHICS_HANDLE_PGI 0x1A202
#define GL_NATIVE_GRAPHICS_BEGIN_HINT_PGI 0x1A203
#define GL_NATIVE_GRAPHICS_END_HINT_PGI 0x1A204
#define GL_ALWAYS_FAST_HINT_PGI 0x1A20C
#define GL_ALWAYS_SOFT_HINT_PGI 0x1A20D
#define GL_ALLOW_DRAW_OBJ_HINT_PGI 0x1A20E
#define GL_ALLOW_DRAW_WIN_HINT_PGI 0x1A20F
#define GL_ALLOW_DRAW_FRG_HINT_PGI 0x1A210
#define GL_ALLOW_DRAW_MEM_HINT_PGI 0x1A211
#define GL_STRICT_DEPTHFUNC_HINT_PGI 0x1A216
#define GL_STRICT_LIGHTING_HINT_PGI 0x1A217
#define GL_STRICT_SCISSOR_HINT_PGI 0x1A218
#define GL_FULL_STIPPLE_HINT_PGI 0x1A219
#define GL_CLIP_NEAR_HINT_PGI 0x1A220
#define GL_CLIP_FAR_HINT_PGI 0x1A221
#define GL_WIDE_LINE_HINT_PGI 0x1A222
#define GL_BACK_NORMALS_HINT_PGI 0x1A223
#define GL_VERTEX_DATA_HINT_PGI 0x1A22A
#define GL_VERTEX_CONSISTENT_HINT_PGI 0x1A22B
#define GL_MATERIAL_SIDE_HINT_PGI 0x1A22C
#define GL_MAX_VERTEX_HINT_PGI 0x1A22D
#define GL_RELATIVE_CONIC_CURVE_TO_NV 0x1B
#define GL_POINT 0x1B00
#define GL_POINT_NV 0x1B00
#define GL_LINE 0x1B01
#define GL_LINE_NV 0x1B01
#define GL_FILL 0x1B02
#define GL_FILL_NV 0x1B02
#define GL_RENDER 0x1C00
#define GL_FEEDBACK 0x1C01
#define GL_SELECT 0x1C02
#define GL_FLAT 0x1D00
#define GL_SMOOTH 0x1D01
#define GL_KEEP 0x1E00
#define GL_REPLACE 0x1E01
#define GL_INCR 0x1E02
#define GL_DECR 0x1E03
#define GL_VENDOR 0x1F00
#define GL_RENDERER 0x1F01
#define GL_VERSION 0x1F02
#define GL_EXTENSIONS 0x1F03
#define GL_KTX_Z_REGION 0x2
#define GL_GLYPH_VERTICAL_BEARING_X_BIT_NV 0x20
#define GL_EXTERNAL_STORAGE_BIT_NVX 0x2000
#define GL_S 0x2000
#define GL_FONT_NUM_GLYPH_INDICES_BIT_NV 0x20000000
#define GL_MULTISAMPLE_BIT 0x20000000
#define GL_MULTISAMPLE_BIT_3DFX 0x20000000
#define GL_MULTISAMPLE_BIT_ARB 0x20000000
#define GL_MULTISAMPLE_BIT_EXT 0x20000000
#define GL_MULTISAMPLE_BUFFER_BIT5_QCOM 0x20000000
#define GL_TEXCOORD2_BIT_PGI 0x20000000
#define GL_T 0x2001
#define GL_R 0x2002
#define GL_Q 0x2003
#define GL_MODULATE 0x2100
#define GL_DECAL 0x2101
#define GL_TEXTURE_ENV_MODE 0x2200
#define GL_TEXTURE_ENV_COLOR 0x2201
#define GL_TEXTURE_ENV 0x2300
#define GL_EYE_LINEAR 0x2400
#define GL_EYE_LINEAR_NV 0x2400
#define GL_OBJECT_LINEAR 0x2401
#define GL_OBJECT_LINEAR_NV 0x2401
#define GL_SPHERE_MAP 0x2402
#define GL_TEXTURE_GEN_MODE 0x2500
#define GL_TEXTURE_GEN_MODE_OES 0x2500
#define GL_OBJECT_PLANE 0x2501
#define GL_EYE_PLANE 0x2502
#define GL_NEAREST 0x2600
#define GL_LINEAR 0x2601
#define GL_NEAREST_MIPMAP_NEAREST 0x2700
#define GL_LINEAR_MIPMAP_NEAREST 0x2701
#define GL_NEAREST_MIPMAP_LINEAR 0x2702
#define GL_LINEAR_MIPMAP_LINEAR 0x2703
#define GL_TEXTURE_MAG_FILTER 0x2800
#define GL_TEXTURE_MIN_FILTER 0x2801
#define GL_TEXTURE_WRAP_S 0x2802
#define GL_TEXTURE_WRAP_T 0x2803
#define GL_CLAMP 0x2900
#define GL_REPEAT 0x2901
#define GL_POLYGON_OFFSET_UNITS 0x2A00
#define GL_POLYGON_OFFSET_POINT 0x2A01
#define GL_POLYGON_OFFSET_POINT_NV 0x2A01
#define GL_POLYGON_OFFSET_LINE 0x2A02
#define GL_POLYGON_OFFSET_LINE_NV 0x2A02
#define GL_R3_G3_B2 0x2A10
#define GL_V2F 0x2A20
#define GL_V3F 0x2A21
#define GL_C4UB_V2F 0x2A22
#define GL_C4UB_V3F 0x2A23
#define GL_C3F_V3F 0x2A24
#define GL_N3F_V3F 0x2A25
#define GL_C4F_N3F_V3F 0x2A26
#define GL_T2F_V3F 0x2A27
#define GL_T4F_V4F 0x2A28
#define GL_T2F_C4UB_V3F 0x2A29
#define GL_T2F_C3F_V3F 0x2A2A
#define GL_T2F_N3F_V3F 0x2A2B
#define GL_T2F_C4F_N3F_V3F 0x2A2C
#define GL_T4F_C4F_N3F_V4F 0x2A2D
#define GL_KTX_STENCIL_REGION 0x3
#define GL_CLIP_DISTANCE0 0x3000
#define GL_CLIP_DISTANCE0_APPLE 0x3000
#define GL_CLIP_DISTANCE0_EXT 0x3000
#define GL_CLIP_PLANE0 0x3000
#define GL_CLIP_PLANE0_IMG 0x3000
#define GL_CLIP_DISTANCE1 0x3001
#define GL_CLIP_DISTANCE1_APPLE 0x3001
#define GL_CLIP_DISTANCE1_EXT 0x3001
#define GL_CLIP_PLANE1 0x3001
#define GL_CLIP_PLANE1_IMG 0x3001
#define GL_CLIP_DISTANCE2 0x3002
#define GL_CLIP_DISTANCE2_APPLE 0x3002
#define GL_CLIP_DISTANCE2_EXT 0x3002
#define GL_CLIP_PLANE2 0x3002
#define GL_CLIP_PLANE2_IMG 0x3002
#define GL_CLIP_DISTANCE3 0x3003
#define GL_CLIP_DISTANCE3_APPLE 0x3003
#define GL_CLIP_DISTANCE3_EXT 0x3003
#define GL_CLIP_PLANE3 0x3003
#define GL_CLIP_PLANE3_IMG 0x3003
#define GL_CLIP_DISTANCE4 0x3004
#define GL_CLIP_DISTANCE4_APPLE 0x3004
#define GL_CLIP_DISTANCE4_EXT 0x3004
#define GL_CLIP_PLANE4 0x3004
#define GL_CLIP_PLANE4_IMG 0x3004
#define GL_CLIP_DISTANCE5 0x3005
#define GL_CLIP_DISTANCE5_APPLE 0x3005
#define GL_CLIP_DISTANCE5_EXT 0x3005
#define GL_CLIP_PLANE5 0x3005
#define GL_CLIP_PLANE5_IMG 0x3005
#define GL_CLIP_DISTANCE6 0x3006
#define GL_CLIP_DISTANCE6_APPLE 0x3006
#define GL_CLIP_DISTANCE6_EXT 0x3006
#define GL_CLIP_DISTANCE7 0x3007
#define GL_CLIP_DISTANCE7_APPLE 0x3007
#define GL_CLIP_DISTANCE7_EXT 0x3007
#define GL_GLYPH_VERTICAL_BEARING_Y_BIT_NV 0x40
#define GL_LIGHT0 0x4000
#define GL_MULTISAMPLE_BUFFER_BIT6_QCOM 0x40000000
#define GL_TEXCOORD3_BIT_PGI 0x40000000
#define GL_LIGHT1 0x4001
#define GL_LIGHT2 0x4002
#define GL_LIGHT3 0x4003
#define GL_LIGHT4 0x4004
#define GL_LIGHT5 0x4005
#define GL_LIGHT6 0x4006
#define GL_LIGHT7 0x4007
#define GL_GLYPH_VERTICAL_BEARING_ADVANCE_BIT_NV 0x80
#define GL_ABGR_EXT 0x8000
#define GL_MULTISAMPLE_BUFFER_BIT7_QCOM 0x80000000
#define GL_TEXCOORD4_BIT_PGI 0x80000000
#define GL_CONSTANT_COLOR 0x8001
#define GL_CONSTANT_COLOR_EXT 0x8001
#define GL_ONE_MINUS_CONSTANT_COLOR 0x8002
#define GL_ONE_MINUS_CONSTANT_COLOR_EXT 0x8002
#define GL_CONSTANT_ALPHA 0x8003
#define GL_CONSTANT_ALPHA_EXT 0x8003
#define GL_ONE_MINUS_CONSTANT_ALPHA 0x8004
#define GL_ONE_MINUS_CONSTANT_ALPHA_EXT 0x8004
#define GL_BLEND_COLOR 0x8005
#define GL_BLEND_COLOR_EXT 0x8005
#define GL_FUNC_ADD 0x8006
#define GL_FUNC_ADD_EXT 0x8006
#define GL_FUNC_ADD_OES 0x8006
#define GL_MIN 0x8007
#define GL_MIN_EXT 0x8007
#define GL_MAX 0x8008
#define GL_MAX_EXT 0x8008
#define GL_BLEND_EQUATION 0x8009
#define GL_BLEND_EQUATION_EXT 0x8009
#define GL_BLEND_EQUATION_OES 0x8009
#define GL_BLEND_EQUATION_RGB 0x8009
#define GL_BLEND_EQUATION_RGB_EXT 0x8009
#define GL_BLEND_EQUATION_RGB_OES 0x8009
#define GL_FUNC_SUBTRACT 0x800A
#define GL_FUNC_SUBTRACT_EXT 0x800A
#define GL_FUNC_SUBTRACT_OES 0x800A
#define GL_FUNC_REVERSE_SUBTRACT 0x800B
#define GL_FUNC_REVERSE_SUBTRACT_EXT 0x800B
#define GL_FUNC_REVERSE_SUBTRACT_OES 0x800B
#define GL_CMYK_EXT 0x800C
#define GL_CMYKA_EXT 0x800D
#define GL_PACK_CMYK_HINT_EXT 0x800E
#define GL_UNPACK_CMYK_HINT_EXT 0x800F
#define GL_CONVOLUTION_1D 0x8010
#define GL_CONVOLUTION_1D_EXT 0x8010
#define GL_CONVOLUTION_2D 0x8011
#define GL_CONVOLUTION_2D_EXT 0x8011
#define GL_SEPARABLE_2D 0x8012
#define GL_SEPARABLE_2D_EXT 0x8012
#define GL_CONVOLUTION_BORDER_MODE 0x8013
#define GL_CONVOLUTION_BORDER_MODE_EXT 0x8013
#define GL_CONVOLUTION_FILTER_SCALE 0x8014
#define GL_CONVOLUTION_FILTER_SCALE_EXT 0x8014
#define GL_CONVOLUTION_FILTER_BIAS 0x8015
#define GL_CONVOLUTION_FILTER_BIAS_EXT 0x8015
#define GL_REDUCE 0x8016
#define GL_REDUCE_EXT 0x8016
#define GL_CONVOLUTION_FORMAT 0x8017
#define GL_CONVOLUTION_FORMAT_EXT 0x8017
#define GL_CONVOLUTION_WIDTH 0x8018
#define GL_CONVOLUTION_WIDTH_EXT 0x8018
#define GL_CONVOLUTION_HEIGHT 0x8019
#define GL_CONVOLUTION_HEIGHT_EXT 0x8019
#define GL_MAX_CONVOLUTION_WIDTH 0x801A
#define GL_MAX_CONVOLUTION_WIDTH_EXT 0x801A
#define GL_MAX_CONVOLUTION_HEIGHT 0x801B
#define GL_MAX_CONVOLUTION_HEIGHT_EXT 0x801B
#define GL_POST_CONVOLUTION_RED_SCALE 0x801C
#define GL_POST_CONVOLUTION_RED_SCALE_EXT 0x801C
#define GL_POST_CONVOLUTION_GREEN_SCALE 0x801D
#define GL_POST_CONVOLUTION_GREEN_SCALE_EXT 0x801D
#define GL_POST_CONVOLUTION_BLUE_SCALE 0x801E
#define GL_POST_CONVOLUTION_BLUE_SCALE_EXT 0x801E
#define GL_POST_CONVOLUTION_ALPHA_SCALE 0x801F
#define GL_POST_CONVOLUTION_ALPHA_SCALE_EXT 0x801F
#define GL_POST_CONVOLUTION_RED_BIAS 0x8020
#define GL_POST_CONVOLUTION_RED_BIAS_EXT 0x8020
#define GL_POST_CONVOLUTION_GREEN_BIAS 0x8021
#define GL_POST_CONVOLUTION_GREEN_BIAS_EXT 0x8021
#define GL_POST_CONVOLUTION_BLUE_BIAS 0x8022
#define GL_POST_CONVOLUTION_BLUE_BIAS_EXT 0x8022
#define GL_POST_CONVOLUTION_ALPHA_BIAS 0x8023
#define GL_POST_CONVOLUTION_ALPHA_BIAS_EXT 0x8023
#define GL_HISTOGRAM 0x8024
#define GL_HISTOGRAM_EXT 0x8024
#define GL_PROXY_HISTOGRAM 0x8025
#define GL_PROXY_HISTOGRAM_EXT 0x8025
#define GL_HISTOGRAM_WIDTH 0x8026
#define GL_HISTOGRAM_WIDTH_EXT 0x8026
#define GL_HISTOGRAM_FORMAT 0x8027
#define GL_HISTOGRAM_FORMAT_EXT 0x8027
#define GL_HISTOGRAM_RED_SIZE 0x8028
#define GL_HISTOGRAM_RED_SIZE_EXT 0x8028
#define GL_HISTOGRAM_GREEN_SIZE 0x8029
#define GL_HISTOGRAM_GREEN_SIZE_EXT 0x8029
#define GL_HISTOGRAM_BLUE_SIZE 0x802A
#define GL_HISTOGRAM_BLUE_SIZE_EXT 0x802A
#define GL_HISTOGRAM_ALPHA_SIZE 0x802B
#define GL_HISTOGRAM_ALPHA_SIZE_EXT 0x802B
#define GL_HISTOGRAM_LUMINANCE_SIZE 0x802C
#define GL_HISTOGRAM_LUMINANCE_SIZE_EXT 0x802C
#define GL_HISTOGRAM_SINK 0x802D
#define GL_HISTOGRAM_SINK_EXT 0x802D
#define GL_MINMAX 0x802E
#define GL_MINMAX_EXT 0x802E
#define GL_MINMAX_FORMAT 0x802F
#define GL_MINMAX_FORMAT_EXT 0x802F
#define GL_MINMAX_SINK 0x8030
#define GL_MINMAX_SINK_EXT 0x8030
#define GL_TABLE_TOO_LARGE 0x8031
#define GL_TABLE_TOO_LARGE_EXT 0x8031
#define GL_UNSIGNED_BYTE_3_3_2 0x8032
#define GL_UNSIGNED_BYTE_3_3_2_EXT 0x8032
#define GL_UNSIGNED_SHORT_4_4_4_4 0x8033
#define GL_UNSIGNED_SHORT_4_4_4_4_EXT 0x8033
#define GL_UNSIGNED_SHORT_5_5_5_1 0x8034
#define GL_UNSIGNED_SHORT_5_5_5_1_EXT 0x8034
#define GL_UNSIGNED_INT_8_8_8_8 0x8035
#define GL_UNSIGNED_INT_8_8_8_8_EXT 0x8035
#define GL_UNSIGNED_INT_10_10_10_2 0x8036
#define GL_UNSIGNED_INT_10_10_10_2_EXT 0x8036
#define GL_POLYGON_OFFSET_EXT 0x8037
#define GL_POLYGON_OFFSET_FILL 0x8037
#define GL_POLYGON_OFFSET_FACTOR 0x8038
#define GL_POLYGON_OFFSET_FACTOR_EXT 0x8038
#define GL_POLYGON_OFFSET_BIAS_EXT 0x8039
#define GL_RESCALE_NORMAL 0x803A
#define GL_RESCALE_NORMAL_EXT 0x803A
#define GL_ALPHA4 0x803B
#define GL_ALPHA4_EXT 0x803B
#define GL_ALPHA8 0x803C
#define GL_ALPHA8_EXT 0x803C
#define GL_ALPHA8_OES 0x803C
#define GL_ALPHA12 0x803D
#define GL_ALPHA12_EXT 0x803D
#define GL_ALPHA16 0x803E
#define GL_ALPHA16_EXT 0x803E
#define GL_LUMINANCE4 0x803F
#define GL_LUMINANCE4_EXT 0x803F
#define GL_LUMINANCE8 0x8040
#define GL_LUMINANCE8_EXT 0x8040
#define GL_LUMINANCE8_OES 0x8040
#define GL_LUMINANCE12 0x8041
#define GL_LUMINANCE12_EXT 0x8041
#define GL_LUMINANCE16 0x8042
#define GL_LUMINANCE16_EXT 0x8042
#define GL_LUMINANCE4_ALPHA4 0x8043
#define GL_LUMINANCE4_ALPHA4_EXT 0x8043
#define GL_LUMINANCE4_ALPHA4_OES 0x8043
#define GL_LUMINANCE6_ALPHA2 0x8044
#define GL_LUMINANCE6_ALPHA2_EXT 0x8044
#define GL_LUMINANCE8_ALPHA8 0x8045
#define GL_LUMINANCE8_ALPHA8_EXT 0x8045
#define GL_LUMINANCE8_ALPHA8_OES 0x8045
#define GL_LUMINANCE12_ALPHA4 0x8046
#define GL_LUMINANCE12_ALPHA4_EXT 0x8046
#define GL_LUMINANCE12_ALPHA12 0x8047
#define GL_LUMINANCE12_ALPHA12_EXT 0x8047
#define GL_LUMINANCE16_ALPHA16 0x8048
#define GL_LUMINANCE16_ALPHA16_EXT 0x8048
#define GL_INTENSITY 0x8049
#define GL_INTENSITY_EXT 0x8049
#define GL_INTENSITY4 0x804A
#define GL_INTENSITY4_EXT 0x804A
#define GL_INTENSITY8 0x804B
#define GL_INTENSITY8_EXT 0x804B
#define GL_INTENSITY12 0x804C
#define GL_INTENSITY12_EXT 0x804C
#define GL_INTENSITY16 0x804D
#define GL_INTENSITY16_EXT 0x804D
#define GL_RGB2_EXT 0x804E
#define GL_RGB4 0x804F
#define GL_RGB4_EXT 0x804F
#define GL_RGB5 0x8050
#define GL_RGB5_EXT 0x8050
#define GL_RGB8 0x8051
#define GL_RGB8_EXT 0x8051
#define GL_RGB8_OES 0x8051
#define GL_RGB10 0x8052
#define GL_RGB10_EXT 0x8052
#define GL_RGB12 0x8053
#define GL_RGB12_EXT 0x8053
#define GL_RGB16 0x8054
#define GL_RGB16_EXT 0x8054
#define GL_RGBA2 0x8055
#define GL_RGBA2_EXT 0x8055
#define GL_RGBA4 0x8056
#define GL_RGBA4_EXT 0x8056
#define GL_RGBA4_OES 0x8056
#define GL_RGB5_A1 0x8057
#define GL_RGB5_A1_EXT 0x8057
#define GL_RGB5_A1_OES 0x8057
#define GL_RGBA8 0x8058
#define GL_RGBA8_EXT 0x8058
#define GL_RGBA8_OES 0x8058
#define GL_RGB10_A2 0x8059
#define GL_RGB10_A2_EXT 0x8059
#define GL_RGBA12 0x805A
#define GL_RGBA12_EXT 0x805A
#define GL_RGBA16 0x805B
#define GL_RGBA16_EXT 0x805B
#define GL_TEXTURE_RED_SIZE 0x805C
#define GL_TEXTURE_RED_SIZE_EXT 0x805C
#define GL_TEXTURE_GREEN_SIZE 0x805D
#define GL_TEXTURE_GREEN_SIZE_EXT 0x805D
#define GL_TEXTURE_BLUE_SIZE 0x805E
#define GL_TEXTURE_BLUE_SIZE_EXT 0x805E
#define GL_TEXTURE_ALPHA_SIZE 0x805F
#define GL_TEXTURE_ALPHA_SIZE_EXT 0x805F
#define GL_TEXTURE_LUMINANCE_SIZE 0x8060
#define GL_TEXTURE_LUMINANCE_SIZE_EXT 0x8060
#define GL_TEXTURE_INTENSITY_SIZE 0x8061
#define GL_TEXTURE_INTENSITY_SIZE_EXT 0x8061
#define GL_REPLACE_EXT 0x8062
#define GL_PROXY_TEXTURE_1D 0x8063
#define GL_PROXY_TEXTURE_1D_EXT 0x8063
#define GL_PROXY_TEXTURE_2D 0x8064
#define GL_PROXY_TEXTURE_2D_EXT 0x8064
#define GL_TEXTURE_TOO_LARGE_EXT 0x8065
#define GL_TEXTURE_PRIORITY 0x8066
#define GL_TEXTURE_PRIORITY_EXT 0x8066
#define GL_TEXTURE_RESIDENT 0x8067
#define GL_TEXTURE_RESIDENT_EXT 0x8067
#define GL_TEXTURE_1D_BINDING_EXT 0x8068
#define GL_TEXTURE_BINDING_1D 0x8068
#define GL_TEXTURE_2D_BINDING_EXT 0x8069
#define GL_TEXTURE_BINDING_2D 0x8069
#define GL_TEXTURE_3D_BINDING_EXT 0x806A
#define GL_TEXTURE_3D_BINDING_OES 0x806A
#define GL_TEXTURE_BINDING_3D 0x806A
#define GL_TEXTURE_BINDING_3D_OES 0x806A
#define GL_PACK_SKIP_IMAGES 0x806B
#define GL_PACK_SKIP_IMAGES_EXT 0x806B
#define GL_PACK_IMAGE_HEIGHT 0x806C
#define GL_PACK_IMAGE_HEIGHT_EXT 0x806C
#define GL_UNPACK_SKIP_IMAGES 0x806D
#define GL_UNPACK_SKIP_IMAGES_EXT 0x806D
#define GL_UNPACK_IMAGE_HEIGHT 0x806E
#define GL_UNPACK_IMAGE_HEIGHT_EXT 0x806E
#define GL_TEXTURE_3D 0x806F
#define GL_TEXTURE_3D_EXT 0x806F
#define GL_TEXTURE_3D_OES 0x806F
#define GL_PROXY_TEXTURE_3D 0x8070
#define GL_PROXY_TEXTURE_3D_EXT 0x8070
#define GL_TEXTURE_DEPTH 0x8071
#define GL_TEXTURE_DEPTH_EXT 0x8071
#define GL_TEXTURE_WRAP_R 0x8072
#define GL_TEXTURE_WRAP_R_EXT 0x8072
#define GL_TEXTURE_WRAP_R_OES 0x8072
#define GL_MAX_3D_TEXTURE_SIZE 0x8073
#define GL_MAX_3D_TEXTURE_SIZE_EXT 0x8073
#define GL_MAX_3D_TEXTURE_SIZE_OES 0x8073
#define GL_VERTEX_ARRAY 0x8074
#define GL_VERTEX_ARRAY_EXT 0x8074
#define GL_VERTEX_ARRAY_KHR 0x8074
#define GL_NORMAL_ARRAY 0x8075
#define GL_NORMAL_ARRAY_EXT 0x8075
#define GL_COLOR_ARRAY 0x8076
#define GL_COLOR_ARRAY_EXT 0x8076
#define GL_INDEX_ARRAY 0x8077
#define GL_INDEX_ARRAY_EXT 0x8077
#define GL_TEXTURE_COORD_ARRAY 0x8078
#define GL_TEXTURE_COORD_ARRAY_EXT 0x8078
#define GL_EDGE_FLAG_ARRAY 0x8079
#define GL_EDGE_FLAG_ARRAY_EXT 0x8079
#define GL_VERTEX_ARRAY_SIZE 0x807A
#define GL_VERTEX_ARRAY_SIZE_EXT 0x807A
#define GL_VERTEX_ARRAY_TYPE 0x807B
#define GL_VERTEX_ARRAY_TYPE_EXT 0x807B
#define GL_VERTEX_ARRAY_STRIDE 0x807C
#define GL_VERTEX_ARRAY_STRIDE_EXT 0x807C
#define GL_VERTEX_ARRAY_COUNT_EXT 0x807D
#define GL_NORMAL_ARRAY_TYPE 0x807E
#define GL_NORMAL_ARRAY_TYPE_EXT 0x807E
#define GL_NORMAL_ARRAY_STRIDE 0x807F
#define GL_NORMAL_ARRAY_STRIDE_EXT 0x807F
#define GL_NORMAL_ARRAY_COUNT_EXT 0x8080
#define GL_COLOR_ARRAY_SIZE 0x8081
#define GL_COLOR_ARRAY_SIZE_EXT 0x8081
#define GL_COLOR_ARRAY_TYPE 0x8082
#define GL_COLOR_ARRAY_TYPE_EXT 0x8082
#define GL_COLOR_ARRAY_STRIDE 0x8083
#define GL_COLOR_ARRAY_STRIDE_EXT 0x8083
#define GL_COLOR_ARRAY_COUNT_EXT 0x8084
#define GL_INDEX_ARRAY_TYPE 0x8085
#define GL_INDEX_ARRAY_TYPE_EXT 0x8085
#define GL_INDEX_ARRAY_STRIDE 0x8086
#define GL_INDEX_ARRAY_STRIDE_EXT 0x8086
#define GL_INDEX_ARRAY_COUNT_EXT 0x8087
#define GL_TEXTURE_COORD_ARRAY_SIZE 0x8088
#define GL_TEXTURE_COORD_ARRAY_SIZE_EXT 0x8088
#define GL_TEXTURE_COORD_ARRAY_TYPE 0x8089
#define GL_TEXTURE_COORD_ARRAY_TYPE_EXT 0x8089
#define GL_TEXTURE_COORD_ARRAY_STRIDE 0x808A
#define GL_TEXTURE_COORD_ARRAY_STRIDE_EXT 0x808A
#define GL_TEXTURE_COORD_ARRAY_COUNT_EXT 0x808B
#define GL_EDGE_FLAG_ARRAY_STRIDE 0x808C
#define GL_EDGE_FLAG_ARRAY_STRIDE_EXT 0x808C
#define GL_EDGE_FLAG_ARRAY_COUNT_EXT 0x808D
#define GL_VERTEX_ARRAY_POINTER 0x808E
#define GL_VERTEX_ARRAY_POINTER_EXT 0x808E
#define GL_NORMAL_ARRAY_POINTER 0x808F
#define GL_NORMAL_ARRAY_POINTER_EXT 0x808F
#define GL_COLOR_ARRAY_POINTER 0x8090
#define GL_COLOR_ARRAY_POINTER_EXT 0x8090
#define GL_INDEX_ARRAY_POINTER 0x8091
#define GL_INDEX_ARRAY_POINTER_EXT 0x8091
#define GL_TEXTURE_COORD_ARRAY_POINTER 0x8092
#define GL_TEXTURE_COORD_ARRAY_POINTER_EXT 0x8092
#define GL_EDGE_FLAG_ARRAY_POINTER 0x8093
#define GL_EDGE_FLAG_ARRAY_POINTER_EXT 0x8093
#define GL_INTERLACE_SGIX 0x8094
#define GL_DETAIL_TEXTURE_2D_SGIS 0x8095
#define GL_DETAIL_TEXTURE_2D_BINDING_SGIS 0x8096
#define GL_LINEAR_DETAIL_SGIS 0x8097
#define GL_LINEAR_DETAIL_ALPHA_SGIS 0x8098
#define GL_LINEAR_DETAIL_COLOR_SGIS 0x8099
#define GL_DETAIL_TEXTURE_LEVEL_SGIS 0x809A
#define GL_DETAIL_TEXTURE_MODE_SGIS 0x809B
#define GL_DETAIL_TEXTURE_FUNC_POINTS_SGIS 0x809C
#define GL_MULTISAMPLE 0x809D
#define GL_MULTISAMPLE_ARB 0x809D
#define GL_MULTISAMPLE_EXT 0x809D
#define GL_MULTISAMPLE_SGIS 0x809D
#define GL_SAMPLE_ALPHA_TO_COVERAGE 0x809E
#define GL_SAMPLE_ALPHA_TO_COVERAGE_ARB 0x809E
#define GL_SAMPLE_ALPHA_TO_MASK_EXT 0x809E
#define GL_SAMPLE_ALPHA_TO_MASK_SGIS 0x809E
#define GL_SAMPLE_ALPHA_TO_ONE 0x809F
#define GL_SAMPLE_ALPHA_TO_ONE_ARB 0x809F
#define GL_SAMPLE_ALPHA_TO_ONE_EXT 0x809F
#define GL_SAMPLE_ALPHA_TO_ONE_SGIS 0x809F
#define GL_SAMPLE_COVERAGE 0x80A0
#define GL_SAMPLE_COVERAGE_ARB 0x80A0
#define GL_SAMPLE_MASK_EXT 0x80A0
#define GL_SAMPLE_MASK_SGIS 0x80A0
#define GL_1PASS_EXT 0x80A1
#define GL_1PASS_SGIS 0x80A1
#define GL_2PASS_0_EXT 0x80A2
#define GL_2PASS_0_SGIS 0x80A2
#define GL_2PASS_1_EXT 0x80A3
#define GL_2PASS_1_SGIS 0x80A3
#define GL_4PASS_0_EXT 0x80A4
#define GL_4PASS_0_SGIS 0x80A4
#define GL_4PASS_1_EXT 0x80A5
#define GL_4PASS_1_SGIS 0x80A5
#define GL_4PASS_2_EXT 0x80A6
#define GL_4PASS_2_SGIS 0x80A6
#define GL_4PASS_3_EXT 0x80A7
#define GL_4PASS_3_SGIS 0x80A7
#define GL_SAMPLE_BUFFERS 0x80A8
#define GL_SAMPLE_BUFFERS_ARB 0x80A8
#define GL_SAMPLE_BUFFERS_EXT 0x80A8
#define GL_SAMPLE_BUFFERS_SGIS 0x80A8
#define GL_SAMPLES 0x80A9
#define GL_SAMPLES_ARB 0x80A9
#define GL_SAMPLES_EXT 0x80A9
#define GL_SAMPLES_SGIS 0x80A9
#define GL_SAMPLE_COVERAGE_VALUE 0x80AA
#define GL_SAMPLE_COVERAGE_VALUE_ARB 0x80AA
#define GL_SAMPLE_MASK_VALUE_EXT 0x80AA
#define GL_SAMPLE_MASK_VALUE_SGIS 0x80AA
#define GL_SAMPLE_COVERAGE_INVERT 0x80AB
#define GL_SAMPLE_COVERAGE_INVERT_ARB 0x80AB
#define GL_SAMPLE_MASK_INVERT_EXT 0x80AB
#define GL_SAMPLE_MASK_INVERT_SGIS 0x80AB
#define GL_SAMPLE_PATTERN_EXT 0x80AC
#define GL_SAMPLE_PATTERN_SGIS 0x80AC
#define GL_LINEAR_SHARPEN_SGIS 0x80AD
#define GL_LINEAR_SHARPEN_ALPHA_SGIS 0x80AE
#define GL_LINEAR_SHARPEN_COLOR_SGIS 0x80AF
#define GL_SHARPEN_TEXTURE_FUNC_POINTS_SGIS 0x80B0
#define GL_COLOR_MATRIX 0x80B1
#define GL_COLOR_MATRIX_SGI 0x80B1
#define GL_COLOR_MATRIX_STACK_DEPTH 0x80B2
#define GL_COLOR_MATRIX_STACK_DEPTH_SGI 0x80B2
#define GL_MAX_COLOR_MATRIX_STACK_DEPTH 0x80B3
#define GL_MAX_COLOR_MATRIX_STACK_DEPTH_SGI 0x80B3
#define GL_POST_COLOR_MATRIX_RED_SCALE 0x80B4
#define GL_POST_COLOR_MATRIX_RED_SCALE_SGI 0x80B4
#define GL_POST_COLOR_MATRIX_GREEN_SCALE 0x80B5
#define GL_POST_COLOR_MATRIX_GREEN_SCALE_SGI 0x80B5
#define GL_POST_COLOR_MATRIX_BLUE_SCALE 0x80B6
#define GL_POST_COLOR_MATRIX_BLUE_SCALE_SGI 0x80B6
#define GL_POST_COLOR_MATRIX_ALPHA_SCALE 0x80B7
#define GL_POST_COLOR_MATRIX_ALPHA_SCALE_SGI 0x80B7
#define GL_POST_COLOR_MATRIX_RED_BIAS 0x80B8
#define GL_POST_COLOR_MATRIX_RED_BIAS_SGI 0x80B8
#define GL_POST_COLOR_MATRIX_GREEN_BIAS 0x80B9
#define GL_POST_COLOR_MATRIX_GREEN_BIAS_SGI 0x80B9
#define GL_POST_COLOR_MATRIX_BLUE_BIAS 0x80BA
#define GL_POST_COLOR_MATRIX_BLUE_BIAS_SGI 0x80BA
#define GL_POST_COLOR_MATRIX_ALPHA_BIAS 0x80BB
#define GL_POST_COLOR_MATRIX_ALPHA_BIAS_SGI 0x80BB
#define GL_TEXTURE_COLOR_TABLE_SGI 0x80BC
#define GL_PROXY_TEXTURE_COLOR_TABLE_SGI 0x80BD
#define GL_TEXTURE_ENV_BIAS_SGIX 0x80BE
#define GL_SHADOW_AMBIENT_SGIX 0x80BF
#define GL_TEXTURE_COMPARE_FAIL_VALUE_ARB 0x80BF
#define GL_BLEND_DST_RGB 0x80C8
#define GL_BLEND_DST_RGB_EXT 0x80C8
#define GL_BLEND_DST_RGB_OES 0x80C8
#define GL_BLEND_SRC_RGB 0x80C9
#define GL_BLEND_SRC_RGB_EXT 0x80C9
#define GL_BLEND_SRC_RGB_OES 0x80C9
#define GL_BLEND_DST_ALPHA 0x80CA
#define GL_BLEND_DST_ALPHA_EXT 0x80CA
#define GL_BLEND_DST_ALPHA_OES 0x80CA
#define GL_BLEND_SRC_ALPHA 0x80CB
#define GL_BLEND_SRC_ALPHA_EXT 0x80CB
#define GL_BLEND_SRC_ALPHA_OES 0x80CB
#define GL_422_EXT 0x80CC
#define GL_422_REV_EXT 0x80CD
#define GL_422_AVERAGE_EXT 0x80CE
#define GL_422_REV_AVERAGE_EXT 0x80CF
#define GL_COLOR_TABLE 0x80D0
#define GL_COLOR_TABLE_SGI 0x80D0
#define GL_POST_CONVOLUTION_COLOR_TABLE 0x80D1
#define GL_POST_CONVOLUTION_COLOR_TABLE_SGI 0x80D1
#define GL_POST_COLOR_MATRIX_COLOR_TABLE 0x80D2
#define GL_POST_COLOR_MATRIX_COLOR_TABLE_SGI 0x80D2
#define GL_PROXY_COLOR_TABLE 0x80D3
#define GL_PROXY_COLOR_TABLE_SGI 0x80D3
#define GL_PROXY_POST_CONVOLUTION_COLOR_TABLE 0x80D4
#define GL_PROXY_POST_CONVOLUTION_COLOR_TABLE_SGI 0x80D4
#define GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE 0x80D5
#define GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE_SGI 0x80D5
#define GL_COLOR_TABLE_SCALE 0x80D6
#define GL_COLOR_TABLE_SCALE_SGI 0x80D6
#define GL_COLOR_TABLE_BIAS 0x80D7
#define GL_COLOR_TABLE_BIAS_SGI 0x80D7
#define GL_COLOR_TABLE_FORMAT 0x80D8
#define GL_COLOR_TABLE_FORMAT_SGI 0x80D8
#define GL_COLOR_TABLE_WIDTH 0x80D9
#define GL_COLOR_TABLE_WIDTH_SGI 0x80D9
#define GL_COLOR_TABLE_RED_SIZE 0x80DA
#define GL_COLOR_TABLE_RED_SIZE_SGI 0x80DA
#define GL_COLOR_TABLE_GREEN_SIZE 0x80DB
#define GL_COLOR_TABLE_GREEN_SIZE_SGI 0x80DB
#define GL_COLOR_TABLE_BLUE_SIZE 0x80DC
#define GL_COLOR_TABLE_BLUE_SIZE_SGI 0x80DC
#define GL_COLOR_TABLE_ALPHA_SIZE 0x80DD
#define GL_COLOR_TABLE_ALPHA_SIZE_SGI 0x80DD
#define GL_COLOR_TABLE_LUMINANCE_SIZE 0x80DE
#define GL_COLOR_TABLE_LUMINANCE_SIZE_SGI 0x80DE
#define GL_COLOR_TABLE_INTENSITY_SIZE 0x80DF
#define GL_COLOR_TABLE_INTENSITY_SIZE_SGI 0x80DF
#define GL_BGR 0x80E0
#define GL_BGR_EXT 0x80E0
#define GL_BGRA 0x80E1
#define GL_BGRA_EXT 0x80E1
#define GL_BGRA_IMG 0x80E1
#define GL_COLOR_INDEX1_EXT 0x80E2
#define GL_COLOR_INDEX2_EXT 0x80E3
#define GL_COLOR_INDEX4_EXT 0x80E4
#define GL_COLOR_INDEX8_EXT 0x80E5
#define GL_COLOR_INDEX12_EXT 0x80E6
#define GL_COLOR_INDEX16_EXT 0x80E7
#define GL_MAX_ELEMENTS_VERTICES 0x80E8
#define GL_MAX_ELEMENTS_VERTICES_EXT 0x80E8
#define GL_MAX_ELEMENTS_INDICES 0x80E9
#define GL_MAX_ELEMENTS_INDICES_EXT 0x80E9
#define GL_PHONG_WIN 0x80EA
#define GL_PHONG_HINT_WIN 0x80EB
#define GL_FOG_SPECULAR_TEXTURE_WIN 0x80EC
#define GL_TEXTURE_INDEX_SIZE_EXT 0x80ED
#define GL_PARAMETER_BUFFER 0x80EE
#define GL_PARAMETER_BUFFER_ARB 0x80EE
#define GL_PARAMETER_BUFFER_BINDING 0x80EF
#define GL_PARAMETER_BUFFER_BINDING_ARB 0x80EF
#define GL_CLIP_VOLUME_CLIPPING_HINT_EXT 0x80F0
#define GL_DUAL_ALPHA4_SGIS 0x8110
#define GL_DUAL_ALPHA8_SGIS 0x8111
#define GL_DUAL_ALPHA12_SGIS 0x8112
#define GL_DUAL_ALPHA16_SGIS 0x8113
#define GL_DUAL_LUMINANCE4_SGIS 0x8114
#define GL_DUAL_LUMINANCE8_SGIS 0x8115
#define GL_DUAL_LUMINANCE12_SGIS 0x8116
#define GL_DUAL_LUMINANCE16_SGIS 0x8117
#define GL_DUAL_INTENSITY4_SGIS 0x8118
#define GL_DUAL_INTENSITY8_SGIS 0x8119
#define GL_DUAL_INTENSITY12_SGIS 0x811A
#define GL_DUAL_INTENSITY16_SGIS 0x811B
#define GL_DUAL_LUMINANCE_ALPHA4_SGIS 0x811C
#define GL_DUAL_LUMINANCE_ALPHA8_SGIS 0x811D
#define GL_QUAD_ALPHA4_SGIS 0x811E
#define GL_QUAD_ALPHA8_SGIS 0x811F
#define GL_QUAD_LUMINANCE4_SGIS 0x8120
#define GL_QUAD_LUMINANCE8_SGIS 0x8121
#define GL_QUAD_INTENSITY4_SGIS 0x8122
#define GL_QUAD_INTENSITY8_SGIS 0x8123
#define GL_DUAL_TEXTURE_SELECT_SGIS 0x8124
#define GL_QUAD_TEXTURE_SELECT_SGIS 0x8125
#define GL_POINT_SIZE_MIN 0x8126
#define GL_POINT_SIZE_MIN_ARB 0x8126
#define GL_POINT_SIZE_MIN_EXT 0x8126
#define GL_POINT_SIZE_MIN_SGIS 0x8126
#define GL_POINT_SIZE_MAX 0x8127
#define GL_POINT_SIZE_MAX_ARB 0x8127
#define GL_POINT_SIZE_MAX_EXT 0x8127
#define GL_POINT_SIZE_MAX_SGIS 0x8127
#define GL_POINT_FADE_THRESHOLD_SIZE 0x8128
#define GL_POINT_FADE_THRESHOLD_SIZE_ARB 0x8128
#define GL_POINT_FADE_THRESHOLD_SIZE_EXT 0x8128
#define GL_POINT_FADE_THRESHOLD_SIZE_SGIS 0x8128
#define GL_DISTANCE_ATTENUATION_EXT 0x8129
#define GL_DISTANCE_ATTENUATION_SGIS 0x8129
#define GL_POINT_DISTANCE_ATTENUATION 0x8129
#define GL_POINT_DISTANCE_ATTENUATION_ARB 0x8129
#define GL_FOG_FUNC_SGIS 0x812A
#define GL_FOG_FUNC_POINTS_SGIS 0x812B
#define GL_MAX_FOG_FUNC_POINTS_SGIS 0x812C
#define GL_CLAMP_TO_BORDER 0x812D
#define GL_CLAMP_TO_BORDER_ARB 0x812D
#define GL_CLAMP_TO_BORDER_EXT 0x812D
#define GL_CLAMP_TO_BORDER_NV 0x812D
#define GL_CLAMP_TO_BORDER_OES 0x812D
#define GL_CLAMP_TO_BORDER_SGIS 0x812D
#define GL_TEXTURE_MULTI_BUFFER_HINT_SGIX 0x812E
#define GL_CLAMP_TO_EDGE 0x812F
#define GL_CLAMP_TO_EDGE_EXT 0x812F
#define GL_CLAMP_TO_EDGE_SGIS 0x812F
#define GL_PACK_SKIP_VOLUMES_SGIS 0x8130
#define GL_PACK_IMAGE_DEPTH_SGIS 0x8131
#define GL_UNPACK_SKIP_VOLUMES_SGIS 0x8132
#define GL_UNPACK_IMAGE_DEPTH_SGIS 0x8133
#define GL_TEXTURE_4D_SGIS 0x8134
#define GL_PROXY_TEXTURE_4D_SGIS 0x8135
#define GL_TEXTURE_4DSIZE_SGIS 0x8136
#define GL_TEXTURE_WRAP_Q_SGIS 0x8137
#define GL_MAX_4D_TEXTURE_SIZE_SGIS 0x8138
#define GL_PIXEL_TEX_GEN_SGIX 0x8139
#define GL_TEXTURE_MIN_LOD 0x813A
#define GL_TEXTURE_MIN_LOD_SGIS 0x813A
#define GL_TEXTURE_MAX_LOD 0x813B
#define GL_TEXTURE_MAX_LOD_SGIS 0x813B
#define GL_TEXTURE_BASE_LEVEL 0x813C
#define GL_TEXTURE_BASE_LEVEL_SGIS 0x813C
#define GL_TEXTURE_MAX_LEVEL 0x813D
#define GL_TEXTURE_MAX_LEVEL_APPLE 0x813D
#define GL_TEXTURE_MAX_LEVEL_SGIS 0x813D
#define GL_PIXEL_TILE_BEST_ALIGNMENT_SGIX 0x813E
#define GL_PIXEL_TILE_CACHE_INCREMENT_SGIX 0x813F
#define GL_PIXEL_TILE_WIDTH_SGIX 0x8140
#define GL_PIXEL_TILE_HEIGHT_SGIX 0x8141
#define GL_PIXEL_TILE_GRID_WIDTH_SGIX 0x8142
#define GL_PIXEL_TILE_GRID_HEIGHT_SGIX 0x8143
#define GL_PIXEL_TILE_GRID_DEPTH_SGIX 0x8144
#define GL_PIXEL_TILE_CACHE_SIZE_SGIX 0x8145
#define GL_FILTER4_SGIS 0x8146
#define GL_TEXTURE_FILTER4_SIZE_SGIS 0x8147
#define GL_SPRITE_SGIX 0x8148
#define GL_SPRITE_MODE_SGIX 0x8149
#define GL_SPRITE_AXIS_SGIX 0x814A
#define GL_SPRITE_TRANSLATION_SGIX 0x814B
#define GL_SPRITE_AXIAL_SGIX 0x814C
#define GL_SPRITE_OBJECT_ALIGNED_SGIX 0x814D
#define GL_SPRITE_EYE_ALIGNED_SGIX 0x814E
#define GL_TEXTURE_4D_BINDING_SGIS 0x814F
#define GL_IGNORE_BORDER_HP 0x8150
#define GL_CONSTANT_BORDER 0x8151
#define GL_CONSTANT_BORDER_HP 0x8151
#define GL_REPLICATE_BORDER 0x8153
#define GL_REPLICATE_BORDER_HP 0x8153
#define GL_CONVOLUTION_BORDER_COLOR 0x8154
#define GL_CONVOLUTION_BORDER_COLOR_HP 0x8154
#define GL_IMAGE_SCALE_X_HP 0x8155
#define GL_IMAGE_SCALE_Y_HP 0x8156
#define GL_IMAGE_TRANSLATE_X_HP 0x8157
#define GL_IMAGE_TRANSLATE_Y_HP 0x8158
#define GL_IMAGE_ROTATE_ANGLE_HP 0x8159
#define GL_IMAGE_ROTATE_ORIGIN_X_HP 0x815A
#define GL_IMAGE_ROTATE_ORIGIN_Y_HP 0x815B
#define GL_IMAGE_MAG_FILTER_HP 0x815C
#define GL_IMAGE_MIN_FILTER_HP 0x815D
#define GL_IMAGE_CUBIC_WEIGHT_HP 0x815E
#define GL_CUBIC_HP 0x815F
#define GL_AVERAGE_HP 0x8160
#define GL_IMAGE_TRANSFORM_2D_HP 0x8161
#define GL_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP 0x8162
#define GL_PROXY_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP 0x8163
#define GL_OCCLUSION_TEST_HP 0x8165
#define GL_OCCLUSION_TEST_RESULT_HP 0x8166
#define GL_TEXTURE_LIGHTING_MODE_HP 0x8167
#define GL_TEXTURE_POST_SPECULAR_HP 0x8168
#define GL_TEXTURE_PRE_SPECULAR_HP 0x8169
#define GL_LINEAR_CLIPMAP_LINEAR_SGIX 0x8170
#define GL_TEXTURE_CLIPMAP_CENTER_SGIX 0x8171
#define GL_TEXTURE_CLIPMAP_FRAME_SGIX 0x8172
#define GL_TEXTURE_CLIPMAP_OFFSET_SGIX 0x8173
#define GL_TEXTURE_CLIPMAP_VIRTUAL_DEPTH_SGIX 0x8174
#define GL_TEXTURE_CLIPMAP_LOD_OFFSET_SGIX 0x8175
#define GL_TEXTURE_CLIPMAP_DEPTH_SGIX 0x8176
#define GL_MAX_CLIPMAP_DEPTH_SGIX 0x8177
#define GL_MAX_CLIPMAP_VIRTUAL_DEPTH_SGIX 0x8178
#define GL_POST_TEXTURE_FILTER_BIAS_SGIX 0x8179
#define GL_POST_TEXTURE_FILTER_SCALE_SGIX 0x817A
#define GL_POST_TEXTURE_FILTER_BIAS_RANGE_SGIX 0x817B
#define GL_POST_TEXTURE_FILTER_SCALE_RANGE_SGIX 0x817C
#define GL_REFERENCE_PLANE_SGIX 0x817D
#define GL_REFERENCE_PLANE_EQUATION_SGIX 0x817E
#define GL_IR_INSTRUMENT1_SGIX 0x817F
#define GL_INSTRUMENT_BUFFER_POINTER_SGIX 0x8180
#define GL_INSTRUMENT_MEASUREMENTS_SGIX 0x8181
#define GL_LIST_PRIORITY_SGIX 0x8182
#define GL_CALLIGRAPHIC_FRAGMENT_SGIX 0x8183
#define GL_PIXEL_TEX_GEN_Q_CEILING_SGIX 0x8184
#define GL_PIXEL_TEX_GEN_Q_ROUND_SGIX 0x8185
#define GL_PIXEL_TEX_GEN_Q_FLOOR_SGIX 0x8186
#define GL_PIXEL_TEX_GEN_ALPHA_REPLACE_SGIX 0x8187
#define GL_PIXEL_TEX_GEN_ALPHA_NO_REPLACE_SGIX 0x8188
#define GL_PIXEL_TEX_GEN_ALPHA_LS_SGIX 0x8189
#define GL_PIXEL_TEX_GEN_ALPHA_MS_SGIX 0x818A
#define GL_FRAMEZOOM_SGIX 0x818B
#define GL_FRAMEZOOM_FACTOR_SGIX 0x818C
#define GL_MAX_FRAMEZOOM_FACTOR_SGIX 0x818D
#define GL_TEXTURE_LOD_BIAS_S_SGIX 0x818E
#define GL_TEXTURE_LOD_BIAS_T_SGIX 0x818F
#define GL_TEXTURE_LOD_BIAS_R_SGIX 0x8190
#define GL_GENERATE_MIPMAP 0x8191
#define GL_GENERATE_MIPMAP_SGIS 0x8191
#define GL_GENERATE_MIPMAP_HINT 0x8192
#define GL_GENERATE_MIPMAP_HINT_SGIS 0x8192
#define GL_GEOMETRY_DEFORMATION_SGIX 0x8194
#define GL_TEXTURE_DEFORMATION_SGIX 0x8195
#define GL_DEFORMATIONS_MASK_SGIX 0x8196
#define GL_MAX_DEFORMATION_ORDER_SGIX 0x8197
#define GL_FOG_OFFSET_SGIX 0x8198
#define GL_FOG_OFFSET_VALUE_SGIX 0x8199
#define GL_TEXTURE_COMPARE_SGIX 0x819A
#define GL_TEXTURE_COMPARE_OPERATOR_SGIX 0x819B
#define GL_TEXTURE_LEQUAL_R_SGIX 0x819C
#define GL_TEXTURE_GEQUAL_R_SGIX 0x819D
#define GL_DEPTH_COMPONENT16 0x81A5
#define GL_DEPTH_COMPONENT16_ARB 0x81A5
#define GL_DEPTH_COMPONENT16_OES 0x81A5
#define GL_DEPTH_COMPONENT16_SGIX 0x81A5
#define GL_DEPTH_COMPONENT24 0x81A6
#define GL_DEPTH_COMPONENT24_ARB 0x81A6
#define GL_DEPTH_COMPONENT24_OES 0x81A6
#define GL_DEPTH_COMPONENT24_SGIX 0x81A6
#define GL_DEPTH_COMPONENT32 0x81A7
#define GL_DEPTH_COMPONENT32_ARB 0x81A7
#define GL_DEPTH_COMPONENT32_OES 0x81A7
#define GL_DEPTH_COMPONENT32_SGIX 0x81A7
#define GL_ARRAY_ELEMENT_LOCK_FIRST_EXT 0x81A8
#define GL_ARRAY_ELEMENT_LOCK_COUNT_EXT 0x81A9
#define GL_CULL_VERTEX_EXT 0x81AA
#define GL_CULL_VERTEX_EYE_POSITION_EXT 0x81AB
#define GL_CULL_VERTEX_OBJECT_POSITION_EXT 0x81AC
#define GL_IUI_V2F_EXT 0x81AD
#define GL_IUI_V3F_EXT 0x81AE
#define GL_IUI_N3F_V2F_EXT 0x81AF
#define GL_IUI_N3F_V3F_EXT 0x81B0
#define GL_T2F_IUI_V2F_EXT 0x81B1
#define GL_T2F_IUI_V3F_EXT 0x81B2
#define GL_T2F_IUI_N3F_V2F_EXT 0x81B3
#define GL_T2F_IUI_N3F_V3F_EXT 0x81B4
#define GL_INDEX_TEST_EXT 0x81B5
#define GL_INDEX_TEST_FUNC_EXT 0x81B6
#define GL_INDEX_TEST_REF_EXT 0x81B7
#define GL_INDEX_MATERIAL_EXT 0x81B8
#define GL_INDEX_MATERIAL_PARAMETER_EXT 0x81B9
#define GL_INDEX_MATERIAL_FACE_EXT 0x81BA
#define GL_YCRCB_422_SGIX 0x81BB
#define GL_YCRCB_444_SGIX 0x81BC
#define GL_WRAP_BORDER_SUN 0x81D4
#define GL_UNPACK_CONSTANT_DATA_SUNX 0x81D5
#define GL_TEXTURE_CONSTANT_DATA_SUNX 0x81D6
#define GL_TRIANGLE_LIST_SUN 0x81D7
#define GL_REPLACEMENT_CODE_SUN 0x81D8
#define GL_GLOBAL_ALPHA_SUN 0x81D9
#define GL_GLOBAL_ALPHA_FACTOR_SUN 0x81DA
#define GL_TEXTURE_COLOR_WRITEMASK_SGIS 0x81EF
#define GL_EYE_DISTANCE_TO_POINT_SGIS 0x81F0
#define GL_OBJECT_DISTANCE_TO_POINT_SGIS 0x81F1
#define GL_EYE_DISTANCE_TO_LINE_SGIS 0x81F2
#define GL_OBJECT_DISTANCE_TO_LINE_SGIS 0x81F3
#define GL_EYE_POINT_SGIS 0x81F4
#define GL_OBJECT_POINT_SGIS 0x81F5
#define GL_EYE_LINE_SGIS 0x81F6
#define GL_OBJECT_LINE_SGIS 0x81F7
#define GL_LIGHT_MODEL_COLOR_CONTROL 0x81F8
#define GL_LIGHT_MODEL_COLOR_CONTROL_EXT 0x81F8
#define GL_SINGLE_COLOR 0x81F9
#define GL_SINGLE_COLOR_EXT 0x81F9
#define GL_SEPARATE_SPECULAR_COLOR 0x81FA
#define GL_SEPARATE_SPECULAR_COLOR_EXT 0x81FA
#define GL_SHARED_TEXTURE_PALETTE_EXT 0x81FB
#define GL_TEXT_FRAGMENT_SHADER_ATI 0x8200
#define GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING 0x8210
#define GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING_EXT 0x8210
#define GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE 0x8211
#define GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT 0x8211
#define GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE 0x8212
#define GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE 0x8213
#define GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE 0x8214
#define GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE 0x8215
#define GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE 0x8216
#define GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE 0x8217
#define GL_FRAMEBUFFER_DEFAULT 0x8218
#define GL_FRAMEBUFFER_UNDEFINED 0x8219
#define GL_FRAMEBUFFER_UNDEFINED_OES 0x8219
#define GL_DEPTH_STENCIL_ATTACHMENT 0x821A
#define GL_MAJOR_VERSION 0x821B
#define GL_MINOR_VERSION 0x821C
#define GL_NUM_EXTENSIONS 0x821D
#define GL_CONTEXT_FLAGS 0x821E
#define GL_BUFFER_IMMUTABLE_STORAGE 0x821F
#define GL_BUFFER_IMMUTABLE_STORAGE_EXT 0x821F
#define GL_BUFFER_STORAGE_FLAGS 0x8220
#define GL_BUFFER_STORAGE_FLAGS_EXT 0x8220
#define GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED 0x8221
#define GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED_OES 0x8221
#define GL_INDEX 0x8222
#define GL_COMPRESSED_RED 0x8225
#define GL_COMPRESSED_RG 0x8226
#define GL_RG 0x8227
#define GL_RG_EXT 0x8227
#define GL_RG_INTEGER 0x8228
#define GL_R8 0x8229
#define GL_R8_EXT 0x8229
#define GL_R16 0x822A
#define GL_R16_EXT 0x822A
#define GL_RG8 0x822B
#define GL_RG8_EXT 0x822B
#define GL_RG16 0x822C
#define GL_RG16_EXT 0x822C
#define GL_R16F 0x822D
#define GL_R16F_EXT 0x822D
#define GL_R32F 0x822E
#define GL_R32F_EXT 0x822E
#define GL_RG16F 0x822F
#define GL_RG16F_EXT 0x822F
#define GL_RG32F 0x8230
#define GL_RG32F_EXT 0x8230
#define GL_R8I 0x8231
#define GL_R8UI 0x8232
#define GL_R16I 0x8233
#define GL_R16UI 0x8234
#define GL_R32I 0x8235
#define GL_R32UI 0x8236
#define GL_RG8I 0x8237
#define GL_RG8UI 0x8238
#define GL_RG16I 0x8239
#define GL_RG16UI 0x823A
#define GL_RG32I 0x823B
#define GL_RG32UI 0x823C
#define GL_SYNC_CL_EVENT_ARB 0x8240
#define GL_SYNC_CL_EVENT_COMPLETE_ARB 0x8241
#define GL_DEBUG_OUTPUT_SYNCHRONOUS 0x8242
#define GL_DEBUG_OUTPUT_SYNCHRONOUS_ARB 0x8242
#define GL_DEBUG_OUTPUT_SYNCHRONOUS_KHR 0x8242
#define GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH 0x8243
#define GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_ARB 0x8243
#define GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_KHR 0x8243
#define GL_DEBUG_CALLBACK_FUNCTION 0x8244
#define GL_DEBUG_CALLBACK_FUNCTION_ARB 0x8244
#define GL_DEBUG_CALLBACK_FUNCTION_KHR 0x8244
#define GL_DEBUG_CALLBACK_USER_PARAM 0x8245
#define GL_DEBUG_CALLBACK_USER_PARAM_ARB 0x8245
#define GL_DEBUG_CALLBACK_USER_PARAM_KHR 0x8245
#define GL_DEBUG_SOURCE_API 0x8246
#define GL_DEBUG_SOURCE_API_ARB 0x8246
#define GL_DEBUG_SOURCE_API_KHR 0x8246
#define GL_DEBUG_SOURCE_WINDOW_SYSTEM 0x8247
#define GL_DEBUG_SOURCE_WINDOW_SYSTEM_ARB 0x8247
#define GL_DEBUG_SOURCE_WINDOW_SYSTEM_KHR 0x8247
#define GL_DEBUG_SOURCE_SHADER_COMPILER 0x8248
#define GL_DEBUG_SOURCE_SHADER_COMPILER_ARB 0x8248
#define GL_DEBUG_SOURCE_SHADER_COMPILER_KHR 0x8248
#define GL_DEBUG_SOURCE_THIRD_PARTY 0x8249
#define GL_DEBUG_SOURCE_THIRD_PARTY_ARB 0x8249
#define GL_DEBUG_SOURCE_THIRD_PARTY_KHR 0x8249
#define GL_DEBUG_SOURCE_APPLICATION 0x824A
#define GL_DEBUG_SOURCE_APPLICATION_ARB 0x824A
#define GL_DEBUG_SOURCE_APPLICATION_KHR 0x824A
#define GL_DEBUG_SOURCE_OTHER 0x824B
#define GL_DEBUG_SOURCE_OTHER_ARB 0x824B
#define GL_DEBUG_SOURCE_OTHER_KHR 0x824B
#define GL_DEBUG_TYPE_ERROR 0x824C
#define GL_DEBUG_TYPE_ERROR_ARB 0x824C
#define GL_DEBUG_TYPE_ERROR_KHR 0x824C
#define GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR 0x824D
#define GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_ARB 0x824D
#define GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_KHR 0x824D
#define GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR 0x824E
#define GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_ARB 0x824E
#define GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_KHR 0x824E
#define GL_DEBUG_TYPE_PORTABILITY 0x824F
#define GL_DEBUG_TYPE_PORTABILITY_ARB 0x824F
#define GL_DEBUG_TYPE_PORTABILITY_KHR 0x824F
#define GL_DEBUG_TYPE_PERFORMANCE 0x8250
#define GL_DEBUG_TYPE_PERFORMANCE_ARB 0x8250
#define GL_DEBUG_TYPE_PERFORMANCE_KHR 0x8250
#define GL_DEBUG_TYPE_OTHER 0x8251
#define GL_DEBUG_TYPE_OTHER_ARB 0x8251
#define GL_DEBUG_TYPE_OTHER_KHR 0x8251
#define GL_LOSE_CONTEXT_ON_RESET 0x8252
#define GL_LOSE_CONTEXT_ON_RESET_ARB 0x8252
#define GL_LOSE_CONTEXT_ON_RESET_EXT 0x8252
#define GL_LOSE_CONTEXT_ON_RESET_KHR 0x8252
#define GL_GUILTY_CONTEXT_RESET 0x8253
#define GL_GUILTY_CONTEXT_RESET_ARB 0x8253
#define GL_GUILTY_CONTEXT_RESET_EXT 0x8253
#define GL_GUILTY_CONTEXT_RESET_KHR 0x8253
#define GL_INNOCENT_CONTEXT_RESET 0x8254
#define GL_INNOCENT_CONTEXT_RESET_ARB 0x8254
#define GL_INNOCENT_CONTEXT_RESET_EXT 0x8254
#define GL_INNOCENT_CONTEXT_RESET_KHR 0x8254
#define GL_UNKNOWN_CONTEXT_RESET 0x8255
#define GL_UNKNOWN_CONTEXT_RESET_ARB 0x8255
#define GL_UNKNOWN_CONTEXT_RESET_EXT 0x8255
#define GL_UNKNOWN_CONTEXT_RESET_KHR 0x8255
#define GL_RESET_NOTIFICATION_STRATEGY 0x8256
#define GL_RESET_NOTIFICATION_STRATEGY_ARB 0x8256
#define GL_RESET_NOTIFICATION_STRATEGY_EXT 0x8256
#define GL_RESET_NOTIFICATION_STRATEGY_KHR 0x8256
#define GL_PROGRAM_BINARY_RETRIEVABLE_HINT 0x8257
#define GL_PROGRAM_SEPARABLE 0x8258
#define GL_PROGRAM_SEPARABLE_EXT 0x8258
#define GL_ACTIVE_PROGRAM 0x8259
#define GL_ACTIVE_PROGRAM_EXT 0x8259 /* for gles2 */
#define GL_PROGRAM_PIPELINE_BINDING 0x825A
#define GL_PROGRAM_PIPELINE_BINDING_EXT 0x825A
#define GL_MAX_VIEWPORTS 0x825B
#define GL_MAX_VIEWPORTS_NV 0x825B
#define GL_MAX_VIEWPORTS_OES 0x825B
#define GL_VIEWPORT_SUBPIXEL_BITS 0x825C
#define GL_VIEWPORT_SUBPIXEL_BITS_EXT 0x825C
#define GL_VIEWPORT_SUBPIXEL_BITS_NV 0x825C
#define GL_VIEWPORT_SUBPIXEL_BITS_OES 0x825C
#define GL_VIEWPORT_BOUNDS_RANGE 0x825D
#define GL_VIEWPORT_BOUNDS_RANGE_EXT 0x825D
#define GL_VIEWPORT_BOUNDS_RANGE_NV 0x825D
#define GL_VIEWPORT_BOUNDS_RANGE_OES 0x825D
#define GL_LAYER_PROVOKING_VERTEX 0x825E
#define GL_LAYER_PROVOKING_VERTEX_EXT 0x825E
#define GL_LAYER_PROVOKING_VERTEX_OES 0x825E
#define GL_VIEWPORT_INDEX_PROVOKING_VERTEX 0x825F
#define GL_VIEWPORT_INDEX_PROVOKING_VERTEX_EXT 0x825F
#define GL_VIEWPORT_INDEX_PROVOKING_VERTEX_NV 0x825F
#define GL_VIEWPORT_INDEX_PROVOKING_VERTEX_OES 0x825F
#define GL_UNDEFINED_VERTEX 0x8260
#define GL_UNDEFINED_VERTEX_EXT 0x8260
#define GL_UNDEFINED_VERTEX_OES 0x8260
#define GL_NO_RESET_NOTIFICATION 0x8261
#define GL_NO_RESET_NOTIFICATION_ARB 0x8261
#define GL_NO_RESET_NOTIFICATION_EXT 0x8261
#define GL_NO_RESET_NOTIFICATION_KHR 0x8261
#define GL_MAX_COMPUTE_SHARED_MEMORY_SIZE 0x8262
#define GL_MAX_COMPUTE_UNIFORM_COMPONENTS 0x8263
#define GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS 0x8264
#define GL_MAX_COMPUTE_ATOMIC_COUNTERS 0x8265
#define GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS 0x8266
#define GL_COMPUTE_WORK_GROUP_SIZE 0x8267
#define GL_DEBUG_TYPE_MARKER 0x8268
#define GL_DEBUG_TYPE_MARKER_KHR 0x8268
#define GL_DEBUG_TYPE_PUSH_GROUP 0x8269
#define GL_DEBUG_TYPE_PUSH_GROUP_KHR 0x8269
#define GL_DEBUG_TYPE_POP_GROUP 0x826A
#define GL_DEBUG_TYPE_POP_GROUP_KHR 0x826A
#define GL_DEBUG_SEVERITY_NOTIFICATION 0x826B
#define GL_DEBUG_SEVERITY_NOTIFICATION_KHR 0x826B
#define GL_MAX_DEBUG_GROUP_STACK_DEPTH 0x826C
#define GL_MAX_DEBUG_GROUP_STACK_DEPTH_KHR 0x826C
#define GL_DEBUG_GROUP_STACK_DEPTH 0x826D
#define GL_DEBUG_GROUP_STACK_DEPTH_KHR 0x826D
#define GL_MAX_UNIFORM_LOCATIONS 0x826E
#define GL_INTERNALFORMAT_SUPPORTED 0x826F
#define GL_INTERNALFORMAT_PREFERRED 0x8270
#define GL_INTERNALFORMAT_RED_SIZE 0x8271
#define GL_INTERNALFORMAT_GREEN_SIZE 0x8272
#define GL_INTERNALFORMAT_BLUE_SIZE 0x8273
#define GL_INTERNALFORMAT_ALPHA_SIZE 0x8274
#define GL_INTERNALFORMAT_DEPTH_SIZE 0x8275
#define GL_INTERNALFORMAT_STENCIL_SIZE 0x8276
#define GL_INTERNALFORMAT_SHARED_SIZE 0x8277
#define GL_INTERNALFORMAT_RED_TYPE 0x8278
#define GL_INTERNALFORMAT_GREEN_TYPE 0x8279
#define GL_INTERNALFORMAT_BLUE_TYPE 0x827A
#define GL_INTERNALFORMAT_ALPHA_TYPE 0x827B
#define GL_INTERNALFORMAT_DEPTH_TYPE 0x827C
#define GL_INTERNALFORMAT_STENCIL_TYPE 0x827D
#define GL_MAX_WIDTH 0x827E
#define GL_MAX_HEIGHT 0x827F
#define GL_MAX_DEPTH 0x8280
#define GL_MAX_LAYERS 0x8281
#define GL_MAX_COMBINED_DIMENSIONS 0x8282
#define GL_COLOR_COMPONENTS 0x8283
#define GL_DEPTH_COMPONENTS 0x8284
#define GL_STENCIL_COMPONENTS 0x8285
#define GL_COLOR_RENDERABLE 0x8286
#define GL_DEPTH_RENDERABLE 0x8287
#define GL_STENCIL_RENDERABLE 0x8288
#define GL_FRAMEBUFFER_RENDERABLE 0x8289
#define GL_FRAMEBUFFER_RENDERABLE_LAYERED 0x828A
#define GL_FRAMEBUFFER_BLEND 0x828B
#define GL_READ_PIXELS 0x828C
#define GL_READ_PIXELS_FORMAT 0x828D
#define GL_READ_PIXELS_TYPE 0x828E
#define GL_TEXTURE_IMAGE_FORMAT 0x828F
#define GL_TEXTURE_IMAGE_TYPE 0x8290
#define GL_GET_TEXTURE_IMAGE_FORMAT 0x8291
#define GL_GET_TEXTURE_IMAGE_TYPE 0x8292
#define GL_MIPMAP 0x8293
#define GL_MANUAL_GENERATE_MIPMAP 0x8294
#define GL_AUTO_GENERATE_MIPMAP 0x8295
#define GL_COLOR_ENCODING 0x8296
#define GL_SRGB_READ 0x8297
#define GL_SRGB_WRITE 0x8298
#define GL_SRGB_DECODE_ARB 0x8299
#define GL_FILTER 0x829A
#define GL_VERTEX_TEXTURE 0x829B
#define GL_TESS_CONTROL_TEXTURE 0x829C
#define GL_TESS_EVALUATION_TEXTURE 0x829D
#define GL_GEOMETRY_TEXTURE 0x829E
#define GL_FRAGMENT_TEXTURE 0x829F
#define GL_COMPUTE_TEXTURE 0x82A0
#define GL_TEXTURE_SHADOW 0x82A1
#define GL_TEXTURE_GATHER 0x82A2
#define GL_TEXTURE_GATHER_SHADOW 0x82A3
#define GL_SHADER_IMAGE_LOAD 0x82A4
#define GL_SHADER_IMAGE_STORE 0x82A5
#define GL_SHADER_IMAGE_ATOMIC 0x82A6
#define GL_IMAGE_TEXEL_SIZE 0x82A7
#define GL_IMAGE_COMPATIBILITY_CLASS 0x82A8
#define GL_IMAGE_PIXEL_FORMAT 0x82A9
#define GL_IMAGE_PIXEL_TYPE 0x82AA
#define GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST 0x82AC
#define GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST 0x82AD
#define GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE 0x82AE
#define GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE 0x82AF
#define GL_TEXTURE_COMPRESSED_BLOCK_WIDTH 0x82B1
#define GL_TEXTURE_COMPRESSED_BLOCK_HEIGHT 0x82B2
#define GL_TEXTURE_COMPRESSED_BLOCK_SIZE 0x82B3
#define GL_CLEAR_BUFFER 0x82B4
#define GL_TEXTURE_VIEW 0x82B5
#define GL_VIEW_COMPATIBILITY_CLASS 0x82B6
#define GL_FULL_SUPPORT 0x82B7
#define GL_CAVEAT_SUPPORT 0x82B8
#define GL_IMAGE_CLASS_4_X_32 0x82B9
#define GL_IMAGE_CLASS_2_X_32 0x82BA
#define GL_IMAGE_CLASS_1_X_32 0x82BB
#define GL_IMAGE_CLASS_4_X_16 0x82BC
#define GL_IMAGE_CLASS_2_X_16 0x82BD
#define GL_IMAGE_CLASS_1_X_16 0x82BE
#define GL_IMAGE_CLASS_4_X_8 0x82BF
#define GL_IMAGE_CLASS_2_X_8 0x82C0
#define GL_IMAGE_CLASS_1_X_8 0x82C1
#define GL_IMAGE_CLASS_11_11_10 0x82C2
#define GL_IMAGE_CLASS_10_10_10_2 0x82C3
#define GL_VIEW_CLASS_128_BITS 0x82C4
#define GL_VIEW_CLASS_96_BITS 0x82C5
#define GL_VIEW_CLASS_64_BITS 0x82C6
#define GL_VIEW_CLASS_48_BITS 0x82C7
#define GL_VIEW_CLASS_32_BITS 0x82C8
#define GL_VIEW_CLASS_24_BITS 0x82C9
#define GL_VIEW_CLASS_16_BITS 0x82CA
#define GL_VIEW_CLASS_8_BITS 0x82CB
#define GL_VIEW_CLASS_S3TC_DXT1_RGB 0x82CC
#define GL_VIEW_CLASS_S3TC_DXT1_RGBA 0x82CD
#define GL_VIEW_CLASS_S3TC_DXT3_RGBA 0x82CE
#define GL_VIEW_CLASS_S3TC_DXT5_RGBA 0x82CF
#define GL_VIEW_CLASS_RGTC1_RED 0x82D0
#define GL_VIEW_CLASS_RGTC2_RG 0x82D1
#define GL_VIEW_CLASS_BPTC_UNORM 0x82D2
#define GL_VIEW_CLASS_BPTC_FLOAT 0x82D3
#define GL_VERTEX_ATTRIB_BINDING 0x82D4
#define GL_VERTEX_ATTRIB_RELATIVE_OFFSET 0x82D5
#define GL_VERTEX_BINDING_DIVISOR 0x82D6
#define GL_VERTEX_BINDING_OFFSET 0x82D7
#define GL_VERTEX_BINDING_STRIDE 0x82D8
#define GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET 0x82D9
#define GL_MAX_VERTEX_ATTRIB_BINDINGS 0x82DA
#define GL_TEXTURE_VIEW_MIN_LEVEL 0x82DB
#define GL_TEXTURE_VIEW_MIN_LEVEL_EXT 0x82DB
#define GL_TEXTURE_VIEW_MIN_LEVEL_OES 0x82DB
#define GL_TEXTURE_VIEW_NUM_LEVELS 0x82DC
#define GL_TEXTURE_VIEW_NUM_LEVELS_EXT 0x82DC
#define GL_TEXTURE_VIEW_NUM_LEVELS_OES 0x82DC
#define GL_TEXTURE_VIEW_MIN_LAYER 0x82DD
#define GL_TEXTURE_VIEW_MIN_LAYER_EXT 0x82DD
#define GL_TEXTURE_VIEW_MIN_LAYER_OES 0x82DD
#define GL_TEXTURE_VIEW_NUM_LAYERS 0x82DE
#define GL_TEXTURE_VIEW_NUM_LAYERS_EXT 0x82DE
#define GL_TEXTURE_VIEW_NUM_LAYERS_OES 0x82DE
#define GL_TEXTURE_IMMUTABLE_LEVELS 0x82DF
#define GL_BUFFER 0x82E0
#define GL_BUFFER_KHR 0x82E0
#define GL_SHADER 0x82E1
#define GL_SHADER_KHR 0x82E1
#define GL_PROGRAM 0x82E2
#define GL_PROGRAM_KHR 0x82E2
#define GL_QUERY 0x82E3
#define GL_QUERY_KHR 0x82E3
#define GL_PROGRAM_PIPELINE 0x82E4
#define GL_PROGRAM_PIPELINE_KHR 0x82E4
#define GL_MAX_VERTEX_ATTRIB_STRIDE 0x82E5
#define GL_SAMPLER 0x82E6
#define GL_SAMPLER_KHR 0x82E6
#define GL_DISPLAY_LIST 0x82E7
#define GL_MAX_LABEL_LENGTH 0x82E8
#define GL_MAX_LABEL_LENGTH_KHR 0x82E8
#define GL_NUM_SHADING_LANGUAGE_VERSIONS 0x82E9
#define GL_QUERY_TARGET 0x82EA
#define GL_TRANSFORM_FEEDBACK_OVERFLOW 0x82EC
#define GL_TRANSFORM_FEEDBACK_OVERFLOW_ARB 0x82EC
#define GL_TRANSFORM_FEEDBACK_STREAM_OVERFLOW 0x82ED
#define GL_TRANSFORM_FEEDBACK_STREAM_OVERFLOW_ARB 0x82ED
#define GL_VERTICES_SUBMITTED 0x82EE
#define GL_VERTICES_SUBMITTED_ARB 0x82EE
#define GL_PRIMITIVES_SUBMITTED 0x82EF
#define GL_PRIMITIVES_SUBMITTED_ARB 0x82EF
#define GL_VERTEX_SHADER_INVOCATIONS 0x82F0
#define GL_VERTEX_SHADER_INVOCATIONS_ARB 0x82F0
#define GL_TESS_CONTROL_SHADER_PATCHES 0x82F1
#define GL_TESS_CONTROL_SHADER_PATCHES_ARB 0x82F1
#define GL_TESS_EVALUATION_SHADER_INVOCATIONS 0x82F2
#define GL_TESS_EVALUATION_SHADER_INVOCATIONS_ARB 0x82F2
#define GL_GEOMETRY_SHADER_PRIMITIVES_EMITTED 0x82F3
#define GL_GEOMETRY_SHADER_PRIMITIVES_EMITTED_ARB 0x82F3
#define GL_FRAGMENT_SHADER_INVOCATIONS 0x82F4
#define GL_FRAGMENT_SHADER_INVOCATIONS_ARB 0x82F4
#define GL_COMPUTE_SHADER_INVOCATIONS 0x82F5
#define GL_COMPUTE_SHADER_INVOCATIONS_ARB 0x82F5
#define GL_CLIPPING_INPUT_PRIMITIVES 0x82F6
#define GL_CLIPPING_INPUT_PRIMITIVES_ARB 0x82F6
#define GL_CLIPPING_OUTPUT_PRIMITIVES 0x82F7
#define GL_CLIPPING_OUTPUT_PRIMITIVES_ARB 0x82F7
#define GL_SPARSE_BUFFER_PAGE_SIZE_ARB 0x82F8
#define GL_MAX_CULL_DISTANCES 0x82F9
#define GL_MAX_CULL_DISTANCES_EXT 0x82F9
#define GL_MAX_COMBINED_CLIP_AND_CULL_DISTANCES 0x82FA
#define GL_MAX_COMBINED_CLIP_AND_CULL_DISTANCES_EXT 0x82FA
#define GL_CONTEXT_RELEASE_BEHAVIOR 0x82FB
#define GL_CONTEXT_RELEASE_BEHAVIOR_KHR 0x82FB
#define GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH 0x82FC
#define GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH_KHR 0x82FC
#define GL_ROBUST_GPU_TIMEOUT_MS_KHR 0x82FD
#define GL_DEPTH_PASS_INSTRUMENT_SGIX 0x8310
#define GL_DEPTH_PASS_INSTRUMENT_COUNTERS_SGIX 0x8311
#define GL_DEPTH_PASS_INSTRUMENT_MAX_SGIX 0x8312
#define GL_FRAGMENTS_INSTRUMENT_SGIX 0x8313
#define GL_FRAGMENTS_INSTRUMENT_COUNTERS_SGIX 0x8314
#define GL_FRAGMENTS_INSTRUMENT_MAX_SGIX 0x8315
#define GL_CONVOLUTION_HINT_SGIX 0x8316
#define GL_YCRCB_SGIX 0x8318
#define GL_YCRCBA_SGIX 0x8319
#define GL_UNPACK_COMPRESSED_SIZE_SGIX 0x831A
#define GL_PACK_MAX_COMPRESSED_SIZE_SGIX 0x831B
#define GL_PACK_COMPRESSED_SIZE_SGIX 0x831C
#define GL_SLIM8U_SGIX 0x831D
#define GL_SLIM10U_SGIX 0x831E
#define GL_SLIM12S_SGIX 0x831F
#define GL_ALPHA_MIN_SGIX 0x8320
#define GL_ALPHA_MAX_SGIX 0x8321
#define GL_SCALEBIAS_HINT_SGIX 0x8322
#define GL_ASYNC_MARKER_SGIX 0x8329
#define GL_PIXEL_TEX_GEN_MODE_SGIX 0x832B
#define GL_ASYNC_HISTOGRAM_SGIX 0x832C
#define GL_MAX_ASYNC_HISTOGRAM_SGIX 0x832D
#define GL_PIXEL_TRANSFORM_2D_EXT 0x8330
#define GL_PIXEL_MAG_FILTER_EXT 0x8331
#define GL_PIXEL_MIN_FILTER_EXT 0x8332
#define GL_PIXEL_CUBIC_WEIGHT_EXT 0x8333
#define GL_CUBIC_EXT 0x8334
#define GL_AVERAGE_EXT 0x8335
#define GL_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT 0x8336
#define GL_MAX_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT 0x8337
#define GL_PIXEL_TRANSFORM_2D_MATRIX_EXT 0x8338
#define GL_FRAGMENT_MATERIAL_EXT 0x8349
#define GL_FRAGMENT_NORMAL_EXT 0x834A
#define GL_FRAGMENT_COLOR_EXT 0x834C
#define GL_ATTENUATION_EXT 0x834D
#define GL_SHADOW_ATTENUATION_EXT 0x834E
#define GL_TEXTURE_APPLICATION_MODE_EXT 0x834F
#define GL_TEXTURE_LIGHT_EXT 0x8350
#define GL_TEXTURE_MATERIAL_FACE_EXT 0x8351
#define GL_TEXTURE_MATERIAL_PARAMETER_EXT 0x8352
#define GL_PIXEL_TEXTURE_SGIS 0x8353
#define GL_PIXEL_FRAGMENT_RGB_SOURCE_SGIS 0x8354
#define GL_PIXEL_FRAGMENT_ALPHA_SOURCE_SGIS 0x8355
#define GL_PIXEL_GROUP_COLOR_SGIS 0x8356
#define GL_LINE_QUALITY_HINT_SGIX 0x835B
#define GL_ASYNC_TEX_IMAGE_SGIX 0x835C
#define GL_ASYNC_DRAW_PIXELS_SGIX 0x835D
#define GL_ASYNC_READ_PIXELS_SGIX 0x835E
#define GL_MAX_ASYNC_TEX_IMAGE_SGIX 0x835F
#define GL_MAX_ASYNC_DRAW_PIXELS_SGIX 0x8360
#define GL_MAX_ASYNC_READ_PIXELS_SGIX 0x8361
#define GL_UNSIGNED_BYTE_2_3_3_REV 0x8362
#define GL_UNSIGNED_BYTE_2_3_3_REV_EXT 0x8362
#define GL_UNSIGNED_SHORT_5_6_5 0x8363
#define GL_UNSIGNED_SHORT_5_6_5_EXT 0x8363
#define GL_UNSIGNED_SHORT_5_6_5_REV 0x8364
#define GL_UNSIGNED_SHORT_5_6_5_REV_EXT 0x8364
#define GL_UNSIGNED_SHORT_4_4_4_4_REV 0x8365
#define GL_UNSIGNED_SHORT_4_4_4_4_REV_EXT 0x8365
#define GL_UNSIGNED_SHORT_4_4_4_4_REV_IMG 0x8365
#define GL_UNSIGNED_SHORT_1_5_5_5_REV 0x8366
#define GL_UNSIGNED_SHORT_1_5_5_5_REV_EXT 0x8366
#define GL_UNSIGNED_INT_8_8_8_8_REV 0x8367
#define GL_UNSIGNED_INT_8_8_8_8_REV_EXT 0x8367
#define GL_UNSIGNED_INT_2_10_10_10_REV 0x8368
#define GL_UNSIGNED_INT_2_10_10_10_REV_EXT 0x8368
#define GL_TEXTURE_MAX_CLAMP_S_SGIX 0x8369
#define GL_TEXTURE_MAX_CLAMP_T_SGIX 0x836A
#define GL_TEXTURE_MAX_CLAMP_R_SGIX 0x836B
#define GL_MIRRORED_REPEAT 0x8370
#define GL_MIRRORED_REPEAT_ARB 0x8370
#define GL_MIRRORED_REPEAT_IBM 0x8370
#define GL_MIRRORED_REPEAT_OES 0x8370
#define GL_RGB_S3TC 0x83A0
#define GL_RGB4_S3TC 0x83A1
#define GL_RGBA_S3TC 0x83A2
#define GL_RGBA4_S3TC 0x83A3
#define GL_RGBA_DXT5_S3TC 0x83A4
#define GL_RGBA4_DXT5_S3TC 0x83A5
#define GL_VERTEX_PRECLIP_SGIX 0x83EE
#define GL_VERTEX_PRECLIP_HINT_SGIX 0x83EF
#define GL_COMPRESSED_RGB_S3TC_DXT1_EXT 0x83F0
#define GL_COMPRESSED_RGBA_S3TC_DXT1_EXT 0x83F1
#define GL_COMPRESSED_RGBA_S3TC_DXT3_ANGLE 0x83F2
#define GL_COMPRESSED_RGBA_S3TC_DXT3_EXT 0x83F2
#define GL_COMPRESSED_RGBA_S3TC_DXT5_ANGLE 0x83F3
#define GL_COMPRESSED_RGBA_S3TC_DXT5_EXT 0x83F3
#define GL_PARALLEL_ARRAYS_INTEL 0x83F4
#define GL_VERTEX_ARRAY_PARALLEL_POINTERS_INTEL 0x83F5
#define GL_NORMAL_ARRAY_PARALLEL_POINTERS_INTEL 0x83F6
#define GL_COLOR_ARRAY_PARALLEL_POINTERS_INTEL 0x83F7
#define GL_TEXTURE_COORD_ARRAY_PARALLEL_POINTERS_INTEL 0x83F8
#define GL_PERFQUERY_DONOT_FLUSH_INTEL 0x83F9
#define GL_PERFQUERY_FLUSH_INTEL 0x83FA
#define GL_PERFQUERY_WAIT_INTEL 0x83FB
#define GL_BLACKHOLE_RENDER_INTEL 0x83FC
#define GL_CONSERVATIVE_RASTERIZATION_INTEL 0x83FE
#define GL_TEXTURE_MEMORY_LAYOUT_INTEL 0x83FF
#define GL_FRAGMENT_LIGHTING_SGIX 0x8400
#define GL_FRAGMENT_COLOR_MATERIAL_SGIX 0x8401
#define GL_FRAGMENT_COLOR_MATERIAL_FACE_SGIX 0x8402
#define GL_FRAGMENT_COLOR_MATERIAL_PARAMETER_SGIX 0x8403
#define GL_MAX_FRAGMENT_LIGHTS_SGIX 0x8404
#define GL_MAX_ACTIVE_LIGHTS_SGIX 0x8405
#define GL_CURRENT_RASTER_NORMAL_SGIX 0x8406
#define GL_LIGHT_ENV_MODE_SGIX 0x8407
#define GL_FRAGMENT_LIGHT_MODEL_LOCAL_VIEWER_SGIX 0x8408
#define GL_FRAGMENT_LIGHT_MODEL_TWO_SIDE_SGIX 0x8409
#define GL_FRAGMENT_LIGHT_MODEL_AMBIENT_SGIX 0x840A
#define GL_FRAGMENT_LIGHT_MODEL_NORMAL_INTERPOLATION_SGIX 0x840B
#define GL_FRAGMENT_LIGHT0_SGIX 0x840C
#define GL_FRAGMENT_LIGHT1_SGIX 0x840D
#define GL_FRAGMENT_LIGHT2_SGIX 0x840E
#define GL_FRAGMENT_LIGHT3_SGIX 0x840F
#define GL_FRAGMENT_LIGHT4_SGIX 0x8410
#define GL_FRAGMENT_LIGHT5_SGIX 0x8411
#define GL_FRAGMENT_LIGHT6_SGIX 0x8412
#define GL_FRAGMENT_LIGHT7_SGIX 0x8413
#define GL_PACK_RESAMPLE_SGIX 0x842E
#define GL_UNPACK_RESAMPLE_SGIX 0x842F
#define GL_RESAMPLE_DECIMATE_SGIX 0x8430
#define GL_RESAMPLE_REPLICATE_SGIX 0x8433
#define GL_RESAMPLE_ZERO_FILL_SGIX 0x8434
#define GL_TANGENT_ARRAY_EXT 0x8439
#define GL_BINORMAL_ARRAY_EXT 0x843A
#define GL_CURRENT_TANGENT_EXT 0x843B
#define GL_CURRENT_BINORMAL_EXT 0x843C
#define GL_TANGENT_ARRAY_TYPE_EXT 0x843E
#define GL_TANGENT_ARRAY_STRIDE_EXT 0x843F
#define GL_BINORMAL_ARRAY_TYPE_EXT 0x8440
#define GL_BINORMAL_ARRAY_STRIDE_EXT 0x8441
#define GL_TANGENT_ARRAY_POINTER_EXT 0x8442
#define GL_BINORMAL_ARRAY_POINTER_EXT 0x8443
#define GL_MAP1_TANGENT_EXT 0x8444
#define GL_MAP2_TANGENT_EXT 0x8445
#define GL_MAP1_BINORMAL_EXT 0x8446
#define GL_MAP2_BINORMAL_EXT 0x8447
#define GL_NEAREST_CLIPMAP_NEAREST_SGIX 0x844D
#define GL_NEAREST_CLIPMAP_LINEAR_SGIX 0x844E
#define GL_LINEAR_CLIPMAP_NEAREST_SGIX 0x844F
#define GL_FOG_COORDINATE_SOURCE 0x8450
#define GL_FOG_COORDINATE_SOURCE_EXT 0x8450
#define GL_FOG_COORD_SRC 0x8450
#define GL_FOG_COORD 0x8451
#define GL_FOG_COORDINATE 0x8451
#define GL_FOG_COORDINATE_EXT 0x8451
#define GL_FRAGMENT_DEPTH 0x8452
#define GL_FRAGMENT_DEPTH_EXT 0x8452
#define GL_CURRENT_FOG_COORD 0x8453
#define GL_CURRENT_FOG_COORDINATE 0x8453
#define GL_CURRENT_FOG_COORDINATE_EXT 0x8453
#define GL_FOG_COORDINATE_ARRAY_TYPE 0x8454
#define GL_FOG_COORDINATE_ARRAY_TYPE_EXT 0x8454
#define GL_FOG_COORD_ARRAY_TYPE 0x8454
#define GL_FOG_COORDINATE_ARRAY_STRIDE 0x8455
#define GL_FOG_COORDINATE_ARRAY_STRIDE_EXT 0x8455
#define GL_FOG_COORD_ARRAY_STRIDE 0x8455
#define GL_FOG_COORDINATE_ARRAY_POINTER 0x8456
#define GL_FOG_COORDINATE_ARRAY_POINTER_EXT 0x8456
#define GL_FOG_COORD_ARRAY_POINTER 0x8456
#define GL_FOG_COORDINATE_ARRAY 0x8457
#define GL_FOG_COORDINATE_ARRAY_EXT 0x8457
#define GL_FOG_COORD_ARRAY 0x8457
#define GL_COLOR_SUM 0x8458
#define GL_COLOR_SUM_ARB 0x8458
#define GL_COLOR_SUM_EXT 0x8458
#define GL_CURRENT_SECONDARY_COLOR 0x8459
#define GL_CURRENT_SECONDARY_COLOR_EXT 0x8459
#define GL_SECONDARY_COLOR_ARRAY_SIZE 0x845A
#define GL_SECONDARY_COLOR_ARRAY_SIZE_EXT 0x845A
#define GL_SECONDARY_COLOR_ARRAY_TYPE 0x845B
#define GL_SECONDARY_COLOR_ARRAY_TYPE_EXT 0x845B
#define GL_SECONDARY_COLOR_ARRAY_STRIDE 0x845C
#define GL_SECONDARY_COLOR_ARRAY_STRIDE_EXT 0x845C
#define GL_SECONDARY_COLOR_ARRAY_POINTER 0x845D
#define GL_SECONDARY_COLOR_ARRAY_POINTER_EXT 0x845D
#define GL_SECONDARY_COLOR_ARRAY 0x845E
#define GL_SECONDARY_COLOR_ARRAY_EXT 0x845E
#define GL_CURRENT_RASTER_SECONDARY_COLOR 0x845F
#define GL_ALIASED_POINT_SIZE_RANGE 0x846D
#define GL_ALIASED_LINE_WIDTH_RANGE 0x846E
#define GL_SCREEN_COORDINATES_REND 0x8490
#define GL_INVERTED_SCREEN_W_REND 0x8491
#define GL_TEXTURE0 0x84C0
#define GL_TEXTURE0_ARB 0x84C0
#define GL_TEXTURE1 0x84C1
#define GL_TEXTURE1_ARB 0x84C1
#define GL_TEXTURE2 0x84C2
#define GL_TEXTURE2_ARB 0x84C2
#define GL_TEXTURE3 0x84C3
#define GL_TEXTURE3_ARB 0x84C3
#define GL_TEXTURE4 0x84C4
#define GL_TEXTURE4_ARB 0x84C4
#define GL_TEXTURE5 0x84C5
#define GL_TEXTURE5_ARB 0x84C5
#define GL_TEXTURE6 0x84C6
#define GL_TEXTURE6_ARB 0x84C6
#define GL_TEXTURE7 0x84C7
#define GL_TEXTURE7_ARB 0x84C7
#define GL_TEXTURE8 0x84C8
#define GL_TEXTURE8_ARB 0x84C8
#define GL_TEXTURE9 0x84C9
#define GL_TEXTURE9_ARB 0x84C9
#define GL_TEXTURE10 0x84CA
#define GL_TEXTURE10_ARB 0x84CA
#define GL_TEXTURE11 0x84CB
#define GL_TEXTURE11_ARB 0x84CB
#define GL_TEXTURE12 0x84CC
#define GL_TEXTURE12_ARB 0x84CC
#define GL_TEXTURE13 0x84CD
#define GL_TEXTURE13_ARB 0x84CD
#define GL_TEXTURE14 0x84CE
#define GL_TEXTURE14_ARB 0x84CE
#define GL_TEXTURE15 0x84CF
#define GL_TEXTURE15_ARB 0x84CF
#define GL_TEXTURE16 0x84D0
#define GL_TEXTURE16_ARB 0x84D0
#define GL_TEXTURE17 0x84D1
#define GL_TEXTURE17_ARB 0x84D1
#define GL_TEXTURE18 0x84D2
#define GL_TEXTURE18_ARB 0x84D2
#define GL_TEXTURE19 0x84D3
#define GL_TEXTURE19_ARB 0x84D3
#define GL_TEXTURE20 0x84D4
#define GL_TEXTURE20_ARB 0x84D4
#define GL_TEXTURE21 0x84D5
#define GL_TEXTURE21_ARB 0x84D5
#define GL_TEXTURE22 0x84D6
#define GL_TEXTURE22_ARB 0x84D6
#define GL_TEXTURE23 0x84D7
#define GL_TEXTURE23_ARB 0x84D7
#define GL_TEXTURE24 0x84D8
#define GL_TEXTURE24_ARB 0x84D8
#define GL_TEXTURE25 0x84D9
#define GL_TEXTURE25_ARB 0x84D9
#define GL_TEXTURE26 0x84DA
#define GL_TEXTURE26_ARB 0x84DA
#define GL_TEXTURE27 0x84DB
#define GL_TEXTURE27_ARB 0x84DB
#define GL_TEXTURE28 0x84DC
#define GL_TEXTURE28_ARB 0x84DC
#define GL_TEXTURE29 0x84DD
#define GL_TEXTURE29_ARB 0x84DD
#define GL_TEXTURE30 0x84DE
#define GL_TEXTURE30_ARB 0x84DE
#define GL_TEXTURE31 0x84DF
#define GL_TEXTURE31_ARB 0x84DF
#define GL_ACTIVE_TEXTURE 0x84E0
#define GL_ACTIVE_TEXTURE_ARB 0x84E0
#define GL_CLIENT_ACTIVE_TEXTURE 0x84E1
#define GL_CLIENT_ACTIVE_TEXTURE_ARB 0x84E1
#define GL_MAX_TEXTURE_UNITS 0x84E2
#define GL_MAX_TEXTURE_UNITS_ARB 0x84E2
#define GL_PATH_TRANSPOSE_MODELVIEW_MATRIX_NV 0x84E3
#define GL_TRANSPOSE_MODELVIEW_MATRIX 0x84E3
#define GL_TRANSPOSE_MODELVIEW_MATRIX_ARB 0x84E3
#define GL_PATH_TRANSPOSE_PROJECTION_MATRIX_NV 0x84E4
#define GL_TRANSPOSE_PROJECTION_MATRIX 0x84E4
#define GL_TRANSPOSE_PROJECTION_MATRIX_ARB 0x84E4
#define GL_TRANSPOSE_TEXTURE_MATRIX 0x84E5
#define GL_TRANSPOSE_TEXTURE_MATRIX_ARB 0x84E5
#define GL_TRANSPOSE_COLOR_MATRIX 0x84E6
#define GL_TRANSPOSE_COLOR_MATRIX_ARB 0x84E6
#define GL_SUBTRACT 0x84E7
#define GL_SUBTRACT_ARB 0x84E7
#define GL_MAX_RENDERBUFFER_SIZE 0x84E8
#define GL_MAX_RENDERBUFFER_SIZE_EXT 0x84E8
#define GL_MAX_RENDERBUFFER_SIZE_OES 0x84E8
#define GL_COMPRESSED_ALPHA 0x84E9
#define GL_COMPRESSED_ALPHA_ARB 0x84E9
#define GL_COMPRESSED_LUMINANCE 0x84EA
#define GL_COMPRESSED_LUMINANCE_ARB 0x84EA
#define GL_COMPRESSED_LUMINANCE_ALPHA 0x84EB
#define GL_COMPRESSED_LUMINANCE_ALPHA_ARB 0x84EB
#define GL_COMPRESSED_INTENSITY 0x84EC
#define GL_COMPRESSED_INTENSITY_ARB 0x84EC
#define GL_COMPRESSED_RGB 0x84ED
#define GL_COMPRESSED_RGB_ARB 0x84ED
#define GL_COMPRESSED_RGBA 0x84EE
#define GL_COMPRESSED_RGBA_ARB 0x84EE
#define GL_TEXTURE_COMPRESSION_HINT 0x84EF
#define GL_TEXTURE_COMPRESSION_HINT_ARB 0x84EF
#define GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER 0x84F0
#define GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER 0x84F1
#define GL_ALL_COMPLETED_NV 0x84F2
#define GL_FENCE_STATUS_NV 0x84F3
#define GL_FENCE_CONDITION_NV 0x84F4
#define GL_TEXTURE_RECTANGLE 0x84F5
#define GL_TEXTURE_RECTANGLE_ARB 0x84F5
#define GL_TEXTURE_RECTANGLE_NV 0x84F5
#define GL_TEXTURE_BINDING_RECTANGLE 0x84F6
#define GL_TEXTURE_BINDING_RECTANGLE_ARB 0x84F6
#define GL_TEXTURE_BINDING_RECTANGLE_NV 0x84F6
#define GL_PROXY_TEXTURE_RECTANGLE 0x84F7
#define GL_PROXY_TEXTURE_RECTANGLE_ARB 0x84F7
#define GL_PROXY_TEXTURE_RECTANGLE_NV 0x84F7
#define GL_MAX_RECTANGLE_TEXTURE_SIZE 0x84F8
#define GL_MAX_RECTANGLE_TEXTURE_SIZE_ARB 0x84F8
#define GL_MAX_RECTANGLE_TEXTURE_SIZE_NV 0x84F8
#define GL_DEPTH_STENCIL 0x84F9
#define GL_DEPTH_STENCIL_EXT 0x84F9
#define GL_DEPTH_STENCIL_NV 0x84F9
#define GL_DEPTH_STENCIL_OES 0x84F9
#define GL_UNSIGNED_INT_24_8 0x84FA
#define GL_UNSIGNED_INT_24_8_EXT 0x84FA
#define GL_UNSIGNED_INT_24_8_NV 0x84FA
#define GL_UNSIGNED_INT_24_8_OES 0x84FA
#define GL_MAX_TEXTURE_LOD_BIAS 0x84FD
#define GL_MAX_TEXTURE_LOD_BIAS_EXT 0x84FD
#define GL_TEXTURE_MAX_ANISOTROPY 0x84FE
#define GL_TEXTURE_MAX_ANISOTROPY_EXT 0x84FE
#define GL_MAX_TEXTURE_MAX_ANISOTROPY 0x84FF
#define GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT 0x84FF
#define GL_TEXTURE_FILTER_CONTROL 0x8500
#define GL_TEXTURE_FILTER_CONTROL_EXT 0x8500
#define GL_TEXTURE_LOD_BIAS 0x8501
#define GL_TEXTURE_LOD_BIAS_EXT 0x8501
#define GL_MODELVIEW1_STACK_DEPTH_EXT 0x8502
#define GL_COMBINE4_NV 0x8503
#define GL_MAX_SHININESS_NV 0x8504
#define GL_MAX_SPOT_EXPONENT_NV 0x8505
#define GL_MODELVIEW1_MATRIX_EXT 0x8506
#define GL_INCR_WRAP 0x8507
#define GL_INCR_WRAP_EXT 0x8507
#define GL_INCR_WRAP_OES 0x8507
#define GL_DECR_WRAP 0x8508
#define GL_DECR_WRAP_EXT 0x8508
#define GL_DECR_WRAP_OES 0x8508
#define GL_VERTEX_WEIGHTING_EXT 0x8509
#define GL_MODELVIEW1_ARB 0x850A
#define GL_MODELVIEW1_EXT 0x850A
#define GL_CURRENT_VERTEX_WEIGHT_EXT 0x850B
#define GL_VERTEX_WEIGHT_ARRAY_EXT 0x850C
#define GL_VERTEX_WEIGHT_ARRAY_SIZE_EXT 0x850D
#define GL_VERTEX_WEIGHT_ARRAY_TYPE_EXT 0x850E
#define GL_VERTEX_WEIGHT_ARRAY_STRIDE_EXT 0x850F
#define GL_VERTEX_WEIGHT_ARRAY_POINTER_EXT 0x8510
#define GL_NORMAL_MAP 0x8511
#define GL_NORMAL_MAP_ARB 0x8511
#define GL_NORMAL_MAP_EXT 0x8511
#define GL_NORMAL_MAP_NV 0x8511
#define GL_NORMAL_MAP_OES 0x8511
#define GL_REFLECTION_MAP 0x8512
#define GL_REFLECTION_MAP_ARB 0x8512
#define GL_REFLECTION_MAP_EXT 0x8512
#define GL_REFLECTION_MAP_NV 0x8512
#define GL_REFLECTION_MAP_OES 0x8512
#define GL_TEXTURE_CUBE_MAP 0x8513
#define GL_TEXTURE_CUBE_MAP_ARB 0x8513
#define GL_TEXTURE_CUBE_MAP_EXT 0x8513
#define GL_TEXTURE_CUBE_MAP_OES 0x8513
#define GL_TEXTURE_BINDING_CUBE_MAP 0x8514
#define GL_TEXTURE_BINDING_CUBE_MAP_ARB 0x8514
#define GL_TEXTURE_BINDING_CUBE_MAP_EXT 0x8514
#define GL_TEXTURE_BINDING_CUBE_MAP_OES 0x8514
#define GL_TEXTURE_CUBE_MAP_POSITIVE_X 0x8515
#define GL_TEXTURE_CUBE_MAP_POSITIVE_X_ARB 0x8515
#define GL_TEXTURE_CUBE_MAP_POSITIVE_X_EXT 0x8515
#define GL_TEXTURE_CUBE_MAP_POSITIVE_X_OES 0x8515
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_X 0x8516
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_X_ARB 0x8516
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_X_EXT 0x8516
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_X_OES 0x8516
#define GL_TEXTURE_CUBE_MAP_POSITIVE_Y 0x8517
#define GL_TEXTURE_CUBE_MAP_POSITIVE_Y_ARB 0x8517
#define GL_TEXTURE_CUBE_MAP_POSITIVE_Y_EXT 0x8517
#define GL_TEXTURE_CUBE_MAP_POSITIVE_Y_OES 0x8517
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Y 0x8518
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_ARB 0x8518
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_EXT 0x8518
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_OES 0x8518
#define GL_TEXTURE_CUBE_MAP_POSITIVE_Z 0x8519
#define GL_TEXTURE_CUBE_MAP_POSITIVE_Z_ARB 0x8519
#define GL_TEXTURE_CUBE_MAP_POSITIVE_Z_EXT 0x8519
#define GL_TEXTURE_CUBE_MAP_POSITIVE_Z_OES 0x8519
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Z 0x851A
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_ARB 0x851A
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_EXT 0x851A
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_OES 0x851A
#define GL_PROXY_TEXTURE_CUBE_MAP 0x851B
#define GL_PROXY_TEXTURE_CUBE_MAP_ARB 0x851B
#define GL_PROXY_TEXTURE_CUBE_MAP_EXT 0x851B
#define GL_MAX_CUBE_MAP_TEXTURE_SIZE 0x851C
#define GL_MAX_CUBE_MAP_TEXTURE_SIZE_ARB 0x851C
#define GL_MAX_CUBE_MAP_TEXTURE_SIZE_EXT 0x851C
#define GL_MAX_CUBE_MAP_TEXTURE_SIZE_OES 0x851C
#define GL_VERTEX_ARRAY_RANGE_APPLE 0x851D
#define GL_VERTEX_ARRAY_RANGE_NV 0x851D
#define GL_VERTEX_ARRAY_RANGE_LENGTH_APPLE 0x851E
#define GL_VERTEX_ARRAY_RANGE_LENGTH_NV 0x851E
#define GL_VERTEX_ARRAY_RANGE_VALID_NV 0x851F
#define GL_VERTEX_ARRAY_STORAGE_HINT_APPLE 0x851F
#define GL_MAX_VERTEX_ARRAY_RANGE_ELEMENT_NV 0x8520
#define GL_VERTEX_ARRAY_RANGE_POINTER_APPLE 0x8521
#define GL_VERTEX_ARRAY_RANGE_POINTER_NV 0x8521
#define GL_REGISTER_COMBINERS_NV 0x8522
#define GL_VARIABLE_A_NV 0x8523
#define GL_VARIABLE_B_NV 0x8524
#define GL_VARIABLE_C_NV 0x8525
#define GL_VARIABLE_D_NV 0x8526
#define GL_VARIABLE_E_NV 0x8527
#define GL_VARIABLE_F_NV 0x8528
#define GL_VARIABLE_G_NV 0x8529
#define GL_CONSTANT_COLOR0_NV 0x852A
#define GL_CONSTANT_COLOR1_NV 0x852B
#define GL_PRIMARY_COLOR_NV 0x852C
#define GL_SECONDARY_COLOR_NV 0x852D
#define GL_SPARE0_NV 0x852E
#define GL_SPARE1_NV 0x852F
#define GL_DISCARD_NV 0x8530
#define GL_E_TIMES_F_NV 0x8531
#define GL_SPARE0_PLUS_SECONDARY_COLOR_NV 0x8532
#define GL_VERTEX_ARRAY_RANGE_WITHOUT_FLUSH_NV 0x8533
#define GL_MULTISAMPLE_FILTER_HINT_NV 0x8534
#define GL_PER_STAGE_CONSTANTS_NV 0x8535
#define GL_UNSIGNED_IDENTITY_NV 0x8536
#define GL_UNSIGNED_INVERT_NV 0x8537
#define GL_EXPAND_NORMAL_NV 0x8538
#define GL_EXPAND_NEGATE_NV 0x8539
#define GL_HALF_BIAS_NORMAL_NV 0x853A
#define GL_HALF_BIAS_NEGATE_NV 0x853B
#define GL_SIGNED_IDENTITY_NV 0x853C
#define GL_SIGNED_NEGATE_NV 0x853D
#define GL_SCALE_BY_TWO_NV 0x853E
#define GL_SCALE_BY_FOUR_NV 0x853F
#define GL_SCALE_BY_ONE_HALF_NV 0x8540
#define GL_BIAS_BY_NEGATIVE_ONE_HALF_NV 0x8541
#define GL_COMBINER_INPUT_NV 0x8542
#define GL_COMBINER_MAPPING_NV 0x8543
#define GL_COMBINER_COMPONENT_USAGE_NV 0x8544
#define GL_COMBINER_AB_DOT_PRODUCT_NV 0x8545
#define GL_COMBINER_CD_DOT_PRODUCT_NV 0x8546
#define GL_COMBINER_MUX_SUM_NV 0x8547
#define GL_COMBINER_SCALE_NV 0x8548
#define GL_COMBINER_BIAS_NV 0x8549
#define GL_COMBINER_AB_OUTPUT_NV 0x854A
#define GL_COMBINER_CD_OUTPUT_NV 0x854B
#define GL_COMBINER_SUM_OUTPUT_NV 0x854C
#define GL_MAX_GENERAL_COMBINERS_NV 0x854D
#define GL_NUM_GENERAL_COMBINERS_NV 0x854E
#define GL_COLOR_SUM_CLAMP_NV 0x854F
#define GL_COMBINER0_NV 0x8550
#define GL_COMBINER1_NV 0x8551
#define GL_COMBINER2_NV 0x8552
#define GL_COMBINER3_NV 0x8553
#define GL_COMBINER4_NV 0x8554
#define GL_COMBINER5_NV 0x8555
#define GL_COMBINER6_NV 0x8556
#define GL_COMBINER7_NV 0x8557
#define GL_PRIMITIVE_RESTART_NV 0x8558
#define GL_PRIMITIVE_RESTART_INDEX_NV 0x8559
#define GL_FOG_DISTANCE_MODE_NV 0x855A
#define GL_EYE_RADIAL_NV 0x855B
#define GL_EYE_PLANE_ABSOLUTE_NV 0x855C
#define GL_EMBOSS_LIGHT_NV 0x855D
#define GL_EMBOSS_CONSTANT_NV 0x855E
#define GL_EMBOSS_MAP_NV 0x855F
#define GL_RED_MIN_CLAMP_INGR 0x8560
#define GL_GREEN_MIN_CLAMP_INGR 0x8561
#define GL_BLUE_MIN_CLAMP_INGR 0x8562
#define GL_ALPHA_MIN_CLAMP_INGR 0x8563
#define GL_RED_MAX_CLAMP_INGR 0x8564
#define GL_GREEN_MAX_CLAMP_INGR 0x8565
#define GL_BLUE_MAX_CLAMP_INGR 0x8566
#define GL_ALPHA_MAX_CLAMP_INGR 0x8567
#define GL_INTERLACE_READ_INGR 0x8568
#define GL_COMBINE 0x8570
#define GL_COMBINE_ARB 0x8570
#define GL_COMBINE_EXT 0x8570
#define GL_COMBINE_RGB 0x8571
#define GL_COMBINE_RGB_ARB 0x8571
#define GL_COMBINE_RGB_EXT 0x8571
#define GL_COMBINE_ALPHA 0x8572
#define GL_COMBINE_ALPHA_ARB 0x8572
#define GL_COMBINE_ALPHA_EXT 0x8572
#define GL_RGB_SCALE 0x8573
#define GL_RGB_SCALE_ARB 0x8573
#define GL_RGB_SCALE_EXT 0x8573
#define GL_ADD_SIGNED 0x8574
#define GL_ADD_SIGNED_ARB 0x8574
#define GL_ADD_SIGNED_EXT 0x8574
#define GL_INTERPOLATE 0x8575
#define GL_INTERPOLATE_ARB 0x8575
#define GL_INTERPOLATE_EXT 0x8575
#define GL_CONSTANT 0x8576
#define GL_CONSTANT_ARB 0x8576
#define GL_CONSTANT_EXT 0x8576
#define GL_CONSTANT_NV 0x8576
#define GL_PRIMARY_COLOR 0x8577
#define GL_PRIMARY_COLOR_ARB 0x8577
#define GL_PRIMARY_COLOR_EXT 0x8577
#define GL_PREVIOUS 0x8578
#define GL_PREVIOUS_ARB 0x8578
#define GL_PREVIOUS_EXT 0x8578
#define GL_SOURCE0_RGB 0x8580
#define GL_SOURCE0_RGB_ARB 0x8580
#define GL_SOURCE0_RGB_EXT 0x8580
#define GL_SRC0_RGB 0x8580
#define GL_SOURCE1_RGB 0x8581
#define GL_SOURCE1_RGB_ARB 0x8581
#define GL_SOURCE1_RGB_EXT 0x8581
#define GL_SRC1_RGB 0x8581
#define GL_SOURCE2_RGB 0x8582
#define GL_SOURCE2_RGB_ARB 0x8582
#define GL_SOURCE2_RGB_EXT 0x8582
#define GL_SRC2_RGB 0x8582
#define GL_SOURCE3_RGB_NV 0x8583
#define GL_SOURCE0_ALPHA 0x8588
#define GL_SOURCE0_ALPHA_ARB 0x8588
#define GL_SOURCE0_ALPHA_EXT 0x8588
#define GL_SRC0_ALPHA 0x8588
#define GL_SOURCE1_ALPHA 0x8589
#define GL_SOURCE1_ALPHA_ARB 0x8589
#define GL_SOURCE1_ALPHA_EXT 0x8589
#define GL_SRC1_ALPHA 0x8589
#define GL_SRC1_ALPHA_EXT 0x8589
#define GL_SOURCE2_ALPHA 0x858A
#define GL_SOURCE2_ALPHA_ARB 0x858A
#define GL_SOURCE2_ALPHA_EXT 0x858A
#define GL_SRC2_ALPHA 0x858A
#define GL_SOURCE3_ALPHA_NV 0x858B
#define GL_OPERAND0_RGB 0x8590
#define GL_OPERAND0_RGB_ARB 0x8590
#define GL_OPERAND0_RGB_EXT 0x8590
#define GL_OPERAND1_RGB 0x8591
#define GL_OPERAND1_RGB_ARB 0x8591
#define GL_OPERAND1_RGB_EXT 0x8591
#define GL_OPERAND2_RGB 0x8592
#define GL_OPERAND2_RGB_ARB 0x8592
#define GL_OPERAND2_RGB_EXT 0x8592
#define GL_OPERAND3_RGB_NV 0x8593
#define GL_OPERAND0_ALPHA 0x8598
#define GL_OPERAND0_ALPHA_ARB 0x8598
#define GL_OPERAND0_ALPHA_EXT 0x8598
#define GL_OPERAND1_ALPHA 0x8599
#define GL_OPERAND1_ALPHA_ARB 0x8599
#define GL_OPERAND1_ALPHA_EXT 0x8599
#define GL_OPERAND2_ALPHA 0x859A
#define GL_OPERAND2_ALPHA_ARB 0x859A
#define GL_OPERAND2_ALPHA_EXT 0x859A
#define GL_OPERAND3_ALPHA_NV 0x859B
#define GL_PACK_SUBSAMPLE_RATE_SGIX 0x85A0
#define GL_UNPACK_SUBSAMPLE_RATE_SGIX 0x85A1
#define GL_PIXEL_SUBSAMPLE_4444_SGIX 0x85A2
#define GL_PIXEL_SUBSAMPLE_2424_SGIX 0x85A3
#define GL_PIXEL_SUBSAMPLE_4242_SGIX 0x85A4
#define GL_PERTURB_EXT 0x85AE
#define GL_TEXTURE_NORMAL_EXT 0x85AF
#define GL_LIGHT_MODEL_SPECULAR_VECTOR_APPLE 0x85B0
#define GL_TRANSFORM_HINT_APPLE 0x85B1
#define GL_UNPACK_CLIENT_STORAGE_APPLE 0x85B2
#define GL_BUFFER_OBJECT_APPLE 0x85B3
#define GL_STORAGE_CLIENT_APPLE 0x85B4
#define GL_VERTEX_ARRAY_BINDING 0x85B5
#define GL_VERTEX_ARRAY_BINDING_APPLE 0x85B5
#define GL_VERTEX_ARRAY_BINDING_OES 0x85B5
#define GL_TEXTURE_RANGE_LENGTH_APPLE 0x85B7
#define GL_TEXTURE_RANGE_POINTER_APPLE 0x85B8
#define GL_YCBCR_422_APPLE 0x85B9
#define GL_UNSIGNED_SHORT_8_8_APPLE 0x85BA
#define GL_UNSIGNED_SHORT_8_8_MESA 0x85BA
#define GL_UNSIGNED_SHORT_8_8_REV_APPLE 0x85BB
#define GL_UNSIGNED_SHORT_8_8_REV_MESA 0x85BB
#define GL_TEXTURE_STORAGE_HINT_APPLE 0x85BC
#define GL_STORAGE_PRIVATE_APPLE 0x85BD
#define GL_STORAGE_CACHED_APPLE 0x85BE
#define GL_STORAGE_SHARED_APPLE 0x85BF
#define GL_REPLACEMENT_CODE_ARRAY_SUN 0x85C0
#define GL_REPLACEMENT_CODE_ARRAY_TYPE_SUN 0x85C1
#define GL_REPLACEMENT_CODE_ARRAY_STRIDE_SUN 0x85C2
#define GL_REPLACEMENT_CODE_ARRAY_POINTER_SUN 0x85C3
#define GL_R1UI_V3F_SUN 0x85C4
#define GL_R1UI_C4UB_V3F_SUN 0x85C5
#define GL_R1UI_C3F_V3F_SUN 0x85C6
#define GL_R1UI_N3F_V3F_SUN 0x85C7
#define GL_R1UI_C4F_N3F_V3F_SUN 0x85C8
#define GL_R1UI_T2F_V3F_SUN 0x85C9
#define GL_R1UI_T2F_N3F_V3F_SUN 0x85CA
#define GL_R1UI_T2F_C4F_N3F_V3F_SUN 0x85CB
#define GL_SLICE_ACCUM_SUN 0x85CC
#define GL_QUAD_MESH_SUN 0x8614
#define GL_TRIANGLE_MESH_SUN 0x8615
#define GL_VERTEX_PROGRAM_ARB 0x8620
#define GL_VERTEX_PROGRAM_NV 0x8620
#define GL_VERTEX_STATE_PROGRAM_NV 0x8621
#define GL_VERTEX_ATTRIB_ARRAY_ENABLED 0x8622
#define GL_VERTEX_ATTRIB_ARRAY_ENABLED_ARB 0x8622
#define GL_ATTRIB_ARRAY_SIZE_NV 0x8623
#define GL_VERTEX_ATTRIB_ARRAY_SIZE 0x8623
#define GL_VERTEX_ATTRIB_ARRAY_SIZE_ARB 0x8623
#define GL_ATTRIB_ARRAY_STRIDE_NV 0x8624
#define GL_VERTEX_ATTRIB_ARRAY_STRIDE 0x8624
#define GL_VERTEX_ATTRIB_ARRAY_STRIDE_ARB 0x8624
#define GL_ATTRIB_ARRAY_TYPE_NV 0x8625
#define GL_VERTEX_ATTRIB_ARRAY_TYPE 0x8625
#define GL_VERTEX_ATTRIB_ARRAY_TYPE_ARB 0x8625
#define GL_CURRENT_ATTRIB_NV 0x8626
#define GL_CURRENT_VERTEX_ATTRIB 0x8626
#define GL_CURRENT_VERTEX_ATTRIB_ARB 0x8626
#define GL_PROGRAM_LENGTH_ARB 0x8627
#define GL_PROGRAM_LENGTH_NV 0x8627
#define GL_PROGRAM_STRING_ARB 0x8628
#define GL_PROGRAM_STRING_NV 0x8628
#define GL_MODELVIEW_PROJECTION_NV 0x8629
#define GL_IDENTITY_NV 0x862A
#define GL_INVERSE_NV 0x862B
#define GL_TRANSPOSE_NV 0x862C
#define GL_INVERSE_TRANSPOSE_NV 0x862D
#define GL_MAX_PROGRAM_MATRIX_STACK_DEPTH_ARB 0x862E
#define GL_MAX_TRACK_MATRIX_STACK_DEPTH_NV 0x862E
#define GL_MAX_PROGRAM_MATRICES_ARB 0x862F
#define GL_MAX_TRACK_MATRICES_NV 0x862F
#define GL_MATRIX0_NV 0x8630
#define GL_MATRIX1_NV 0x8631
#define GL_MATRIX2_NV 0x8632
#define GL_MATRIX3_NV 0x8633
#define GL_MATRIX4_NV 0x8634
#define GL_MATRIX5_NV 0x8635
#define GL_MATRIX6_NV 0x8636
#define GL_MATRIX7_NV 0x8637
#define GL_CURRENT_MATRIX_STACK_DEPTH_ARB 0x8640
#define GL_CURRENT_MATRIX_STACK_DEPTH_NV 0x8640
#define GL_CURRENT_MATRIX_ARB 0x8641
#define GL_CURRENT_MATRIX_NV 0x8641
#define GL_PROGRAM_POINT_SIZE 0x8642
#define GL_PROGRAM_POINT_SIZE_ARB 0x8642
#define GL_PROGRAM_POINT_SIZE_EXT 0x8642
#define GL_VERTEX_PROGRAM_POINT_SIZE 0x8642
#define GL_VERTEX_PROGRAM_POINT_SIZE_ARB 0x8642
#define GL_VERTEX_PROGRAM_POINT_SIZE_NV 0x8642
#define GL_VERTEX_PROGRAM_TWO_SIDE 0x8643
#define GL_VERTEX_PROGRAM_TWO_SIDE_ARB 0x8643
#define GL_VERTEX_PROGRAM_TWO_SIDE_NV 0x8643
#define GL_PROGRAM_PARAMETER_NV 0x8644
#define GL_ATTRIB_ARRAY_POINTER_NV 0x8645
#define GL_VERTEX_ATTRIB_ARRAY_POINTER 0x8645
#define GL_VERTEX_ATTRIB_ARRAY_POINTER_ARB 0x8645
#define GL_PROGRAM_TARGET_NV 0x8646
#define GL_PROGRAM_RESIDENT_NV 0x8647
#define GL_TRACK_MATRIX_NV 0x8648
#define GL_TRACK_MATRIX_TRANSFORM_NV 0x8649
#define GL_VERTEX_PROGRAM_BINDING_NV 0x864A
#define GL_PROGRAM_ERROR_POSITION_ARB 0x864B
#define GL_PROGRAM_ERROR_POSITION_NV 0x864B
#define GL_OFFSET_TEXTURE_RECTANGLE_NV 0x864C
#define GL_OFFSET_TEXTURE_RECTANGLE_SCALE_NV 0x864D
#define GL_DOT_PRODUCT_TEXTURE_RECTANGLE_NV 0x864E
#define GL_DEPTH_CLAMP 0x864F
#define GL_DEPTH_CLAMP_NV 0x864F
#define GL_VERTEX_ATTRIB_ARRAY0_NV 0x8650
#define GL_VERTEX_ATTRIB_ARRAY1_NV 0x8651
#define GL_VERTEX_ATTRIB_ARRAY2_NV 0x8652
#define GL_VERTEX_ATTRIB_ARRAY3_NV 0x8653
#define GL_VERTEX_ATTRIB_ARRAY4_NV 0x8654
#define GL_VERTEX_ATTRIB_ARRAY5_NV 0x8655
#define GL_VERTEX_ATTRIB_ARRAY6_NV 0x8656
#define GL_VERTEX_ATTRIB_ARRAY7_NV 0x8657
#define GL_VERTEX_ATTRIB_ARRAY8_NV 0x8658
#define GL_VERTEX_ATTRIB_ARRAY9_NV 0x8659
#define GL_VERTEX_ATTRIB_ARRAY10_NV 0x865A
#define GL_VERTEX_ATTRIB_ARRAY11_NV 0x865B
#define GL_VERTEX_ATTRIB_ARRAY12_NV 0x865C
#define GL_VERTEX_ATTRIB_ARRAY13_NV 0x865D
#define GL_VERTEX_ATTRIB_ARRAY14_NV 0x865E
#define GL_VERTEX_ATTRIB_ARRAY15_NV 0x865F
#define GL_MAP1_VERTEX_ATTRIB0_4_NV 0x8660
#define GL_MAP1_VERTEX_ATTRIB1_4_NV 0x8661
#define GL_MAP1_VERTEX_ATTRIB2_4_NV 0x8662
#define GL_MAP1_VERTEX_ATTRIB3_4_NV 0x8663
#define GL_MAP1_VERTEX_ATTRIB4_4_NV 0x8664
#define GL_MAP1_VERTEX_ATTRIB5_4_NV 0x8665
#define GL_MAP1_VERTEX_ATTRIB6_4_NV 0x8666
#define GL_MAP1_VERTEX_ATTRIB7_4_NV 0x8667
#define GL_MAP1_VERTEX_ATTRIB8_4_NV 0x8668
#define GL_MAP1_VERTEX_ATTRIB9_4_NV 0x8669
#define GL_MAP1_VERTEX_ATTRIB10_4_NV 0x866A
#define GL_MAP1_VERTEX_ATTRIB11_4_NV 0x866B
#define GL_MAP1_VERTEX_ATTRIB12_4_NV 0x866C
#define GL_MAP1_VERTEX_ATTRIB13_4_NV 0x866D
#define GL_MAP1_VERTEX_ATTRIB14_4_NV 0x866E
#define GL_MAP1_VERTEX_ATTRIB15_4_NV 0x866F
#define GL_MAP2_VERTEX_ATTRIB0_4_NV 0x8670
#define GL_MAP2_VERTEX_ATTRIB1_4_NV 0x8671
#define GL_MAP2_VERTEX_ATTRIB2_4_NV 0x8672
#define GL_MAP2_VERTEX_ATTRIB3_4_NV 0x8673
#define GL_MAP2_VERTEX_ATTRIB4_4_NV 0x8674
#define GL_MAP2_VERTEX_ATTRIB5_4_NV 0x8675
#define GL_MAP2_VERTEX_ATTRIB6_4_NV 0x8676
#define GL_MAP2_VERTEX_ATTRIB7_4_NV 0x8677
#define GL_PROGRAM_BINDING_ARB 0x8677
#define GL_MAP2_VERTEX_ATTRIB8_4_NV 0x8678
#define GL_MAP2_VERTEX_ATTRIB9_4_NV 0x8679
#define GL_MAP2_VERTEX_ATTRIB10_4_NV 0x867A
#define GL_MAP2_VERTEX_ATTRIB11_4_NV 0x867B
#define GL_MAP2_VERTEX_ATTRIB12_4_NV 0x867C
#define GL_MAP2_VERTEX_ATTRIB13_4_NV 0x867D
#define GL_MAP2_VERTEX_ATTRIB14_4_NV 0x867E
#define GL_MAP2_VERTEX_ATTRIB15_4_NV 0x867F
#define GL_TEXTURE_COMPRESSED_IMAGE_SIZE 0x86A0
#define GL_TEXTURE_COMPRESSED_IMAGE_SIZE_ARB 0x86A0
#define GL_TEXTURE_COMPRESSED 0x86A1
#define GL_TEXTURE_COMPRESSED_ARB 0x86A1
#define GL_NUM_COMPRESSED_TEXTURE_FORMATS 0x86A2
#define GL_NUM_COMPRESSED_TEXTURE_FORMATS_ARB 0x86A2
#define GL_COMPRESSED_TEXTURE_FORMATS 0x86A3
#define GL_COMPRESSED_TEXTURE_FORMATS_ARB 0x86A3
#define GL_MAX_VERTEX_UNITS_ARB 0x86A4
#define GL_MAX_VERTEX_UNITS_OES 0x86A4
#define GL_ACTIVE_VERTEX_UNITS_ARB 0x86A5
#define GL_WEIGHT_SUM_UNITY_ARB 0x86A6
#define GL_VERTEX_BLEND_ARB 0x86A7
#define GL_CURRENT_WEIGHT_ARB 0x86A8
#define GL_WEIGHT_ARRAY_TYPE_ARB 0x86A9
#define GL_WEIGHT_ARRAY_TYPE_OES 0x86A9
#define GL_WEIGHT_ARRAY_STRIDE_ARB 0x86AA
#define GL_WEIGHT_ARRAY_STRIDE_OES 0x86AA
#define GL_WEIGHT_ARRAY_SIZE_ARB 0x86AB
#define GL_WEIGHT_ARRAY_SIZE_OES 0x86AB
#define GL_WEIGHT_ARRAY_POINTER_ARB 0x86AC
#define GL_WEIGHT_ARRAY_POINTER_OES 0x86AC
#define GL_WEIGHT_ARRAY_ARB 0x86AD
#define GL_WEIGHT_ARRAY_OES 0x86AD
#define GL_DOT3_RGB 0x86AE
#define GL_DOT3_RGB_ARB 0x86AE
#define GL_DOT3_RGBA 0x86AF
#define GL_DOT3_RGBA_ARB 0x86AF
#define GL_DOT3_RGBA_IMG 0x86AF
#define GL_COMPRESSED_RGB_FXT1_3DFX 0x86B0
#define GL_COMPRESSED_RGBA_FXT1_3DFX 0x86B1
#define GL_MULTISAMPLE_3DFX 0x86B2
#define GL_SAMPLE_BUFFERS_3DFX 0x86B3
#define GL_SAMPLES_3DFX 0x86B4
#define GL_EVAL_2D_NV 0x86C0
#define GL_EVAL_TRIANGULAR_2D_NV 0x86C1
#define GL_MAP_TESSELLATION_NV 0x86C2
#define GL_MAP_ATTRIB_U_ORDER_NV 0x86C3
#define GL_MAP_ATTRIB_V_ORDER_NV 0x86C4
#define GL_EVAL_FRACTIONAL_TESSELLATION_NV 0x86C5
#define GL_EVAL_VERTEX_ATTRIB0_NV 0x86C6
#define GL_EVAL_VERTEX_ATTRIB1_NV 0x86C7
#define GL_EVAL_VERTEX_ATTRIB2_NV 0x86C8
#define GL_EVAL_VERTEX_ATTRIB3_NV 0x86C9
#define GL_EVAL_VERTEX_ATTRIB4_NV 0x86CA
#define GL_EVAL_VERTEX_ATTRIB5_NV 0x86CB
#define GL_EVAL_VERTEX_ATTRIB6_NV 0x86CC
#define GL_EVAL_VERTEX_ATTRIB7_NV 0x86CD
#define GL_EVAL_VERTEX_ATTRIB8_NV 0x86CE
#define GL_EVAL_VERTEX_ATTRIB9_NV 0x86CF
#define GL_EVAL_VERTEX_ATTRIB10_NV 0x86D0
#define GL_EVAL_VERTEX_ATTRIB11_NV 0x86D1
#define GL_EVAL_VERTEX_ATTRIB12_NV 0x86D2
#define GL_EVAL_VERTEX_ATTRIB13_NV 0x86D3
#define GL_EVAL_VERTEX_ATTRIB14_NV 0x86D4
#define GL_EVAL_VERTEX_ATTRIB15_NV 0x86D5
#define GL_MAX_MAP_TESSELLATION_NV 0x86D6
#define GL_MAX_RATIONAL_EVAL_ORDER_NV 0x86D7
#define GL_MAX_PROGRAM_PATCH_ATTRIBS_NV 0x86D8
#define GL_RGBA_UNSIGNED_DOT_PRODUCT_MAPPING_NV 0x86D9
#define GL_UNSIGNED_INT_S8_S8_8_8_NV 0x86DA
#define GL_UNSIGNED_INT_8_8_S8_S8_REV_NV 0x86DB
#define GL_DSDT_MAG_INTENSITY_NV 0x86DC
#define GL_SHADER_CONSISTENT_NV 0x86DD
#define GL_TEXTURE_SHADER_NV 0x86DE
#define GL_SHADER_OPERATION_NV 0x86DF
#define GL_CULL_MODES_NV 0x86E0
#define GL_OFFSET_TEXTURE_2D_MATRIX_NV 0x86E1
#define GL_OFFSET_TEXTURE_MATRIX_NV 0x86E1
#define GL_OFFSET_TEXTURE_2D_SCALE_NV 0x86E2
#define GL_OFFSET_TEXTURE_SCALE_NV 0x86E2
#define GL_OFFSET_TEXTURE_2D_BIAS_NV 0x86E3
#define GL_OFFSET_TEXTURE_BIAS_NV 0x86E3
#define GL_PREVIOUS_TEXTURE_INPUT_NV 0x86E4
#define GL_CONST_EYE_NV 0x86E5
#define GL_PASS_THROUGH_NV 0x86E6
#define GL_CULL_FRAGMENT_NV 0x86E7
#define GL_OFFSET_TEXTURE_2D_NV 0x86E8
#define GL_DEPENDENT_AR_TEXTURE_2D_NV 0x86E9
#define GL_DEPENDENT_GB_TEXTURE_2D_NV 0x86EA
#define GL_SURFACE_STATE_NV 0x86EB
#define GL_DOT_PRODUCT_NV 0x86EC
#define GL_DOT_PRODUCT_DEPTH_REPLACE_NV 0x86ED
#define GL_DOT_PRODUCT_TEXTURE_2D_NV 0x86EE
#define GL_DOT_PRODUCT_TEXTURE_3D_NV 0x86EF
#define GL_DOT_PRODUCT_TEXTURE_CUBE_MAP_NV 0x86F0
#define GL_DOT_PRODUCT_DIFFUSE_CUBE_MAP_NV 0x86F1
#define GL_DOT_PRODUCT_REFLECT_CUBE_MAP_NV 0x86F2
#define GL_DOT_PRODUCT_CONST_EYE_REFLECT_CUBE_MAP_NV 0x86F3
#define GL_HILO_NV 0x86F4
#define GL_DSDT_NV 0x86F5
#define GL_DSDT_MAG_NV 0x86F6
#define GL_DSDT_MAG_VIB_NV 0x86F7
#define GL_HILO16_NV 0x86F8
#define GL_SIGNED_HILO_NV 0x86F9
#define GL_SIGNED_HILO16_NV 0x86FA
#define GL_SIGNED_RGBA_NV 0x86FB
#define GL_SIGNED_RGBA8_NV 0x86FC
#define GL_SURFACE_REGISTERED_NV 0x86FD
#define GL_SIGNED_RGB_NV 0x86FE
#define GL_SIGNED_RGB8_NV 0x86FF
#define GL_SURFACE_MAPPED_NV 0x8700
#define GL_SIGNED_LUMINANCE_NV 0x8701
#define GL_SIGNED_LUMINANCE8_NV 0x8702
#define GL_SIGNED_LUMINANCE_ALPHA_NV 0x8703
#define GL_SIGNED_LUMINANCE8_ALPHA8_NV 0x8704
#define GL_SIGNED_ALPHA_NV 0x8705
#define GL_SIGNED_ALPHA8_NV 0x8706
#define GL_SIGNED_INTENSITY_NV 0x8707
#define GL_SIGNED_INTENSITY8_NV 0x8708
#define GL_DSDT8_NV 0x8709
#define GL_DSDT8_MAG8_NV 0x870A
#define GL_DSDT8_MAG8_INTENSITY8_NV 0x870B
#define GL_SIGNED_RGB_UNSIGNED_ALPHA_NV 0x870C
#define GL_SIGNED_RGB8_UNSIGNED_ALPHA8_NV 0x870D
#define GL_HI_SCALE_NV 0x870E
#define GL_LO_SCALE_NV 0x870F
#define GL_DS_SCALE_NV 0x8710
#define GL_DT_SCALE_NV 0x8711
#define GL_MAGNITUDE_SCALE_NV 0x8712
#define GL_VIBRANCE_SCALE_NV 0x8713
#define GL_HI_BIAS_NV 0x8714
#define GL_LO_BIAS_NV 0x8715
#define GL_DS_BIAS_NV 0x8716
#define GL_DT_BIAS_NV 0x8717
#define GL_MAGNITUDE_BIAS_NV 0x8718
#define GL_VIBRANCE_BIAS_NV 0x8719
#define GL_TEXTURE_BORDER_VALUES_NV 0x871A
#define GL_TEXTURE_HI_SIZE_NV 0x871B
#define GL_TEXTURE_LO_SIZE_NV 0x871C
#define GL_TEXTURE_DS_SIZE_NV 0x871D
#define GL_TEXTURE_DT_SIZE_NV 0x871E
#define GL_TEXTURE_MAG_SIZE_NV 0x871F
#define GL_MODELVIEW2_ARB 0x8722
#define GL_MODELVIEW3_ARB 0x8723
#define GL_MODELVIEW4_ARB 0x8724
#define GL_MODELVIEW5_ARB 0x8725
#define GL_MODELVIEW6_ARB 0x8726
#define GL_MODELVIEW7_ARB 0x8727
#define GL_MODELVIEW8_ARB 0x8728
#define GL_MODELVIEW9_ARB 0x8729
#define GL_MODELVIEW10_ARB 0x872A
#define GL_MODELVIEW11_ARB 0x872B
#define GL_MODELVIEW12_ARB 0x872C
#define GL_MODELVIEW13_ARB 0x872D
#define GL_MODELVIEW14_ARB 0x872E
#define GL_MODELVIEW15_ARB 0x872F
#define GL_MODELVIEW16_ARB 0x8730
#define GL_MODELVIEW17_ARB 0x8731
#define GL_MODELVIEW18_ARB 0x8732
#define GL_MODELVIEW19_ARB 0x8733
#define GL_MODELVIEW20_ARB 0x8734
#define GL_MODELVIEW21_ARB 0x8735
#define GL_MODELVIEW22_ARB 0x8736
#define GL_MODELVIEW23_ARB 0x8737
#define GL_MODELVIEW24_ARB 0x8738
#define GL_MODELVIEW25_ARB 0x8739
#define GL_MODELVIEW26_ARB 0x873A
#define GL_MODELVIEW27_ARB 0x873B
#define GL_MODELVIEW28_ARB 0x873C
#define GL_MODELVIEW29_ARB 0x873D
#define GL_MODELVIEW30_ARB 0x873E
#define GL_MODELVIEW31_ARB 0x873F
#define GL_DOT3_RGB_EXT 0x8740
#define GL_Z400_BINARY_AMD 0x8740
#define GL_DOT3_RGBA_EXT 0x8741
#define GL_PROGRAM_BINARY_LENGTH 0x8741
#define GL_PROGRAM_BINARY_LENGTH_OES 0x8741
#define GL_MIRROR_CLAMP_ATI 0x8742
#define GL_MIRROR_CLAMP_EXT 0x8742
#define GL_MIRROR_CLAMP_TO_EDGE 0x8743
#define GL_MIRROR_CLAMP_TO_EDGE_ATI 0x8743
#define GL_MIRROR_CLAMP_TO_EDGE_EXT 0x8743
#define GL_MODULATE_ADD_ATI 0x8744
#define GL_MODULATE_SIGNED_ADD_ATI 0x8745
#define GL_MODULATE_SUBTRACT_ATI 0x8746
#define GL_SET_AMD 0x874A
#define GL_REPLACE_VALUE_AMD 0x874B
#define GL_STENCIL_OP_VALUE_AMD 0x874C
#define GL_STENCIL_BACK_OP_VALUE_AMD 0x874D
#define GL_VERTEX_ATTRIB_ARRAY_LONG 0x874E
#define GL_OCCLUSION_QUERY_EVENT_MASK_AMD 0x874F
#define GL_DEPTH_STENCIL_MESA 0x8750
#define GL_UNSIGNED_INT_24_8_MESA 0x8751
#define GL_UNSIGNED_INT_8_24_REV_MESA 0x8752
#define GL_UNSIGNED_SHORT_15_1_MESA 0x8753
#define GL_UNSIGNED_SHORT_1_15_REV_MESA 0x8754
#define GL_TRACE_MASK_MESA 0x8755
#define GL_TRACE_NAME_MESA 0x8756
#define GL_YCBCR_MESA 0x8757
#define GL_PACK_INVERT_MESA 0x8758
#define GL_DEBUG_OBJECT_MESA 0x8759
#define GL_TEXTURE_1D_STACK_MESAX 0x8759
#define GL_DEBUG_PRINT_MESA 0x875A
#define GL_TEXTURE_2D_STACK_MESAX 0x875A
#define GL_DEBUG_ASSERT_MESA 0x875B
#define GL_PROXY_TEXTURE_1D_STACK_MESAX 0x875B
#define GL_PROXY_TEXTURE_2D_STACK_MESAX 0x875C
#define GL_TEXTURE_1D_STACK_BINDING_MESAX 0x875D
#define GL_TEXTURE_2D_STACK_BINDING_MESAX 0x875E
#define GL_PROGRAM_BINARY_FORMAT_MESA 0x875F
#define GL_STATIC_ATI 0x8760
#define GL_DYNAMIC_ATI 0x8761
#define GL_PRESERVE_ATI 0x8762
#define GL_DISCARD_ATI 0x8763
#define GL_BUFFER_SIZE 0x8764
#define GL_BUFFER_SIZE_ARB 0x8764
#define GL_OBJECT_BUFFER_SIZE_ATI 0x8764
#define GL_BUFFER_USAGE 0x8765
#define GL_BUFFER_USAGE_ARB 0x8765
#define GL_OBJECT_BUFFER_USAGE_ATI 0x8765
#define GL_ARRAY_OBJECT_BUFFER_ATI 0x8766
#define GL_ARRAY_OBJECT_OFFSET_ATI 0x8767
#define GL_ELEMENT_ARRAY_ATI 0x8768
#define GL_ELEMENT_ARRAY_TYPE_ATI 0x8769
#define GL_ELEMENT_ARRAY_POINTER_ATI 0x876A
#define GL_MAX_VERTEX_STREAMS_ATI 0x876B
#define GL_VERTEX_STREAM0_ATI 0x876C
#define GL_VERTEX_STREAM1_ATI 0x876D
#define GL_VERTEX_STREAM2_ATI 0x876E
#define GL_VERTEX_STREAM3_ATI 0x876F
#define GL_VERTEX_STREAM4_ATI 0x8770
#define GL_VERTEX_STREAM5_ATI 0x8771
#define GL_VERTEX_STREAM6_ATI 0x8772
#define GL_VERTEX_STREAM7_ATI 0x8773
#define GL_VERTEX_SOURCE_ATI 0x8774
#define GL_BUMP_ROT_MATRIX_ATI 0x8775
#define GL_BUMP_ROT_MATRIX_SIZE_ATI 0x8776
#define GL_BUMP_NUM_TEX_UNITS_ATI 0x8777
#define GL_BUMP_TEX_UNITS_ATI 0x8778
#define GL_DUDV_ATI 0x8779
#define GL_DU8DV8_ATI 0x877A
#define GL_BUMP_ENVMAP_ATI 0x877B
#define GL_BUMP_TARGET_ATI 0x877C
#define GL_VERTEX_SHADER_EXT 0x8780
#define GL_VERTEX_SHADER_BINDING_EXT 0x8781
#define GL_OP_INDEX_EXT 0x8782
#define GL_OP_NEGATE_EXT 0x8783
#define GL_OP_DOT3_EXT 0x8784
#define GL_OP_DOT4_EXT 0x8785
#define GL_OP_MUL_EXT 0x8786
#define GL_OP_ADD_EXT 0x8787
#define GL_OP_MADD_EXT 0x8788
#define GL_OP_FRAC_EXT 0x8789
#define GL_OP_MAX_EXT 0x878A
#define GL_OP_MIN_EXT 0x878B
#define GL_OP_SET_GE_EXT 0x878C
#define GL_OP_SET_LT_EXT 0x878D
#define GL_OP_CLAMP_EXT 0x878E
#define GL_OP_FLOOR_EXT 0x878F
#define GL_OP_ROUND_EXT 0x8790
#define GL_OP_EXP_BASE_2_EXT 0x8791
#define GL_OP_LOG_BASE_2_EXT 0x8792
#define GL_OP_POWER_EXT 0x8793
#define GL_OP_RECIP_EXT 0x8794
#define GL_OP_RECIP_SQRT_EXT 0x8795
#define GL_OP_SUB_EXT 0x8796
#define GL_OP_CROSS_PRODUCT_EXT 0x8797
#define GL_OP_MULTIPLY_MATRIX_EXT 0x8798
#define GL_OP_MOV_EXT 0x8799
#define GL_OUTPUT_VERTEX_EXT 0x879A
#define GL_OUTPUT_COLOR0_EXT 0x879B
#define GL_OUTPUT_COLOR1_EXT 0x879C
#define GL_OUTPUT_TEXTURE_COORD0_EXT 0x879D
#define GL_OUTPUT_TEXTURE_COORD1_EXT 0x879E
#define GL_OUTPUT_TEXTURE_COORD2_EXT 0x879F
#define GL_OUTPUT_TEXTURE_COORD3_EXT 0x87A0
#define GL_OUTPUT_TEXTURE_COORD4_EXT 0x87A1
#define GL_OUTPUT_TEXTURE_COORD5_EXT 0x87A2
#define GL_OUTPUT_TEXTURE_COORD6_EXT 0x87A3
#define GL_OUTPUT_TEXTURE_COORD7_EXT 0x87A4
#define GL_OUTPUT_TEXTURE_COORD8_EXT 0x87A5
#define GL_OUTPUT_TEXTURE_COORD9_EXT 0x87A6
#define GL_OUTPUT_TEXTURE_COORD10_EXT 0x87A7
#define GL_OUTPUT_TEXTURE_COORD11_EXT 0x87A8
#define GL_OUTPUT_TEXTURE_COORD12_EXT 0x87A9
#define GL_OUTPUT_TEXTURE_COORD13_EXT 0x87AA
#define GL_OUTPUT_TEXTURE_COORD14_EXT 0x87AB
#define GL_OUTPUT_TEXTURE_COORD15_EXT 0x87AC
#define GL_OUTPUT_TEXTURE_COORD16_EXT 0x87AD
#define GL_OUTPUT_TEXTURE_COORD17_EXT 0x87AE
#define GL_OUTPUT_TEXTURE_COORD18_EXT 0x87AF
#define GL_OUTPUT_TEXTURE_COORD19_EXT 0x87B0
#define GL_OUTPUT_TEXTURE_COORD20_EXT 0x87B1
#define GL_OUTPUT_TEXTURE_COORD21_EXT 0x87B2
#define GL_OUTPUT_TEXTURE_COORD22_EXT 0x87B3
#define GL_OUTPUT_TEXTURE_COORD23_EXT 0x87B4
#define GL_OUTPUT_TEXTURE_COORD24_EXT 0x87B5
#define GL_OUTPUT_TEXTURE_COORD25_EXT 0x87B6
#define GL_OUTPUT_TEXTURE_COORD26_EXT 0x87B7
#define GL_OUTPUT_TEXTURE_COORD27_EXT 0x87B8
#define GL_OUTPUT_TEXTURE_COORD28_EXT 0x87B9
#define GL_OUTPUT_TEXTURE_COORD29_EXT 0x87BA
#define GL_OUTPUT_TEXTURE_COORD30_EXT 0x87BB
#define GL_OUTPUT_TEXTURE_COORD31_EXT 0x87BC
#define GL_OUTPUT_FOG_EXT 0x87BD
#define GL_SCALAR_EXT 0x87BE
#define GL_VECTOR_EXT 0x87BF
#define GL_MATRIX_EXT 0x87C0
#define GL_VARIANT_EXT 0x87C1
#define GL_INVARIANT_EXT 0x87C2
#define GL_LOCAL_CONSTANT_EXT 0x87C3
#define GL_LOCAL_EXT 0x87C4
#define GL_MAX_VERTEX_SHADER_INSTRUCTIONS_EXT 0x87C5
#define GL_MAX_VERTEX_SHADER_VARIANTS_EXT 0x87C6
#define GL_MAX_VERTEX_SHADER_INVARIANTS_EXT 0x87C7
#define GL_MAX_VERTEX_SHADER_LOCAL_CONSTANTS_EXT 0x87C8
#define GL_MAX_VERTEX_SHADER_LOCALS_EXT 0x87C9
#define GL_MAX_OPTIMIZED_VERTEX_SHADER_INSTRUCTIONS_EXT 0x87CA
#define GL_MAX_OPTIMIZED_VERTEX_SHADER_VARIANTS_EXT 0x87CB
#define GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCAL_CONSTANTS_EXT 0x87CC
#define GL_MAX_OPTIMIZED_VERTEX_SHADER_INVARIANTS_EXT 0x87CD
#define GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCALS_EXT 0x87CE
#define GL_VERTEX_SHADER_INSTRUCTIONS_EXT 0x87CF
#define GL_VERTEX_SHADER_VARIANTS_EXT 0x87D0
#define GL_VERTEX_SHADER_INVARIANTS_EXT 0x87D1
#define GL_VERTEX_SHADER_LOCAL_CONSTANTS_EXT 0x87D2
#define GL_VERTEX_SHADER_LOCALS_EXT 0x87D3
#define GL_VERTEX_SHADER_OPTIMIZED_EXT 0x87D4
#define GL_X_EXT 0x87D5
#define GL_Y_EXT 0x87D6
#define GL_Z_EXT 0x87D7
#define GL_W_EXT 0x87D8
#define GL_NEGATIVE_X_EXT 0x87D9
#define GL_NEGATIVE_Y_EXT 0x87DA
#define GL_NEGATIVE_Z_EXT 0x87DB
#define GL_NEGATIVE_W_EXT 0x87DC
#define GL_ZERO_EXT 0x87DD
#define GL_ONE_EXT 0x87DE
#define GL_NEGATIVE_ONE_EXT 0x87DF
#define GL_NORMALIZED_RANGE_EXT 0x87E0
#define GL_FULL_RANGE_EXT 0x87E1
#define GL_CURRENT_VERTEX_EXT 0x87E2
#define GL_MVP_MATRIX_EXT 0x87E3
#define GL_VARIANT_VALUE_EXT 0x87E4
#define GL_VARIANT_DATATYPE_EXT 0x87E5
#define GL_VARIANT_ARRAY_STRIDE_EXT 0x87E6
#define GL_VARIANT_ARRAY_TYPE_EXT 0x87E7
#define GL_VARIANT_ARRAY_EXT 0x87E8
#define GL_VARIANT_ARRAY_POINTER_EXT 0x87E9
#define GL_INVARIANT_VALUE_EXT 0x87EA
#define GL_INVARIANT_DATATYPE_EXT 0x87EB
#define GL_LOCAL_CONSTANT_VALUE_EXT 0x87EC
#define GL_LOCAL_CONSTANT_DATATYPE_EXT 0x87ED
#define GL_ATC_RGBA_INTERPOLATED_ALPHA_AMD 0x87EE
#define GL_PN_TRIANGLES_ATI 0x87F0
#define GL_MAX_PN_TRIANGLES_TESSELATION_LEVEL_ATI 0x87F1
#define GL_PN_TRIANGLES_POINT_MODE_ATI 0x87F2
#define GL_PN_TRIANGLES_NORMAL_MODE_ATI 0x87F3
#define GL_PN_TRIANGLES_TESSELATION_LEVEL_ATI 0x87F4
#define GL_PN_TRIANGLES_POINT_MODE_LINEAR_ATI 0x87F5
#define GL_PN_TRIANGLES_POINT_MODE_CUBIC_ATI 0x87F6
#define GL_PN_TRIANGLES_NORMAL_MODE_LINEAR_ATI 0x87F7
#define GL_PN_TRIANGLES_NORMAL_MODE_QUADRATIC_ATI 0x87F8
#define GL_3DC_X_AMD 0x87F9
#define GL_3DC_XY_AMD 0x87FA
#define GL_VBO_FREE_MEMORY_ATI 0x87FB
#define GL_TEXTURE_FREE_MEMORY_ATI 0x87FC
#define GL_RENDERBUFFER_FREE_MEMORY_ATI 0x87FD
#define GL_NUM_PROGRAM_BINARY_FORMATS 0x87FE
#define GL_NUM_PROGRAM_BINARY_FORMATS_OES 0x87FE
#define GL_PROGRAM_BINARY_FORMATS 0x87FF
#define GL_PROGRAM_BINARY_FORMATS_OES 0x87FF
#define GL_STENCIL_BACK_FUNC 0x8800
#define GL_STENCIL_BACK_FUNC_ATI 0x8800
#define GL_STENCIL_BACK_FAIL 0x8801
#define GL_STENCIL_BACK_FAIL_ATI 0x8801
#define GL_STENCIL_BACK_PASS_DEPTH_FAIL 0x8802
#define GL_STENCIL_BACK_PASS_DEPTH_FAIL_ATI 0x8802
#define GL_STENCIL_BACK_PASS_DEPTH_PASS 0x8803
#define GL_STENCIL_BACK_PASS_DEPTH_PASS_ATI 0x8803
#define GL_FRAGMENT_PROGRAM_ARB 0x8804
#define GL_PROGRAM_ALU_INSTRUCTIONS_ARB 0x8805
#define GL_PROGRAM_TEX_INSTRUCTIONS_ARB 0x8806
#define GL_PROGRAM_TEX_INDIRECTIONS_ARB 0x8807
#define GL_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB 0x8808
#define GL_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB 0x8809
#define GL_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB 0x880A
#define GL_MAX_PROGRAM_ALU_INSTRUCTIONS_ARB 0x880B
#define GL_MAX_PROGRAM_TEX_INSTRUCTIONS_ARB 0x880C
#define GL_MAX_PROGRAM_TEX_INDIRECTIONS_ARB 0x880D
#define GL_MAX_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB 0x880E
#define GL_MAX_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB 0x880F
#define GL_MAX_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB 0x8810
#define GL_RGBA32F 0x8814
#define GL_RGBA32F_ARB 0x8814
#define GL_RGBA32F_EXT 0x8814
#define GL_RGBA_FLOAT32_APPLE 0x8814
#define GL_RGBA_FLOAT32_ATI 0x8814
#define GL_RGB32F 0x8815
#define GL_RGB32F_ARB 0x8815
#define GL_RGB32F_EXT 0x8815
#define GL_RGB_FLOAT32_APPLE 0x8815
#define GL_RGB_FLOAT32_ATI 0x8815
#define GL_ALPHA32F_ARB 0x8816
#define GL_ALPHA32F_EXT 0x8816
#define GL_ALPHA_FLOAT32_APPLE 0x8816
#define GL_ALPHA_FLOAT32_ATI 0x8816
#define GL_INTENSITY32F_ARB 0x8817
#define GL_INTENSITY_FLOAT32_APPLE 0x8817
#define GL_INTENSITY_FLOAT32_ATI 0x8817
#define GL_LUMINANCE32F_ARB 0x8818
#define GL_LUMINANCE32F_EXT 0x8818
#define GL_LUMINANCE_FLOAT32_APPLE 0x8818
#define GL_LUMINANCE_FLOAT32_ATI 0x8818
#define GL_LUMINANCE_ALPHA32F_ARB 0x8819
#define GL_LUMINANCE_ALPHA32F_EXT 0x8819
#define GL_LUMINANCE_ALPHA_FLOAT32_APPLE 0x8819
#define GL_LUMINANCE_ALPHA_FLOAT32_ATI 0x8819
#define GL_RGBA16F 0x881A
#define GL_RGBA16F_ARB 0x881A
#define GL_RGBA16F_EXT 0x881A
#define GL_RGBA_FLOAT16_APPLE 0x881A
#define GL_RGBA_FLOAT16_ATI 0x881A
#define GL_RGB16F 0x881B
#define GL_RGB16F_ARB 0x881B
#define GL_RGB16F_EXT 0x881B
#define GL_RGB_FLOAT16_APPLE 0x881B
#define GL_RGB_FLOAT16_ATI 0x881B
#define GL_ALPHA16F_ARB 0x881C
#define GL_ALPHA16F_EXT 0x881C
#define GL_ALPHA_FLOAT16_APPLE 0x881C
#define GL_ALPHA_FLOAT16_ATI 0x881C
#define GL_INTENSITY16F_ARB 0x881D
#define GL_INTENSITY_FLOAT16_APPLE 0x881D
#define GL_INTENSITY_FLOAT16_ATI 0x881D
#define GL_LUMINANCE16F_ARB 0x881E
#define GL_LUMINANCE16F_EXT 0x881E
#define GL_LUMINANCE_FLOAT16_APPLE 0x881E
#define GL_LUMINANCE_FLOAT16_ATI 0x881E
#define GL_LUMINANCE_ALPHA16F_ARB 0x881F
#define GL_LUMINANCE_ALPHA16F_EXT 0x881F
#define GL_LUMINANCE_ALPHA_FLOAT16_APPLE 0x881F
#define GL_LUMINANCE_ALPHA_FLOAT16_ATI 0x881F
#define GL_RGBA_FLOAT_MODE_ARB 0x8820
#define GL_RGBA_FLOAT_MODE_ATI 0x8820
#define GL_WRITEONLY_RENDERING_QCOM 0x8823
#define GL_MAX_DRAW_BUFFERS 0x8824
#define GL_MAX_DRAW_BUFFERS_ARB 0x8824
#define GL_MAX_DRAW_BUFFERS_ATI 0x8824
#define GL_MAX_DRAW_BUFFERS_EXT 0x8824
#define GL_MAX_DRAW_BUFFERS_NV 0x8824
#define GL_DRAW_BUFFER0 0x8825
#define GL_DRAW_BUFFER0_ARB 0x8825
#define GL_DRAW_BUFFER0_ATI 0x8825
#define GL_DRAW_BUFFER0_EXT 0x8825
#define GL_DRAW_BUFFER0_NV 0x8825
#define GL_DRAW_BUFFER1 0x8826
#define GL_DRAW_BUFFER1_ARB 0x8826
#define GL_DRAW_BUFFER1_ATI 0x8826
#define GL_DRAW_BUFFER1_EXT 0x8826
#define GL_DRAW_BUFFER1_NV 0x8826
#define GL_DRAW_BUFFER2 0x8827
#define GL_DRAW_BUFFER2_ARB 0x8827
#define GL_DRAW_BUFFER2_ATI 0x8827
#define GL_DRAW_BUFFER2_EXT 0x8827
#define GL_DRAW_BUFFER2_NV 0x8827
#define GL_DRAW_BUFFER3 0x8828
#define GL_DRAW_BUFFER3_ARB 0x8828
#define GL_DRAW_BUFFER3_ATI 0x8828
#define GL_DRAW_BUFFER3_EXT 0x8828
#define GL_DRAW_BUFFER3_NV 0x8828
#define GL_DRAW_BUFFER4 0x8829
#define GL_DRAW_BUFFER4_ARB 0x8829
#define GL_DRAW_BUFFER4_ATI 0x8829
#define GL_DRAW_BUFFER4_EXT 0x8829
#define GL_DRAW_BUFFER4_NV 0x8829
#define GL_DRAW_BUFFER5 0x882A
#define GL_DRAW_BUFFER5_ARB 0x882A
#define GL_DRAW_BUFFER5_ATI 0x882A
#define GL_DRAW_BUFFER5_EXT 0x882A
#define GL_DRAW_BUFFER5_NV 0x882A
#define GL_DRAW_BUFFER6 0x882B
#define GL_DRAW_BUFFER6_ARB 0x882B
#define GL_DRAW_BUFFER6_ATI 0x882B
#define GL_DRAW_BUFFER6_EXT 0x882B
#define GL_DRAW_BUFFER6_NV 0x882B
#define GL_DRAW_BUFFER7 0x882C
#define GL_DRAW_BUFFER7_ARB 0x882C
#define GL_DRAW_BUFFER7_ATI 0x882C
#define GL_DRAW_BUFFER7_EXT 0x882C
#define GL_DRAW_BUFFER7_NV 0x882C
#define GL_DRAW_BUFFER8 0x882D
#define GL_DRAW_BUFFER8_ARB 0x882D
#define GL_DRAW_BUFFER8_ATI 0x882D
#define GL_DRAW_BUFFER8_EXT 0x882D
#define GL_DRAW_BUFFER8_NV 0x882D
#define GL_DRAW_BUFFER9 0x882E
#define GL_DRAW_BUFFER9_ARB 0x882E
#define GL_DRAW_BUFFER9_ATI 0x882E
#define GL_DRAW_BUFFER9_EXT 0x882E
#define GL_DRAW_BUFFER9_NV 0x882E
#define GL_DRAW_BUFFER10 0x882F
#define GL_DRAW_BUFFER10_ARB 0x882F
#define GL_DRAW_BUFFER10_ATI 0x882F
#define GL_DRAW_BUFFER10_EXT 0x882F
#define GL_DRAW_BUFFER10_NV 0x882F
#define GL_DRAW_BUFFER11 0x8830
#define GL_DRAW_BUFFER11_ARB 0x8830
#define GL_DRAW_BUFFER11_ATI 0x8830
#define GL_DRAW_BUFFER11_EXT 0x8830
#define GL_DRAW_BUFFER11_NV 0x8830
#define GL_DRAW_BUFFER12 0x8831
#define GL_DRAW_BUFFER12_ARB 0x8831
#define GL_DRAW_BUFFER12_ATI 0x8831
#define GL_DRAW_BUFFER12_EXT 0x8831
#define GL_DRAW_BUFFER12_NV 0x8831
#define GL_DRAW_BUFFER13 0x8832
#define GL_DRAW_BUFFER13_ARB 0x8832
#define GL_DRAW_BUFFER13_ATI 0x8832
#define GL_DRAW_BUFFER13_EXT 0x8832
#define GL_DRAW_BUFFER13_NV 0x8832
#define GL_DRAW_BUFFER14 0x8833
#define GL_DRAW_BUFFER14_ARB 0x8833
#define GL_DRAW_BUFFER14_ATI 0x8833
#define GL_DRAW_BUFFER14_EXT 0x8833
#define GL_DRAW_BUFFER14_NV 0x8833
#define GL_DRAW_BUFFER15 0x8834
#define GL_DRAW_BUFFER15_ARB 0x8834
#define GL_DRAW_BUFFER15_ATI 0x8834
#define GL_DRAW_BUFFER15_EXT 0x8834
#define GL_DRAW_BUFFER15_NV 0x8834
#define GL_COLOR_CLEAR_UNCLAMPED_VALUE_ATI 0x8835
#define GL_COMPRESSED_LUMINANCE_ALPHA_3DC_ATI 0x8837
#define GL_BLEND_EQUATION_ALPHA 0x883D
#define GL_BLEND_EQUATION_ALPHA_EXT 0x883D
#define GL_BLEND_EQUATION_ALPHA_OES 0x883D
#define GL_SUBSAMPLE_DISTANCE_AMD 0x883F
#define GL_MATRIX_PALETTE_ARB 0x8840
#define GL_MATRIX_PALETTE_OES 0x8840
#define GL_MAX_MATRIX_PALETTE_STACK_DEPTH_ARB 0x8841
#define GL_MAX_PALETTE_MATRICES_ARB 0x8842
#define GL_MAX_PALETTE_MATRICES_OES 0x8842
#define GL_CURRENT_PALETTE_MATRIX_ARB 0x8843
#define GL_CURRENT_PALETTE_MATRIX_OES 0x8843
#define GL_MATRIX_INDEX_ARRAY_ARB 0x8844
#define GL_MATRIX_INDEX_ARRAY_OES 0x8844
#define GL_CURRENT_MATRIX_INDEX_ARB 0x8845
#define GL_MATRIX_INDEX_ARRAY_SIZE_ARB 0x8846
#define GL_MATRIX_INDEX_ARRAY_SIZE_OES 0x8846
#define GL_MATRIX_INDEX_ARRAY_TYPE_ARB 0x8847
#define GL_MATRIX_INDEX_ARRAY_TYPE_OES 0x8847
#define GL_MATRIX_INDEX_ARRAY_STRIDE_ARB 0x8848
#define GL_MATRIX_INDEX_ARRAY_STRIDE_OES 0x8848
#define GL_MATRIX_INDEX_ARRAY_POINTER_ARB 0x8849
#define GL_MATRIX_INDEX_ARRAY_POINTER_OES 0x8849
#define GL_TEXTURE_DEPTH_SIZE 0x884A
#define GL_TEXTURE_DEPTH_SIZE_ARB 0x884A
#define GL_DEPTH_TEXTURE_MODE 0x884B
#define GL_DEPTH_TEXTURE_MODE_ARB 0x884B
#define GL_TEXTURE_COMPARE_MODE 0x884C
#define GL_TEXTURE_COMPARE_MODE_ARB 0x884C
#define GL_TEXTURE_COMPARE_MODE_EXT 0x884C
#define GL_TEXTURE_COMPARE_FUNC 0x884D
#define GL_TEXTURE_COMPARE_FUNC_ARB 0x884D
#define GL_TEXTURE_COMPARE_FUNC_EXT 0x884D
#define GL_COMPARE_REF_DEPTH_TO_TEXTURE_EXT 0x884E
#define GL_COMPARE_REF_TO_TEXTURE 0x884E
#define GL_COMPARE_REF_TO_TEXTURE_EXT 0x884E
#define GL_COMPARE_R_TO_TEXTURE 0x884E
#define GL_COMPARE_R_TO_TEXTURE_ARB 0x884E
#define GL_TEXTURE_CUBE_MAP_SEAMLESS 0x884F
#define GL_OFFSET_PROJECTIVE_TEXTURE_2D_NV 0x8850
#define GL_OFFSET_PROJECTIVE_TEXTURE_2D_SCALE_NV 0x8851
#define GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_NV 0x8852
#define GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_SCALE_NV 0x8853
#define GL_OFFSET_HILO_TEXTURE_2D_NV 0x8854
#define GL_OFFSET_HILO_TEXTURE_RECTANGLE_NV 0x8855
#define GL_OFFSET_HILO_PROJECTIVE_TEXTURE_2D_NV 0x8856
#define GL_OFFSET_HILO_PROJECTIVE_TEXTURE_RECTANGLE_NV 0x8857
#define GL_DEPENDENT_HILO_TEXTURE_2D_NV 0x8858
#define GL_DEPENDENT_RGB_TEXTURE_3D_NV 0x8859
#define GL_DEPENDENT_RGB_TEXTURE_CUBE_MAP_NV 0x885A
#define GL_DOT_PRODUCT_PASS_THROUGH_NV 0x885B
#define GL_DOT_PRODUCT_TEXTURE_1D_NV 0x885C
#define GL_DOT_PRODUCT_AFFINE_DEPTH_REPLACE_NV 0x885D
#define GL_HILO8_NV 0x885E
#define GL_SIGNED_HILO8_NV 0x885F
#define GL_FORCE_BLUE_TO_ONE_NV 0x8860
#define GL_POINT_SPRITE 0x8861
#define GL_POINT_SPRITE_ARB 0x8861
#define GL_POINT_SPRITE_NV 0x8861
#define GL_POINT_SPRITE_OES 0x8861
#define GL_COORD_REPLACE 0x8862
#define GL_COORD_REPLACE_ARB 0x8862
#define GL_COORD_REPLACE_NV 0x8862
#define GL_COORD_REPLACE_OES 0x8862
#define GL_POINT_SPRITE_R_MODE_NV 0x8863
#define GL_PIXEL_COUNTER_BITS_NV 0x8864
#define GL_QUERY_COUNTER_BITS 0x8864
#define GL_QUERY_COUNTER_BITS_ARB 0x8864
#define GL_QUERY_COUNTER_BITS_EXT 0x8864
#define GL_CURRENT_OCCLUSION_QUERY_ID_NV 0x8865
#define GL_CURRENT_QUERY 0x8865
#define GL_CURRENT_QUERY_ARB 0x8865
#define GL_CURRENT_QUERY_EXT 0x8865
#define GL_PIXEL_COUNT_NV 0x8866
#define GL_QUERY_RESULT 0x8866
#define GL_QUERY_RESULT_ARB 0x8866
#define GL_QUERY_RESULT_EXT 0x8866
#define GL_PIXEL_COUNT_AVAILABLE_NV 0x8867
#define GL_QUERY_RESULT_AVAILABLE 0x8867
#define GL_QUERY_RESULT_AVAILABLE_ARB 0x8867
#define GL_QUERY_RESULT_AVAILABLE_EXT 0x8867
#define GL_MAX_FRAGMENT_PROGRAM_LOCAL_PARAMETERS_NV 0x8868
#define GL_MAX_VERTEX_ATTRIBS 0x8869
#define GL_MAX_VERTEX_ATTRIBS_ARB 0x8869
#define GL_VERTEX_ATTRIB_ARRAY_NORMALIZED 0x886A
#define GL_VERTEX_ATTRIB_ARRAY_NORMALIZED_ARB 0x886A
#define GL_MAX_TESS_CONTROL_INPUT_COMPONENTS 0x886C
#define GL_MAX_TESS_CONTROL_INPUT_COMPONENTS_EXT 0x886C
#define GL_MAX_TESS_CONTROL_INPUT_COMPONENTS_OES 0x886C
#define GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS 0x886D
#define GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS_EXT 0x886D
#define GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS_OES 0x886D
#define GL_DEPTH_STENCIL_TO_RGBA_NV 0x886E
#define GL_DEPTH_STENCIL_TO_BGRA_NV 0x886F
#define GL_FRAGMENT_PROGRAM_NV 0x8870
#define GL_MAX_TEXTURE_COORDS 0x8871
#define GL_MAX_TEXTURE_COORDS_ARB 0x8871
#define GL_MAX_TEXTURE_COORDS_NV 0x8871
#define GL_MAX_TEXTURE_IMAGE_UNITS 0x8872
#define GL_MAX_TEXTURE_IMAGE_UNITS_ARB 0x8872
#define GL_MAX_TEXTURE_IMAGE_UNITS_NV 0x8872
#define GL_FRAGMENT_PROGRAM_BINDING_NV 0x8873
#define GL_PROGRAM_ERROR_STRING_ARB 0x8874
#define GL_PROGRAM_ERROR_STRING_NV 0x8874
#define GL_PROGRAM_FORMAT_ASCII_ARB 0x8875
#define GL_PROGRAM_FORMAT_ARB 0x8876
#define GL_WRITE_PIXEL_DATA_RANGE_NV 0x8878
#define GL_READ_PIXEL_DATA_RANGE_NV 0x8879
#define GL_WRITE_PIXEL_DATA_RANGE_LENGTH_NV 0x887A
#define GL_READ_PIXEL_DATA_RANGE_LENGTH_NV 0x887B
#define GL_WRITE_PIXEL_DATA_RANGE_POINTER_NV 0x887C
#define GL_READ_PIXEL_DATA_RANGE_POINTER_NV 0x887D
#define GL_GEOMETRY_SHADER_INVOCATIONS 0x887F
#define GL_GEOMETRY_SHADER_INVOCATIONS_EXT 0x887F
#define GL_GEOMETRY_SHADER_INVOCATIONS_OES 0x887F
#define GL_FLOAT_R_NV 0x8880
#define GL_FLOAT_RG_NV 0x8881
#define GL_FLOAT_RGB_NV 0x8882
#define GL_FLOAT_RGBA_NV 0x8883
#define GL_FLOAT_R16_NV 0x8884
#define GL_FLOAT_R32_NV 0x8885
#define GL_FLOAT_RG16_NV 0x8886
#define GL_FLOAT_RG32_NV 0x8887
#define GL_FLOAT_RGB16_NV 0x8888
#define GL_FLOAT_RGB32_NV 0x8889
#define GL_FLOAT_RGBA16_NV 0x888A
#define GL_FLOAT_RGBA32_NV 0x888B
#define GL_TEXTURE_FLOAT_COMPONENTS_NV 0x888C
#define GL_FLOAT_CLEAR_COLOR_VALUE_NV 0x888D
#define GL_FLOAT_RGBA_MODE_NV 0x888E
#define GL_TEXTURE_UNSIGNED_REMAP_MODE_NV 0x888F
#define GL_DEPTH_BOUNDS_TEST_EXT 0x8890
#define GL_DEPTH_BOUNDS_EXT 0x8891
#define GL_ARRAY_BUFFER 0x8892
#define GL_ARRAY_BUFFER_ARB 0x8892
#define GL_ELEMENT_ARRAY_BUFFER 0x8893
#define GL_ELEMENT_ARRAY_BUFFER_ARB 0x8893
#define GL_ARRAY_BUFFER_BINDING 0x8894
#define GL_ARRAY_BUFFER_BINDING_ARB 0x8894
#define GL_ELEMENT_ARRAY_BUFFER_BINDING 0x8895
#define GL_ELEMENT_ARRAY_BUFFER_BINDING_ARB 0x8895
#define GL_VERTEX_ARRAY_BUFFER_BINDING 0x8896
#define GL_VERTEX_ARRAY_BUFFER_BINDING_ARB 0x8896
#define GL_NORMAL_ARRAY_BUFFER_BINDING 0x8897
#define GL_NORMAL_ARRAY_BUFFER_BINDING_ARB 0x8897
#define GL_COLOR_ARRAY_BUFFER_BINDING 0x8898
#define GL_COLOR_ARRAY_BUFFER_BINDING_ARB 0x8898
#define GL_INDEX_ARRAY_BUFFER_BINDING 0x8899
#define GL_INDEX_ARRAY_BUFFER_BINDING_ARB 0x8899
#define GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING 0x889A
#define GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING_ARB 0x889A
#define GL_EDGE_FLAG_ARRAY_BUFFER_BINDING 0x889B
#define GL_EDGE_FLAG_ARRAY_BUFFER_BINDING_ARB 0x889B
#define GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING 0x889C
#define GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING_ARB 0x889C
#define GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING 0x889D
#define GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING_ARB 0x889D
#define GL_FOG_COORD_ARRAY_BUFFER_BINDING 0x889D
#define GL_WEIGHT_ARRAY_BUFFER_BINDING 0x889E
#define GL_WEIGHT_ARRAY_BUFFER_BINDING_ARB 0x889E
#define GL_WEIGHT_ARRAY_BUFFER_BINDING_OES 0x889E
#define GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING 0x889F
#define GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING_ARB 0x889F
#define GL_PROGRAM_INSTRUCTIONS_ARB 0x88A0
#define GL_MAX_PROGRAM_INSTRUCTIONS_ARB 0x88A1
#define GL_PROGRAM_NATIVE_INSTRUCTIONS_ARB 0x88A2
#define GL_MAX_PROGRAM_NATIVE_INSTRUCTIONS_ARB 0x88A3
#define GL_PROGRAM_TEMPORARIES_ARB 0x88A4
#define GL_MAX_PROGRAM_TEMPORARIES_ARB 0x88A5
#define GL_PROGRAM_NATIVE_TEMPORARIES_ARB 0x88A6
#define GL_MAX_PROGRAM_NATIVE_TEMPORARIES_ARB 0x88A7
#define GL_PROGRAM_PARAMETERS_ARB 0x88A8
#define GL_MAX_PROGRAM_PARAMETERS_ARB 0x88A9
#define GL_PROGRAM_NATIVE_PARAMETERS_ARB 0x88AA
#define GL_MAX_PROGRAM_NATIVE_PARAMETERS_ARB 0x88AB
#define GL_PROGRAM_ATTRIBS_ARB 0x88AC
#define GL_MAX_PROGRAM_ATTRIBS_ARB 0x88AD
#define GL_PROGRAM_NATIVE_ATTRIBS_ARB 0x88AE
#define GL_MAX_PROGRAM_NATIVE_ATTRIBS_ARB 0x88AF
#define GL_PROGRAM_ADDRESS_REGISTERS_ARB 0x88B0
#define GL_MAX_PROGRAM_ADDRESS_REGISTERS_ARB 0x88B1
#define GL_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB 0x88B2
#define GL_MAX_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB 0x88B3
#define GL_MAX_PROGRAM_LOCAL_PARAMETERS_ARB 0x88B4
#define GL_MAX_PROGRAM_ENV_PARAMETERS_ARB 0x88B5
#define GL_PROGRAM_UNDER_NATIVE_LIMITS_ARB 0x88B6
#define GL_TRANSPOSE_CURRENT_MATRIX_ARB 0x88B7
#define GL_READ_ONLY 0x88B8
#define GL_READ_ONLY_ARB 0x88B8
#define GL_WRITE_ONLY 0x88B9
#define GL_WRITE_ONLY_ARB 0x88B9
#define GL_WRITE_ONLY_OES 0x88B9
#define GL_READ_WRITE 0x88BA
#define GL_READ_WRITE_ARB 0x88BA
#define GL_BUFFER_ACCESS 0x88BB
#define GL_BUFFER_ACCESS_ARB 0x88BB
#define GL_BUFFER_ACCESS_OES 0x88BB
#define GL_BUFFER_MAPPED 0x88BC
#define GL_BUFFER_MAPPED_ARB 0x88BC
#define GL_BUFFER_MAPPED_OES 0x88BC
#define GL_BUFFER_MAP_POINTER 0x88BD
#define GL_BUFFER_MAP_POINTER_ARB 0x88BD
#define GL_BUFFER_MAP_POINTER_OES 0x88BD
#define GL_WRITE_DISCARD_NV 0x88BE
#define GL_TIME_ELAPSED 0x88BF
#define GL_TIME_ELAPSED_EXT 0x88BF
#define GL_MATRIX0_ARB 0x88C0
#define GL_MATRIX1_ARB 0x88C1
#define GL_MATRIX2_ARB 0x88C2
#define GL_MATRIX3_ARB 0x88C3
#define GL_MATRIX4_ARB 0x88C4
#define GL_MATRIX5_ARB 0x88C5
#define GL_MATRIX6_ARB 0x88C6
#define GL_MATRIX7_ARB 0x88C7
#define GL_MATRIX8_ARB 0x88C8
#define GL_MATRIX9_ARB 0x88C9
#define GL_MATRIX10_ARB 0x88CA
#define GL_MATRIX11_ARB 0x88CB
#define GL_MATRIX12_ARB 0x88CC
#define GL_MATRIX13_ARB 0x88CD
#define GL_MATRIX14_ARB 0x88CE
#define GL_MATRIX15_ARB 0x88CF
#define GL_MATRIX16_ARB 0x88D0
#define GL_MATRIX17_ARB 0x88D1
#define GL_MATRIX18_ARB 0x88D2
#define GL_MATRIX19_ARB 0x88D3
#define GL_MATRIX20_ARB 0x88D4
#define GL_MATRIX21_ARB 0x88D5
#define GL_MATRIX22_ARB 0x88D6
#define GL_MATRIX23_ARB 0x88D7
#define GL_MATRIX24_ARB 0x88D8
#define GL_MATRIX25_ARB 0x88D9
#define GL_MATRIX26_ARB 0x88DA
#define GL_MATRIX27_ARB 0x88DB
#define GL_MATRIX28_ARB 0x88DC
#define GL_MATRIX29_ARB 0x88DD
#define GL_MATRIX30_ARB 0x88DE
#define GL_MATRIX31_ARB 0x88DF
#define GL_STREAM_DRAW 0x88E0
#define GL_STREAM_DRAW_ARB 0x88E0
#define GL_STREAM_READ 0x88E1
#define GL_STREAM_READ_ARB 0x88E1
#define GL_STREAM_COPY 0x88E2
#define GL_STREAM_COPY_ARB 0x88E2
#define GL_STATIC_DRAW 0x88E4
#define GL_STATIC_DRAW_ARB 0x88E4
#define GL_STATIC_READ 0x88E5
#define GL_STATIC_READ_ARB 0x88E5
#define GL_STATIC_COPY 0x88E6
#define GL_STATIC_COPY_ARB 0x88E6
#define GL_DYNAMIC_DRAW 0x88E8
#define GL_DYNAMIC_DRAW_ARB 0x88E8
#define GL_DYNAMIC_READ 0x88E9
#define GL_DYNAMIC_READ_ARB 0x88E9
#define GL_DYNAMIC_COPY 0x88EA
#define GL_DYNAMIC_COPY_ARB 0x88EA
#define GL_PIXEL_PACK_BUFFER 0x88EB
#define GL_PIXEL_PACK_BUFFER_ARB 0x88EB
#define GL_PIXEL_PACK_BUFFER_EXT 0x88EB
#define GL_PIXEL_PACK_BUFFER_NV 0x88EB
#define GL_PIXEL_UNPACK_BUFFER 0x88EC
#define GL_PIXEL_UNPACK_BUFFER_ARB 0x88EC
#define GL_PIXEL_UNPACK_BUFFER_EXT 0x88EC
#define GL_PIXEL_UNPACK_BUFFER_NV 0x88EC
#define GL_PIXEL_PACK_BUFFER_BINDING 0x88ED
#define GL_PIXEL_PACK_BUFFER_BINDING_ARB 0x88ED
#define GL_PIXEL_PACK_BUFFER_BINDING_EXT 0x88ED
#define GL_PIXEL_PACK_BUFFER_BINDING_NV 0x88ED
#define GL_ETC1_SRGB8_NV 0x88EE
#define GL_PIXEL_UNPACK_BUFFER_BINDING 0x88EF
#define GL_PIXEL_UNPACK_BUFFER_BINDING_ARB 0x88EF
#define GL_PIXEL_UNPACK_BUFFER_BINDING_EXT 0x88EF
#define GL_PIXEL_UNPACK_BUFFER_BINDING_NV 0x88EF
#define GL_DEPTH24_STENCIL8 0x88F0
#define GL_DEPTH24_STENCIL8_EXT 0x88F0
#define GL_DEPTH24_STENCIL8_OES 0x88F0
#define GL_TEXTURE_STENCIL_SIZE 0x88F1
#define GL_TEXTURE_STENCIL_SIZE_EXT 0x88F1
#define GL_STENCIL_TAG_BITS_EXT 0x88F2
#define GL_STENCIL_CLEAR_TAG_VALUE_EXT 0x88F3
#define GL_MAX_PROGRAM_EXEC_INSTRUCTIONS_NV 0x88F4
#define GL_MAX_PROGRAM_CALL_DEPTH_NV 0x88F5
#define GL_MAX_PROGRAM_IF_DEPTH_NV 0x88F6
#define GL_MAX_PROGRAM_LOOP_DEPTH_NV 0x88F7
#define GL_MAX_PROGRAM_LOOP_COUNT_NV 0x88F8
#define GL_SRC1_COLOR 0x88F9
#define GL_SRC1_COLOR_EXT 0x88F9
#define GL_ONE_MINUS_SRC1_COLOR 0x88FA
#define GL_ONE_MINUS_SRC1_COLOR_EXT 0x88FA
#define GL_ONE_MINUS_SRC1_ALPHA 0x88FB
#define GL_ONE_MINUS_SRC1_ALPHA_EXT 0x88FB
#define GL_MAX_DUAL_SOURCE_DRAW_BUFFERS 0x88FC
#define GL_MAX_DUAL_SOURCE_DRAW_BUFFERS_EXT 0x88FC
#define GL_VERTEX_ATTRIB_ARRAY_INTEGER 0x88FD
#define GL_VERTEX_ATTRIB_ARRAY_INTEGER_EXT 0x88FD
#define GL_VERTEX_ATTRIB_ARRAY_INTEGER_NV 0x88FD
#define GL_VERTEX_ATTRIB_ARRAY_DIVISOR 0x88FE
#define GL_VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE 0x88FE
#define GL_VERTEX_ATTRIB_ARRAY_DIVISOR_ARB 0x88FE
#define GL_VERTEX_ATTRIB_ARRAY_DIVISOR_EXT 0x88FE
#define GL_VERTEX_ATTRIB_ARRAY_DIVISOR_NV 0x88FE
#define GL_MAX_ARRAY_TEXTURE_LAYERS 0x88FF
#define GL_MAX_ARRAY_TEXTURE_LAYERS_EXT 0x88FF
#define GL_MIN_PROGRAM_TEXEL_OFFSET 0x8904
#define GL_MIN_PROGRAM_TEXEL_OFFSET_EXT 0x8904
#define GL_MIN_PROGRAM_TEXEL_OFFSET_NV 0x8904
#define GL_MAX_PROGRAM_TEXEL_OFFSET 0x8905
#define GL_MAX_PROGRAM_TEXEL_OFFSET_EXT 0x8905
#define GL_MAX_PROGRAM_TEXEL_OFFSET_NV 0x8905
#define GL_PROGRAM_ATTRIB_COMPONENTS_NV 0x8906
#define GL_PROGRAM_RESULT_COMPONENTS_NV 0x8907
#define GL_MAX_PROGRAM_ATTRIB_COMPONENTS_NV 0x8908
#define GL_MAX_PROGRAM_RESULT_COMPONENTS_NV 0x8909
#define GL_CG_VERTEX_SHADER_EXT 0x890E
#define GL_CG_FRAGMENT_SHADER_EXT 0x890F
#define GL_STENCIL_TEST_TWO_SIDE_EXT 0x8910
#define GL_ACTIVE_STENCIL_FACE_EXT 0x8911
#define GL_MIRROR_CLAMP_TO_BORDER_EXT 0x8912
#define GL_SAMPLES_PASSED 0x8914
#define GL_SAMPLES_PASSED_ARB 0x8914
#define GL_GEOMETRY_LINKED_VERTICES_OUT_EXT 0x8916
#define GL_GEOMETRY_LINKED_VERTICES_OUT_OES 0x8916
#define GL_GEOMETRY_VERTICES_OUT 0x8916
#define GL_GEOMETRY_INPUT_TYPE 0x8917
#define GL_GEOMETRY_LINKED_INPUT_TYPE_EXT 0x8917
#define GL_GEOMETRY_LINKED_INPUT_TYPE_OES 0x8917
#define GL_GEOMETRY_LINKED_OUTPUT_TYPE_EXT 0x8918
#define GL_GEOMETRY_LINKED_OUTPUT_TYPE_OES 0x8918
#define GL_GEOMETRY_OUTPUT_TYPE 0x8918
#define GL_SAMPLER_BINDING 0x8919
#define GL_CLAMP_VERTEX_COLOR 0x891A
#define GL_CLAMP_VERTEX_COLOR_ARB 0x891A
#define GL_CLAMP_FRAGMENT_COLOR 0x891B
#define GL_CLAMP_FRAGMENT_COLOR_ARB 0x891B
#define GL_CLAMP_READ_COLOR 0x891C
#define GL_CLAMP_READ_COLOR_ARB 0x891C
#define GL_FIXED_ONLY 0x891D
#define GL_FIXED_ONLY_ARB 0x891D
#define GL_TESS_CONTROL_PROGRAM_NV 0x891E
#define GL_TESS_EVALUATION_PROGRAM_NV 0x891F
#define GL_FRAGMENT_SHADER_ATI 0x8920
#define GL_REG_0_ATI 0x8921
#define GL_REG_1_ATI 0x8922
#define GL_REG_2_ATI 0x8923
#define GL_REG_3_ATI 0x8924
#define GL_REG_4_ATI 0x8925
#define GL_REG_5_ATI 0x8926
#define GL_REG_6_ATI 0x8927
#define GL_REG_7_ATI 0x8928
#define GL_REG_8_ATI 0x8929
#define GL_REG_9_ATI 0x892A
#define GL_REG_10_ATI 0x892B
#define GL_REG_11_ATI 0x892C
#define GL_REG_12_ATI 0x892D
#define GL_REG_13_ATI 0x892E
#define GL_REG_14_ATI 0x892F
#define GL_REG_15_ATI 0x8930
#define GL_REG_16_ATI 0x8931
#define GL_REG_17_ATI 0x8932
#define GL_REG_18_ATI 0x8933
#define GL_REG_19_ATI 0x8934
#define GL_REG_20_ATI 0x8935
#define GL_REG_21_ATI 0x8936
#define GL_REG_22_ATI 0x8937
#define GL_REG_23_ATI 0x8938
#define GL_REG_24_ATI 0x8939
#define GL_REG_25_ATI 0x893A
#define GL_REG_26_ATI 0x893B
#define GL_REG_27_ATI 0x893C
#define GL_REG_28_ATI 0x893D
#define GL_REG_29_ATI 0x893E
#define GL_REG_30_ATI 0x893F
#define GL_REG_31_ATI 0x8940
#define GL_CON_0_ATI 0x8941
#define GL_CON_1_ATI 0x8942
#define GL_CON_2_ATI 0x8943
#define GL_CON_3_ATI 0x8944
#define GL_CON_4_ATI 0x8945
#define GL_CON_5_ATI 0x8946
#define GL_CON_6_ATI 0x8947
#define GL_CON_7_ATI 0x8948
#define GL_CON_8_ATI 0x8949
#define GL_CON_9_ATI 0x894A
#define GL_CON_10_ATI 0x894B
#define GL_CON_11_ATI 0x894C
#define GL_CON_12_ATI 0x894D
#define GL_CON_13_ATI 0x894E
#define GL_CON_14_ATI 0x894F
#define GL_CON_15_ATI 0x8950
#define GL_CON_16_ATI 0x8951
#define GL_CON_17_ATI 0x8952
#define GL_CON_18_ATI 0x8953
#define GL_CON_19_ATI 0x8954
#define GL_CON_20_ATI 0x8955
#define GL_CON_21_ATI 0x8956
#define GL_CON_22_ATI 0x8957
#define GL_CON_23_ATI 0x8958
#define GL_CON_24_ATI 0x8959
#define GL_CON_25_ATI 0x895A
#define GL_CON_26_ATI 0x895B
#define GL_CON_27_ATI 0x895C
#define GL_CON_28_ATI 0x895D
#define GL_CON_29_ATI 0x895E
#define GL_CON_30_ATI 0x895F
#define GL_CON_31_ATI 0x8960
#define GL_MOV_ATI 0x8961
#define GL_ADD_ATI 0x8963
#define GL_MUL_ATI 0x8964
#define GL_SUB_ATI 0x8965
#define GL_DOT3_ATI 0x8966
#define GL_DOT4_ATI 0x8967
#define GL_MAD_ATI 0x8968
#define GL_LERP_ATI 0x8969
#define GL_CND_ATI 0x896A
#define GL_CND0_ATI 0x896B
#define GL_DOT2_ADD_ATI 0x896C
#define GL_SECONDARY_INTERPOLATOR_ATI 0x896D
#define GL_NUM_FRAGMENT_REGISTERS_ATI 0x896E
#define GL_NUM_FRAGMENT_CONSTANTS_ATI 0x896F
#define GL_NUM_PASSES_ATI 0x8970
#define GL_NUM_INSTRUCTIONS_PER_PASS_ATI 0x8971
#define GL_NUM_INSTRUCTIONS_TOTAL_ATI 0x8972
#define GL_NUM_INPUT_INTERPOLATOR_COMPONENTS_ATI 0x8973
#define GL_NUM_LOOPBACK_COMPONENTS_ATI 0x8974
#define GL_COLOR_ALPHA_PAIRING_ATI 0x8975
#define GL_SWIZZLE_STR_ATI 0x8976
#define GL_SWIZZLE_STQ_ATI 0x8977
#define GL_SWIZZLE_STR_DR_ATI 0x8978
#define GL_SWIZZLE_STQ_DQ_ATI 0x8979
#define GL_SWIZZLE_STRQ_ATI 0x897A
#define GL_SWIZZLE_STRQ_DQ_ATI 0x897B
#define GL_INTERLACE_OML 0x8980
#define GL_INTERLACE_READ_OML 0x8981
#define GL_FORMAT_SUBSAMPLE_24_24_OML 0x8982
#define GL_FORMAT_SUBSAMPLE_244_244_OML 0x8983
#define GL_PACK_RESAMPLE_OML 0x8984
#define GL_UNPACK_RESAMPLE_OML 0x8985
#define GL_RESAMPLE_REPLICATE_OML 0x8986
#define GL_RESAMPLE_ZERO_FILL_OML 0x8987
#define GL_RESAMPLE_AVERAGE_OML 0x8988
#define GL_RESAMPLE_DECIMATE_OML 0x8989
#define GL_POINT_SIZE_ARRAY_TYPE_OES 0x898A
#define GL_POINT_SIZE_ARRAY_STRIDE_OES 0x898B
#define GL_POINT_SIZE_ARRAY_POINTER_OES 0x898C
#define GL_MODELVIEW_MATRIX_FLOAT_AS_INT_BITS_OES 0x898D
#define GL_PROJECTION_MATRIX_FLOAT_AS_INT_BITS_OES 0x898E
#define GL_TEXTURE_MATRIX_FLOAT_AS_INT_BITS_OES 0x898F
#define GL_VERTEX_ATTRIB_MAP1_APPLE 0x8A00
#define GL_VERTEX_ATTRIB_MAP2_APPLE 0x8A01
#define GL_VERTEX_ATTRIB_MAP1_SIZE_APPLE 0x8A02
#define GL_VERTEX_ATTRIB_MAP1_COEFF_APPLE 0x8A03
#define GL_VERTEX_ATTRIB_MAP1_ORDER_APPLE 0x8A04
#define GL_VERTEX_ATTRIB_MAP1_DOMAIN_APPLE 0x8A05
#define GL_VERTEX_ATTRIB_MAP2_SIZE_APPLE 0x8A06
#define GL_VERTEX_ATTRIB_MAP2_COEFF_APPLE 0x8A07
#define GL_VERTEX_ATTRIB_MAP2_ORDER_APPLE 0x8A08
#define GL_VERTEX_ATTRIB_MAP2_DOMAIN_APPLE 0x8A09
#define GL_DRAW_PIXELS_APPLE 0x8A0A
#define GL_FENCE_APPLE 0x8A0B
#define GL_ELEMENT_ARRAY_APPLE 0x8A0C
#define GL_ELEMENT_ARRAY_TYPE_APPLE 0x8A0D
#define GL_ELEMENT_ARRAY_POINTER_APPLE 0x8A0E
#define GL_COLOR_FLOAT_APPLE 0x8A0F
#define GL_UNIFORM_BUFFER 0x8A11
#define GL_BUFFER_SERIALIZED_MODIFY_APPLE 0x8A12
#define GL_BUFFER_FLUSHING_UNMAP_APPLE 0x8A13
#define GL_AUX_DEPTH_STENCIL_APPLE 0x8A14
#define GL_PACK_ROW_BYTES_APPLE 0x8A15
#define GL_UNPACK_ROW_BYTES_APPLE 0x8A16
#define GL_RELEASED_APPLE 0x8A19
#define GL_VOLATILE_APPLE 0x8A1A
#define GL_RETAINED_APPLE 0x8A1B
#define GL_UNDEFINED_APPLE 0x8A1C
#define GL_PURGEABLE_APPLE 0x8A1D
#define GL_RGB_422_APPLE 0x8A1F
#define GL_UNIFORM_BUFFER_BINDING 0x8A28
#define GL_UNIFORM_BUFFER_START 0x8A29
#define GL_UNIFORM_BUFFER_SIZE 0x8A2A
#define GL_MAX_VERTEX_UNIFORM_BLOCKS 0x8A2B
#define GL_MAX_GEOMETRY_UNIFORM_BLOCKS 0x8A2C
#define GL_MAX_GEOMETRY_UNIFORM_BLOCKS_EXT 0x8A2C
#define GL_MAX_GEOMETRY_UNIFORM_BLOCKS_OES 0x8A2C
#define GL_MAX_FRAGMENT_UNIFORM_BLOCKS 0x8A2D
#define GL_MAX_COMBINED_UNIFORM_BLOCKS 0x8A2E
#define GL_MAX_UNIFORM_BUFFER_BINDINGS 0x8A2F
#define GL_MAX_UNIFORM_BLOCK_SIZE 0x8A30
#define GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS 0x8A31
#define GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS 0x8A32
#define GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS_EXT 0x8A32
#define GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS_OES 0x8A32
#define GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS 0x8A33
#define GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT 0x8A34
#define GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH 0x8A35
#define GL_ACTIVE_UNIFORM_BLOCKS 0x8A36
#define GL_UNIFORM_TYPE 0x8A37
#define GL_UNIFORM_SIZE 0x8A38
#define GL_UNIFORM_NAME_LENGTH 0x8A39
#define GL_UNIFORM_BLOCK_INDEX 0x8A3A
#define GL_UNIFORM_OFFSET 0x8A3B
#define GL_UNIFORM_ARRAY_STRIDE 0x8A3C
#define GL_UNIFORM_MATRIX_STRIDE 0x8A3D
#define GL_UNIFORM_IS_ROW_MAJOR 0x8A3E
#define GL_UNIFORM_BLOCK_BINDING 0x8A3F
#define GL_UNIFORM_BLOCK_DATA_SIZE 0x8A40
#define GL_UNIFORM_BLOCK_NAME_LENGTH 0x8A41
#define GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS 0x8A42
#define GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES 0x8A43
#define GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER 0x8A44
#define GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER 0x8A45
#define GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER 0x8A46
#define GL_TEXTURE_SRGB_DECODE_EXT 0x8A48
#define GL_DECODE_EXT 0x8A49
#define GL_SKIP_DECODE_EXT 0x8A4A
#define GL_PROGRAM_PIPELINE_OBJECT_EXT 0x8A4F
#define GL_RGB_RAW_422_APPLE 0x8A51
#define GL_FRAGMENT_SHADER_DISCARDS_SAMPLES_EXT 0x8A52
#define GL_SYNC_OBJECT_APPLE 0x8A53
#define GL_COMPRESSED_SRGB_PVRTC_2BPPV1_EXT 0x8A54
#define GL_COMPRESSED_SRGB_PVRTC_4BPPV1_EXT 0x8A55
#define GL_COMPRESSED_SRGB_ALPHA_PVRTC_2BPPV1_EXT 0x8A56
#define GL_COMPRESSED_SRGB_ALPHA_PVRTC_4BPPV1_EXT 0x8A57
#define GL_FRAGMENT_SHADER 0x8B30
#define GL_FRAGMENT_SHADER_ARB 0x8B30
#define GL_VERTEX_SHADER 0x8B31
#define GL_VERTEX_SHADER_ARB 0x8B31
#define GL_PROGRAM_OBJECT_ARB 0x8B40
#define GL_PROGRAM_OBJECT_EXT 0x8B40
#define GL_SHADER_OBJECT_ARB 0x8B48
#define GL_SHADER_OBJECT_EXT 0x8B48
#define GL_MAX_FRAGMENT_UNIFORM_COMPONENTS 0x8B49
#define GL_MAX_FRAGMENT_UNIFORM_COMPONENTS_ARB 0x8B49
#define GL_MAX_VERTEX_UNIFORM_COMPONENTS 0x8B4A
#define GL_MAX_VERTEX_UNIFORM_COMPONENTS_ARB 0x8B4A
#define GL_MAX_VARYING_COMPONENTS 0x8B4B
#define GL_MAX_VARYING_COMPONENTS_EXT 0x8B4B
#define GL_MAX_VARYING_FLOATS 0x8B4B
#define GL_MAX_VARYING_FLOATS_ARB 0x8B4B
#define GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS 0x8B4C
#define GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB 0x8B4C
#define GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS 0x8B4D
#define GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS_ARB 0x8B4D
#define GL_OBJECT_TYPE_ARB 0x8B4E
#define GL_OBJECT_SUBTYPE_ARB 0x8B4F
#define GL_SHADER_TYPE 0x8B4F
#define GL_FLOAT_VEC2 0x8B50
#define GL_FLOAT_VEC2_ARB 0x8B50
#define GL_FLOAT_VEC3 0x8B51
#define GL_FLOAT_VEC3_ARB 0x8B51
#define GL_FLOAT_VEC4 0x8B52
#define GL_FLOAT_VEC4_ARB 0x8B52
#define GL_INT_VEC2 0x8B53
#define GL_INT_VEC2_ARB 0x8B53
#define GL_INT_VEC3 0x8B54
#define GL_INT_VEC3_ARB 0x8B54
#define GL_INT_VEC4 0x8B55
#define GL_INT_VEC4_ARB 0x8B55
#define GL_BOOL 0x8B56
#define GL_BOOL_ARB 0x8B56
#define GL_BOOL_VEC2 0x8B57
#define GL_BOOL_VEC2_ARB 0x8B57
#define GL_BOOL_VEC3 0x8B58
#define GL_BOOL_VEC3_ARB 0x8B58
#define GL_BOOL_VEC4 0x8B59
#define GL_BOOL_VEC4_ARB 0x8B59
#define GL_FLOAT_MAT2 0x8B5A
#define GL_FLOAT_MAT2_ARB 0x8B5A
#define GL_FLOAT_MAT3 0x8B5B
#define GL_FLOAT_MAT3_ARB 0x8B5B
#define GL_FLOAT_MAT4 0x8B5C
#define GL_FLOAT_MAT4_ARB 0x8B5C
#define GL_SAMPLER_1D 0x8B5D
#define GL_SAMPLER_1D_ARB 0x8B5D
#define GL_SAMPLER_2D 0x8B5E
#define GL_SAMPLER_2D_ARB 0x8B5E
#define GL_SAMPLER_3D 0x8B5F
#define GL_SAMPLER_3D_ARB 0x8B5F
#define GL_SAMPLER_3D_OES 0x8B5F
#define GL_SAMPLER_CUBE 0x8B60
#define GL_SAMPLER_CUBE_ARB 0x8B60
#define GL_SAMPLER_1D_SHADOW 0x8B61
#define GL_SAMPLER_1D_SHADOW_ARB 0x8B61
#define GL_SAMPLER_2D_SHADOW 0x8B62
#define GL_SAMPLER_2D_SHADOW_ARB 0x8B62
#define GL_SAMPLER_2D_SHADOW_EXT 0x8B62
#define GL_SAMPLER_2D_RECT 0x8B63
#define GL_SAMPLER_2D_RECT_ARB 0x8B63
#define GL_SAMPLER_2D_RECT_SHADOW 0x8B64
#define GL_SAMPLER_2D_RECT_SHADOW_ARB 0x8B64
#define GL_FLOAT_MAT2x3 0x8B65
#define GL_FLOAT_MAT2x3_NV 0x8B65
#define GL_FLOAT_MAT2x4 0x8B66
#define GL_FLOAT_MAT2x4_NV 0x8B66
#define GL_FLOAT_MAT3x2 0x8B67
#define GL_FLOAT_MAT3x2_NV 0x8B67
#define GL_FLOAT_MAT3x4 0x8B68
#define GL_FLOAT_MAT3x4_NV 0x8B68
#define GL_FLOAT_MAT4x2 0x8B69
#define GL_FLOAT_MAT4x2_NV 0x8B69
#define GL_FLOAT_MAT4x3 0x8B6A
#define GL_FLOAT_MAT4x3_NV 0x8B6A
#define GL_DELETE_STATUS 0x8B80
#define GL_OBJECT_DELETE_STATUS_ARB 0x8B80
#define GL_COMPILE_STATUS 0x8B81
#define GL_OBJECT_COMPILE_STATUS_ARB 0x8B81
#define GL_LINK_STATUS 0x8B82
#define GL_OBJECT_LINK_STATUS_ARB 0x8B82
#define GL_OBJECT_VALIDATE_STATUS_ARB 0x8B83
#define GL_VALIDATE_STATUS 0x8B83
#define GL_INFO_LOG_LENGTH 0x8B84
#define GL_OBJECT_INFO_LOG_LENGTH_ARB 0x8B84
#define GL_ATTACHED_SHADERS 0x8B85
#define GL_OBJECT_ATTACHED_OBJECTS_ARB 0x8B85
#define GL_ACTIVE_UNIFORMS 0x8B86
#define GL_OBJECT_ACTIVE_UNIFORMS_ARB 0x8B86
#define GL_ACTIVE_UNIFORM_MAX_LENGTH 0x8B87
#define GL_OBJECT_ACTIVE_UNIFORM_MAX_LENGTH_ARB 0x8B87
#define GL_OBJECT_SHADER_SOURCE_LENGTH_ARB 0x8B88
#define GL_SHADER_SOURCE_LENGTH 0x8B88
#define GL_ACTIVE_ATTRIBUTES 0x8B89
#define GL_OBJECT_ACTIVE_ATTRIBUTES_ARB 0x8B89
#define GL_ACTIVE_ATTRIBUTE_MAX_LENGTH 0x8B8A
#define GL_OBJECT_ACTIVE_ATTRIBUTE_MAX_LENGTH_ARB 0x8B8A
#define GL_FRAGMENT_SHADER_DERIVATIVE_HINT 0x8B8B
#define GL_FRAGMENT_SHADER_DERIVATIVE_HINT_ARB 0x8B8B
#define GL_FRAGMENT_SHADER_DERIVATIVE_HINT_OES 0x8B8B
#define GL_SHADING_LANGUAGE_VERSION 0x8B8C
#define GL_SHADING_LANGUAGE_VERSION_ARB 0x8B8C
#define GL_CURRENT_PROGRAM 0x8B8D
#define GL_PALETTE4_RGB8_OES 0x8B90
#define GL_PALETTE4_RGBA8_OES 0x8B91
#define GL_PALETTE4_R5_G6_B5_OES 0x8B92
#define GL_PALETTE4_RGBA4_OES 0x8B93
#define GL_PALETTE4_RGB5_A1_OES 0x8B94
#define GL_PALETTE8_RGB8_OES 0x8B95
#define GL_PALETTE8_RGBA8_OES 0x8B96
#define GL_PALETTE8_R5_G6_B5_OES 0x8B97
#define GL_PALETTE8_RGBA4_OES 0x8B98
#define GL_PALETTE8_RGB5_A1_OES 0x8B99
#define GL_IMPLEMENTATION_COLOR_READ_TYPE 0x8B9A
#define GL_IMPLEMENTATION_COLOR_READ_TYPE_OES 0x8B9A
#define GL_IMPLEMENTATION_COLOR_READ_FORMAT 0x8B9B
#define GL_IMPLEMENTATION_COLOR_READ_FORMAT_OES 0x8B9B
#define GL_POINT_SIZE_ARRAY_OES 0x8B9C
#define GL_TEXTURE_CROP_RECT_OES 0x8B9D
#define GL_MATRIX_INDEX_ARRAY_BUFFER_BINDING_OES 0x8B9E
#define GL_POINT_SIZE_ARRAY_BUFFER_BINDING_OES 0x8B9F
#define GL_FRAGMENT_PROGRAM_POSITION_MESA 0x8BB0
#define GL_FRAGMENT_PROGRAM_CALLBACK_MESA 0x8BB1
#define GL_FRAGMENT_PROGRAM_CALLBACK_FUNC_MESA 0x8BB2
#define GL_FRAGMENT_PROGRAM_CALLBACK_DATA_MESA 0x8BB3
#define GL_VERTEX_PROGRAM_POSITION_MESA 0x8BB4
#define GL_VERTEX_PROGRAM_CALLBACK_MESA 0x8BB5
#define GL_VERTEX_PROGRAM_CALLBACK_FUNC_MESA 0x8BB6
#define GL_VERTEX_PROGRAM_CALLBACK_DATA_MESA 0x8BB7
#define GL_TILE_RASTER_ORDER_FIXED_MESA 0x8BB8
#define GL_TILE_RASTER_ORDER_INCREASING_X_MESA 0x8BB9
#define GL_TILE_RASTER_ORDER_INCREASING_Y_MESA 0x8BBA
#define GL_FRAMEBUFFER_FLIP_Y_MESA 0x8BBB
#define GL_COUNTER_TYPE_AMD 0x8BC0
#define GL_COUNTER_RANGE_AMD 0x8BC1
#define GL_UNSIGNED_INT64_AMD 0x8BC2
#define GL_PERCENTAGE_AMD 0x8BC3
#define GL_PERFMON_RESULT_AVAILABLE_AMD 0x8BC4
#define GL_PERFMON_RESULT_SIZE_AMD 0x8BC5
#define GL_PERFMON_RESULT_AMD 0x8BC6
#define GL_TEXTURE_WIDTH_QCOM 0x8BD2
#define GL_TEXTURE_HEIGHT_QCOM 0x8BD3
#define GL_TEXTURE_DEPTH_QCOM 0x8BD4
#define GL_TEXTURE_INTERNAL_FORMAT_QCOM 0x8BD5
#define GL_TEXTURE_FORMAT_QCOM 0x8BD6
#define GL_TEXTURE_TYPE_QCOM 0x8BD7
#define GL_TEXTURE_IMAGE_VALID_QCOM 0x8BD8
#define GL_TEXTURE_NUM_LEVELS_QCOM 0x8BD9
#define GL_TEXTURE_TARGET_QCOM 0x8BDA
#define GL_TEXTURE_OBJECT_VALID_QCOM 0x8BDB
#define GL_STATE_RESTORE 0x8BDC
#define GL_SAMPLER_EXTERNAL_2D_Y2Y_EXT 0x8BE7
#define GL_TEXTURE_PROTECTED_EXT 0x8BFA
#define GL_TEXTURE_FOVEATED_FEATURE_BITS_QCOM 0x8BFB
#define GL_TEXTURE_FOVEATED_MIN_PIXEL_DENSITY_QCOM 0x8BFC
#define GL_TEXTURE_FOVEATED_FEATURE_QUERY_QCOM 0x8BFD
#define GL_TEXTURE_FOVEATED_NUM_FOCAL_POINTS_QUERY_QCOM 0x8BFE
#define GL_FRAMEBUFFER_INCOMPLETE_FOVEATION_QCOM 0x8BFF
#define GL_COMPRESSED_RGB_PVRTC_4BPPV1_IMG 0x8C00
#define GL_COMPRESSED_RGB_PVRTC_2BPPV1_IMG 0x8C01
#define GL_COMPRESSED_RGBA_PVRTC_4BPPV1_IMG 0x8C02
#define GL_COMPRESSED_RGBA_PVRTC_2BPPV1_IMG 0x8C03
#define GL_MODULATE_COLOR_IMG 0x8C04
#define GL_RECIP_ADD_SIGNED_ALPHA_IMG 0x8C05
#define GL_TEXTURE_ALPHA_MODULATE_IMG 0x8C06
#define GL_FACTOR_ALPHA_MODULATE_IMG 0x8C07
#define GL_FRAGMENT_ALPHA_MODULATE_IMG 0x8C08
#define GL_ADD_BLEND_IMG 0x8C09
#define GL_SGX_BINARY_IMG 0x8C0A
#define GL_TEXTURE_RED_TYPE 0x8C10
#define GL_TEXTURE_RED_TYPE_ARB 0x8C10
#define GL_TEXTURE_GREEN_TYPE 0x8C11
#define GL_TEXTURE_GREEN_TYPE_ARB 0x8C11
#define GL_TEXTURE_BLUE_TYPE 0x8C12
#define GL_TEXTURE_BLUE_TYPE_ARB 0x8C12
#define GL_TEXTURE_ALPHA_TYPE 0x8C13
#define GL_TEXTURE_ALPHA_TYPE_ARB 0x8C13
#define GL_TEXTURE_LUMINANCE_TYPE 0x8C14
#define GL_TEXTURE_LUMINANCE_TYPE_ARB 0x8C14
#define GL_TEXTURE_INTENSITY_TYPE 0x8C15
#define GL_TEXTURE_INTENSITY_TYPE_ARB 0x8C15
#define GL_TEXTURE_DEPTH_TYPE 0x8C16
#define GL_TEXTURE_DEPTH_TYPE_ARB 0x8C16
#define GL_UNSIGNED_NORMALIZED 0x8C17
#define GL_UNSIGNED_NORMALIZED_ARB 0x8C17
#define GL_UNSIGNED_NORMALIZED_EXT 0x8C17
#define GL_TEXTURE_1D_ARRAY 0x8C18
#define GL_TEXTURE_1D_ARRAY_EXT 0x8C18
#define GL_PROXY_TEXTURE_1D_ARRAY 0x8C19
#define GL_PROXY_TEXTURE_1D_ARRAY_EXT 0x8C19
#define GL_TEXTURE_2D_ARRAY 0x8C1A
#define GL_TEXTURE_2D_ARRAY_EXT 0x8C1A
#define GL_PROXY_TEXTURE_2D_ARRAY 0x8C1B
#define GL_PROXY_TEXTURE_2D_ARRAY_EXT 0x8C1B
#define GL_TEXTURE_BINDING_1D_ARRAY 0x8C1C
#define GL_TEXTURE_BINDING_1D_ARRAY_EXT 0x8C1C
#define GL_TEXTURE_BINDING_2D_ARRAY 0x8C1D
#define GL_TEXTURE_BINDING_2D_ARRAY_EXT 0x8C1D
#define GL_GEOMETRY_PROGRAM_NV 0x8C26
#define GL_MAX_PROGRAM_OUTPUT_VERTICES_NV 0x8C27
#define GL_MAX_PROGRAM_TOTAL_OUTPUT_COMPONENTS_NV 0x8C28
#define GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS 0x8C29
#define GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_ARB 0x8C29
#define GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT 0x8C29
#define GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_OES 0x8C29
#define GL_TEXTURE_BUFFER 0x8C2A
#define GL_TEXTURE_BUFFER_ARB 0x8C2A
#define GL_TEXTURE_BUFFER_BINDING 0x8C2A
#define GL_TEXTURE_BUFFER_BINDING_EXT 0x8C2A
#define GL_TEXTURE_BUFFER_BINDING_OES 0x8C2A
#define GL_TEXTURE_BUFFER_EXT 0x8C2A
#define GL_TEXTURE_BUFFER_OES 0x8C2A
#define GL_MAX_TEXTURE_BUFFER_SIZE 0x8C2B
#define GL_MAX_TEXTURE_BUFFER_SIZE_ARB 0x8C2B
#define GL_MAX_TEXTURE_BUFFER_SIZE_EXT 0x8C2B
#define GL_MAX_TEXTURE_BUFFER_SIZE_OES 0x8C2B
#define GL_TEXTURE_BINDING_BUFFER 0x8C2C
#define GL_TEXTURE_BINDING_BUFFER_ARB 0x8C2C
#define GL_TEXTURE_BINDING_BUFFER_EXT 0x8C2C
#define GL_TEXTURE_BINDING_BUFFER_OES 0x8C2C
#define GL_TEXTURE_BUFFER_DATA_STORE_BINDING 0x8C2D
#define GL_TEXTURE_BUFFER_DATA_STORE_BINDING_ARB 0x8C2D
#define GL_TEXTURE_BUFFER_DATA_STORE_BINDING_EXT 0x8C2D
#define GL_TEXTURE_BUFFER_DATA_STORE_BINDING_OES 0x8C2D
#define GL_TEXTURE_BUFFER_FORMAT_ARB 0x8C2E
#define GL_TEXTURE_BUFFER_FORMAT_EXT 0x8C2E
#define GL_ANY_SAMPLES_PASSED 0x8C2F
#define GL_ANY_SAMPLES_PASSED_EXT 0x8C2F
#define GL_SAMPLE_SHADING 0x8C36
#define GL_SAMPLE_SHADING_ARB 0x8C36
#define GL_SAMPLE_SHADING_OES 0x8C36
#define GL_MIN_SAMPLE_SHADING_VALUE 0x8C37
#define GL_MIN_SAMPLE_SHADING_VALUE_ARB 0x8C37
#define GL_MIN_SAMPLE_SHADING_VALUE_OES 0x8C37
#define GL_R11F_G11F_B10F 0x8C3A
#define GL_R11F_G11F_B10F_APPLE 0x8C3A
#define GL_R11F_G11F_B10F_EXT 0x8C3A
#define GL_UNSIGNED_INT_10F_11F_11F_REV 0x8C3B
#define GL_UNSIGNED_INT_10F_11F_11F_REV_APPLE 0x8C3B
#define GL_UNSIGNED_INT_10F_11F_11F_REV_EXT 0x8C3B
#define GL_RGBA_SIGNED_COMPONENTS_EXT 0x8C3C
#define GL_RGB9_E5 0x8C3D
#define GL_RGB9_E5_APPLE 0x8C3D
#define GL_RGB9_E5_EXT 0x8C3D
#define GL_UNSIGNED_INT_5_9_9_9_REV 0x8C3E
#define GL_UNSIGNED_INT_5_9_9_9_REV_APPLE 0x8C3E
#define GL_UNSIGNED_INT_5_9_9_9_REV_EXT 0x8C3E
#define GL_TEXTURE_SHARED_SIZE 0x8C3F
#define GL_TEXTURE_SHARED_SIZE_EXT 0x8C3F
#define GL_SRGB 0x8C40
#define GL_SRGB_EXT 0x8C40
#define GL_SRGB8 0x8C41
#define GL_SRGB8_EXT 0x8C41
#define GL_SRGB8_NV 0x8C41
#define GL_SRGB_ALPHA 0x8C42
#define GL_SRGB_ALPHA_EXT 0x8C42
#define GL_SRGB8_ALPHA8 0x8C43
#define GL_SRGB8_ALPHA8_EXT 0x8C43
#define GL_SLUMINANCE_ALPHA 0x8C44
#define GL_SLUMINANCE_ALPHA_EXT 0x8C44
#define GL_SLUMINANCE_ALPHA_NV 0x8C44
#define GL_SLUMINANCE8_ALPHA8 0x8C45
#define GL_SLUMINANCE8_ALPHA8_EXT 0x8C45
#define GL_SLUMINANCE8_ALPHA8_NV 0x8C45
#define GL_SLUMINANCE 0x8C46
#define GL_SLUMINANCE_EXT 0x8C46
#define GL_SLUMINANCE_NV 0x8C46
#define GL_SLUMINANCE8 0x8C47
#define GL_SLUMINANCE8_EXT 0x8C47
#define GL_SLUMINANCE8_NV 0x8C47
#define GL_COMPRESSED_SRGB 0x8C48
#define GL_COMPRESSED_SRGB_EXT 0x8C48
#define GL_COMPRESSED_SRGB_ALPHA 0x8C49
#define GL_COMPRESSED_SRGB_ALPHA_EXT 0x8C49
#define GL_COMPRESSED_SLUMINANCE 0x8C4A
#define GL_COMPRESSED_SLUMINANCE_EXT 0x8C4A
#define GL_COMPRESSED_SLUMINANCE_ALPHA 0x8C4B
#define GL_COMPRESSED_SLUMINANCE_ALPHA_EXT 0x8C4B
#define GL_COMPRESSED_SRGB_S3TC_DXT1_EXT 0x8C4C
#define GL_COMPRESSED_SRGB_S3TC_DXT1_NV 0x8C4C
#define GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT 0x8C4D
#define GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_NV 0x8C4D
#define GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT 0x8C4E
#define GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_NV 0x8C4E
#define GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT 0x8C4F
#define GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_NV 0x8C4F
#define GL_COMPRESSED_LUMINANCE_LATC1_EXT 0x8C70
#define GL_COMPRESSED_SIGNED_LUMINANCE_LATC1_EXT 0x8C71
#define GL_COMPRESSED_LUMINANCE_ALPHA_LATC2_EXT 0x8C72
#define GL_COMPRESSED_SIGNED_LUMINANCE_ALPHA_LATC2_EXT 0x8C73
#define GL_TESS_CONTROL_PROGRAM_PARAMETER_BUFFER_NV 0x8C74
#define GL_TESS_EVALUATION_PROGRAM_PARAMETER_BUFFER_NV 0x8C75
#define GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH 0x8C76
#define GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH_EXT 0x8C76
#define GL_BACK_PRIMARY_COLOR_NV 0x8C77
#define GL_BACK_SECONDARY_COLOR_NV 0x8C78
#define GL_TEXTURE_COORD_NV 0x8C79
#define GL_CLIP_DISTANCE_NV 0x8C7A
#define GL_VERTEX_ID_NV 0x8C7B
#define GL_PRIMITIVE_ID_NV 0x8C7C
#define GL_GENERIC_ATTRIB_NV 0x8C7D
#define GL_TRANSFORM_FEEDBACK_ATTRIBS_NV 0x8C7E
#define GL_TRANSFORM_FEEDBACK_BUFFER_MODE 0x8C7F
#define GL_TRANSFORM_FEEDBACK_BUFFER_MODE_EXT 0x8C7F
#define GL_TRANSFORM_FEEDBACK_BUFFER_MODE_NV 0x8C7F
#define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS 0x8C80
#define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_EXT 0x8C80
#define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_NV 0x8C80
#define GL_ACTIVE_VARYINGS_NV 0x8C81
#define GL_ACTIVE_VARYING_MAX_LENGTH_NV 0x8C82
#define GL_TRANSFORM_FEEDBACK_VARYINGS 0x8C83
#define GL_TRANSFORM_FEEDBACK_VARYINGS_EXT 0x8C83
#define GL_TRANSFORM_FEEDBACK_VARYINGS_NV 0x8C83
#define GL_TRANSFORM_FEEDBACK_BUFFER_START 0x8C84
#define GL_TRANSFORM_FEEDBACK_BUFFER_START_EXT 0x8C84
#define GL_TRANSFORM_FEEDBACK_BUFFER_START_NV 0x8C84
#define GL_TRANSFORM_FEEDBACK_BUFFER_SIZE 0x8C85
#define GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_EXT 0x8C85
#define GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_NV 0x8C85
#define GL_TRANSFORM_FEEDBACK_RECORD_NV 0x8C86
#define GL_PRIMITIVES_GENERATED 0x8C87
#define GL_PRIMITIVES_GENERATED_EXT 0x8C87
#define GL_PRIMITIVES_GENERATED_NV 0x8C87
#define GL_PRIMITIVES_GENERATED_OES 0x8C87
#define GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN 0x8C88
#define GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_EXT 0x8C88
#define GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_NV 0x8C88
#define GL_RASTERIZER_DISCARD 0x8C89
#define GL_RASTERIZER_DISCARD_EXT 0x8C89
#define GL_RASTERIZER_DISCARD_NV 0x8C89
#define GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS 0x8C8A
#define GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_EXT 0x8C8A
#define GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_NV 0x8C8A
#define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS 0x8C8B
#define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_EXT 0x8C8B
#define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_NV 0x8C8B
#define GL_INTERLEAVED_ATTRIBS 0x8C8C
#define GL_INTERLEAVED_ATTRIBS_EXT 0x8C8C
#define GL_INTERLEAVED_ATTRIBS_NV 0x8C8C
#define GL_SEPARATE_ATTRIBS 0x8C8D
#define GL_SEPARATE_ATTRIBS_EXT 0x8C8D
#define GL_SEPARATE_ATTRIBS_NV 0x8C8D
#define GL_TRANSFORM_FEEDBACK_BUFFER 0x8C8E
#define GL_TRANSFORM_FEEDBACK_BUFFER_EXT 0x8C8E
#define GL_TRANSFORM_FEEDBACK_BUFFER_NV 0x8C8E
#define GL_TRANSFORM_FEEDBACK_BUFFER_BINDING 0x8C8F
#define GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_EXT 0x8C8F
#define GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_NV 0x8C8F
#define GL_ATC_RGB_AMD 0x8C92
#define GL_ATC_RGBA_EXPLICIT_ALPHA_AMD 0x8C93
#define GL_POINT_SPRITE_COORD_ORIGIN 0x8CA0
#define GL_LOWER_LEFT 0x8CA1
#define GL_LOWER_LEFT_EXT 0x8CA1
#define GL_UPPER_LEFT 0x8CA2
#define GL_UPPER_LEFT_EXT 0x8CA2
#define GL_STENCIL_BACK_REF 0x8CA3
#define GL_STENCIL_BACK_VALUE_MASK 0x8CA4
#define GL_STENCIL_BACK_WRITEMASK 0x8CA5
#define GL_DRAW_FRAMEBUFFER_BINDING 0x8CA6
#define GL_DRAW_FRAMEBUFFER_BINDING_ANGLE 0x8CA6
#define GL_DRAW_FRAMEBUFFER_BINDING_APPLE 0x8CA6
#define GL_DRAW_FRAMEBUFFER_BINDING_EXT 0x8CA6
#define GL_DRAW_FRAMEBUFFER_BINDING_NV 0x8CA6
#define GL_FRAMEBUFFER_BINDING 0x8CA6
#define GL_FRAMEBUFFER_BINDING_ANGLE 0x8CA6
#define GL_FRAMEBUFFER_BINDING_EXT 0x8CA6
#define GL_FRAMEBUFFER_BINDING_OES 0x8CA6
#define GL_RENDERBUFFER_BINDING 0x8CA7
#define GL_RENDERBUFFER_BINDING_ANGLE 0x8CA7
#define GL_RENDERBUFFER_BINDING_EXT 0x8CA7
#define GL_RENDERBUFFER_BINDING_OES 0x8CA7
#define GL_READ_FRAMEBUFFER 0x8CA8
#define GL_READ_FRAMEBUFFER_ANGLE 0x8CA8
#define GL_READ_FRAMEBUFFER_APPLE 0x8CA8
#define GL_READ_FRAMEBUFFER_EXT 0x8CA8
#define GL_READ_FRAMEBUFFER_NV 0x8CA8
#define GL_DRAW_FRAMEBUFFER 0x8CA9
#define GL_DRAW_FRAMEBUFFER_ANGLE 0x8CA9
#define GL_DRAW_FRAMEBUFFER_APPLE 0x8CA9
#define GL_DRAW_FRAMEBUFFER_EXT 0x8CA9
#define GL_DRAW_FRAMEBUFFER_NV 0x8CA9
#define GL_READ_FRAMEBUFFER_BINDING 0x8CAA
#define GL_READ_FRAMEBUFFER_BINDING_ANGLE 0x8CAA
#define GL_READ_FRAMEBUFFER_BINDING_APPLE 0x8CAA
#define GL_READ_FRAMEBUFFER_BINDING_EXT 0x8CAA
#define GL_READ_FRAMEBUFFER_BINDING_NV 0x8CAA
#define GL_RENDERBUFFER_COVERAGE_SAMPLES_NV 0x8CAB
#define GL_RENDERBUFFER_SAMPLES 0x8CAB
#define GL_RENDERBUFFER_SAMPLES_ANGLE 0x8CAB
#define GL_RENDERBUFFER_SAMPLES_APPLE 0x8CAB
#define GL_RENDERBUFFER_SAMPLES_EXT 0x8CAB
#define GL_RENDERBUFFER_SAMPLES_NV 0x8CAB
#define GL_DEPTH_COMPONENT32F 0x8CAC
#define GL_DEPTH32F_STENCIL8 0x8CAD
#define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE 0x8CD0
#define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_EXT 0x8CD0
#define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_OES 0x8CD0
#define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME 0x8CD1
#define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_EXT 0x8CD1
#define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_OES 0x8CD1
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL 0x8CD2
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_EXT 0x8CD2
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_OES 0x8CD2
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE 0x8CD3
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_EXT 0x8CD3
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_OES 0x8CD3
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_EXT 0x8CD4
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_OES 0x8CD4
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER 0x8CD4
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT 0x8CD4
#define GL_FRAMEBUFFER_COMPLETE 0x8CD5
#define GL_FRAMEBUFFER_COMPLETE_EXT 0x8CD5
#define GL_FRAMEBUFFER_COMPLETE_OES 0x8CD5
#define GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT 0x8CD6
#define GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_EXT 0x8CD6
#define GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_OES 0x8CD6
#define GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT 0x8CD7
#define GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_EXT 0x8CD7
#define GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_OES 0x8CD7
#define GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS 0x8CD9
#define GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_EXT 0x8CD9
#define GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_OES 0x8CD9
#define GL_FRAMEBUFFER_INCOMPLETE_FORMATS_EXT 0x8CDA
#define GL_FRAMEBUFFER_INCOMPLETE_FORMATS_OES 0x8CDA
#define GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER 0x8CDB
#define GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_EXT 0x8CDB
#define GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_OES 0x8CDB
#define GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER 0x8CDC
#define GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_EXT 0x8CDC
#define GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_OES 0x8CDC
#define GL_FRAMEBUFFER_UNSUPPORTED 0x8CDD
#define GL_FRAMEBUFFER_UNSUPPORTED_EXT 0x8CDD
#define GL_FRAMEBUFFER_UNSUPPORTED_OES 0x8CDD
#define GL_MAX_COLOR_ATTACHMENTS 0x8CDF
#define GL_MAX_COLOR_ATTACHMENTS_EXT 0x8CDF
#define GL_MAX_COLOR_ATTACHMENTS_NV 0x8CDF
#define GL_COLOR_ATTACHMENT0 0x8CE0
#define GL_COLOR_ATTACHMENT0_EXT 0x8CE0
#define GL_COLOR_ATTACHMENT0_NV 0x8CE0
#define GL_COLOR_ATTACHMENT0_OES 0x8CE0
#define GL_COLOR_ATTACHMENT1 0x8CE1
#define GL_COLOR_ATTACHMENT1_EXT 0x8CE1
#define GL_COLOR_ATTACHMENT1_NV 0x8CE1
#define GL_COLOR_ATTACHMENT2 0x8CE2
#define GL_COLOR_ATTACHMENT2_EXT 0x8CE2
#define GL_COLOR_ATTACHMENT2_NV 0x8CE2
#define GL_COLOR_ATTACHMENT3 0x8CE3
#define GL_COLOR_ATTACHMENT3_EXT 0x8CE3
#define GL_COLOR_ATTACHMENT3_NV 0x8CE3
#define GL_COLOR_ATTACHMENT4 0x8CE4
#define GL_COLOR_ATTACHMENT4_EXT 0x8CE4
#define GL_COLOR_ATTACHMENT4_NV 0x8CE4
#define GL_COLOR_ATTACHMENT5 0x8CE5
#define GL_COLOR_ATTACHMENT5_EXT 0x8CE5
#define GL_COLOR_ATTACHMENT5_NV 0x8CE5
#define GL_COLOR_ATTACHMENT6 0x8CE6
#define GL_COLOR_ATTACHMENT6_EXT 0x8CE6
#define GL_COLOR_ATTACHMENT6_NV 0x8CE6
#define GL_COLOR_ATTACHMENT7 0x8CE7
#define GL_COLOR_ATTACHMENT7_EXT 0x8CE7
#define GL_COLOR_ATTACHMENT7_NV 0x8CE7
#define GL_COLOR_ATTACHMENT8 0x8CE8
#define GL_COLOR_ATTACHMENT8_EXT 0x8CE8
#define GL_COLOR_ATTACHMENT8_NV 0x8CE8
#define GL_COLOR_ATTACHMENT9 0x8CE9
#define GL_COLOR_ATTACHMENT9_EXT 0x8CE9
#define GL_COLOR_ATTACHMENT9_NV 0x8CE9
#define GL_COLOR_ATTACHMENT10 0x8CEA
#define GL_COLOR_ATTACHMENT10_EXT 0x8CEA
#define GL_COLOR_ATTACHMENT10_NV 0x8CEA
#define GL_COLOR_ATTACHMENT11 0x8CEB
#define GL_COLOR_ATTACHMENT11_EXT 0x8CEB
#define GL_COLOR_ATTACHMENT11_NV 0x8CEB
#define GL_COLOR_ATTACHMENT12 0x8CEC
#define GL_COLOR_ATTACHMENT12_EXT 0x8CEC
#define GL_COLOR_ATTACHMENT12_NV 0x8CEC
#define GL_COLOR_ATTACHMENT13 0x8CED
#define GL_COLOR_ATTACHMENT13_EXT 0x8CED
#define GL_COLOR_ATTACHMENT13_NV 0x8CED
#define GL_COLOR_ATTACHMENT14 0x8CEE
#define GL_COLOR_ATTACHMENT14_EXT 0x8CEE
#define GL_COLOR_ATTACHMENT14_NV 0x8CEE
#define GL_COLOR_ATTACHMENT15 0x8CEF
#define GL_COLOR_ATTACHMENT15_EXT 0x8CEF
#define GL_COLOR_ATTACHMENT15_NV 0x8CEF
#define GL_COLOR_ATTACHMENT16 0x8CF0
#define GL_COLOR_ATTACHMENT17 0x8CF1
#define GL_COLOR_ATTACHMENT18 0x8CF2
#define GL_COLOR_ATTACHMENT19 0x8CF3
#define GL_COLOR_ATTACHMENT20 0x8CF4
#define GL_COLOR_ATTACHMENT21 0x8CF5
#define GL_COLOR_ATTACHMENT22 0x8CF6
#define GL_COLOR_ATTACHMENT23 0x8CF7
#define GL_COLOR_ATTACHMENT24 0x8CF8
#define GL_COLOR_ATTACHMENT25 0x8CF9
#define GL_COLOR_ATTACHMENT26 0x8CFA
#define GL_COLOR_ATTACHMENT27 0x8CFB
#define GL_COLOR_ATTACHMENT28 0x8CFC
#define GL_COLOR_ATTACHMENT29 0x8CFD
#define GL_COLOR_ATTACHMENT30 0x8CFE
#define GL_COLOR_ATTACHMENT31 0x8CFF
#define GL_DEPTH_ATTACHMENT 0x8D00
#define GL_DEPTH_ATTACHMENT_EXT 0x8D00
#define GL_DEPTH_ATTACHMENT_OES 0x8D00
#define GL_STENCIL_ATTACHMENT 0x8D20
#define GL_STENCIL_ATTACHMENT_EXT 0x8D20
#define GL_STENCIL_ATTACHMENT_OES 0x8D20
#define GL_FRAMEBUFFER 0x8D40
#define GL_FRAMEBUFFER_EXT 0x8D40
#define GL_FRAMEBUFFER_OES 0x8D40
#define GL_RENDERBUFFER 0x8D41
#define GL_RENDERBUFFER_EXT 0x8D41
#define GL_RENDERBUFFER_OES 0x8D41
#define GL_RENDERBUFFER_WIDTH 0x8D42
#define GL_RENDERBUFFER_WIDTH_EXT 0x8D42
#define GL_RENDERBUFFER_WIDTH_OES 0x8D42
#define GL_RENDERBUFFER_HEIGHT 0x8D43
#define GL_RENDERBUFFER_HEIGHT_EXT 0x8D43
#define GL_RENDERBUFFER_HEIGHT_OES 0x8D43
#define GL_RENDERBUFFER_INTERNAL_FORMAT 0x8D44
#define GL_RENDERBUFFER_INTERNAL_FORMAT_EXT 0x8D44
#define GL_RENDERBUFFER_INTERNAL_FORMAT_OES 0x8D44
#define GL_STENCIL_INDEX1 0x8D46
#define GL_STENCIL_INDEX1_EXT 0x8D46
#define GL_STENCIL_INDEX1_OES 0x8D46
#define GL_STENCIL_INDEX4 0x8D47
#define GL_STENCIL_INDEX4_EXT 0x8D47
#define GL_STENCIL_INDEX4_OES 0x8D47
#define GL_STENCIL_INDEX8 0x8D48
#define GL_STENCIL_INDEX8_EXT 0x8D48
#define GL_STENCIL_INDEX8_OES 0x8D48
#define GL_STENCIL_INDEX16 0x8D49
#define GL_STENCIL_INDEX16_EXT 0x8D49
#define GL_RENDERBUFFER_RED_SIZE 0x8D50
#define GL_RENDERBUFFER_RED_SIZE_EXT 0x8D50
#define GL_RENDERBUFFER_RED_SIZE_OES 0x8D50
#define GL_RENDERBUFFER_GREEN_SIZE 0x8D51
#define GL_RENDERBUFFER_GREEN_SIZE_EXT 0x8D51
#define GL_RENDERBUFFER_GREEN_SIZE_OES 0x8D51
#define GL_RENDERBUFFER_BLUE_SIZE 0x8D52
#define GL_RENDERBUFFER_BLUE_SIZE_EXT 0x8D52
#define GL_RENDERBUFFER_BLUE_SIZE_OES 0x8D52
#define GL_RENDERBUFFER_ALPHA_SIZE 0x8D53
#define GL_RENDERBUFFER_ALPHA_SIZE_EXT 0x8D53
#define GL_RENDERBUFFER_ALPHA_SIZE_OES 0x8D53
#define GL_RENDERBUFFER_DEPTH_SIZE 0x8D54
#define GL_RENDERBUFFER_DEPTH_SIZE_EXT 0x8D54
#define GL_RENDERBUFFER_DEPTH_SIZE_OES 0x8D54
#define GL_RENDERBUFFER_STENCIL_SIZE 0x8D55
#define GL_RENDERBUFFER_STENCIL_SIZE_EXT 0x8D55
#define GL_RENDERBUFFER_STENCIL_SIZE_OES 0x8D55
#define GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE 0x8D56
#define GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_ANGLE 0x8D56
#define GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_APPLE 0x8D56
#define GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_EXT 0x8D56
#define GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_NV 0x8D56
#define GL_MAX_SAMPLES 0x8D57
#define GL_MAX_SAMPLES_ANGLE 0x8D57
#define GL_MAX_SAMPLES_APPLE 0x8D57
#define GL_MAX_SAMPLES_EXT 0x8D57
#define GL_MAX_SAMPLES_NV 0x8D57
#define GL_TEXTURE_GEN_STR_OES 0x8D60
#define GL_HALF_FLOAT_OES 0x8D61
#define GL_RGB565 0x8D62
#define GL_RGB565_OES 0x8D62
#define GL_ETC1_RGB8_OES 0x8D64
#define GL_TEXTURE_EXTERNAL_OES 0x8D65
#define GL_SAMPLER_EXTERNAL_OES 0x8D66
#define GL_TEXTURE_BINDING_EXTERNAL_OES 0x8D67
#define GL_REQUIRED_TEXTURE_IMAGE_UNITS_OES 0x8D68
#define GL_PRIMITIVE_RESTART_FIXED_INDEX 0x8D69
#define GL_ANY_SAMPLES_PASSED_CONSERVATIVE 0x8D6A
#define GL_ANY_SAMPLES_PASSED_CONSERVATIVE_EXT 0x8D6A
#define GL_MAX_ELEMENT_INDEX 0x8D6B
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_SAMPLES_EXT 0x8D6C
#define GL_RGBA32UI 0x8D70
#define GL_RGBA32UI_EXT 0x8D70
#define GL_RGB32UI 0x8D71
#define GL_RGB32UI_EXT 0x8D71
#define GL_ALPHA32UI_EXT 0x8D72
#define GL_INTENSITY32UI_EXT 0x8D73
#define GL_LUMINANCE32UI_EXT 0x8D74
#define GL_LUMINANCE_ALPHA32UI_EXT 0x8D75
#define GL_RGBA16UI 0x8D76
#define GL_RGBA16UI_EXT 0x8D76
#define GL_RGB16UI 0x8D77
#define GL_RGB16UI_EXT 0x8D77
#define GL_ALPHA16UI_EXT 0x8D78
#define GL_INTENSITY16UI_EXT 0x8D79
#define GL_LUMINANCE16UI_EXT 0x8D7A
#define GL_LUMINANCE_ALPHA16UI_EXT 0x8D7B
#define GL_RGBA8UI 0x8D7C
#define GL_RGBA8UI_EXT 0x8D7C
#define GL_RGB8UI 0x8D7D
#define GL_RGB8UI_EXT 0x8D7D
#define GL_ALPHA8UI_EXT 0x8D7E
#define GL_INTENSITY8UI_EXT 0x8D7F
#define GL_LUMINANCE8UI_EXT 0x8D80
#define GL_LUMINANCE_ALPHA8UI_EXT 0x8D81
#define GL_RGBA32I 0x8D82
#define GL_RGBA32I_EXT 0x8D82
#define GL_RGB32I 0x8D83
#define GL_RGB32I_EXT 0x8D83
#define GL_ALPHA32I_EXT 0x8D84
#define GL_INTENSITY32I_EXT 0x8D85
#define GL_LUMINANCE32I_EXT 0x8D86
#define GL_LUMINANCE_ALPHA32I_EXT 0x8D87
#define GL_RGBA16I 0x8D88
#define GL_RGBA16I_EXT 0x8D88
#define GL_RGB16I 0x8D89
#define GL_RGB16I_EXT 0x8D89
#define GL_ALPHA16I_EXT 0x8D8A
#define GL_INTENSITY16I_EXT 0x8D8B
#define GL_LUMINANCE16I_EXT 0x8D8C
#define GL_LUMINANCE_ALPHA16I_EXT 0x8D8D
#define GL_RGBA8I 0x8D8E
#define GL_RGBA8I_EXT 0x8D8E
#define GL_RGB8I 0x8D8F
#define GL_RGB8I_EXT 0x8D8F
#define GL_ALPHA8I_EXT 0x8D90
#define GL_INTENSITY8I_EXT 0x8D91
#define GL_LUMINANCE8I_EXT 0x8D92
#define GL_LUMINANCE_ALPHA8I_EXT 0x8D93
#define GL_RED_INTEGER 0x8D94
#define GL_RED_INTEGER_EXT 0x8D94
#define GL_GREEN_INTEGER 0x8D95
#define GL_GREEN_INTEGER_EXT 0x8D95
#define GL_BLUE_INTEGER 0x8D96
#define GL_BLUE_INTEGER_EXT 0x8D96
#define GL_ALPHA_INTEGER 0x8D97
#define GL_ALPHA_INTEGER_EXT 0x8D97
#define GL_RGB_INTEGER 0x8D98
#define GL_RGB_INTEGER_EXT 0x8D98
#define GL_RGBA_INTEGER 0x8D99
#define GL_RGBA_INTEGER_EXT 0x8D99
#define GL_BGR_INTEGER 0x8D9A
#define GL_BGR_INTEGER_EXT 0x8D9A
#define GL_BGRA_INTEGER 0x8D9B
#define GL_BGRA_INTEGER_EXT 0x8D9B
#define GL_LUMINANCE_INTEGER_EXT 0x8D9C
#define GL_LUMINANCE_ALPHA_INTEGER_EXT 0x8D9D
#define GL_RGBA_INTEGER_MODE_EXT 0x8D9E
#define GL_INT_2_10_10_10_REV 0x8D9F
#define GL_MAX_PROGRAM_PARAMETER_BUFFER_BINDINGS_NV 0x8DA0
#define GL_MAX_PROGRAM_PARAMETER_BUFFER_SIZE_NV 0x8DA1
#define GL_VERTEX_PROGRAM_PARAMETER_BUFFER_NV 0x8DA2
#define GL_GEOMETRY_PROGRAM_PARAMETER_BUFFER_NV 0x8DA3
#define GL_FRAGMENT_PROGRAM_PARAMETER_BUFFER_NV 0x8DA4
#define GL_MAX_PROGRAM_GENERIC_ATTRIBS_NV 0x8DA5
#define GL_MAX_PROGRAM_GENERIC_RESULTS_NV 0x8DA6
#define GL_FRAMEBUFFER_ATTACHMENT_LAYERED 0x8DA7
#define GL_FRAMEBUFFER_ATTACHMENT_LAYERED_ARB 0x8DA7
#define GL_FRAMEBUFFER_ATTACHMENT_LAYERED_EXT 0x8DA7
#define GL_FRAMEBUFFER_ATTACHMENT_LAYERED_OES 0x8DA7
#define GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS 0x8DA8
#define GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_ARB 0x8DA8
#define GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXT 0x8DA8
#define GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_OES 0x8DA8
#define GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_ARB 0x8DA9
#define GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_EXT 0x8DA9
#define GL_LAYER_NV 0x8DAA
#define GL_DEPTH_COMPONENT32F_NV 0x8DAB
#define GL_DEPTH32F_STENCIL8_NV 0x8DAC
#define GL_FLOAT_32_UNSIGNED_INT_24_8_REV 0x8DAD
#define GL_FLOAT_32_UNSIGNED_INT_24_8_REV_NV 0x8DAD
#define GL_SHADER_INCLUDE_ARB 0x8DAE
#define GL_DEPTH_BUFFER_FLOAT_MODE_NV 0x8DAF
#define GL_FRAMEBUFFER_SRGB 0x8DB9
#define GL_FRAMEBUFFER_SRGB_EXT 0x8DB9
#define GL_FRAMEBUFFER_SRGB_CAPABLE_EXT 0x8DBA
#define GL_COMPRESSED_RED_RGTC1 0x8DBB
#define GL_COMPRESSED_RED_RGTC1_EXT 0x8DBB
#define GL_COMPRESSED_SIGNED_RED_RGTC1 0x8DBC
#define GL_COMPRESSED_SIGNED_RED_RGTC1_EXT 0x8DBC
#define GL_COMPRESSED_RED_GREEN_RGTC2_EXT 0x8DBD
#define GL_COMPRESSED_RG_RGTC2 0x8DBD
#define GL_COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT 0x8DBE
#define GL_COMPRESSED_SIGNED_RG_RGTC2 0x8DBE
#define GL_SAMPLER_1D_ARRAY 0x8DC0
#define GL_SAMPLER_1D_ARRAY_EXT 0x8DC0
#define GL_SAMPLER_2D_ARRAY 0x8DC1
#define GL_SAMPLER_2D_ARRAY_EXT 0x8DC1
#define GL_SAMPLER_BUFFER 0x8DC2
#define GL_SAMPLER_BUFFER_EXT 0x8DC2
#define GL_SAMPLER_BUFFER_OES 0x8DC2
#define GL_SAMPLER_1D_ARRAY_SHADOW 0x8DC3
#define GL_SAMPLER_1D_ARRAY_SHADOW_EXT 0x8DC3
#define GL_SAMPLER_2D_ARRAY_SHADOW 0x8DC4
#define GL_SAMPLER_2D_ARRAY_SHADOW_EXT 0x8DC4
#define GL_SAMPLER_2D_ARRAY_SHADOW_NV 0x8DC4
#define GL_SAMPLER_CUBE_SHADOW 0x8DC5
#define GL_SAMPLER_CUBE_SHADOW_EXT 0x8DC5
#define GL_SAMPLER_CUBE_SHADOW_NV 0x8DC5
#define GL_UNSIGNED_INT_VEC2 0x8DC6
#define GL_UNSIGNED_INT_VEC2_EXT 0x8DC6
#define GL_UNSIGNED_INT_VEC3 0x8DC7
#define GL_UNSIGNED_INT_VEC3_EXT 0x8DC7
#define GL_UNSIGNED_INT_VEC4 0x8DC8
#define GL_UNSIGNED_INT_VEC4_EXT 0x8DC8
#define GL_INT_SAMPLER_1D 0x8DC9
#define GL_INT_SAMPLER_1D_EXT 0x8DC9
#define GL_INT_SAMPLER_2D 0x8DCA
#define GL_INT_SAMPLER_2D_EXT 0x8DCA
#define GL_INT_SAMPLER_3D 0x8DCB
#define GL_INT_SAMPLER_3D_EXT 0x8DCB
#define GL_INT_SAMPLER_CUBE 0x8DCC
#define GL_INT_SAMPLER_CUBE_EXT 0x8DCC
#define GL_INT_SAMPLER_2D_RECT 0x8DCD
#define GL_INT_SAMPLER_2D_RECT_EXT 0x8DCD
#define GL_INT_SAMPLER_1D_ARRAY 0x8DCE
#define GL_INT_SAMPLER_1D_ARRAY_EXT 0x8DCE
#define GL_INT_SAMPLER_2D_ARRAY 0x8DCF
#define GL_INT_SAMPLER_2D_ARRAY_EXT 0x8DCF
#define GL_INT_SAMPLER_BUFFER 0x8DD0
#define GL_INT_SAMPLER_BUFFER_EXT 0x8DD0
#define GL_INT_SAMPLER_BUFFER_OES 0x8DD0
#define GL_UNSIGNED_INT_SAMPLER_1D 0x8DD1
#define GL_UNSIGNED_INT_SAMPLER_1D_EXT 0x8DD1
#define GL_UNSIGNED_INT_SAMPLER_2D 0x8DD2
#define GL_UNSIGNED_INT_SAMPLER_2D_EXT 0x8DD2
#define GL_UNSIGNED_INT_SAMPLER_3D 0x8DD3
#define GL_UNSIGNED_INT_SAMPLER_3D_EXT 0x8DD3
#define GL_UNSIGNED_INT_SAMPLER_CUBE 0x8DD4
#define GL_UNSIGNED_INT_SAMPLER_CUBE_EXT 0x8DD4
#define GL_UNSIGNED_INT_SAMPLER_2D_RECT 0x8DD5
#define GL_UNSIGNED_INT_SAMPLER_2D_RECT_EXT 0x8DD5
#define GL_UNSIGNED_INT_SAMPLER_1D_ARRAY 0x8DD6
#define GL_UNSIGNED_INT_SAMPLER_1D_ARRAY_EXT 0x8DD6
#define GL_UNSIGNED_INT_SAMPLER_2D_ARRAY 0x8DD7
#define GL_UNSIGNED_INT_SAMPLER_2D_ARRAY_EXT 0x8DD7
#define GL_UNSIGNED_INT_SAMPLER_BUFFER 0x8DD8
#define GL_UNSIGNED_INT_SAMPLER_BUFFER_EXT 0x8DD8
#define GL_UNSIGNED_INT_SAMPLER_BUFFER_OES 0x8DD8
#define GL_GEOMETRY_SHADER 0x8DD9
#define GL_GEOMETRY_SHADER_ARB 0x8DD9
#define GL_GEOMETRY_SHADER_EXT 0x8DD9
#define GL_GEOMETRY_SHADER_OES 0x8DD9
#define GL_GEOMETRY_VERTICES_OUT_ARB 0x8DDA
#define GL_GEOMETRY_VERTICES_OUT_EXT 0x8DDA
#define GL_GEOMETRY_INPUT_TYPE_ARB 0x8DDB
#define GL_GEOMETRY_INPUT_TYPE_EXT 0x8DDB
#define GL_GEOMETRY_OUTPUT_TYPE_ARB 0x8DDC
#define GL_GEOMETRY_OUTPUT_TYPE_EXT 0x8DDC
#define GL_MAX_GEOMETRY_VARYING_COMPONENTS_ARB 0x8DDD
#define GL_MAX_GEOMETRY_VARYING_COMPONENTS_EXT 0x8DDD
#define GL_MAX_VERTEX_VARYING_COMPONENTS_ARB 0x8DDE
#define GL_MAX_VERTEX_VARYING_COMPONENTS_EXT 0x8DDE
#define GL_MAX_GEOMETRY_UNIFORM_COMPONENTS 0x8DDF
#define GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_ARB 0x8DDF
#define GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_EXT 0x8DDF
#define GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_OES 0x8DDF
#define GL_MAX_GEOMETRY_OUTPUT_VERTICES 0x8DE0
#define GL_MAX_GEOMETRY_OUTPUT_VERTICES_ARB 0x8DE0
#define GL_MAX_GEOMETRY_OUTPUT_VERTICES_EXT 0x8DE0
#define GL_MAX_GEOMETRY_OUTPUT_VERTICES_OES 0x8DE0
#define GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS 0x8DE1
#define GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_ARB 0x8DE1
#define GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_EXT 0x8DE1
#define GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_OES 0x8DE1
#define GL_MAX_VERTEX_BINDABLE_UNIFORMS_EXT 0x8DE2
#define GL_MAX_FRAGMENT_BINDABLE_UNIFORMS_EXT 0x8DE3
#define GL_MAX_GEOMETRY_BINDABLE_UNIFORMS_EXT 0x8DE4
#define GL_ACTIVE_SUBROUTINES 0x8DE5
#define GL_ACTIVE_SUBROUTINE_UNIFORMS 0x8DE6
#define GL_MAX_SUBROUTINES 0x8DE7
#define GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS 0x8DE8
#define GL_NAMED_STRING_LENGTH_ARB 0x8DE9
#define GL_NAMED_STRING_TYPE_ARB 0x8DEA
#define GL_MAX_BINDABLE_UNIFORM_SIZE_EXT 0x8DED
#define GL_UNIFORM_BUFFER_EXT 0x8DEE
#define GL_UNIFORM_BUFFER_BINDING_EXT 0x8DEF
#define GL_LOW_FLOAT 0x8DF0
#define GL_MEDIUM_FLOAT 0x8DF1
#define GL_HIGH_FLOAT 0x8DF2
#define GL_LOW_INT 0x8DF3
#define GL_MEDIUM_INT 0x8DF4
#define GL_HIGH_INT 0x8DF5
#define GL_UNSIGNED_INT_10_10_10_2_OES 0x8DF6
#define GL_INT_10_10_10_2_OES 0x8DF7
#define GL_SHADER_BINARY_FORMATS 0x8DF8
#define GL_NUM_SHADER_BINARY_FORMATS 0x8DF9
#define GL_SHADER_COMPILER 0x8DFA
#define GL_MAX_VERTEX_UNIFORM_VECTORS 0x8DFB
#define GL_MAX_VARYING_VECTORS 0x8DFC
#define GL_MAX_FRAGMENT_UNIFORM_VECTORS 0x8DFD
#define GL_RENDERBUFFER_COLOR_SAMPLES_NV 0x8E10
#define GL_MAX_MULTISAMPLE_COVERAGE_MODES_NV 0x8E11
#define GL_MULTISAMPLE_COVERAGE_MODES_NV 0x8E12
#define GL_QUERY_WAIT 0x8E13
#define GL_QUERY_WAIT_NV 0x8E13
#define GL_QUERY_NO_WAIT 0x8E14
#define GL_QUERY_NO_WAIT_NV 0x8E14
#define GL_QUERY_BY_REGION_WAIT 0x8E15
#define GL_QUERY_BY_REGION_WAIT_NV 0x8E15
#define GL_QUERY_BY_REGION_NO_WAIT 0x8E16
#define GL_QUERY_BY_REGION_NO_WAIT_NV 0x8E16
#define GL_QUERY_WAIT_INVERTED 0x8E17
#define GL_QUERY_NO_WAIT_INVERTED 0x8E18
#define GL_QUERY_BY_REGION_WAIT_INVERTED 0x8E19
#define GL_QUERY_BY_REGION_NO_WAIT_INVERTED 0x8E1A
#define GL_POLYGON_OFFSET_CLAMP 0x8E1B
#define GL_POLYGON_OFFSET_CLAMP_EXT 0x8E1B
#define GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS 0x8E1E
#define GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS_EXT 0x8E1E
#define GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS_OES 0x8E1E
#define GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS 0x8E1F
#define GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS_EXT 0x8E1F
#define GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS_OES 0x8E1F
#define GL_COLOR_SAMPLES_NV 0x8E20
#define GL_TRANSFORM_FEEDBACK 0x8E22
#define GL_TRANSFORM_FEEDBACK_NV 0x8E22
#define GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED 0x8E23
#define GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED_NV 0x8E23
#define GL_TRANSFORM_FEEDBACK_PAUSED 0x8E23
#define GL_TRANSFORM_FEEDBACK_ACTIVE 0x8E24
#define GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE 0x8E24
#define GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE_NV 0x8E24
#define GL_TRANSFORM_FEEDBACK_BINDING 0x8E25
#define GL_TRANSFORM_FEEDBACK_BINDING_NV 0x8E25
#define GL_FRAME_NV 0x8E26
#define GL_FIELDS_NV 0x8E27
#define GL_CURRENT_TIME_NV 0x8E28
#define GL_TIMESTAMP 0x8E28
#define GL_TIMESTAMP_EXT 0x8E28
#define GL_NUM_FILL_STREAMS_NV 0x8E29
#define GL_PRESENT_TIME_NV 0x8E2A
#define GL_PRESENT_DURATION_NV 0x8E2B
#define GL_DEPTH_COMPONENT16_NONLINEAR_NV 0x8E2C
#define GL_PROGRAM_MATRIX_EXT 0x8E2D
#define GL_TRANSPOSE_PROGRAM_MATRIX_EXT 0x8E2E
#define GL_PROGRAM_MATRIX_STACK_DEPTH_EXT 0x8E2F
#define GL_TEXTURE_SWIZZLE_R 0x8E42
#define GL_TEXTURE_SWIZZLE_R_EXT 0x8E42
#define GL_TEXTURE_SWIZZLE_G 0x8E43
#define GL_TEXTURE_SWIZZLE_G_EXT 0x8E43
#define GL_TEXTURE_SWIZZLE_B 0x8E44
#define GL_TEXTURE_SWIZZLE_B_EXT 0x8E44
#define GL_TEXTURE_SWIZZLE_A 0x8E45
#define GL_TEXTURE_SWIZZLE_A_EXT 0x8E45
#define GL_TEXTURE_SWIZZLE_RGBA 0x8E46
#define GL_TEXTURE_SWIZZLE_RGBA_EXT 0x8E46
#define GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS 0x8E47
#define GL_ACTIVE_SUBROUTINE_MAX_LENGTH 0x8E48
#define GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH 0x8E49
#define GL_NUM_COMPATIBLE_SUBROUTINES 0x8E4A
#define GL_COMPATIBLE_SUBROUTINES 0x8E4B
#define GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION 0x8E4C
#define GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION_EXT 0x8E4C
#define GL_FIRST_VERTEX_CONVENTION 0x8E4D
#define GL_FIRST_VERTEX_CONVENTION_EXT 0x8E4D
#define GL_FIRST_VERTEX_CONVENTION_OES 0x8E4D
#define GL_LAST_VERTEX_CONVENTION 0x8E4E
#define GL_LAST_VERTEX_CONVENTION_EXT 0x8E4E
#define GL_LAST_VERTEX_CONVENTION_OES 0x8E4E
#define GL_PROVOKING_VERTEX 0x8E4F
#define GL_PROVOKING_VERTEX_EXT 0x8E4F
#define GL_SAMPLE_LOCATION_ARB 0x8E50
#define GL_SAMPLE_LOCATION_NV 0x8E50
#define GL_SAMPLE_POSITION 0x8E50
#define GL_SAMPLE_POSITION_NV 0x8E50
#define GL_SAMPLE_MASK 0x8E51
#define GL_SAMPLE_MASK_NV 0x8E51
#define GL_SAMPLE_MASK_VALUE 0x8E52
#define GL_SAMPLE_MASK_VALUE_NV 0x8E52
#define GL_TEXTURE_BINDING_RENDERBUFFER_NV 0x8E53
#define GL_TEXTURE_RENDERBUFFER_DATA_STORE_BINDING_NV 0x8E54
#define GL_TEXTURE_RENDERBUFFER_NV 0x8E55
#define GL_SAMPLER_RENDERBUFFER_NV 0x8E56
#define GL_INT_SAMPLER_RENDERBUFFER_NV 0x8E57
#define GL_UNSIGNED_INT_SAMPLER_RENDERBUFFER_NV 0x8E58
#define GL_MAX_SAMPLE_MASK_WORDS 0x8E59
#define GL_MAX_SAMPLE_MASK_WORDS_NV 0x8E59
#define GL_MAX_GEOMETRY_PROGRAM_INVOCATIONS_NV 0x8E5A
#define GL_MAX_GEOMETRY_SHADER_INVOCATIONS 0x8E5A
#define GL_MAX_GEOMETRY_SHADER_INVOCATIONS_EXT 0x8E5A
#define GL_MAX_GEOMETRY_SHADER_INVOCATIONS_OES 0x8E5A
#define GL_MIN_FRAGMENT_INTERPOLATION_OFFSET 0x8E5B
#define GL_MIN_FRAGMENT_INTERPOLATION_OFFSET_NV 0x8E5B
#define GL_MIN_FRAGMENT_INTERPOLATION_OFFSET_OES 0x8E5B
#define GL_MAX_FRAGMENT_INTERPOLATION_OFFSET 0x8E5C
#define GL_MAX_FRAGMENT_INTERPOLATION_OFFSET_NV 0x8E5C
#define GL_MAX_FRAGMENT_INTERPOLATION_OFFSET_OES 0x8E5C
#define GL_FRAGMENT_INTERPOLATION_OFFSET_BITS 0x8E5D
#define GL_FRAGMENT_INTERPOLATION_OFFSET_BITS_OES 0x8E5D
#define GL_FRAGMENT_PROGRAM_INTERPOLATION_OFFSET_BITS_NV 0x8E5D
#define GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET 0x8E5E
#define GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_ARB 0x8E5E
#define GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_NV 0x8E5E
#define GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET 0x8E5F
#define GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_ARB 0x8E5F
#define GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_NV 0x8E5F
#define GL_MAX_MESH_UNIFORM_BLOCKS_NV 0x8E60
#define GL_MAX_MESH_TEXTURE_IMAGE_UNITS_NV 0x8E61
#define GL_MAX_MESH_IMAGE_UNIFORMS_NV 0x8E62
#define GL_MAX_MESH_UNIFORM_COMPONENTS_NV 0x8E63
#define GL_MAX_MESH_ATOMIC_COUNTER_BUFFERS_NV 0x8E64
#define GL_MAX_MESH_ATOMIC_COUNTERS_NV 0x8E65
#define GL_MAX_MESH_SHADER_STORAGE_BLOCKS_NV 0x8E66
#define GL_MAX_COMBINED_MESH_UNIFORM_COMPONENTS_NV 0x8E67
#define GL_MAX_TASK_UNIFORM_BLOCKS_NV 0x8E68
#define GL_MAX_TASK_TEXTURE_IMAGE_UNITS_NV 0x8E69
#define GL_MAX_TASK_IMAGE_UNIFORMS_NV 0x8E6A
#define GL_MAX_TASK_UNIFORM_COMPONENTS_NV 0x8E6B
#define GL_MAX_TASK_ATOMIC_COUNTER_BUFFERS_NV 0x8E6C
#define GL_MAX_TASK_ATOMIC_COUNTERS_NV 0x8E6D
#define GL_MAX_TASK_SHADER_STORAGE_BLOCKS_NV 0x8E6E
#define GL_MAX_COMBINED_TASK_UNIFORM_COMPONENTS_NV 0x8E6F
#define GL_MAX_TRANSFORM_FEEDBACK_BUFFERS 0x8E70
#define GL_MAX_VERTEX_STREAMS 0x8E71
#define GL_PATCH_VERTICES 0x8E72
#define GL_PATCH_VERTICES_EXT 0x8E72
#define GL_PATCH_VERTICES_OES 0x8E72
#define GL_PATCH_DEFAULT_INNER_LEVEL 0x8E73
#define GL_PATCH_DEFAULT_INNER_LEVEL_EXT 0x8E73
#define GL_PATCH_DEFAULT_OUTER_LEVEL 0x8E74
#define GL_PATCH_DEFAULT_OUTER_LEVEL_EXT 0x8E74
#define GL_TESS_CONTROL_OUTPUT_VERTICES 0x8E75
#define GL_TESS_CONTROL_OUTPUT_VERTICES_EXT 0x8E75
#define GL_TESS_CONTROL_OUTPUT_VERTICES_OES 0x8E75
#define GL_TESS_GEN_MODE 0x8E76
#define GL_TESS_GEN_MODE_EXT 0x8E76
#define GL_TESS_GEN_MODE_OES 0x8E76
#define GL_TESS_GEN_SPACING 0x8E77
#define GL_TESS_GEN_SPACING_EXT 0x8E77
#define GL_TESS_GEN_SPACING_OES 0x8E77
#define GL_TESS_GEN_VERTEX_ORDER 0x8E78
#define GL_TESS_GEN_VERTEX_ORDER_EXT 0x8E78
#define GL_TESS_GEN_VERTEX_ORDER_OES 0x8E78
#define GL_TESS_GEN_POINT_MODE 0x8E79
#define GL_TESS_GEN_POINT_MODE_EXT 0x8E79
#define GL_TESS_GEN_POINT_MODE_OES 0x8E79
#define GL_ISOLINES 0x8E7A
#define GL_ISOLINES_EXT 0x8E7A
#define GL_ISOLINES_OES 0x8E7A
#define GL_FRACTIONAL_ODD 0x8E7B
#define GL_FRACTIONAL_ODD_EXT 0x8E7B
#define GL_FRACTIONAL_ODD_OES 0x8E7B
#define GL_FRACTIONAL_EVEN 0x8E7C
#define GL_FRACTIONAL_EVEN_EXT 0x8E7C
#define GL_FRACTIONAL_EVEN_OES 0x8E7C
#define GL_MAX_PATCH_VERTICES 0x8E7D
#define GL_MAX_PATCH_VERTICES_EXT 0x8E7D
#define GL_MAX_PATCH_VERTICES_OES 0x8E7D
#define GL_MAX_TESS_GEN_LEVEL 0x8E7E
#define GL_MAX_TESS_GEN_LEVEL_EXT 0x8E7E
#define GL_MAX_TESS_GEN_LEVEL_OES 0x8E7E
#define GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS 0x8E7F
#define GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS_EXT 0x8E7F
#define GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS_OES 0x8E7F
#define GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS 0x8E80
#define GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS_EXT 0x8E80
#define GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS_OES 0x8E80
#define GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS 0x8E81
#define GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS_EXT 0x8E81
#define GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS_OES 0x8E81
#define GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS 0x8E82
#define GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS_EXT 0x8E82
#define GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS_OES 0x8E82
#define GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS 0x8E83
#define GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS_EXT 0x8E83
#define GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS_OES 0x8E83
#define GL_MAX_TESS_PATCH_COMPONENTS 0x8E84
#define GL_MAX_TESS_PATCH_COMPONENTS_EXT 0x8E84
#define GL_MAX_TESS_PATCH_COMPONENTS_OES 0x8E84
#define GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS 0x8E85
#define GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS_EXT 0x8E85
#define GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS_OES 0x8E85
#define GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS 0x8E86
#define GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS_EXT 0x8E86
#define GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS_OES 0x8E86
#define GL_TESS_EVALUATION_SHADER 0x8E87
#define GL_TESS_EVALUATION_SHADER_EXT 0x8E87
#define GL_TESS_EVALUATION_SHADER_OES 0x8E87
#define GL_TESS_CONTROL_SHADER 0x8E88
#define GL_TESS_CONTROL_SHADER_EXT 0x8E88
#define GL_TESS_CONTROL_SHADER_OES 0x8E88
#define GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS 0x8E89
#define GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS_EXT 0x8E89
#define GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS_OES 0x8E89
#define GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS 0x8E8A
#define GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS_EXT 0x8E8A
#define GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS_OES 0x8E8A
#define GL_COMPRESSED_RGBA_BPTC_UNORM 0x8E8C
#define GL_COMPRESSED_RGBA_BPTC_UNORM_ARB 0x8E8C
#define GL_COMPRESSED_RGBA_BPTC_UNORM_EXT 0x8E8C
#define GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM 0x8E8D
#define GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM_ARB 0x8E8D
#define GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT 0x8E8D
#define GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT 0x8E8E
#define GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT_ARB 0x8E8E
#define GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT 0x8E8E
#define GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT 0x8E8F
#define GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_ARB 0x8E8F
#define GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT 0x8E8F
#define GL_COVERAGE_COMPONENT_NV 0x8ED0
#define GL_COVERAGE_COMPONENT4_NV 0x8ED1
#define GL_COVERAGE_ATTACHMENT_NV 0x8ED2
#define GL_COVERAGE_BUFFERS_NV 0x8ED3
#define GL_COVERAGE_SAMPLES_NV 0x8ED4
#define GL_COVERAGE_ALL_FRAGMENTS_NV 0x8ED5
#define GL_COVERAGE_EDGE_FRAGMENTS_NV 0x8ED6
#define GL_COVERAGE_AUTOMATIC_NV 0x8ED7
#define GL_INCLUSIVE_EXT 0x8F10
#define GL_EXCLUSIVE_EXT 0x8F11
#define GL_WINDOW_RECTANGLE_EXT 0x8F12
#define GL_WINDOW_RECTANGLE_MODE_EXT 0x8F13
#define GL_MAX_WINDOW_RECTANGLES_EXT 0x8F14
#define GL_NUM_WINDOW_RECTANGLES_EXT 0x8F15
#define GL_BUFFER_GPU_ADDRESS_NV 0x8F1D
#define GL_VERTEX_ATTRIB_ARRAY_UNIFIED_NV 0x8F1E
#define GL_ELEMENT_ARRAY_UNIFIED_NV 0x8F1F
#define GL_VERTEX_ATTRIB_ARRAY_ADDRESS_NV 0x8F20
#define GL_VERTEX_ARRAY_ADDRESS_NV 0x8F21
#define GL_NORMAL_ARRAY_ADDRESS_NV 0x8F22
#define GL_COLOR_ARRAY_ADDRESS_NV 0x8F23
#define GL_INDEX_ARRAY_ADDRESS_NV 0x8F24
#define GL_TEXTURE_COORD_ARRAY_ADDRESS_NV 0x8F25
#define GL_EDGE_FLAG_ARRAY_ADDRESS_NV 0x8F26
#define GL_SECONDARY_COLOR_ARRAY_ADDRESS_NV 0x8F27
#define GL_FOG_COORD_ARRAY_ADDRESS_NV 0x8F28
#define GL_ELEMENT_ARRAY_ADDRESS_NV 0x8F29
#define GL_VERTEX_ATTRIB_ARRAY_LENGTH_NV 0x8F2A
#define GL_VERTEX_ARRAY_LENGTH_NV 0x8F2B
#define GL_NORMAL_ARRAY_LENGTH_NV 0x8F2C
#define GL_COLOR_ARRAY_LENGTH_NV 0x8F2D
#define GL_INDEX_ARRAY_LENGTH_NV 0x8F2E
#define GL_TEXTURE_COORD_ARRAY_LENGTH_NV 0x8F2F
#define GL_EDGE_FLAG_ARRAY_LENGTH_NV 0x8F30
#define GL_SECONDARY_COLOR_ARRAY_LENGTH_NV 0x8F31
#define GL_FOG_COORD_ARRAY_LENGTH_NV 0x8F32
#define GL_ELEMENT_ARRAY_LENGTH_NV 0x8F33
#define GL_GPU_ADDRESS_NV 0x8F34
#define GL_MAX_SHADER_BUFFER_ADDRESS_NV 0x8F35
#define GL_COPY_READ_BUFFER 0x8F36
#define GL_COPY_READ_BUFFER_BINDING 0x8F36
#define GL_COPY_READ_BUFFER_NV 0x8F36
#define GL_COPY_WRITE_BUFFER 0x8F37
#define GL_COPY_WRITE_BUFFER_BINDING 0x8F37
#define GL_COPY_WRITE_BUFFER_NV 0x8F37
#define GL_MAX_IMAGE_UNITS 0x8F38
#define GL_MAX_IMAGE_UNITS_EXT 0x8F38
#define GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS 0x8F39
#define GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS_EXT 0x8F39
#define GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES 0x8F39
#define GL_IMAGE_BINDING_NAME 0x8F3A
#define GL_IMAGE_BINDING_NAME_EXT 0x8F3A
#define GL_IMAGE_BINDING_LEVEL 0x8F3B
#define GL_IMAGE_BINDING_LEVEL_EXT 0x8F3B
#define GL_IMAGE_BINDING_LAYERED 0x8F3C
#define GL_IMAGE_BINDING_LAYERED_EXT 0x8F3C
#define GL_IMAGE_BINDING_LAYER 0x8F3D
#define GL_IMAGE_BINDING_LAYER_EXT 0x8F3D
#define GL_IMAGE_BINDING_ACCESS 0x8F3E
#define GL_IMAGE_BINDING_ACCESS_EXT 0x8F3E
#define GL_DRAW_INDIRECT_BUFFER 0x8F3F
#define GL_DRAW_INDIRECT_UNIFIED_NV 0x8F40
#define GL_DRAW_INDIRECT_ADDRESS_NV 0x8F41
#define GL_DRAW_INDIRECT_LENGTH_NV 0x8F42
#define GL_DRAW_INDIRECT_BUFFER_BINDING 0x8F43
#define GL_MAX_PROGRAM_SUBROUTINE_PARAMETERS_NV 0x8F44
#define GL_MAX_PROGRAM_SUBROUTINE_NUM_NV 0x8F45
#define GL_DOUBLE_MAT2 0x8F46
#define GL_DOUBLE_MAT2_EXT 0x8F46
#define GL_DOUBLE_MAT3 0x8F47
#define GL_DOUBLE_MAT3_EXT 0x8F47
#define GL_DOUBLE_MAT4 0x8F48
#define GL_DOUBLE_MAT4_EXT 0x8F48
#define GL_DOUBLE_MAT2x3 0x8F49
#define GL_DOUBLE_MAT2x3_EXT 0x8F49
#define GL_DOUBLE_MAT2x4 0x8F4A
#define GL_DOUBLE_MAT2x4_EXT 0x8F4A
#define GL_DOUBLE_MAT3x2 0x8F4B
#define GL_DOUBLE_MAT3x2_EXT 0x8F4B
#define GL_DOUBLE_MAT3x4 0x8F4C
#define GL_DOUBLE_MAT3x4_EXT 0x8F4C
#define GL_DOUBLE_MAT4x2 0x8F4D
#define GL_DOUBLE_MAT4x2_EXT 0x8F4D
#define GL_DOUBLE_MAT4x3 0x8F4E
#define GL_DOUBLE_MAT4x3_EXT 0x8F4E
#define GL_VERTEX_BINDING_BUFFER 0x8F4F
#define GL_MALI_SHADER_BINARY_ARM 0x8F60
#define GL_MALI_PROGRAM_BINARY_ARM 0x8F61
#define GL_MAX_SHADER_PIXEL_LOCAL_STORAGE_FAST_SIZE_EXT 0x8F63
#define GL_SHADER_PIXEL_LOCAL_STORAGE_EXT 0x8F64
#define GL_FETCH_PER_SAMPLE_ARM 0x8F65
#define GL_FRAGMENT_SHADER_FRAMEBUFFER_FETCH_MRT_ARM 0x8F66
#define GL_MAX_SHADER_PIXEL_LOCAL_STORAGE_SIZE_EXT 0x8F67
#define GL_TEXTURE_ASTC_DECODE_PRECISION_EXT 0x8F69
#define GL_RED_SNORM 0x8F90
#define GL_RG_SNORM 0x8F91
#define GL_RGB_SNORM 0x8F92
#define GL_RGBA_SNORM 0x8F93
#define GL_R8_SNORM 0x8F94
#define GL_RG8_SNORM 0x8F95
#define GL_RGB8_SNORM 0x8F96
#define GL_RGBA8_SNORM 0x8F97
#define GL_R16_SNORM 0x8F98
#define GL_R16_SNORM_EXT 0x8F98
#define GL_RG16_SNORM 0x8F99
#define GL_RG16_SNORM_EXT 0x8F99
#define GL_RGB16_SNORM 0x8F9A
#define GL_RGB16_SNORM_EXT 0x8F9A
#define GL_RGBA16_SNORM 0x8F9B
#define GL_RGBA16_SNORM_EXT 0x8F9B
#define GL_SIGNED_NORMALIZED 0x8F9C
#define GL_PRIMITIVE_RESTART 0x8F9D
#define GL_PRIMITIVE_RESTART_INDEX 0x8F9E
#define GL_MAX_PROGRAM_TEXTURE_GATHER_COMPONENTS_ARB 0x8F9F
#define GL_PERFMON_GLOBAL_MODE_QCOM 0x8FA0
#define GL_MAX_SHADER_SUBSAMPLED_IMAGE_UNITS_QCOM 0x8FA1
#define GL_BINNING_CONTROL_HINT_QCOM 0x8FB0
#define GL_CPU_OPTIMIZED_QCOM 0x8FB1
#define GL_GPU_OPTIMIZED_QCOM 0x8FB2
#define GL_RENDER_DIRECT_TO_FRAMEBUFFER_QCOM 0x8FB3
#define GL_GPU_DISJOINT_EXT 0x8FBB
#define GL_SR8_EXT 0x8FBD
#define GL_SRG8_EXT 0x8FBE
#define GL_TEXTURE_FORMAT_SRGB_OVERRIDE_EXT 0x8FBF
#define GL_SHADER_BINARY_VIV 0x8FC4
#define GL_INT8_NV 0x8FE0
#define GL_INT8_VEC2_NV 0x8FE1
#define GL_INT8_VEC3_NV 0x8FE2
#define GL_INT8_VEC4_NV 0x8FE3
#define GL_INT16_NV 0x8FE4
#define GL_INT16_VEC2_NV 0x8FE5
#define GL_INT16_VEC3_NV 0x8FE6
#define GL_INT16_VEC4_NV 0x8FE7
#define GL_INT64_VEC2_ARB 0x8FE9
#define GL_INT64_VEC2_NV 0x8FE9
#define GL_INT64_VEC3_ARB 0x8FEA
#define GL_INT64_VEC3_NV 0x8FEA
#define GL_INT64_VEC4_ARB 0x8FEB
#define GL_INT64_VEC4_NV 0x8FEB
#define GL_UNSIGNED_INT8_NV 0x8FEC
#define GL_UNSIGNED_INT8_VEC2_NV 0x8FED
#define GL_UNSIGNED_INT8_VEC3_NV 0x8FEE
#define GL_UNSIGNED_INT8_VEC4_NV 0x8FEF
#define GL_UNSIGNED_INT16_NV 0x8FF0
#define GL_UNSIGNED_INT16_VEC2_NV 0x8FF1
#define GL_UNSIGNED_INT16_VEC3_NV 0x8FF2
#define GL_UNSIGNED_INT16_VEC4_NV 0x8FF3
#define GL_UNSIGNED_INT64_VEC2_ARB 0x8FF5
#define GL_UNSIGNED_INT64_VEC2_NV 0x8FF5
#define GL_UNSIGNED_INT64_VEC3_ARB 0x8FF6
#define GL_UNSIGNED_INT64_VEC3_NV 0x8FF6
#define GL_UNSIGNED_INT64_VEC4_ARB 0x8FF7
#define GL_UNSIGNED_INT64_VEC4_NV 0x8FF7
#define GL_FLOAT16_NV 0x8FF8
#define GL_FLOAT16_VEC2_NV 0x8FF9
#define GL_FLOAT16_VEC3_NV 0x8FFA
#define GL_FLOAT16_VEC4_NV 0x8FFB
#define GL_DOUBLE_VEC2 0x8FFC
#define GL_DOUBLE_VEC2_EXT 0x8FFC
#define GL_DOUBLE_VEC3 0x8FFD
#define GL_DOUBLE_VEC3_EXT 0x8FFD
#define GL_DOUBLE_VEC4 0x8FFE
#define GL_DOUBLE_VEC4_EXT 0x8FFE
#define GL_SAMPLER_BUFFER_AMD 0x9001
#define GL_INT_SAMPLER_BUFFER_AMD 0x9002
#define GL_UNSIGNED_INT_SAMPLER_BUFFER_AMD 0x9003
#define GL_TESSELLATION_MODE_AMD 0x9004
#define GL_TESSELLATION_FACTOR_AMD 0x9005
#define GL_DISCRETE_AMD 0x9006
#define GL_CONTINUOUS_AMD 0x9007
#define GL_TEXTURE_CUBE_MAP_ARRAY 0x9009
#define GL_TEXTURE_CUBE_MAP_ARRAY_ARB 0x9009
#define GL_TEXTURE_CUBE_MAP_ARRAY_EXT 0x9009
#define GL_TEXTURE_CUBE_MAP_ARRAY_OES 0x9009
#define GL_TEXTURE_BINDING_CUBE_MAP_ARRAY 0x900A
#define GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_ARB 0x900A
#define GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_EXT 0x900A
#define GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_OES 0x900A
#define GL_PROXY_TEXTURE_CUBE_MAP_ARRAY 0x900B
#define GL_PROXY_TEXTURE_CUBE_MAP_ARRAY_ARB 0x900B
#define GL_SAMPLER_CUBE_MAP_ARRAY 0x900C
#define GL_SAMPLER_CUBE_MAP_ARRAY_ARB 0x900C
#define GL_SAMPLER_CUBE_MAP_ARRAY_EXT 0x900C
#define GL_SAMPLER_CUBE_MAP_ARRAY_OES 0x900C
#define GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW 0x900D
#define GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_ARB 0x900D
#define GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_EXT 0x900D
#define GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_OES 0x900D
#define GL_INT_SAMPLER_CUBE_MAP_ARRAY 0x900E
#define GL_INT_SAMPLER_CUBE_MAP_ARRAY_ARB 0x900E
#define GL_INT_SAMPLER_CUBE_MAP_ARRAY_EXT 0x900E
#define GL_INT_SAMPLER_CUBE_MAP_ARRAY_OES 0x900E
#define GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY 0x900F
#define GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_ARB 0x900F
#define GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_EXT 0x900F
#define GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_OES 0x900F
#define GL_ALPHA_SNORM 0x9010
#define GL_LUMINANCE_SNORM 0x9011
#define GL_LUMINANCE_ALPHA_SNORM 0x9012
#define GL_INTENSITY_SNORM 0x9013
#define GL_ALPHA8_SNORM 0x9014
#define GL_LUMINANCE8_SNORM 0x9015
#define GL_LUMINANCE8_ALPHA8_SNORM 0x9016
#define GL_INTENSITY8_SNORM 0x9017
#define GL_ALPHA16_SNORM 0x9018
#define GL_LUMINANCE16_SNORM 0x9019
#define GL_LUMINANCE16_ALPHA16_SNORM 0x901A
#define GL_INTENSITY16_SNORM 0x901B
#define GL_FACTOR_MIN_AMD 0x901C
#define GL_FACTOR_MAX_AMD 0x901D
#define GL_DEPTH_CLAMP_NEAR_AMD 0x901E
#define GL_DEPTH_CLAMP_FAR_AMD 0x901F
#define GL_VIDEO_BUFFER_NV 0x9020
#define GL_VIDEO_BUFFER_BINDING_NV 0x9021
#define GL_FIELD_UPPER_NV 0x9022
#define GL_FIELD_LOWER_NV 0x9023
#define GL_NUM_VIDEO_CAPTURE_STREAMS_NV 0x9024
#define GL_NEXT_VIDEO_CAPTURE_BUFFER_STATUS_NV 0x9025
#define GL_VIDEO_CAPTURE_TO_422_SUPPORTED_NV 0x9026
#define GL_LAST_VIDEO_CAPTURE_STATUS_NV 0x9027
#define GL_VIDEO_BUFFER_PITCH_NV 0x9028
#define GL_VIDEO_COLOR_CONVERSION_MATRIX_NV 0x9029
#define GL_VIDEO_COLOR_CONVERSION_MAX_NV 0x902A
#define GL_VIDEO_COLOR_CONVERSION_MIN_NV 0x902B
#define GL_VIDEO_COLOR_CONVERSION_OFFSET_NV 0x902C
#define GL_VIDEO_BUFFER_INTERNAL_FORMAT_NV 0x902D
#define GL_PARTIAL_SUCCESS_NV 0x902E
#define GL_SUCCESS_NV 0x902F
#define GL_FAILURE_NV 0x9030
#define GL_YCBYCR8_422_NV 0x9031
#define GL_YCBAYCR8A_4224_NV 0x9032
#define GL_Z6Y10Z6CB10Z6Y10Z6CR10_422_NV 0x9033
#define GL_Z6Y10Z6CB10Z6A10Z6Y10Z6CR10Z6A10_4224_NV 0x9034
#define GL_Z4Y12Z4CB12Z4Y12Z4CR12_422_NV 0x9035
#define GL_Z4Y12Z4CB12Z4A12Z4Y12Z4CR12Z4A12_4224_NV 0x9036
#define GL_Z4Y12Z4CB12Z4CR12_444_NV 0x9037
#define GL_VIDEO_CAPTURE_FRAME_WIDTH_NV 0x9038
#define GL_VIDEO_CAPTURE_FRAME_HEIGHT_NV 0x9039
#define GL_VIDEO_CAPTURE_FIELD_UPPER_HEIGHT_NV 0x903A
#define GL_VIDEO_CAPTURE_FIELD_LOWER_HEIGHT_NV 0x903B
#define GL_VIDEO_CAPTURE_SURFACE_ORIGIN_NV 0x903C
#define GL_TEXTURE_COVERAGE_SAMPLES_NV 0x9045
#define GL_TEXTURE_COLOR_SAMPLES_NV 0x9046
#define GL_GPU_MEMORY_INFO_DEDICATED_VIDMEM_NVX 0x9047
#define GL_GPU_MEMORY_INFO_TOTAL_AVAILABLE_MEMORY_NVX 0x9048
#define GL_GPU_MEMORY_INFO_CURRENT_AVAILABLE_VIDMEM_NVX 0x9049
#define GL_GPU_MEMORY_INFO_EVICTION_COUNT_NVX 0x904A
#define GL_GPU_MEMORY_INFO_EVICTED_MEMORY_NVX 0x904B
#define GL_IMAGE_1D 0x904C
#define GL_IMAGE_1D_EXT 0x904C
#define GL_IMAGE_2D 0x904D
#define GL_IMAGE_2D_EXT 0x904D
#define GL_IMAGE_3D 0x904E
#define GL_IMAGE_3D_EXT 0x904E
#define GL_IMAGE_2D_RECT 0x904F
#define GL_IMAGE_2D_RECT_EXT 0x904F
#define GL_IMAGE_CUBE 0x9050
#define GL_IMAGE_CUBE_EXT 0x9050
#define GL_IMAGE_BUFFER 0x9051
#define GL_IMAGE_BUFFER_EXT 0x9051
#define GL_IMAGE_BUFFER_OES 0x9051
#define GL_IMAGE_1D_ARRAY 0x9052
#define GL_IMAGE_1D_ARRAY_EXT 0x9052
#define GL_IMAGE_2D_ARRAY 0x9053
#define GL_IMAGE_2D_ARRAY_EXT 0x9053
#define GL_IMAGE_CUBE_MAP_ARRAY 0x9054
#define GL_IMAGE_CUBE_MAP_ARRAY_EXT 0x9054
#define GL_IMAGE_CUBE_MAP_ARRAY_OES 0x9054
#define GL_IMAGE_2D_MULTISAMPLE 0x9055
#define GL_IMAGE_2D_MULTISAMPLE_EXT 0x9055
#define GL_IMAGE_2D_MULTISAMPLE_ARRAY 0x9056
#define GL_IMAGE_2D_MULTISAMPLE_ARRAY_EXT 0x9056
#define GL_INT_IMAGE_1D 0x9057
#define GL_INT_IMAGE_1D_EXT 0x9057
#define GL_INT_IMAGE_2D 0x9058
#define GL_INT_IMAGE_2D_EXT 0x9058
#define GL_INT_IMAGE_3D 0x9059
#define GL_INT_IMAGE_3D_EXT 0x9059
#define GL_INT_IMAGE_2D_RECT 0x905A
#define GL_INT_IMAGE_2D_RECT_EXT 0x905A
#define GL_INT_IMAGE_CUBE 0x905B
#define GL_INT_IMAGE_CUBE_EXT 0x905B
#define GL_INT_IMAGE_BUFFER 0x905C
#define GL_INT_IMAGE_BUFFER_EXT 0x905C
#define GL_INT_IMAGE_BUFFER_OES 0x905C
#define GL_INT_IMAGE_1D_ARRAY 0x905D
#define GL_INT_IMAGE_1D_ARRAY_EXT 0x905D
#define GL_INT_IMAGE_2D_ARRAY 0x905E
#define GL_INT_IMAGE_2D_ARRAY_EXT 0x905E
#define GL_INT_IMAGE_CUBE_MAP_ARRAY 0x905F
#define GL_INT_IMAGE_CUBE_MAP_ARRAY_EXT 0x905F
#define GL_INT_IMAGE_CUBE_MAP_ARRAY_OES 0x905F
#define GL_INT_IMAGE_2D_MULTISAMPLE 0x9060
#define GL_INT_IMAGE_2D_MULTISAMPLE_EXT 0x9060
#define GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY 0x9061
#define GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT 0x9061
#define GL_UNSIGNED_INT_IMAGE_1D 0x9062
#define GL_UNSIGNED_INT_IMAGE_1D_EXT 0x9062
#define GL_UNSIGNED_INT_IMAGE_2D 0x9063
#define GL_UNSIGNED_INT_IMAGE_2D_EXT 0x9063
#define GL_UNSIGNED_INT_IMAGE_3D 0x9064
#define GL_UNSIGNED_INT_IMAGE_3D_EXT 0x9064
#define GL_UNSIGNED_INT_IMAGE_2D_RECT 0x9065
#define GL_UNSIGNED_INT_IMAGE_2D_RECT_EXT 0x9065
#define GL_UNSIGNED_INT_IMAGE_CUBE 0x9066
#define GL_UNSIGNED_INT_IMAGE_CUBE_EXT 0x9066
#define GL_UNSIGNED_INT_IMAGE_BUFFER 0x9067
#define GL_UNSIGNED_INT_IMAGE_BUFFER_EXT 0x9067
#define GL_UNSIGNED_INT_IMAGE_BUFFER_OES 0x9067
#define GL_UNSIGNED_INT_IMAGE_1D_ARRAY 0x9068
#define GL_UNSIGNED_INT_IMAGE_1D_ARRAY_EXT 0x9068
#define GL_UNSIGNED_INT_IMAGE_2D_ARRAY 0x9069
#define GL_UNSIGNED_INT_IMAGE_2D_ARRAY_EXT 0x9069
#define GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY 0x906A
#define GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY_EXT 0x906A
#define GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY_OES 0x906A
#define GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE 0x906B
#define GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_EXT 0x906B
#define GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY 0x906C
#define GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT 0x906C
#define GL_MAX_IMAGE_SAMPLES 0x906D
#define GL_MAX_IMAGE_SAMPLES_EXT 0x906D
#define GL_IMAGE_BINDING_FORMAT 0x906E
#define GL_IMAGE_BINDING_FORMAT_EXT 0x906E
#define GL_RGB10_A2UI 0x906F
#define GL_PATH_FORMAT_SVG_NV 0x9070
#define GL_PATH_FORMAT_PS_NV 0x9071
#define GL_STANDARD_FONT_NAME_NV 0x9072
#define GL_SYSTEM_FONT_NAME_NV 0x9073
#define GL_FILE_NAME_NV 0x9074
#define GL_PATH_STROKE_WIDTH_NV 0x9075
#define GL_PATH_END_CAPS_NV 0x9076
#define GL_PATH_INITIAL_END_CAP_NV 0x9077
#define GL_PATH_TERMINAL_END_CAP_NV 0x9078
#define GL_PATH_JOIN_STYLE_NV 0x9079
#define GL_PATH_MITER_LIMIT_NV 0x907A
#define GL_PATH_DASH_CAPS_NV 0x907B
#define GL_PATH_INITIAL_DASH_CAP_NV 0x907C
#define GL_PATH_TERMINAL_DASH_CAP_NV 0x907D
#define GL_PATH_DASH_OFFSET_NV 0x907E
#define GL_PATH_CLIENT_LENGTH_NV 0x907F
#define GL_PATH_FILL_MODE_NV 0x9080
#define GL_PATH_FILL_MASK_NV 0x9081
#define GL_PATH_FILL_COVER_MODE_NV 0x9082
#define GL_PATH_STROKE_COVER_MODE_NV 0x9083
#define GL_PATH_STROKE_MASK_NV 0x9084
#define GL_COUNT_UP_NV 0x9088
#define GL_COUNT_DOWN_NV 0x9089
#define GL_PATH_OBJECT_BOUNDING_BOX_NV 0x908A
#define GL_CONVEX_HULL_NV 0x908B
#define GL_BOUNDING_BOX_NV 0x908D
#define GL_TRANSLATE_X_NV 0x908E
#define GL_TRANSLATE_Y_NV 0x908F
#define GL_TRANSLATE_2D_NV 0x9090
#define GL_TRANSLATE_3D_NV 0x9091
#define GL_AFFINE_2D_NV 0x9092
#define GL_AFFINE_3D_NV 0x9094
#define GL_TRANSPOSE_AFFINE_2D_NV 0x9096
#define GL_TRANSPOSE_AFFINE_3D_NV 0x9098
#define GL_UTF8_NV 0x909A
#define GL_UTF16_NV 0x909B
#define GL_BOUNDING_BOX_OF_BOUNDING_BOXES_NV 0x909C
#define GL_PATH_COMMAND_COUNT_NV 0x909D
#define GL_PATH_COORD_COUNT_NV 0x909E
#define GL_PATH_DASH_ARRAY_COUNT_NV 0x909F
#define GL_PATH_COMPUTED_LENGTH_NV 0x90A0
#define GL_PATH_FILL_BOUNDING_BOX_NV 0x90A1
#define GL_PATH_STROKE_BOUNDING_BOX_NV 0x90A2
#define GL_SQUARE_NV 0x90A3
#define GL_ROUND_NV 0x90A4
#define GL_TRIANGULAR_NV 0x90A5
#define GL_BEVEL_NV 0x90A6
#define GL_MITER_REVERT_NV 0x90A7
#define GL_MITER_TRUNCATE_NV 0x90A8
#define GL_SKIP_MISSING_GLYPH_NV 0x90A9
#define GL_USE_MISSING_GLYPH_NV 0x90AA
#define GL_PATH_ERROR_POSITION_NV 0x90AB
#define GL_PATH_FOG_GEN_MODE_NV 0x90AC
#define GL_ACCUM_ADJACENT_PAIRS_NV 0x90AD
#define GL_ADJACENT_PAIRS_NV 0x90AE
#define GL_FIRST_TO_REST_NV 0x90AF
#define GL_PATH_GEN_MODE_NV 0x90B0
#define GL_PATH_GEN_COEFF_NV 0x90B1
#define GL_PATH_GEN_COLOR_FORMAT_NV 0x90B2
#define GL_PATH_GEN_COMPONENTS_NV 0x90B3
#define GL_PATH_DASH_OFFSET_RESET_NV 0x90B4
#define GL_MOVE_TO_RESETS_NV 0x90B5
#define GL_MOVE_TO_CONTINUES_NV 0x90B6
#define GL_PATH_STENCIL_FUNC_NV 0x90B7
#define GL_PATH_STENCIL_REF_NV 0x90B8
#define GL_PATH_STENCIL_VALUE_MASK_NV 0x90B9
#define GL_SCALED_RESOLVE_FASTEST_EXT 0x90BA
#define GL_SCALED_RESOLVE_NICEST_EXT 0x90BB
#define GL_MIN_MAP_BUFFER_ALIGNMENT 0x90BC
#define GL_PATH_STENCIL_DEPTH_OFFSET_FACTOR_NV 0x90BD
#define GL_PATH_STENCIL_DEPTH_OFFSET_UNITS_NV 0x90BE
#define GL_PATH_COVER_DEPTH_FUNC_NV 0x90BF
#define GL_IMAGE_FORMAT_COMPATIBILITY_TYPE 0x90C7
#define GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE 0x90C8
#define GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS 0x90C9
#define GL_MAX_VERTEX_IMAGE_UNIFORMS 0x90CA
#define GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS 0x90CB
#define GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS_EXT 0x90CB
#define GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS_OES 0x90CB
#define GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS 0x90CC
#define GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS_EXT 0x90CC
#define GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS_OES 0x90CC
#define GL_MAX_GEOMETRY_IMAGE_UNIFORMS 0x90CD
#define GL_MAX_GEOMETRY_IMAGE_UNIFORMS_EXT 0x90CD
#define GL_MAX_GEOMETRY_IMAGE_UNIFORMS_OES 0x90CD
#define GL_MAX_FRAGMENT_IMAGE_UNIFORMS 0x90CE
#define GL_MAX_COMBINED_IMAGE_UNIFORMS 0x90CF
#define GL_MAX_DEEP_3D_TEXTURE_WIDTH_HEIGHT_NV 0x90D0
#define GL_MAX_DEEP_3D_TEXTURE_DEPTH_NV 0x90D1
#define GL_SHADER_STORAGE_BUFFER 0x90D2
#define GL_SHADER_STORAGE_BUFFER_BINDING 0x90D3
#define GL_SHADER_STORAGE_BUFFER_START 0x90D4
#define GL_SHADER_STORAGE_BUFFER_SIZE 0x90D5
#define GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS 0x90D6
#define GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS 0x90D7
#define GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS_EXT 0x90D7
#define GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS_OES 0x90D7
#define GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS 0x90D8
#define GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS_EXT 0x90D8
#define GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS_OES 0x90D8
#define GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS 0x90D9
#define GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS_EXT 0x90D9
#define GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS_OES 0x90D9
#define GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS 0x90DA
#define GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS 0x90DB
#define GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS 0x90DC
#define GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS 0x90DD
#define GL_MAX_SHADER_STORAGE_BLOCK_SIZE 0x90DE
#define GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT 0x90DF
#define GL_SYNC_X11_FENCE_EXT 0x90E1
#define GL_DEPTH_STENCIL_TEXTURE_MODE 0x90EA
#define GL_MAX_COMPUTE_FIXED_GROUP_INVOCATIONS_ARB 0x90EB
#define GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS 0x90EB
#define GL_UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER 0x90EC
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER 0x90ED
#define GL_DISPATCH_INDIRECT_BUFFER 0x90EE
#define GL_DISPATCH_INDIRECT_BUFFER_BINDING 0x90EF
#define GL_COLOR_ATTACHMENT_EXT 0x90F0
#define GL_MULTIVIEW_EXT 0x90F1
#define GL_MAX_MULTIVIEW_BUFFERS_EXT 0x90F2
#define GL_CONTEXT_ROBUST_ACCESS 0x90F3
#define GL_CONTEXT_ROBUST_ACCESS_EXT 0x90F3
#define GL_CONTEXT_ROBUST_ACCESS_KHR 0x90F3
#define GL_COMPUTE_PROGRAM_NV 0x90FB
#define GL_COMPUTE_PROGRAM_PARAMETER_BUFFER_NV 0x90FC
#define GL_TEXTURE_2D_MULTISAMPLE 0x9100
#define GL_PROXY_TEXTURE_2D_MULTISAMPLE 0x9101
#define GL_TEXTURE_2D_MULTISAMPLE_ARRAY 0x9102
#define GL_TEXTURE_2D_MULTISAMPLE_ARRAY_OES 0x9102
#define GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY 0x9103
#define GL_TEXTURE_BINDING_2D_MULTISAMPLE 0x9104
#define GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY 0x9105
#define GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY_OES 0x9105
#define GL_TEXTURE_SAMPLES 0x9106
#define GL_TEXTURE_FIXED_SAMPLE_LOCATIONS 0x9107
#define GL_SAMPLER_2D_MULTISAMPLE 0x9108
#define GL_INT_SAMPLER_2D_MULTISAMPLE 0x9109
#define GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE 0x910A
#define GL_SAMPLER_2D_MULTISAMPLE_ARRAY 0x910B
#define GL_SAMPLER_2D_MULTISAMPLE_ARRAY_OES 0x910B
#define GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY 0x910C
#define GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY_OES 0x910C
#define GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY 0x910D
#define GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY_OES 0x910D
#define GL_MAX_COLOR_TEXTURE_SAMPLES 0x910E
#define GL_MAX_DEPTH_TEXTURE_SAMPLES 0x910F
#define GL_MAX_INTEGER_SAMPLES 0x9110
#define GL_MAX_SERVER_WAIT_TIMEOUT 0x9111
#define GL_MAX_SERVER_WAIT_TIMEOUT_APPLE 0x9111
#define GL_OBJECT_TYPE 0x9112
#define GL_OBJECT_TYPE_APPLE 0x9112
#define GL_SYNC_CONDITION 0x9113
#define GL_SYNC_CONDITION_APPLE 0x9113
#define GL_SYNC_STATUS 0x9114
#define GL_SYNC_STATUS_APPLE 0x9114
#define GL_SYNC_FLAGS 0x9115
#define GL_SYNC_FLAGS_APPLE 0x9115
#define GL_SYNC_FENCE 0x9116
#define GL_SYNC_FENCE_APPLE 0x9116
#define GL_SYNC_GPU_COMMANDS_COMPLETE 0x9117
#define GL_SYNC_GPU_COMMANDS_COMPLETE_APPLE 0x9117
#define GL_UNSIGNALED 0x9118
#define GL_UNSIGNALED_APPLE 0x9118
#define GL_SIGNALED 0x9119
#define GL_SIGNALED_APPLE 0x9119
#define GL_ALREADY_SIGNALED 0x911A
#define GL_ALREADY_SIGNALED_APPLE 0x911A
#define GL_TIMEOUT_EXPIRED 0x911B
#define GL_TIMEOUT_EXPIRED_APPLE 0x911B
#define GL_CONDITION_SATISFIED 0x911C
#define GL_CONDITION_SATISFIED_APPLE 0x911C
#define GL_WAIT_FAILED 0x911D
#define GL_WAIT_FAILED_APPLE 0x911D
#define GL_BUFFER_ACCESS_FLAGS 0x911F
#define GL_BUFFER_MAP_LENGTH 0x9120
#define GL_BUFFER_MAP_OFFSET 0x9121
#define GL_MAX_VERTEX_OUTPUT_COMPONENTS 0x9122
#define GL_MAX_GEOMETRY_INPUT_COMPONENTS 0x9123
#define GL_MAX_GEOMETRY_INPUT_COMPONENTS_EXT 0x9123
#define GL_MAX_GEOMETRY_INPUT_COMPONENTS_OES 0x9123
#define GL_MAX_GEOMETRY_OUTPUT_COMPONENTS 0x9124
#define GL_MAX_GEOMETRY_OUTPUT_COMPONENTS_EXT 0x9124
#define GL_MAX_GEOMETRY_OUTPUT_COMPONENTS_OES 0x9124
#define GL_MAX_FRAGMENT_INPUT_COMPONENTS 0x9125
#define GL_CONTEXT_PROFILE_MASK 0x9126
#define GL_UNPACK_COMPRESSED_BLOCK_WIDTH 0x9127
#define GL_UNPACK_COMPRESSED_BLOCK_HEIGHT 0x9128
#define GL_UNPACK_COMPRESSED_BLOCK_DEPTH 0x9129
#define GL_UNPACK_COMPRESSED_BLOCK_SIZE 0x912A
#define GL_PACK_COMPRESSED_BLOCK_WIDTH 0x912B
#define GL_PACK_COMPRESSED_BLOCK_HEIGHT 0x912C
#define GL_PACK_COMPRESSED_BLOCK_DEPTH 0x912D
#define GL_PACK_COMPRESSED_BLOCK_SIZE 0x912E
#define GL_TEXTURE_IMMUTABLE_FORMAT 0x912F
#define GL_TEXTURE_IMMUTABLE_FORMAT_EXT 0x912F
#define GL_SGX_PROGRAM_BINARY_IMG 0x9130
#define GL_RENDERBUFFER_SAMPLES_IMG 0x9133
#define GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_IMG 0x9134
#define GL_MAX_SAMPLES_IMG 0x9135
#define GL_TEXTURE_SAMPLES_IMG 0x9136
#define GL_COMPRESSED_RGBA_PVRTC_2BPPV2_IMG 0x9137
#define GL_COMPRESSED_RGBA_PVRTC_4BPPV2_IMG 0x9138
#define GL_CUBIC_IMG 0x9139
#define GL_CUBIC_MIPMAP_NEAREST_IMG 0x913A
#define GL_CUBIC_MIPMAP_LINEAR_IMG 0x913B
#define GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_AND_DOWNSAMPLE_IMG 0x913C
#define GL_NUM_DOWNSAMPLE_SCALES_IMG 0x913D
#define GL_DOWNSAMPLE_SCALES_IMG 0x913E
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_SCALE_IMG 0x913F
#define GL_MAX_DEBUG_MESSAGE_LENGTH 0x9143
#define GL_MAX_DEBUG_MESSAGE_LENGTH_AMD 0x9143
#define GL_MAX_DEBUG_MESSAGE_LENGTH_ARB 0x9143
#define GL_MAX_DEBUG_MESSAGE_LENGTH_KHR 0x9143
#define GL_MAX_DEBUG_LOGGED_MESSAGES 0x9144
#define GL_MAX_DEBUG_LOGGED_MESSAGES_AMD 0x9144
#define GL_MAX_DEBUG_LOGGED_MESSAGES_ARB 0x9144
#define GL_MAX_DEBUG_LOGGED_MESSAGES_KHR 0x9144
#define GL_DEBUG_LOGGED_MESSAGES 0x9145
#define GL_DEBUG_LOGGED_MESSAGES_AMD 0x9145
#define GL_DEBUG_LOGGED_MESSAGES_ARB 0x9145
#define GL_DEBUG_LOGGED_MESSAGES_KHR 0x9145
#define GL_DEBUG_SEVERITY_HIGH 0x9146
#define GL_DEBUG_SEVERITY_HIGH_AMD 0x9146
#define GL_DEBUG_SEVERITY_HIGH_ARB 0x9146
#define GL_DEBUG_SEVERITY_HIGH_KHR 0x9146
#define GL_DEBUG_SEVERITY_MEDIUM 0x9147
#define GL_DEBUG_SEVERITY_MEDIUM_AMD 0x9147
#define GL_DEBUG_SEVERITY_MEDIUM_ARB 0x9147
#define GL_DEBUG_SEVERITY_MEDIUM_KHR 0x9147
#define GL_DEBUG_SEVERITY_LOW 0x9148
#define GL_DEBUG_SEVERITY_LOW_AMD 0x9148
#define GL_DEBUG_SEVERITY_LOW_ARB 0x9148
#define GL_DEBUG_SEVERITY_LOW_KHR 0x9148
#define GL_DEBUG_CATEGORY_API_ERROR_AMD 0x9149
#define GL_DEBUG_CATEGORY_WINDOW_SYSTEM_AMD 0x914A
#define GL_DEBUG_CATEGORY_DEPRECATION_AMD 0x914B
#define GL_DEBUG_CATEGORY_UNDEFINED_BEHAVIOR_AMD 0x914C
#define GL_DEBUG_CATEGORY_PERFORMANCE_AMD 0x914D
#define GL_DEBUG_CATEGORY_SHADER_COMPILER_AMD 0x914E
#define GL_DEBUG_CATEGORY_APPLICATION_AMD 0x914F
#define GL_DEBUG_CATEGORY_OTHER_AMD 0x9150
#define GL_BUFFER_OBJECT_EXT 0x9151
#define GL_DATA_BUFFER_AMD 0x9151
#define GL_PERFORMANCE_MONITOR_AMD 0x9152
#define GL_QUERY_OBJECT_AMD 0x9153
#define GL_QUERY_OBJECT_EXT 0x9153
#define GL_VERTEX_ARRAY_OBJECT_AMD 0x9154
#define GL_VERTEX_ARRAY_OBJECT_EXT 0x9154
#define GL_SAMPLER_OBJECT_AMD 0x9155
#define GL_EXTERNAL_VIRTUAL_MEMORY_BUFFER_AMD 0x9160
#define GL_QUERY_BUFFER 0x9192
#define GL_QUERY_BUFFER_AMD 0x9192
#define GL_QUERY_BUFFER_BINDING 0x9193
#define GL_QUERY_BUFFER_BINDING_AMD 0x9193
#define GL_QUERY_RESULT_NO_WAIT 0x9194
#define GL_QUERY_RESULT_NO_WAIT_AMD 0x9194
#define GL_VIRTUAL_PAGE_SIZE_X_AMD 0x9195
#define GL_VIRTUAL_PAGE_SIZE_X_ARB 0x9195
#define GL_VIRTUAL_PAGE_SIZE_X_EXT 0x9195
#define GL_VIRTUAL_PAGE_SIZE_Y_AMD 0x9196
#define GL_VIRTUAL_PAGE_SIZE_Y_ARB 0x9196
#define GL_VIRTUAL_PAGE_SIZE_Y_EXT 0x9196
#define GL_VIRTUAL_PAGE_SIZE_Z_AMD 0x9197
#define GL_VIRTUAL_PAGE_SIZE_Z_ARB 0x9197
#define GL_VIRTUAL_PAGE_SIZE_Z_EXT 0x9197
#define GL_MAX_SPARSE_TEXTURE_SIZE_AMD 0x9198
#define GL_MAX_SPARSE_TEXTURE_SIZE_ARB 0x9198
#define GL_MAX_SPARSE_TEXTURE_SIZE_EXT 0x9198
#define GL_MAX_SPARSE_3D_TEXTURE_SIZE_AMD 0x9199
#define GL_MAX_SPARSE_3D_TEXTURE_SIZE_ARB 0x9199
#define GL_MAX_SPARSE_3D_TEXTURE_SIZE_EXT 0x9199
#define GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS 0x919A
#define GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS_ARB 0x919A
#define GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS_EXT 0x919A
#define GL_MIN_SPARSE_LEVEL_AMD 0x919B
#define GL_MIN_LOD_WARNING_AMD 0x919C
#define GL_TEXTURE_BUFFER_OFFSET 0x919D
#define GL_TEXTURE_BUFFER_OFFSET_EXT 0x919D
#define GL_TEXTURE_BUFFER_OFFSET_OES 0x919D
#define GL_TEXTURE_BUFFER_SIZE 0x919E
#define GL_TEXTURE_BUFFER_SIZE_EXT 0x919E
#define GL_TEXTURE_BUFFER_SIZE_OES 0x919E
#define GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT 0x919F
#define GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT_EXT 0x919F
#define GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT_OES 0x919F
#define GL_STREAM_RASTERIZATION_AMD 0x91A0
#define GL_VERTEX_ELEMENT_SWIZZLE_AMD 0x91A4
#define GL_VERTEX_ID_SWIZZLE_AMD 0x91A5
#define GL_TEXTURE_SPARSE_ARB 0x91A6
#define GL_TEXTURE_SPARSE_EXT 0x91A6
#define GL_VIRTUAL_PAGE_SIZE_INDEX_ARB 0x91A7
#define GL_VIRTUAL_PAGE_SIZE_INDEX_EXT 0x91A7
#define GL_NUM_VIRTUAL_PAGE_SIZES_ARB 0x91A8
#define GL_NUM_VIRTUAL_PAGE_SIZES_EXT 0x91A8
#define GL_SPARSE_TEXTURE_FULL_ARRAY_CUBE_MIPMAPS_ARB 0x91A9
#define GL_SPARSE_TEXTURE_FULL_ARRAY_CUBE_MIPMAPS_EXT 0x91A9
#define GL_NUM_SPARSE_LEVELS_ARB 0x91AA
#define GL_NUM_SPARSE_LEVELS_EXT 0x91AA
#define GL_PIXELS_PER_SAMPLE_PATTERN_X_AMD 0x91AE
#define GL_PIXELS_PER_SAMPLE_PATTERN_Y_AMD 0x91AF
#define GL_MAX_SHADER_COMPILER_THREADS_ARB 0x91B0
#define GL_MAX_SHADER_COMPILER_THREADS_KHR 0x91B0
#define GL_COMPLETION_STATUS_ARB 0x91B1
#define GL_COMPLETION_STATUS_KHR 0x91B1
#define GL_RENDERBUFFER_STORAGE_SAMPLES_AMD 0x91B2
#define GL_MAX_COLOR_FRAMEBUFFER_SAMPLES_AMD 0x91B3
#define GL_MAX_COLOR_FRAMEBUFFER_STORAGE_SAMPLES_AMD 0x91B4
#define GL_MAX_DEPTH_STENCIL_FRAMEBUFFER_SAMPLES_AMD 0x91B5
#define GL_NUM_SUPPORTED_MULTISAMPLE_MODES_AMD 0x91B6
#define GL_SUPPORTED_MULTISAMPLE_MODES_AMD 0x91B7
#define GL_COMPUTE_SHADER 0x91B9
#define GL_MAX_COMPUTE_UNIFORM_BLOCKS 0x91BB
#define GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS 0x91BC
#define GL_MAX_COMPUTE_IMAGE_UNIFORMS 0x91BD
#define GL_MAX_COMPUTE_WORK_GROUP_COUNT 0x91BE
#define GL_MAX_COMPUTE_FIXED_GROUP_SIZE_ARB 0x91BF
#define GL_MAX_COMPUTE_WORK_GROUP_SIZE 0x91BF
#define GL_FLOAT16_MAT2_AMD 0x91C5
#define GL_FLOAT16_MAT3_AMD 0x91C6
#define GL_FLOAT16_MAT4_AMD 0x91C7
#define GL_FLOAT16_MAT2x3_AMD 0x91C8
#define GL_FLOAT16_MAT2x4_AMD 0x91C9
#define GL_FLOAT16_MAT3x2_AMD 0x91CA
#define GL_FLOAT16_MAT3x4_AMD 0x91CB
#define GL_FLOAT16_MAT4x2_AMD 0x91CC
#define GL_FLOAT16_MAT4x3_AMD 0x91CD
#define GL_UNPACK_FLIP_Y_WEBGL 0x9240
#define GL_UNPACK_PREMULTIPLY_ALPHA_WEBGL 0x9241
#define GL_CONTEXT_LOST_WEBGL 0x9242
#define GL_UNPACK_COLORSPACE_CONVERSION_WEBGL 0x9243
#define GL_BROWSER_DEFAULT_WEBGL 0x9244
#define GL_SHADER_BINARY_DMP 0x9250
#define GL_SMAPHS30_PROGRAM_BINARY_DMP 0x9251
#define GL_SMAPHS_PROGRAM_BINARY_DMP 0x9252
#define GL_DMP_PROGRAM_BINARY_DMP 0x9253
#define GL_GCCSO_SHADER_BINARY_FJ 0x9260
#define GL_COMPRESSED_R11_EAC 0x9270
#define GL_COMPRESSED_R11_EAC_OES 0x9270
#define GL_COMPRESSED_SIGNED_R11_EAC 0x9271
#define GL_COMPRESSED_SIGNED_R11_EAC_OES 0x9271
#define GL_COMPRESSED_RG11_EAC 0x9272
#define GL_COMPRESSED_RG11_EAC_OES 0x9272
#define GL_COMPRESSED_SIGNED_RG11_EAC 0x9273
#define GL_COMPRESSED_SIGNED_RG11_EAC_OES 0x9273
#define GL_COMPRESSED_RGB8_ETC2 0x9274
#define GL_COMPRESSED_RGB8_ETC2_OES 0x9274
#define GL_COMPRESSED_SRGB8_ETC2 0x9275
#define GL_COMPRESSED_SRGB8_ETC2_OES 0x9275
#define GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 0x9276
#define GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2_OES 0x9276
#define GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 0x9277
#define GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2_OES 0x9277
#define GL_COMPRESSED_RGBA8_ETC2_EAC 0x9278
#define GL_COMPRESSED_RGBA8_ETC2_EAC_OES 0x9278
#define GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC 0x9279
#define GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC_OES 0x9279
#define GL_BLEND_PREMULTIPLIED_SRC_NV 0x9280
#define GL_BLEND_OVERLAP_NV 0x9281
#define GL_UNCORRELATED_NV 0x9282
#define GL_DISJOINT_NV 0x9283
#define GL_CONJOINT_NV 0x9284
#define GL_BLEND_ADVANCED_COHERENT_KHR 0x9285
#define GL_BLEND_ADVANCED_COHERENT_NV 0x9285
#define GL_SRC_NV 0x9286
#define GL_DST_NV 0x9287
#define GL_SRC_OVER_NV 0x9288
#define GL_DST_OVER_NV 0x9289
#define GL_SRC_IN_NV 0x928A
#define GL_DST_IN_NV 0x928B
#define GL_SRC_OUT_NV 0x928C
#define GL_DST_OUT_NV 0x928D
#define GL_SRC_ATOP_NV 0x928E
#define GL_DST_ATOP_NV 0x928F
#define GL_PLUS_NV 0x9291
#define GL_PLUS_DARKER_NV 0x9292
#define GL_MULTIPLY 0x9294
#define GL_MULTIPLY_KHR 0x9294
#define GL_MULTIPLY_NV 0x9294
#define GL_SCREEN 0x9295
#define GL_SCREEN_KHR 0x9295
#define GL_SCREEN_NV 0x9295
#define GL_OVERLAY 0x9296
#define GL_OVERLAY_KHR 0x9296
#define GL_OVERLAY_NV 0x9296
#define GL_DARKEN 0x9297
#define GL_DARKEN_KHR 0x9297
#define GL_DARKEN_NV 0x9297
#define GL_LIGHTEN 0x9298
#define GL_LIGHTEN_KHR 0x9298
#define GL_LIGHTEN_NV 0x9298
#define GL_COLORDODGE 0x9299
#define GL_COLORDODGE_KHR 0x9299
#define GL_COLORDODGE_NV 0x9299
#define GL_COLORBURN 0x929A
#define GL_COLORBURN_KHR 0x929A
#define GL_COLORBURN_NV 0x929A
#define GL_HARDLIGHT 0x929B
#define GL_HARDLIGHT_KHR 0x929B
#define GL_HARDLIGHT_NV 0x929B
#define GL_SOFTLIGHT 0x929C
#define GL_SOFTLIGHT_KHR 0x929C
#define GL_SOFTLIGHT_NV 0x929C
#define GL_DIFFERENCE 0x929E
#define GL_DIFFERENCE_KHR 0x929E
#define GL_DIFFERENCE_NV 0x929E
#define GL_MINUS_NV 0x929F
#define GL_EXCLUSION 0x92A0
#define GL_EXCLUSION_KHR 0x92A0
#define GL_EXCLUSION_NV 0x92A0
#define GL_CONTRAST_NV 0x92A1
#define GL_INVERT_RGB_NV 0x92A3
#define GL_LINEARDODGE_NV 0x92A4
#define GL_LINEARBURN_NV 0x92A5
#define GL_VIVIDLIGHT_NV 0x92A6
#define GL_LINEARLIGHT_NV 0x92A7
#define GL_PINLIGHT_NV 0x92A8
#define GL_HARDMIX_NV 0x92A9
#define GL_HSL_HUE 0x92AD
#define GL_HSL_HUE_KHR 0x92AD
#define GL_HSL_HUE_NV 0x92AD
#define GL_HSL_SATURATION 0x92AE
#define GL_HSL_SATURATION_KHR 0x92AE
#define GL_HSL_SATURATION_NV 0x92AE
#define GL_HSL_COLOR 0x92AF
#define GL_HSL_COLOR_KHR 0x92AF
#define GL_HSL_COLOR_NV 0x92AF
#define GL_HSL_LUMINOSITY 0x92B0
#define GL_HSL_LUMINOSITY_KHR 0x92B0
#define GL_HSL_LUMINOSITY_NV 0x92B0
#define GL_PLUS_CLAMPED_NV 0x92B1
#define GL_PLUS_CLAMPED_ALPHA_NV 0x92B2
#define GL_MINUS_CLAMPED_NV 0x92B3
#define GL_INVERT_OVG_NV 0x92B4
#define GL_MAX_LGPU_GPUS_NVX 0x92BA
#define GL_MULTICAST_GPUS_NV 0x92BA
#define GL_PURGED_CONTEXT_RESET_NV 0x92BB
#define GL_PRIMITIVE_BOUNDING_BOX 0x92BE
#define GL_PRIMITIVE_BOUNDING_BOX_ARB 0x92BE
#define GL_PRIMITIVE_BOUNDING_BOX_EXT 0x92BE
#define GL_PRIMITIVE_BOUNDING_BOX_OES 0x92BE
#define GL_ALPHA_TO_COVERAGE_DITHER_MODE_NV 0x92BF
#define GL_ATOMIC_COUNTER_BUFFER 0x92C0
#define GL_ATOMIC_COUNTER_BUFFER_BINDING 0x92C1
#define GL_ATOMIC_COUNTER_BUFFER_START 0x92C2
#define GL_ATOMIC_COUNTER_BUFFER_SIZE 0x92C3
#define GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE 0x92C4
#define GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS 0x92C5
#define GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES 0x92C6
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER 0x92C7
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER 0x92C8
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER 0x92C9
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER 0x92CA
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER 0x92CB
#define GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS 0x92CC
#define GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS 0x92CD
#define GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS_EXT 0x92CD
#define GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS_OES 0x92CD
#define GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS 0x92CE
#define GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS_EXT 0x92CE
#define GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS_OES 0x92CE
#define GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS 0x92CF
#define GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS_EXT 0x92CF
#define GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS_OES 0x92CF
#define GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS 0x92D0
#define GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS 0x92D1
#define GL_MAX_VERTEX_ATOMIC_COUNTERS 0x92D2
#define GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS 0x92D3
#define GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS_EXT 0x92D3
#define GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS_OES 0x92D3
#define GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS 0x92D4
#define GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS_EXT 0x92D4
#define GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS_OES 0x92D4
#define GL_MAX_GEOMETRY_ATOMIC_COUNTERS 0x92D5
#define GL_MAX_GEOMETRY_ATOMIC_COUNTERS_EXT 0x92D5
#define GL_MAX_GEOMETRY_ATOMIC_COUNTERS_OES 0x92D5
#define GL_MAX_FRAGMENT_ATOMIC_COUNTERS 0x92D6
#define GL_MAX_COMBINED_ATOMIC_COUNTERS 0x92D7
#define GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE 0x92D8
#define GL_ACTIVE_ATOMIC_COUNTER_BUFFERS 0x92D9
#define GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX 0x92DA
#define GL_UNSIGNED_INT_ATOMIC_COUNTER 0x92DB
#define GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS 0x92DC
#define GL_FRAGMENT_COVERAGE_TO_COLOR_NV 0x92DD
#define GL_FRAGMENT_COVERAGE_COLOR_NV 0x92DE
#define GL_MESH_OUTPUT_PER_VERTEX_GRANULARITY_NV 0x92DF
#define GL_DEBUG_OUTPUT 0x92E0
#define GL_DEBUG_OUTPUT_KHR 0x92E0
#define GL_UNIFORM 0x92E1
#define GL_UNIFORM_BLOCK 0x92E2
#define GL_PROGRAM_INPUT 0x92E3
#define GL_PROGRAM_OUTPUT 0x92E4
#define GL_BUFFER_VARIABLE 0x92E5
#define GL_SHADER_STORAGE_BLOCK 0x92E6
#define GL_IS_PER_PATCH 0x92E7
#define GL_IS_PER_PATCH_EXT 0x92E7
#define GL_IS_PER_PATCH_OES 0x92E7
#define GL_VERTEX_SUBROUTINE 0x92E8
#define GL_TESS_CONTROL_SUBROUTINE 0x92E9
#define GL_TESS_EVALUATION_SUBROUTINE 0x92EA
#define GL_GEOMETRY_SUBROUTINE 0x92EB
#define GL_FRAGMENT_SUBROUTINE 0x92EC
#define GL_COMPUTE_SUBROUTINE 0x92ED
#define GL_VERTEX_SUBROUTINE_UNIFORM 0x92EE
#define GL_TESS_CONTROL_SUBROUTINE_UNIFORM 0x92EF
#define GL_TESS_EVALUATION_SUBROUTINE_UNIFORM 0x92F0
#define GL_GEOMETRY_SUBROUTINE_UNIFORM 0x92F1
#define GL_FRAGMENT_SUBROUTINE_UNIFORM 0x92F2
#define GL_COMPUTE_SUBROUTINE_UNIFORM 0x92F3
#define GL_TRANSFORM_FEEDBACK_VARYING 0x92F4
#define GL_ACTIVE_RESOURCES 0x92F5
#define GL_MAX_NAME_LENGTH 0x92F6
#define GL_MAX_NUM_ACTIVE_VARIABLES 0x92F7
#define GL_MAX_NUM_COMPATIBLE_SUBROUTINES 0x92F8
#define GL_NAME_LENGTH 0x92F9
#define GL_TYPE 0x92FA
#define GL_ARRAY_SIZE 0x92FB
#define GL_OFFSET 0x92FC
#define GL_BLOCK_INDEX 0x92FD
#define GL_ARRAY_STRIDE 0x92FE
#define GL_MATRIX_STRIDE 0x92FF
#define GL_IS_ROW_MAJOR 0x9300
#define GL_ATOMIC_COUNTER_BUFFER_INDEX 0x9301
#define GL_BUFFER_BINDING 0x9302
#define GL_BUFFER_DATA_SIZE 0x9303
#define GL_NUM_ACTIVE_VARIABLES 0x9304
#define GL_ACTIVE_VARIABLES 0x9305
#define GL_REFERENCED_BY_VERTEX_SHADER 0x9306
#define GL_REFERENCED_BY_TESS_CONTROL_SHADER 0x9307
#define GL_REFERENCED_BY_TESS_CONTROL_SHADER_EXT 0x9307
#define GL_REFERENCED_BY_TESS_CONTROL_SHADER_OES 0x9307
#define GL_REFERENCED_BY_TESS_EVALUATION_SHADER 0x9308
#define GL_REFERENCED_BY_TESS_EVALUATION_SHADER_EXT 0x9308
#define GL_REFERENCED_BY_TESS_EVALUATION_SHADER_OES 0x9308
#define GL_REFERENCED_BY_GEOMETRY_SHADER 0x9309
#define GL_REFERENCED_BY_GEOMETRY_SHADER_EXT 0x9309
#define GL_REFERENCED_BY_GEOMETRY_SHADER_OES 0x9309
#define GL_REFERENCED_BY_FRAGMENT_SHADER 0x930A
#define GL_REFERENCED_BY_COMPUTE_SHADER 0x930B
#define GL_TOP_LEVEL_ARRAY_SIZE 0x930C
#define GL_TOP_LEVEL_ARRAY_STRIDE 0x930D
#define GL_LOCATION 0x930E
#define GL_LOCATION_INDEX 0x930F
#define GL_LOCATION_INDEX_EXT 0x930F
#define GL_FRAMEBUFFER_DEFAULT_WIDTH 0x9310
#define GL_FRAMEBUFFER_DEFAULT_HEIGHT 0x9311
#define GL_FRAMEBUFFER_DEFAULT_LAYERS 0x9312
#define GL_FRAMEBUFFER_DEFAULT_LAYERS_EXT 0x9312
#define GL_FRAMEBUFFER_DEFAULT_LAYERS_OES 0x9312
#define GL_FRAMEBUFFER_DEFAULT_SAMPLES 0x9313
#define GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS 0x9314
#define GL_MAX_FRAMEBUFFER_WIDTH 0x9315
#define GL_MAX_FRAMEBUFFER_HEIGHT 0x9316
#define GL_MAX_FRAMEBUFFER_LAYERS 0x9317
#define GL_MAX_FRAMEBUFFER_LAYERS_EXT 0x9317
#define GL_MAX_FRAMEBUFFER_LAYERS_OES 0x9317
#define GL_MAX_FRAMEBUFFER_SAMPLES 0x9318
#define GL_RASTER_MULTISAMPLE_EXT 0x9327
#define GL_RASTER_SAMPLES_EXT 0x9328
#define GL_MAX_RASTER_SAMPLES_EXT 0x9329
#define GL_RASTER_FIXED_SAMPLE_LOCATIONS_EXT 0x932A
#define GL_MULTISAMPLE_RASTERIZATION_ALLOWED_EXT 0x932B
#define GL_EFFECTIVE_RASTER_SAMPLES_EXT 0x932C
#define GL_DEPTH_SAMPLES_NV 0x932D
#define GL_STENCIL_SAMPLES_NV 0x932E
#define GL_MIXED_DEPTH_SAMPLES_SUPPORTED_NV 0x932F
#define GL_MIXED_STENCIL_SAMPLES_SUPPORTED_NV 0x9330
#define GL_COVERAGE_MODULATION_TABLE_NV 0x9331
#define GL_COVERAGE_MODULATION_NV 0x9332
#define GL_COVERAGE_MODULATION_TABLE_SIZE_NV 0x9333
#define GL_WARP_SIZE_NV 0x9339
#define GL_WARPS_PER_SM_NV 0x933A
#define GL_SM_COUNT_NV 0x933B
#define GL_FILL_RECTANGLE_NV 0x933C
#define GL_SAMPLE_LOCATION_SUBPIXEL_BITS_ARB 0x933D
#define GL_SAMPLE_LOCATION_SUBPIXEL_BITS_NV 0x933D
#define GL_SAMPLE_LOCATION_PIXEL_GRID_WIDTH_ARB 0x933E
#define GL_SAMPLE_LOCATION_PIXEL_GRID_WIDTH_NV 0x933E
#define GL_SAMPLE_LOCATION_PIXEL_GRID_HEIGHT_ARB 0x933F
#define GL_SAMPLE_LOCATION_PIXEL_GRID_HEIGHT_NV 0x933F
#define GL_PROGRAMMABLE_SAMPLE_LOCATION_TABLE_SIZE_ARB 0x9340
#define GL_PROGRAMMABLE_SAMPLE_LOCATION_TABLE_SIZE_NV 0x9340
#define GL_PROGRAMMABLE_SAMPLE_LOCATION_ARB 0x9341
#define GL_PROGRAMMABLE_SAMPLE_LOCATION_NV 0x9341
#define GL_FRAMEBUFFER_PROGRAMMABLE_SAMPLE_LOCATIONS_ARB 0x9342
#define GL_FRAMEBUFFER_PROGRAMMABLE_SAMPLE_LOCATIONS_NV 0x9342
#define GL_FRAMEBUFFER_SAMPLE_LOCATION_PIXEL_GRID_ARB 0x9343
#define GL_FRAMEBUFFER_SAMPLE_LOCATION_PIXEL_GRID_NV 0x9343
#define GL_MAX_COMPUTE_VARIABLE_GROUP_INVOCATIONS_ARB 0x9344
#define GL_MAX_COMPUTE_VARIABLE_GROUP_SIZE_ARB 0x9345
#define GL_CONSERVATIVE_RASTERIZATION_NV 0x9346
#define GL_SUBPIXEL_PRECISION_BIAS_X_BITS_NV 0x9347
#define GL_SUBPIXEL_PRECISION_BIAS_Y_BITS_NV 0x9348
#define GL_MAX_SUBPIXEL_PRECISION_BIAS_BITS_NV 0x9349
#define GL_LOCATION_COMPONENT 0x934A
#define GL_TRANSFORM_FEEDBACK_BUFFER_INDEX 0x934B
#define GL_TRANSFORM_FEEDBACK_BUFFER_STRIDE 0x934C
#define GL_ALPHA_TO_COVERAGE_DITHER_DEFAULT_NV 0x934D
#define GL_ALPHA_TO_COVERAGE_DITHER_ENABLE_NV 0x934E
#define GL_ALPHA_TO_COVERAGE_DITHER_DISABLE_NV 0x934F
#define GL_VIEWPORT_SWIZZLE_POSITIVE_X_NV 0x9350
#define GL_VIEWPORT_SWIZZLE_NEGATIVE_X_NV 0x9351
#define GL_VIEWPORT_SWIZZLE_POSITIVE_Y_NV 0x9352
#define GL_VIEWPORT_SWIZZLE_NEGATIVE_Y_NV 0x9353
#define GL_VIEWPORT_SWIZZLE_POSITIVE_Z_NV 0x9354
#define GL_VIEWPORT_SWIZZLE_NEGATIVE_Z_NV 0x9355
#define GL_VIEWPORT_SWIZZLE_POSITIVE_W_NV 0x9356
#define GL_VIEWPORT_SWIZZLE_NEGATIVE_W_NV 0x9357
#define GL_VIEWPORT_SWIZZLE_X_NV 0x9358
#define GL_VIEWPORT_SWIZZLE_Y_NV 0x9359
#define GL_VIEWPORT_SWIZZLE_Z_NV 0x935A
#define GL_VIEWPORT_SWIZZLE_W_NV 0x935B
#define GL_CLIP_ORIGIN 0x935C
#define GL_CLIP_ORIGIN_EXT 0x935C
#define GL_CLIP_DEPTH_MODE 0x935D
#define GL_CLIP_DEPTH_MODE_EXT 0x935D
#define GL_NEGATIVE_ONE_TO_ONE 0x935E
#define GL_NEGATIVE_ONE_TO_ONE_EXT 0x935E
#define GL_ZERO_TO_ONE 0x935F
#define GL_ZERO_TO_ONE_EXT 0x935F
#define GL_CLEAR_TEXTURE 0x9365
#define GL_TEXTURE_REDUCTION_MODE_ARB 0x9366
#define GL_TEXTURE_REDUCTION_MODE_EXT 0x9366
#define GL_WEIGHTED_AVERAGE_ARB 0x9367
#define GL_WEIGHTED_AVERAGE_EXT 0x9367
#define GL_FONT_GLYPHS_AVAILABLE_NV 0x9368
#define GL_FONT_TARGET_UNAVAILABLE_NV 0x9369
#define GL_FONT_UNAVAILABLE_NV 0x936A
#define GL_FONT_UNINTELLIGIBLE_NV 0x936B
#define GL_STANDARD_FONT_FORMAT_NV 0x936C
#define GL_FRAGMENT_INPUT_NV 0x936D
#define GL_UNIFORM_BUFFER_UNIFIED_NV 0x936E
#define GL_UNIFORM_BUFFER_ADDRESS_NV 0x936F
#define GL_UNIFORM_BUFFER_LENGTH_NV 0x9370
#define GL_MULTISAMPLES_NV 0x9371
#define GL_SUPERSAMPLE_SCALE_X_NV 0x9372
#define GL_SUPERSAMPLE_SCALE_Y_NV 0x9373
#define GL_CONFORMANT_NV 0x9374
#define GL_CONSERVATIVE_RASTER_DILATE_NV 0x9379
#define GL_CONSERVATIVE_RASTER_DILATE_RANGE_NV 0x937A
#define GL_CONSERVATIVE_RASTER_DILATE_GRANULARITY_NV 0x937B
#define GL_VIEWPORT_POSITION_W_SCALE_NV 0x937C
#define GL_VIEWPORT_POSITION_W_SCALE_X_COEFF_NV 0x937D
#define GL_VIEWPORT_POSITION_W_SCALE_Y_COEFF_NV 0x937E
#define GL_REPRESENTATIVE_FRAGMENT_TEST_NV 0x937F
#define GL_NUM_SAMPLE_COUNTS 0x9380
#define GL_MULTISAMPLE_LINE_WIDTH_RANGE 0x9381
#define GL_MULTISAMPLE_LINE_WIDTH_RANGE_ARB 0x9381
#define GL_MULTISAMPLE_LINE_WIDTH_GRANULARITY 0x9382
#define GL_MULTISAMPLE_LINE_WIDTH_GRANULARITY_ARB 0x9382
#define GL_TRANSLATED_SHADER_SOURCE_LENGTH_ANGLE 0x93A0
#define GL_BGRA8_EXT 0x93A1
#define GL_TEXTURE_USAGE_ANGLE 0x93A2
#define GL_FRAMEBUFFER_ATTACHMENT_ANGLE 0x93A3
#define GL_PACK_REVERSE_ROW_ORDER_ANGLE 0x93A4
#define GL_PROGRAM_BINARY_ANGLE 0x93A6
#define GL_COMPRESSED_RGBA_ASTC_4x4 0x93B0
#define GL_COMPRESSED_RGBA_ASTC_4x4_KHR 0x93B0
#define GL_COMPRESSED_RGBA_ASTC_5x4 0x93B1
#define GL_COMPRESSED_RGBA_ASTC_5x4_KHR 0x93B1
#define GL_COMPRESSED_RGBA_ASTC_5x5 0x93B2
#define GL_COMPRESSED_RGBA_ASTC_5x5_KHR 0x93B2
#define GL_COMPRESSED_RGBA_ASTC_6x5 0x93B3
#define GL_COMPRESSED_RGBA_ASTC_6x5_KHR 0x93B3
#define GL_COMPRESSED_RGBA_ASTC_6x6 0x93B4
#define GL_COMPRESSED_RGBA_ASTC_6x6_KHR 0x93B4
#define GL_COMPRESSED_RGBA_ASTC_8x5 0x93B5
#define GL_COMPRESSED_RGBA_ASTC_8x5_KHR 0x93B5
#define GL_COMPRESSED_RGBA_ASTC_8x6 0x93B6
#define GL_COMPRESSED_RGBA_ASTC_8x6_KHR 0x93B6
#define GL_COMPRESSED_RGBA_ASTC_8x8 0x93B7
#define GL_COMPRESSED_RGBA_ASTC_8x8_KHR 0x93B7
#define GL_COMPRESSED_RGBA_ASTC_10x5 0x93B8
#define GL_COMPRESSED_RGBA_ASTC_10x5_KHR 0x93B8
#define GL_COMPRESSED_RGBA_ASTC_10x6 0x93B9
#define GL_COMPRESSED_RGBA_ASTC_10x6_KHR 0x93B9
#define GL_COMPRESSED_RGBA_ASTC_10x8 0x93BA
#define GL_COMPRESSED_RGBA_ASTC_10x8_KHR 0x93BA
#define GL_COMPRESSED_RGBA_ASTC_10x10 0x93BB
#define GL_COMPRESSED_RGBA_ASTC_10x10_KHR 0x93BB
#define GL_COMPRESSED_RGBA_ASTC_12x10 0x93BC
#define GL_COMPRESSED_RGBA_ASTC_12x10_KHR 0x93BC
#define GL_COMPRESSED_RGBA_ASTC_12x12 0x93BD
#define GL_COMPRESSED_RGBA_ASTC_12x12_KHR 0x93BD
#define GL_COMPRESSED_RGBA_ASTC_3x3x3_OES 0x93C0
#define GL_COMPRESSED_RGBA_ASTC_4x3x3_OES 0x93C1
#define GL_COMPRESSED_RGBA_ASTC_4x4x3_OES 0x93C2
#define GL_COMPRESSED_RGBA_ASTC_4x4x4_OES 0x93C3
#define GL_COMPRESSED_RGBA_ASTC_5x4x4_OES 0x93C4
#define GL_COMPRESSED_RGBA_ASTC_5x5x4_OES 0x93C5
#define GL_COMPRESSED_RGBA_ASTC_5x5x5_OES 0x93C6
#define GL_COMPRESSED_RGBA_ASTC_6x5x5_OES 0x93C7
#define GL_COMPRESSED_RGBA_ASTC_6x6x5_OES 0x93C8
#define GL_COMPRESSED_RGBA_ASTC_6x6x6_OES 0x93C9
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4 0x93D0
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR 0x93D0
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4 0x93D1
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR 0x93D1
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5 0x93D2
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR 0x93D2
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5 0x93D3
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR 0x93D3
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6 0x93D4
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR 0x93D4
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5 0x93D5
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR 0x93D5
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6 0x93D6
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR 0x93D6
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8 0x93D7
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR 0x93D7
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5 0x93D8
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR 0x93D8
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6 0x93D9
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR 0x93D9
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8 0x93DA
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR 0x93DA
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10 0x93DB
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR 0x93DB
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10 0x93DC
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR 0x93DC
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12 0x93DD
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR 0x93DD
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_3x3x3_OES 0x93E0
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x3x3_OES 0x93E1
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4x3_OES 0x93E2
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4x4_OES 0x93E3
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4x4_OES 0x93E4
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5x4_OES 0x93E5
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5x5_OES 0x93E6
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5x5_OES 0x93E7
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6x5_OES 0x93E8
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6x6_OES 0x93E9
#define GL_COMPRESSED_SRGB_ALPHA_PVRTC_2BPPV2_IMG 0x93F0
#define GL_COMPRESSED_SRGB_ALPHA_PVRTC_4BPPV2_IMG 0x93F1
#define GL_PERFQUERY_COUNTER_EVENT_INTEL 0x94F0
#define GL_PERFQUERY_COUNTER_DURATION_NORM_INTEL 0x94F1
#define GL_PERFQUERY_COUNTER_DURATION_RAW_INTEL 0x94F2
#define GL_PERFQUERY_COUNTER_THROUGHPUT_INTEL 0x94F3
#define GL_PERFQUERY_COUNTER_RAW_INTEL 0x94F4
#define GL_PERFQUERY_COUNTER_TIMESTAMP_INTEL 0x94F5
#define GL_PERFQUERY_COUNTER_DATA_UINT32_INTEL 0x94F8
#define GL_PERFQUERY_COUNTER_DATA_UINT64_INTEL 0x94F9
#define GL_PERFQUERY_COUNTER_DATA_FLOAT_INTEL 0x94FA
#define GL_PERFQUERY_COUNTER_DATA_DOUBLE_INTEL 0x94FB
#define GL_PERFQUERY_COUNTER_DATA_BOOL32_INTEL 0x94FC
#define GL_PERFQUERY_QUERY_NAME_LENGTH_MAX_INTEL 0x94FD
#define GL_PERFQUERY_COUNTER_NAME_LENGTH_MAX_INTEL 0x94FE
#define GL_PERFQUERY_COUNTER_DESC_LENGTH_MAX_INTEL 0x94FF
#define GL_PERFQUERY_GPA_EXTENDED_COUNTERS_INTEL 0x9500
#define GL_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_EXT 0x9530
#define GL_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_EXT 0x9531
#define GL_MAX_MESH_TOTAL_MEMORY_SIZE_NV 0x9536
#define GL_MAX_TASK_TOTAL_MEMORY_SIZE_NV 0x9537
#define GL_MAX_MESH_OUTPUT_VERTICES_NV 0x9538
#define GL_MAX_MESH_OUTPUT_PRIMITIVES_NV 0x9539
#define GL_MAX_TASK_OUTPUT_COUNT_NV 0x953A
#define GL_MAX_MESH_WORK_GROUP_SIZE_NV 0x953B
#define GL_MAX_TASK_WORK_GROUP_SIZE_NV 0x953C
#define GL_MAX_DRAW_MESH_TASKS_COUNT_NV 0x953D
#define GL_MESH_WORK_GROUP_SIZE_NV 0x953E
#define GL_TASK_WORK_GROUP_SIZE_NV 0x953F
#define GL_QUERY_RESOURCE_TYPE_VIDMEM_ALLOC_NV 0x9540
#define GL_QUERY_RESOURCE_MEMTYPE_VIDMEM_NV 0x9542
#define GL_MESH_OUTPUT_PER_PRIMITIVE_GRANULARITY_NV 0x9543
#define GL_QUERY_RESOURCE_SYS_RESERVED_NV 0x9544
#define GL_QUERY_RESOURCE_TEXTURE_NV 0x9545
#define GL_QUERY_RESOURCE_RENDERBUFFER_NV 0x9546
#define GL_QUERY_RESOURCE_BUFFEROBJECT_NV 0x9547
#define GL_PER_GPU_STORAGE_NV 0x9548
#define GL_MULTICAST_PROGRAMMABLE_SAMPLE_LOCATION_NV 0x9549
#define GL_CONSERVATIVE_RASTER_MODE_NV 0x954D
#define GL_CONSERVATIVE_RASTER_MODE_POST_SNAP_NV 0x954E
#define GL_CONSERVATIVE_RASTER_MODE_PRE_SNAP_TRIANGLES_NV 0x954F
#define GL_CONSERVATIVE_RASTER_MODE_PRE_SNAP_NV 0x9550
#define GL_SHADER_BINARY_FORMAT_SPIR_V 0x9551
#define GL_SHADER_BINARY_FORMAT_SPIR_V_ARB 0x9551
#define GL_SPIR_V_BINARY 0x9552
#define GL_SPIR_V_BINARY_ARB 0x9552
#define GL_SPIR_V_EXTENSIONS 0x9553
#define GL_NUM_SPIR_V_EXTENSIONS 0x9554
#define GL_SCISSOR_TEST_EXCLUSIVE_NV 0x9555
#define GL_SCISSOR_BOX_EXCLUSIVE_NV 0x9556
#define GL_MAX_MESH_VIEWS_NV 0x9557
#define GL_RENDER_GPU_MASK_NV 0x9558
#define GL_MESH_SHADER_NV 0x9559
#define GL_TASK_SHADER_NV 0x955A
#define GL_SHADING_RATE_IMAGE_BINDING_NV 0x955B
#define GL_SHADING_RATE_IMAGE_TEXEL_WIDTH_NV 0x955C
#define GL_SHADING_RATE_IMAGE_TEXEL_HEIGHT_NV 0x955D
#define GL_SHADING_RATE_IMAGE_PALETTE_SIZE_NV 0x955E
#define GL_MAX_COARSE_FRAGMENT_SAMPLES_NV 0x955F
#define GL_SHADING_RATE_IMAGE_NV 0x9563
#define GL_SHADING_RATE_NO_INVOCATIONS_NV 0x9564
#define GL_SHADING_RATE_1_INVOCATION_PER_PIXEL_NV 0x9565
#define GL_SHADING_RATE_1_INVOCATION_PER_1X2_PIXELS_NV 0x9566
#define GL_SHADING_RATE_1_INVOCATION_PER_2X1_PIXELS_NV 0x9567
#define GL_SHADING_RATE_1_INVOCATION_PER_2X2_PIXELS_NV 0x9568
#define GL_SHADING_RATE_1_INVOCATION_PER_2X4_PIXELS_NV 0x9569
#define GL_SHADING_RATE_1_INVOCATION_PER_4X2_PIXELS_NV 0x956A
#define GL_SHADING_RATE_1_INVOCATION_PER_4X4_PIXELS_NV 0x956B
#define GL_SHADING_RATE_2_INVOCATIONS_PER_PIXEL_NV 0x956C
#define GL_SHADING_RATE_4_INVOCATIONS_PER_PIXEL_NV 0x956D
#define GL_SHADING_RATE_8_INVOCATIONS_PER_PIXEL_NV 0x956E
#define GL_SHADING_RATE_16_INVOCATIONS_PER_PIXEL_NV 0x956F
#define GL_MESH_VERTICES_OUT_NV 0x9579
#define GL_MESH_PRIMITIVES_OUT_NV 0x957A
#define GL_MESH_OUTPUT_TYPE_NV 0x957B
#define GL_MESH_SUBROUTINE_NV 0x957C
#define GL_TASK_SUBROUTINE_NV 0x957D
#define GL_MESH_SUBROUTINE_UNIFORM_NV 0x957E
#define GL_TASK_SUBROUTINE_UNIFORM_NV 0x957F
#define GL_TEXTURE_TILING_EXT 0x9580
#define GL_DEDICATED_MEMORY_OBJECT_EXT 0x9581
#define GL_NUM_TILING_TYPES_EXT 0x9582
#define GL_TILING_TYPES_EXT 0x9583
#define GL_OPTIMAL_TILING_EXT 0x9584
#define GL_LINEAR_TILING_EXT 0x9585
#define GL_HANDLE_TYPE_OPAQUE_FD_EXT 0x9586
#define GL_HANDLE_TYPE_OPAQUE_WIN32_EXT 0x9587
#define GL_HANDLE_TYPE_OPAQUE_WIN32_KMT_EXT 0x9588
#define GL_HANDLE_TYPE_D3D12_TILEPOOL_EXT 0x9589
#define GL_HANDLE_TYPE_D3D12_RESOURCE_EXT 0x958A
#define GL_HANDLE_TYPE_D3D11_IMAGE_EXT 0x958B
#define GL_HANDLE_TYPE_D3D11_IMAGE_KMT_EXT 0x958C
#define GL_LAYOUT_GENERAL_EXT 0x958D
#define GL_LAYOUT_COLOR_ATTACHMENT_EXT 0x958E
#define GL_LAYOUT_DEPTH_STENCIL_ATTACHMENT_EXT 0x958F
#define GL_LAYOUT_DEPTH_STENCIL_READ_ONLY_EXT 0x9590
#define GL_LAYOUT_SHADER_READ_ONLY_EXT 0x9591
#define GL_LAYOUT_TRANSFER_SRC_EXT 0x9592
#define GL_LAYOUT_TRANSFER_DST_EXT 0x9593
#define GL_HANDLE_TYPE_D3D12_FENCE_EXT 0x9594
#define GL_D3D12_FENCE_VALUE_EXT 0x9595
#define GL_NUM_DEVICE_UUIDS_EXT 0x9596
#define GL_DEVICE_UUID_EXT 0x9597
#define GL_DRIVER_UUID_EXT 0x9598
#define GL_DEVICE_LUID_EXT 0x9599
#define GL_DEVICE_NODE_MASK_EXT 0x959A
#define GL_PROTECTED_MEMORY_OBJECT_EXT 0x959B
#define GL_UNIFORM_BLOCK_REFERENCED_BY_MESH_SHADER_NV 0x959C
#define GL_UNIFORM_BLOCK_REFERENCED_BY_TASK_SHADER_NV 0x959D
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_MESH_SHADER_NV 0x959E
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TASK_SHADER_NV 0x959F
#define GL_REFERENCED_BY_MESH_SHADER_NV 0x95A0
#define GL_REFERENCED_BY_TASK_SHADER_NV 0x95A1
#define GL_MAX_MESH_WORK_GROUP_INVOCATIONS_NV 0x95A2
#define GL_MAX_TASK_WORK_GROUP_INVOCATIONS_NV 0x95A3
#define GL_ATTACHED_MEMORY_OBJECT_NV 0x95A4
#define GL_ATTACHED_MEMORY_OFFSET_NV 0x95A5
#define GL_MEMORY_ATTACHABLE_ALIGNMENT_NV 0x95A6
#define GL_MEMORY_ATTACHABLE_SIZE_NV 0x95A7
#define GL_MEMORY_ATTACHABLE_NV 0x95A8
#define GL_DETACHED_MEMORY_INCARNATION_NV 0x95A9
#define GL_DETACHED_TEXTURES_NV 0x95AA
#define GL_DETACHED_BUFFERS_NV 0x95AB
#define GL_MAX_DETACHED_TEXTURES_NV 0x95AC
#define GL_MAX_DETACHED_BUFFERS_NV 0x95AD
#define GL_SHADING_RATE_SAMPLE_ORDER_DEFAULT_NV 0x95AE
#define GL_SHADING_RATE_SAMPLE_ORDER_PIXEL_MAJOR_NV 0x95AF
#define GL_SHADING_RATE_SAMPLE_ORDER_SAMPLE_MAJOR_NV 0x95B0
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_NUM_VIEWS_OVR 0x9630
#define GL_MAX_VIEWS_OVR 0x9631
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_BASE_VIEW_INDEX_OVR 0x9632
#define GL_FRAMEBUFFER_INCOMPLETE_VIEW_TARGETS_OVR 0x9633
#define GL_GS_SHADER_BINARY_MTK 0x9640
#define GL_GS_PROGRAM_BINARY_MTK 0x9641
#define GL_MAX_SHADER_COMBINED_LOCAL_STORAGE_FAST_SIZE_EXT 0x9650
#define GL_MAX_SHADER_COMBINED_LOCAL_STORAGE_SIZE_EXT 0x9651
#define GL_FRAMEBUFFER_INCOMPLETE_INSUFFICIENT_SHADER_COMBINED_LOCAL_STORAGE_EXT 0x9652
#define GL_FRAMEBUFFER_FETCH_NONCOHERENT_QCOM 0x96A2
#define GL_SHARED_EDGE_NV 0xC0
#define GL_ROUNDED_RECT_NV 0xE8
#define GL_RELATIVE_ROUNDED_RECT_NV 0xE9
#define GL_ROUNDED_RECT2_NV 0xEA
#define GL_RELATIVE_ROUNDED_RECT2_NV 0xEB
#define GL_ROUNDED_RECT4_NV 0xEC
#define GL_RELATIVE_ROUNDED_RECT4_NV 0xED
#define GL_ROUNDED_RECT8_NV 0xEE
#define GL_RELATIVE_ROUNDED_RECT8_NV 0xEF
#define GL_RESTART_PATH_NV 0xF0
#define GL_DUP_FIRST_CUBIC_CURVE_TO_NV 0xF2
#define GL_DUP_LAST_CUBIC_CURVE_TO_NV 0xF4
#define GL_RECT_NV 0xF6
#define GL_RELATIVE_RECT_NV 0xF7
#define GL_CIRCULAR_CCW_ARC_TO_NV 0xF8
#define GL_CIRCULAR_CW_ARC_TO_NV 0xFA
#define GL_CIRCULAR_TANGENT_ARC_TO_NV 0xFC
#define GL_ARC_TO_NV 0xFE
#define GL_RELATIVE_ARC_TO_NV 0xFF
#define GL_TRACE_ALL_BITS_MESA 0xFFFF
#define GL_ALL_ATTRIB_BITS 0xFFFFFFFF
#define GL_ALL_BARRIER_BITS 0xFFFFFFFF
#define GL_ALL_BARRIER_BITS_EXT 0xFFFFFFFF
#define GL_ALL_PIXELS_AMD 0xFFFFFFFF
#define GL_ALL_SHADER_BITS 0xFFFFFFFF
#define GL_ALL_SHADER_BITS_EXT 0xFFFFFFFF
#define GL_CLIENT_ALL_ATTRIB_BITS 0xFFFFFFFF
#define GL_QUERY_ALL_EVENT_BITS_AMD 0xFFFFFFFF
#define GL_TIMEOUT_IGNORED 0xFFFFFFFFFFFFFFFFull
#define GL_TIMEOUT_IGNORED_APPLE 0xFFFFFFFFFFFFFFFFull
#define GL_INVALID_INDEX 0xFFFFFFFFu
#define GL_LAYOUT_LINEAR_INTEL 1
#define GL_ONE 1
#define GL_TRUE 1
#define GL_VERSION_ES_CL_1_0 1
#define GL_VERSION_ES_CL_1_1 1
#define GL_VERSION_ES_CM_1_1 1
#define GL_CULL_VERTEX_IBM 103050
#define GL_ALL_STATIC_DATA_IBM 103060
#define GL_STATIC_VERTEX_ARRAY_IBM 103061
#define GL_VERTEX_ARRAY_LIST_IBM 103070
#define GL_NORMAL_ARRAY_LIST_IBM 103071
#define GL_COLOR_ARRAY_LIST_IBM 103072
#define GL_INDEX_ARRAY_LIST_IBM 103073
#define GL_TEXTURE_COORD_ARRAY_LIST_IBM 103074
#define GL_EDGE_FLAG_ARRAY_LIST_IBM 103075
#define GL_FOG_COORDINATE_ARRAY_LIST_IBM 103076
#define GL_SECONDARY_COLOR_ARRAY_LIST_IBM 103077
#define GL_VERTEX_ARRAY_LIST_STRIDE_IBM 103080
#define GL_NORMAL_ARRAY_LIST_STRIDE_IBM 103081
#define GL_COLOR_ARRAY_LIST_STRIDE_IBM 103082
#define GL_INDEX_ARRAY_LIST_STRIDE_IBM 103083
#define GL_TEXTURE_COORD_ARRAY_LIST_STRIDE_IBM 103084
#define GL_EDGE_FLAG_ARRAY_LIST_STRIDE_IBM 103085
#define GL_FOG_COORDINATE_ARRAY_LIST_STRIDE_IBM 103086
#define GL_SECONDARY_COLOR_ARRAY_LIST_STRIDE_IBM 103087
#define GL_UUID_SIZE_EXT 16
#define GL_LAYOUT_LINEAR_CPU_CACHED_INTEL 2
#define GL_LUID_SIZE_EXT 8

/* Version IDs */
#undef GL_VERSION_1_0
#define GL_VERSION_1_0 1
#undef GL_VERSION_1_1
#define GL_VERSION_1_1 2
#undef GL_VERSION_1_2
#define GL_VERSION_1_2 3
#undef GL_VERSION_1_3
#define GL_VERSION_1_3 4
#undef GL_VERSION_1_4
#define GL_VERSION_1_4 5
#undef GL_VERSION_1_5
#define GL_VERSION_1_5 6
#undef GL_VERSION_2_0
#define GL_VERSION_2_0 7
#undef GL_VERSION_2_1
#define GL_VERSION_2_1 8
#undef GL_VERSION_3_0
#define GL_VERSION_3_0 9
#undef GL_VERSION_3_1
#define GL_VERSION_3_1 10
#undef GL_VERSION_3_2
#define GL_VERSION_3_2 11
#undef GL_VERSION_3_3
#define GL_VERSION_3_3 12
#undef GL_VERSION_4_0
#define GL_VERSION_4_0 13
#undef GL_VERSION_4_1
#define GL_VERSION_4_1 14
#undef GL_VERSION_4_2
#define GL_VERSION_4_2 15
#undef GL_VERSION_4_3
#define GL_VERSION_4_3 16
#undef GL_VERSION_4_4
#define GL_VERSION_4_4 17
#undef GL_VERSION_4_5
#define GL_VERSION_4_5 18
#undef GL_VERSION_4_6
#define GL_VERSION_4_6 19
#undef GL_VERSION_ES_CM_1_0
#define GL_VERSION_ES_CM_1_0 20
#undef GL_ES_VERSION_2_0
#define GL_ES_VERSION_2_0 21
#undef GL_ES_VERSION_3_0
#define GL_ES_VERSION_3_0 22
#undef GL_ES_VERSION_3_1
#define GL_ES_VERSION_3_1 23
#undef GL_ES_VERSION_3_2
#define GL_ES_VERSION_3_2 24
#undef GL_SC_VERSION_2_0
#define GL_SC_VERSION_2_0 25

/* Extension IDs */
#undef GL_3DFX_multisample
#define GL_3DFX_multisample 26
#undef GL_3DFX_tbuffer
#define GL_3DFX_tbuffer 27
#undef GL_3DFX_texture_compression_FXT1
#define GL_3DFX_texture_compression_FXT1 28
#undef GL_AMD_blend_minmax_factor
#define GL_AMD_blend_minmax_factor 29
#undef GL_AMD_compressed_3DC_texture
#define GL_AMD_compressed_3DC_texture 30
#undef GL_AMD_compressed_ATC_texture
#define GL_AMD_compressed_ATC_texture 31
#undef GL_AMD_conservative_depth
#define GL_AMD_conservative_depth 32
#undef GL_AMD_debug_output
#define GL_AMD_debug_output 33
#undef GL_AMD_depth_clamp_separate
#define GL_AMD_depth_clamp_separate 34
#undef GL_AMD_draw_buffers_blend
#define GL_AMD_draw_buffers_blend 35
#undef GL_AMD_framebuffer_multisample_advanced
#define GL_AMD_framebuffer_multisample_advanced 36
#undef GL_AMD_framebuffer_sample_positions
#define GL_AMD_framebuffer_sample_positions 37
#undef GL_AMD_gcn_shader
#define GL_AMD_gcn_shader 38
#undef GL_AMD_gpu_shader_half_float
#define GL_AMD_gpu_shader_half_float 39
#undef GL_AMD_gpu_shader_int16
#define GL_AMD_gpu_shader_int16 40
#undef GL_AMD_gpu_shader_int64
#define GL_AMD_gpu_shader_int64 41
#undef GL_AMD_interleaved_elements
#define GL_AMD_interleaved_elements 42
#undef GL_AMD_multi_draw_indirect
#define GL_AMD_multi_draw_indirect 43
#undef GL_AMD_name_gen_delete
#define GL_AMD_name_gen_delete 44
#undef GL_AMD_occlusion_query_event
#define GL_AMD_occlusion_query_event 45
#undef GL_AMD_performance_monitor
#define GL_AMD_performance_monitor 46
#undef GL_AMD_pinned_memory
#define GL_AMD_pinned_memory 47
#undef GL_AMD_program_binary_Z400
#define GL_AMD_program_binary_Z400 48
#undef GL_AMD_query_buffer_object
#define GL_AMD_query_buffer_object 49
#undef GL_AMD_sample_positions
#define GL_AMD_sample_positions 50
#undef GL_AMD_seamless_cubemap_per_texture
#define GL_AMD_seamless_cubemap_per_texture 51
#undef GL_AMD_shader_atomic_counter_ops
#define GL_AMD_shader_atomic_counter_ops 52
#undef GL_AMD_shader_ballot
#define GL_AMD_shader_ballot 53
#undef GL_AMD_shader_gpu_shader_half_float_fetch
#define GL_AMD_shader_gpu_shader_half_float_fetch 54
#undef GL_AMD_shader_image_load_store_lod
#define GL_AMD_shader_image_load_store_lod 55
#undef GL_AMD_shader_stencil_export
#define GL_AMD_shader_stencil_export 56
#undef GL_AMD_shader_trinary_minmax
#define GL_AMD_shader_trinary_minmax 57
#undef GL_AMD_shader_explicit_vertex_parameter
#define GL_AMD_shader_explicit_vertex_parameter 58
#undef GL_AMD_sparse_texture
#define GL_AMD_sparse_texture 59
#undef GL_AMD_stencil_operation_extended
#define GL_AMD_stencil_operation_extended 60
#undef GL_AMD_texture_gather_bias_lod
#define GL_AMD_texture_gather_bias_lod 61
#undef GL_AMD_texture_texture4
#define GL_AMD_texture_texture4 62
#undef GL_AMD_transform_feedback3_lines_triangles
#define GL_AMD_transform_feedback3_lines_triangles 63
#undef GL_AMD_transform_feedback4
#define GL_AMD_transform_feedback4 64
#undef GL_AMD_vertex_shader_layer
#define GL_AMD_vertex_shader_layer 65
#undef GL_AMD_vertex_shader_tessellator
#define GL_AMD_vertex_shader_tessellator 66
#undef GL_AMD_vertex_shader_viewport_index
#define GL_AMD_vertex_shader_viewport_index 67
#undef GL_ANDROID_extension_pack_es31a
#define GL_ANDROID_extension_pack_es31a 68
#undef GL_ANGLE_depth_texture
#define GL_ANGLE_depth_texture 69
#undef GL_ANGLE_framebuffer_blit
#define GL_ANGLE_framebuffer_blit 70
#undef GL_ANGLE_framebuffer_multisample
#define GL_ANGLE_framebuffer_multisample 71
#undef GL_ANGLE_instanced_arrays
#define GL_ANGLE_instanced_arrays 72
#undef GL_ANGLE_pack_reverse_row_order
#define GL_ANGLE_pack_reverse_row_order 73
#undef GL_ANGLE_program_binary
#define GL_ANGLE_program_binary 74
#undef GL_ANGLE_texture_compression_dxt3
#define GL_ANGLE_texture_compression_dxt3 75
#undef GL_ANGLE_texture_compression_dxt5
#define GL_ANGLE_texture_compression_dxt5 76
#undef GL_ANGLE_texture_usage
#define GL_ANGLE_texture_usage 77
#undef GL_ANGLE_translated_shader_source
#define GL_ANGLE_translated_shader_source 78
#undef GL_APPLE_aux_depth_stencil
#define GL_APPLE_aux_depth_stencil 79
#undef GL_APPLE_client_storage
#define GL_APPLE_client_storage 80
#undef GL_APPLE_clip_distance
#define GL_APPLE_clip_distance 81
#undef GL_APPLE_color_buffer_packed_float
#define GL_APPLE_color_buffer_packed_float 82
#undef GL_APPLE_copy_texture_levels
#define GL_APPLE_copy_texture_levels 83
#undef GL_APPLE_element_array
#define GL_APPLE_element_array 84
#undef GL_APPLE_fence
#define GL_APPLE_fence 85
#undef GL_APPLE_float_pixels
#define GL_APPLE_float_pixels 86
#undef GL_APPLE_flush_buffer_range
#define GL_APPLE_flush_buffer_range 87
#undef GL_APPLE_framebuffer_multisample
#define GL_APPLE_framebuffer_multisample 88
#undef GL_APPLE_object_purgeable
#define GL_APPLE_object_purgeable 89
#undef GL_APPLE_rgb_422
#define GL_APPLE_rgb_422 90
#undef GL_APPLE_row_bytes
#define GL_APPLE_row_bytes 91
#undef GL_APPLE_specular_vector
#define GL_APPLE_specular_vector 92
#undef GL_APPLE_sync
#define GL_APPLE_sync 93
#undef GL_APPLE_texture_2D_limited_npot
#define GL_APPLE_texture_2D_limited_npot 94
#undef GL_APPLE_texture_format_BGRA8888
#define GL_APPLE_texture_format_BGRA8888 95
#undef GL_APPLE_texture_max_level
#define GL_APPLE_texture_max_level 96
#undef GL_APPLE_texture_packed_float
#define GL_APPLE_texture_packed_float 97
#undef GL_APPLE_texture_range
#define GL_APPLE_texture_range 98
#undef GL_APPLE_transform_hint
#define GL_APPLE_transform_hint 99
#undef GL_APPLE_vertex_array_object
#define GL_APPLE_vertex_array_object 100
#undef GL_APPLE_vertex_array_range
#define GL_APPLE_vertex_array_range 101
#undef GL_APPLE_vertex_program_evaluators
#define GL_APPLE_vertex_program_evaluators 102
#undef GL_APPLE_ycbcr_422
#define GL_APPLE_ycbcr_422 103
#undef GL_ARB_ES2_compatibility
#define GL_ARB_ES2_compatibility 104
#undef GL_ARB_ES3_1_compatibility
#define GL_ARB_ES3_1_compatibility 105
#undef GL_ARB_ES3_2_compatibility
#define GL_ARB_ES3_2_compatibility 106
#undef GL_ARB_ES3_compatibility
#define GL_ARB_ES3_compatibility 107
#undef GL_ARB_arrays_of_arrays
#define GL_ARB_arrays_of_arrays 108
#undef GL_ARB_base_instance
#define GL_ARB_base_instance 109
#undef GL_ARB_bindless_texture
#define GL_ARB_bindless_texture 110
#undef GL_ARB_blend_func_extended
#define GL_ARB_blend_func_extended 111
#undef GL_ARB_buffer_storage
#define GL_ARB_buffer_storage 112
#undef GL_ARB_cl_event
#define GL_ARB_cl_event 113
#undef GL_ARB_clear_buffer_object
#define GL_ARB_clear_buffer_object 114
#undef GL_ARB_clear_texture
#define GL_ARB_clear_texture 115
#undef GL_ARB_clip_control
#define GL_ARB_clip_control 116
#undef GL_ARB_color_buffer_float
#define GL_ARB_color_buffer_float 117
#undef GL_ARB_compatibility
#define GL_ARB_compatibility 118
#undef GL_ARB_compressed_texture_pixel_storage
#define GL_ARB_compressed_texture_pixel_storage 119
#undef GL_ARB_compute_shader
#define GL_ARB_compute_shader 120
#undef GL_ARB_compute_variable_group_size
#define GL_ARB_compute_variable_group_size 121
#undef GL_ARB_conditional_render_inverted
#define GL_ARB_conditional_render_inverted 122
#undef GL_ARB_conservative_depth
#define GL_ARB_conservative_depth 123
#undef GL_ARB_copy_buffer
#define GL_ARB_copy_buffer 124
#undef GL_ARB_copy_image
#define GL_ARB_copy_image 125
#undef GL_ARB_cull_distance
#define GL_ARB_cull_distance 126
#undef GL_ARB_debug_output
#define GL_ARB_debug_output 127
#undef GL_ARB_depth_buffer_float
#define GL_ARB_depth_buffer_float 128
#undef GL_ARB_depth_clamp
#define GL_ARB_depth_clamp 129
#undef GL_ARB_depth_texture
#define GL_ARB_depth_texture 130
#undef GL_ARB_derivative_control
#define GL_ARB_derivative_control 131
#undef GL_ARB_direct_state_access
#define GL_ARB_direct_state_access 132
#undef GL_ARB_draw_buffers
#define GL_ARB_draw_buffers 133
#undef GL_ARB_draw_buffers_blend
#define GL_ARB_draw_buffers_blend 134
#undef GL_ARB_draw_elements_base_vertex
#define GL_ARB_draw_elements_base_vertex 135
#undef GL_ARB_draw_indirect
#define GL_ARB_draw_indirect 136
#undef GL_ARB_draw_instanced
#define GL_ARB_draw_instanced 137
#undef GL_ARB_enhanced_layouts
#define GL_ARB_enhanced_layouts 138
#undef GL_ARB_explicit_attrib_location
#define GL_ARB_explicit_attrib_location 139
#undef GL_ARB_explicit_uniform_location
#define GL_ARB_explicit_uniform_location 140
#undef GL_ARB_fragment_coord_conventions
#define GL_ARB_fragment_coord_conventions 141
#undef GL_ARB_fragment_layer_viewport
#define GL_ARB_fragment_layer_viewport 142
#undef GL_ARB_fragment_program
#define GL_ARB_fragment_program 143
#undef GL_ARB_fragment_program_shadow
#define GL_ARB_fragment_program_shadow 144
#undef GL_ARB_fragment_shader
#define GL_ARB_fragment_shader 145
#undef GL_ARB_fragment_shader_interlock
#define GL_ARB_fragment_shader_interlock 146
#undef GL_ARB_framebuffer_no_attachments
#define GL_ARB_framebuffer_no_attachments 147
#undef GL_ARB_framebuffer_object
#define GL_ARB_framebuffer_object 148
#undef GL_ARB_framebuffer_sRGB
#define GL_ARB_framebuffer_sRGB 149
#undef GL_ARB_geometry_shader4
#define GL_ARB_geometry_shader4 150
#undef GL_ARB_get_program_binary
#define GL_ARB_get_program_binary 151
#undef GL_ARB_get_texture_sub_image
#define GL_ARB_get_texture_sub_image 152
#undef GL_ARB_gl_spirv
#define GL_ARB_gl_spirv 153
#undef GL_ARB_gpu_shader5
#define GL_ARB_gpu_shader5 154
#undef GL_ARB_gpu_shader_fp64
#define GL_ARB_gpu_shader_fp64 155
#undef GL_ARB_gpu_shader_int64
#define GL_ARB_gpu_shader_int64 156
#undef GL_ARB_half_float_pixel
#define GL_ARB_half_float_pixel 157
#undef GL_ARB_half_float_vertex
#define GL_ARB_half_float_vertex 158
#undef GL_ARB_imaging
#define GL_ARB_imaging 159
#undef GL_ARB_indirect_parameters
#define GL_ARB_indirect_parameters 160
#undef GL_ARB_instanced_arrays
#define GL_ARB_instanced_arrays 161
#undef GL_ARB_internalformat_query
#define GL_ARB_internalformat_query 162
#undef GL_ARB_internalformat_query2
#define GL_ARB_internalformat_query2 163
#undef GL_ARB_invalidate_subdata
#define GL_ARB_invalidate_subdata 164
#undef GL_ARB_map_buffer_alignment
#define GL_ARB_map_buffer_alignment 165
#undef GL_ARB_map_buffer_range
#define GL_ARB_map_buffer_range 166
#undef GL_ARB_matrix_palette
#define GL_ARB_matrix_palette 167
#undef GL_ARB_multi_bind
#define GL_ARB_multi_bind 168
#undef GL_ARB_multi_draw_indirect
#define GL_ARB_multi_draw_indirect 169
#undef GL_ARB_multisample
#define GL_ARB_multisample 170
#undef GL_ARB_multitexture
#define GL_ARB_multitexture 171
#undef GL_ARB_occlusion_query
#define GL_ARB_occlusion_query 172
#undef GL_ARB_occlusion_query2
#define GL_ARB_occlusion_query2 173
#undef GL_ARB_parallel_shader_compile
#define GL_ARB_parallel_shader_compile 174
#undef GL_ARB_pipeline_statistics_query
#define GL_ARB_pipeline_statistics_query 175
#undef GL_ARB_pixel_buffer_object
#define GL_ARB_pixel_buffer_object 176
#undef GL_ARB_point_parameters
#define GL_ARB_point_parameters 177
#undef GL_ARB_point_sprite
#define GL_ARB_point_sprite 178
#undef GL_ARB_polygon_offset_clamp
#define GL_ARB_polygon_offset_clamp 179
#undef GL_ARB_post_depth_coverage
#define GL_ARB_post_depth_coverage 180
#undef GL_ARB_program_interface_query
#define GL_ARB_program_interface_query 181
#undef GL_ARB_provoking_vertex
#define GL_ARB_provoking_vertex 182
#undef GL_ARB_query_buffer_object
#define GL_ARB_query_buffer_object 183
#undef GL_ARB_robust_buffer_access_behavior
#define GL_ARB_robust_buffer_access_behavior 184
#undef GL_ARB_robustness
#define GL_ARB_robustness 185
#undef GL_ARB_robustness_isolation
#define GL_ARB_robustness_isolation 186
#undef GL_ARB_sample_locations
#define GL_ARB_sample_locations 187
#undef GL_ARB_sample_shading
#define GL_ARB_sample_shading 188
#undef GL_ARB_sampler_objects
#define GL_ARB_sampler_objects 189
#undef GL_ARB_seamless_cube_map
#define GL_ARB_seamless_cube_map 190
#undef GL_ARB_seamless_cubemap_per_texture
#define GL_ARB_seamless_cubemap_per_texture 191
#undef GL_ARB_separate_shader_objects
#define GL_ARB_separate_shader_objects 192
#undef GL_ARB_shader_atomic_counter_ops
#define GL_ARB_shader_atomic_counter_ops 193
#undef GL_ARB_shader_atomic_counters
#define GL_ARB_shader_atomic_counters 194
#undef GL_ARB_shader_ballot
#define GL_ARB_shader_ballot 195
#undef GL_ARB_shader_bit_encoding
#define GL_ARB_shader_bit_encoding 196
#undef GL_ARB_shader_clock
#define GL_ARB_shader_clock 197
#undef GL_ARB_shader_draw_parameters
#define GL_ARB_shader_draw_parameters 198
#undef GL_ARB_shader_group_vote
#define GL_ARB_shader_group_vote 199
#undef GL_ARB_shader_image_load_store
#define GL_ARB_shader_image_load_store 200
#undef GL_ARB_shader_image_size
#define GL_ARB_shader_image_size 201
#undef GL_ARB_shader_objects
#define GL_ARB_shader_objects 202
#undef GL_ARB_shader_precision
#define GL_ARB_shader_precision 203
#undef GL_ARB_shader_stencil_export
#define GL_ARB_shader_stencil_export 204
#undef GL_ARB_shader_storage_buffer_object
#define GL_ARB_shader_storage_buffer_object 205
#undef GL_ARB_shader_subroutine
#define GL_ARB_shader_subroutine 206
#undef GL_ARB_shader_texture_image_samples
#define GL_ARB_shader_texture_image_samples 207
#undef GL_ARB_shader_texture_lod
#define GL_ARB_shader_texture_lod 208
#undef GL_ARB_shader_viewport_layer_array
#define GL_ARB_shader_viewport_layer_array 209
#undef GL_ARB_shading_language_100
#define GL_ARB_shading_language_100 210
#undef GL_ARB_shading_language_420pack
#define GL_ARB_shading_language_420pack 211
#undef GL_ARB_shading_language_include
#define GL_ARB_shading_language_include 212
#undef GL_ARB_shading_language_packing
#define GL_ARB_shading_language_packing 213
#undef GL_ARB_shadow
#define GL_ARB_shadow 214
#undef GL_ARB_shadow_ambient
#define GL_ARB_shadow_ambient 215
#undef GL_ARB_sparse_buffer
#define GL_ARB_sparse_buffer 216
#undef GL_ARB_sparse_texture
#define GL_ARB_sparse_texture 217
#undef GL_ARB_sparse_texture2
#define GL_ARB_sparse_texture2 218
#undef GL_ARB_sparse_texture_clamp
#define GL_ARB_sparse_texture_clamp 219
#undef GL_ARB_spirv_extensions
#define GL_ARB_spirv_extensions 220
#undef GL_ARB_stencil_texturing
#define GL_ARB_stencil_texturing 221
#undef GL_ARB_sync
#define GL_ARB_sync 222
#undef GL_ARB_tessellation_shader
#define GL_ARB_tessellation_shader 223
#undef GL_ARB_texture_barrier
#define GL_ARB_texture_barrier 224
#undef GL_ARB_texture_border_clamp
#define GL_ARB_texture_border_clamp 225
#undef GL_ARB_texture_buffer_object
#define GL_ARB_texture_buffer_object 226
#undef GL_ARB_texture_buffer_object_rgb32
#define GL_ARB_texture_buffer_object_rgb32 227
#undef GL_ARB_texture_buffer_range
#define GL_ARB_texture_buffer_range 228
#undef GL_ARB_texture_compression
#define GL_ARB_texture_compression 229
#undef GL_ARB_texture_compression_bptc
#define GL_ARB_texture_compression_bptc 230
#undef GL_ARB_texture_compression_rgtc
#define GL_ARB_texture_compression_rgtc 231
#undef GL_ARB_texture_cube_map
#define GL_ARB_texture_cube_map 232
#undef GL_ARB_texture_cube_map_array
#define GL_ARB_texture_cube_map_array 233
#undef GL_ARB_texture_env_add
#define GL_ARB_texture_env_add 234
#undef GL_ARB_texture_env_combine
#define GL_ARB_texture_env_combine 235
#undef GL_ARB_texture_env_crossbar
#define GL_ARB_texture_env_crossbar 236
#undef GL_ARB_texture_env_dot3
#define GL_ARB_texture_env_dot3 237
#undef GL_ARB_texture_filter_anisotropic
#define GL_ARB_texture_filter_anisotropic 238
#undef GL_ARB_texture_filter_minmax
#define GL_ARB_texture_filter_minmax 239
#undef GL_ARB_texture_float
#define GL_ARB_texture_float 240
#undef GL_ARB_texture_gather
#define GL_ARB_texture_gather 241
#undef GL_ARB_texture_mirror_clamp_to_edge
#define GL_ARB_texture_mirror_clamp_to_edge 242
#undef GL_ARB_texture_mirrored_repeat
#define GL_ARB_texture_mirrored_repeat 243
#undef GL_ARB_texture_multisample
#define GL_ARB_texture_multisample 244
#undef GL_ARB_texture_non_power_of_two
#define GL_ARB_texture_non_power_of_two 245
#undef GL_ARB_texture_query_levels
#define GL_ARB_texture_query_levels 246
#undef GL_ARB_texture_query_lod
#define GL_ARB_texture_query_lod 247
#undef GL_ARB_texture_rectangle
#define GL_ARB_texture_rectangle 248
#undef GL_ARB_texture_rg
#define GL_ARB_texture_rg 249
#undef GL_ARB_texture_rgb10_a2ui
#define GL_ARB_texture_rgb10_a2ui 250
#undef GL_ARB_texture_stencil8
#define GL_ARB_texture_stencil8 251
#undef GL_ARB_texture_storage
#define GL_ARB_texture_storage 252
#undef GL_ARB_texture_storage_multisample
#define GL_ARB_texture_storage_multisample 253
#undef GL_ARB_texture_swizzle
#define GL_ARB_texture_swizzle 254
#undef GL_ARB_texture_view
#define GL_ARB_texture_view 255
#undef GL_ARB_timer_query
#define GL_ARB_timer_query 256
#undef GL_ARB_transform_feedback2
#define GL_ARB_transform_feedback2 257
#undef GL_ARB_transform_feedback3
#define GL_ARB_transform_feedback3 258
#undef GL_ARB_transform_feedback_instanced
#define GL_ARB_transform_feedback_instanced 259
#undef GL_ARB_transform_feedback_overflow_query
#define GL_ARB_transform_feedback_overflow_query 260
#undef GL_ARB_transpose_matrix
#define GL_ARB_transpose_matrix 261
#undef GL_ARB_uniform_buffer_object
#define GL_ARB_uniform_buffer_object 262
#undef GL_ARB_vertex_array_bgra
#define GL_ARB_vertex_array_bgra 263
#undef GL_ARB_vertex_array_object
#define GL_ARB_vertex_array_object 264
#undef GL_ARB_vertex_attrib_64bit
#define GL_ARB_vertex_attrib_64bit 265
#undef GL_ARB_vertex_attrib_binding
#define GL_ARB_vertex_attrib_binding 266
#undef GL_ARB_vertex_blend
#define GL_ARB_vertex_blend 267
#undef GL_ARB_vertex_buffer_object
#define GL_ARB_vertex_buffer_object 268
#undef GL_ARB_vertex_program
#define GL_ARB_vertex_program 269
#undef GL_ARB_vertex_shader
#define GL_ARB_vertex_shader 270
#undef GL_ARB_vertex_type_10f_11f_11f_rev
#define GL_ARB_vertex_type_10f_11f_11f_rev 271
#undef GL_ARB_vertex_type_2_10_10_10_rev
#define GL_ARB_vertex_type_2_10_10_10_rev 272
#undef GL_ARB_viewport_array
#define GL_ARB_viewport_array 273
#undef GL_ARB_window_pos
#define GL_ARB_window_pos 274
#undef GL_ARM_mali_program_binary
#define GL_ARM_mali_program_binary 275
#undef GL_ARM_mali_shader_binary
#define GL_ARM_mali_shader_binary 276
#undef GL_ARM_rgba8
#define GL_ARM_rgba8 277
#undef GL_ARM_shader_framebuffer_fetch
#define GL_ARM_shader_framebuffer_fetch 278
#undef GL_ARM_shader_framebuffer_fetch_depth_stencil
#define GL_ARM_shader_framebuffer_fetch_depth_stencil 279
#undef GL_ATI_draw_buffers
#define GL_ATI_draw_buffers 280
#undef GL_ATI_element_array
#define GL_ATI_element_array 281
#undef GL_ATI_envmap_bumpmap
#define GL_ATI_envmap_bumpmap 282
#undef GL_ATI_fragment_shader
#define GL_ATI_fragment_shader 283
#undef GL_ATI_map_object_buffer
#define GL_ATI_map_object_buffer 284
#undef GL_ATI_meminfo
#define GL_ATI_meminfo 285
#undef GL_ATI_pixel_format_float
#define GL_ATI_pixel_format_float 286
#undef GL_ATI_pn_triangles
#define GL_ATI_pn_triangles 287
#undef GL_ATI_separate_stencil
#define GL_ATI_separate_stencil 288
#undef GL_ATI_text_fragment_shader
#define GL_ATI_text_fragment_shader 289
#undef GL_ATI_texture_env_combine3
#define GL_ATI_texture_env_combine3 290
#undef GL_ATI_texture_float
#define GL_ATI_texture_float 291
#undef GL_ATI_texture_mirror_once
#define GL_ATI_texture_mirror_once 292
#undef GL_ATI_vertex_array_object
#define GL_ATI_vertex_array_object 293
#undef GL_ATI_vertex_attrib_array_object
#define GL_ATI_vertex_attrib_array_object 294
#undef GL_ATI_vertex_streams
#define GL_ATI_vertex_streams 295
#undef GL_DMP_program_binary
#define GL_DMP_program_binary 296
#undef GL_DMP_shader_binary
#define GL_DMP_shader_binary 297
#undef GL_EXT_422_pixels
#define GL_EXT_422_pixels 298
#undef GL_EXT_EGL_image_array
#define GL_EXT_EGL_image_array 299
#undef GL_EXT_EGL_image_storage
#define GL_EXT_EGL_image_storage 300
#undef GL_EXT_YUV_target
#define GL_EXT_YUV_target 301
#undef GL_EXT_abgr
#define GL_EXT_abgr 302
#undef GL_EXT_base_instance
#define GL_EXT_base_instance 303
#undef GL_EXT_bgra
#define GL_EXT_bgra 304
#undef GL_EXT_bindable_uniform
#define GL_EXT_bindable_uniform 305
#undef GL_EXT_blend_color
#define GL_EXT_blend_color 306
#undef GL_EXT_blend_equation_separate
#define GL_EXT_blend_equation_separate 307
#undef GL_EXT_blend_func_extended
#define GL_EXT_blend_func_extended 308
#undef GL_EXT_blend_func_separate
#define GL_EXT_blend_func_separate 309
#undef GL_EXT_blend_logic_op
#define GL_EXT_blend_logic_op 310
#undef GL_EXT_blend_minmax
#define GL_EXT_blend_minmax 311
#undef GL_EXT_blend_subtract
#define GL_EXT_blend_subtract 312
#undef GL_EXT_buffer_storage
#define GL_EXT_buffer_storage 313
#undef GL_EXT_clear_texture
#define GL_EXT_clear_texture 314
#undef GL_EXT_clip_control
#define GL_EXT_clip_control 315
#undef GL_EXT_clip_cull_distance
#define GL_EXT_clip_cull_distance 316
#undef GL_EXT_clip_volume_hint
#define GL_EXT_clip_volume_hint 317
#undef GL_EXT_cmyka
#define GL_EXT_cmyka 318
#undef GL_EXT_color_buffer_float
#define GL_EXT_color_buffer_float 319
#undef GL_EXT_color_buffer_half_float
#define GL_EXT_color_buffer_half_float 320
#undef GL_EXT_color_subtable
#define GL_EXT_color_subtable 321
#undef GL_EXT_compiled_vertex_array
#define GL_EXT_compiled_vertex_array 322
#undef GL_EXT_conservative_depth
#define GL_EXT_conservative_depth 323
#undef GL_EXT_convolution
#define GL_EXT_convolution 324
#undef GL_EXT_coordinate_frame
#define GL_EXT_coordinate_frame 325
#undef GL_EXT_copy_image
#define GL_EXT_copy_image 326
#undef GL_EXT_copy_texture
#define GL_EXT_copy_texture 327
#undef GL_EXT_cull_vertex
#define GL_EXT_cull_vertex 328
#undef GL_EXT_debug_label
#define GL_EXT_debug_label 329
#undef GL_EXT_debug_marker
#define GL_EXT_debug_marker 330
#undef GL_EXT_depth_bounds_test
#define GL_EXT_depth_bounds_test 331
#undef GL_EXT_direct_state_access
#define GL_EXT_direct_state_access 332
#undef GL_EXT_discard_framebuffer
#define GL_EXT_discard_framebuffer 333
#undef GL_EXT_disjoint_timer_query
#define GL_EXT_disjoint_timer_query 334
#undef GL_EXT_draw_buffers
#define GL_EXT_draw_buffers 335
#undef GL_EXT_draw_buffers2
#define GL_EXT_draw_buffers2 336
#undef GL_EXT_draw_buffers_indexed
#define GL_EXT_draw_buffers_indexed 337
#undef GL_EXT_draw_elements_base_vertex
#define GL_EXT_draw_elements_base_vertex 338
#undef GL_EXT_draw_instanced
#define GL_EXT_draw_instanced 339
#undef GL_EXT_draw_range_elements
#define GL_EXT_draw_range_elements 340
#undef GL_EXT_draw_transform_feedback
#define GL_EXT_draw_transform_feedback 341
#undef GL_EXT_external_buffer
#define GL_EXT_external_buffer 342
#undef GL_EXT_float_blend
#define GL_EXT_float_blend 343
#undef GL_EXT_fog_coord
#define GL_EXT_fog_coord 344
#undef GL_EXT_framebuffer_blit
#define GL_EXT_framebuffer_blit 345
#undef GL_EXT_framebuffer_multisample
#define GL_EXT_framebuffer_multisample 346
#undef GL_EXT_framebuffer_multisample_blit_scaled
#define GL_EXT_framebuffer_multisample_blit_scaled 347
#undef GL_EXT_framebuffer_object
#define GL_EXT_framebuffer_object 348
#undef GL_EXT_framebuffer_sRGB
#define GL_EXT_framebuffer_sRGB 349
#undef GL_EXT_geometry_point_size
#define GL_EXT_geometry_point_size 350
#undef GL_EXT_geometry_shader
#define GL_EXT_geometry_shader 351
#undef GL_EXT_geometry_shader4
#define GL_EXT_geometry_shader4 352
#undef GL_EXT_gpu_program_parameters
#define GL_EXT_gpu_program_parameters 353
#undef GL_EXT_gpu_shader4
#define GL_EXT_gpu_shader4 354
#undef GL_EXT_gpu_shader5
#define GL_EXT_gpu_shader5 355
#undef GL_EXT_histogram
#define GL_EXT_histogram 356
#undef GL_EXT_index_array_formats
#define GL_EXT_index_array_formats 357
#undef GL_EXT_index_func
#define GL_EXT_index_func 358
#undef GL_EXT_index_material
#define GL_EXT_index_material 359
#undef GL_EXT_index_texture
#define GL_EXT_index_texture 360
#undef GL_EXT_instanced_arrays
#define GL_EXT_instanced_arrays 361
#undef GL_EXT_light_texture
#define GL_EXT_light_texture 362
#undef GL_EXT_map_buffer_range
#define GL_EXT_map_buffer_range 363
#undef GL_EXT_memory_object
#define GL_EXT_memory_object 364
#undef GL_EXT_memory_object_fd
#define GL_EXT_memory_object_fd 365
#undef GL_EXT_memory_object_win32
#define GL_EXT_memory_object_win32 366
#undef GL_EXT_misc_attribute
#define GL_EXT_misc_attribute 367
#undef GL_EXT_multi_draw_arrays
#define GL_EXT_multi_draw_arrays 368
#undef GL_EXT_multi_draw_indirect
#define GL_EXT_multi_draw_indirect 369
#undef GL_EXT_multisample
#define GL_EXT_multisample 370
#undef GL_EXT_multisampled_compatibility
#define GL_EXT_multisampled_compatibility 371
#undef GL_EXT_multisampled_render_to_texture
#define GL_EXT_multisampled_render_to_texture 372
#undef GL_EXT_multiview_draw_buffers
#define GL_EXT_multiview_draw_buffers 373
#undef GL_EXT_occlusion_query_boolean
#define GL_EXT_occlusion_query_boolean 374
#undef GL_EXT_packed_depth_stencil
#define GL_EXT_packed_depth_stencil 375
#undef GL_EXT_packed_float
#define GL_EXT_packed_float 376
#undef GL_EXT_packed_pixels
#define GL_EXT_packed_pixels 377
#undef GL_EXT_paletted_texture
#define GL_EXT_paletted_texture 378
#undef GL_EXT_pixel_buffer_object
#define GL_EXT_pixel_buffer_object 379
#undef GL_EXT_pixel_transform
#define GL_EXT_pixel_transform 380
#undef GL_EXT_pixel_transform_color_table
#define GL_EXT_pixel_transform_color_table 381
#undef GL_EXT_point_parameters
#define GL_EXT_point_parameters 382
#undef GL_EXT_polygon_offset
#define GL_EXT_polygon_offset 383
#undef GL_EXT_polygon_offset_clamp
#define GL_EXT_polygon_offset_clamp 384
#undef GL_EXT_post_depth_coverage
#define GL_EXT_post_depth_coverage 385
#undef GL_EXT_primitive_bounding_box
#define GL_EXT_primitive_bounding_box 386
#undef GL_EXT_protected_textures
#define GL_EXT_protected_textures 387
#undef GL_EXT_provoking_vertex
#define GL_EXT_provoking_vertex 388
#undef GL_EXT_pvrtc_sRGB
#define GL_EXT_pvrtc_sRGB 389
#undef GL_EXT_raster_multisample
#define GL_EXT_raster_multisample 390
#undef GL_EXT_read_format_bgra
#define GL_EXT_read_format_bgra 391
#undef GL_EXT_render_snorm
#define GL_EXT_render_snorm 392
#undef GL_EXT_rescale_normal
#define GL_EXT_rescale_normal 393
#undef GL_EXT_robustness
#define GL_EXT_robustness 394
#undef GL_EXT_semaphore
#define GL_EXT_semaphore 395
#undef GL_EXT_semaphore_fd
#define GL_EXT_semaphore_fd 396
#undef GL_EXT_semaphore_win32
#define GL_EXT_semaphore_win32 397
#undef GL_EXT_sRGB
#define GL_EXT_sRGB 398
#undef GL_EXT_sRGB_write_control
#define GL_EXT_sRGB_write_control 399
#undef GL_EXT_secondary_color
#define GL_EXT_secondary_color 400
#undef GL_EXT_separate_shader_objects
#define GL_EXT_separate_shader_objects 401
#undef GL_EXT_separate_specular_color
#define GL_EXT_separate_specular_color 402
#undef GL_EXT_shader_framebuffer_fetch
#define GL_EXT_shader_framebuffer_fetch 403
#undef GL_EXT_shader_framebuffer_fetch_non_coherent
#define GL_EXT_shader_framebuffer_fetch_non_coherent 404
#undef GL_EXT_shader_group_vote
#define GL_EXT_shader_group_vote 405
#undef GL_EXT_shader_image_load_formatted
#define GL_EXT_shader_image_load_formatted 406
#undef GL_EXT_shader_image_load_store
#define GL_EXT_shader_image_load_store 407
#undef GL_EXT_shader_implicit_conversions
#define GL_EXT_shader_implicit_conversions 408
#undef GL_EXT_shader_integer_mix
#define GL_EXT_shader_integer_mix 409
#undef GL_EXT_shader_io_blocks
#define GL_EXT_shader_io_blocks 410
#undef GL_EXT_shader_non_constant_global_initializers
#define GL_EXT_shader_non_constant_global_initializers 411
#undef GL_EXT_shader_pixel_local_storage
#define GL_EXT_shader_pixel_local_storage 412
#undef GL_EXT_shader_pixel_local_storage2
#define GL_EXT_shader_pixel_local_storage2 413
#undef GL_EXT_shader_texture_lod
#define GL_EXT_shader_texture_lod 414
#undef GL_EXT_shadow_funcs
#define GL_EXT_shadow_funcs 415
#undef GL_EXT_shadow_samplers
#define GL_EXT_shadow_samplers 416
#undef GL_EXT_shared_texture_palette
#define GL_EXT_shared_texture_palette 417
#undef GL_EXT_sparse_texture
#define GL_EXT_sparse_texture 418
#undef GL_EXT_sparse_texture2
#define GL_EXT_sparse_texture2 419
#undef GL_EXT_stencil_clear_tag
#define GL_EXT_stencil_clear_tag 420
#undef GL_EXT_stencil_two_side
#define GL_EXT_stencil_two_side 421
#undef GL_EXT_stencil_wrap
#define GL_EXT_stencil_wrap 422
#undef GL_EXT_subtexture
#define GL_EXT_subtexture 423
#undef GL_EXT_tessellation_point_size
#define GL_EXT_tessellation_point_size 424
#undef GL_EXT_tessellation_shader
#define GL_EXT_tessellation_shader 425
#undef GL_EXT_texture
#define GL_EXT_texture 426
#undef GL_EXT_texture3D
#define GL_EXT_texture3D 427
#undef GL_EXT_texture_array
#define GL_EXT_texture_array 428
#undef GL_EXT_texture_border_clamp
#define GL_EXT_texture_border_clamp 429
#undef GL_EXT_texture_buffer
#define GL_EXT_texture_buffer 430
#undef GL_EXT_texture_buffer_object
#define GL_EXT_texture_buffer_object 431
#undef GL_EXT_texture_compression_astc_decode_mode
#define GL_EXT_texture_compression_astc_decode_mode 432
#undef GL_EXT_texture_compression_bptc
#define GL_EXT_texture_compression_bptc 433
#undef GL_EXT_texture_compression_dxt1
#define GL_EXT_texture_compression_dxt1 434
#undef GL_EXT_texture_compression_latc
#define GL_EXT_texture_compression_latc 435
#undef GL_EXT_texture_compression_rgtc
#define GL_EXT_texture_compression_rgtc 436
#undef GL_EXT_texture_compression_s3tc
#define GL_EXT_texture_compression_s3tc 437
#undef GL_EXT_texture_compression_s3tc_srgb
#define GL_EXT_texture_compression_s3tc_srgb 438
#undef GL_EXT_texture_cube_map
#define GL_EXT_texture_cube_map 439
#undef GL_EXT_texture_cube_map_array
#define GL_EXT_texture_cube_map_array 440
#undef GL_EXT_texture_env_add
#define GL_EXT_texture_env_add 441
#undef GL_EXT_texture_env_combine
#define GL_EXT_texture_env_combine 442
#undef GL_EXT_texture_env_dot3
#define GL_EXT_texture_env_dot3 443
#undef GL_EXT_texture_filter_anisotropic
#define GL_EXT_texture_filter_anisotropic 444
#undef GL_EXT_texture_filter_minmax
#define GL_EXT_texture_filter_minmax 445
#undef GL_EXT_texture_format_BGRA8888
#define GL_EXT_texture_format_BGRA8888 446
#undef GL_EXT_texture_format_sRGB_override
#define GL_EXT_texture_format_sRGB_override 447
#undef GL_EXT_texture_integer
#define GL_EXT_texture_integer 448
#undef GL_EXT_texture_lod_bias
#define GL_EXT_texture_lod_bias 449
#undef GL_EXT_texture_mirror_clamp
#define GL_EXT_texture_mirror_clamp 450
#undef GL_EXT_texture_mirror_clamp_to_edge
#define GL_EXT_texture_mirror_clamp_to_edge 451
#undef GL_EXT_texture_norm16
#define GL_EXT_texture_norm16 452
#undef GL_EXT_texture_object
#define GL_EXT_texture_object 453
#undef GL_EXT_texture_perturb_normal
#define GL_EXT_texture_perturb_normal 454
#undef GL_EXT_texture_rg
#define GL_EXT_texture_rg 455
#undef GL_EXT_texture_sRGB
#define GL_EXT_texture_sRGB 456
#undef GL_EXT_texture_sRGB_R8
#define GL_EXT_texture_sRGB_R8 457
#undef GL_EXT_texture_sRGB_RG8
#define GL_EXT_texture_sRGB_RG8 458
#undef GL_EXT_texture_sRGB_decode
#define GL_EXT_texture_sRGB_decode 459
#undef GL_EXT_texture_shared_exponent
#define GL_EXT_texture_shared_exponent 460
#undef GL_EXT_texture_snorm
#define GL_EXT_texture_snorm 461
#undef GL_EXT_texture_storage
#define GL_EXT_texture_storage 462
#undef GL_EXT_texture_swizzle
#define GL_EXT_texture_swizzle 463
#undef GL_EXT_texture_type_2_10_10_10_REV
#define GL_EXT_texture_type_2_10_10_10_REV 464
#undef GL_EXT_texture_view
#define GL_EXT_texture_view 465
#undef GL_EXT_timer_query
#define GL_EXT_timer_query 466
#undef GL_EXT_transform_feedback
#define GL_EXT_transform_feedback 467
#undef GL_EXT_unpack_subimage
#define GL_EXT_unpack_subimage 468
#undef GL_EXT_vertex_array
#define GL_EXT_vertex_array 469
#undef GL_EXT_vertex_array_bgra
#define GL_EXT_vertex_array_bgra 470
#undef GL_EXT_vertex_attrib_64bit
#define GL_EXT_vertex_attrib_64bit 471
#undef GL_EXT_vertex_shader
#define GL_EXT_vertex_shader 472
#undef GL_EXT_vertex_weighting
#define GL_EXT_vertex_weighting 473
#undef GL_EXT_win32_keyed_mutex
#define GL_EXT_win32_keyed_mutex 474
#undef GL_EXT_window_rectangles
#define GL_EXT_window_rectangles 475
#undef GL_EXT_x11_sync_object
#define GL_EXT_x11_sync_object 476
#undef GL_FJ_shader_binary_GCCSO
#define GL_FJ_shader_binary_GCCSO 477
#undef GL_GREMEDY_frame_terminator
#define GL_GREMEDY_frame_terminator 478
#undef GL_GREMEDY_string_marker
#define GL_GREMEDY_string_marker 479
#undef GL_HP_convolution_border_modes
#define GL_HP_convolution_border_modes 480
#undef GL_HP_image_transform
#define GL_HP_image_transform 481
#undef GL_HP_occlusion_test
#define GL_HP_occlusion_test 482
#undef GL_HP_texture_lighting
#define GL_HP_texture_lighting 483
#undef GL_IBM_cull_vertex
#define GL_IBM_cull_vertex 484
#undef GL_IBM_multimode_draw_arrays
#define GL_IBM_multimode_draw_arrays 485
#undef GL_IBM_rasterpos_clip
#define GL_IBM_rasterpos_clip 486
#undef GL_IBM_static_data
#define GL_IBM_static_data 487
#undef GL_IBM_texture_mirrored_repeat
#define GL_IBM_texture_mirrored_repeat 488
#undef GL_IBM_vertex_array_lists
#define GL_IBM_vertex_array_lists 489
#undef GL_IMG_bindless_texture
#define GL_IMG_bindless_texture 490
#undef GL_IMG_framebuffer_downsample
#define GL_IMG_framebuffer_downsample 491
#undef GL_IMG_multisampled_render_to_texture
#define GL_IMG_multisampled_render_to_texture 492
#undef GL_IMG_program_binary
#define GL_IMG_program_binary 493
#undef GL_IMG_read_format
#define GL_IMG_read_format 494
#undef GL_IMG_shader_binary
#define GL_IMG_shader_binary 495
#undef GL_IMG_texture_compression_pvrtc
#define GL_IMG_texture_compression_pvrtc 496
#undef GL_IMG_texture_compression_pvrtc2
#define GL_IMG_texture_compression_pvrtc2 497
#undef GL_IMG_texture_env_enhanced_fixed_function
#define GL_IMG_texture_env_enhanced_fixed_function 498
#undef GL_IMG_texture_filter_cubic
#define GL_IMG_texture_filter_cubic 499
#undef GL_IMG_user_clip_plane
#define GL_IMG_user_clip_plane 500
#undef GL_INGR_blend_func_separate
#define GL_INGR_blend_func_separate 501
#undef GL_INGR_color_clamp
#define GL_INGR_color_clamp 502
#undef GL_INGR_interlace_read
#define GL_INGR_interlace_read 503
#undef GL_INTEL_conservative_rasterization
#define GL_INTEL_conservative_rasterization 504
#undef GL_INTEL_fragment_shader_ordering
#define GL_INTEL_fragment_shader_ordering 505
#undef GL_INTEL_framebuffer_CMAA
#define GL_INTEL_framebuffer_CMAA 506
#undef GL_INTEL_map_texture
#define GL_INTEL_map_texture 507
#undef GL_INTEL_blackhole_render
#define GL_INTEL_blackhole_render 508
#undef GL_INTEL_parallel_arrays
#define GL_INTEL_parallel_arrays 509
#undef GL_INTEL_performance_query
#define GL_INTEL_performance_query 510
#undef GL_KHR_blend_equation_advanced
#define GL_KHR_blend_equation_advanced 511
#undef GL_KHR_blend_equation_advanced_coherent
#define GL_KHR_blend_equation_advanced_coherent 512
#undef GL_KHR_context_flush_control
#define GL_KHR_context_flush_control 513
#undef GL_KHR_debug
#define GL_KHR_debug 514
#undef GL_KHR_no_error
#define GL_KHR_no_error 515
#undef GL_KHR_robust_buffer_access_behavior
#define GL_KHR_robust_buffer_access_behavior 516
#undef GL_KHR_robustness
#define GL_KHR_robustness 517
#undef GL_KHR_texture_compression_astc_hdr
#define GL_KHR_texture_compression_astc_hdr 518
#undef GL_KHR_texture_compression_astc_ldr
#define GL_KHR_texture_compression_astc_ldr 519
#undef GL_KHR_texture_compression_astc_sliced_3d
#define GL_KHR_texture_compression_astc_sliced_3d 520
#undef GL_KHR_parallel_shader_compile
#define GL_KHR_parallel_shader_compile 521
#undef GL_MESAX_texture_stack
#define GL_MESAX_texture_stack 522
#undef GL_MESA_framebuffer_flip_y
#define GL_MESA_framebuffer_flip_y 523
#undef GL_MESA_pack_invert
#define GL_MESA_pack_invert 524
#undef GL_MESA_program_binary_formats
#define GL_MESA_program_binary_formats 525
#undef GL_MESA_resize_buffers
#define GL_MESA_resize_buffers 526
#undef GL_MESA_shader_integer_functions
#define GL_MESA_shader_integer_functions 527
#undef GL_MESA_tile_raster_order
#define GL_MESA_tile_raster_order 528
#undef GL_MESA_window_pos
#define GL_MESA_window_pos 529
#undef GL_MESA_ycbcr_texture
#define GL_MESA_ycbcr_texture 530
#undef GL_NVX_blend_equation_advanced_multi_draw_buffers
#define GL_NVX_blend_equation_advanced_multi_draw_buffers 531
#undef GL_NVX_cross_process_interop
#define GL_NVX_cross_process_interop 532
#undef GL_NVX_conditional_render
#define GL_NVX_conditional_render 533
#undef GL_NVX_gpu_memory_info
#define GL_NVX_gpu_memory_info 534
#undef GL_NVX_linked_gpu_multicast
#define GL_NVX_linked_gpu_multicast 535
#undef GL_NV_alpha_to_coverage_dither_control
#define GL_NV_alpha_to_coverage_dither_control 536
#undef GL_NV_bindless_multi_draw_indirect
#define GL_NV_bindless_multi_draw_indirect 537
#undef GL_NV_bindless_multi_draw_indirect_count
#define GL_NV_bindless_multi_draw_indirect_count 538
#undef GL_NV_bindless_texture
#define GL_NV_bindless_texture 539
#undef GL_NV_blend_equation_advanced
#define GL_NV_blend_equation_advanced 540
#undef GL_NV_blend_equation_advanced_coherent
#define GL_NV_blend_equation_advanced_coherent 541
#undef GL_NV_blend_minmax_factor
#define GL_NV_blend_minmax_factor 542
#undef GL_NV_blend_square
#define GL_NV_blend_square 543
#undef GL_NV_clip_space_w_scaling
#define GL_NV_clip_space_w_scaling 544
#undef GL_NV_command_list
#define GL_NV_command_list 545
#undef GL_NV_compute_program5
#define GL_NV_compute_program5 546
#undef GL_NV_compute_shader_derivatives
#define GL_NV_compute_shader_derivatives 547
#undef GL_NV_conditional_render
#define GL_NV_conditional_render 548
#undef GL_NV_conservative_raster
#define GL_NV_conservative_raster 549
#undef GL_NV_conservative_raster_dilate
#define GL_NV_conservative_raster_dilate 550
#undef GL_NV_conservative_raster_pre_snap
#define GL_NV_conservative_raster_pre_snap 551
#undef GL_NV_conservative_raster_pre_snap_triangles
#define GL_NV_conservative_raster_pre_snap_triangles 552
#undef GL_NV_conservative_raster_underestimation
#define GL_NV_conservative_raster_underestimation 553
#undef GL_NV_copy_buffer
#define GL_NV_copy_buffer 554
#undef GL_NV_copy_depth_to_color
#define GL_NV_copy_depth_to_color 555
#undef GL_NV_copy_image
#define GL_NV_copy_image 556
#undef GL_NV_coverage_sample
#define GL_NV_coverage_sample 557
#undef GL_NV_deep_texture3D
#define GL_NV_deep_texture3D 558
#undef GL_NV_depth_buffer_float
#define GL_NV_depth_buffer_float 559
#undef GL_NV_depth_clamp
#define GL_NV_depth_clamp 560
#undef GL_NV_depth_nonlinear
#define GL_NV_depth_nonlinear 561
#undef GL_NV_draw_buffers
#define GL_NV_draw_buffers 562
#undef GL_NV_draw_instanced
#define GL_NV_draw_instanced 563
#undef GL_NV_draw_texture
#define GL_NV_draw_texture 564
#undef GL_NV_draw_vulkan_image
#define GL_NV_draw_vulkan_image 565
#undef GL_NV_evaluators
#define GL_NV_evaluators 566
#undef GL_NV_explicit_attrib_location
#define GL_NV_explicit_attrib_location 567
#undef GL_NV_explicit_multisample
#define GL_NV_explicit_multisample 568
#undef GL_NV_fbo_color_attachments
#define GL_NV_fbo_color_attachments 569
#undef GL_NV_fence
#define GL_NV_fence 570
#undef GL_NV_fill_rectangle
#define GL_NV_fill_rectangle 571
#undef GL_NV_float_buffer
#define GL_NV_float_buffer 572
#undef GL_NV_fog_distance
#define GL_NV_fog_distance 573
#undef GL_NV_fragment_coverage_to_color
#define GL_NV_fragment_coverage_to_color 574
#undef GL_NV_fragment_program
#define GL_NV_fragment_program 575
#undef GL_NV_fragment_program2
#define GL_NV_fragment_program2 576
#undef GL_NV_fragment_program4
#define GL_NV_fragment_program4 577
#undef GL_NV_fragment_program_option
#define GL_NV_fragment_program_option 578
#undef GL_NV_fragment_shader_barycentric
#define GL_NV_fragment_shader_barycentric 579
#undef GL_NV_fragment_shader_interlock
#define GL_NV_fragment_shader_interlock 580
#undef GL_NV_framebuffer_blit
#define GL_NV_framebuffer_blit 581
#undef GL_NV_framebuffer_mixed_samples
#define GL_NV_framebuffer_mixed_samples 582
#undef GL_NV_framebuffer_multisample
#define GL_NV_framebuffer_multisample 583
#undef GL_NV_framebuffer_multisample_coverage
#define GL_NV_framebuffer_multisample_coverage 584
#undef GL_NV_generate_mipmap_sRGB
#define GL_NV_generate_mipmap_sRGB 585
#undef GL_NV_geometry_program4
#define GL_NV_geometry_program4 586
#undef GL_NV_geometry_shader4
#define GL_NV_geometry_shader4 587
#undef GL_NV_geometry_shader_passthrough
#define GL_NV_geometry_shader_passthrough 588
#undef GL_NV_gpu_program4
#define GL_NV_gpu_program4 589
#undef GL_NV_gpu_program5
#define GL_NV_gpu_program5 590
#undef GL_NV_gpu_program5_mem_extended
#define GL_NV_gpu_program5_mem_extended 591
#undef GL_NV_gpu_shader5
#define GL_NV_gpu_shader5 592
#undef GL_NV_half_float
#define GL_NV_half_float 593
#undef GL_NV_image_formats
#define GL_NV_image_formats 594
#undef GL_NV_instanced_arrays
#define GL_NV_instanced_arrays 595
#undef GL_NV_internalformat_sample_query
#define GL_NV_internalformat_sample_query 596
#undef GL_NV_light_max_exponent
#define GL_NV_light_max_exponent 597
#undef GL_NV_gpu_multicast
#define GL_NV_gpu_multicast 598
#undef GL_NV_memory_attachment
#define GL_NV_memory_attachment 599
#undef GL_NV_mesh_shader
#define GL_NV_mesh_shader 600
#undef GL_NV_multisample_coverage
#define GL_NV_multisample_coverage 601
#undef GL_NV_multisample_filter_hint
#define GL_NV_multisample_filter_hint 602
#undef GL_NV_non_square_matrices
#define GL_NV_non_square_matrices 603
#undef GL_NV_occlusion_query
#define GL_NV_occlusion_query 604
#undef GL_NV_packed_depth_stencil
#define GL_NV_packed_depth_stencil 605
#undef GL_NV_parameter_buffer_object
#define GL_NV_parameter_buffer_object 606
#undef GL_NV_parameter_buffer_object2
#define GL_NV_parameter_buffer_object2 607
#undef GL_NV_path_rendering
#define GL_NV_path_rendering 608
#undef GL_NV_path_rendering_shared_edge
#define GL_NV_path_rendering_shared_edge 609
#undef GL_NV_pixel_data_range
#define GL_NV_pixel_data_range 610
#undef GL_NV_pixel_buffer_object
#define GL_NV_pixel_buffer_object 611
#undef GL_NV_point_sprite
#define GL_NV_point_sprite 612
#undef GL_NV_polygon_mode
#define GL_NV_polygon_mode 613
#undef GL_NV_present_video
#define GL_NV_present_video 614
#undef GL_NV_primitive_restart
#define GL_NV_primitive_restart 615
#undef GL_NV_query_resource
#define GL_NV_query_resource 616
#undef GL_NV_query_resource_tag
#define GL_NV_query_resource_tag 617
#undef GL_NV_read_buffer
#define GL_NV_read_buffer 618
#undef GL_NV_read_buffer_front
#define GL_NV_read_buffer_front 619
#undef GL_NV_read_depth
#define GL_NV_read_depth 620
#undef GL_NV_read_depth_stencil
#define GL_NV_read_depth_stencil 621
#undef GL_NV_read_stencil
#define GL_NV_read_stencil 622
#undef GL_NV_register_combiners
#define GL_NV_register_combiners 623
#undef GL_NV_register_combiners2
#define GL_NV_register_combiners2 624
#undef GL_NV_representative_fragment_test
#define GL_NV_representative_fragment_test 625
#undef GL_NV_robustness_video_memory_purge
#define GL_NV_robustness_video_memory_purge 626
#undef GL_NV_sRGB_formats
#define GL_NV_sRGB_formats 627
#undef GL_NV_sample_locations
#define GL_NV_sample_locations 628
#undef GL_NV_sample_mask_override_coverage
#define GL_NV_sample_mask_override_coverage 629
#undef GL_NV_scissor_exclusive
#define GL_NV_scissor_exclusive 630
#undef GL_NV_shader_atomic_counters
#define GL_NV_shader_atomic_counters 631
#undef GL_NV_shader_atomic_float
#define GL_NV_shader_atomic_float 632
#undef GL_NV_shader_atomic_float64
#define GL_NV_shader_atomic_float64 633
#undef GL_NV_shader_atomic_fp16_vector
#define GL_NV_shader_atomic_fp16_vector 634
#undef GL_NV_shader_atomic_int64
#define GL_NV_shader_atomic_int64 635
#undef GL_NV_shader_buffer_load
#define GL_NV_shader_buffer_load 636
#undef GL_NV_shader_buffer_store
#define GL_NV_shader_buffer_store 637
#undef GL_NV_shader_noperspective_interpolation
#define GL_NV_shader_noperspective_interpolation 638
#undef GL_NV_shader_storage_buffer_object
#define GL_NV_shader_storage_buffer_object 639
#undef GL_NV_shader_texture_footprint
#define GL_NV_shader_texture_footprint 640
#undef GL_NV_shader_thread_group
#define GL_NV_shader_thread_group 641
#undef GL_NV_shader_thread_shuffle
#define GL_NV_shader_thread_shuffle 642
#undef GL_NV_shading_rate_image
#define GL_NV_shading_rate_image 643
#undef GL_NV_shadow_samplers_array
#define GL_NV_shadow_samplers_array 644
#undef GL_NV_shadow_samplers_cube
#define GL_NV_shadow_samplers_cube 645
#undef GL_NV_stereo_view_rendering
#define GL_NV_stereo_view_rendering 646
#undef GL_NV_tessellation_program5
#define GL_NV_tessellation_program5 647
#undef GL_NV_texgen_emboss
#define GL_NV_texgen_emboss 648
#undef GL_NV_texgen_reflection
#define GL_NV_texgen_reflection 649
#undef GL_NV_texture_barrier
#define GL_NV_texture_barrier 650
#undef GL_NV_texture_border_clamp
#define GL_NV_texture_border_clamp 651
#undef GL_NV_texture_compression_s3tc_update
#define GL_NV_texture_compression_s3tc_update 652
#undef GL_NV_texture_compression_vtc
#define GL_NV_texture_compression_vtc 653
#undef GL_NV_texture_env_combine4
#define GL_NV_texture_env_combine4 654
#undef GL_NV_texture_expand_normal
#define GL_NV_texture_expand_normal 655
#undef GL_NV_texture_multisample
#define GL_NV_texture_multisample 656
#undef GL_NV_texture_npot_2D_mipmap
#define GL_NV_texture_npot_2D_mipmap 657
#undef GL_NV_texture_rectangle
#define GL_NV_texture_rectangle 658
#undef GL_NV_texture_rectangle_compressed
#define GL_NV_texture_rectangle_compressed 659
#undef GL_NV_texture_shader
#define GL_NV_texture_shader 660
#undef GL_NV_texture_shader2
#define GL_NV_texture_shader2 661
#undef GL_NV_texture_shader3
#define GL_NV_texture_shader3 662
#undef GL_NV_transform_feedback
#define GL_NV_transform_feedback 663
#undef GL_NV_transform_feedback2
#define GL_NV_transform_feedback2 664
#undef GL_NV_uniform_buffer_unified_memory
#define GL_NV_uniform_buffer_unified_memory 665
#undef GL_NV_vdpau_interop
#define GL_NV_vdpau_interop 666
#undef GL_NV_vertex_array_range
#define GL_NV_vertex_array_range 667
#undef GL_NV_vertex_array_range2
#define GL_NV_vertex_array_range2 668
#undef GL_NV_vertex_attrib_integer_64bit
#define GL_NV_vertex_attrib_integer_64bit 669
#undef GL_NV_vertex_buffer_unified_memory
#define GL_NV_vertex_buffer_unified_memory 670
#undef GL_NV_vertex_program
#define GL_NV_vertex_program 671
#undef GL_NV_vertex_program1_1
#define GL_NV_vertex_program1_1 672
#undef GL_NV_vertex_program2
#define GL_NV_vertex_program2 673
#undef GL_NV_vertex_program2_option
#define GL_NV_vertex_program2_option 674
#undef GL_NV_vertex_program3
#define GL_NV_vertex_program3 675
#undef GL_NV_vertex_program4
#define GL_NV_vertex_program4 676
#undef GL_NV_video_capture
#define GL_NV_video_capture 677
#undef GL_NV_viewport_array
#define GL_NV_viewport_array 678
#undef GL_NV_viewport_array2
#define GL_NV_viewport_array2 679
#undef GL_NV_viewport_swizzle
#define GL_NV_viewport_swizzle 680
#undef GL_OES_EGL_image
#define GL_OES_EGL_image 681
#undef GL_OES_EGL_image_external
#define GL_OES_EGL_image_external 682
#undef GL_OES_EGL_image_external_essl3
#define GL_OES_EGL_image_external_essl3 683
#undef GL_OES_blend_equation_separate
#define GL_OES_blend_equation_separate 684
#undef GL_OES_blend_func_separate
#define GL_OES_blend_func_separate 685
#undef GL_OES_blend_subtract
#define GL_OES_blend_subtract 686
#undef GL_OES_byte_coordinates
#define GL_OES_byte_coordinates 687
#undef GL_OES_compressed_ETC1_RGB8_sub_texture
#define GL_OES_compressed_ETC1_RGB8_sub_texture 688
#undef GL_OES_compressed_ETC1_RGB8_texture
#define GL_OES_compressed_ETC1_RGB8_texture 689
#undef GL_OES_compressed_paletted_texture
#define GL_OES_compressed_paletted_texture 690
#undef GL_OES_copy_image
#define GL_OES_copy_image 691
#undef GL_OES_depth24
#define GL_OES_depth24 692
#undef GL_OES_depth32
#define GL_OES_depth32 693
#undef GL_OES_depth_texture
#define GL_OES_depth_texture 694
#undef GL_OES_draw_buffers_indexed
#define GL_OES_draw_buffers_indexed 695
#undef GL_OES_draw_elements_base_vertex
#define GL_OES_draw_elements_base_vertex 696
#undef GL_OES_draw_texture
#define GL_OES_draw_texture 697
#undef GL_OES_element_index_uint
#define GL_OES_element_index_uint 698
#undef GL_OES_extended_matrix_palette
#define GL_OES_extended_matrix_palette 699
#undef GL_OES_fbo_render_mipmap
#define GL_OES_fbo_render_mipmap 700
#undef GL_OES_fixed_point
#define GL_OES_fixed_point 701
#undef GL_OES_fragment_precision_high
#define GL_OES_fragment_precision_high 702
#undef GL_OES_framebuffer_object
#define GL_OES_framebuffer_object 703
#undef GL_OES_geometry_point_size
#define GL_OES_geometry_point_size 704
#undef GL_OES_geometry_shader
#define GL_OES_geometry_shader 705
#undef GL_OES_get_program_binary
#define GL_OES_get_program_binary 706
#undef GL_OES_gpu_shader5
#define GL_OES_gpu_shader5 707
#undef GL_OES_mapbuffer
#define GL_OES_mapbuffer 708
#undef GL_OES_matrix_get
#define GL_OES_matrix_get 709
#undef GL_OES_matrix_palette
#define GL_OES_matrix_palette 710
#undef GL_OES_packed_depth_stencil
#define GL_OES_packed_depth_stencil 711
#undef GL_OES_point_size_array
#define GL_OES_point_size_array 712
#undef GL_OES_point_sprite
#define GL_OES_point_sprite 713
#undef GL_OES_primitive_bounding_box
#define GL_OES_primitive_bounding_box 714
#undef GL_OES_query_matrix
#define GL_OES_query_matrix 715
#undef GL_OES_read_format
#define GL_OES_read_format 716
#undef GL_OES_required_internalformat
#define GL_OES_required_internalformat 717
#undef GL_OES_rgb8_rgba8
#define GL_OES_rgb8_rgba8 718
#undef GL_OES_sample_shading
#define GL_OES_sample_shading 719
#undef GL_OES_sample_variables
#define GL_OES_sample_variables 720
#undef GL_OES_shader_image_atomic
#define GL_OES_shader_image_atomic 721
#undef GL_OES_shader_io_blocks
#define GL_OES_shader_io_blocks 722
#undef GL_OES_shader_multisample_interpolation
#define GL_OES_shader_multisample_interpolation 723
#undef GL_OES_single_precision
#define GL_OES_single_precision 724
#undef GL_OES_standard_derivatives
#define GL_OES_standard_derivatives 725
#undef GL_OES_stencil1
#define GL_OES_stencil1 726
#undef GL_OES_stencil4
#define GL_OES_stencil4 727
#undef GL_OES_stencil8
#define GL_OES_stencil8 728
#undef GL_OES_stencil_wrap
#define GL_OES_stencil_wrap 729
#undef GL_OES_surfaceless_context
#define GL_OES_surfaceless_context 730
#undef GL_OES_tessellation_point_size
#define GL_OES_tessellation_point_size 731
#undef GL_OES_tessellation_shader
#define GL_OES_tessellation_shader 732
#undef GL_OES_texture_3D
#define GL_OES_texture_3D 733
#undef GL_OES_texture_border_clamp
#define GL_OES_texture_border_clamp 734
#undef GL_OES_texture_buffer
#define GL_OES_texture_buffer 735
#undef GL_OES_texture_compression_astc
#define GL_OES_texture_compression_astc 736
#undef GL_OES_texture_cube_map
#define GL_OES_texture_cube_map 737
#undef GL_OES_texture_cube_map_array
#define GL_OES_texture_cube_map_array 738
#undef GL_OES_texture_env_crossbar
#define GL_OES_texture_env_crossbar 739
#undef GL_OES_texture_float
#define GL_OES_texture_float 740
#undef GL_OES_texture_float_linear
#define GL_OES_texture_float_linear 741
#undef GL_OES_texture_half_float
#define GL_OES_texture_half_float 742
#undef GL_OES_texture_half_float_linear
#define GL_OES_texture_half_float_linear 743
#undef GL_OES_texture_mirrored_repeat
#define GL_OES_texture_mirrored_repeat 744
#undef GL_OES_texture_npot
#define GL_OES_texture_npot 745
#undef GL_OES_texture_stencil8
#define GL_OES_texture_stencil8 746
#undef GL_OES_texture_storage_multisample_2d_array
#define GL_OES_texture_storage_multisample_2d_array 747
#undef GL_OES_texture_view
#define GL_OES_texture_view 748
#undef GL_OES_vertex_array_object
#define GL_OES_vertex_array_object 749
#undef GL_OES_vertex_half_float
#define GL_OES_vertex_half_float 750
#undef GL_OES_vertex_type_10_10_10_2
#define GL_OES_vertex_type_10_10_10_2 751
#undef GL_OES_viewport_array
#define GL_OES_viewport_array 752
#undef GL_OML_interlace
#define GL_OML_interlace 753
#undef GL_OML_resample
#define GL_OML_resample 754
#undef GL_OML_subsample
#define GL_OML_subsample 755
#undef GL_OVR_multiview
#define GL_OVR_multiview 756
#undef GL_OVR_multiview2
#define GL_OVR_multiview2 757
#undef GL_OVR_multiview_multisampled_render_to_texture
#define GL_OVR_multiview_multisampled_render_to_texture 758
#undef GL_PGI_misc_hints
#define GL_PGI_misc_hints 759
#undef GL_PGI_vertex_hints
#define GL_PGI_vertex_hints 760
#undef GL_QCOM_alpha_test
#define GL_QCOM_alpha_test 761
#undef GL_QCOM_binning_control
#define GL_QCOM_binning_control 762
#undef GL_QCOM_driver_control
#define GL_QCOM_driver_control 763
#undef GL_QCOM_extended_get
#define GL_QCOM_extended_get 764
#undef GL_QCOM_extended_get2
#define GL_QCOM_extended_get2 765
#undef GL_QCOM_framebuffer_foveated
#define GL_QCOM_framebuffer_foveated 766
#undef GL_QCOM_texture_foveated
#define GL_QCOM_texture_foveated 767
#undef GL_QCOM_texture_foveated_subsampled_layout
#define GL_QCOM_texture_foveated_subsampled_layout 768
#undef GL_QCOM_perfmon_global_mode
#define GL_QCOM_perfmon_global_mode 769
#undef GL_QCOM_shader_framebuffer_fetch_noncoherent
#define GL_QCOM_shader_framebuffer_fetch_noncoherent 770
#undef GL_QCOM_shader_framebuffer_fetch_rate
#define GL_QCOM_shader_framebuffer_fetch_rate 771
#undef GL_QCOM_tiled_rendering
#define GL_QCOM_tiled_rendering 772
#undef GL_QCOM_writeonly_rendering
#define GL_QCOM_writeonly_rendering 773
#undef GL_REND_screen_coordinates
#define GL_REND_screen_coordinates 774
#undef GL_S3_s3tc
#define GL_S3_s3tc 775
#undef GL_SGIS_detail_texture
#define GL_SGIS_detail_texture 776
#undef GL_SGIS_fog_function
#define GL_SGIS_fog_function 777
#undef GL_SGIS_generate_mipmap
#define GL_SGIS_generate_mipmap 778
#undef GL_SGIS_multisample
#define GL_SGIS_multisample 779
#undef GL_SGIS_pixel_texture
#define GL_SGIS_pixel_texture 780
#undef GL_SGIS_point_line_texgen
#define GL_SGIS_point_line_texgen 781
#undef GL_SGIS_point_parameters
#define GL_SGIS_point_parameters 782
#undef GL_SGIS_sharpen_texture
#define GL_SGIS_sharpen_texture 783
#undef GL_SGIS_texture4D
#define GL_SGIS_texture4D 784
#undef GL_SGIS_texture_border_clamp
#define GL_SGIS_texture_border_clamp 785
#undef GL_SGIS_texture_color_mask
#define GL_SGIS_texture_color_mask 786
#undef GL_SGIS_texture_edge_clamp
#define GL_SGIS_texture_edge_clamp 787
#undef GL_SGIS_texture_filter4
#define GL_SGIS_texture_filter4 788
#undef GL_SGIS_texture_lod
#define GL_SGIS_texture_lod 789
#undef GL_SGIS_texture_select
#define GL_SGIS_texture_select 790
#undef GL_SGIX_async
#define GL_SGIX_async 791
#undef GL_SGIX_async_histogram
#define GL_SGIX_async_histogram 792
#undef GL_SGIX_async_pixel
#define GL_SGIX_async_pixel 793
#undef GL_SGIX_blend_alpha_minmax
#define GL_SGIX_blend_alpha_minmax 794
#undef GL_SGIX_calligraphic_fragment
#define GL_SGIX_calligraphic_fragment 795
#undef GL_SGIX_clipmap
#define GL_SGIX_clipmap 796
#undef GL_SGIX_convolution_accuracy
#define GL_SGIX_convolution_accuracy 797
#undef GL_SGIX_depth_pass_instrument
#define GL_SGIX_depth_pass_instrument 798
#undef GL_SGIX_depth_texture
#define GL_SGIX_depth_texture 799
#undef GL_SGIX_flush_raster
#define GL_SGIX_flush_raster 800
#undef GL_SGIX_fog_offset
#define GL_SGIX_fog_offset 801
#undef GL_SGIX_fragment_lighting
#define GL_SGIX_fragment_lighting 802
#undef GL_SGIX_framezoom
#define GL_SGIX_framezoom 803
#undef GL_SGIX_igloo_interface
#define GL_SGIX_igloo_interface 804
#undef GL_SGIX_instruments
#define GL_SGIX_instruments 805
#undef GL_SGIX_interlace
#define GL_SGIX_interlace 806
#undef GL_SGIX_ir_instrument1
#define GL_SGIX_ir_instrument1 807
#undef GL_SGIX_list_priority
#define GL_SGIX_list_priority 808
#undef GL_SGIX_pixel_texture
#define GL_SGIX_pixel_texture 809
#undef GL_SGIX_pixel_tiles
#define GL_SGIX_pixel_tiles 810
#undef GL_SGIX_polynomial_ffd
#define GL_SGIX_polynomial_ffd 811
#undef GL_SGIX_reference_plane
#define GL_SGIX_reference_plane 812
#undef GL_SGIX_resample
#define GL_SGIX_resample 813
#undef GL_SGIX_scalebias_hint
#define GL_SGIX_scalebias_hint 814
#undef GL_SGIX_shadow
#define GL_SGIX_shadow 815
#undef GL_SGIX_shadow_ambient
#define GL_SGIX_shadow_ambient 816
#undef GL_SGIX_sprite
#define GL_SGIX_sprite 817
#undef GL_SGIX_subsample
#define GL_SGIX_subsample 818
#undef GL_SGIX_tag_sample_buffer
#define GL_SGIX_tag_sample_buffer 819
#undef GL_SGIX_texture_add_env
#define GL_SGIX_texture_add_env 820
#undef GL_SGIX_texture_coordinate_clamp
#define GL_SGIX_texture_coordinate_clamp 821
#undef GL_SGIX_texture_lod_bias
#define GL_SGIX_texture_lod_bias 822
#undef GL_SGIX_texture_multi_buffer
#define GL_SGIX_texture_multi_buffer 823
#undef GL_SGIX_texture_scale_bias
#define GL_SGIX_texture_scale_bias 824
#undef GL_SGIX_vertex_preclip
#define GL_SGIX_vertex_preclip 825
#undef GL_SGIX_ycrcb
#define GL_SGIX_ycrcb 826
#undef GL_SGIX_ycrcb_subsample
#define GL_SGIX_ycrcb_subsample 827
#undef GL_SGIX_ycrcba
#define GL_SGIX_ycrcba 828
#undef GL_SGI_color_matrix
#define GL_SGI_color_matrix 829
#undef GL_SGI_color_table
#define GL_SGI_color_table 830
#undef GL_SGI_texture_color_table
#define GL_SGI_texture_color_table 831
#undef GL_SUNX_constant_data
#define GL_SUNX_constant_data 832
#undef GL_SUN_convolution_border_modes
#define GL_SUN_convolution_border_modes 833
#undef GL_SUN_global_alpha
#define GL_SUN_global_alpha 834
#undef GL_SUN_mesh_array
#define GL_SUN_mesh_array 835
#undef GL_SUN_slice_accum
#define GL_SUN_slice_accum 836
#undef GL_SUN_triangle_list
#define GL_SUN_triangle_list 837
#undef GL_SUN_vertex
#define GL_SUN_vertex 838
#undef GL_VIV_shader_binary
#define GL_VIV_shader_binary 839
#undef GL_WIN_phong_shading
#define GL_WIN_phong_shading 840
#undef GL_WIN_specular_fog
#define GL_WIN_specular_fog 841
#undef GL_EXT_Cg_shader
#define GL_EXT_Cg_shader 842
#undef GL_EXTX_framebuffer_mixed_formats
#define GL_EXTX_framebuffer_mixed_formats 843
#undef GL_EXT_texture_compression_dxt1
#define GL_EXT_texture_compression_dxt1 844
#undef GL_EXT_texture_edge_clamp
#define GL_EXT_texture_edge_clamp 845
#undef GL_EXT_texture_storage
#define GL_EXT_texture_storage 846
#undef GL_EXT_import_sync_object
#define GL_EXT_import_sync_object 847
#undef GL_KTX_buffer_region
#define GL_KTX_buffer_region 848
#undef GL_NV_ES1_1_compatibility
#define GL_NV_ES1_1_compatibility 849
#undef GL_NV_ES3_1_compatibility
#define GL_NV_ES3_1_compatibility 850
#undef GL_EXT_texture_lod
#define GL_EXT_texture_lod 851

#if defined(__cplusplus)
extern "C" {
#endif

/*!
 * generic TunisGL Procedure signature
 */
typedef void(KHRONOS_APIENTRY*TunisGLProc)(void);

/*!
 * TunisGetProcAddress signature.
 */
typedef TunisGLProc (*TunisGLGetProcAddressFunc)(const char *);

/*!
 * TunisGetProcAddress function pointer used to wrangle all the GL and
 * GLES functions and extensions. Automatically points the a default
 * implementation, and can be overriden by the user if they need something
 * specific. Make sure that it is set before calling tunisGLInit()
 */
extern TunisGLGetProcAddressFunc tunisGLGetProcAddress;


/*!
 * User is required to call this function as soon as the GL context has been created.
 * Failing to calling this function will result in a crash.
 *
 * \return returns KHRONOS_TRUE if successful, KHRONOS_FALSE otherwise.
 */
khronos_int8_t tunisGLInit(void);

/*!
 * User should call this function as soon as the GL context is destroyed. It is not
 * mandatory, but is highly recommended. User can also opt to create anew GL context
 * and call tunisGLInit() instead.
 */
void tunisGLShutdown(void);

/*!
 * Utility to check if a specific OpenGL or OpenGL ES function or extension is supported and available.
 *
 * Usage example:
 *
 * \code
 * if(tunisGLSupport(GL_VERSION_3_0) || tunisGLSupport(GL_ES_VERSION_3_0))
 * {
 *     void *pMapped = glMapBufferRange(target, 0, buffer.size(), GL_MAP_WRITE_BIT | GL_MAP_INVALIDATE_BUFFER_BIT);
 *     std::copy(buffer.begin(), buffer.end(), pMapped);
 *        glUnmapBuffer(target);
 * }
 * else if (tunisGLSupport(GL_EXT_map_buffer_range) && tunisGLSupport(GL_OES_mapbuffer)
 * {
 *     void *pMapped = glMapBufferRangeEXT(target, 0, buffer.size(), GL_MAP_WRITE_BIT_EXT | GL_MAP_INVALIDATE_BUFFER_BIT_EXT);
 *     std::copy(buffer.begin(), buffer.end(), pMapped);
 *     glUnmapBufferOES(target);
 * }
 * else
 * {
 *     glBufferData(target, buffer.size(), reinterpret_cast<const GLvoid *>(&buffer[0]), usage);
 * }
 * \endcode
 *
 * \return returns KHRONOS_TRUE if successful, KHRONOS_FALSE otherwise.
 */
TUNIS_FORCE_INLINE khronos_int8_t tunisGLSupport(khronos_usize_t extensionID);

/*!
     Checks if a specific OpenGL or OpenGL ES command triggered an error.

     Usage example:

     \code
         // Only checks if compiled in debug.
         tunisGLCheckErrorDebug(glBindBuffer(handle));

         // checks for both debug and release.
         tunisGLCheckError(glBufferData(target, bufferSize, (const GLvoid *)pBuffer, GL_STATIC_DRAW));
     \endcode

     \note tunisGLCheckErrorDebug is disabled when the application is compiled for a release build.
     \warning calling glGetError can affect your rendering performance. We recommend
     using tunisGLCheckErrorDebug instead of tunisGLCheckError so that the production
     build won't be impacted. If you want to use tunisGLCheckError, make sure it is not called
     during time critical code path.
 */
void _tunisGLCheckError(const char* fileName, int lineNumber);
#if !defined(tunisGLCheckError)
    #define tunisGLCheckError(x) x; _tunisGLCheckError(__FILE__, __LINE__)
#endif
#if !defined(tunisGLCheckErrorDebug)
    #if !defined(NDEBUG)
        #define tunisGLCheckErrorDebug(x) x; _tunisGLCheckError(__FILE__, __LINE__)
    #else
        #define tunisGLCheckErrorDebug(x) x
    #endif
#endif

/* Type definitions */
#ifdef __APPLE__
typedef void *GLhandleARB;
#else
typedef khronos_uint32_t GLhandleARB;
#endif
typedef khronos_uint32_t GLenum;
typedef khronos_uint8_t GLboolean;
typedef khronos_uint32_t GLbitfield;
typedef void GLvoid;
typedef khronos_int8_t GLbyte;
typedef khronos_int16_t GLshort;
typedef khronos_int32_t GLint;
typedef khronos_int32_t GLclampx;
typedef khronos_uint8_t GLubyte;
typedef khronos_uint16_t GLushort;
typedef khronos_uint32_t GLuint;
typedef khronos_int32_t GLsizei;
typedef khronos_float_t GLfloat;
typedef khronos_float_t GLclampf;
typedef double GLdouble;
typedef double GLclampd;
typedef void *GLeglClientBufferEXT;
typedef void *GLeglImageOES;
typedef char GLchar;
typedef char GLcharARB;
typedef khronos_uint16_t GLhalfARB;
typedef khronos_uint16_t GLhalf;
typedef khronos_int32_t GLfixed;
typedef khronos_intptr_t GLintptr;
typedef khronos_ssize_t GLsizeiptr;
typedef khronos_int64_t GLint64;
typedef khronos_uint64_t GLuint64;
typedef khronos_intptr_t GLintptrARB;
typedef khronos_intptr_t GLsizeiptrARB;
typedef khronos_int64_t GLint64EXT;
typedef khronos_uint64_t GLuint64EXT;
typedef struct __GLsync *GLsync;
struct _cl_context;
struct _cl_event;
typedef void (KHRONOS_APIENTRY *GLDEBUGPROC)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar *message,const void *userParam);
typedef void (KHRONOS_APIENTRY *GLDEBUGPROCARB)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar *message,const void *userParam);
typedef void (KHRONOS_APIENTRY *GLDEBUGPROCKHR)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar *message,const void *userParam);
typedef void (KHRONOS_APIENTRY *GLDEBUGPROCAMD)(GLuint id,GLenum category,GLenum severity,GLsizei length,const GLchar *message,void *userParam);
typedef khronos_uint16_t GLhalfNV;
typedef GLintptr GLvdpauSurfaceNV;
typedef void (KHRONOS_APIENTRY *GLVULKANPROCNV)(void);


typedef struct TunisGLConfig
{
    khronos_int8_t support[852];

    void (KHRONOS_APIENTRY * tunisAccum)(GLenum, GLfloat);
    void (KHRONOS_APIENTRY * tunisAccumxOES)(GLenum, GLfixed);
    GLboolean(KHRONOS_APIENTRY * tunisAcquireKeyedMutexWin32EXT)(GLuint, GLuint64, GLuint);
    void (KHRONOS_APIENTRY * tunisActiveProgramEXT)(GLuint);
    void (KHRONOS_APIENTRY * tunisActiveShaderProgram)(GLuint, GLuint);
    void (KHRONOS_APIENTRY * tunisActiveShaderProgramEXT)(GLuint, GLuint);
    void (KHRONOS_APIENTRY * tunisActiveStencilFaceEXT)(GLenum);
    void (KHRONOS_APIENTRY * tunisActiveTexture)(GLenum);
    void (KHRONOS_APIENTRY * tunisActiveTextureARB)(GLenum);
    void (KHRONOS_APIENTRY * tunisActiveVaryingNV)(GLuint, const GLchar *);
    void (KHRONOS_APIENTRY * tunisAlphaFragmentOp1ATI)(GLenum, GLuint, GLuint, GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY * tunisAlphaFragmentOp2ATI)(GLenum, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY * tunisAlphaFragmentOp3ATI)(GLenum, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY * tunisAlphaFunc)(GLenum, GLfloat);
    void (KHRONOS_APIENTRY * tunisAlphaFuncQCOM)(GLenum, GLclampf);
    void (KHRONOS_APIENTRY * tunisAlphaFuncx)(GLenum, GLfixed);
    void (KHRONOS_APIENTRY * tunisAlphaFuncxOES)(GLenum, GLfixed);
    void (KHRONOS_APIENTRY * tunisAlphaToCoverageDitherControlNV)(GLenum);
    void (KHRONOS_APIENTRY * tunisApplyFramebufferAttachmentCMAAINTEL)(void);
    void (KHRONOS_APIENTRY * tunisApplyTextureEXT)(GLenum);
    GLboolean(KHRONOS_APIENTRY * tunisAreProgramsResidentNV)(GLsizei, const GLuint *, GLboolean *);
    GLboolean(KHRONOS_APIENTRY * tunisAreTexturesResident)(GLsizei, const GLuint *, GLboolean *);
    GLboolean(KHRONOS_APIENTRY * tunisAreTexturesResidentEXT)(GLsizei, const GLuint *, GLboolean *);
    void (KHRONOS_APIENTRY * tunisArrayElement)(GLint);
    void (KHRONOS_APIENTRY * tunisArrayElementEXT)(GLint);
    void (KHRONOS_APIENTRY * tunisArrayObjectATI)(GLenum, GLint, GLenum, GLsizei, GLuint, GLuint);
    void (KHRONOS_APIENTRY * tunisAsyncMarkerSGIX)(GLuint);
    void (KHRONOS_APIENTRY * tunisAttachObjectARB)(GLhandleARB, GLhandleARB);
    void (KHRONOS_APIENTRY * tunisAttachShader)(GLuint, GLuint);
    void (KHRONOS_APIENTRY * tunisBegin)(GLenum);
    void (KHRONOS_APIENTRY * tunisBeginConditionalRender)(GLuint, GLenum);
    void (KHRONOS_APIENTRY * tunisBeginConditionalRenderNV)(GLuint, GLenum);
    void (KHRONOS_APIENTRY * tunisBeginConditionalRenderNVX)(GLuint);
    void (KHRONOS_APIENTRY * tunisBeginFragmentShaderATI)(void);
    void (KHRONOS_APIENTRY * tunisBeginOcclusionQueryNV)(GLuint);
    void (KHRONOS_APIENTRY * tunisBeginPerfMonitorAMD)(GLuint);
    void (KHRONOS_APIENTRY * tunisBeginPerfQueryINTEL)(GLuint);
    void (KHRONOS_APIENTRY * tunisBeginQuery)(GLenum, GLuint);
    void (KHRONOS_APIENTRY * tunisBeginQueryARB)(GLenum, GLuint);
    void (KHRONOS_APIENTRY * tunisBeginQueryEXT)(GLenum, GLuint);
    void (KHRONOS_APIENTRY * tunisBeginQueryIndexed)(GLenum, GLuint, GLuint);
    void (KHRONOS_APIENTRY * tunisBeginTransformFeedback)(GLenum);
    void (KHRONOS_APIENTRY * tunisBeginTransformFeedbackEXT)(GLenum);
    void (KHRONOS_APIENTRY * tunisBeginTransformFeedbackNV)(GLenum);
    void (KHRONOS_APIENTRY * tunisBeginVertexShaderEXT)(void);
    void (KHRONOS_APIENTRY * tunisBeginVideoCaptureNV)(GLuint);
    void (KHRONOS_APIENTRY * tunisBindAttribLocation)(GLuint, GLuint, const GLchar *);
    void (KHRONOS_APIENTRY * tunisBindAttribLocationARB)(GLhandleARB, GLuint, const GLcharARB *);
    void (KHRONOS_APIENTRY * tunisBindBuffer)(GLenum, GLuint);
    void (KHRONOS_APIENTRY * tunisBindBufferARB)(GLenum, GLuint);
    void (KHRONOS_APIENTRY * tunisBindBufferBase)(GLenum, GLuint, GLuint);
    void (KHRONOS_APIENTRY * tunisBindBufferBaseEXT)(GLenum, GLuint, GLuint);
    void (KHRONOS_APIENTRY * tunisBindBufferBaseNV)(GLenum, GLuint, GLuint);
    void (KHRONOS_APIENTRY * tunisBindBufferOffsetEXT)(GLenum, GLuint, GLuint, GLintptr);
    void (KHRONOS_APIENTRY * tunisBindBufferOffsetNV)(GLenum, GLuint, GLuint, GLintptr);
    void (KHRONOS_APIENTRY * tunisBindBufferRange)(GLenum, GLuint, GLuint, GLintptr, GLsizeiptr);
    void (KHRONOS_APIENTRY * tunisBindBufferRangeEXT)(GLenum, GLuint, GLuint, GLintptr, GLsizeiptr);
    void (KHRONOS_APIENTRY * tunisBindBufferRangeNV)(GLenum, GLuint, GLuint, GLintptr, GLsizeiptr);
    void (KHRONOS_APIENTRY * tunisBindBuffersBase)(GLenum, GLuint, GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY * tunisBindBuffersRange)(GLenum, GLuint, GLsizei, const GLuint *, const GLintptr *, const GLsizeiptr *);
    void (KHRONOS_APIENTRY * tunisBindFragDataLocation)(GLuint, GLuint, const GLchar *);
    void (KHRONOS_APIENTRY * tunisBindFragDataLocationEXT)(GLuint, GLuint, const GLchar *);
    void (KHRONOS_APIENTRY * tunisBindFragDataLocationIndexed)(GLuint, GLuint, GLuint, const GLchar *);
    void (KHRONOS_APIENTRY * tunisBindFragDataLocationIndexedEXT)(GLuint, GLuint, GLuint, const GLchar *);
    void (KHRONOS_APIENTRY * tunisBindFragmentShaderATI)(GLuint);
    void (KHRONOS_APIENTRY * tunisBindFramebuffer)(GLenum, GLuint);
    void (KHRONOS_APIENTRY * tunisBindFramebufferEXT)(GLenum, GLuint);
    void (KHRONOS_APIENTRY * tunisBindFramebufferOES)(GLenum, GLuint);
    void (KHRONOS_APIENTRY * tunisBindImageTexture)(GLuint, GLuint, GLint, GLboolean, GLint, GLenum, GLenum);
    void (KHRONOS_APIENTRY * tunisBindImageTextureEXT)(GLuint, GLuint, GLint, GLboolean, GLint, GLenum, GLint);
    void (KHRONOS_APIENTRY * tunisBindImageTextures)(GLuint, GLsizei, const GLuint *);
    GLuint(KHRONOS_APIENTRY * tunisBindLightParameterEXT)(GLenum, GLenum);
    GLuint(KHRONOS_APIENTRY * tunisBindMaterialParameterEXT)(GLenum, GLenum);
    void (KHRONOS_APIENTRY * tunisBindMultiTextureEXT)(GLenum, GLenum, GLuint);
    GLuint(KHRONOS_APIENTRY * tunisBindParameterEXT)(GLenum);
    void (KHRONOS_APIENTRY * tunisBindProgramARB)(GLenum, GLuint);
    void (KHRONOS_APIENTRY * tunisBindProgramNV)(GLenum, GLuint);
    void (KHRONOS_APIENTRY * tunisBindProgramPipeline)(GLuint);
    void (KHRONOS_APIENTRY * tunisBindProgramPipelineEXT)(GLuint);
    void (KHRONOS_APIENTRY * tunisBindRenderbuffer)(GLenum, GLuint);
    void (KHRONOS_APIENTRY * tunisBindRenderbufferEXT)(GLenum, GLuint);
    void (KHRONOS_APIENTRY * tunisBindRenderbufferOES)(GLenum, GLuint);
    void (KHRONOS_APIENTRY * tunisBindSampler)(GLuint, GLuint);
    void (KHRONOS_APIENTRY * tunisBindSamplers)(GLuint, GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY * tunisBindShadingRateImageNV)(GLuint);
    GLuint(KHRONOS_APIENTRY * tunisBindTexGenParameterEXT)(GLenum, GLenum, GLenum);
    void (KHRONOS_APIENTRY * tunisBindTexture)(GLenum, GLuint);
    void (KHRONOS_APIENTRY * tunisBindTextureEXT)(GLenum, GLuint);
    void (KHRONOS_APIENTRY * tunisBindTextureUnit)(GLuint, GLuint);
    GLuint(KHRONOS_APIENTRY * tunisBindTextureUnitParameterEXT)(GLenum, GLenum);
    void (KHRONOS_APIENTRY * tunisBindTextures)(GLuint, GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY * tunisBindTransformFeedback)(GLenum, GLuint);
    void (KHRONOS_APIENTRY * tunisBindTransformFeedbackNV)(GLenum, GLuint);
    void (KHRONOS_APIENTRY * tunisBindVertexArray)(GLuint);
    void (KHRONOS_APIENTRY * tunisBindVertexArrayAPPLE)(GLuint);
    void (KHRONOS_APIENTRY * tunisBindVertexArrayOES)(GLuint);
    void (KHRONOS_APIENTRY * tunisBindVertexBuffer)(GLuint, GLuint, GLintptr, GLsizei);
    void (KHRONOS_APIENTRY * tunisBindVertexBuffers)(GLuint, GLsizei, const GLuint *, const GLintptr *, const GLsizei *);
    void (KHRONOS_APIENTRY * tunisBindVertexShaderEXT)(GLuint);
    void (KHRONOS_APIENTRY * tunisBindVideoCaptureStreamBufferNV)(GLuint, GLuint, GLenum, GLintptrARB);
    void (KHRONOS_APIENTRY * tunisBindVideoCaptureStreamTextureNV)(GLuint, GLuint, GLenum, GLenum, GLuint);
    void (KHRONOS_APIENTRY * tunisBinormal3bEXT)(GLbyte, GLbyte, GLbyte);
    void (KHRONOS_APIENTRY * tunisBinormal3bvEXT)(const GLbyte *);
    void (KHRONOS_APIENTRY * tunisBinormal3dEXT)(GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * tunisBinormal3dvEXT)(const GLdouble *);
    void (KHRONOS_APIENTRY * tunisBinormal3fEXT)(GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisBinormal3fvEXT)(const GLfloat *);
    void (KHRONOS_APIENTRY * tunisBinormal3iEXT)(GLint, GLint, GLint);
    void (KHRONOS_APIENTRY * tunisBinormal3ivEXT)(const GLint *);
    void (KHRONOS_APIENTRY * tunisBinormal3sEXT)(GLshort, GLshort, GLshort);
    void (KHRONOS_APIENTRY * tunisBinormal3svEXT)(const GLshort *);
    void (KHRONOS_APIENTRY * tunisBinormalPointerEXT)(GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY * tunisBitmap)(GLsizei, GLsizei, GLfloat, GLfloat, GLfloat, GLfloat, const GLubyte *);
    void (KHRONOS_APIENTRY * tunisBitmapxOES)(GLsizei, GLsizei, GLfixed, GLfixed, GLfixed, GLfixed, const GLubyte *);
    void (KHRONOS_APIENTRY * tunisBlendBarrier)(void);
    void (KHRONOS_APIENTRY * tunisBlendBarrierKHR)(void);
    void (KHRONOS_APIENTRY * tunisBlendBarrierNV)(void);
    void (KHRONOS_APIENTRY * tunisBlendColor)(GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisBlendColorEXT)(GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisBlendColorxOES)(GLfixed, GLfixed, GLfixed, GLfixed);
    void (KHRONOS_APIENTRY * tunisBlendEquation)(GLenum);
    void (KHRONOS_APIENTRY * tunisBlendEquationEXT)(GLenum);
    void (KHRONOS_APIENTRY * tunisBlendEquationIndexedAMD)(GLuint, GLenum);
    void (KHRONOS_APIENTRY * tunisBlendEquationOES)(GLenum);
    void (KHRONOS_APIENTRY * tunisBlendEquationSeparate)(GLenum, GLenum);
    void (KHRONOS_APIENTRY * tunisBlendEquationSeparateEXT)(GLenum, GLenum);
    void (KHRONOS_APIENTRY * tunisBlendEquationSeparateIndexedAMD)(GLuint, GLenum, GLenum);
    void (KHRONOS_APIENTRY * tunisBlendEquationSeparateOES)(GLenum, GLenum);
    void (KHRONOS_APIENTRY * tunisBlendEquationSeparatei)(GLuint, GLenum, GLenum);
    void (KHRONOS_APIENTRY * tunisBlendEquationSeparateiARB)(GLuint, GLenum, GLenum);
    void (KHRONOS_APIENTRY * tunisBlendEquationSeparateiEXT)(GLuint, GLenum, GLenum);
    void (KHRONOS_APIENTRY * tunisBlendEquationSeparateiOES)(GLuint, GLenum, GLenum);
    void (KHRONOS_APIENTRY * tunisBlendEquationi)(GLuint, GLenum);
    void (KHRONOS_APIENTRY * tunisBlendEquationiARB)(GLuint, GLenum);
    void (KHRONOS_APIENTRY * tunisBlendEquationiEXT)(GLuint, GLenum);
    void (KHRONOS_APIENTRY * tunisBlendEquationiOES)(GLuint, GLenum);
    void (KHRONOS_APIENTRY * tunisBlendFunc)(GLenum, GLenum);
    void (KHRONOS_APIENTRY * tunisBlendFuncIndexedAMD)(GLuint, GLenum, GLenum);
    void (KHRONOS_APIENTRY * tunisBlendFuncSeparate)(GLenum, GLenum, GLenum, GLenum);
    void (KHRONOS_APIENTRY * tunisBlendFuncSeparateEXT)(GLenum, GLenum, GLenum, GLenum);
    void (KHRONOS_APIENTRY * tunisBlendFuncSeparateINGR)(GLenum, GLenum, GLenum, GLenum);
    void (KHRONOS_APIENTRY * tunisBlendFuncSeparateIndexedAMD)(GLuint, GLenum, GLenum, GLenum, GLenum);
    void (KHRONOS_APIENTRY * tunisBlendFuncSeparateOES)(GLenum, GLenum, GLenum, GLenum);
    void (KHRONOS_APIENTRY * tunisBlendFuncSeparatei)(GLuint, GLenum, GLenum, GLenum, GLenum);
    void (KHRONOS_APIENTRY * tunisBlendFuncSeparateiARB)(GLuint, GLenum, GLenum, GLenum, GLenum);
    void (KHRONOS_APIENTRY * tunisBlendFuncSeparateiEXT)(GLuint, GLenum, GLenum, GLenum, GLenum);
    void (KHRONOS_APIENTRY * tunisBlendFuncSeparateiOES)(GLuint, GLenum, GLenum, GLenum, GLenum);
    void (KHRONOS_APIENTRY * tunisBlendFunci)(GLuint, GLenum, GLenum);
    void (KHRONOS_APIENTRY * tunisBlendFunciARB)(GLuint, GLenum, GLenum);
    void (KHRONOS_APIENTRY * tunisBlendFunciEXT)(GLuint, GLenum, GLenum);
    void (KHRONOS_APIENTRY * tunisBlendFunciOES)(GLuint, GLenum, GLenum);
    void (KHRONOS_APIENTRY * tunisBlendParameteriNV)(GLenum, GLint);
    void (KHRONOS_APIENTRY * tunisBlitFramebuffer)(GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLbitfield, GLenum);
    void (KHRONOS_APIENTRY * tunisBlitFramebufferANGLE)(GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLbitfield, GLenum);
    void (KHRONOS_APIENTRY * tunisBlitFramebufferEXT)(GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLbitfield, GLenum);
    void (KHRONOS_APIENTRY * tunisBlitFramebufferNV)(GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLbitfield, GLenum);
    void (KHRONOS_APIENTRY * tunisBlitNamedFramebuffer)(GLuint, GLuint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLbitfield, GLenum);
    void (KHRONOS_APIENTRY * tunisBufferAddressRangeNV)(GLenum, GLuint, GLuint64EXT, GLsizeiptr);
    void (KHRONOS_APIENTRY * tunisBufferAttachMemoryNV)(GLenum, GLuint, GLuint64);
    void (KHRONOS_APIENTRY * tunisBufferData)(GLenum, GLsizeiptr, const void *, GLenum);
    void (KHRONOS_APIENTRY * tunisBufferDataARB)(GLenum, GLsizeiptrARB, const void *, GLenum);
    void (KHRONOS_APIENTRY * tunisBufferPageCommitmentARB)(GLenum, GLintptr, GLsizeiptr, GLboolean);
    void (KHRONOS_APIENTRY * tunisBufferParameteriAPPLE)(GLenum, GLenum, GLint);
    GLuint(KHRONOS_APIENTRY * tunisBufferRegionEnabled)(void);
    void (KHRONOS_APIENTRY * tunisBufferStorage)(GLenum, GLsizeiptr, const void *, GLbitfield);
    void (KHRONOS_APIENTRY * tunisBufferStorageEXT)(GLenum, GLsizeiptr, const void *, GLbitfield);
    void (KHRONOS_APIENTRY * tunisBufferStorageExternalEXT)(GLenum, GLintptr, GLsizeiptr, GLeglClientBufferEXT, GLbitfield);
    void (KHRONOS_APIENTRY * tunisBufferStorageMemEXT)(GLenum, GLsizeiptr, GLuint, GLuint64);
    void (KHRONOS_APIENTRY * tunisBufferSubData)(GLenum, GLintptr, GLsizeiptr, const void *);
    void (KHRONOS_APIENTRY * tunisBufferSubDataARB)(GLenum, GLintptrARB, GLsizeiptrARB, const void *);
    void (KHRONOS_APIENTRY * tunisCallCommandListNV)(GLuint);
    void (KHRONOS_APIENTRY * tunisCallList)(GLuint);
    void (KHRONOS_APIENTRY * tunisCallLists)(GLsizei, GLenum, const void *);
    GLenum(KHRONOS_APIENTRY * tunisCheckFramebufferStatus)(GLenum);
    GLenum(KHRONOS_APIENTRY * tunisCheckFramebufferStatusEXT)(GLenum);
    GLenum(KHRONOS_APIENTRY * tunisCheckFramebufferStatusOES)(GLenum);
    GLenum(KHRONOS_APIENTRY * tunisCheckNamedFramebufferStatus)(GLuint, GLenum);
    GLenum(KHRONOS_APIENTRY * tunisCheckNamedFramebufferStatusEXT)(GLuint, GLenum);
    void (KHRONOS_APIENTRY * tunisClampColor)(GLenum, GLenum);
    void (KHRONOS_APIENTRY * tunisClampColorARB)(GLenum, GLenum);
    void (KHRONOS_APIENTRY * tunisClear)(GLbitfield);
    void (KHRONOS_APIENTRY * tunisClearAccum)(GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisClearAccumxOES)(GLfixed, GLfixed, GLfixed, GLfixed);
    void (KHRONOS_APIENTRY * tunisClearBufferData)(GLenum, GLenum, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY * tunisClearBufferSubData)(GLenum, GLenum, GLintptr, GLsizeiptr, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY * tunisClearBufferfi)(GLenum, GLint, GLfloat, GLint);
    void (KHRONOS_APIENTRY * tunisClearBufferfv)(GLenum, GLint, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisClearBufferiv)(GLenum, GLint, const GLint *);
    void (KHRONOS_APIENTRY * tunisClearBufferuiv)(GLenum, GLint, const GLuint *);
    void (KHRONOS_APIENTRY * tunisClearColor)(GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisClearColorIiEXT)(GLint, GLint, GLint, GLint);
    void (KHRONOS_APIENTRY * tunisClearColorIuiEXT)(GLuint, GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY * tunisClearColorx)(GLfixed, GLfixed, GLfixed, GLfixed);
    void (KHRONOS_APIENTRY * tunisClearColorxOES)(GLfixed, GLfixed, GLfixed, GLfixed);
    void (KHRONOS_APIENTRY * tunisClearDepth)(GLdouble);
    void (KHRONOS_APIENTRY * tunisClearDepthdNV)(GLdouble);
    void (KHRONOS_APIENTRY * tunisClearDepthf)(GLfloat);
    void (KHRONOS_APIENTRY * tunisClearDepthfOES)(GLclampf);
    void (KHRONOS_APIENTRY * tunisClearDepthx)(GLfixed);
    void (KHRONOS_APIENTRY * tunisClearDepthxOES)(GLfixed);
    void (KHRONOS_APIENTRY * tunisClearIndex)(GLfloat);
    void (KHRONOS_APIENTRY * tunisClearNamedBufferData)(GLuint, GLenum, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY * tunisClearNamedBufferDataEXT)(GLuint, GLenum, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY * tunisClearNamedBufferSubData)(GLuint, GLenum, GLintptr, GLsizeiptr, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY * tunisClearNamedBufferSubDataEXT)(GLuint, GLenum, GLsizeiptr, GLsizeiptr, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY * tunisClearNamedFramebufferfi)(GLuint, GLenum, GLint, GLfloat, GLint);
    void (KHRONOS_APIENTRY * tunisClearNamedFramebufferfv)(GLuint, GLenum, GLint, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisClearNamedFramebufferiv)(GLuint, GLenum, GLint, const GLint *);
    void (KHRONOS_APIENTRY * tunisClearNamedFramebufferuiv)(GLuint, GLenum, GLint, const GLuint *);
    void (KHRONOS_APIENTRY * tunisClearPixelLocalStorageuiEXT)(GLsizei, GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY * tunisClearStencil)(GLint);
    void (KHRONOS_APIENTRY * tunisClearTexImage)(GLuint, GLint, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY * tunisClearTexImageEXT)(GLuint, GLint, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY * tunisClearTexSubImage)(GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY * tunisClearTexSubImageEXT)(GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY * tunisClientActiveTexture)(GLenum);
    void (KHRONOS_APIENTRY * tunisClientActiveTextureARB)(GLenum);
    void (KHRONOS_APIENTRY * tunisClientActiveVertexStreamATI)(GLenum);
    void (KHRONOS_APIENTRY * tunisClientAttribDefaultEXT)(GLbitfield);
    GLenum(KHRONOS_APIENTRY * tunisClientWaitSync)(GLsync, GLbitfield, GLuint64);
    GLenum(KHRONOS_APIENTRY * tunisClientWaitSyncAPPLE)(GLsync, GLbitfield, GLuint64);
    void (KHRONOS_APIENTRY * tunisClipControl)(GLenum, GLenum);
    void (KHRONOS_APIENTRY * tunisClipControlEXT)(GLenum, GLenum);
    void (KHRONOS_APIENTRY * tunisClipPlane)(GLenum, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisClipPlanef)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisClipPlanefIMG)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisClipPlanefOES)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisClipPlanex)(GLenum, const GLfixed *);
    void (KHRONOS_APIENTRY * tunisClipPlanexIMG)(GLenum, const GLfixed *);
    void (KHRONOS_APIENTRY * tunisClipPlanexOES)(GLenum, const GLfixed *);
    void (KHRONOS_APIENTRY * tunisColor3b)(GLbyte, GLbyte, GLbyte);
    void (KHRONOS_APIENTRY * tunisColor3bv)(const GLbyte *);
    void (KHRONOS_APIENTRY * tunisColor3d)(GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * tunisColor3dv)(const GLdouble *);
    void (KHRONOS_APIENTRY * tunisColor3f)(GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisColor3fVertex3fSUN)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisColor3fVertex3fvSUN)(const GLfloat *, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisColor3fv)(const GLfloat *);
    void (KHRONOS_APIENTRY * tunisColor3hNV)(GLhalfNV, GLhalfNV, GLhalfNV);
    void (KHRONOS_APIENTRY * tunisColor3hvNV)(const GLhalfNV *);
    void (KHRONOS_APIENTRY * tunisColor3i)(GLint, GLint, GLint);
    void (KHRONOS_APIENTRY * tunisColor3iv)(const GLint *);
    void (KHRONOS_APIENTRY * tunisColor3s)(GLshort, GLshort, GLshort);
    void (KHRONOS_APIENTRY * tunisColor3sv)(const GLshort *);
    void (KHRONOS_APIENTRY * tunisColor3ub)(GLubyte, GLubyte, GLubyte);
    void (KHRONOS_APIENTRY * tunisColor3ubv)(const GLubyte *);
    void (KHRONOS_APIENTRY * tunisColor3ui)(GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY * tunisColor3uiv)(const GLuint *);
    void (KHRONOS_APIENTRY * tunisColor3us)(GLushort, GLushort, GLushort);
    void (KHRONOS_APIENTRY * tunisColor3usv)(const GLushort *);
    void (KHRONOS_APIENTRY * tunisColor3xOES)(GLfixed, GLfixed, GLfixed);
    void (KHRONOS_APIENTRY * tunisColor3xvOES)(const GLfixed *);
    void (KHRONOS_APIENTRY * tunisColor4b)(GLbyte, GLbyte, GLbyte, GLbyte);
    void (KHRONOS_APIENTRY * tunisColor4bv)(const GLbyte *);
    void (KHRONOS_APIENTRY * tunisColor4d)(GLdouble, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * tunisColor4dv)(const GLdouble *);
    void (KHRONOS_APIENTRY * tunisColor4f)(GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisColor4fNormal3fVertex3fSUN)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisColor4fNormal3fVertex3fvSUN)(const GLfloat *, const GLfloat *, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisColor4fv)(const GLfloat *);
    void (KHRONOS_APIENTRY * tunisColor4hNV)(GLhalfNV, GLhalfNV, GLhalfNV, GLhalfNV);
    void (KHRONOS_APIENTRY * tunisColor4hvNV)(const GLhalfNV *);
    void (KHRONOS_APIENTRY * tunisColor4i)(GLint, GLint, GLint, GLint);
    void (KHRONOS_APIENTRY * tunisColor4iv)(const GLint *);
    void (KHRONOS_APIENTRY * tunisColor4s)(GLshort, GLshort, GLshort, GLshort);
    void (KHRONOS_APIENTRY * tunisColor4sv)(const GLshort *);
    void (KHRONOS_APIENTRY * tunisColor4ub)(GLubyte, GLubyte, GLubyte, GLubyte);
    void (KHRONOS_APIENTRY * tunisColor4ubVertex2fSUN)(GLubyte, GLubyte, GLubyte, GLubyte, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisColor4ubVertex2fvSUN)(const GLubyte *, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisColor4ubVertex3fSUN)(GLubyte, GLubyte, GLubyte, GLubyte, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisColor4ubVertex3fvSUN)(const GLubyte *, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisColor4ubv)(const GLubyte *);
    void (KHRONOS_APIENTRY * tunisColor4ui)(GLuint, GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY * tunisColor4uiv)(const GLuint *);
    void (KHRONOS_APIENTRY * tunisColor4us)(GLushort, GLushort, GLushort, GLushort);
    void (KHRONOS_APIENTRY * tunisColor4usv)(const GLushort *);
    void (KHRONOS_APIENTRY * tunisColor4x)(GLfixed, GLfixed, GLfixed, GLfixed);
    void (KHRONOS_APIENTRY * tunisColor4xOES)(GLfixed, GLfixed, GLfixed, GLfixed);
    void (KHRONOS_APIENTRY * tunisColor4xvOES)(const GLfixed *);
    void (KHRONOS_APIENTRY * tunisColorFormatNV)(GLint, GLenum, GLsizei);
    void (KHRONOS_APIENTRY * tunisColorFragmentOp1ATI)(GLenum, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY * tunisColorFragmentOp2ATI)(GLenum, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY * tunisColorFragmentOp3ATI)(GLenum, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY * tunisColorMask)(GLboolean, GLboolean, GLboolean, GLboolean);
    void (KHRONOS_APIENTRY * tunisColorMaskIndexedEXT)(GLuint, GLboolean, GLboolean, GLboolean, GLboolean);
    void (KHRONOS_APIENTRY * tunisColorMaski)(GLuint, GLboolean, GLboolean, GLboolean, GLboolean);
    void (KHRONOS_APIENTRY * tunisColorMaskiEXT)(GLuint, GLboolean, GLboolean, GLboolean, GLboolean);
    void (KHRONOS_APIENTRY * tunisColorMaskiOES)(GLuint, GLboolean, GLboolean, GLboolean, GLboolean);
    void (KHRONOS_APIENTRY * tunisColorMaterial)(GLenum, GLenum);
    void (KHRONOS_APIENTRY * tunisColorP3ui)(GLenum, GLuint);
    void (KHRONOS_APIENTRY * tunisColorP3uiv)(GLenum, const GLuint *);
    void (KHRONOS_APIENTRY * tunisColorP4ui)(GLenum, GLuint);
    void (KHRONOS_APIENTRY * tunisColorP4uiv)(GLenum, const GLuint *);
    void (KHRONOS_APIENTRY * tunisColorPointer)(GLint, GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY * tunisColorPointerEXT)(GLint, GLenum, GLsizei, GLsizei, const void *);
    void (KHRONOS_APIENTRY * tunisColorPointerListIBM)(GLint, GLenum, GLint, const void **, GLint);
    void (KHRONOS_APIENTRY * tunisColorPointervINTEL)(GLint, GLenum, const void **);
    void (KHRONOS_APIENTRY * tunisColorSubTable)(GLenum, GLsizei, GLsizei, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY * tunisColorSubTableEXT)(GLenum, GLsizei, GLsizei, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY * tunisColorTable)(GLenum, GLenum, GLsizei, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY * tunisColorTableEXT)(GLenum, GLenum, GLsizei, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY * tunisColorTableParameterfv)(GLenum, GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisColorTableParameterfvSGI)(GLenum, GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisColorTableParameteriv)(GLenum, GLenum, const GLint *);
    void (KHRONOS_APIENTRY * tunisColorTableParameterivSGI)(GLenum, GLenum, const GLint *);
    void (KHRONOS_APIENTRY * tunisColorTableSGI)(GLenum, GLenum, GLsizei, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY * tunisCombinerInputNV)(GLenum, GLenum, GLenum, GLenum, GLenum, GLenum);
    void (KHRONOS_APIENTRY * tunisCombinerOutputNV)(GLenum, GLenum, GLenum, GLenum, GLenum, GLenum, GLenum, GLboolean, GLboolean, GLboolean);
    void (KHRONOS_APIENTRY * tunisCombinerParameterfNV)(GLenum, GLfloat);
    void (KHRONOS_APIENTRY * tunisCombinerParameterfvNV)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisCombinerParameteriNV)(GLenum, GLint);
    void (KHRONOS_APIENTRY * tunisCombinerParameterivNV)(GLenum, const GLint *);
    void (KHRONOS_APIENTRY * tunisCombinerStageParameterfvNV)(GLenum, GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisCommandListSegmentsNV)(GLuint, GLuint);
    void (KHRONOS_APIENTRY * tunisCompileCommandListNV)(GLuint);
    void (KHRONOS_APIENTRY * tunisCompileShader)(GLuint);
    void (KHRONOS_APIENTRY * tunisCompileShaderARB)(GLhandleARB);
    void (KHRONOS_APIENTRY * tunisCompileShaderIncludeARB)(GLuint, GLsizei, const GLchar *const*, const GLint *);
    void (KHRONOS_APIENTRY * tunisCompressedMultiTexImage1DEXT)(GLenum, GLenum, GLint, GLenum, GLsizei, GLint, GLsizei, const void *);
    void (KHRONOS_APIENTRY * tunisCompressedMultiTexImage2DEXT)(GLenum, GLenum, GLint, GLenum, GLsizei, GLsizei, GLint, GLsizei, const void *);
    void (KHRONOS_APIENTRY * tunisCompressedMultiTexImage3DEXT)(GLenum, GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLsizei, const void *);
    void (KHRONOS_APIENTRY * tunisCompressedMultiTexSubImage1DEXT)(GLenum, GLenum, GLint, GLint, GLsizei, GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY * tunisCompressedMultiTexSubImage2DEXT)(GLenum, GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY * tunisCompressedMultiTexSubImage3DEXT)(GLenum, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY * tunisCompressedTexImage1D)(GLenum, GLint, GLenum, GLsizei, GLint, GLsizei, const void *);
    void (KHRONOS_APIENTRY * tunisCompressedTexImage1DARB)(GLenum, GLint, GLenum, GLsizei, GLint, GLsizei, const void *);
    void (KHRONOS_APIENTRY * tunisCompressedTexImage2D)(GLenum, GLint, GLenum, GLsizei, GLsizei, GLint, GLsizei, const void *);
    void (KHRONOS_APIENTRY * tunisCompressedTexImage2DARB)(GLenum, GLint, GLenum, GLsizei, GLsizei, GLint, GLsizei, const void *);
    void (KHRONOS_APIENTRY * tunisCompressedTexImage3D)(GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLsizei, const void *);
    void (KHRONOS_APIENTRY * tunisCompressedTexImage3DARB)(GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLsizei, const void *);
    void (KHRONOS_APIENTRY * tunisCompressedTexImage3DOES)(GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLsizei, const void *);
    void (KHRONOS_APIENTRY * tunisCompressedTexSubImage1D)(GLenum, GLint, GLint, GLsizei, GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY * tunisCompressedTexSubImage1DARB)(GLenum, GLint, GLint, GLsizei, GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY * tunisCompressedTexSubImage2D)(GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY * tunisCompressedTexSubImage2DARB)(GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY * tunisCompressedTexSubImage3D)(GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY * tunisCompressedTexSubImage3DARB)(GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY * tunisCompressedTexSubImage3DOES)(GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY * tunisCompressedTextureImage1DEXT)(GLuint, GLenum, GLint, GLenum, GLsizei, GLint, GLsizei, const void *);
    void (KHRONOS_APIENTRY * tunisCompressedTextureImage2DEXT)(GLuint, GLenum, GLint, GLenum, GLsizei, GLsizei, GLint, GLsizei, const void *);
    void (KHRONOS_APIENTRY * tunisCompressedTextureImage3DEXT)(GLuint, GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLsizei, const void *);
    void (KHRONOS_APIENTRY * tunisCompressedTextureSubImage1D)(GLuint, GLint, GLint, GLsizei, GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY * tunisCompressedTextureSubImage1DEXT)(GLuint, GLenum, GLint, GLint, GLsizei, GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY * tunisCompressedTextureSubImage2D)(GLuint, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY * tunisCompressedTextureSubImage2DEXT)(GLuint, GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY * tunisCompressedTextureSubImage3D)(GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY * tunisCompressedTextureSubImage3DEXT)(GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY * tunisConservativeRasterParameterfNV)(GLenum, GLfloat);
    void (KHRONOS_APIENTRY * tunisConservativeRasterParameteriNV)(GLenum, GLint);
    void (KHRONOS_APIENTRY * tunisConvolutionFilter1D)(GLenum, GLenum, GLsizei, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY * tunisConvolutionFilter1DEXT)(GLenum, GLenum, GLsizei, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY * tunisConvolutionFilter2D)(GLenum, GLenum, GLsizei, GLsizei, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY * tunisConvolutionFilter2DEXT)(GLenum, GLenum, GLsizei, GLsizei, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY * tunisConvolutionParameterf)(GLenum, GLenum, GLfloat);
    void (KHRONOS_APIENTRY * tunisConvolutionParameterfEXT)(GLenum, GLenum, GLfloat);
    void (KHRONOS_APIENTRY * tunisConvolutionParameterfv)(GLenum, GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisConvolutionParameterfvEXT)(GLenum, GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisConvolutionParameteri)(GLenum, GLenum, GLint);
    void (KHRONOS_APIENTRY * tunisConvolutionParameteriEXT)(GLenum, GLenum, GLint);
    void (KHRONOS_APIENTRY * tunisConvolutionParameteriv)(GLenum, GLenum, const GLint *);
    void (KHRONOS_APIENTRY * tunisConvolutionParameterivEXT)(GLenum, GLenum, const GLint *);
    void (KHRONOS_APIENTRY * tunisConvolutionParameterxOES)(GLenum, GLenum, GLfixed);
    void (KHRONOS_APIENTRY * tunisConvolutionParameterxvOES)(GLenum, GLenum, const GLfixed *);
    void (KHRONOS_APIENTRY * tunisCopyBufferSubData)(GLenum, GLenum, GLintptr, GLintptr, GLsizeiptr);
    void (KHRONOS_APIENTRY * tunisCopyBufferSubDataNV)(GLenum, GLenum, GLintptr, GLintptr, GLsizeiptr);
    void (KHRONOS_APIENTRY * tunisCopyColorSubTable)(GLenum, GLsizei, GLint, GLint, GLsizei);
    void (KHRONOS_APIENTRY * tunisCopyColorSubTableEXT)(GLenum, GLsizei, GLint, GLint, GLsizei);
    void (KHRONOS_APIENTRY * tunisCopyColorTable)(GLenum, GLenum, GLint, GLint, GLsizei);
    void (KHRONOS_APIENTRY * tunisCopyColorTableSGI)(GLenum, GLenum, GLint, GLint, GLsizei);
    void (KHRONOS_APIENTRY * tunisCopyConvolutionFilter1D)(GLenum, GLenum, GLint, GLint, GLsizei);
    void (KHRONOS_APIENTRY * tunisCopyConvolutionFilter1DEXT)(GLenum, GLenum, GLint, GLint, GLsizei);
    void (KHRONOS_APIENTRY * tunisCopyConvolutionFilter2D)(GLenum, GLenum, GLint, GLint, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * tunisCopyConvolutionFilter2DEXT)(GLenum, GLenum, GLint, GLint, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * tunisCopyImageSubData)(GLuint, GLenum, GLint, GLint, GLint, GLint, GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * tunisCopyImageSubDataEXT)(GLuint, GLenum, GLint, GLint, GLint, GLint, GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * tunisCopyImageSubDataNV)(GLuint, GLenum, GLint, GLint, GLint, GLint, GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * tunisCopyImageSubDataOES)(GLuint, GLenum, GLint, GLint, GLint, GLint, GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * tunisCopyMultiTexImage1DEXT)(GLenum, GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLint);
    void (KHRONOS_APIENTRY * tunisCopyMultiTexImage2DEXT)(GLenum, GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLsizei, GLint);
    void (KHRONOS_APIENTRY * tunisCopyMultiTexSubImage1DEXT)(GLenum, GLenum, GLint, GLint, GLint, GLint, GLsizei);
    void (KHRONOS_APIENTRY * tunisCopyMultiTexSubImage2DEXT)(GLenum, GLenum, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * tunisCopyMultiTexSubImage3DEXT)(GLenum, GLenum, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * tunisCopyNamedBufferSubData)(GLuint, GLuint, GLintptr, GLintptr, GLsizeiptr);
    void (KHRONOS_APIENTRY * tunisCopyPathNV)(GLuint, GLuint);
    void (KHRONOS_APIENTRY * tunisCopyPixels)(GLint, GLint, GLsizei, GLsizei, GLenum);
    void (KHRONOS_APIENTRY * tunisCopyTexImage1D)(GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLint);
    void (KHRONOS_APIENTRY * tunisCopyTexImage1DEXT)(GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLint);
    void (KHRONOS_APIENTRY * tunisCopyTexImage2D)(GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLsizei, GLint);
    void (KHRONOS_APIENTRY * tunisCopyTexImage2DEXT)(GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLsizei, GLint);
    void (KHRONOS_APIENTRY * tunisCopyTexSubImage1D)(GLenum, GLint, GLint, GLint, GLint, GLsizei);
    void (KHRONOS_APIENTRY * tunisCopyTexSubImage1DEXT)(GLenum, GLint, GLint, GLint, GLint, GLsizei);
    void (KHRONOS_APIENTRY * tunisCopyTexSubImage2D)(GLenum, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * tunisCopyTexSubImage2DEXT)(GLenum, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * tunisCopyTexSubImage3D)(GLenum, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * tunisCopyTexSubImage3DEXT)(GLenum, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * tunisCopyTexSubImage3DOES)(GLenum, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * tunisCopyTextureImage1DEXT)(GLuint, GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLint);
    void (KHRONOS_APIENTRY * tunisCopyTextureImage2DEXT)(GLuint, GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLsizei, GLint);
    void (KHRONOS_APIENTRY * tunisCopyTextureLevelsAPPLE)(GLuint, GLuint, GLint, GLsizei);
    void (KHRONOS_APIENTRY * tunisCopyTextureSubImage1D)(GLuint, GLint, GLint, GLint, GLint, GLsizei);
    void (KHRONOS_APIENTRY * tunisCopyTextureSubImage1DEXT)(GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei);
    void (KHRONOS_APIENTRY * tunisCopyTextureSubImage2D)(GLuint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * tunisCopyTextureSubImage2DEXT)(GLuint, GLenum, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * tunisCopyTextureSubImage3D)(GLuint, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * tunisCopyTextureSubImage3DEXT)(GLuint, GLenum, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * tunisCoverFillPathInstancedNV)(GLsizei, GLenum, const void *, GLuint, GLenum, GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisCoverFillPathNV)(GLuint, GLenum);
    void (KHRONOS_APIENTRY * tunisCoverStrokePathInstancedNV)(GLsizei, GLenum, const void *, GLuint, GLenum, GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisCoverStrokePathNV)(GLuint, GLenum);
    void (KHRONOS_APIENTRY * tunisCoverageMaskNV)(GLboolean);
    void (KHRONOS_APIENTRY * tunisCoverageModulationNV)(GLenum);
    void (KHRONOS_APIENTRY * tunisCoverageModulationTableNV)(GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisCoverageOperationNV)(GLenum);
    void (KHRONOS_APIENTRY * tunisCreateBuffers)(GLsizei, GLuint *);
    void (KHRONOS_APIENTRY * tunisCreateCommandListsNV)(GLsizei, GLuint *);
    void (KHRONOS_APIENTRY * tunisCreateFramebuffers)(GLsizei, GLuint *);
    void (KHRONOS_APIENTRY * tunisCreateMemoryObjectsEXT)(GLsizei, GLuint *);
    void (KHRONOS_APIENTRY * tunisCreatePerfQueryINTEL)(GLuint, GLuint *);
    GLuint(KHRONOS_APIENTRY * tunisCreateProgram)(void);
    GLhandleARB(KHRONOS_APIENTRY * tunisCreateProgramObjectARB)(void);
    void (KHRONOS_APIENTRY * tunisCreateProgramPipelines)(GLsizei, GLuint *);
    void (KHRONOS_APIENTRY * tunisCreateQueries)(GLenum, GLsizei, GLuint *);
    void (KHRONOS_APIENTRY * tunisCreateRenderbuffers)(GLsizei, GLuint *);
    void (KHRONOS_APIENTRY * tunisCreateSamplers)(GLsizei, GLuint *);
    GLuint(KHRONOS_APIENTRY * tunisCreateShader)(GLenum);
    GLhandleARB(KHRONOS_APIENTRY * tunisCreateShaderObjectARB)(GLenum);
    GLuint(KHRONOS_APIENTRY * tunisCreateShaderProgramEXT)(GLenum, const GLchar *);
    GLuint(KHRONOS_APIENTRY * tunisCreateShaderProgramv)(GLenum, GLsizei, const GLchar *const*);
    GLuint(KHRONOS_APIENTRY * tunisCreateShaderProgramvEXT)(GLenum, GLsizei, const GLchar **);
    void (KHRONOS_APIENTRY * tunisCreateStatesNV)(GLsizei, GLuint *);
    GLsync(KHRONOS_APIENTRY * tunisCreateSyncFromCLeventARB)(struct _cl_context *, struct _cl_event *, GLbitfield);
    void (KHRONOS_APIENTRY * tunisCreateTextures)(GLenum, GLsizei, GLuint *);
    void (KHRONOS_APIENTRY * tunisCreateTransformFeedbacks)(GLsizei, GLuint *);
    void (KHRONOS_APIENTRY * tunisCreateVertexArrays)(GLsizei, GLuint *);
    void (KHRONOS_APIENTRY * tunisCullFace)(GLenum);
    void (KHRONOS_APIENTRY * tunisCullParameterdvEXT)(GLenum, GLdouble *);
    void (KHRONOS_APIENTRY * tunisCullParameterfvEXT)(GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * tunisCurrentPaletteMatrixARB)(GLint);
    void (KHRONOS_APIENTRY * tunisCurrentPaletteMatrixOES)(GLuint);
    void (KHRONOS_APIENTRY * tunisDebugMessageCallback)(GLDEBUGPROC, const void *);
    void (KHRONOS_APIENTRY * tunisDebugMessageCallbackAMD)(GLDEBUGPROCAMD, void *);
    void (KHRONOS_APIENTRY * tunisDebugMessageCallbackARB)(GLDEBUGPROCARB, const void *);
    void (KHRONOS_APIENTRY * tunisDebugMessageCallbackKHR)(GLDEBUGPROCKHR, const void *);
    void (KHRONOS_APIENTRY * tunisDebugMessageControl)(GLenum, GLenum, GLenum, GLsizei, const GLuint *, GLboolean);
    void (KHRONOS_APIENTRY * tunisDebugMessageControlARB)(GLenum, GLenum, GLenum, GLsizei, const GLuint *, GLboolean);
    void (KHRONOS_APIENTRY * tunisDebugMessageControlKHR)(GLenum, GLenum, GLenum, GLsizei, const GLuint *, GLboolean);
    void (KHRONOS_APIENTRY * tunisDebugMessageEnableAMD)(GLenum, GLenum, GLsizei, const GLuint *, GLboolean);
    void (KHRONOS_APIENTRY * tunisDebugMessageInsert)(GLenum, GLenum, GLuint, GLenum, GLsizei, const GLchar *);
    void (KHRONOS_APIENTRY * tunisDebugMessageInsertAMD)(GLenum, GLenum, GLuint, GLsizei, const GLchar *);
    void (KHRONOS_APIENTRY * tunisDebugMessageInsertARB)(GLenum, GLenum, GLuint, GLenum, GLsizei, const GLchar *);
    void (KHRONOS_APIENTRY * tunisDebugMessageInsertKHR)(GLenum, GLenum, GLuint, GLenum, GLsizei, const GLchar *);
    void (KHRONOS_APIENTRY * tunisDeformSGIX)(GLbitfield);
    void (KHRONOS_APIENTRY * tunisDeformationMap3dSGIX)(GLenum, GLdouble, GLdouble, GLint, GLint, GLdouble, GLdouble, GLint, GLint, GLdouble, GLdouble, GLint, GLint, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisDeformationMap3fSGIX)(GLenum, GLfloat, GLfloat, GLint, GLint, GLfloat, GLfloat, GLint, GLint, GLfloat, GLfloat, GLint, GLint, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisDeleteAsyncMarkersSGIX)(GLuint, GLsizei);
    void (KHRONOS_APIENTRY * tunisDeleteBufferRegion)(GLenum);
    void (KHRONOS_APIENTRY * tunisDeleteBuffers)(GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY * tunisDeleteBuffersARB)(GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY * tunisDeleteCommandListsNV)(GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY * tunisDeleteFencesAPPLE)(GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY * tunisDeleteFencesNV)(GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY * tunisDeleteFragmentShaderATI)(GLuint);
    void (KHRONOS_APIENTRY * tunisDeleteFramebuffers)(GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY * tunisDeleteFramebuffersEXT)(GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY * tunisDeleteFramebuffersOES)(GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY * tunisDeleteLists)(GLuint, GLsizei);
    void (KHRONOS_APIENTRY * tunisDeleteMemoryObjectsEXT)(GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY * tunisDeleteNamedStringARB)(GLint, const GLchar *);
    void (KHRONOS_APIENTRY * tunisDeleteNamesAMD)(GLenum, GLuint, const GLuint *);
    void (KHRONOS_APIENTRY * tunisDeleteObjectARB)(GLhandleARB);
    void (KHRONOS_APIENTRY * tunisDeleteOcclusionQueriesNV)(GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY * tunisDeletePathsNV)(GLuint, GLsizei);
    void (KHRONOS_APIENTRY * tunisDeletePerfMonitorsAMD)(GLsizei, GLuint *);
    void (KHRONOS_APIENTRY * tunisDeletePerfQueryINTEL)(GLuint);
    void (KHRONOS_APIENTRY * tunisDeleteProgram)(GLuint);
    void (KHRONOS_APIENTRY * tunisDeleteProgramPipelines)(GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY * tunisDeleteProgramPipelinesEXT)(GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY * tunisDeleteProgramsARB)(GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY * tunisDeleteProgramsNV)(GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY * tunisDeleteQueries)(GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY * tunisDeleteQueriesARB)(GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY * tunisDeleteQueriesEXT)(GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY * tunisDeleteQueryResourceTagNV)(GLsizei, const GLint *);
    void (KHRONOS_APIENTRY * tunisDeleteRenderbuffers)(GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY * tunisDeleteRenderbuffersEXT)(GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY * tunisDeleteRenderbuffersOES)(GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY * tunisDeleteSamplers)(GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY * tunisDeleteSemaphoresEXT)(GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY * tunisDeleteShader)(GLuint);
    void (KHRONOS_APIENTRY * tunisDeleteStatesNV)(GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY * tunisDeleteSync)(GLsync);
    void (KHRONOS_APIENTRY * tunisDeleteSyncAPPLE)(GLsync);
    void (KHRONOS_APIENTRY * tunisDeleteTextures)(GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY * tunisDeleteTexturesEXT)(GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY * tunisDeleteTransformFeedbacks)(GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY * tunisDeleteTransformFeedbacksNV)(GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY * tunisDeleteVertexArrays)(GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY * tunisDeleteVertexArraysAPPLE)(GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY * tunisDeleteVertexArraysOES)(GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY * tunisDeleteVertexShaderEXT)(GLuint);
    void (KHRONOS_APIENTRY * tunisDepthBoundsEXT)(GLclampd, GLclampd);
    void (KHRONOS_APIENTRY * tunisDepthBoundsdNV)(GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * tunisDepthFunc)(GLenum);
    void (KHRONOS_APIENTRY * tunisDepthMask)(GLboolean);
    void (KHRONOS_APIENTRY * tunisDepthRange)(GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * tunisDepthRangeArrayfvNV)(GLuint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisDepthRangeArrayfvOES)(GLuint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisDepthRangeArrayv)(GLuint, GLsizei, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisDepthRangeIndexed)(GLuint, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * tunisDepthRangeIndexedfNV)(GLuint, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisDepthRangeIndexedfOES)(GLuint, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisDepthRangedNV)(GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * tunisDepthRangef)(GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisDepthRangefOES)(GLclampf, GLclampf);
    void (KHRONOS_APIENTRY * tunisDepthRangex)(GLfixed, GLfixed);
    void (KHRONOS_APIENTRY * tunisDepthRangexOES)(GLfixed, GLfixed);
    void (KHRONOS_APIENTRY * tunisDetachObjectARB)(GLhandleARB, GLhandleARB);
    void (KHRONOS_APIENTRY * tunisDetachShader)(GLuint, GLuint);
    void (KHRONOS_APIENTRY * tunisDetailTexFuncSGIS)(GLenum, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisDisable)(GLenum);
    void (KHRONOS_APIENTRY * tunisDisableClientState)(GLenum);
    void (KHRONOS_APIENTRY * tunisDisableClientStateIndexedEXT)(GLenum, GLuint);
    void (KHRONOS_APIENTRY * tunisDisableClientStateiEXT)(GLenum, GLuint);
    void (KHRONOS_APIENTRY * tunisDisableDriverControlQCOM)(GLuint);
    void (KHRONOS_APIENTRY * tunisDisableIndexedEXT)(GLenum, GLuint);
    void (KHRONOS_APIENTRY * tunisDisableVariantClientStateEXT)(GLuint);
    void (KHRONOS_APIENTRY * tunisDisableVertexArrayAttrib)(GLuint, GLuint);
    void (KHRONOS_APIENTRY * tunisDisableVertexArrayAttribEXT)(GLuint, GLuint);
    void (KHRONOS_APIENTRY * tunisDisableVertexArrayEXT)(GLuint, GLenum);
    void (KHRONOS_APIENTRY * tunisDisableVertexAttribAPPLE)(GLuint, GLenum);
    void (KHRONOS_APIENTRY * tunisDisableVertexAttribArray)(GLuint);
    void (KHRONOS_APIENTRY * tunisDisableVertexAttribArrayARB)(GLuint);
    void (KHRONOS_APIENTRY * tunisDisablei)(GLenum, GLuint);
    void (KHRONOS_APIENTRY * tunisDisableiEXT)(GLenum, GLuint);
    void (KHRONOS_APIENTRY * tunisDisableiNV)(GLenum, GLuint);
    void (KHRONOS_APIENTRY * tunisDisableiOES)(GLenum, GLuint);
    void (KHRONOS_APIENTRY * tunisDiscardFramebufferEXT)(GLenum, GLsizei, const GLenum *);
    void (KHRONOS_APIENTRY * tunisDispatchCompute)(GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY * tunisDispatchComputeGroupSizeARB)(GLuint, GLuint, GLuint, GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY * tunisDispatchComputeIndirect)(GLintptr);
    void (KHRONOS_APIENTRY * tunisDrawArrays)(GLenum, GLint, GLsizei);
    void (KHRONOS_APIENTRY * tunisDrawArraysEXT)(GLenum, GLint, GLsizei);
    void (KHRONOS_APIENTRY * tunisDrawArraysIndirect)(GLenum, const void *);
    void (KHRONOS_APIENTRY * tunisDrawArraysInstanced)(GLenum, GLint, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * tunisDrawArraysInstancedANGLE)(GLenum, GLint, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * tunisDrawArraysInstancedARB)(GLenum, GLint, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * tunisDrawArraysInstancedBaseInstance)(GLenum, GLint, GLsizei, GLsizei, GLuint);
    void (KHRONOS_APIENTRY * tunisDrawArraysInstancedBaseInstanceEXT)(GLenum, GLint, GLsizei, GLsizei, GLuint);
    void (KHRONOS_APIENTRY * tunisDrawArraysInstancedEXT)(GLenum, GLint, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * tunisDrawArraysInstancedNV)(GLenum, GLint, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * tunisDrawBuffer)(GLenum);
    void (KHRONOS_APIENTRY * tunisDrawBufferRegion)(GLuint, GLint, GLint, GLsizei, GLsizei, GLint, GLint);
    void (KHRONOS_APIENTRY * tunisDrawBuffers)(GLsizei, const GLenum *);
    void (KHRONOS_APIENTRY * tunisDrawBuffersARB)(GLsizei, const GLenum *);
    void (KHRONOS_APIENTRY * tunisDrawBuffersATI)(GLsizei, const GLenum *);
    void (KHRONOS_APIENTRY * tunisDrawBuffersEXT)(GLsizei, const GLenum *);
    void (KHRONOS_APIENTRY * tunisDrawBuffersIndexedEXT)(GLint, const GLenum *, const GLint *);
    void (KHRONOS_APIENTRY * tunisDrawBuffersNV)(GLsizei, const GLenum *);
    void (KHRONOS_APIENTRY * tunisDrawCommandsAddressNV)(GLenum, const GLuint64 *, const GLsizei *, GLuint);
    void (KHRONOS_APIENTRY * tunisDrawCommandsNV)(GLenum, GLuint, const GLintptr *, const GLsizei *, GLuint);
    void (KHRONOS_APIENTRY * tunisDrawCommandsStatesAddressNV)(const GLuint64 *, const GLsizei *, const GLuint *, const GLuint *, GLuint);
    void (KHRONOS_APIENTRY * tunisDrawCommandsStatesNV)(GLuint, const GLintptr *, const GLsizei *, const GLuint *, const GLuint *, GLuint);
    void (KHRONOS_APIENTRY * tunisDrawElementArrayAPPLE)(GLenum, GLint, GLsizei);
    void (KHRONOS_APIENTRY * tunisDrawElementArrayATI)(GLenum, GLsizei);
    void (KHRONOS_APIENTRY * tunisDrawElements)(GLenum, GLsizei, GLenum, const void *);
    void (KHRONOS_APIENTRY * tunisDrawElementsBaseVertex)(GLenum, GLsizei, GLenum, const void *, GLint);
    void (KHRONOS_APIENTRY * tunisDrawElementsBaseVertexEXT)(GLenum, GLsizei, GLenum, const void *, GLint);
    void (KHRONOS_APIENTRY * tunisDrawElementsBaseVertexOES)(GLenum, GLsizei, GLenum, const void *, GLint);
    void (KHRONOS_APIENTRY * tunisDrawElementsIndirect)(GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY * tunisDrawElementsInstanced)(GLenum, GLsizei, GLenum, const void *, GLsizei);
    void (KHRONOS_APIENTRY * tunisDrawElementsInstancedANGLE)(GLenum, GLsizei, GLenum, const void *, GLsizei);
    void (KHRONOS_APIENTRY * tunisDrawElementsInstancedARB)(GLenum, GLsizei, GLenum, const void *, GLsizei);
    void (KHRONOS_APIENTRY * tunisDrawElementsInstancedBaseInstance)(GLenum, GLsizei, GLenum, const void *, GLsizei, GLuint);
    void (KHRONOS_APIENTRY * tunisDrawElementsInstancedBaseInstanceEXT)(GLenum, GLsizei, GLenum, const void *, GLsizei, GLuint);
    void (KHRONOS_APIENTRY * tunisDrawElementsInstancedBaseVertex)(GLenum, GLsizei, GLenum, const void *, GLsizei, GLint);
    void (KHRONOS_APIENTRY * tunisDrawElementsInstancedBaseVertexBaseInstance)(GLenum, GLsizei, GLenum, const void *, GLsizei, GLint, GLuint);
    void (KHRONOS_APIENTRY * tunisDrawElementsInstancedBaseVertexBaseInstanceEXT)(GLenum, GLsizei, GLenum, const void *, GLsizei, GLint, GLuint);
    void (KHRONOS_APIENTRY * tunisDrawElementsInstancedBaseVertexEXT)(GLenum, GLsizei, GLenum, const void *, GLsizei, GLint);
    void (KHRONOS_APIENTRY * tunisDrawElementsInstancedBaseVertexOES)(GLenum, GLsizei, GLenum, const void *, GLsizei, GLint);
    void (KHRONOS_APIENTRY * tunisDrawElementsInstancedEXT)(GLenum, GLsizei, GLenum, const void *, GLsizei);
    void (KHRONOS_APIENTRY * tunisDrawElementsInstancedNV)(GLenum, GLsizei, GLenum, const void *, GLsizei);
    void (KHRONOS_APIENTRY * tunisDrawMeshArraysSUN)(GLenum, GLint, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * tunisDrawMeshTasksIndirectNV)(GLintptr);
    void (KHRONOS_APIENTRY * tunisDrawMeshTasksNV)(GLuint, GLuint);
    void (KHRONOS_APIENTRY * tunisDrawPixels)(GLsizei, GLsizei, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY * tunisDrawRangeElementArrayAPPLE)(GLenum, GLuint, GLuint, GLint, GLsizei);
    void (KHRONOS_APIENTRY * tunisDrawRangeElementArrayATI)(GLenum, GLuint, GLuint, GLsizei);
    void (KHRONOS_APIENTRY * tunisDrawRangeElements)(GLenum, GLuint, GLuint, GLsizei, GLenum, const void *);
    void (KHRONOS_APIENTRY * tunisDrawRangeElementsBaseVertex)(GLenum, GLuint, GLuint, GLsizei, GLenum, const void *, GLint);
    void (KHRONOS_APIENTRY * tunisDrawRangeElementsBaseVertexEXT)(GLenum, GLuint, GLuint, GLsizei, GLenum, const void *, GLint);
    void (KHRONOS_APIENTRY * tunisDrawRangeElementsBaseVertexOES)(GLenum, GLuint, GLuint, GLsizei, GLenum, const void *, GLint);
    void (KHRONOS_APIENTRY * tunisDrawRangeElementsEXT)(GLenum, GLuint, GLuint, GLsizei, GLenum, const void *);
    void (KHRONOS_APIENTRY * tunisDrawTexfOES)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisDrawTexfvOES)(const GLfloat *);
    void (KHRONOS_APIENTRY * tunisDrawTexiOES)(GLint, GLint, GLint, GLint, GLint);
    void (KHRONOS_APIENTRY * tunisDrawTexivOES)(const GLint *);
    void (KHRONOS_APIENTRY * tunisDrawTexsOES)(GLshort, GLshort, GLshort, GLshort, GLshort);
    void (KHRONOS_APIENTRY * tunisDrawTexsvOES)(const GLshort *);
    void (KHRONOS_APIENTRY * tunisDrawTextureNV)(GLuint, GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisDrawTexxOES)(GLfixed, GLfixed, GLfixed, GLfixed, GLfixed);
    void (KHRONOS_APIENTRY * tunisDrawTexxvOES)(const GLfixed *);
    void (KHRONOS_APIENTRY * tunisDrawTransformFeedback)(GLenum, GLuint);
    void (KHRONOS_APIENTRY * tunisDrawTransformFeedbackEXT)(GLenum, GLuint);
    void (KHRONOS_APIENTRY * tunisDrawTransformFeedbackInstanced)(GLenum, GLuint, GLsizei);
    void (KHRONOS_APIENTRY * tunisDrawTransformFeedbackInstancedEXT)(GLenum, GLuint, GLsizei);
    void (KHRONOS_APIENTRY * tunisDrawTransformFeedbackNV)(GLenum, GLuint);
    void (KHRONOS_APIENTRY * tunisDrawTransformFeedbackStream)(GLenum, GLuint, GLuint);
    void (KHRONOS_APIENTRY * tunisDrawTransformFeedbackStreamInstanced)(GLenum, GLuint, GLuint, GLsizei);
    void (KHRONOS_APIENTRY * tunisDrawVkImageNV)(GLuint64, GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisEGLImageTargetRenderbufferStorageOES)(GLenum, GLeglImageOES);
    void (KHRONOS_APIENTRY * tunisEGLImageTargetTexStorageEXT)(GLenum, GLeglImageOES, const GLint* );
    void (KHRONOS_APIENTRY * tunisEGLImageTargetTexture2DOES)(GLenum, GLeglImageOES);
    void (KHRONOS_APIENTRY * tunisEGLImageTargetTextureStorageEXT)(GLuint, GLeglImageOES, const GLint* );
    void (KHRONOS_APIENTRY * tunisEdgeFlag)(GLboolean);
    void (KHRONOS_APIENTRY * tunisEdgeFlagFormatNV)(GLsizei);
    void (KHRONOS_APIENTRY * tunisEdgeFlagPointer)(GLsizei, const void *);
    void (KHRONOS_APIENTRY * tunisEdgeFlagPointerEXT)(GLsizei, GLsizei, const GLboolean *);
    void (KHRONOS_APIENTRY * tunisEdgeFlagPointerListIBM)(GLint, const GLboolean **, GLint);
    void (KHRONOS_APIENTRY * tunisEdgeFlagv)(const GLboolean *);
    void (KHRONOS_APIENTRY * tunisElementPointerAPPLE)(GLenum, const void *);
    void (KHRONOS_APIENTRY * tunisElementPointerATI)(GLenum, const void *);
    void (KHRONOS_APIENTRY * tunisEnable)(GLenum);
    void (KHRONOS_APIENTRY * tunisEnableClientState)(GLenum);
    void (KHRONOS_APIENTRY * tunisEnableClientStateIndexedEXT)(GLenum, GLuint);
    void (KHRONOS_APIENTRY * tunisEnableClientStateiEXT)(GLenum, GLuint);
    void (KHRONOS_APIENTRY * tunisEnableDriverControlQCOM)(GLuint);
    void (KHRONOS_APIENTRY * tunisEnableIndexedEXT)(GLenum, GLuint);
    void (KHRONOS_APIENTRY * tunisEnableVariantClientStateEXT)(GLuint);
    void (KHRONOS_APIENTRY * tunisEnableVertexArrayAttrib)(GLuint, GLuint);
    void (KHRONOS_APIENTRY * tunisEnableVertexArrayAttribEXT)(GLuint, GLuint);
    void (KHRONOS_APIENTRY * tunisEnableVertexArrayEXT)(GLuint, GLenum);
    void (KHRONOS_APIENTRY * tunisEnableVertexAttribAPPLE)(GLuint, GLenum);
    void (KHRONOS_APIENTRY * tunisEnableVertexAttribArray)(GLuint);
    void (KHRONOS_APIENTRY * tunisEnableVertexAttribArrayARB)(GLuint);
    void (KHRONOS_APIENTRY * tunisEnablei)(GLenum, GLuint);
    void (KHRONOS_APIENTRY * tunisEnableiEXT)(GLenum, GLuint);
    void (KHRONOS_APIENTRY * tunisEnableiNV)(GLenum, GLuint);
    void (KHRONOS_APIENTRY * tunisEnableiOES)(GLenum, GLuint);
    void (KHRONOS_APIENTRY * tunisEnd)(void);
    void (KHRONOS_APIENTRY * tunisEndConditionalRender)(void);
    void (KHRONOS_APIENTRY * tunisEndConditionalRenderNV)(void);
    void (KHRONOS_APIENTRY * tunisEndConditionalRenderNVX)(void);
    void (KHRONOS_APIENTRY * tunisEndFragmentShaderATI)(void);
    void (KHRONOS_APIENTRY * tunisEndList)(void);
    void (KHRONOS_APIENTRY * tunisEndOcclusionQueryNV)(void);
    void (KHRONOS_APIENTRY * tunisEndPerfMonitorAMD)(GLuint);
    void (KHRONOS_APIENTRY * tunisEndPerfQueryINTEL)(GLuint);
    void (KHRONOS_APIENTRY * tunisEndQuery)(GLenum);
    void (KHRONOS_APIENTRY * tunisEndQueryARB)(GLenum);
    void (KHRONOS_APIENTRY * tunisEndQueryEXT)(GLenum);
    void (KHRONOS_APIENTRY * tunisEndQueryIndexed)(GLenum, GLuint);
    void (KHRONOS_APIENTRY * tunisEndTilingQCOM)(GLbitfield);
    void (KHRONOS_APIENTRY * tunisEndTransformFeedback)(void);
    void (KHRONOS_APIENTRY * tunisEndTransformFeedbackEXT)(void);
    void (KHRONOS_APIENTRY * tunisEndTransformFeedbackNV)(void);
    void (KHRONOS_APIENTRY * tunisEndVertexShaderEXT)(void);
    void (KHRONOS_APIENTRY * tunisEndVideoCaptureNV)(GLuint);
    void (KHRONOS_APIENTRY * tunisEvalCoord1d)(GLdouble);
    void (KHRONOS_APIENTRY * tunisEvalCoord1dv)(const GLdouble *);
    void (KHRONOS_APIENTRY * tunisEvalCoord1f)(GLfloat);
    void (KHRONOS_APIENTRY * tunisEvalCoord1fv)(const GLfloat *);
    void (KHRONOS_APIENTRY * tunisEvalCoord1xOES)(GLfixed);
    void (KHRONOS_APIENTRY * tunisEvalCoord1xvOES)(const GLfixed *);
    void (KHRONOS_APIENTRY * tunisEvalCoord2d)(GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * tunisEvalCoord2dv)(const GLdouble *);
    void (KHRONOS_APIENTRY * tunisEvalCoord2f)(GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisEvalCoord2fv)(const GLfloat *);
    void (KHRONOS_APIENTRY * tunisEvalCoord2xOES)(GLfixed, GLfixed);
    void (KHRONOS_APIENTRY * tunisEvalCoord2xvOES)(const GLfixed *);
    void (KHRONOS_APIENTRY * tunisEvalMapsNV)(GLenum, GLenum);
    void (KHRONOS_APIENTRY * tunisEvalMesh1)(GLenum, GLint, GLint);
    void (KHRONOS_APIENTRY * tunisEvalMesh2)(GLenum, GLint, GLint, GLint, GLint);
    void (KHRONOS_APIENTRY * tunisEvalPoint1)(GLint);
    void (KHRONOS_APIENTRY * tunisEvalPoint2)(GLint, GLint);
    void (KHRONOS_APIENTRY * tunisEvaluateDepthValuesARB)(void);
    void (KHRONOS_APIENTRY * tunisExecuteProgramNV)(GLenum, GLuint, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisExtGetBufferPointervQCOM)(GLenum, void **);
    void (KHRONOS_APIENTRY * tunisExtGetBuffersQCOM)(GLuint *, GLint, GLint *);
    void (KHRONOS_APIENTRY * tunisExtGetFramebuffersQCOM)(GLuint *, GLint, GLint *);
    void (KHRONOS_APIENTRY * tunisExtGetProgramBinarySourceQCOM)(GLuint, GLenum, GLchar *, GLint *);
    void (KHRONOS_APIENTRY * tunisExtGetProgramsQCOM)(GLuint *, GLint, GLint *);
    void (KHRONOS_APIENTRY * tunisExtGetRenderbuffersQCOM)(GLuint *, GLint, GLint *);
    void (KHRONOS_APIENTRY * tunisExtGetShadersQCOM)(GLuint *, GLint, GLint *);
    void (KHRONOS_APIENTRY * tunisExtGetTexLevelParameterivQCOM)(GLuint, GLenum, GLint, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisExtGetTexSubImageQCOM)(GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, void *);
    void (KHRONOS_APIENTRY * tunisExtGetTexturesQCOM)(GLuint *, GLint, GLint *);
    GLboolean(KHRONOS_APIENTRY * tunisExtIsProgramBinaryQCOM)(GLuint);
    void (KHRONOS_APIENTRY * tunisExtTexObjectStateOverrideiQCOM)(GLenum, GLenum, GLint);
    void (KHRONOS_APIENTRY * tunisExtractComponentEXT)(GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY * tunisFeedbackBuffer)(GLsizei, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * tunisFeedbackBufferxOES)(GLsizei, GLenum, const GLfixed *);
    GLsync(KHRONOS_APIENTRY * tunisFenceSync)(GLenum, GLbitfield);
    GLsync(KHRONOS_APIENTRY * tunisFenceSyncAPPLE)(GLenum, GLbitfield);
    void (KHRONOS_APIENTRY * tunisFinalCombinerInputNV)(GLenum, GLenum, GLenum, GLenum);
    void (KHRONOS_APIENTRY * tunisFinish)(void);
    GLint(KHRONOS_APIENTRY * tunisFinishAsyncSGIX)(GLuint *);
    void (KHRONOS_APIENTRY * tunisFinishFenceAPPLE)(GLuint);
    void (KHRONOS_APIENTRY * tunisFinishFenceNV)(GLuint);
    void (KHRONOS_APIENTRY * tunisFinishObjectAPPLE)(GLenum, GLint);
    void (KHRONOS_APIENTRY * tunisFinishTextureSUNX)(void);
    void (KHRONOS_APIENTRY * tunisFlush)(void);
    void (KHRONOS_APIENTRY * tunisFlushMappedBufferRange)(GLenum, GLintptr, GLsizeiptr);
    void (KHRONOS_APIENTRY * tunisFlushMappedBufferRangeAPPLE)(GLenum, GLintptr, GLsizeiptr);
    void (KHRONOS_APIENTRY * tunisFlushMappedBufferRangeEXT)(GLenum, GLintptr, GLsizeiptr);
    void (KHRONOS_APIENTRY * tunisFlushMappedNamedBufferRange)(GLuint, GLintptr, GLsizeiptr);
    void (KHRONOS_APIENTRY * tunisFlushMappedNamedBufferRangeEXT)(GLuint, GLintptr, GLsizeiptr);
    void (KHRONOS_APIENTRY * tunisFlushPixelDataRangeNV)(GLenum);
    void (KHRONOS_APIENTRY * tunisFlushRasterSGIX)(void);
    void (KHRONOS_APIENTRY * tunisFlushStaticDataIBM)(GLenum);
    void (KHRONOS_APIENTRY * tunisFlushVertexArrayRangeAPPLE)(GLsizei, void *);
    void (KHRONOS_APIENTRY * tunisFlushVertexArrayRangeNV)(void);
    void (KHRONOS_APIENTRY * tunisFogCoordFormatNV)(GLenum, GLsizei);
    void (KHRONOS_APIENTRY * tunisFogCoordPointer)(GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY * tunisFogCoordPointerEXT)(GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY * tunisFogCoordPointerListIBM)(GLenum, GLint, const void **, GLint);
    void (KHRONOS_APIENTRY * tunisFogCoordd)(GLdouble);
    void (KHRONOS_APIENTRY * tunisFogCoorddEXT)(GLdouble);
    void (KHRONOS_APIENTRY * tunisFogCoorddv)(const GLdouble *);
    void (KHRONOS_APIENTRY * tunisFogCoorddvEXT)(const GLdouble *);
    void (KHRONOS_APIENTRY * tunisFogCoordf)(GLfloat);
    void (KHRONOS_APIENTRY * tunisFogCoordfEXT)(GLfloat);
    void (KHRONOS_APIENTRY * tunisFogCoordfv)(const GLfloat *);
    void (KHRONOS_APIENTRY * tunisFogCoordfvEXT)(const GLfloat *);
    void (KHRONOS_APIENTRY * tunisFogCoordhNV)(GLhalfNV);
    void (KHRONOS_APIENTRY * tunisFogCoordhvNV)(const GLhalfNV *);
    void (KHRONOS_APIENTRY * tunisFogFuncSGIS)(GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisFogf)(GLenum, GLfloat);
    void (KHRONOS_APIENTRY * tunisFogfv)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisFogi)(GLenum, GLint);
    void (KHRONOS_APIENTRY * tunisFogiv)(GLenum, const GLint *);
    void (KHRONOS_APIENTRY * tunisFogx)(GLenum, GLfixed);
    void (KHRONOS_APIENTRY * tunisFogxOES)(GLenum, GLfixed);
    void (KHRONOS_APIENTRY * tunisFogxv)(GLenum, const GLfixed *);
    void (KHRONOS_APIENTRY * tunisFogxvOES)(GLenum, const GLfixed *);
    void (KHRONOS_APIENTRY * tunisFragmentColorMaterialSGIX)(GLenum, GLenum);
    void (KHRONOS_APIENTRY * tunisFragmentCoverageColorNV)(GLuint);
    void (KHRONOS_APIENTRY * tunisFragmentLightModelfSGIX)(GLenum, GLfloat);
    void (KHRONOS_APIENTRY * tunisFragmentLightModelfvSGIX)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisFragmentLightModeliSGIX)(GLenum, GLint);
    void (KHRONOS_APIENTRY * tunisFragmentLightModelivSGIX)(GLenum, const GLint *);
    void (KHRONOS_APIENTRY * tunisFragmentLightfSGIX)(GLenum, GLenum, GLfloat);
    void (KHRONOS_APIENTRY * tunisFragmentLightfvSGIX)(GLenum, GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisFragmentLightiSGIX)(GLenum, GLenum, GLint);
    void (KHRONOS_APIENTRY * tunisFragmentLightivSGIX)(GLenum, GLenum, const GLint *);
    void (KHRONOS_APIENTRY * tunisFragmentMaterialfSGIX)(GLenum, GLenum, GLfloat);
    void (KHRONOS_APIENTRY * tunisFragmentMaterialfvSGIX)(GLenum, GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisFragmentMaterialiSGIX)(GLenum, GLenum, GLint);
    void (KHRONOS_APIENTRY * tunisFragmentMaterialivSGIX)(GLenum, GLenum, const GLint *);
    void (KHRONOS_APIENTRY * tunisFrameTerminatorGREMEDY)(void);
    void (KHRONOS_APIENTRY * tunisFrameZoomSGIX)(GLint);
    void (KHRONOS_APIENTRY * tunisFramebufferDrawBufferEXT)(GLuint, GLenum);
    void (KHRONOS_APIENTRY * tunisFramebufferDrawBuffersEXT)(GLuint, GLsizei, const GLenum *);
    void (KHRONOS_APIENTRY * tunisFramebufferFetchBarrierEXT)(void);
    void (KHRONOS_APIENTRY * tunisFramebufferFetchBarrierQCOM)(void);
    void (KHRONOS_APIENTRY * tunisFramebufferFoveationConfigQCOM)(GLuint, GLuint, GLuint, GLuint, GLuint *);
    void (KHRONOS_APIENTRY * tunisFramebufferFoveationParametersQCOM)(GLuint, GLuint, GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisFramebufferParameteri)(GLenum, GLenum, GLint);
    void (KHRONOS_APIENTRY * tunisFramebufferPixelLocalStorageSizeEXT)(GLuint, GLsizei);
    void (KHRONOS_APIENTRY * tunisFramebufferReadBufferEXT)(GLuint, GLenum);
    void (KHRONOS_APIENTRY * tunisFramebufferRenderbuffer)(GLenum, GLenum, GLenum, GLuint);
    void (KHRONOS_APIENTRY * tunisFramebufferRenderbufferEXT)(GLenum, GLenum, GLenum, GLuint);
    void (KHRONOS_APIENTRY * tunisFramebufferRenderbufferOES)(GLenum, GLenum, GLenum, GLuint);
    void (KHRONOS_APIENTRY * tunisFramebufferSampleLocationsfvARB)(GLenum, GLuint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisFramebufferSampleLocationsfvNV)(GLenum, GLuint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisFramebufferSamplePositionsfvAMD)(GLenum, GLuint, GLuint, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisFramebufferTexture)(GLenum, GLenum, GLuint, GLint);
    void (KHRONOS_APIENTRY * tunisFramebufferTexture1D)(GLenum, GLenum, GLenum, GLuint, GLint);
    void (KHRONOS_APIENTRY * tunisFramebufferTexture1DEXT)(GLenum, GLenum, GLenum, GLuint, GLint);
    void (KHRONOS_APIENTRY * tunisFramebufferTexture2D)(GLenum, GLenum, GLenum, GLuint, GLint);
    void (KHRONOS_APIENTRY * tunisFramebufferTexture2DDownsampleIMG)(GLenum, GLenum, GLenum, GLuint, GLint, GLint, GLint);
    void (KHRONOS_APIENTRY * tunisFramebufferTexture2DEXT)(GLenum, GLenum, GLenum, GLuint, GLint);
    void (KHRONOS_APIENTRY * tunisFramebufferTexture2DMultisampleEXT)(GLenum, GLenum, GLenum, GLuint, GLint, GLsizei);
    void (KHRONOS_APIENTRY * tunisFramebufferTexture2DMultisampleIMG)(GLenum, GLenum, GLenum, GLuint, GLint, GLsizei);
    void (KHRONOS_APIENTRY * tunisFramebufferTexture2DOES)(GLenum, GLenum, GLenum, GLuint, GLint);
    void (KHRONOS_APIENTRY * tunisFramebufferTexture3D)(GLenum, GLenum, GLenum, GLuint, GLint, GLint);
    void (KHRONOS_APIENTRY * tunisFramebufferTexture3DEXT)(GLenum, GLenum, GLenum, GLuint, GLint, GLint);
    void (KHRONOS_APIENTRY * tunisFramebufferTexture3DOES)(GLenum, GLenum, GLenum, GLuint, GLint, GLint);
    void (KHRONOS_APIENTRY * tunisFramebufferTextureARB)(GLenum, GLenum, GLuint, GLint);
    void (KHRONOS_APIENTRY * tunisFramebufferTextureEXT)(GLenum, GLenum, GLuint, GLint);
    void (KHRONOS_APIENTRY * tunisFramebufferTextureFaceARB)(GLenum, GLenum, GLuint, GLint, GLenum);
    void (KHRONOS_APIENTRY * tunisFramebufferTextureFaceEXT)(GLenum, GLenum, GLuint, GLint, GLenum);
    void (KHRONOS_APIENTRY * tunisFramebufferTextureLayer)(GLenum, GLenum, GLuint, GLint, GLint);
    void (KHRONOS_APIENTRY * tunisFramebufferTextureLayerARB)(GLenum, GLenum, GLuint, GLint, GLint);
    void (KHRONOS_APIENTRY * tunisFramebufferTextureLayerDownsampleIMG)(GLenum, GLenum, GLuint, GLint, GLint, GLint, GLint);
    void (KHRONOS_APIENTRY * tunisFramebufferTextureLayerEXT)(GLenum, GLenum, GLuint, GLint, GLint);
    void (KHRONOS_APIENTRY * tunisFramebufferTextureMultisampleMultiviewOVR)(GLenum, GLenum, GLuint, GLint, GLsizei, GLint, GLsizei);
    void (KHRONOS_APIENTRY * tunisFramebufferTextureMultiviewOVR)(GLenum, GLenum, GLuint, GLint, GLint, GLsizei);
    void (KHRONOS_APIENTRY * tunisFramebufferTextureOES)(GLenum, GLenum, GLuint, GLint);
    void (KHRONOS_APIENTRY * tunisFreeObjectBufferATI)(GLuint);
    void (KHRONOS_APIENTRY * tunisFrontFace)(GLenum);
    void (KHRONOS_APIENTRY * tunisFrustum)(GLdouble, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * tunisFrustumf)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisFrustumfOES)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisFrustumx)(GLfixed, GLfixed, GLfixed, GLfixed, GLfixed, GLfixed);
    void (KHRONOS_APIENTRY * tunisFrustumxOES)(GLfixed, GLfixed, GLfixed, GLfixed, GLfixed, GLfixed);
    GLuint(KHRONOS_APIENTRY * tunisGenAsyncMarkersSGIX)(GLsizei);
    void (KHRONOS_APIENTRY * tunisGenBuffers)(GLsizei, GLuint *);
    void (KHRONOS_APIENTRY * tunisGenBuffersARB)(GLsizei, GLuint *);
    void (KHRONOS_APIENTRY * tunisGenFencesAPPLE)(GLsizei, GLuint *);
    void (KHRONOS_APIENTRY * tunisGenFencesNV)(GLsizei, GLuint *);
    GLuint(KHRONOS_APIENTRY * tunisGenFragmentShadersATI)(GLuint);
    void (KHRONOS_APIENTRY * tunisGenFramebuffers)(GLsizei, GLuint *);
    void (KHRONOS_APIENTRY * tunisGenFramebuffersEXT)(GLsizei, GLuint *);
    void (KHRONOS_APIENTRY * tunisGenFramebuffersOES)(GLsizei, GLuint *);
    GLuint(KHRONOS_APIENTRY * tunisGenLists)(GLsizei);
    void (KHRONOS_APIENTRY * tunisGenNamesAMD)(GLenum, GLuint, GLuint *);
    void (KHRONOS_APIENTRY * tunisGenOcclusionQueriesNV)(GLsizei, GLuint *);
    GLuint(KHRONOS_APIENTRY * tunisGenPathsNV)(GLsizei);
    void (KHRONOS_APIENTRY * tunisGenPerfMonitorsAMD)(GLsizei, GLuint *);
    void (KHRONOS_APIENTRY * tunisGenProgramPipelines)(GLsizei, GLuint *);
    void (KHRONOS_APIENTRY * tunisGenProgramPipelinesEXT)(GLsizei, GLuint *);
    void (KHRONOS_APIENTRY * tunisGenProgramsARB)(GLsizei, GLuint *);
    void (KHRONOS_APIENTRY * tunisGenProgramsNV)(GLsizei, GLuint *);
    void (KHRONOS_APIENTRY * tunisGenQueries)(GLsizei, GLuint *);
    void (KHRONOS_APIENTRY * tunisGenQueriesARB)(GLsizei, GLuint *);
    void (KHRONOS_APIENTRY * tunisGenQueriesEXT)(GLsizei, GLuint *);
    void (KHRONOS_APIENTRY * tunisGenQueryResourceTagNV)(GLsizei, GLint *);
    void (KHRONOS_APIENTRY * tunisGenRenderbuffers)(GLsizei, GLuint *);
    void (KHRONOS_APIENTRY * tunisGenRenderbuffersEXT)(GLsizei, GLuint *);
    void (KHRONOS_APIENTRY * tunisGenRenderbuffersOES)(GLsizei, GLuint *);
    void (KHRONOS_APIENTRY * tunisGenSamplers)(GLsizei, GLuint *);
    void (KHRONOS_APIENTRY * tunisGenSemaphoresEXT)(GLsizei, GLuint *);
    GLuint(KHRONOS_APIENTRY * tunisGenSymbolsEXT)(GLenum, GLenum, GLenum, GLuint);
    void (KHRONOS_APIENTRY * tunisGenTextures)(GLsizei, GLuint *);
    void (KHRONOS_APIENTRY * tunisGenTexturesEXT)(GLsizei, GLuint *);
    void (KHRONOS_APIENTRY * tunisGenTransformFeedbacks)(GLsizei, GLuint *);
    void (KHRONOS_APIENTRY * tunisGenTransformFeedbacksNV)(GLsizei, GLuint *);
    void (KHRONOS_APIENTRY * tunisGenVertexArrays)(GLsizei, GLuint *);
    void (KHRONOS_APIENTRY * tunisGenVertexArraysAPPLE)(GLsizei, GLuint *);
    void (KHRONOS_APIENTRY * tunisGenVertexArraysOES)(GLsizei, GLuint *);
    GLuint(KHRONOS_APIENTRY * tunisGenVertexShadersEXT)(GLuint);
    void (KHRONOS_APIENTRY * tunisGenerateMipmap)(GLenum);
    void (KHRONOS_APIENTRY * tunisGenerateMipmapEXT)(GLenum);
    void (KHRONOS_APIENTRY * tunisGenerateMipmapOES)(GLenum);
    void (KHRONOS_APIENTRY * tunisGenerateMultiTexMipmapEXT)(GLenum, GLenum);
    void (KHRONOS_APIENTRY * tunisGenerateTextureMipmap)(GLuint);
    void (KHRONOS_APIENTRY * tunisGenerateTextureMipmapEXT)(GLuint, GLenum);
    void (KHRONOS_APIENTRY * tunisGetActiveAtomicCounterBufferiv)(GLuint, GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetActiveAttrib)(GLuint, GLuint, GLsizei, GLsizei *, GLint *, GLenum *, GLchar *);
    void (KHRONOS_APIENTRY * tunisGetActiveAttribARB)(GLhandleARB, GLuint, GLsizei, GLsizei *, GLint *, GLenum *, GLcharARB *);
    void (KHRONOS_APIENTRY * tunisGetActiveSubroutineName)(GLuint, GLenum, GLuint, GLsizei, GLsizei *, GLchar *);
    void (KHRONOS_APIENTRY * tunisGetActiveSubroutineUniformName)(GLuint, GLenum, GLuint, GLsizei, GLsizei *, GLchar *);
    void (KHRONOS_APIENTRY * tunisGetActiveSubroutineUniformiv)(GLuint, GLenum, GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetActiveUniform)(GLuint, GLuint, GLsizei, GLsizei *, GLint *, GLenum *, GLchar *);
    void (KHRONOS_APIENTRY * tunisGetActiveUniformARB)(GLhandleARB, GLuint, GLsizei, GLsizei *, GLint *, GLenum *, GLcharARB *);
    void (KHRONOS_APIENTRY * tunisGetActiveUniformBlockName)(GLuint, GLuint, GLsizei, GLsizei *, GLchar *);
    void (KHRONOS_APIENTRY * tunisGetActiveUniformBlockiv)(GLuint, GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetActiveUniformName)(GLuint, GLuint, GLsizei, GLsizei *, GLchar *);
    void (KHRONOS_APIENTRY * tunisGetActiveUniformsiv)(GLuint, GLsizei, const GLuint *, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetActiveVaryingNV)(GLuint, GLuint, GLsizei, GLsizei *, GLsizei *, GLenum *, GLchar *);
    void (KHRONOS_APIENTRY * tunisGetArrayObjectfvATI)(GLenum, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * tunisGetArrayObjectivATI)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetAttachedObjectsARB)(GLhandleARB, GLsizei, GLsizei *, GLhandleARB *);
    void (KHRONOS_APIENTRY * tunisGetAttachedShaders)(GLuint, GLsizei, GLsizei *, GLuint *);
    GLint(KHRONOS_APIENTRY * tunisGetAttribLocation)(GLuint, const GLchar *);
    GLint(KHRONOS_APIENTRY * tunisGetAttribLocationARB)(GLhandleARB, const GLcharARB *);
    void (KHRONOS_APIENTRY * tunisGetBooleanIndexedvEXT)(GLenum, GLuint, GLboolean *);
    void (KHRONOS_APIENTRY * tunisGetBooleani_v)(GLenum, GLuint, GLboolean *);
    void (KHRONOS_APIENTRY * tunisGetBooleanv)(GLenum, GLboolean *);
    void (KHRONOS_APIENTRY * tunisGetBufferParameteri64v)(GLenum, GLenum, GLint64 *);
    void (KHRONOS_APIENTRY * tunisGetBufferParameteriv)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetBufferParameterivARB)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetBufferParameterui64vNV)(GLenum, GLenum, GLuint64EXT *);
    void (KHRONOS_APIENTRY * tunisGetBufferPointerv)(GLenum, GLenum, void **);
    void (KHRONOS_APIENTRY * tunisGetBufferPointervARB)(GLenum, GLenum, void **);
    void (KHRONOS_APIENTRY * tunisGetBufferPointervOES)(GLenum, GLenum, void **);
    void (KHRONOS_APIENTRY * tunisGetBufferSubData)(GLenum, GLintptr, GLsizeiptr, void *);
    void (KHRONOS_APIENTRY * tunisGetBufferSubDataARB)(GLenum, GLintptrARB, GLsizeiptrARB, void *);
    void (KHRONOS_APIENTRY * tunisGetClipPlane)(GLenum, GLdouble *);
    void (KHRONOS_APIENTRY * tunisGetClipPlanef)(GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * tunisGetClipPlanefOES)(GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * tunisGetClipPlanex)(GLenum, GLfixed *);
    void (KHRONOS_APIENTRY * tunisGetClipPlanexOES)(GLenum, GLfixed *);
    void (KHRONOS_APIENTRY * tunisGetColorTable)(GLenum, GLenum, GLenum, void *);
    void (KHRONOS_APIENTRY * tunisGetColorTableEXT)(GLenum, GLenum, GLenum, void *);
    void (KHRONOS_APIENTRY * tunisGetColorTableParameterfv)(GLenum, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * tunisGetColorTableParameterfvEXT)(GLenum, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * tunisGetColorTableParameterfvSGI)(GLenum, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * tunisGetColorTableParameteriv)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetColorTableParameterivEXT)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetColorTableParameterivSGI)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetColorTableSGI)(GLenum, GLenum, GLenum, void *);
    void (KHRONOS_APIENTRY * tunisGetCombinerInputParameterfvNV)(GLenum, GLenum, GLenum, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * tunisGetCombinerInputParameterivNV)(GLenum, GLenum, GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetCombinerOutputParameterfvNV)(GLenum, GLenum, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * tunisGetCombinerOutputParameterivNV)(GLenum, GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetCombinerStageParameterfvNV)(GLenum, GLenum, GLfloat *);
    GLuint(KHRONOS_APIENTRY * tunisGetCommandHeaderNV)(GLenum, GLuint);
    void (KHRONOS_APIENTRY * tunisGetCompressedMultiTexImageEXT)(GLenum, GLenum, GLint, void *);
    void (KHRONOS_APIENTRY * tunisGetCompressedTexImage)(GLenum, GLint, void *);
    void (KHRONOS_APIENTRY * tunisGetCompressedTexImageARB)(GLenum, GLint, void *);
    void (KHRONOS_APIENTRY * tunisGetCompressedTextureImage)(GLuint, GLint, GLsizei, void *);
    void (KHRONOS_APIENTRY * tunisGetCompressedTextureImageEXT)(GLuint, GLenum, GLint, void *);
    void (KHRONOS_APIENTRY * tunisGetCompressedTextureSubImage)(GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLsizei, void *);
    void (KHRONOS_APIENTRY * tunisGetConvolutionFilter)(GLenum, GLenum, GLenum, void *);
    void (KHRONOS_APIENTRY * tunisGetConvolutionFilterEXT)(GLenum, GLenum, GLenum, void *);
    void (KHRONOS_APIENTRY * tunisGetConvolutionParameterfv)(GLenum, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * tunisGetConvolutionParameterfvEXT)(GLenum, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * tunisGetConvolutionParameteriv)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetConvolutionParameterivEXT)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetConvolutionParameterxvOES)(GLenum, GLenum, GLfixed *);
    void (KHRONOS_APIENTRY * tunisGetCoverageModulationTableNV)(GLsizei, GLfloat *);
    GLuint(KHRONOS_APIENTRY * tunisGetDebugMessageLog)(GLuint, GLsizei, GLenum *, GLenum *, GLuint *, GLenum *, GLsizei *, GLchar *);
    GLuint(KHRONOS_APIENTRY * tunisGetDebugMessageLogAMD)(GLuint, GLsizei, GLenum *, GLuint *, GLuint *, GLsizei *, GLchar *);
    GLuint(KHRONOS_APIENTRY * tunisGetDebugMessageLogARB)(GLuint, GLsizei, GLenum *, GLenum *, GLuint *, GLenum *, GLsizei *, GLchar *);
    GLuint(KHRONOS_APIENTRY * tunisGetDebugMessageLogKHR)(GLuint, GLsizei, GLenum *, GLenum *, GLuint *, GLenum *, GLsizei *, GLchar *);
    void (KHRONOS_APIENTRY * tunisGetDetailTexFuncSGIS)(GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * tunisGetDoubleIndexedvEXT)(GLenum, GLuint, GLdouble *);
    void (KHRONOS_APIENTRY * tunisGetDoublei_v)(GLenum, GLuint, GLdouble *);
    void (KHRONOS_APIENTRY * tunisGetDoublei_vEXT)(GLenum, GLuint, GLdouble *);
    void (KHRONOS_APIENTRY * tunisGetDoublev)(GLenum, GLdouble *);
    void (KHRONOS_APIENTRY * tunisGetDriverControlStringQCOM)(GLuint, GLsizei, GLsizei *, GLchar *);
    void (KHRONOS_APIENTRY * tunisGetDriverControlsQCOM)(GLint *, GLsizei, GLuint *);
    GLenum(KHRONOS_APIENTRY * tunisGetError)(void);
    void (KHRONOS_APIENTRY * tunisGetFenceivNV)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetFinalCombinerInputParameterfvNV)(GLenum, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * tunisGetFinalCombinerInputParameterivNV)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetFirstPerfQueryIdINTEL)(GLuint *);
    void (KHRONOS_APIENTRY * tunisGetFixedv)(GLenum, GLfixed *);
    void (KHRONOS_APIENTRY * tunisGetFixedvOES)(GLenum, GLfixed *);
    void (KHRONOS_APIENTRY * tunisGetFloatIndexedvEXT)(GLenum, GLuint, GLfloat *);
    void (KHRONOS_APIENTRY * tunisGetFloati_v)(GLenum, GLuint, GLfloat *);
    void (KHRONOS_APIENTRY * tunisGetFloati_vEXT)(GLenum, GLuint, GLfloat *);
    void (KHRONOS_APIENTRY * tunisGetFloati_vNV)(GLenum, GLuint, GLfloat *);
    void (KHRONOS_APIENTRY * tunisGetFloati_vOES)(GLenum, GLuint, GLfloat *);
    void (KHRONOS_APIENTRY * tunisGetFloatv)(GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * tunisGetFogFuncSGIS)(GLfloat *);
    GLint(KHRONOS_APIENTRY * tunisGetFragDataIndex)(GLuint, const GLchar *);
    GLint(KHRONOS_APIENTRY * tunisGetFragDataIndexEXT)(GLuint, const GLchar *);
    GLint(KHRONOS_APIENTRY * tunisGetFragDataLocation)(GLuint, const GLchar *);
    GLint(KHRONOS_APIENTRY * tunisGetFragDataLocationEXT)(GLuint, const GLchar *);
    void (KHRONOS_APIENTRY * tunisGetFragmentLightfvSGIX)(GLenum, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * tunisGetFragmentLightivSGIX)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetFragmentMaterialfvSGIX)(GLenum, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * tunisGetFragmentMaterialivSGIX)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetFramebufferAttachmentParameteriv)(GLenum, GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetFramebufferAttachmentParameterivEXT)(GLenum, GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetFramebufferAttachmentParameterivOES)(GLenum, GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetFramebufferParameterfvAMD)(GLenum, GLenum, GLuint, GLuint, GLsizei, GLfloat *);
    void (KHRONOS_APIENTRY * tunisGetFramebufferParameteriv)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetFramebufferParameterivEXT)(GLuint, GLenum, GLint *);
    GLsizei(KHRONOS_APIENTRY * tunisGetFramebufferPixelLocalStorageSizeEXT)(GLuint);
    GLenum(KHRONOS_APIENTRY * tunisGetGraphicsResetStatus)(void);
    GLenum(KHRONOS_APIENTRY * tunisGetGraphicsResetStatusARB)(void);
    GLenum(KHRONOS_APIENTRY * tunisGetGraphicsResetStatusEXT)(void);
    GLenum(KHRONOS_APIENTRY * tunisGetGraphicsResetStatusKHR)(void);
    GLhandleARB(KHRONOS_APIENTRY * tunisGetHandleARB)(GLenum);
    void (KHRONOS_APIENTRY * tunisGetHistogram)(GLenum, GLboolean, GLenum, GLenum, void *);
    void (KHRONOS_APIENTRY * tunisGetHistogramEXT)(GLenum, GLboolean, GLenum, GLenum, void *);
    void (KHRONOS_APIENTRY * tunisGetHistogramParameterfv)(GLenum, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * tunisGetHistogramParameterfvEXT)(GLenum, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * tunisGetHistogramParameteriv)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetHistogramParameterivEXT)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetHistogramParameterxvOES)(GLenum, GLenum, GLfixed *);
    GLuint64(KHRONOS_APIENTRY * tunisGetImageHandleARB)(GLuint, GLint, GLboolean, GLint, GLenum);
    GLuint64(KHRONOS_APIENTRY * tunisGetImageHandleNV)(GLuint, GLint, GLboolean, GLint, GLenum);
    void (KHRONOS_APIENTRY * tunisGetImageTransformParameterfvHP)(GLenum, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * tunisGetImageTransformParameterivHP)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetInfoLogARB)(GLhandleARB, GLsizei, GLsizei *, GLcharARB *);
    GLint(KHRONOS_APIENTRY * tunisGetInstrumentsSGIX)(void);
    void (KHRONOS_APIENTRY * tunisGetInteger64i_v)(GLenum, GLuint, GLint64 *);
    void (KHRONOS_APIENTRY * tunisGetInteger64v)(GLenum, GLint64 *);
    void (KHRONOS_APIENTRY * tunisGetInteger64vAPPLE)(GLenum, GLint64 *);
    void (KHRONOS_APIENTRY * tunisGetIntegerIndexedvEXT)(GLenum, GLuint, GLint *);
    void (KHRONOS_APIENTRY * tunisGetIntegeri_v)(GLenum, GLuint, GLint *);
    void (KHRONOS_APIENTRY * tunisGetIntegeri_vEXT)(GLenum, GLuint, GLint *);
    void (KHRONOS_APIENTRY * tunisGetIntegerui64i_vNV)(GLenum, GLuint, GLuint64EXT *);
    void (KHRONOS_APIENTRY * tunisGetIntegerui64vNV)(GLenum, GLuint64EXT *);
    void (KHRONOS_APIENTRY * tunisGetIntegerv)(GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetInternalformatSampleivNV)(GLenum, GLenum, GLsizei, GLenum, GLsizei, GLint *);
    void (KHRONOS_APIENTRY * tunisGetInternalformati64v)(GLenum, GLenum, GLenum, GLsizei, GLint64 *);
    void (KHRONOS_APIENTRY * tunisGetInternalformativ)(GLenum, GLenum, GLenum, GLsizei, GLint *);
    void (KHRONOS_APIENTRY * tunisGetInvariantBooleanvEXT)(GLuint, GLenum, GLboolean *);
    void (KHRONOS_APIENTRY * tunisGetInvariantFloatvEXT)(GLuint, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * tunisGetInvariantIntegervEXT)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetLightfv)(GLenum, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * tunisGetLightiv)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetLightxOES)(GLenum, GLenum, GLfixed *);
    void (KHRONOS_APIENTRY * tunisGetLightxv)(GLenum, GLenum, GLfixed *);
    void (KHRONOS_APIENTRY * tunisGetLightxvOES)(GLenum, GLenum, GLfixed *);
    void (KHRONOS_APIENTRY * tunisGetListParameterfvSGIX)(GLuint, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * tunisGetListParameterivSGIX)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetLocalConstantBooleanvEXT)(GLuint, GLenum, GLboolean *);
    void (KHRONOS_APIENTRY * tunisGetLocalConstantFloatvEXT)(GLuint, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * tunisGetLocalConstantIntegervEXT)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetMapAttribParameterfvNV)(GLenum, GLuint, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * tunisGetMapAttribParameterivNV)(GLenum, GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetMapControlPointsNV)(GLenum, GLuint, GLenum, GLsizei, GLsizei, GLboolean, void *);
    void (KHRONOS_APIENTRY * tunisGetMapParameterfvNV)(GLenum, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * tunisGetMapParameterivNV)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetMapdv)(GLenum, GLenum, GLdouble *);
    void (KHRONOS_APIENTRY * tunisGetMapfv)(GLenum, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * tunisGetMapiv)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetMapxvOES)(GLenum, GLenum, GLfixed *);
    void (KHRONOS_APIENTRY * tunisGetMaterialfv)(GLenum, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * tunisGetMaterialiv)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetMaterialxOES)(GLenum, GLenum, GLfixed);
    void (KHRONOS_APIENTRY * tunisGetMaterialxv)(GLenum, GLenum, GLfixed *);
    void (KHRONOS_APIENTRY * tunisGetMaterialxvOES)(GLenum, GLenum, GLfixed *);
    void (KHRONOS_APIENTRY * tunisGetMemoryObjectDetachedResourcesuivNV)(GLuint, GLenum, GLint, GLsizei, GLuint *);
    void (KHRONOS_APIENTRY * tunisGetMemoryObjectParameterivEXT)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetMinmax)(GLenum, GLboolean, GLenum, GLenum, void *);
    void (KHRONOS_APIENTRY * tunisGetMinmaxEXT)(GLenum, GLboolean, GLenum, GLenum, void *);
    void (KHRONOS_APIENTRY * tunisGetMinmaxParameterfv)(GLenum, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * tunisGetMinmaxParameterfvEXT)(GLenum, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * tunisGetMinmaxParameteriv)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetMinmaxParameterivEXT)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetMultiTexEnvfvEXT)(GLenum, GLenum, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * tunisGetMultiTexEnvivEXT)(GLenum, GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetMultiTexGendvEXT)(GLenum, GLenum, GLenum, GLdouble *);
    void (KHRONOS_APIENTRY * tunisGetMultiTexGenfvEXT)(GLenum, GLenum, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * tunisGetMultiTexGenivEXT)(GLenum, GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetMultiTexImageEXT)(GLenum, GLenum, GLint, GLenum, GLenum, void *);
    void (KHRONOS_APIENTRY * tunisGetMultiTexLevelParameterfvEXT)(GLenum, GLenum, GLint, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * tunisGetMultiTexLevelParameterivEXT)(GLenum, GLenum, GLint, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetMultiTexParameterIivEXT)(GLenum, GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetMultiTexParameterIuivEXT)(GLenum, GLenum, GLenum, GLuint *);
    void (KHRONOS_APIENTRY * tunisGetMultiTexParameterfvEXT)(GLenum, GLenum, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * tunisGetMultiTexParameterivEXT)(GLenum, GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetMultisamplefv)(GLenum, GLuint, GLfloat *);
    void (KHRONOS_APIENTRY * tunisGetMultisamplefvNV)(GLenum, GLuint, GLfloat *);
    void (KHRONOS_APIENTRY * tunisGetNamedBufferParameteri64v)(GLuint, GLenum, GLint64 *);
    void (KHRONOS_APIENTRY * tunisGetNamedBufferParameteriv)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetNamedBufferParameterivEXT)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetNamedBufferParameterui64vNV)(GLuint, GLenum, GLuint64EXT *);
    void (KHRONOS_APIENTRY * tunisGetNamedBufferPointerv)(GLuint, GLenum, void **);
    void (KHRONOS_APIENTRY * tunisGetNamedBufferPointervEXT)(GLuint, GLenum, void **);
    void (KHRONOS_APIENTRY * tunisGetNamedBufferSubData)(GLuint, GLintptr, GLsizeiptr, void *);
    void (KHRONOS_APIENTRY * tunisGetNamedBufferSubDataEXT)(GLuint, GLintptr, GLsizeiptr, void *);
    void (KHRONOS_APIENTRY * tunisGetNamedFramebufferAttachmentParameteriv)(GLuint, GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetNamedFramebufferAttachmentParameterivEXT)(GLuint, GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetNamedFramebufferParameterfvAMD)(GLuint, GLenum, GLuint, GLuint, GLsizei, GLfloat *);
    void (KHRONOS_APIENTRY * tunisGetNamedFramebufferParameteriv)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetNamedFramebufferParameterivEXT)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetNamedProgramLocalParameterIivEXT)(GLuint, GLenum, GLuint, GLint *);
    void (KHRONOS_APIENTRY * tunisGetNamedProgramLocalParameterIuivEXT)(GLuint, GLenum, GLuint, GLuint *);
    void (KHRONOS_APIENTRY * tunisGetNamedProgramLocalParameterdvEXT)(GLuint, GLenum, GLuint, GLdouble *);
    void (KHRONOS_APIENTRY * tunisGetNamedProgramLocalParameterfvEXT)(GLuint, GLenum, GLuint, GLfloat *);
    void (KHRONOS_APIENTRY * tunisGetNamedProgramStringEXT)(GLuint, GLenum, GLenum, void *);
    void (KHRONOS_APIENTRY * tunisGetNamedProgramivEXT)(GLuint, GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetNamedRenderbufferParameteriv)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetNamedRenderbufferParameterivEXT)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetNamedStringARB)(GLint, const GLchar *, GLsizei, GLint *, GLchar *);
    void (KHRONOS_APIENTRY * tunisGetNamedStringivARB)(GLint, const GLchar *, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetNextPerfQueryIdINTEL)(GLuint, GLuint *);
    void (KHRONOS_APIENTRY * tunisGetObjectBufferfvATI)(GLuint, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * tunisGetObjectBufferivATI)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetObjectLabel)(GLenum, GLuint, GLsizei, GLsizei *, GLchar *);
    void (KHRONOS_APIENTRY * tunisGetObjectLabelEXT)(GLenum, GLuint, GLsizei, GLsizei *, GLchar *);
    void (KHRONOS_APIENTRY * tunisGetObjectLabelKHR)(GLenum, GLuint, GLsizei, GLsizei *, GLchar *);
    void (KHRONOS_APIENTRY * tunisGetObjectParameterfvARB)(GLhandleARB, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * tunisGetObjectParameterivAPPLE)(GLenum, GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetObjectParameterivARB)(GLhandleARB, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetObjectPtrLabel)(const void *, GLsizei, GLsizei *, GLchar *);
    void (KHRONOS_APIENTRY * tunisGetObjectPtrLabelKHR)(const void *, GLsizei, GLsizei *, GLchar *);
    void (KHRONOS_APIENTRY * tunisGetOcclusionQueryivNV)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetOcclusionQueryuivNV)(GLuint, GLenum, GLuint *);
    void (KHRONOS_APIENTRY * tunisGetPathColorGenfvNV)(GLenum, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * tunisGetPathColorGenivNV)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetPathCommandsNV)(GLuint, GLubyte *);
    void (KHRONOS_APIENTRY * tunisGetPathCoordsNV)(GLuint, GLfloat *);
    void (KHRONOS_APIENTRY * tunisGetPathDashArrayNV)(GLuint, GLfloat *);
    GLfloat(KHRONOS_APIENTRY * tunisGetPathLengthNV)(GLuint, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * tunisGetPathMetricRangeNV)(GLbitfield, GLuint, GLsizei, GLsizei, GLfloat *);
    void (KHRONOS_APIENTRY * tunisGetPathMetricsNV)(GLbitfield, GLsizei, GLenum, const void *, GLuint, GLsizei, GLfloat *);
    void (KHRONOS_APIENTRY * tunisGetPathParameterfvNV)(GLuint, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * tunisGetPathParameterivNV)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetPathSpacingNV)(GLenum, GLsizei, GLenum, const void *, GLuint, GLfloat, GLfloat, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * tunisGetPathTexGenfvNV)(GLenum, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * tunisGetPathTexGenivNV)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetPerfCounterInfoINTEL)(GLuint, GLuint, GLuint, GLchar *, GLuint, GLchar *, GLuint *, GLuint *, GLuint *, GLuint *, GLuint64 *);
    void (KHRONOS_APIENTRY * tunisGetPerfMonitorCounterDataAMD)(GLuint, GLenum, GLsizei, GLuint *, GLint *);
    void (KHRONOS_APIENTRY * tunisGetPerfMonitorCounterInfoAMD)(GLuint, GLuint, GLenum, void *);
    void (KHRONOS_APIENTRY * tunisGetPerfMonitorCounterStringAMD)(GLuint, GLuint, GLsizei, GLsizei *, GLchar *);
    void (KHRONOS_APIENTRY * tunisGetPerfMonitorCountersAMD)(GLuint, GLint *, GLint *, GLsizei, GLuint *);
    void (KHRONOS_APIENTRY * tunisGetPerfMonitorGroupStringAMD)(GLuint, GLsizei, GLsizei *, GLchar *);
    void (KHRONOS_APIENTRY * tunisGetPerfMonitorGroupsAMD)(GLint *, GLsizei, GLuint *);
    void (KHRONOS_APIENTRY * tunisGetPerfQueryDataINTEL)(GLuint, GLuint, GLsizei, void *, GLuint *);
    void (KHRONOS_APIENTRY * tunisGetPerfQueryIdByNameINTEL)(GLchar *, GLuint *);
    void (KHRONOS_APIENTRY * tunisGetPerfQueryInfoINTEL)(GLuint, GLuint, GLchar *, GLuint *, GLuint *, GLuint *, GLuint *);
    void (KHRONOS_APIENTRY * tunisGetPixelMapfv)(GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * tunisGetPixelMapuiv)(GLenum, GLuint *);
    void (KHRONOS_APIENTRY * tunisGetPixelMapusv)(GLenum, GLushort *);
    void (KHRONOS_APIENTRY * tunisGetPixelMapxv)(GLenum, GLint, GLfixed *);
    void (KHRONOS_APIENTRY * tunisGetPixelTexGenParameterfvSGIS)(GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * tunisGetPixelTexGenParameterivSGIS)(GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetPixelTransformParameterfvEXT)(GLenum, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * tunisGetPixelTransformParameterivEXT)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetPointerIndexedvEXT)(GLenum, GLuint, void **);
    void (KHRONOS_APIENTRY * tunisGetPointeri_vEXT)(GLenum, GLuint, void **);
    void (KHRONOS_APIENTRY * tunisGetPointerv)(GLenum, void **);
    void (KHRONOS_APIENTRY * tunisGetPointervEXT)(GLenum, void **);
    void (KHRONOS_APIENTRY * tunisGetPointervKHR)(GLenum, void **);
    void (KHRONOS_APIENTRY * tunisGetPolygonStipple)(GLubyte *);
    void (KHRONOS_APIENTRY * tunisGetProgramBinary)(GLuint, GLsizei, GLsizei *, GLenum *, void *);
    void (KHRONOS_APIENTRY * tunisGetProgramBinaryOES)(GLuint, GLsizei, GLsizei *, GLenum *, void *);
    void (KHRONOS_APIENTRY * tunisGetProgramEnvParameterIivNV)(GLenum, GLuint, GLint *);
    void (KHRONOS_APIENTRY * tunisGetProgramEnvParameterIuivNV)(GLenum, GLuint, GLuint *);
    void (KHRONOS_APIENTRY * tunisGetProgramEnvParameterdvARB)(GLenum, GLuint, GLdouble *);
    void (KHRONOS_APIENTRY * tunisGetProgramEnvParameterfvARB)(GLenum, GLuint, GLfloat *);
    void (KHRONOS_APIENTRY * tunisGetProgramInfoLog)(GLuint, GLsizei, GLsizei *, GLchar *);
    void (KHRONOS_APIENTRY * tunisGetProgramInterfaceiv)(GLuint, GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetProgramLocalParameterIivNV)(GLenum, GLuint, GLint *);
    void (KHRONOS_APIENTRY * tunisGetProgramLocalParameterIuivNV)(GLenum, GLuint, GLuint *);
    void (KHRONOS_APIENTRY * tunisGetProgramLocalParameterdvARB)(GLenum, GLuint, GLdouble *);
    void (KHRONOS_APIENTRY * tunisGetProgramLocalParameterfvARB)(GLenum, GLuint, GLfloat *);
    void (KHRONOS_APIENTRY * tunisGetProgramNamedParameterdvNV)(GLuint, GLsizei, const GLubyte *, GLdouble *);
    void (KHRONOS_APIENTRY * tunisGetProgramNamedParameterfvNV)(GLuint, GLsizei, const GLubyte *, GLfloat *);
    void (KHRONOS_APIENTRY * tunisGetProgramParameterdvNV)(GLenum, GLuint, GLenum, GLdouble *);
    void (KHRONOS_APIENTRY * tunisGetProgramParameterfvNV)(GLenum, GLuint, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * tunisGetProgramPipelineInfoLog)(GLuint, GLsizei, GLsizei *, GLchar *);
    void (KHRONOS_APIENTRY * tunisGetProgramPipelineInfoLogEXT)(GLuint, GLsizei, GLsizei *, GLchar *);
    void (KHRONOS_APIENTRY * tunisGetProgramPipelineiv)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetProgramPipelineivEXT)(GLuint, GLenum, GLint *);
    GLuint(KHRONOS_APIENTRY * tunisGetProgramResourceIndex)(GLuint, GLenum, const GLchar *);
    GLint(KHRONOS_APIENTRY * tunisGetProgramResourceLocation)(GLuint, GLenum, const GLchar *);
    GLint(KHRONOS_APIENTRY * tunisGetProgramResourceLocationIndex)(GLuint, GLenum, const GLchar *);
    GLint(KHRONOS_APIENTRY * tunisGetProgramResourceLocationIndexEXT)(GLuint, GLenum, const GLchar *);
    void (KHRONOS_APIENTRY * tunisGetProgramResourceName)(GLuint, GLenum, GLuint, GLsizei, GLsizei *, GLchar *);
    void (KHRONOS_APIENTRY * tunisGetProgramResourcefvNV)(GLuint, GLenum, GLuint, GLsizei, const GLenum *, GLsizei, GLsizei *, GLfloat *);
    void (KHRONOS_APIENTRY * tunisGetProgramResourceiv)(GLuint, GLenum, GLuint, GLsizei, const GLenum *, GLsizei, GLsizei *, GLint *);
    void (KHRONOS_APIENTRY * tunisGetProgramStageiv)(GLuint, GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetProgramStringARB)(GLenum, GLenum, void *);
    void (KHRONOS_APIENTRY * tunisGetProgramStringNV)(GLuint, GLenum, GLubyte *);
    void (KHRONOS_APIENTRY * tunisGetProgramSubroutineParameteruivNV)(GLenum, GLuint, GLuint *);
    void (KHRONOS_APIENTRY * tunisGetProgramiv)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetProgramivARB)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetProgramivNV)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetQueryBufferObjecti64v)(GLuint, GLuint, GLenum, GLintptr);
    void (KHRONOS_APIENTRY * tunisGetQueryBufferObjectiv)(GLuint, GLuint, GLenum, GLintptr);
    void (KHRONOS_APIENTRY * tunisGetQueryBufferObjectui64v)(GLuint, GLuint, GLenum, GLintptr);
    void (KHRONOS_APIENTRY * tunisGetQueryBufferObjectuiv)(GLuint, GLuint, GLenum, GLintptr);
    void (KHRONOS_APIENTRY * tunisGetQueryIndexediv)(GLenum, GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetQueryObjecti64v)(GLuint, GLenum, GLint64 *);
    void (KHRONOS_APIENTRY * tunisGetQueryObjecti64vEXT)(GLuint, GLenum, GLint64 *);
    void (KHRONOS_APIENTRY * tunisGetQueryObjectiv)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetQueryObjectivARB)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetQueryObjectivEXT)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetQueryObjectui64v)(GLuint, GLenum, GLuint64 *);
    void (KHRONOS_APIENTRY * tunisGetQueryObjectui64vEXT)(GLuint, GLenum, GLuint64 *);
    void (KHRONOS_APIENTRY * tunisGetQueryObjectuiv)(GLuint, GLenum, GLuint *);
    void (KHRONOS_APIENTRY * tunisGetQueryObjectuivARB)(GLuint, GLenum, GLuint *);
    void (KHRONOS_APIENTRY * tunisGetQueryObjectuivEXT)(GLuint, GLenum, GLuint *);
    void (KHRONOS_APIENTRY * tunisGetQueryiv)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetQueryivARB)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetQueryivEXT)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetRenderbufferParameteriv)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetRenderbufferParameterivEXT)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetRenderbufferParameterivOES)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetSamplerParameterIiv)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetSamplerParameterIivEXT)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetSamplerParameterIivOES)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetSamplerParameterIuiv)(GLuint, GLenum, GLuint *);
    void (KHRONOS_APIENTRY * tunisGetSamplerParameterIuivEXT)(GLuint, GLenum, GLuint *);
    void (KHRONOS_APIENTRY * tunisGetSamplerParameterIuivOES)(GLuint, GLenum, GLuint *);
    void (KHRONOS_APIENTRY * tunisGetSamplerParameterfv)(GLuint, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * tunisGetSamplerParameteriv)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetSemaphoreParameterui64vEXT)(GLuint, GLenum, GLuint64 *);
    void (KHRONOS_APIENTRY * tunisGetSeparableFilter)(GLenum, GLenum, GLenum, void *, void *, void *);
    void (KHRONOS_APIENTRY * tunisGetSeparableFilterEXT)(GLenum, GLenum, GLenum, void *, void *, void *);
    void (KHRONOS_APIENTRY * tunisGetShaderInfoLog)(GLuint, GLsizei, GLsizei *, GLchar *);
    void (KHRONOS_APIENTRY * tunisGetShaderPrecisionFormat)(GLenum, GLenum, GLint *, GLint *);
    void (KHRONOS_APIENTRY * tunisGetShaderSource)(GLuint, GLsizei, GLsizei *, GLchar *);
    void (KHRONOS_APIENTRY * tunisGetShaderSourceARB)(GLhandleARB, GLsizei, GLsizei *, GLcharARB *);
    void (KHRONOS_APIENTRY * tunisGetShaderiv)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetShadingRateImagePaletteNV)(GLuint, GLuint, GLenum *);
    void (KHRONOS_APIENTRY * tunisGetShadingRateSampleLocationivNV)(GLenum, GLuint, GLuint, GLint *);
    void (KHRONOS_APIENTRY * tunisGetSharpenTexFuncSGIS)(GLenum, GLfloat *);
    GLushort(KHRONOS_APIENTRY * tunisGetStageIndexNV)(GLenum);
    const GLubyte *(KHRONOS_APIENTRY * tunisGetString)(GLenum);
    const GLubyte *(KHRONOS_APIENTRY * tunisGetStringi)(GLenum, GLuint);
    GLuint(KHRONOS_APIENTRY * tunisGetSubroutineIndex)(GLuint, GLenum, const GLchar *);
    GLint(KHRONOS_APIENTRY * tunisGetSubroutineUniformLocation)(GLuint, GLenum, const GLchar *);
    void (KHRONOS_APIENTRY * tunisGetSynciv)(GLsync, GLenum, GLsizei, GLsizei *, GLint *);
    void (KHRONOS_APIENTRY * tunisGetSyncivAPPLE)(GLsync, GLenum, GLsizei, GLsizei *, GLint *);
    void (KHRONOS_APIENTRY * tunisGetTexBumpParameterfvATI)(GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * tunisGetTexBumpParameterivATI)(GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetTexEnvfv)(GLenum, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * tunisGetTexEnviv)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetTexEnvxv)(GLenum, GLenum, GLfixed *);
    void (KHRONOS_APIENTRY * tunisGetTexEnvxvOES)(GLenum, GLenum, GLfixed *);
    void (KHRONOS_APIENTRY * tunisGetTexFilterFuncSGIS)(GLenum, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * tunisGetTexGendv)(GLenum, GLenum, GLdouble *);
    void (KHRONOS_APIENTRY * tunisGetTexGenfv)(GLenum, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * tunisGetTexGenfvOES)(GLenum, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * tunisGetTexGeniv)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetTexGenivOES)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetTexGenxvOES)(GLenum, GLenum, GLfixed *);
    void (KHRONOS_APIENTRY * tunisGetTexImage)(GLenum, GLint, GLenum, GLenum, void *);
    void (KHRONOS_APIENTRY * tunisGetTexLevelParameterfv)(GLenum, GLint, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * tunisGetTexLevelParameteriv)(GLenum, GLint, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetTexLevelParameterxvOES)(GLenum, GLint, GLenum, GLfixed *);
    void (KHRONOS_APIENTRY * tunisGetTexParameterIiv)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetTexParameterIivEXT)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetTexParameterIivOES)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetTexParameterIuiv)(GLenum, GLenum, GLuint *);
    void (KHRONOS_APIENTRY * tunisGetTexParameterIuivEXT)(GLenum, GLenum, GLuint *);
    void (KHRONOS_APIENTRY * tunisGetTexParameterIuivOES)(GLenum, GLenum, GLuint *);
    void (KHRONOS_APIENTRY * tunisGetTexParameterPointervAPPLE)(GLenum, GLenum, void **);
    void (KHRONOS_APIENTRY * tunisGetTexParameterfv)(GLenum, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * tunisGetTexParameteriv)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetTexParameterxv)(GLenum, GLenum, GLfixed *);
    void (KHRONOS_APIENTRY * tunisGetTexParameterxvOES)(GLenum, GLenum, GLfixed *);
    GLuint64(KHRONOS_APIENTRY * tunisGetTextureHandleARB)(GLuint);
    GLuint64(KHRONOS_APIENTRY * tunisGetTextureHandleIMG)(GLuint);
    GLuint64(KHRONOS_APIENTRY * tunisGetTextureHandleNV)(GLuint);
    void (KHRONOS_APIENTRY * tunisGetTextureImage)(GLuint, GLint, GLenum, GLenum, GLsizei, void *);
    void (KHRONOS_APIENTRY * tunisGetTextureImageEXT)(GLuint, GLenum, GLint, GLenum, GLenum, void *);
    void (KHRONOS_APIENTRY * tunisGetTextureLevelParameterfv)(GLuint, GLint, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * tunisGetTextureLevelParameterfvEXT)(GLuint, GLenum, GLint, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * tunisGetTextureLevelParameteriv)(GLuint, GLint, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetTextureLevelParameterivEXT)(GLuint, GLenum, GLint, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetTextureParameterIiv)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetTextureParameterIivEXT)(GLuint, GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetTextureParameterIuiv)(GLuint, GLenum, GLuint *);
    void (KHRONOS_APIENTRY * tunisGetTextureParameterIuivEXT)(GLuint, GLenum, GLenum, GLuint *);
    void (KHRONOS_APIENTRY * tunisGetTextureParameterfv)(GLuint, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * tunisGetTextureParameterfvEXT)(GLuint, GLenum, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * tunisGetTextureParameteriv)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetTextureParameterivEXT)(GLuint, GLenum, GLenum, GLint *);
    GLuint64(KHRONOS_APIENTRY * tunisGetTextureSamplerHandleARB)(GLuint, GLuint);
    GLuint64(KHRONOS_APIENTRY * tunisGetTextureSamplerHandleIMG)(GLuint, GLuint);
    GLuint64(KHRONOS_APIENTRY * tunisGetTextureSamplerHandleNV)(GLuint, GLuint);
    void (KHRONOS_APIENTRY * tunisGetTextureSubImage)(GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, GLsizei, void *);
    void (KHRONOS_APIENTRY * tunisGetTrackMatrixivNV)(GLenum, GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetTransformFeedbackVarying)(GLuint, GLuint, GLsizei, GLsizei *, GLsizei *, GLenum *, GLchar *);
    void (KHRONOS_APIENTRY * tunisGetTransformFeedbackVaryingEXT)(GLuint, GLuint, GLsizei, GLsizei *, GLsizei *, GLenum *, GLchar *);
    void (KHRONOS_APIENTRY * tunisGetTransformFeedbackVaryingNV)(GLuint, GLuint, GLint *);
    void (KHRONOS_APIENTRY * tunisGetTransformFeedbacki64_v)(GLuint, GLenum, GLuint, GLint64 *);
    void (KHRONOS_APIENTRY * tunisGetTransformFeedbacki_v)(GLuint, GLenum, GLuint, GLint *);
    void (KHRONOS_APIENTRY * tunisGetTransformFeedbackiv)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetTranslatedShaderSourceANGLE)(GLuint, GLsizei, GLsizei *, GLchar *);
    GLuint(KHRONOS_APIENTRY * tunisGetUniformBlockIndex)(GLuint, const GLchar *);
    GLint(KHRONOS_APIENTRY * tunisGetUniformBufferSizeEXT)(GLuint, GLint);
    void (KHRONOS_APIENTRY * tunisGetUniformIndices)(GLuint, GLsizei, const GLchar *const*, GLuint *);
    GLint(KHRONOS_APIENTRY * tunisGetUniformLocation)(GLuint, const GLchar *);
    GLint(KHRONOS_APIENTRY * tunisGetUniformLocationARB)(GLhandleARB, const GLcharARB *);
    GLintptr(KHRONOS_APIENTRY * tunisGetUniformOffsetEXT)(GLuint, GLint);
    void (KHRONOS_APIENTRY * tunisGetUniformSubroutineuiv)(GLenum, GLint, GLuint *);
    void (KHRONOS_APIENTRY * tunisGetUniformdv)(GLuint, GLint, GLdouble *);
    void (KHRONOS_APIENTRY * tunisGetUniformfv)(GLuint, GLint, GLfloat *);
    void (KHRONOS_APIENTRY * tunisGetUniformfvARB)(GLhandleARB, GLint, GLfloat *);
    void (KHRONOS_APIENTRY * tunisGetUniformi64vARB)(GLuint, GLint, GLint64 *);
    void (KHRONOS_APIENTRY * tunisGetUniformi64vNV)(GLuint, GLint, GLint64EXT *);
    void (KHRONOS_APIENTRY * tunisGetUniformiv)(GLuint, GLint, GLint *);
    void (KHRONOS_APIENTRY * tunisGetUniformivARB)(GLhandleARB, GLint, GLint *);
    void (KHRONOS_APIENTRY * tunisGetUniformui64vARB)(GLuint, GLint, GLuint64 *);
    void (KHRONOS_APIENTRY * tunisGetUniformui64vNV)(GLuint, GLint, GLuint64EXT *);
    void (KHRONOS_APIENTRY * tunisGetUniformuiv)(GLuint, GLint, GLuint *);
    void (KHRONOS_APIENTRY * tunisGetUniformuivEXT)(GLuint, GLint, GLuint *);
    void (KHRONOS_APIENTRY * tunisGetUnsignedBytei_vEXT)(GLenum, GLuint, GLubyte *);
    void (KHRONOS_APIENTRY * tunisGetUnsignedBytevEXT)(GLenum, GLubyte *);
    void (KHRONOS_APIENTRY * tunisGetVariantArrayObjectfvATI)(GLuint, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * tunisGetVariantArrayObjectivATI)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetVariantBooleanvEXT)(GLuint, GLenum, GLboolean *);
    void (KHRONOS_APIENTRY * tunisGetVariantFloatvEXT)(GLuint, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * tunisGetVariantIntegervEXT)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetVariantPointervEXT)(GLuint, GLenum, void **);
    GLint(KHRONOS_APIENTRY * tunisGetVaryingLocationNV)(GLuint, const GLchar *);
    void (KHRONOS_APIENTRY * tunisGetVertexArrayIndexed64iv)(GLuint, GLuint, GLenum, GLint64 *);
    void (KHRONOS_APIENTRY * tunisGetVertexArrayIndexediv)(GLuint, GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetVertexArrayIntegeri_vEXT)(GLuint, GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetVertexArrayIntegervEXT)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetVertexArrayPointeri_vEXT)(GLuint, GLuint, GLenum, void **);
    void (KHRONOS_APIENTRY * tunisGetVertexArrayPointervEXT)(GLuint, GLenum, void **);
    void (KHRONOS_APIENTRY * tunisGetVertexArrayiv)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetVertexAttribArrayObjectfvATI)(GLuint, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * tunisGetVertexAttribArrayObjectivATI)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetVertexAttribIiv)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetVertexAttribIivEXT)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetVertexAttribIuiv)(GLuint, GLenum, GLuint *);
    void (KHRONOS_APIENTRY * tunisGetVertexAttribIuivEXT)(GLuint, GLenum, GLuint *);
    void (KHRONOS_APIENTRY * tunisGetVertexAttribLdv)(GLuint, GLenum, GLdouble *);
    void (KHRONOS_APIENTRY * tunisGetVertexAttribLdvEXT)(GLuint, GLenum, GLdouble *);
    void (KHRONOS_APIENTRY * tunisGetVertexAttribLi64vNV)(GLuint, GLenum, GLint64EXT *);
    void (KHRONOS_APIENTRY * tunisGetVertexAttribLui64vARB)(GLuint, GLenum, GLuint64EXT *);
    void (KHRONOS_APIENTRY * tunisGetVertexAttribLui64vNV)(GLuint, GLenum, GLuint64EXT *);
    void (KHRONOS_APIENTRY * tunisGetVertexAttribPointerv)(GLuint, GLenum, void **);
    void (KHRONOS_APIENTRY * tunisGetVertexAttribPointervARB)(GLuint, GLenum, void **);
    void (KHRONOS_APIENTRY * tunisGetVertexAttribPointervNV)(GLuint, GLenum, void **);
    void (KHRONOS_APIENTRY * tunisGetVertexAttribdv)(GLuint, GLenum, GLdouble *);
    void (KHRONOS_APIENTRY * tunisGetVertexAttribdvARB)(GLuint, GLenum, GLdouble *);
    void (KHRONOS_APIENTRY * tunisGetVertexAttribdvNV)(GLuint, GLenum, GLdouble *);
    void (KHRONOS_APIENTRY * tunisGetVertexAttribfv)(GLuint, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * tunisGetVertexAttribfvARB)(GLuint, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * tunisGetVertexAttribfvNV)(GLuint, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * tunisGetVertexAttribiv)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetVertexAttribivARB)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetVertexAttribivNV)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetVideoCaptureStreamdvNV)(GLuint, GLuint, GLenum, GLdouble *);
    void (KHRONOS_APIENTRY * tunisGetVideoCaptureStreamfvNV)(GLuint, GLuint, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * tunisGetVideoCaptureStreamivNV)(GLuint, GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetVideoCaptureivNV)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetVideoi64vNV)(GLuint, GLenum, GLint64EXT *);
    void (KHRONOS_APIENTRY * tunisGetVideoivNV)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisGetVideoui64vNV)(GLuint, GLenum, GLuint64EXT *);
    void (KHRONOS_APIENTRY * tunisGetVideouivNV)(GLuint, GLenum, GLuint *);
    GLVULKANPROCNV(KHRONOS_APIENTRY * tunisGetVkProcAddrNV)(const GLchar *);
    void (KHRONOS_APIENTRY * tunisGetnColorTable)(GLenum, GLenum, GLenum, GLsizei, void *);
    void (KHRONOS_APIENTRY * tunisGetnColorTableARB)(GLenum, GLenum, GLenum, GLsizei, void *);
    void (KHRONOS_APIENTRY * tunisGetnCompressedTexImage)(GLenum, GLint, GLsizei, void *);
    void (KHRONOS_APIENTRY * tunisGetnCompressedTexImageARB)(GLenum, GLint, GLsizei, void *);
    void (KHRONOS_APIENTRY * tunisGetnConvolutionFilter)(GLenum, GLenum, GLenum, GLsizei, void *);
    void (KHRONOS_APIENTRY * tunisGetnConvolutionFilterARB)(GLenum, GLenum, GLenum, GLsizei, void *);
    void (KHRONOS_APIENTRY * tunisGetnHistogram)(GLenum, GLboolean, GLenum, GLenum, GLsizei, void *);
    void (KHRONOS_APIENTRY * tunisGetnHistogramARB)(GLenum, GLboolean, GLenum, GLenum, GLsizei, void *);
    void (KHRONOS_APIENTRY * tunisGetnMapdv)(GLenum, GLenum, GLsizei, GLdouble *);
    void (KHRONOS_APIENTRY * tunisGetnMapdvARB)(GLenum, GLenum, GLsizei, GLdouble *);
    void (KHRONOS_APIENTRY * tunisGetnMapfv)(GLenum, GLenum, GLsizei, GLfloat *);
    void (KHRONOS_APIENTRY * tunisGetnMapfvARB)(GLenum, GLenum, GLsizei, GLfloat *);
    void (KHRONOS_APIENTRY * tunisGetnMapiv)(GLenum, GLenum, GLsizei, GLint *);
    void (KHRONOS_APIENTRY * tunisGetnMapivARB)(GLenum, GLenum, GLsizei, GLint *);
    void (KHRONOS_APIENTRY * tunisGetnMinmax)(GLenum, GLboolean, GLenum, GLenum, GLsizei, void *);
    void (KHRONOS_APIENTRY * tunisGetnMinmaxARB)(GLenum, GLboolean, GLenum, GLenum, GLsizei, void *);
    void (KHRONOS_APIENTRY * tunisGetnPixelMapfv)(GLenum, GLsizei, GLfloat *);
    void (KHRONOS_APIENTRY * tunisGetnPixelMapfvARB)(GLenum, GLsizei, GLfloat *);
    void (KHRONOS_APIENTRY * tunisGetnPixelMapuiv)(GLenum, GLsizei, GLuint *);
    void (KHRONOS_APIENTRY * tunisGetnPixelMapuivARB)(GLenum, GLsizei, GLuint *);
    void (KHRONOS_APIENTRY * tunisGetnPixelMapusv)(GLenum, GLsizei, GLushort *);
    void (KHRONOS_APIENTRY * tunisGetnPixelMapusvARB)(GLenum, GLsizei, GLushort *);
    void (KHRONOS_APIENTRY * tunisGetnPolygonStipple)(GLsizei, GLubyte *);
    void (KHRONOS_APIENTRY * tunisGetnPolygonStippleARB)(GLsizei, GLubyte *);
    void (KHRONOS_APIENTRY * tunisGetnSeparableFilter)(GLenum, GLenum, GLenum, GLsizei, void *, GLsizei, void *, void *);
    void (KHRONOS_APIENTRY * tunisGetnSeparableFilterARB)(GLenum, GLenum, GLenum, GLsizei, void *, GLsizei, void *, void *);
    void (KHRONOS_APIENTRY * tunisGetnTexImage)(GLenum, GLint, GLenum, GLenum, GLsizei, void *);
    void (KHRONOS_APIENTRY * tunisGetnTexImageARB)(GLenum, GLint, GLenum, GLenum, GLsizei, void *);
    void (KHRONOS_APIENTRY * tunisGetnUniformdv)(GLuint, GLint, GLsizei, GLdouble *);
    void (KHRONOS_APIENTRY * tunisGetnUniformdvARB)(GLuint, GLint, GLsizei, GLdouble *);
    void (KHRONOS_APIENTRY * tunisGetnUniformfv)(GLuint, GLint, GLsizei, GLfloat *);
    void (KHRONOS_APIENTRY * tunisGetnUniformfvARB)(GLuint, GLint, GLsizei, GLfloat *);
    void (KHRONOS_APIENTRY * tunisGetnUniformfvEXT)(GLuint, GLint, GLsizei, GLfloat *);
    void (KHRONOS_APIENTRY * tunisGetnUniformfvKHR)(GLuint, GLint, GLsizei, GLfloat *);
    void (KHRONOS_APIENTRY * tunisGetnUniformi64vARB)(GLuint, GLint, GLsizei, GLint64 *);
    void (KHRONOS_APIENTRY * tunisGetnUniformiv)(GLuint, GLint, GLsizei, GLint *);
    void (KHRONOS_APIENTRY * tunisGetnUniformivARB)(GLuint, GLint, GLsizei, GLint *);
    void (KHRONOS_APIENTRY * tunisGetnUniformivEXT)(GLuint, GLint, GLsizei, GLint *);
    void (KHRONOS_APIENTRY * tunisGetnUniformivKHR)(GLuint, GLint, GLsizei, GLint *);
    void (KHRONOS_APIENTRY * tunisGetnUniformui64vARB)(GLuint, GLint, GLsizei, GLuint64 *);
    void (KHRONOS_APIENTRY * tunisGetnUniformuiv)(GLuint, GLint, GLsizei, GLuint *);
    void (KHRONOS_APIENTRY * tunisGetnUniformuivARB)(GLuint, GLint, GLsizei, GLuint *);
    void (KHRONOS_APIENTRY * tunisGetnUniformuivKHR)(GLuint, GLint, GLsizei, GLuint *);
    void (KHRONOS_APIENTRY * tunisGlobalAlphaFactorbSUN)(GLbyte);
    void (KHRONOS_APIENTRY * tunisGlobalAlphaFactordSUN)(GLdouble);
    void (KHRONOS_APIENTRY * tunisGlobalAlphaFactorfSUN)(GLfloat);
    void (KHRONOS_APIENTRY * tunisGlobalAlphaFactoriSUN)(GLint);
    void (KHRONOS_APIENTRY * tunisGlobalAlphaFactorsSUN)(GLshort);
    void (KHRONOS_APIENTRY * tunisGlobalAlphaFactorubSUN)(GLubyte);
    void (KHRONOS_APIENTRY * tunisGlobalAlphaFactoruiSUN)(GLuint);
    void (KHRONOS_APIENTRY * tunisGlobalAlphaFactorusSUN)(GLushort);
    void (KHRONOS_APIENTRY * tunisHint)(GLenum, GLenum);
    void (KHRONOS_APIENTRY * tunisHintPGI)(GLenum, GLint);
    void (KHRONOS_APIENTRY * tunisHistogram)(GLenum, GLsizei, GLenum, GLboolean);
    void (KHRONOS_APIENTRY * tunisHistogramEXT)(GLenum, GLsizei, GLenum, GLboolean);
    void (KHRONOS_APIENTRY * tunisIglooInterfaceSGIX)(GLenum, const void *);
    void (KHRONOS_APIENTRY * tunisImageTransformParameterfHP)(GLenum, GLenum, GLfloat);
    void (KHRONOS_APIENTRY * tunisImageTransformParameterfvHP)(GLenum, GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisImageTransformParameteriHP)(GLenum, GLenum, GLint);
    void (KHRONOS_APIENTRY * tunisImageTransformParameterivHP)(GLenum, GLenum, const GLint *);
    void (KHRONOS_APIENTRY * tunisImportMemoryFdEXT)(GLuint, GLuint64, GLenum, GLint);
    void (KHRONOS_APIENTRY * tunisImportMemoryWin32HandleEXT)(GLuint, GLuint64, GLenum, void *);
    void (KHRONOS_APIENTRY * tunisImportMemoryWin32NameEXT)(GLuint, GLuint64, GLenum, const void *);
    void (KHRONOS_APIENTRY * tunisImportSemaphoreFdEXT)(GLuint, GLenum, GLint);
    void (KHRONOS_APIENTRY * tunisImportSemaphoreWin32HandleEXT)(GLuint, GLenum, void *);
    void (KHRONOS_APIENTRY * tunisImportSemaphoreWin32NameEXT)(GLuint, GLenum, const void *);
    GLsync(KHRONOS_APIENTRY * tunisImportSyncEXT)(GLenum, GLintptr, GLbitfield);
    void (KHRONOS_APIENTRY * tunisIndexFormatNV)(GLenum, GLsizei);
    void (KHRONOS_APIENTRY * tunisIndexFuncEXT)(GLenum, GLclampf);
    void (KHRONOS_APIENTRY * tunisIndexMask)(GLuint);
    void (KHRONOS_APIENTRY * tunisIndexMaterialEXT)(GLenum, GLenum);
    void (KHRONOS_APIENTRY * tunisIndexPointer)(GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY * tunisIndexPointerEXT)(GLenum, GLsizei, GLsizei, const void *);
    void (KHRONOS_APIENTRY * tunisIndexPointerListIBM)(GLenum, GLint, const void **, GLint);
    void (KHRONOS_APIENTRY * tunisIndexd)(GLdouble);
    void (KHRONOS_APIENTRY * tunisIndexdv)(const GLdouble *);
    void (KHRONOS_APIENTRY * tunisIndexf)(GLfloat);
    void (KHRONOS_APIENTRY * tunisIndexfv)(const GLfloat *);
    void (KHRONOS_APIENTRY * tunisIndexi)(GLint);
    void (KHRONOS_APIENTRY * tunisIndexiv)(const GLint *);
    void (KHRONOS_APIENTRY * tunisIndexs)(GLshort);
    void (KHRONOS_APIENTRY * tunisIndexsv)(const GLshort *);
    void (KHRONOS_APIENTRY * tunisIndexub)(GLubyte);
    void (KHRONOS_APIENTRY * tunisIndexubv)(const GLubyte *);
    void (KHRONOS_APIENTRY * tunisIndexxOES)(GLfixed);
    void (KHRONOS_APIENTRY * tunisIndexxvOES)(const GLfixed *);
    void (KHRONOS_APIENTRY * tunisInitNames)(void);
    void (KHRONOS_APIENTRY * tunisInsertComponentEXT)(GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY * tunisInsertEventMarkerEXT)(GLsizei, const GLchar *);
    void (KHRONOS_APIENTRY * tunisInstrumentsBufferSGIX)(GLsizei, GLint *);
    void (KHRONOS_APIENTRY * tunisInterleavedArrays)(GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY * tunisInterpolatePathsNV)(GLuint, GLuint, GLuint, GLfloat);
    void (KHRONOS_APIENTRY * tunisInvalidateBufferData)(GLuint);
    void (KHRONOS_APIENTRY * tunisInvalidateBufferSubData)(GLuint, GLintptr, GLsizeiptr);
    void (KHRONOS_APIENTRY * tunisInvalidateFramebuffer)(GLenum, GLsizei, const GLenum *);
    void (KHRONOS_APIENTRY * tunisInvalidateNamedFramebufferData)(GLuint, GLsizei, const GLenum *);
    void (KHRONOS_APIENTRY * tunisInvalidateNamedFramebufferSubData)(GLuint, GLsizei, const GLenum *, GLint, GLint, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * tunisInvalidateSubFramebuffer)(GLenum, GLsizei, const GLenum *, GLint, GLint, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * tunisInvalidateTexImage)(GLuint, GLint);
    void (KHRONOS_APIENTRY * tunisInvalidateTexSubImage)(GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei);
    GLboolean(KHRONOS_APIENTRY * tunisIsAsyncMarkerSGIX)(GLuint);
    GLboolean(KHRONOS_APIENTRY * tunisIsBuffer)(GLuint);
    GLboolean(KHRONOS_APIENTRY * tunisIsBufferARB)(GLuint);
    GLboolean(KHRONOS_APIENTRY * tunisIsBufferResidentNV)(GLenum);
    GLboolean(KHRONOS_APIENTRY * tunisIsCommandListNV)(GLuint);
    GLboolean(KHRONOS_APIENTRY * tunisIsEnabled)(GLenum);
    GLboolean(KHRONOS_APIENTRY * tunisIsEnabledIndexedEXT)(GLenum, GLuint);
    GLboolean(KHRONOS_APIENTRY * tunisIsEnabledi)(GLenum, GLuint);
    GLboolean(KHRONOS_APIENTRY * tunisIsEnablediEXT)(GLenum, GLuint);
    GLboolean(KHRONOS_APIENTRY * tunisIsEnablediNV)(GLenum, GLuint);
    GLboolean(KHRONOS_APIENTRY * tunisIsEnablediOES)(GLenum, GLuint);
    GLboolean(KHRONOS_APIENTRY * tunisIsFenceAPPLE)(GLuint);
    GLboolean(KHRONOS_APIENTRY * tunisIsFenceNV)(GLuint);
    GLboolean(KHRONOS_APIENTRY * tunisIsFramebuffer)(GLuint);
    GLboolean(KHRONOS_APIENTRY * tunisIsFramebufferEXT)(GLuint);
    GLboolean(KHRONOS_APIENTRY * tunisIsFramebufferOES)(GLuint);
    GLboolean(KHRONOS_APIENTRY * tunisIsImageHandleResidentARB)(GLuint64);
    GLboolean(KHRONOS_APIENTRY * tunisIsImageHandleResidentNV)(GLuint64);
    GLboolean(KHRONOS_APIENTRY * tunisIsList)(GLuint);
    GLboolean(KHRONOS_APIENTRY * tunisIsMemoryObjectEXT)(GLuint);
    GLboolean(KHRONOS_APIENTRY * tunisIsNameAMD)(GLenum, GLuint);
    GLboolean(KHRONOS_APIENTRY * tunisIsNamedBufferResidentNV)(GLuint);
    GLboolean(KHRONOS_APIENTRY * tunisIsNamedStringARB)(GLint, const GLchar *);
    GLboolean(KHRONOS_APIENTRY * tunisIsObjectBufferATI)(GLuint);
    GLboolean(KHRONOS_APIENTRY * tunisIsOcclusionQueryNV)(GLuint);
    GLboolean(KHRONOS_APIENTRY * tunisIsPathNV)(GLuint);
    GLboolean(KHRONOS_APIENTRY * tunisIsPointInFillPathNV)(GLuint, GLuint, GLfloat, GLfloat);
    GLboolean(KHRONOS_APIENTRY * tunisIsPointInStrokePathNV)(GLuint, GLfloat, GLfloat);
    GLboolean(KHRONOS_APIENTRY * tunisIsProgram)(GLuint);
    GLboolean(KHRONOS_APIENTRY * tunisIsProgramARB)(GLuint);
    GLboolean(KHRONOS_APIENTRY * tunisIsProgramNV)(GLuint);
    GLboolean(KHRONOS_APIENTRY * tunisIsProgramPipeline)(GLuint);
    GLboolean(KHRONOS_APIENTRY * tunisIsProgramPipelineEXT)(GLuint);
    GLboolean(KHRONOS_APIENTRY * tunisIsQuery)(GLuint);
    GLboolean(KHRONOS_APIENTRY * tunisIsQueryARB)(GLuint);
    GLboolean(KHRONOS_APIENTRY * tunisIsQueryEXT)(GLuint);
    GLboolean(KHRONOS_APIENTRY * tunisIsRenderbuffer)(GLuint);
    GLboolean(KHRONOS_APIENTRY * tunisIsRenderbufferEXT)(GLuint);
    GLboolean(KHRONOS_APIENTRY * tunisIsRenderbufferOES)(GLuint);
    GLboolean(KHRONOS_APIENTRY * tunisIsSampler)(GLuint);
    GLboolean(KHRONOS_APIENTRY * tunisIsSemaphoreEXT)(GLuint);
    GLboolean(KHRONOS_APIENTRY * tunisIsShader)(GLuint);
    GLboolean(KHRONOS_APIENTRY * tunisIsStateNV)(GLuint);
    GLboolean(KHRONOS_APIENTRY * tunisIsSync)(GLsync);
    GLboolean(KHRONOS_APIENTRY * tunisIsSyncAPPLE)(GLsync);
    GLboolean(KHRONOS_APIENTRY * tunisIsTexture)(GLuint);
    GLboolean(KHRONOS_APIENTRY * tunisIsTextureEXT)(GLuint);
    GLboolean(KHRONOS_APIENTRY * tunisIsTextureHandleResidentARB)(GLuint64);
    GLboolean(KHRONOS_APIENTRY * tunisIsTextureHandleResidentNV)(GLuint64);
    GLboolean(KHRONOS_APIENTRY * tunisIsTransformFeedback)(GLuint);
    GLboolean(KHRONOS_APIENTRY * tunisIsTransformFeedbackNV)(GLuint);
    GLboolean(KHRONOS_APIENTRY * tunisIsVariantEnabledEXT)(GLuint, GLenum);
    GLboolean(KHRONOS_APIENTRY * tunisIsVertexArray)(GLuint);
    GLboolean(KHRONOS_APIENTRY * tunisIsVertexArrayAPPLE)(GLuint);
    GLboolean(KHRONOS_APIENTRY * tunisIsVertexArrayOES)(GLuint);
    GLboolean(KHRONOS_APIENTRY * tunisIsVertexAttribEnabledAPPLE)(GLuint, GLenum);
    void (KHRONOS_APIENTRY * tunisLGPUCopyImageSubDataNVX)(GLuint, GLbitfield, GLuint, GLenum, GLint, GLint, GLint, GLint, GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * tunisLGPUInterlockNVX)(void);
    void (KHRONOS_APIENTRY * tunisLGPUNamedBufferSubDataNVX)(GLbitfield, GLuint, GLintptr, GLsizeiptr, const void *);
    void (KHRONOS_APIENTRY * tunisLabelObjectEXT)(GLenum, GLuint, GLsizei, const GLchar *);
    void (KHRONOS_APIENTRY * tunisLightEnviSGIX)(GLenum, GLint);
    void (KHRONOS_APIENTRY * tunisLightModelf)(GLenum, GLfloat);
    void (KHRONOS_APIENTRY * tunisLightModelfv)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisLightModeli)(GLenum, GLint);
    void (KHRONOS_APIENTRY * tunisLightModeliv)(GLenum, const GLint *);
    void (KHRONOS_APIENTRY * tunisLightModelx)(GLenum, GLfixed);
    void (KHRONOS_APIENTRY * tunisLightModelxOES)(GLenum, GLfixed);
    void (KHRONOS_APIENTRY * tunisLightModelxv)(GLenum, const GLfixed *);
    void (KHRONOS_APIENTRY * tunisLightModelxvOES)(GLenum, const GLfixed *);
    void (KHRONOS_APIENTRY * tunisLightf)(GLenum, GLenum, GLfloat);
    void (KHRONOS_APIENTRY * tunisLightfv)(GLenum, GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisLighti)(GLenum, GLenum, GLint);
    void (KHRONOS_APIENTRY * tunisLightiv)(GLenum, GLenum, const GLint *);
    void (KHRONOS_APIENTRY * tunisLightx)(GLenum, GLenum, GLfixed);
    void (KHRONOS_APIENTRY * tunisLightxOES)(GLenum, GLenum, GLfixed);
    void (KHRONOS_APIENTRY * tunisLightxv)(GLenum, GLenum, const GLfixed *);
    void (KHRONOS_APIENTRY * tunisLightxvOES)(GLenum, GLenum, const GLfixed *);
    void (KHRONOS_APIENTRY * tunisLineStipple)(GLint, GLushort);
    void (KHRONOS_APIENTRY * tunisLineWidth)(GLfloat);
    void (KHRONOS_APIENTRY * tunisLineWidthx)(GLfixed);
    void (KHRONOS_APIENTRY * tunisLineWidthxOES)(GLfixed);
    void (KHRONOS_APIENTRY * tunisLinkProgram)(GLuint);
    void (KHRONOS_APIENTRY * tunisLinkProgramARB)(GLhandleARB);
    void (KHRONOS_APIENTRY * tunisListBase)(GLuint);
    void (KHRONOS_APIENTRY * tunisListDrawCommandsStatesClientNV)(GLuint, GLuint, const void **, const GLsizei *, const GLuint *, const GLuint *, GLuint);
    void (KHRONOS_APIENTRY * tunisListParameterfSGIX)(GLuint, GLenum, GLfloat);
    void (KHRONOS_APIENTRY * tunisListParameterfvSGIX)(GLuint, GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisListParameteriSGIX)(GLuint, GLenum, GLint);
    void (KHRONOS_APIENTRY * tunisListParameterivSGIX)(GLuint, GLenum, const GLint *);
    void (KHRONOS_APIENTRY * tunisLoadIdentity)(void);
    void (KHRONOS_APIENTRY * tunisLoadIdentityDeformationMapSGIX)(GLbitfield);
    void (KHRONOS_APIENTRY * tunisLoadMatrixd)(const GLdouble *);
    void (KHRONOS_APIENTRY * tunisLoadMatrixf)(const GLfloat *);
    void (KHRONOS_APIENTRY * tunisLoadMatrixx)(const GLfixed *);
    void (KHRONOS_APIENTRY * tunisLoadMatrixxOES)(const GLfixed *);
    void (KHRONOS_APIENTRY * tunisLoadName)(GLuint);
    void (KHRONOS_APIENTRY * tunisLoadPaletteFromModelViewMatrixOES)(void);
    void (KHRONOS_APIENTRY * tunisLoadProgramNV)(GLenum, GLuint, GLsizei, const GLubyte *);
    void (KHRONOS_APIENTRY * tunisLoadTransposeMatrixd)(const GLdouble *);
    void (KHRONOS_APIENTRY * tunisLoadTransposeMatrixdARB)(const GLdouble *);
    void (KHRONOS_APIENTRY * tunisLoadTransposeMatrixf)(const GLfloat *);
    void (KHRONOS_APIENTRY * tunisLoadTransposeMatrixfARB)(const GLfloat *);
    void (KHRONOS_APIENTRY * tunisLoadTransposeMatrixxOES)(const GLfixed *);
    void (KHRONOS_APIENTRY * tunisLockArraysEXT)(GLint, GLsizei);
    void (KHRONOS_APIENTRY * tunisLogicOp)(GLenum);
    void (KHRONOS_APIENTRY * tunisMakeBufferNonResidentNV)(GLenum);
    void (KHRONOS_APIENTRY * tunisMakeBufferResidentNV)(GLenum, GLenum);
    void (KHRONOS_APIENTRY * tunisMakeImageHandleNonResidentARB)(GLuint64);
    void (KHRONOS_APIENTRY * tunisMakeImageHandleNonResidentNV)(GLuint64);
    void (KHRONOS_APIENTRY * tunisMakeImageHandleResidentARB)(GLuint64, GLenum);
    void (KHRONOS_APIENTRY * tunisMakeImageHandleResidentNV)(GLuint64, GLenum);
    void (KHRONOS_APIENTRY * tunisMakeNamedBufferNonResidentNV)(GLuint);
    void (KHRONOS_APIENTRY * tunisMakeNamedBufferResidentNV)(GLuint, GLenum);
    void (KHRONOS_APIENTRY * tunisMakeTextureHandleNonResidentARB)(GLuint64);
    void (KHRONOS_APIENTRY * tunisMakeTextureHandleNonResidentNV)(GLuint64);
    void (KHRONOS_APIENTRY * tunisMakeTextureHandleResidentARB)(GLuint64);
    void (KHRONOS_APIENTRY * tunisMakeTextureHandleResidentNV)(GLuint64);
    void (KHRONOS_APIENTRY * tunisMap1d)(GLenum, GLdouble, GLdouble, GLint, GLint, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisMap1f)(GLenum, GLfloat, GLfloat, GLint, GLint, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisMap1xOES)(GLenum, GLfixed, GLfixed, GLint, GLint, GLfixed);
    void (KHRONOS_APIENTRY * tunisMap2d)(GLenum, GLdouble, GLdouble, GLint, GLint, GLdouble, GLdouble, GLint, GLint, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisMap2f)(GLenum, GLfloat, GLfloat, GLint, GLint, GLfloat, GLfloat, GLint, GLint, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisMap2xOES)(GLenum, GLfixed, GLfixed, GLint, GLint, GLfixed, GLfixed, GLint, GLint, GLfixed);
    void *(KHRONOS_APIENTRY * tunisMapBuffer)(GLenum, GLenum);
    void *(KHRONOS_APIENTRY * tunisMapBufferARB)(GLenum, GLenum);
    void *(KHRONOS_APIENTRY * tunisMapBufferOES)(GLenum, GLenum);
    void *(KHRONOS_APIENTRY * tunisMapBufferRange)(GLenum, GLintptr, GLsizeiptr, GLbitfield);
    void *(KHRONOS_APIENTRY * tunisMapBufferRangeEXT)(GLenum, GLintptr, GLsizeiptr, GLbitfield);
    void (KHRONOS_APIENTRY * tunisMapControlPointsNV)(GLenum, GLuint, GLenum, GLsizei, GLsizei, GLint, GLint, GLboolean, const void *);
    void (KHRONOS_APIENTRY * tunisMapGrid1d)(GLint, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * tunisMapGrid1f)(GLint, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisMapGrid1xOES)(GLint, GLfixed, GLfixed);
    void (KHRONOS_APIENTRY * tunisMapGrid2d)(GLint, GLdouble, GLdouble, GLint, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * tunisMapGrid2f)(GLint, GLfloat, GLfloat, GLint, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisMapGrid2xOES)(GLint, GLfixed, GLfixed, GLfixed, GLfixed);
    void *(KHRONOS_APIENTRY * tunisMapNamedBuffer)(GLuint, GLenum);
    void *(KHRONOS_APIENTRY * tunisMapNamedBufferEXT)(GLuint, GLenum);
    void *(KHRONOS_APIENTRY * tunisMapNamedBufferRange)(GLuint, GLintptr, GLsizeiptr, GLbitfield);
    void *(KHRONOS_APIENTRY * tunisMapNamedBufferRangeEXT)(GLuint, GLintptr, GLsizeiptr, GLbitfield);
    void *(KHRONOS_APIENTRY * tunisMapObjectBufferATI)(GLuint);
    void (KHRONOS_APIENTRY * tunisMapParameterfvNV)(GLenum, GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisMapParameterivNV)(GLenum, GLenum, const GLint *);
    void *(KHRONOS_APIENTRY * tunisMapTexture2DINTEL)(GLuint, GLint, GLbitfield, GLint *, GLenum *);
    void (KHRONOS_APIENTRY * tunisMapVertexAttrib1dAPPLE)(GLuint, GLuint, GLdouble, GLdouble, GLint, GLint, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisMapVertexAttrib1fAPPLE)(GLuint, GLuint, GLfloat, GLfloat, GLint, GLint, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisMapVertexAttrib2dAPPLE)(GLuint, GLuint, GLdouble, GLdouble, GLint, GLint, GLdouble, GLdouble, GLint, GLint, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisMapVertexAttrib2fAPPLE)(GLuint, GLuint, GLfloat, GLfloat, GLint, GLint, GLfloat, GLfloat, GLint, GLint, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisMaterialf)(GLenum, GLenum, GLfloat);
    void (KHRONOS_APIENTRY * tunisMaterialfv)(GLenum, GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisMateriali)(GLenum, GLenum, GLint);
    void (KHRONOS_APIENTRY * tunisMaterialiv)(GLenum, GLenum, const GLint *);
    void (KHRONOS_APIENTRY * tunisMaterialx)(GLenum, GLenum, GLfixed);
    void (KHRONOS_APIENTRY * tunisMaterialxOES)(GLenum, GLenum, GLfixed);
    void (KHRONOS_APIENTRY * tunisMaterialxv)(GLenum, GLenum, const GLfixed *);
    void (KHRONOS_APIENTRY * tunisMaterialxvOES)(GLenum, GLenum, const GLfixed *);
    void (KHRONOS_APIENTRY * tunisMatrixFrustumEXT)(GLenum, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * tunisMatrixIndexPointerARB)(GLint, GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY * tunisMatrixIndexPointerOES)(GLint, GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY * tunisMatrixIndexubvARB)(GLint, const GLubyte *);
    void (KHRONOS_APIENTRY * tunisMatrixIndexuivARB)(GLint, const GLuint *);
    void (KHRONOS_APIENTRY * tunisMatrixIndexusvARB)(GLint, const GLushort *);
    void (KHRONOS_APIENTRY * tunisMatrixLoad3x2fNV)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisMatrixLoad3x3fNV)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisMatrixLoadIdentityEXT)(GLenum);
    void (KHRONOS_APIENTRY * tunisMatrixLoadTranspose3x3fNV)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisMatrixLoadTransposedEXT)(GLenum, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisMatrixLoadTransposefEXT)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisMatrixLoaddEXT)(GLenum, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisMatrixLoadfEXT)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisMatrixMode)(GLenum);
    void (KHRONOS_APIENTRY * tunisMatrixMult3x2fNV)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisMatrixMult3x3fNV)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisMatrixMultTranspose3x3fNV)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisMatrixMultTransposedEXT)(GLenum, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisMatrixMultTransposefEXT)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisMatrixMultdEXT)(GLenum, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisMatrixMultfEXT)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisMatrixOrthoEXT)(GLenum, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * tunisMatrixPopEXT)(GLenum);
    void (KHRONOS_APIENTRY * tunisMatrixPushEXT)(GLenum);
    void (KHRONOS_APIENTRY * tunisMatrixRotatedEXT)(GLenum, GLdouble, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * tunisMatrixRotatefEXT)(GLenum, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisMatrixScaledEXT)(GLenum, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * tunisMatrixScalefEXT)(GLenum, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisMatrixTranslatedEXT)(GLenum, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * tunisMatrixTranslatefEXT)(GLenum, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisMaxShaderCompilerThreadsARB)(GLuint);
    void (KHRONOS_APIENTRY * tunisMaxShaderCompilerThreadsKHR)(GLuint);
    void (KHRONOS_APIENTRY * tunisMemoryBarrier)(GLbitfield);
    void (KHRONOS_APIENTRY * tunisMemoryBarrierByRegion)(GLbitfield);
    void (KHRONOS_APIENTRY * tunisMemoryBarrierEXT)(GLbitfield);
    void (KHRONOS_APIENTRY * tunisMemoryObjectParameterivEXT)(GLuint, GLenum, const GLint *);
    void (KHRONOS_APIENTRY * tunisMinSampleShading)(GLfloat);
    void (KHRONOS_APIENTRY * tunisMinSampleShadingARB)(GLfloat);
    void (KHRONOS_APIENTRY * tunisMinSampleShadingOES)(GLfloat);
    void (KHRONOS_APIENTRY * tunisMinmax)(GLenum, GLenum, GLboolean);
    void (KHRONOS_APIENTRY * tunisMinmaxEXT)(GLenum, GLenum, GLboolean);
    void (KHRONOS_APIENTRY * tunisMultMatrixd)(const GLdouble *);
    void (KHRONOS_APIENTRY * tunisMultMatrixf)(const GLfloat *);
    void (KHRONOS_APIENTRY * tunisMultMatrixx)(const GLfixed *);
    void (KHRONOS_APIENTRY * tunisMultMatrixxOES)(const GLfixed *);
    void (KHRONOS_APIENTRY * tunisMultTransposeMatrixd)(const GLdouble *);
    void (KHRONOS_APIENTRY * tunisMultTransposeMatrixdARB)(const GLdouble *);
    void (KHRONOS_APIENTRY * tunisMultTransposeMatrixf)(const GLfloat *);
    void (KHRONOS_APIENTRY * tunisMultTransposeMatrixfARB)(const GLfloat *);
    void (KHRONOS_APIENTRY * tunisMultTransposeMatrixxOES)(const GLfixed *);
    void (KHRONOS_APIENTRY * tunisMultiDrawArrays)(GLenum, const GLint *, const GLsizei *, GLsizei);
    void (KHRONOS_APIENTRY * tunisMultiDrawArraysEXT)(GLenum, const GLint *, const GLsizei *, GLsizei);
    void (KHRONOS_APIENTRY * tunisMultiDrawArraysIndirect)(GLenum, const void *, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * tunisMultiDrawArraysIndirectAMD)(GLenum, const void *, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * tunisMultiDrawArraysIndirectBindlessCountNV)(GLenum, const void *, GLsizei, GLsizei, GLsizei, GLint);
    void (KHRONOS_APIENTRY * tunisMultiDrawArraysIndirectBindlessNV)(GLenum, const void *, GLsizei, GLsizei, GLint);
    void (KHRONOS_APIENTRY * tunisMultiDrawArraysIndirectCount)(GLenum, const void *, GLintptr, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * tunisMultiDrawArraysIndirectCountARB)(GLenum, const void *, GLintptr, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * tunisMultiDrawArraysIndirectEXT)(GLenum, const void *, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * tunisMultiDrawElementArrayAPPLE)(GLenum, const GLint *, const GLsizei *, GLsizei);
    void (KHRONOS_APIENTRY * tunisMultiDrawElements)(GLenum, const GLsizei *, GLenum, const void *const*, GLsizei);
    void (KHRONOS_APIENTRY * tunisMultiDrawElementsBaseVertex)(GLenum, const GLsizei *, GLenum, const void *const*, GLsizei, const GLint *);
    void (KHRONOS_APIENTRY * tunisMultiDrawElementsBaseVertexEXT)(GLenum, const GLsizei *, GLenum, const void *const*, GLsizei, const GLint *);
    void (KHRONOS_APIENTRY * tunisMultiDrawElementsEXT)(GLenum, const GLsizei *, GLenum, const void *const*, GLsizei);
    void (KHRONOS_APIENTRY * tunisMultiDrawElementsIndirect)(GLenum, GLenum, const void *, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * tunisMultiDrawElementsIndirectAMD)(GLenum, GLenum, const void *, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * tunisMultiDrawElementsIndirectBindlessCountNV)(GLenum, GLenum, const void *, GLsizei, GLsizei, GLsizei, GLint);
    void (KHRONOS_APIENTRY * tunisMultiDrawElementsIndirectBindlessNV)(GLenum, GLenum, const void *, GLsizei, GLsizei, GLint);
    void (KHRONOS_APIENTRY * tunisMultiDrawElementsIndirectCount)(GLenum, GLenum, const void *, GLintptr, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * tunisMultiDrawElementsIndirectCountARB)(GLenum, GLenum, const void *, GLintptr, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * tunisMultiDrawElementsIndirectEXT)(GLenum, GLenum, const void *, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * tunisMultiDrawMeshTasksIndirectCountNV)(GLintptr, GLintptr, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * tunisMultiDrawMeshTasksIndirectNV)(GLintptr, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * tunisMultiDrawRangeElementArrayAPPLE)(GLenum, GLuint, GLuint, const GLint *, const GLsizei *, GLsizei);
    void (KHRONOS_APIENTRY * tunisMultiModeDrawArraysIBM)(const GLenum *, const GLint *, const GLsizei *, GLsizei, GLint);
    void (KHRONOS_APIENTRY * tunisMultiModeDrawElementsIBM)(const GLenum *, const GLsizei *, GLenum, const void *const*, GLsizei, GLint);
    void (KHRONOS_APIENTRY * tunisMultiTexBufferEXT)(GLenum, GLenum, GLenum, GLuint);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord1bOES)(GLenum, GLbyte);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord1bvOES)(GLenum, const GLbyte *);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord1d)(GLenum, GLdouble);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord1dARB)(GLenum, GLdouble);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord1dv)(GLenum, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord1dvARB)(GLenum, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord1f)(GLenum, GLfloat);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord1fARB)(GLenum, GLfloat);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord1fv)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord1fvARB)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord1hNV)(GLenum, GLhalfNV);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord1hvNV)(GLenum, const GLhalfNV *);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord1i)(GLenum, GLint);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord1iARB)(GLenum, GLint);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord1iv)(GLenum, const GLint *);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord1ivARB)(GLenum, const GLint *);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord1s)(GLenum, GLshort);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord1sARB)(GLenum, GLshort);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord1sv)(GLenum, const GLshort *);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord1svARB)(GLenum, const GLshort *);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord1xOES)(GLenum, GLfixed);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord1xvOES)(GLenum, const GLfixed *);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord2bOES)(GLenum, GLbyte, GLbyte);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord2bvOES)(GLenum, const GLbyte *);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord2d)(GLenum, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord2dARB)(GLenum, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord2dv)(GLenum, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord2dvARB)(GLenum, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord2f)(GLenum, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord2fARB)(GLenum, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord2fv)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord2fvARB)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord2hNV)(GLenum, GLhalfNV, GLhalfNV);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord2hvNV)(GLenum, const GLhalfNV *);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord2i)(GLenum, GLint, GLint);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord2iARB)(GLenum, GLint, GLint);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord2iv)(GLenum, const GLint *);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord2ivARB)(GLenum, const GLint *);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord2s)(GLenum, GLshort, GLshort);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord2sARB)(GLenum, GLshort, GLshort);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord2sv)(GLenum, const GLshort *);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord2svARB)(GLenum, const GLshort *);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord2xOES)(GLenum, GLfixed, GLfixed);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord2xvOES)(GLenum, const GLfixed *);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord3bOES)(GLenum, GLbyte, GLbyte, GLbyte);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord3bvOES)(GLenum, const GLbyte *);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord3d)(GLenum, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord3dARB)(GLenum, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord3dv)(GLenum, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord3dvARB)(GLenum, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord3f)(GLenum, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord3fARB)(GLenum, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord3fv)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord3fvARB)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord3hNV)(GLenum, GLhalfNV, GLhalfNV, GLhalfNV);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord3hvNV)(GLenum, const GLhalfNV *);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord3i)(GLenum, GLint, GLint, GLint);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord3iARB)(GLenum, GLint, GLint, GLint);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord3iv)(GLenum, const GLint *);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord3ivARB)(GLenum, const GLint *);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord3s)(GLenum, GLshort, GLshort, GLshort);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord3sARB)(GLenum, GLshort, GLshort, GLshort);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord3sv)(GLenum, const GLshort *);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord3svARB)(GLenum, const GLshort *);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord3xOES)(GLenum, GLfixed, GLfixed, GLfixed);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord3xvOES)(GLenum, const GLfixed *);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord4bOES)(GLenum, GLbyte, GLbyte, GLbyte, GLbyte);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord4bvOES)(GLenum, const GLbyte *);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord4d)(GLenum, GLdouble, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord4dARB)(GLenum, GLdouble, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord4dv)(GLenum, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord4dvARB)(GLenum, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord4f)(GLenum, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord4fARB)(GLenum, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord4fv)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord4fvARB)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord4hNV)(GLenum, GLhalfNV, GLhalfNV, GLhalfNV, GLhalfNV);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord4hvNV)(GLenum, const GLhalfNV *);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord4i)(GLenum, GLint, GLint, GLint, GLint);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord4iARB)(GLenum, GLint, GLint, GLint, GLint);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord4iv)(GLenum, const GLint *);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord4ivARB)(GLenum, const GLint *);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord4s)(GLenum, GLshort, GLshort, GLshort, GLshort);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord4sARB)(GLenum, GLshort, GLshort, GLshort, GLshort);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord4sv)(GLenum, const GLshort *);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord4svARB)(GLenum, const GLshort *);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord4x)(GLenum, GLfixed, GLfixed, GLfixed, GLfixed);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord4xOES)(GLenum, GLfixed, GLfixed, GLfixed, GLfixed);
    void (KHRONOS_APIENTRY * tunisMultiTexCoord4xvOES)(GLenum, const GLfixed *);
    void (KHRONOS_APIENTRY * tunisMultiTexCoordP1ui)(GLenum, GLenum, GLuint);
    void (KHRONOS_APIENTRY * tunisMultiTexCoordP1uiv)(GLenum, GLenum, const GLuint *);
    void (KHRONOS_APIENTRY * tunisMultiTexCoordP2ui)(GLenum, GLenum, GLuint);
    void (KHRONOS_APIENTRY * tunisMultiTexCoordP2uiv)(GLenum, GLenum, const GLuint *);
    void (KHRONOS_APIENTRY * tunisMultiTexCoordP3ui)(GLenum, GLenum, GLuint);
    void (KHRONOS_APIENTRY * tunisMultiTexCoordP3uiv)(GLenum, GLenum, const GLuint *);
    void (KHRONOS_APIENTRY * tunisMultiTexCoordP4ui)(GLenum, GLenum, GLuint);
    void (KHRONOS_APIENTRY * tunisMultiTexCoordP4uiv)(GLenum, GLenum, const GLuint *);
    void (KHRONOS_APIENTRY * tunisMultiTexCoordPointerEXT)(GLenum, GLint, GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY * tunisMultiTexEnvfEXT)(GLenum, GLenum, GLenum, GLfloat);
    void (KHRONOS_APIENTRY * tunisMultiTexEnvfvEXT)(GLenum, GLenum, GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisMultiTexEnviEXT)(GLenum, GLenum, GLenum, GLint);
    void (KHRONOS_APIENTRY * tunisMultiTexEnvivEXT)(GLenum, GLenum, GLenum, const GLint *);
    void (KHRONOS_APIENTRY * tunisMultiTexGendEXT)(GLenum, GLenum, GLenum, GLdouble);
    void (KHRONOS_APIENTRY * tunisMultiTexGendvEXT)(GLenum, GLenum, GLenum, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisMultiTexGenfEXT)(GLenum, GLenum, GLenum, GLfloat);
    void (KHRONOS_APIENTRY * tunisMultiTexGenfvEXT)(GLenum, GLenum, GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisMultiTexGeniEXT)(GLenum, GLenum, GLenum, GLint);
    void (KHRONOS_APIENTRY * tunisMultiTexGenivEXT)(GLenum, GLenum, GLenum, const GLint *);
    void (KHRONOS_APIENTRY * tunisMultiTexImage1DEXT)(GLenum, GLenum, GLint, GLint, GLsizei, GLint, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY * tunisMultiTexImage2DEXT)(GLenum, GLenum, GLint, GLint, GLsizei, GLsizei, GLint, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY * tunisMultiTexImage3DEXT)(GLenum, GLenum, GLint, GLint, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY * tunisMultiTexParameterIivEXT)(GLenum, GLenum, GLenum, const GLint *);
    void (KHRONOS_APIENTRY * tunisMultiTexParameterIuivEXT)(GLenum, GLenum, GLenum, const GLuint *);
    void (KHRONOS_APIENTRY * tunisMultiTexParameterfEXT)(GLenum, GLenum, GLenum, GLfloat);
    void (KHRONOS_APIENTRY * tunisMultiTexParameterfvEXT)(GLenum, GLenum, GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisMultiTexParameteriEXT)(GLenum, GLenum, GLenum, GLint);
    void (KHRONOS_APIENTRY * tunisMultiTexParameterivEXT)(GLenum, GLenum, GLenum, const GLint *);
    void (KHRONOS_APIENTRY * tunisMultiTexRenderbufferEXT)(GLenum, GLenum, GLuint);
    void (KHRONOS_APIENTRY * tunisMultiTexSubImage1DEXT)(GLenum, GLenum, GLint, GLint, GLsizei, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY * tunisMultiTexSubImage2DEXT)(GLenum, GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY * tunisMultiTexSubImage3DEXT)(GLenum, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY * tunisMulticastBarrierNV)(void);
    void (KHRONOS_APIENTRY * tunisMulticastBlitFramebufferNV)(GLuint, GLuint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLbitfield, GLenum);
    void (KHRONOS_APIENTRY * tunisMulticastBufferSubDataNV)(GLbitfield, GLuint, GLintptr, GLsizeiptr, const void *);
    void (KHRONOS_APIENTRY * tunisMulticastCopyBufferSubDataNV)(GLuint, GLbitfield, GLuint, GLuint, GLintptr, GLintptr, GLsizeiptr);
    void (KHRONOS_APIENTRY * tunisMulticastCopyImageSubDataNV)(GLuint, GLbitfield, GLuint, GLenum, GLint, GLint, GLint, GLint, GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * tunisMulticastFramebufferSampleLocationsfvNV)(GLuint, GLuint, GLuint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisMulticastGetQueryObjecti64vNV)(GLuint, GLuint, GLenum, GLint64 *);
    void (KHRONOS_APIENTRY * tunisMulticastGetQueryObjectivNV)(GLuint, GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY * tunisMulticastGetQueryObjectui64vNV)(GLuint, GLuint, GLenum, GLuint64 *);
    void (KHRONOS_APIENTRY * tunisMulticastGetQueryObjectuivNV)(GLuint, GLuint, GLenum, GLuint *);
    void (KHRONOS_APIENTRY * tunisMulticastWaitSyncNV)(GLuint, GLbitfield);
    void (KHRONOS_APIENTRY * tunisNamedBufferAttachMemoryNV)(GLuint, GLuint, GLuint64);
    void (KHRONOS_APIENTRY * tunisNamedBufferData)(GLuint, GLsizeiptr, const void *, GLenum);
    void (KHRONOS_APIENTRY * tunisNamedBufferDataEXT)(GLuint, GLsizeiptr, const void *, GLenum);
    void (KHRONOS_APIENTRY * tunisNamedBufferPageCommitmentARB)(GLuint, GLintptr, GLsizeiptr, GLboolean);
    void (KHRONOS_APIENTRY * tunisNamedBufferPageCommitmentEXT)(GLuint, GLintptr, GLsizeiptr, GLboolean);
    void (KHRONOS_APIENTRY * tunisNamedBufferStorage)(GLuint, GLsizeiptr, const void *, GLbitfield);
    void (KHRONOS_APIENTRY * tunisNamedBufferStorageEXT)(GLuint, GLsizeiptr, const void *, GLbitfield);
    void (KHRONOS_APIENTRY * tunisNamedBufferStorageExternalEXT)(GLuint, GLintptr, GLsizeiptr, GLeglClientBufferEXT, GLbitfield);
    void (KHRONOS_APIENTRY * tunisNamedBufferStorageMemEXT)(GLuint, GLsizeiptr, GLuint, GLuint64);
    void (KHRONOS_APIENTRY * tunisNamedBufferSubData)(GLuint, GLintptr, GLsizeiptr, const void *);
    void (KHRONOS_APIENTRY * tunisNamedBufferSubDataEXT)(GLuint, GLintptr, GLsizeiptr, const void *);
    void (KHRONOS_APIENTRY * tunisNamedCopyBufferSubDataEXT)(GLuint, GLuint, GLintptr, GLintptr, GLsizeiptr);
    void (KHRONOS_APIENTRY * tunisNamedFramebufferDrawBuffer)(GLuint, GLenum);
    void (KHRONOS_APIENTRY * tunisNamedFramebufferDrawBuffers)(GLuint, GLsizei, const GLenum *);
    void (KHRONOS_APIENTRY * tunisNamedFramebufferParameteri)(GLuint, GLenum, GLint);
    void (KHRONOS_APIENTRY * tunisNamedFramebufferParameteriEXT)(GLuint, GLenum, GLint);
    void (KHRONOS_APIENTRY * tunisNamedFramebufferReadBuffer)(GLuint, GLenum);
    void (KHRONOS_APIENTRY * tunisNamedFramebufferRenderbuffer)(GLuint, GLenum, GLenum, GLuint);
    void (KHRONOS_APIENTRY * tunisNamedFramebufferRenderbufferEXT)(GLuint, GLenum, GLenum, GLuint);
    void (KHRONOS_APIENTRY * tunisNamedFramebufferSampleLocationsfvARB)(GLuint, GLuint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisNamedFramebufferSampleLocationsfvNV)(GLuint, GLuint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisNamedFramebufferSamplePositionsfvAMD)(GLuint, GLuint, GLuint, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisNamedFramebufferTexture)(GLuint, GLenum, GLuint, GLint);
    void (KHRONOS_APIENTRY * tunisNamedFramebufferTexture1DEXT)(GLuint, GLenum, GLenum, GLuint, GLint);
    void (KHRONOS_APIENTRY * tunisNamedFramebufferTexture2DEXT)(GLuint, GLenum, GLenum, GLuint, GLint);
    void (KHRONOS_APIENTRY * tunisNamedFramebufferTexture3DEXT)(GLuint, GLenum, GLenum, GLuint, GLint, GLint);
    void (KHRONOS_APIENTRY * tunisNamedFramebufferTextureEXT)(GLuint, GLenum, GLuint, GLint);
    void (KHRONOS_APIENTRY * tunisNamedFramebufferTextureFaceEXT)(GLuint, GLenum, GLuint, GLint, GLenum);
    void (KHRONOS_APIENTRY * tunisNamedFramebufferTextureLayer)(GLuint, GLenum, GLuint, GLint, GLint);
    void (KHRONOS_APIENTRY * tunisNamedFramebufferTextureLayerEXT)(GLuint, GLenum, GLuint, GLint, GLint);
    void (KHRONOS_APIENTRY * tunisNamedProgramLocalParameter4dEXT)(GLuint, GLenum, GLuint, GLdouble, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * tunisNamedProgramLocalParameter4dvEXT)(GLuint, GLenum, GLuint, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisNamedProgramLocalParameter4fEXT)(GLuint, GLenum, GLuint, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisNamedProgramLocalParameter4fvEXT)(GLuint, GLenum, GLuint, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisNamedProgramLocalParameterI4iEXT)(GLuint, GLenum, GLuint, GLint, GLint, GLint, GLint);
    void (KHRONOS_APIENTRY * tunisNamedProgramLocalParameterI4ivEXT)(GLuint, GLenum, GLuint, const GLint *);
    void (KHRONOS_APIENTRY * tunisNamedProgramLocalParameterI4uiEXT)(GLuint, GLenum, GLuint, GLuint, GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY * tunisNamedProgramLocalParameterI4uivEXT)(GLuint, GLenum, GLuint, const GLuint *);
    void (KHRONOS_APIENTRY * tunisNamedProgramLocalParameters4fvEXT)(GLuint, GLenum, GLuint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisNamedProgramLocalParametersI4ivEXT)(GLuint, GLenum, GLuint, GLsizei, const GLint *);
    void (KHRONOS_APIENTRY * tunisNamedProgramLocalParametersI4uivEXT)(GLuint, GLenum, GLuint, GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY * tunisNamedProgramStringEXT)(GLuint, GLenum, GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY * tunisNamedRenderbufferStorage)(GLuint, GLenum, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * tunisNamedRenderbufferStorageEXT)(GLuint, GLenum, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * tunisNamedRenderbufferStorageMultisample)(GLuint, GLsizei, GLenum, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * tunisNamedRenderbufferStorageMultisampleAdvancedAMD)(GLuint, GLsizei, GLsizei, GLenum, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * tunisNamedRenderbufferStorageMultisampleCoverageEXT)(GLuint, GLsizei, GLsizei, GLenum, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * tunisNamedRenderbufferStorageMultisampleEXT)(GLuint, GLsizei, GLenum, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * tunisNamedStringARB)(GLenum, GLint, const GLchar *, GLint, const GLchar *);
    GLuint(KHRONOS_APIENTRY * tunisNewBufferRegion)(GLenum);
    void (KHRONOS_APIENTRY * tunisNewList)(GLuint, GLenum);
    GLuint(KHRONOS_APIENTRY * tunisNewObjectBufferATI)(GLsizei, const void *, GLenum);
    void (KHRONOS_APIENTRY * tunisNormal3b)(GLbyte, GLbyte, GLbyte);
    void (KHRONOS_APIENTRY * tunisNormal3bv)(const GLbyte *);
    void (KHRONOS_APIENTRY * tunisNormal3d)(GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * tunisNormal3dv)(const GLdouble *);
    void (KHRONOS_APIENTRY * tunisNormal3f)(GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisNormal3fVertex3fSUN)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisNormal3fVertex3fvSUN)(const GLfloat *, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisNormal3fv)(const GLfloat *);
    void (KHRONOS_APIENTRY * tunisNormal3hNV)(GLhalfNV, GLhalfNV, GLhalfNV);
    void (KHRONOS_APIENTRY * tunisNormal3hvNV)(const GLhalfNV *);
    void (KHRONOS_APIENTRY * tunisNormal3i)(GLint, GLint, GLint);
    void (KHRONOS_APIENTRY * tunisNormal3iv)(const GLint *);
    void (KHRONOS_APIENTRY * tunisNormal3s)(GLshort, GLshort, GLshort);
    void (KHRONOS_APIENTRY * tunisNormal3sv)(const GLshort *);
    void (KHRONOS_APIENTRY * tunisNormal3x)(GLfixed, GLfixed, GLfixed);
    void (KHRONOS_APIENTRY * tunisNormal3xOES)(GLfixed, GLfixed, GLfixed);
    void (KHRONOS_APIENTRY * tunisNormal3xvOES)(const GLfixed *);
    void (KHRONOS_APIENTRY * tunisNormalFormatNV)(GLenum, GLsizei);
    void (KHRONOS_APIENTRY * tunisNormalP3ui)(GLenum, GLuint);
    void (KHRONOS_APIENTRY * tunisNormalP3uiv)(GLenum, const GLuint *);
    void (KHRONOS_APIENTRY * tunisNormalPointer)(GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY * tunisNormalPointerEXT)(GLenum, GLsizei, GLsizei, const void *);
    void (KHRONOS_APIENTRY * tunisNormalPointerListIBM)(GLenum, GLint, const void **, GLint);
    void (KHRONOS_APIENTRY * tunisNormalPointervINTEL)(GLenum, const void **);
    void (KHRONOS_APIENTRY * tunisNormalStream3bATI)(GLenum, GLbyte, GLbyte, GLbyte);
    void (KHRONOS_APIENTRY * tunisNormalStream3bvATI)(GLenum, const GLbyte *);
    void (KHRONOS_APIENTRY * tunisNormalStream3dATI)(GLenum, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * tunisNormalStream3dvATI)(GLenum, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisNormalStream3fATI)(GLenum, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisNormalStream3fvATI)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisNormalStream3iATI)(GLenum, GLint, GLint, GLint);
    void (KHRONOS_APIENTRY * tunisNormalStream3ivATI)(GLenum, const GLint *);
    void (KHRONOS_APIENTRY * tunisNormalStream3sATI)(GLenum, GLshort, GLshort, GLshort);
    void (KHRONOS_APIENTRY * tunisNormalStream3svATI)(GLenum, const GLshort *);
    void (KHRONOS_APIENTRY * tunisObjectLabel)(GLenum, GLuint, GLsizei, const GLchar *);
    void (KHRONOS_APIENTRY * tunisObjectLabelKHR)(GLenum, GLuint, GLsizei, const GLchar *);
    void (KHRONOS_APIENTRY * tunisObjectPtrLabel)(const void *, GLsizei, const GLchar *);
    void (KHRONOS_APIENTRY * tunisObjectPtrLabelKHR)(const void *, GLsizei, const GLchar *);
    GLenum(KHRONOS_APIENTRY * tunisObjectPurgeableAPPLE)(GLenum, GLuint, GLenum);
    GLenum(KHRONOS_APIENTRY * tunisObjectUnpurgeableAPPLE)(GLenum, GLuint, GLenum);
    void (KHRONOS_APIENTRY * tunisOrtho)(GLdouble, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * tunisOrthof)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisOrthofOES)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisOrthox)(GLfixed, GLfixed, GLfixed, GLfixed, GLfixed, GLfixed);
    void (KHRONOS_APIENTRY * tunisOrthoxOES)(GLfixed, GLfixed, GLfixed, GLfixed, GLfixed, GLfixed);
    void (KHRONOS_APIENTRY * tunisPNTrianglesfATI)(GLenum, GLfloat);
    void (KHRONOS_APIENTRY * tunisPNTrianglesiATI)(GLenum, GLint);
    void (KHRONOS_APIENTRY * tunisPassTexCoordATI)(GLuint, GLuint, GLenum);
    void (KHRONOS_APIENTRY * tunisPassThrough)(GLfloat);
    void (KHRONOS_APIENTRY * tunisPassThroughxOES)(GLfixed);
    void (KHRONOS_APIENTRY * tunisPatchParameterfv)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisPatchParameteri)(GLenum, GLint);
    void (KHRONOS_APIENTRY * tunisPatchParameteriEXT)(GLenum, GLint);
    void (KHRONOS_APIENTRY * tunisPatchParameteriOES)(GLenum, GLint);
    void (KHRONOS_APIENTRY * tunisPathColorGenNV)(GLenum, GLenum, GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisPathCommandsNV)(GLuint, GLsizei, const GLubyte *, GLsizei, GLenum, const void *);
    void (KHRONOS_APIENTRY * tunisPathCoordsNV)(GLuint, GLsizei, GLenum, const void *);
    void (KHRONOS_APIENTRY * tunisPathCoverDepthFuncNV)(GLenum);
    void (KHRONOS_APIENTRY * tunisPathDashArrayNV)(GLuint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisPathFogGenNV)(GLenum);
    GLenum(KHRONOS_APIENTRY * tunisPathGlyphIndexArrayNV)(GLuint, GLenum, const void *, GLbitfield, GLuint, GLsizei, GLuint, GLfloat);
    GLenum(KHRONOS_APIENTRY * tunisPathGlyphIndexRangeNV)(GLenum, const void *, GLbitfield, GLuint, GLfloat, GLuint[2]);
    void (KHRONOS_APIENTRY * tunisPathGlyphRangeNV)(GLuint, GLenum, const void *, GLbitfield, GLuint, GLsizei, GLenum, GLuint, GLfloat);
    void (KHRONOS_APIENTRY * tunisPathGlyphsNV)(GLuint, GLenum, const void *, GLbitfield, GLsizei, GLenum, const void *, GLenum, GLuint, GLfloat);
    GLenum(KHRONOS_APIENTRY * tunisPathMemoryGlyphIndexArrayNV)(GLuint, GLenum, GLsizeiptr, const void *, GLsizei, GLuint, GLsizei, GLuint, GLfloat);
    void (KHRONOS_APIENTRY * tunisPathParameterfNV)(GLuint, GLenum, GLfloat);
    void (KHRONOS_APIENTRY * tunisPathParameterfvNV)(GLuint, GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisPathParameteriNV)(GLuint, GLenum, GLint);
    void (KHRONOS_APIENTRY * tunisPathParameterivNV)(GLuint, GLenum, const GLint *);
    void (KHRONOS_APIENTRY * tunisPathStencilDepthOffsetNV)(GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisPathStencilFuncNV)(GLenum, GLint, GLuint);
    void (KHRONOS_APIENTRY * tunisPathStringNV)(GLuint, GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY * tunisPathSubCommandsNV)(GLuint, GLsizei, GLsizei, GLsizei, const GLubyte *, GLsizei, GLenum, const void *);
    void (KHRONOS_APIENTRY * tunisPathSubCoordsNV)(GLuint, GLsizei, GLsizei, GLenum, const void *);
    void (KHRONOS_APIENTRY * tunisPathTexGenNV)(GLenum, GLenum, GLint, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisPauseTransformFeedback)(void);
    void (KHRONOS_APIENTRY * tunisPauseTransformFeedbackNV)(void);
    void (KHRONOS_APIENTRY * tunisPixelDataRangeNV)(GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY * tunisPixelMapfv)(GLenum, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisPixelMapuiv)(GLenum, GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY * tunisPixelMapusv)(GLenum, GLsizei, const GLushort *);
    void (KHRONOS_APIENTRY * tunisPixelMapx)(GLenum, GLint, const GLfixed *);
    void (KHRONOS_APIENTRY * tunisPixelStoref)(GLenum, GLfloat);
    void (KHRONOS_APIENTRY * tunisPixelStorei)(GLenum, GLint);
    void (KHRONOS_APIENTRY * tunisPixelStorex)(GLenum, GLfixed);
    void (KHRONOS_APIENTRY * tunisPixelTexGenParameterfSGIS)(GLenum, GLfloat);
    void (KHRONOS_APIENTRY * tunisPixelTexGenParameterfvSGIS)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisPixelTexGenParameteriSGIS)(GLenum, GLint);
    void (KHRONOS_APIENTRY * tunisPixelTexGenParameterivSGIS)(GLenum, const GLint *);
    void (KHRONOS_APIENTRY * tunisPixelTexGenSGIX)(GLenum);
    void (KHRONOS_APIENTRY * tunisPixelTransferf)(GLenum, GLfloat);
    void (KHRONOS_APIENTRY * tunisPixelTransferi)(GLenum, GLint);
    void (KHRONOS_APIENTRY * tunisPixelTransferxOES)(GLenum, GLfixed);
    void (KHRONOS_APIENTRY * tunisPixelTransformParameterfEXT)(GLenum, GLenum, GLfloat);
    void (KHRONOS_APIENTRY * tunisPixelTransformParameterfvEXT)(GLenum, GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisPixelTransformParameteriEXT)(GLenum, GLenum, GLint);
    void (KHRONOS_APIENTRY * tunisPixelTransformParameterivEXT)(GLenum, GLenum, const GLint *);
    void (KHRONOS_APIENTRY * tunisPixelZoom)(GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisPixelZoomxOES)(GLfixed, GLfixed);
    GLboolean(KHRONOS_APIENTRY * tunisPointAlongPathNV)(GLuint, GLsizei, GLsizei, GLfloat, GLfloat *, GLfloat *, GLfloat *, GLfloat *);
    void (KHRONOS_APIENTRY * tunisPointParameterf)(GLenum, GLfloat);
    void (KHRONOS_APIENTRY * tunisPointParameterfARB)(GLenum, GLfloat);
    void (KHRONOS_APIENTRY * tunisPointParameterfEXT)(GLenum, GLfloat);
    void (KHRONOS_APIENTRY * tunisPointParameterfSGIS)(GLenum, GLfloat);
    void (KHRONOS_APIENTRY * tunisPointParameterfv)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisPointParameterfvARB)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisPointParameterfvEXT)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisPointParameterfvSGIS)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisPointParameteri)(GLenum, GLint);
    void (KHRONOS_APIENTRY * tunisPointParameteriNV)(GLenum, GLint);
    void (KHRONOS_APIENTRY * tunisPointParameteriv)(GLenum, const GLint *);
    void (KHRONOS_APIENTRY * tunisPointParameterivNV)(GLenum, const GLint *);
    void (KHRONOS_APIENTRY * tunisPointParameterx)(GLenum, GLfixed);
    void (KHRONOS_APIENTRY * tunisPointParameterxOES)(GLenum, GLfixed);
    void (KHRONOS_APIENTRY * tunisPointParameterxv)(GLenum, const GLfixed *);
    void (KHRONOS_APIENTRY * tunisPointParameterxvOES)(GLenum, const GLfixed *);
    void (KHRONOS_APIENTRY * tunisPointSize)(GLfloat);
    void (KHRONOS_APIENTRY * tunisPointSizePointerOES)(GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY * tunisPointSizex)(GLfixed);
    void (KHRONOS_APIENTRY * tunisPointSizexOES)(GLfixed);
    GLint(KHRONOS_APIENTRY * tunisPollAsyncSGIX)(GLuint *);
    GLint(KHRONOS_APIENTRY * tunisPollInstrumentsSGIX)(GLint *);
    void (KHRONOS_APIENTRY * tunisPolygonMode)(GLenum, GLenum);
    void (KHRONOS_APIENTRY * tunisPolygonModeNV)(GLenum, GLenum);
    void (KHRONOS_APIENTRY * tunisPolygonOffset)(GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisPolygonOffsetClamp)(GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisPolygonOffsetClampEXT)(GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisPolygonOffsetEXT)(GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisPolygonOffsetx)(GLfixed, GLfixed);
    void (KHRONOS_APIENTRY * tunisPolygonOffsetxOES)(GLfixed, GLfixed);
    void (KHRONOS_APIENTRY * tunisPolygonStipple)(const GLubyte *);
    void (KHRONOS_APIENTRY * tunisPopAttrib)(void);
    void (KHRONOS_APIENTRY * tunisPopClientAttrib)(void);
    void (KHRONOS_APIENTRY * tunisPopDebugGroup)(void);
    void (KHRONOS_APIENTRY * tunisPopDebugGroupKHR)(void);
    void (KHRONOS_APIENTRY * tunisPopGroupMarkerEXT)(void);
    void (KHRONOS_APIENTRY * tunisPopMatrix)(void);
    void (KHRONOS_APIENTRY * tunisPopName)(void);
    void (KHRONOS_APIENTRY * tunisPresentFrameDualFillNV)(GLuint, GLuint64EXT, GLuint, GLuint, GLenum, GLenum, GLuint, GLenum, GLuint, GLenum, GLuint, GLenum, GLuint);
    void (KHRONOS_APIENTRY * tunisPresentFrameKeyedNV)(GLuint, GLuint64EXT, GLuint, GLuint, GLenum, GLenum, GLuint, GLuint, GLenum, GLuint, GLuint);
    void (KHRONOS_APIENTRY * tunisPrimitiveBoundingBox)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisPrimitiveBoundingBoxARB)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisPrimitiveBoundingBoxEXT)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisPrimitiveBoundingBoxOES)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisPrimitiveRestartIndex)(GLuint);
    void (KHRONOS_APIENTRY * tunisPrimitiveRestartIndexNV)(GLuint);
    void (KHRONOS_APIENTRY * tunisPrimitiveRestartNV)(void);
    void (KHRONOS_APIENTRY * tunisPrioritizeTextures)(GLsizei, const GLuint *, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisPrioritizeTexturesEXT)(GLsizei, const GLuint *, const GLclampf *);
    void (KHRONOS_APIENTRY * tunisPrioritizeTexturesxOES)(GLsizei, const GLuint *, const GLfixed *);
    void (KHRONOS_APIENTRY * tunisProgramBinary)(GLuint, GLenum, const void *, GLsizei);
    void (KHRONOS_APIENTRY * tunisProgramBinaryOES)(GLuint, GLenum, const void *, GLint);
    void (KHRONOS_APIENTRY * tunisProgramBufferParametersIivNV)(GLenum, GLuint, GLuint, GLsizei, const GLint *);
    void (KHRONOS_APIENTRY * tunisProgramBufferParametersIuivNV)(GLenum, GLuint, GLuint, GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY * tunisProgramBufferParametersfvNV)(GLenum, GLuint, GLuint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisProgramEnvParameter4dARB)(GLenum, GLuint, GLdouble, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * tunisProgramEnvParameter4dvARB)(GLenum, GLuint, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisProgramEnvParameter4fARB)(GLenum, GLuint, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisProgramEnvParameter4fvARB)(GLenum, GLuint, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisProgramEnvParameterI4iNV)(GLenum, GLuint, GLint, GLint, GLint, GLint);
    void (KHRONOS_APIENTRY * tunisProgramEnvParameterI4ivNV)(GLenum, GLuint, const GLint *);
    void (KHRONOS_APIENTRY * tunisProgramEnvParameterI4uiNV)(GLenum, GLuint, GLuint, GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY * tunisProgramEnvParameterI4uivNV)(GLenum, GLuint, const GLuint *);
    void (KHRONOS_APIENTRY * tunisProgramEnvParameters4fvEXT)(GLenum, GLuint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisProgramEnvParametersI4ivNV)(GLenum, GLuint, GLsizei, const GLint *);
    void (KHRONOS_APIENTRY * tunisProgramEnvParametersI4uivNV)(GLenum, GLuint, GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY * tunisProgramLocalParameter4dARB)(GLenum, GLuint, GLdouble, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * tunisProgramLocalParameter4dvARB)(GLenum, GLuint, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisProgramLocalParameter4fARB)(GLenum, GLuint, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisProgramLocalParameter4fvARB)(GLenum, GLuint, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisProgramLocalParameterI4iNV)(GLenum, GLuint, GLint, GLint, GLint, GLint);
    void (KHRONOS_APIENTRY * tunisProgramLocalParameterI4ivNV)(GLenum, GLuint, const GLint *);
    void (KHRONOS_APIENTRY * tunisProgramLocalParameterI4uiNV)(GLenum, GLuint, GLuint, GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY * tunisProgramLocalParameterI4uivNV)(GLenum, GLuint, const GLuint *);
    void (KHRONOS_APIENTRY * tunisProgramLocalParameters4fvEXT)(GLenum, GLuint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisProgramLocalParametersI4ivNV)(GLenum, GLuint, GLsizei, const GLint *);
    void (KHRONOS_APIENTRY * tunisProgramLocalParametersI4uivNV)(GLenum, GLuint, GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY * tunisProgramNamedParameter4dNV)(GLuint, GLsizei, const GLubyte *, GLdouble, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * tunisProgramNamedParameter4dvNV)(GLuint, GLsizei, const GLubyte *, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisProgramNamedParameter4fNV)(GLuint, GLsizei, const GLubyte *, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisProgramNamedParameter4fvNV)(GLuint, GLsizei, const GLubyte *, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisProgramParameter4dNV)(GLenum, GLuint, GLdouble, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * tunisProgramParameter4dvNV)(GLenum, GLuint, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisProgramParameter4fNV)(GLenum, GLuint, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisProgramParameter4fvNV)(GLenum, GLuint, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisProgramParameteri)(GLuint, GLenum, GLint);
    void (KHRONOS_APIENTRY * tunisProgramParameteriARB)(GLuint, GLenum, GLint);
    void (KHRONOS_APIENTRY * tunisProgramParameteriEXT)(GLuint, GLenum, GLint);
    void (KHRONOS_APIENTRY * tunisProgramParameters4dvNV)(GLenum, GLuint, GLsizei, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisProgramParameters4fvNV)(GLenum, GLuint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisProgramPathFragmentInputGenNV)(GLuint, GLint, GLenum, GLint, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisProgramStringARB)(GLenum, GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY * tunisProgramSubroutineParametersuivNV)(GLenum, GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY * tunisProgramUniform1d)(GLuint, GLint, GLdouble);
    void (KHRONOS_APIENTRY * tunisProgramUniform1dEXT)(GLuint, GLint, GLdouble);
    void (KHRONOS_APIENTRY * tunisProgramUniform1dv)(GLuint, GLint, GLsizei, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisProgramUniform1dvEXT)(GLuint, GLint, GLsizei, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisProgramUniform1f)(GLuint, GLint, GLfloat);
    void (KHRONOS_APIENTRY * tunisProgramUniform1fEXT)(GLuint, GLint, GLfloat);
    void (KHRONOS_APIENTRY * tunisProgramUniform1fv)(GLuint, GLint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisProgramUniform1fvEXT)(GLuint, GLint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisProgramUniform1i)(GLuint, GLint, GLint);
    void (KHRONOS_APIENTRY * tunisProgramUniform1i64ARB)(GLuint, GLint, GLint64);
    void (KHRONOS_APIENTRY * tunisProgramUniform1i64NV)(GLuint, GLint, GLint64EXT);
    void (KHRONOS_APIENTRY * tunisProgramUniform1i64vARB)(GLuint, GLint, GLsizei, const GLint64 *);
    void (KHRONOS_APIENTRY * tunisProgramUniform1i64vNV)(GLuint, GLint, GLsizei, const GLint64EXT *);
    void (KHRONOS_APIENTRY * tunisProgramUniform1iEXT)(GLuint, GLint, GLint);
    void (KHRONOS_APIENTRY * tunisProgramUniform1iv)(GLuint, GLint, GLsizei, const GLint *);
    void (KHRONOS_APIENTRY * tunisProgramUniform1ivEXT)(GLuint, GLint, GLsizei, const GLint *);
    void (KHRONOS_APIENTRY * tunisProgramUniform1ui)(GLuint, GLint, GLuint);
    void (KHRONOS_APIENTRY * tunisProgramUniform1ui64ARB)(GLuint, GLint, GLuint64);
    void (KHRONOS_APIENTRY * tunisProgramUniform1ui64NV)(GLuint, GLint, GLuint64EXT);
    void (KHRONOS_APIENTRY * tunisProgramUniform1ui64vARB)(GLuint, GLint, GLsizei, const GLuint64 *);
    void (KHRONOS_APIENTRY * tunisProgramUniform1ui64vNV)(GLuint, GLint, GLsizei, const GLuint64EXT *);
    void (KHRONOS_APIENTRY * tunisProgramUniform1uiEXT)(GLuint, GLint, GLuint);
    void (KHRONOS_APIENTRY * tunisProgramUniform1uiv)(GLuint, GLint, GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY * tunisProgramUniform1uivEXT)(GLuint, GLint, GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY * tunisProgramUniform2d)(GLuint, GLint, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * tunisProgramUniform2dEXT)(GLuint, GLint, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * tunisProgramUniform2dv)(GLuint, GLint, GLsizei, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisProgramUniform2dvEXT)(GLuint, GLint, GLsizei, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisProgramUniform2f)(GLuint, GLint, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisProgramUniform2fEXT)(GLuint, GLint, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisProgramUniform2fv)(GLuint, GLint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisProgramUniform2fvEXT)(GLuint, GLint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisProgramUniform2i)(GLuint, GLint, GLint, GLint);
    void (KHRONOS_APIENTRY * tunisProgramUniform2i64ARB)(GLuint, GLint, GLint64, GLint64);
    void (KHRONOS_APIENTRY * tunisProgramUniform2i64NV)(GLuint, GLint, GLint64EXT, GLint64EXT);
    void (KHRONOS_APIENTRY * tunisProgramUniform2i64vARB)(GLuint, GLint, GLsizei, const GLint64 *);
    void (KHRONOS_APIENTRY * tunisProgramUniform2i64vNV)(GLuint, GLint, GLsizei, const GLint64EXT *);
    void (KHRONOS_APIENTRY * tunisProgramUniform2iEXT)(GLuint, GLint, GLint, GLint);
    void (KHRONOS_APIENTRY * tunisProgramUniform2iv)(GLuint, GLint, GLsizei, const GLint *);
    void (KHRONOS_APIENTRY * tunisProgramUniform2ivEXT)(GLuint, GLint, GLsizei, const GLint *);
    void (KHRONOS_APIENTRY * tunisProgramUniform2ui)(GLuint, GLint, GLuint, GLuint);
    void (KHRONOS_APIENTRY * tunisProgramUniform2ui64ARB)(GLuint, GLint, GLuint64, GLuint64);
    void (KHRONOS_APIENTRY * tunisProgramUniform2ui64NV)(GLuint, GLint, GLuint64EXT, GLuint64EXT);
    void (KHRONOS_APIENTRY * tunisProgramUniform2ui64vARB)(GLuint, GLint, GLsizei, const GLuint64 *);
    void (KHRONOS_APIENTRY * tunisProgramUniform2ui64vNV)(GLuint, GLint, GLsizei, const GLuint64EXT *);
    void (KHRONOS_APIENTRY * tunisProgramUniform2uiEXT)(GLuint, GLint, GLuint, GLuint);
    void (KHRONOS_APIENTRY * tunisProgramUniform2uiv)(GLuint, GLint, GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY * tunisProgramUniform2uivEXT)(GLuint, GLint, GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY * tunisProgramUniform3d)(GLuint, GLint, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * tunisProgramUniform3dEXT)(GLuint, GLint, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * tunisProgramUniform3dv)(GLuint, GLint, GLsizei, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisProgramUniform3dvEXT)(GLuint, GLint, GLsizei, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisProgramUniform3f)(GLuint, GLint, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisProgramUniform3fEXT)(GLuint, GLint, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisProgramUniform3fv)(GLuint, GLint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisProgramUniform3fvEXT)(GLuint, GLint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisProgramUniform3i)(GLuint, GLint, GLint, GLint, GLint);
    void (KHRONOS_APIENTRY * tunisProgramUniform3i64ARB)(GLuint, GLint, GLint64, GLint64, GLint64);
    void (KHRONOS_APIENTRY * tunisProgramUniform3i64NV)(GLuint, GLint, GLint64EXT, GLint64EXT, GLint64EXT);
    void (KHRONOS_APIENTRY * tunisProgramUniform3i64vARB)(GLuint, GLint, GLsizei, const GLint64 *);
    void (KHRONOS_APIENTRY * tunisProgramUniform3i64vNV)(GLuint, GLint, GLsizei, const GLint64EXT *);
    void (KHRONOS_APIENTRY * tunisProgramUniform3iEXT)(GLuint, GLint, GLint, GLint, GLint);
    void (KHRONOS_APIENTRY * tunisProgramUniform3iv)(GLuint, GLint, GLsizei, const GLint *);
    void (KHRONOS_APIENTRY * tunisProgramUniform3ivEXT)(GLuint, GLint, GLsizei, const GLint *);
    void (KHRONOS_APIENTRY * tunisProgramUniform3ui)(GLuint, GLint, GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY * tunisProgramUniform3ui64ARB)(GLuint, GLint, GLuint64, GLuint64, GLuint64);
    void (KHRONOS_APIENTRY * tunisProgramUniform3ui64NV)(GLuint, GLint, GLuint64EXT, GLuint64EXT, GLuint64EXT);
    void (KHRONOS_APIENTRY * tunisProgramUniform3ui64vARB)(GLuint, GLint, GLsizei, const GLuint64 *);
    void (KHRONOS_APIENTRY * tunisProgramUniform3ui64vNV)(GLuint, GLint, GLsizei, const GLuint64EXT *);
    void (KHRONOS_APIENTRY * tunisProgramUniform3uiEXT)(GLuint, GLint, GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY * tunisProgramUniform3uiv)(GLuint, GLint, GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY * tunisProgramUniform3uivEXT)(GLuint, GLint, GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY * tunisProgramUniform4d)(GLuint, GLint, GLdouble, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * tunisProgramUniform4dEXT)(GLuint, GLint, GLdouble, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * tunisProgramUniform4dv)(GLuint, GLint, GLsizei, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisProgramUniform4dvEXT)(GLuint, GLint, GLsizei, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisProgramUniform4f)(GLuint, GLint, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisProgramUniform4fEXT)(GLuint, GLint, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisProgramUniform4fv)(GLuint, GLint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisProgramUniform4fvEXT)(GLuint, GLint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisProgramUniform4i)(GLuint, GLint, GLint, GLint, GLint, GLint);
    void (KHRONOS_APIENTRY * tunisProgramUniform4i64ARB)(GLuint, GLint, GLint64, GLint64, GLint64, GLint64);
    void (KHRONOS_APIENTRY * tunisProgramUniform4i64NV)(GLuint, GLint, GLint64EXT, GLint64EXT, GLint64EXT, GLint64EXT);
    void (KHRONOS_APIENTRY * tunisProgramUniform4i64vARB)(GLuint, GLint, GLsizei, const GLint64 *);
    void (KHRONOS_APIENTRY * tunisProgramUniform4i64vNV)(GLuint, GLint, GLsizei, const GLint64EXT *);
    void (KHRONOS_APIENTRY * tunisProgramUniform4iEXT)(GLuint, GLint, GLint, GLint, GLint, GLint);
    void (KHRONOS_APIENTRY * tunisProgramUniform4iv)(GLuint, GLint, GLsizei, const GLint *);
    void (KHRONOS_APIENTRY * tunisProgramUniform4ivEXT)(GLuint, GLint, GLsizei, const GLint *);
    void (KHRONOS_APIENTRY * tunisProgramUniform4ui)(GLuint, GLint, GLuint, GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY * tunisProgramUniform4ui64ARB)(GLuint, GLint, GLuint64, GLuint64, GLuint64, GLuint64);
    void (KHRONOS_APIENTRY * tunisProgramUniform4ui64NV)(GLuint, GLint, GLuint64EXT, GLuint64EXT, GLuint64EXT, GLuint64EXT);
    void (KHRONOS_APIENTRY * tunisProgramUniform4ui64vARB)(GLuint, GLint, GLsizei, const GLuint64 *);
    void (KHRONOS_APIENTRY * tunisProgramUniform4ui64vNV)(GLuint, GLint, GLsizei, const GLuint64EXT *);
    void (KHRONOS_APIENTRY * tunisProgramUniform4uiEXT)(GLuint, GLint, GLuint, GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY * tunisProgramUniform4uiv)(GLuint, GLint, GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY * tunisProgramUniform4uivEXT)(GLuint, GLint, GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY * tunisProgramUniformHandleui64ARB)(GLuint, GLint, GLuint64);
    void (KHRONOS_APIENTRY * tunisProgramUniformHandleui64IMG)(GLuint, GLint, GLuint64);
    void (KHRONOS_APIENTRY * tunisProgramUniformHandleui64NV)(GLuint, GLint, GLuint64);
    void (KHRONOS_APIENTRY * tunisProgramUniformHandleui64vARB)(GLuint, GLint, GLsizei, const GLuint64 *);
    void (KHRONOS_APIENTRY * tunisProgramUniformHandleui64vIMG)(GLuint, GLint, GLsizei, const GLuint64 *);
    void (KHRONOS_APIENTRY * tunisProgramUniformHandleui64vNV)(GLuint, GLint, GLsizei, const GLuint64 *);
    void (KHRONOS_APIENTRY * tunisProgramUniformMatrix2dv)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisProgramUniformMatrix2dvEXT)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisProgramUniformMatrix2fv)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisProgramUniformMatrix2fvEXT)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisProgramUniformMatrix2x3dv)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisProgramUniformMatrix2x3dvEXT)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisProgramUniformMatrix2x3fv)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisProgramUniformMatrix2x3fvEXT)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisProgramUniformMatrix2x4dv)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisProgramUniformMatrix2x4dvEXT)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisProgramUniformMatrix2x4fv)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisProgramUniformMatrix2x4fvEXT)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisProgramUniformMatrix3dv)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisProgramUniformMatrix3dvEXT)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisProgramUniformMatrix3fv)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisProgramUniformMatrix3fvEXT)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisProgramUniformMatrix3x2dv)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisProgramUniformMatrix3x2dvEXT)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisProgramUniformMatrix3x2fv)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisProgramUniformMatrix3x2fvEXT)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisProgramUniformMatrix3x4dv)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisProgramUniformMatrix3x4dvEXT)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisProgramUniformMatrix3x4fv)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisProgramUniformMatrix3x4fvEXT)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisProgramUniformMatrix4dv)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisProgramUniformMatrix4dvEXT)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisProgramUniformMatrix4fv)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisProgramUniformMatrix4fvEXT)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisProgramUniformMatrix4x2dv)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisProgramUniformMatrix4x2dvEXT)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisProgramUniformMatrix4x2fv)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisProgramUniformMatrix4x2fvEXT)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisProgramUniformMatrix4x3dv)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisProgramUniformMatrix4x3dvEXT)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisProgramUniformMatrix4x3fv)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisProgramUniformMatrix4x3fvEXT)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisProgramUniformui64NV)(GLuint, GLint, GLuint64EXT);
    void (KHRONOS_APIENTRY * tunisProgramUniformui64vNV)(GLuint, GLint, GLsizei, const GLuint64EXT *);
    void (KHRONOS_APIENTRY * tunisProgramVertexLimitNV)(GLenum, GLint);
    void (KHRONOS_APIENTRY * tunisProvokingVertex)(GLenum);
    void (KHRONOS_APIENTRY * tunisProvokingVertexEXT)(GLenum);
    void (KHRONOS_APIENTRY * tunisPushAttrib)(GLbitfield);
    void (KHRONOS_APIENTRY * tunisPushClientAttrib)(GLbitfield);
    void (KHRONOS_APIENTRY * tunisPushClientAttribDefaultEXT)(GLbitfield);
    void (KHRONOS_APIENTRY * tunisPushDebugGroup)(GLenum, GLuint, GLsizei, const GLchar *);
    void (KHRONOS_APIENTRY * tunisPushDebugGroupKHR)(GLenum, GLuint, GLsizei, const GLchar *);
    void (KHRONOS_APIENTRY * tunisPushGroupMarkerEXT)(GLsizei, const GLchar *);
    void (KHRONOS_APIENTRY * tunisPushMatrix)(void);
    void (KHRONOS_APIENTRY * tunisPushName)(GLuint);
    void (KHRONOS_APIENTRY * tunisQueryCounter)(GLuint, GLenum);
    void (KHRONOS_APIENTRY * tunisQueryCounterEXT)(GLuint, GLenum);
    GLbitfield(KHRONOS_APIENTRY * tunisQueryMatrixxOES)(GLfixed *, GLint *);
    void (KHRONOS_APIENTRY * tunisQueryObjectParameteruiAMD)(GLenum, GLuint, GLenum, GLuint);
    GLint(KHRONOS_APIENTRY * tunisQueryResourceNV)(GLenum, GLint, GLuint, GLint *);
    void (KHRONOS_APIENTRY * tunisQueryResourceTagNV)(GLint, const GLchar *);
    void (KHRONOS_APIENTRY * tunisRasterPos2d)(GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * tunisRasterPos2dv)(const GLdouble *);
    void (KHRONOS_APIENTRY * tunisRasterPos2f)(GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisRasterPos2fv)(const GLfloat *);
    void (KHRONOS_APIENTRY * tunisRasterPos2i)(GLint, GLint);
    void (KHRONOS_APIENTRY * tunisRasterPos2iv)(const GLint *);
    void (KHRONOS_APIENTRY * tunisRasterPos2s)(GLshort, GLshort);
    void (KHRONOS_APIENTRY * tunisRasterPos2sv)(const GLshort *);
    void (KHRONOS_APIENTRY * tunisRasterPos2xOES)(GLfixed, GLfixed);
    void (KHRONOS_APIENTRY * tunisRasterPos2xvOES)(const GLfixed *);
    void (KHRONOS_APIENTRY * tunisRasterPos3d)(GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * tunisRasterPos3dv)(const GLdouble *);
    void (KHRONOS_APIENTRY * tunisRasterPos3f)(GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisRasterPos3fv)(const GLfloat *);
    void (KHRONOS_APIENTRY * tunisRasterPos3i)(GLint, GLint, GLint);
    void (KHRONOS_APIENTRY * tunisRasterPos3iv)(const GLint *);
    void (KHRONOS_APIENTRY * tunisRasterPos3s)(GLshort, GLshort, GLshort);
    void (KHRONOS_APIENTRY * tunisRasterPos3sv)(const GLshort *);
    void (KHRONOS_APIENTRY * tunisRasterPos3xOES)(GLfixed, GLfixed, GLfixed);
    void (KHRONOS_APIENTRY * tunisRasterPos3xvOES)(const GLfixed *);
    void (KHRONOS_APIENTRY * tunisRasterPos4d)(GLdouble, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * tunisRasterPos4dv)(const GLdouble *);
    void (KHRONOS_APIENTRY * tunisRasterPos4f)(GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisRasterPos4fv)(const GLfloat *);
    void (KHRONOS_APIENTRY * tunisRasterPos4i)(GLint, GLint, GLint, GLint);
    void (KHRONOS_APIENTRY * tunisRasterPos4iv)(const GLint *);
    void (KHRONOS_APIENTRY * tunisRasterPos4s)(GLshort, GLshort, GLshort, GLshort);
    void (KHRONOS_APIENTRY * tunisRasterPos4sv)(const GLshort *);
    void (KHRONOS_APIENTRY * tunisRasterPos4xOES)(GLfixed, GLfixed, GLfixed, GLfixed);
    void (KHRONOS_APIENTRY * tunisRasterPos4xvOES)(const GLfixed *);
    void (KHRONOS_APIENTRY * tunisRasterSamplesEXT)(GLuint, GLboolean);
    void (KHRONOS_APIENTRY * tunisReadBuffer)(GLenum);
    void (KHRONOS_APIENTRY * tunisReadBufferIndexedEXT)(GLenum, GLint);
    void (KHRONOS_APIENTRY * tunisReadBufferNV)(GLenum);
    void (KHRONOS_APIENTRY * tunisReadBufferRegion)(GLuint, GLint, GLint, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * tunisReadInstrumentsSGIX)(GLint);
    void (KHRONOS_APIENTRY * tunisReadPixels)(GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, void *);
    void (KHRONOS_APIENTRY * tunisReadnPixels)(GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, GLsizei, void *);
    void (KHRONOS_APIENTRY * tunisReadnPixelsARB)(GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, GLsizei, void *);
    void (KHRONOS_APIENTRY * tunisReadnPixelsEXT)(GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, GLsizei, void *);
    void (KHRONOS_APIENTRY * tunisReadnPixelsKHR)(GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, GLsizei, void *);
    void (KHRONOS_APIENTRY * tunisRectd)(GLdouble, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * tunisRectdv)(const GLdouble *, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisRectf)(GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisRectfv)(const GLfloat *, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisRecti)(GLint, GLint, GLint, GLint);
    void (KHRONOS_APIENTRY * tunisRectiv)(const GLint *, const GLint *);
    void (KHRONOS_APIENTRY * tunisRects)(GLshort, GLshort, GLshort, GLshort);
    void (KHRONOS_APIENTRY * tunisRectsv)(const GLshort *, const GLshort *);
    void (KHRONOS_APIENTRY * tunisRectxOES)(GLfixed, GLfixed, GLfixed, GLfixed);
    void (KHRONOS_APIENTRY * tunisRectxvOES)(const GLfixed *, const GLfixed *);
    void (KHRONOS_APIENTRY * tunisReferencePlaneSGIX)(const GLdouble *);
    GLboolean(KHRONOS_APIENTRY * tunisReleaseKeyedMutexWin32EXT)(GLuint, GLuint64);
    void (KHRONOS_APIENTRY * tunisReleaseShaderCompiler)(void);
    void (KHRONOS_APIENTRY * tunisRenderGpuMaskNV)(GLbitfield);
    GLint(KHRONOS_APIENTRY * tunisRenderMode)(GLenum);
    void (KHRONOS_APIENTRY * tunisRenderbufferStorage)(GLenum, GLenum, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * tunisRenderbufferStorageEXT)(GLenum, GLenum, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * tunisRenderbufferStorageMultisample)(GLenum, GLsizei, GLenum, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * tunisRenderbufferStorageMultisampleANGLE)(GLenum, GLsizei, GLenum, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * tunisRenderbufferStorageMultisampleAPPLE)(GLenum, GLsizei, GLenum, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * tunisRenderbufferStorageMultisampleAdvancedAMD)(GLenum, GLsizei, GLsizei, GLenum, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * tunisRenderbufferStorageMultisampleCoverageNV)(GLenum, GLsizei, GLsizei, GLenum, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * tunisRenderbufferStorageMultisampleEXT)(GLenum, GLsizei, GLenum, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * tunisRenderbufferStorageMultisampleIMG)(GLenum, GLsizei, GLenum, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * tunisRenderbufferStorageMultisampleNV)(GLenum, GLsizei, GLenum, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * tunisRenderbufferStorageOES)(GLenum, GLenum, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * tunisReplacementCodePointerSUN)(GLenum, GLsizei, const void **);
    void (KHRONOS_APIENTRY * tunisReplacementCodeubSUN)(GLubyte);
    void (KHRONOS_APIENTRY * tunisReplacementCodeubvSUN)(const GLubyte *);
    void (KHRONOS_APIENTRY * tunisReplacementCodeuiColor3fVertex3fSUN)(GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisReplacementCodeuiColor3fVertex3fvSUN)(const GLuint *, const GLfloat *, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisReplacementCodeuiColor4fNormal3fVertex3fSUN)(GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisReplacementCodeuiColor4fNormal3fVertex3fvSUN)(const GLuint *, const GLfloat *, const GLfloat *, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisReplacementCodeuiColor4ubVertex3fSUN)(GLuint, GLubyte, GLubyte, GLubyte, GLubyte, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisReplacementCodeuiColor4ubVertex3fvSUN)(const GLuint *, const GLubyte *, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisReplacementCodeuiNormal3fVertex3fSUN)(GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisReplacementCodeuiNormal3fVertex3fvSUN)(const GLuint *, const GLfloat *, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisReplacementCodeuiSUN)(GLuint);
    void (KHRONOS_APIENTRY * tunisReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN)(GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN)(const GLuint *, const GLfloat *, const GLfloat *, const GLfloat *, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisReplacementCodeuiTexCoord2fNormal3fVertex3fSUN)(GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN)(const GLuint *, const GLfloat *, const GLfloat *, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisReplacementCodeuiTexCoord2fVertex3fSUN)(GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisReplacementCodeuiTexCoord2fVertex3fvSUN)(const GLuint *, const GLfloat *, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisReplacementCodeuiVertex3fSUN)(GLuint, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisReplacementCodeuiVertex3fvSUN)(const GLuint *, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisReplacementCodeuivSUN)(const GLuint *);
    void (KHRONOS_APIENTRY * tunisReplacementCodeusSUN)(GLushort);
    void (KHRONOS_APIENTRY * tunisReplacementCodeusvSUN)(const GLushort *);
    void (KHRONOS_APIENTRY * tunisRequestResidentProgramsNV)(GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY * tunisResetHistogram)(GLenum);
    void (KHRONOS_APIENTRY * tunisResetHistogramEXT)(GLenum);
    void (KHRONOS_APIENTRY * tunisResetMemoryObjectParameterNV)(GLuint, GLenum);
    void (KHRONOS_APIENTRY * tunisResetMinmax)(GLenum);
    void (KHRONOS_APIENTRY * tunisResetMinmaxEXT)(GLenum);
    void (KHRONOS_APIENTRY * tunisResizeBuffersMESA)(void);
    void (KHRONOS_APIENTRY * tunisResolveDepthValuesNV)(void);
    void (KHRONOS_APIENTRY * tunisResolveMultisampleFramebufferAPPLE)(void);
    void (KHRONOS_APIENTRY * tunisResumeTransformFeedback)(void);
    void (KHRONOS_APIENTRY * tunisResumeTransformFeedbackNV)(void);
    void (KHRONOS_APIENTRY * tunisRotated)(GLdouble, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * tunisRotatef)(GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisRotatex)(GLfixed, GLfixed, GLfixed, GLfixed);
    void (KHRONOS_APIENTRY * tunisRotatexOES)(GLfixed, GLfixed, GLfixed, GLfixed);
    void (KHRONOS_APIENTRY * tunisSampleCoverage)(GLfloat, GLboolean);
    void (KHRONOS_APIENTRY * tunisSampleCoverageARB)(GLfloat, GLboolean);
    void (KHRONOS_APIENTRY * tunisSampleCoveragex)(GLclampx, GLboolean);
    void (KHRONOS_APIENTRY * tunisSampleCoveragexOES)(GLclampx, GLboolean);
    void (KHRONOS_APIENTRY * tunisSampleMapATI)(GLuint, GLuint, GLenum);
    void (KHRONOS_APIENTRY * tunisSampleMaskEXT)(GLclampf, GLboolean);
    void (KHRONOS_APIENTRY * tunisSampleMaskIndexedNV)(GLuint, GLbitfield);
    void (KHRONOS_APIENTRY * tunisSampleMaskSGIS)(GLclampf, GLboolean);
    void (KHRONOS_APIENTRY * tunisSampleMaski)(GLuint, GLbitfield);
    void (KHRONOS_APIENTRY * tunisSamplePatternEXT)(GLenum);
    void (KHRONOS_APIENTRY * tunisSamplePatternSGIS)(GLenum);
    void (KHRONOS_APIENTRY * tunisSamplerParameterIiv)(GLuint, GLenum, const GLint *);
    void (KHRONOS_APIENTRY * tunisSamplerParameterIivEXT)(GLuint, GLenum, const GLint *);
    void (KHRONOS_APIENTRY * tunisSamplerParameterIivOES)(GLuint, GLenum, const GLint *);
    void (KHRONOS_APIENTRY * tunisSamplerParameterIuiv)(GLuint, GLenum, const GLuint *);
    void (KHRONOS_APIENTRY * tunisSamplerParameterIuivEXT)(GLuint, GLenum, const GLuint *);
    void (KHRONOS_APIENTRY * tunisSamplerParameterIuivOES)(GLuint, GLenum, const GLuint *);
    void (KHRONOS_APIENTRY * tunisSamplerParameterf)(GLuint, GLenum, GLfloat);
    void (KHRONOS_APIENTRY * tunisSamplerParameterfv)(GLuint, GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisSamplerParameteri)(GLuint, GLenum, GLint);
    void (KHRONOS_APIENTRY * tunisSamplerParameteriv)(GLuint, GLenum, const GLint *);
    void (KHRONOS_APIENTRY * tunisScaled)(GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * tunisScalef)(GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisScalex)(GLfixed, GLfixed, GLfixed);
    void (KHRONOS_APIENTRY * tunisScalexOES)(GLfixed, GLfixed, GLfixed);
    void (KHRONOS_APIENTRY * tunisScissor)(GLint, GLint, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * tunisScissorArrayv)(GLuint, GLsizei, const GLint *);
    void (KHRONOS_APIENTRY * tunisScissorArrayvNV)(GLuint, GLsizei, const GLint *);
    void (KHRONOS_APIENTRY * tunisScissorArrayvOES)(GLuint, GLsizei, const GLint *);
    void (KHRONOS_APIENTRY * tunisScissorExclusiveArrayvNV)(GLuint, GLsizei, const GLint *);
    void (KHRONOS_APIENTRY * tunisScissorExclusiveNV)(GLint, GLint, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * tunisScissorIndexed)(GLuint, GLint, GLint, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * tunisScissorIndexedNV)(GLuint, GLint, GLint, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * tunisScissorIndexedOES)(GLuint, GLint, GLint, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * tunisScissorIndexedv)(GLuint, const GLint *);
    void (KHRONOS_APIENTRY * tunisScissorIndexedvNV)(GLuint, const GLint *);
    void (KHRONOS_APIENTRY * tunisScissorIndexedvOES)(GLuint, const GLint *);
    void (KHRONOS_APIENTRY * tunisSecondaryColor3b)(GLbyte, GLbyte, GLbyte);
    void (KHRONOS_APIENTRY * tunisSecondaryColor3bEXT)(GLbyte, GLbyte, GLbyte);
    void (KHRONOS_APIENTRY * tunisSecondaryColor3bv)(const GLbyte *);
    void (KHRONOS_APIENTRY * tunisSecondaryColor3bvEXT)(const GLbyte *);
    void (KHRONOS_APIENTRY * tunisSecondaryColor3d)(GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * tunisSecondaryColor3dEXT)(GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * tunisSecondaryColor3dv)(const GLdouble *);
    void (KHRONOS_APIENTRY * tunisSecondaryColor3dvEXT)(const GLdouble *);
    void (KHRONOS_APIENTRY * tunisSecondaryColor3f)(GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisSecondaryColor3fEXT)(GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisSecondaryColor3fv)(const GLfloat *);
    void (KHRONOS_APIENTRY * tunisSecondaryColor3fvEXT)(const GLfloat *);
    void (KHRONOS_APIENTRY * tunisSecondaryColor3hNV)(GLhalfNV, GLhalfNV, GLhalfNV);
    void (KHRONOS_APIENTRY * tunisSecondaryColor3hvNV)(const GLhalfNV *);
    void (KHRONOS_APIENTRY * tunisSecondaryColor3i)(GLint, GLint, GLint);
    void (KHRONOS_APIENTRY * tunisSecondaryColor3iEXT)(GLint, GLint, GLint);
    void (KHRONOS_APIENTRY * tunisSecondaryColor3iv)(const GLint *);
    void (KHRONOS_APIENTRY * tunisSecondaryColor3ivEXT)(const GLint *);
    void (KHRONOS_APIENTRY * tunisSecondaryColor3s)(GLshort, GLshort, GLshort);
    void (KHRONOS_APIENTRY * tunisSecondaryColor3sEXT)(GLshort, GLshort, GLshort);
    void (KHRONOS_APIENTRY * tunisSecondaryColor3sv)(const GLshort *);
    void (KHRONOS_APIENTRY * tunisSecondaryColor3svEXT)(const GLshort *);
    void (KHRONOS_APIENTRY * tunisSecondaryColor3ub)(GLubyte, GLubyte, GLubyte);
    void (KHRONOS_APIENTRY * tunisSecondaryColor3ubEXT)(GLubyte, GLubyte, GLubyte);
    void (KHRONOS_APIENTRY * tunisSecondaryColor3ubv)(const GLubyte *);
    void (KHRONOS_APIENTRY * tunisSecondaryColor3ubvEXT)(const GLubyte *);
    void (KHRONOS_APIENTRY * tunisSecondaryColor3ui)(GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY * tunisSecondaryColor3uiEXT)(GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY * tunisSecondaryColor3uiv)(const GLuint *);
    void (KHRONOS_APIENTRY * tunisSecondaryColor3uivEXT)(const GLuint *);
    void (KHRONOS_APIENTRY * tunisSecondaryColor3us)(GLushort, GLushort, GLushort);
    void (KHRONOS_APIENTRY * tunisSecondaryColor3usEXT)(GLushort, GLushort, GLushort);
    void (KHRONOS_APIENTRY * tunisSecondaryColor3usv)(const GLushort *);
    void (KHRONOS_APIENTRY * tunisSecondaryColor3usvEXT)(const GLushort *);
    void (KHRONOS_APIENTRY * tunisSecondaryColorFormatNV)(GLint, GLenum, GLsizei);
    void (KHRONOS_APIENTRY * tunisSecondaryColorP3ui)(GLenum, GLuint);
    void (KHRONOS_APIENTRY * tunisSecondaryColorP3uiv)(GLenum, const GLuint *);
    void (KHRONOS_APIENTRY * tunisSecondaryColorPointer)(GLint, GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY * tunisSecondaryColorPointerEXT)(GLint, GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY * tunisSecondaryColorPointerListIBM)(GLint, GLenum, GLint, const void **, GLint);
    void (KHRONOS_APIENTRY * tunisSelectBuffer)(GLsizei, GLuint *);
    void (KHRONOS_APIENTRY * tunisSelectPerfMonitorCountersAMD)(GLuint, GLboolean, GLuint, GLint, GLuint *);
    void (KHRONOS_APIENTRY * tunisSemaphoreParameterui64vEXT)(GLuint, GLenum, const GLuint64 *);
    void (KHRONOS_APIENTRY * tunisSeparableFilter2D)(GLenum, GLenum, GLsizei, GLsizei, GLenum, GLenum, const void *, const void *);
    void (KHRONOS_APIENTRY * tunisSeparableFilter2DEXT)(GLenum, GLenum, GLsizei, GLsizei, GLenum, GLenum, const void *, const void *);
    void (KHRONOS_APIENTRY * tunisSetFenceAPPLE)(GLuint);
    void (KHRONOS_APIENTRY * tunisSetFenceNV)(GLuint, GLenum);
    void (KHRONOS_APIENTRY * tunisSetFragmentShaderConstantATI)(GLuint, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisSetInvariantEXT)(GLuint, GLenum, const void *);
    void (KHRONOS_APIENTRY * tunisSetLocalConstantEXT)(GLuint, GLenum, const void *);
    void (KHRONOS_APIENTRY * tunisSetMultisamplefvAMD)(GLenum, GLuint, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisShadeModel)(GLenum);
    void (KHRONOS_APIENTRY * tunisShaderBinary)(GLsizei, const GLuint *, GLenum, const void *, GLsizei);
    void (KHRONOS_APIENTRY * tunisShaderOp1EXT)(GLenum, GLuint, GLuint);
    void (KHRONOS_APIENTRY * tunisShaderOp2EXT)(GLenum, GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY * tunisShaderOp3EXT)(GLenum, GLuint, GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY * tunisShaderSource)(GLuint, GLsizei, const GLchar *const*, const GLint *);
    void (KHRONOS_APIENTRY * tunisShaderSourceARB)(GLhandleARB, GLsizei, const GLcharARB **, const GLint *);
    void (KHRONOS_APIENTRY * tunisShaderStorageBlockBinding)(GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY * tunisShadingRateImageBarrierNV)(GLboolean);
    void (KHRONOS_APIENTRY * tunisShadingRateImagePaletteNV)(GLuint, GLuint, GLsizei, const GLenum *);
    void (KHRONOS_APIENTRY * tunisShadingRateSampleOrderCustomNV)(GLenum, GLuint, const GLint *);
    void (KHRONOS_APIENTRY * tunisShadingRateSampleOrderNV)(GLenum);
    void (KHRONOS_APIENTRY * tunisSharpenTexFuncSGIS)(GLenum, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisSignalSemaphoreEXT)(GLuint, GLuint, const GLuint *, GLuint, const GLuint *, const GLenum *);
    void (KHRONOS_APIENTRY * tunisSignalVkFenceNV)(GLuint64);
    void (KHRONOS_APIENTRY * tunisSignalVkSemaphoreNV)(GLuint64);
    void (KHRONOS_APIENTRY * tunisSpecializeShader)(GLuint, const GLchar *, GLuint, const GLuint *, const GLuint *);
    void (KHRONOS_APIENTRY * tunisSpecializeShaderARB)(GLuint, const GLchar *, GLuint, const GLuint *, const GLuint *);
    void (KHRONOS_APIENTRY * tunisSpriteParameterfSGIX)(GLenum, GLfloat);
    void (KHRONOS_APIENTRY * tunisSpriteParameterfvSGIX)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisSpriteParameteriSGIX)(GLenum, GLint);
    void (KHRONOS_APIENTRY * tunisSpriteParameterivSGIX)(GLenum, const GLint *);
    void (KHRONOS_APIENTRY * tunisStartInstrumentsSGIX)(void);
    void (KHRONOS_APIENTRY * tunisStartTilingQCOM)(GLuint, GLuint, GLuint, GLuint, GLbitfield);
    void (KHRONOS_APIENTRY * tunisStateCaptureNV)(GLuint, GLenum);
    void (KHRONOS_APIENTRY * tunisStencilClearTagEXT)(GLsizei, GLuint);
    void (KHRONOS_APIENTRY * tunisStencilFillPathInstancedNV)(GLsizei, GLenum, const void *, GLuint, GLenum, GLuint, GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisStencilFillPathNV)(GLuint, GLenum, GLuint);
    void (KHRONOS_APIENTRY * tunisStencilFunc)(GLenum, GLint, GLuint);
    void (KHRONOS_APIENTRY * tunisStencilFuncSeparate)(GLenum, GLenum, GLint, GLuint);
    void (KHRONOS_APIENTRY * tunisStencilFuncSeparateATI)(GLenum, GLenum, GLint, GLuint);
    void (KHRONOS_APIENTRY * tunisStencilMask)(GLuint);
    void (KHRONOS_APIENTRY * tunisStencilMaskSeparate)(GLenum, GLuint);
    void (KHRONOS_APIENTRY * tunisStencilOp)(GLenum, GLenum, GLenum);
    void (KHRONOS_APIENTRY * tunisStencilOpSeparate)(GLenum, GLenum, GLenum, GLenum);
    void (KHRONOS_APIENTRY * tunisStencilOpSeparateATI)(GLenum, GLenum, GLenum, GLenum);
    void (KHRONOS_APIENTRY * tunisStencilOpValueAMD)(GLenum, GLuint);
    void (KHRONOS_APIENTRY * tunisStencilStrokePathInstancedNV)(GLsizei, GLenum, const void *, GLuint, GLint, GLuint, GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisStencilStrokePathNV)(GLuint, GLint, GLuint);
    void (KHRONOS_APIENTRY * tunisStencilThenCoverFillPathInstancedNV)(GLsizei, GLenum, const void *, GLuint, GLenum, GLuint, GLenum, GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisStencilThenCoverFillPathNV)(GLuint, GLenum, GLuint, GLenum);
    void (KHRONOS_APIENTRY * tunisStencilThenCoverStrokePathInstancedNV)(GLsizei, GLenum, const void *, GLuint, GLint, GLuint, GLenum, GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisStencilThenCoverStrokePathNV)(GLuint, GLint, GLuint, GLenum);
    void (KHRONOS_APIENTRY * tunisStopInstrumentsSGIX)(GLint);
    void (KHRONOS_APIENTRY * tunisStringMarkerGREMEDY)(GLsizei, const void *);
    void (KHRONOS_APIENTRY * tunisSubpixelPrecisionBiasNV)(GLuint, GLuint);
    void (KHRONOS_APIENTRY * tunisSwizzleEXT)(GLuint, GLuint, GLenum, GLenum, GLenum, GLenum);
    void (KHRONOS_APIENTRY * tunisSyncTextureINTEL)(GLuint);
    void (KHRONOS_APIENTRY * tunisTagSampleBufferSGIX)(void);
    void (KHRONOS_APIENTRY * tunisTangent3bEXT)(GLbyte, GLbyte, GLbyte);
    void (KHRONOS_APIENTRY * tunisTangent3bvEXT)(const GLbyte *);
    void (KHRONOS_APIENTRY * tunisTangent3dEXT)(GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * tunisTangent3dvEXT)(const GLdouble *);
    void (KHRONOS_APIENTRY * tunisTangent3fEXT)(GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisTangent3fvEXT)(const GLfloat *);
    void (KHRONOS_APIENTRY * tunisTangent3iEXT)(GLint, GLint, GLint);
    void (KHRONOS_APIENTRY * tunisTangent3ivEXT)(const GLint *);
    void (KHRONOS_APIENTRY * tunisTangent3sEXT)(GLshort, GLshort, GLshort);
    void (KHRONOS_APIENTRY * tunisTangent3svEXT)(const GLshort *);
    void (KHRONOS_APIENTRY * tunisTangentPointerEXT)(GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY * tunisTbufferMask3DFX)(GLuint);
    void (KHRONOS_APIENTRY * tunisTessellationFactorAMD)(GLfloat);
    void (KHRONOS_APIENTRY * tunisTessellationModeAMD)(GLenum);
    GLboolean(KHRONOS_APIENTRY * tunisTestFenceAPPLE)(GLuint);
    GLboolean(KHRONOS_APIENTRY * tunisTestFenceNV)(GLuint);
    GLboolean(KHRONOS_APIENTRY * tunisTestObjectAPPLE)(GLenum, GLuint);
    void (KHRONOS_APIENTRY * tunisTexAttachMemoryNV)(GLenum, GLuint, GLuint64);
    void (KHRONOS_APIENTRY * tunisTexBuffer)(GLenum, GLenum, GLuint);
    void (KHRONOS_APIENTRY * tunisTexBufferARB)(GLenum, GLenum, GLuint);
    void (KHRONOS_APIENTRY * tunisTexBufferEXT)(GLenum, GLenum, GLuint);
    void (KHRONOS_APIENTRY * tunisTexBufferOES)(GLenum, GLenum, GLuint);
    void (KHRONOS_APIENTRY * tunisTexBufferRange)(GLenum, GLenum, GLuint, GLintptr, GLsizeiptr);
    void (KHRONOS_APIENTRY * tunisTexBufferRangeEXT)(GLenum, GLenum, GLuint, GLintptr, GLsizeiptr);
    void (KHRONOS_APIENTRY * tunisTexBufferRangeOES)(GLenum, GLenum, GLuint, GLintptr, GLsizeiptr);
    void (KHRONOS_APIENTRY * tunisTexBumpParameterfvATI)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisTexBumpParameterivATI)(GLenum, const GLint *);
    void (KHRONOS_APIENTRY * tunisTexCoord1bOES)(GLbyte);
    void (KHRONOS_APIENTRY * tunisTexCoord1bvOES)(const GLbyte *);
    void (KHRONOS_APIENTRY * tunisTexCoord1d)(GLdouble);
    void (KHRONOS_APIENTRY * tunisTexCoord1dv)(const GLdouble *);
    void (KHRONOS_APIENTRY * tunisTexCoord1f)(GLfloat);
    void (KHRONOS_APIENTRY * tunisTexCoord1fv)(const GLfloat *);
    void (KHRONOS_APIENTRY * tunisTexCoord1hNV)(GLhalfNV);
    void (KHRONOS_APIENTRY * tunisTexCoord1hvNV)(const GLhalfNV *);
    void (KHRONOS_APIENTRY * tunisTexCoord1i)(GLint);
    void (KHRONOS_APIENTRY * tunisTexCoord1iv)(const GLint *);
    void (KHRONOS_APIENTRY * tunisTexCoord1s)(GLshort);
    void (KHRONOS_APIENTRY * tunisTexCoord1sv)(const GLshort *);
    void (KHRONOS_APIENTRY * tunisTexCoord1xOES)(GLfixed);
    void (KHRONOS_APIENTRY * tunisTexCoord1xvOES)(const GLfixed *);
    void (KHRONOS_APIENTRY * tunisTexCoord2bOES)(GLbyte, GLbyte);
    void (KHRONOS_APIENTRY * tunisTexCoord2bvOES)(const GLbyte *);
    void (KHRONOS_APIENTRY * tunisTexCoord2d)(GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * tunisTexCoord2dv)(const GLdouble *);
    void (KHRONOS_APIENTRY * tunisTexCoord2f)(GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisTexCoord2fColor3fVertex3fSUN)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisTexCoord2fColor3fVertex3fvSUN)(const GLfloat *, const GLfloat *, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisTexCoord2fColor4fNormal3fVertex3fSUN)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisTexCoord2fColor4fNormal3fVertex3fvSUN)(const GLfloat *, const GLfloat *, const GLfloat *, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisTexCoord2fColor4ubVertex3fSUN)(GLfloat, GLfloat, GLubyte, GLubyte, GLubyte, GLubyte, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisTexCoord2fColor4ubVertex3fvSUN)(const GLfloat *, const GLubyte *, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisTexCoord2fNormal3fVertex3fSUN)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisTexCoord2fNormal3fVertex3fvSUN)(const GLfloat *, const GLfloat *, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisTexCoord2fVertex3fSUN)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisTexCoord2fVertex3fvSUN)(const GLfloat *, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisTexCoord2fv)(const GLfloat *);
    void (KHRONOS_APIENTRY * tunisTexCoord2hNV)(GLhalfNV, GLhalfNV);
    void (KHRONOS_APIENTRY * tunisTexCoord2hvNV)(const GLhalfNV *);
    void (KHRONOS_APIENTRY * tunisTexCoord2i)(GLint, GLint);
    void (KHRONOS_APIENTRY * tunisTexCoord2iv)(const GLint *);
    void (KHRONOS_APIENTRY * tunisTexCoord2s)(GLshort, GLshort);
    void (KHRONOS_APIENTRY * tunisTexCoord2sv)(const GLshort *);
    void (KHRONOS_APIENTRY * tunisTexCoord2xOES)(GLfixed, GLfixed);
    void (KHRONOS_APIENTRY * tunisTexCoord2xvOES)(const GLfixed *);
    void (KHRONOS_APIENTRY * tunisTexCoord3bOES)(GLbyte, GLbyte, GLbyte);
    void (KHRONOS_APIENTRY * tunisTexCoord3bvOES)(const GLbyte *);
    void (KHRONOS_APIENTRY * tunisTexCoord3d)(GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * tunisTexCoord3dv)(const GLdouble *);
    void (KHRONOS_APIENTRY * tunisTexCoord3f)(GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisTexCoord3fv)(const GLfloat *);
    void (KHRONOS_APIENTRY * tunisTexCoord3hNV)(GLhalfNV, GLhalfNV, GLhalfNV);
    void (KHRONOS_APIENTRY * tunisTexCoord3hvNV)(const GLhalfNV *);
    void (KHRONOS_APIENTRY * tunisTexCoord3i)(GLint, GLint, GLint);
    void (KHRONOS_APIENTRY * tunisTexCoord3iv)(const GLint *);
    void (KHRONOS_APIENTRY * tunisTexCoord3s)(GLshort, GLshort, GLshort);
    void (KHRONOS_APIENTRY * tunisTexCoord3sv)(const GLshort *);
    void (KHRONOS_APIENTRY * tunisTexCoord3xOES)(GLfixed, GLfixed, GLfixed);
    void (KHRONOS_APIENTRY * tunisTexCoord3xvOES)(const GLfixed *);
    void (KHRONOS_APIENTRY * tunisTexCoord4bOES)(GLbyte, GLbyte, GLbyte, GLbyte);
    void (KHRONOS_APIENTRY * tunisTexCoord4bvOES)(const GLbyte *);
    void (KHRONOS_APIENTRY * tunisTexCoord4d)(GLdouble, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * tunisTexCoord4dv)(const GLdouble *);
    void (KHRONOS_APIENTRY * tunisTexCoord4f)(GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisTexCoord4fColor4fNormal3fVertex4fSUN)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisTexCoord4fColor4fNormal3fVertex4fvSUN)(const GLfloat *, const GLfloat *, const GLfloat *, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisTexCoord4fVertex4fSUN)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisTexCoord4fVertex4fvSUN)(const GLfloat *, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisTexCoord4fv)(const GLfloat *);
    void (KHRONOS_APIENTRY * tunisTexCoord4hNV)(GLhalfNV, GLhalfNV, GLhalfNV, GLhalfNV);
    void (KHRONOS_APIENTRY * tunisTexCoord4hvNV)(const GLhalfNV *);
    void (KHRONOS_APIENTRY * tunisTexCoord4i)(GLint, GLint, GLint, GLint);
    void (KHRONOS_APIENTRY * tunisTexCoord4iv)(const GLint *);
    void (KHRONOS_APIENTRY * tunisTexCoord4s)(GLshort, GLshort, GLshort, GLshort);
    void (KHRONOS_APIENTRY * tunisTexCoord4sv)(const GLshort *);
    void (KHRONOS_APIENTRY * tunisTexCoord4xOES)(GLfixed, GLfixed, GLfixed, GLfixed);
    void (KHRONOS_APIENTRY * tunisTexCoord4xvOES)(const GLfixed *);
    void (KHRONOS_APIENTRY * tunisTexCoordFormatNV)(GLint, GLenum, GLsizei);
    void (KHRONOS_APIENTRY * tunisTexCoordP1ui)(GLenum, GLuint);
    void (KHRONOS_APIENTRY * tunisTexCoordP1uiv)(GLenum, const GLuint *);
    void (KHRONOS_APIENTRY * tunisTexCoordP2ui)(GLenum, GLuint);
    void (KHRONOS_APIENTRY * tunisTexCoordP2uiv)(GLenum, const GLuint *);
    void (KHRONOS_APIENTRY * tunisTexCoordP3ui)(GLenum, GLuint);
    void (KHRONOS_APIENTRY * tunisTexCoordP3uiv)(GLenum, const GLuint *);
    void (KHRONOS_APIENTRY * tunisTexCoordP4ui)(GLenum, GLuint);
    void (KHRONOS_APIENTRY * tunisTexCoordP4uiv)(GLenum, const GLuint *);
    void (KHRONOS_APIENTRY * tunisTexCoordPointer)(GLint, GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY * tunisTexCoordPointerEXT)(GLint, GLenum, GLsizei, GLsizei, const void *);
    void (KHRONOS_APIENTRY * tunisTexCoordPointerListIBM)(GLint, GLenum, GLint, const void **, GLint);
    void (KHRONOS_APIENTRY * tunisTexCoordPointervINTEL)(GLint, GLenum, const void **);
    void (KHRONOS_APIENTRY * tunisTexEnvf)(GLenum, GLenum, GLfloat);
    void (KHRONOS_APIENTRY * tunisTexEnvfv)(GLenum, GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisTexEnvi)(GLenum, GLenum, GLint);
    void (KHRONOS_APIENTRY * tunisTexEnviv)(GLenum, GLenum, const GLint *);
    void (KHRONOS_APIENTRY * tunisTexEnvx)(GLenum, GLenum, GLfixed);
    void (KHRONOS_APIENTRY * tunisTexEnvxOES)(GLenum, GLenum, GLfixed);
    void (KHRONOS_APIENTRY * tunisTexEnvxv)(GLenum, GLenum, const GLfixed *);
    void (KHRONOS_APIENTRY * tunisTexEnvxvOES)(GLenum, GLenum, const GLfixed *);
    void (KHRONOS_APIENTRY * tunisTexFilterFuncSGIS)(GLenum, GLenum, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisTexGend)(GLenum, GLenum, GLdouble);
    void (KHRONOS_APIENTRY * tunisTexGendv)(GLenum, GLenum, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisTexGenf)(GLenum, GLenum, GLfloat);
    void (KHRONOS_APIENTRY * tunisTexGenfOES)(GLenum, GLenum, GLfloat);
    void (KHRONOS_APIENTRY * tunisTexGenfv)(GLenum, GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisTexGenfvOES)(GLenum, GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisTexGeni)(GLenum, GLenum, GLint);
    void (KHRONOS_APIENTRY * tunisTexGeniOES)(GLenum, GLenum, GLint);
    void (KHRONOS_APIENTRY * tunisTexGeniv)(GLenum, GLenum, const GLint *);
    void (KHRONOS_APIENTRY * tunisTexGenivOES)(GLenum, GLenum, const GLint *);
    void (KHRONOS_APIENTRY * tunisTexGenxOES)(GLenum, GLenum, GLfixed);
    void (KHRONOS_APIENTRY * tunisTexGenxvOES)(GLenum, GLenum, const GLfixed *);
    void (KHRONOS_APIENTRY * tunisTexImage1D)(GLenum, GLint, GLint, GLsizei, GLint, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY * tunisTexImage2D)(GLenum, GLint, GLint, GLsizei, GLsizei, GLint, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY * tunisTexImage2DMultisample)(GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLboolean);
    void (KHRONOS_APIENTRY * tunisTexImage2DMultisampleCoverageNV)(GLenum, GLsizei, GLsizei, GLint, GLsizei, GLsizei, GLboolean);
    void (KHRONOS_APIENTRY * tunisTexImage3D)(GLenum, GLint, GLint, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY * tunisTexImage3DEXT)(GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY * tunisTexImage3DMultisample)(GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean);
    void (KHRONOS_APIENTRY * tunisTexImage3DMultisampleCoverageNV)(GLenum, GLsizei, GLsizei, GLint, GLsizei, GLsizei, GLsizei, GLboolean);
    void (KHRONOS_APIENTRY * tunisTexImage3DOES)(GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY * tunisTexImage4DSGIS)(GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY * tunisTexPageCommitmentARB)(GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLboolean);
    void (KHRONOS_APIENTRY * tunisTexPageCommitmentEXT)(GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLboolean);
    void (KHRONOS_APIENTRY * tunisTexParameterIiv)(GLenum, GLenum, const GLint *);
    void (KHRONOS_APIENTRY * tunisTexParameterIivEXT)(GLenum, GLenum, const GLint *);
    void (KHRONOS_APIENTRY * tunisTexParameterIivOES)(GLenum, GLenum, const GLint *);
    void (KHRONOS_APIENTRY * tunisTexParameterIuiv)(GLenum, GLenum, const GLuint *);
    void (KHRONOS_APIENTRY * tunisTexParameterIuivEXT)(GLenum, GLenum, const GLuint *);
    void (KHRONOS_APIENTRY * tunisTexParameterIuivOES)(GLenum, GLenum, const GLuint *);
    void (KHRONOS_APIENTRY * tunisTexParameterf)(GLenum, GLenum, GLfloat);
    void (KHRONOS_APIENTRY * tunisTexParameterfv)(GLenum, GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisTexParameteri)(GLenum, GLenum, GLint);
    void (KHRONOS_APIENTRY * tunisTexParameteriv)(GLenum, GLenum, const GLint *);
    void (KHRONOS_APIENTRY * tunisTexParameterx)(GLenum, GLenum, GLfixed);
    void (KHRONOS_APIENTRY * tunisTexParameterxOES)(GLenum, GLenum, GLfixed);
    void (KHRONOS_APIENTRY * tunisTexParameterxv)(GLenum, GLenum, const GLfixed *);
    void (KHRONOS_APIENTRY * tunisTexParameterxvOES)(GLenum, GLenum, const GLfixed *);
    void (KHRONOS_APIENTRY * tunisTexRenderbufferNV)(GLenum, GLuint);
    void (KHRONOS_APIENTRY * tunisTexStorage1D)(GLenum, GLsizei, GLenum, GLsizei);
    void (KHRONOS_APIENTRY * tunisTexStorage1DEXT)(GLenum, GLsizei, GLenum, GLsizei);
    void (KHRONOS_APIENTRY * tunisTexStorage2D)(GLenum, GLsizei, GLenum, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * tunisTexStorage2DEXT)(GLenum, GLsizei, GLenum, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * tunisTexStorage2DMultisample)(GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLboolean);
    void (KHRONOS_APIENTRY * tunisTexStorage3D)(GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * tunisTexStorage3DEXT)(GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * tunisTexStorage3DMultisample)(GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean);
    void (KHRONOS_APIENTRY * tunisTexStorage3DMultisampleOES)(GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean);
    void (KHRONOS_APIENTRY * tunisTexStorageMem1DEXT)(GLenum, GLsizei, GLenum, GLsizei, GLuint, GLuint64);
    void (KHRONOS_APIENTRY * tunisTexStorageMem2DEXT)(GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLuint, GLuint64);
    void (KHRONOS_APIENTRY * tunisTexStorageMem2DMultisampleEXT)(GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLboolean, GLuint, GLuint64);
    void (KHRONOS_APIENTRY * tunisTexStorageMem3DEXT)(GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLuint, GLuint64);
    void (KHRONOS_APIENTRY * tunisTexStorageMem3DMultisampleEXT)(GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean, GLuint, GLuint64);
    void (KHRONOS_APIENTRY * tunisTexStorageSparseAMD)(GLenum, GLenum, GLsizei, GLsizei, GLsizei, GLsizei, GLbitfield);
    void (KHRONOS_APIENTRY * tunisTexSubImage1D)(GLenum, GLint, GLint, GLsizei, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY * tunisTexSubImage1DEXT)(GLenum, GLint, GLint, GLsizei, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY * tunisTexSubImage2D)(GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY * tunisTexSubImage2DEXT)(GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY * tunisTexSubImage3D)(GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY * tunisTexSubImage3DEXT)(GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY * tunisTexSubImage3DOES)(GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY * tunisTexSubImage4DSGIS)(GLenum, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLsizei, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY * tunisTextureAttachMemoryNV)(GLuint, GLuint, GLuint64);
    void (KHRONOS_APIENTRY * tunisTextureBarrier)(void);
    void (KHRONOS_APIENTRY * tunisTextureBarrierNV)(void);
    void (KHRONOS_APIENTRY * tunisTextureBuffer)(GLuint, GLenum, GLuint);
    void (KHRONOS_APIENTRY * tunisTextureBufferEXT)(GLuint, GLenum, GLenum, GLuint);
    void (KHRONOS_APIENTRY * tunisTextureBufferRange)(GLuint, GLenum, GLuint, GLintptr, GLsizeiptr);
    void (KHRONOS_APIENTRY * tunisTextureBufferRangeEXT)(GLuint, GLenum, GLenum, GLuint, GLintptr, GLsizeiptr);
    void (KHRONOS_APIENTRY * tunisTextureColorMaskSGIS)(GLboolean, GLboolean, GLboolean, GLboolean);
    void (KHRONOS_APIENTRY * tunisTextureFoveationParametersQCOM)(GLuint, GLuint, GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisTextureImage1DEXT)(GLuint, GLenum, GLint, GLint, GLsizei, GLint, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY * tunisTextureImage2DEXT)(GLuint, GLenum, GLint, GLint, GLsizei, GLsizei, GLint, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY * tunisTextureImage2DMultisampleCoverageNV)(GLuint, GLenum, GLsizei, GLsizei, GLint, GLsizei, GLsizei, GLboolean);
    void (KHRONOS_APIENTRY * tunisTextureImage2DMultisampleNV)(GLuint, GLenum, GLsizei, GLint, GLsizei, GLsizei, GLboolean);
    void (KHRONOS_APIENTRY * tunisTextureImage3DEXT)(GLuint, GLenum, GLint, GLint, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY * tunisTextureImage3DMultisampleCoverageNV)(GLuint, GLenum, GLsizei, GLsizei, GLint, GLsizei, GLsizei, GLsizei, GLboolean);
    void (KHRONOS_APIENTRY * tunisTextureImage3DMultisampleNV)(GLuint, GLenum, GLsizei, GLint, GLsizei, GLsizei, GLsizei, GLboolean);
    void (KHRONOS_APIENTRY * tunisTextureLightEXT)(GLenum);
    void (KHRONOS_APIENTRY * tunisTextureMaterialEXT)(GLenum, GLenum);
    void (KHRONOS_APIENTRY * tunisTextureNormalEXT)(GLenum);
    void (KHRONOS_APIENTRY * tunisTexturePageCommitmentEXT)(GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLboolean);
    void (KHRONOS_APIENTRY * tunisTextureParameterIiv)(GLuint, GLenum, const GLint *);
    void (KHRONOS_APIENTRY * tunisTextureParameterIivEXT)(GLuint, GLenum, GLenum, const GLint *);
    void (KHRONOS_APIENTRY * tunisTextureParameterIuiv)(GLuint, GLenum, const GLuint *);
    void (KHRONOS_APIENTRY * tunisTextureParameterIuivEXT)(GLuint, GLenum, GLenum, const GLuint *);
    void (KHRONOS_APIENTRY * tunisTextureParameterf)(GLuint, GLenum, GLfloat);
    void (KHRONOS_APIENTRY * tunisTextureParameterfEXT)(GLuint, GLenum, GLenum, GLfloat);
    void (KHRONOS_APIENTRY * tunisTextureParameterfv)(GLuint, GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisTextureParameterfvEXT)(GLuint, GLenum, GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisTextureParameteri)(GLuint, GLenum, GLint);
    void (KHRONOS_APIENTRY * tunisTextureParameteriEXT)(GLuint, GLenum, GLenum, GLint);
    void (KHRONOS_APIENTRY * tunisTextureParameteriv)(GLuint, GLenum, const GLint *);
    void (KHRONOS_APIENTRY * tunisTextureParameterivEXT)(GLuint, GLenum, GLenum, const GLint *);
    void (KHRONOS_APIENTRY * tunisTextureRangeAPPLE)(GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY * tunisTextureRenderbufferEXT)(GLuint, GLenum, GLuint);
    void (KHRONOS_APIENTRY * tunisTextureStorage1D)(GLuint, GLsizei, GLenum, GLsizei);
    void (KHRONOS_APIENTRY * tunisTextureStorage1DEXT)(GLuint, GLenum, GLsizei, GLenum, GLsizei);
    void (KHRONOS_APIENTRY * tunisTextureStorage2D)(GLuint, GLsizei, GLenum, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * tunisTextureStorage2DEXT)(GLuint, GLenum, GLsizei, GLenum, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * tunisTextureStorage2DMultisample)(GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLboolean);
    void (KHRONOS_APIENTRY * tunisTextureStorage2DMultisampleEXT)(GLuint, GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLboolean);
    void (KHRONOS_APIENTRY * tunisTextureStorage3D)(GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * tunisTextureStorage3DEXT)(GLuint, GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * tunisTextureStorage3DMultisample)(GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean);
    void (KHRONOS_APIENTRY * tunisTextureStorage3DMultisampleEXT)(GLuint, GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean);
    void (KHRONOS_APIENTRY * tunisTextureStorageMem1DEXT)(GLuint, GLsizei, GLenum, GLsizei, GLuint, GLuint64);
    void (KHRONOS_APIENTRY * tunisTextureStorageMem2DEXT)(GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLuint, GLuint64);
    void (KHRONOS_APIENTRY * tunisTextureStorageMem2DMultisampleEXT)(GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLboolean, GLuint, GLuint64);
    void (KHRONOS_APIENTRY * tunisTextureStorageMem3DEXT)(GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLuint, GLuint64);
    void (KHRONOS_APIENTRY * tunisTextureStorageMem3DMultisampleEXT)(GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean, GLuint, GLuint64);
    void (KHRONOS_APIENTRY * tunisTextureStorageSparseAMD)(GLuint, GLenum, GLenum, GLsizei, GLsizei, GLsizei, GLsizei, GLbitfield);
    void (KHRONOS_APIENTRY * tunisTextureSubImage1D)(GLuint, GLint, GLint, GLsizei, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY * tunisTextureSubImage1DEXT)(GLuint, GLenum, GLint, GLint, GLsizei, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY * tunisTextureSubImage2D)(GLuint, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY * tunisTextureSubImage2DEXT)(GLuint, GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY * tunisTextureSubImage3D)(GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY * tunisTextureSubImage3DEXT)(GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY * tunisTextureView)(GLuint, GLenum, GLuint, GLenum, GLuint, GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY * tunisTextureViewEXT)(GLuint, GLenum, GLuint, GLenum, GLuint, GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY * tunisTextureViewOES)(GLuint, GLenum, GLuint, GLenum, GLuint, GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY * tunisTrackMatrixNV)(GLenum, GLuint, GLenum, GLenum);
    void (KHRONOS_APIENTRY * tunisTransformFeedbackAttribsNV)(GLsizei, const GLint *, GLenum);
    void (KHRONOS_APIENTRY * tunisTransformFeedbackBufferBase)(GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY * tunisTransformFeedbackBufferRange)(GLuint, GLuint, GLuint, GLintptr, GLsizeiptr);
    void (KHRONOS_APIENTRY * tunisTransformFeedbackStreamAttribsNV)(GLsizei, const GLint *, GLsizei, const GLint *, GLenum);
    void (KHRONOS_APIENTRY * tunisTransformFeedbackVaryings)(GLuint, GLsizei, const GLchar *const*, GLenum);
    void (KHRONOS_APIENTRY * tunisTransformFeedbackVaryingsEXT)(GLuint, GLsizei, const GLchar *const*, GLenum);
    void (KHRONOS_APIENTRY * tunisTransformFeedbackVaryingsNV)(GLuint, GLsizei, const GLint *, GLenum);
    void (KHRONOS_APIENTRY * tunisTransformPathNV)(GLuint, GLuint, GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisTranslated)(GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * tunisTranslatef)(GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisTranslatex)(GLfixed, GLfixed, GLfixed);
    void (KHRONOS_APIENTRY * tunisTranslatexOES)(GLfixed, GLfixed, GLfixed);
    void (KHRONOS_APIENTRY * tunisUniform1d)(GLint, GLdouble);
    void (KHRONOS_APIENTRY * tunisUniform1dv)(GLint, GLsizei, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisUniform1f)(GLint, GLfloat);
    void (KHRONOS_APIENTRY * tunisUniform1fARB)(GLint, GLfloat);
    void (KHRONOS_APIENTRY * tunisUniform1fv)(GLint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisUniform1fvARB)(GLint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisUniform1i)(GLint, GLint);
    void (KHRONOS_APIENTRY * tunisUniform1i64ARB)(GLint, GLint64);
    void (KHRONOS_APIENTRY * tunisUniform1i64NV)(GLint, GLint64EXT);
    void (KHRONOS_APIENTRY * tunisUniform1i64vARB)(GLint, GLsizei, const GLint64 *);
    void (KHRONOS_APIENTRY * tunisUniform1i64vNV)(GLint, GLsizei, const GLint64EXT *);
    void (KHRONOS_APIENTRY * tunisUniform1iARB)(GLint, GLint);
    void (KHRONOS_APIENTRY * tunisUniform1iv)(GLint, GLsizei, const GLint *);
    void (KHRONOS_APIENTRY * tunisUniform1ivARB)(GLint, GLsizei, const GLint *);
    void (KHRONOS_APIENTRY * tunisUniform1ui)(GLint, GLuint);
    void (KHRONOS_APIENTRY * tunisUniform1ui64ARB)(GLint, GLuint64);
    void (KHRONOS_APIENTRY * tunisUniform1ui64NV)(GLint, GLuint64EXT);
    void (KHRONOS_APIENTRY * tunisUniform1ui64vARB)(GLint, GLsizei, const GLuint64 *);
    void (KHRONOS_APIENTRY * tunisUniform1ui64vNV)(GLint, GLsizei, const GLuint64EXT *);
    void (KHRONOS_APIENTRY * tunisUniform1uiEXT)(GLint, GLuint);
    void (KHRONOS_APIENTRY * tunisUniform1uiv)(GLint, GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY * tunisUniform1uivEXT)(GLint, GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY * tunisUniform2d)(GLint, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * tunisUniform2dv)(GLint, GLsizei, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisUniform2f)(GLint, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisUniform2fARB)(GLint, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisUniform2fv)(GLint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisUniform2fvARB)(GLint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisUniform2i)(GLint, GLint, GLint);
    void (KHRONOS_APIENTRY * tunisUniform2i64ARB)(GLint, GLint64, GLint64);
    void (KHRONOS_APIENTRY * tunisUniform2i64NV)(GLint, GLint64EXT, GLint64EXT);
    void (KHRONOS_APIENTRY * tunisUniform2i64vARB)(GLint, GLsizei, const GLint64 *);
    void (KHRONOS_APIENTRY * tunisUniform2i64vNV)(GLint, GLsizei, const GLint64EXT *);
    void (KHRONOS_APIENTRY * tunisUniform2iARB)(GLint, GLint, GLint);
    void (KHRONOS_APIENTRY * tunisUniform2iv)(GLint, GLsizei, const GLint *);
    void (KHRONOS_APIENTRY * tunisUniform2ivARB)(GLint, GLsizei, const GLint *);
    void (KHRONOS_APIENTRY * tunisUniform2ui)(GLint, GLuint, GLuint);
    void (KHRONOS_APIENTRY * tunisUniform2ui64ARB)(GLint, GLuint64, GLuint64);
    void (KHRONOS_APIENTRY * tunisUniform2ui64NV)(GLint, GLuint64EXT, GLuint64EXT);
    void (KHRONOS_APIENTRY * tunisUniform2ui64vARB)(GLint, GLsizei, const GLuint64 *);
    void (KHRONOS_APIENTRY * tunisUniform2ui64vNV)(GLint, GLsizei, const GLuint64EXT *);
    void (KHRONOS_APIENTRY * tunisUniform2uiEXT)(GLint, GLuint, GLuint);
    void (KHRONOS_APIENTRY * tunisUniform2uiv)(GLint, GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY * tunisUniform2uivEXT)(GLint, GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY * tunisUniform3d)(GLint, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * tunisUniform3dv)(GLint, GLsizei, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisUniform3f)(GLint, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisUniform3fARB)(GLint, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisUniform3fv)(GLint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisUniform3fvARB)(GLint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisUniform3i)(GLint, GLint, GLint, GLint);
    void (KHRONOS_APIENTRY * tunisUniform3i64ARB)(GLint, GLint64, GLint64, GLint64);
    void (KHRONOS_APIENTRY * tunisUniform3i64NV)(GLint, GLint64EXT, GLint64EXT, GLint64EXT);
    void (KHRONOS_APIENTRY * tunisUniform3i64vARB)(GLint, GLsizei, const GLint64 *);
    void (KHRONOS_APIENTRY * tunisUniform3i64vNV)(GLint, GLsizei, const GLint64EXT *);
    void (KHRONOS_APIENTRY * tunisUniform3iARB)(GLint, GLint, GLint, GLint);
    void (KHRONOS_APIENTRY * tunisUniform3iv)(GLint, GLsizei, const GLint *);
    void (KHRONOS_APIENTRY * tunisUniform3ivARB)(GLint, GLsizei, const GLint *);
    void (KHRONOS_APIENTRY * tunisUniform3ui)(GLint, GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY * tunisUniform3ui64ARB)(GLint, GLuint64, GLuint64, GLuint64);
    void (KHRONOS_APIENTRY * tunisUniform3ui64NV)(GLint, GLuint64EXT, GLuint64EXT, GLuint64EXT);
    void (KHRONOS_APIENTRY * tunisUniform3ui64vARB)(GLint, GLsizei, const GLuint64 *);
    void (KHRONOS_APIENTRY * tunisUniform3ui64vNV)(GLint, GLsizei, const GLuint64EXT *);
    void (KHRONOS_APIENTRY * tunisUniform3uiEXT)(GLint, GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY * tunisUniform3uiv)(GLint, GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY * tunisUniform3uivEXT)(GLint, GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY * tunisUniform4d)(GLint, GLdouble, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * tunisUniform4dv)(GLint, GLsizei, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisUniform4f)(GLint, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisUniform4fARB)(GLint, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisUniform4fv)(GLint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisUniform4fvARB)(GLint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisUniform4i)(GLint, GLint, GLint, GLint, GLint);
    void (KHRONOS_APIENTRY * tunisUniform4i64ARB)(GLint, GLint64, GLint64, GLint64, GLint64);
    void (KHRONOS_APIENTRY * tunisUniform4i64NV)(GLint, GLint64EXT, GLint64EXT, GLint64EXT, GLint64EXT);
    void (KHRONOS_APIENTRY * tunisUniform4i64vARB)(GLint, GLsizei, const GLint64 *);
    void (KHRONOS_APIENTRY * tunisUniform4i64vNV)(GLint, GLsizei, const GLint64EXT *);
    void (KHRONOS_APIENTRY * tunisUniform4iARB)(GLint, GLint, GLint, GLint, GLint);
    void (KHRONOS_APIENTRY * tunisUniform4iv)(GLint, GLsizei, const GLint *);
    void (KHRONOS_APIENTRY * tunisUniform4ivARB)(GLint, GLsizei, const GLint *);
    void (KHRONOS_APIENTRY * tunisUniform4ui)(GLint, GLuint, GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY * tunisUniform4ui64ARB)(GLint, GLuint64, GLuint64, GLuint64, GLuint64);
    void (KHRONOS_APIENTRY * tunisUniform4ui64NV)(GLint, GLuint64EXT, GLuint64EXT, GLuint64EXT, GLuint64EXT);
    void (KHRONOS_APIENTRY * tunisUniform4ui64vARB)(GLint, GLsizei, const GLuint64 *);
    void (KHRONOS_APIENTRY * tunisUniform4ui64vNV)(GLint, GLsizei, const GLuint64EXT *);
    void (KHRONOS_APIENTRY * tunisUniform4uiEXT)(GLint, GLuint, GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY * tunisUniform4uiv)(GLint, GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY * tunisUniform4uivEXT)(GLint, GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY * tunisUniformBlockBinding)(GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY * tunisUniformBufferEXT)(GLuint, GLint, GLuint);
    void (KHRONOS_APIENTRY * tunisUniformHandleui64ARB)(GLint, GLuint64);
    void (KHRONOS_APIENTRY * tunisUniformHandleui64IMG)(GLint, GLuint64);
    void (KHRONOS_APIENTRY * tunisUniformHandleui64NV)(GLint, GLuint64);
    void (KHRONOS_APIENTRY * tunisUniformHandleui64vARB)(GLint, GLsizei, const GLuint64 *);
    void (KHRONOS_APIENTRY * tunisUniformHandleui64vIMG)(GLint, GLsizei, const GLuint64 *);
    void (KHRONOS_APIENTRY * tunisUniformHandleui64vNV)(GLint, GLsizei, const GLuint64 *);
    void (KHRONOS_APIENTRY * tunisUniformMatrix2dv)(GLint, GLsizei, GLboolean, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisUniformMatrix2fv)(GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisUniformMatrix2fvARB)(GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisUniformMatrix2x3dv)(GLint, GLsizei, GLboolean, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisUniformMatrix2x3fv)(GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisUniformMatrix2x3fvNV)(GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisUniformMatrix2x4dv)(GLint, GLsizei, GLboolean, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisUniformMatrix2x4fv)(GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisUniformMatrix2x4fvNV)(GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisUniformMatrix3dv)(GLint, GLsizei, GLboolean, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisUniformMatrix3fv)(GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisUniformMatrix3fvARB)(GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisUniformMatrix3x2dv)(GLint, GLsizei, GLboolean, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisUniformMatrix3x2fv)(GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisUniformMatrix3x2fvNV)(GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisUniformMatrix3x4dv)(GLint, GLsizei, GLboolean, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisUniformMatrix3x4fv)(GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisUniformMatrix3x4fvNV)(GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisUniformMatrix4dv)(GLint, GLsizei, GLboolean, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisUniformMatrix4fv)(GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisUniformMatrix4fvARB)(GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisUniformMatrix4x2dv)(GLint, GLsizei, GLboolean, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisUniformMatrix4x2fv)(GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisUniformMatrix4x2fvNV)(GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisUniformMatrix4x3dv)(GLint, GLsizei, GLboolean, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisUniformMatrix4x3fv)(GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisUniformMatrix4x3fvNV)(GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisUniformSubroutinesuiv)(GLenum, GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY * tunisUniformui64NV)(GLint, GLuint64EXT);
    void (KHRONOS_APIENTRY * tunisUniformui64vNV)(GLint, GLsizei, const GLuint64EXT *);
    void (KHRONOS_APIENTRY * tunisUnlockArraysEXT)(void);
    GLboolean(KHRONOS_APIENTRY * tunisUnmapBuffer)(GLenum);
    GLboolean(KHRONOS_APIENTRY * tunisUnmapBufferARB)(GLenum);
    GLboolean(KHRONOS_APIENTRY * tunisUnmapBufferOES)(GLenum);
    GLboolean(KHRONOS_APIENTRY * tunisUnmapNamedBuffer)(GLuint);
    GLboolean(KHRONOS_APIENTRY * tunisUnmapNamedBufferEXT)(GLuint);
    void (KHRONOS_APIENTRY * tunisUnmapObjectBufferATI)(GLuint);
    void (KHRONOS_APIENTRY * tunisUnmapTexture2DINTEL)(GLuint, GLint);
    void (KHRONOS_APIENTRY * tunisUpdateObjectBufferATI)(GLuint, GLuint, GLsizei, const void *, GLenum);
    void (KHRONOS_APIENTRY * tunisUseProgram)(GLuint);
    void (KHRONOS_APIENTRY * tunisUseProgramObjectARB)(GLhandleARB);
    void (KHRONOS_APIENTRY * tunisUseProgramStages)(GLuint, GLbitfield, GLuint);
    void (KHRONOS_APIENTRY * tunisUseProgramStagesEXT)(GLuint, GLbitfield, GLuint);
    void (KHRONOS_APIENTRY * tunisUseShaderProgramEXT)(GLenum, GLuint);
    void (KHRONOS_APIENTRY * tunisVDPAUFiniNV)(void);
    void (KHRONOS_APIENTRY * tunisVDPAUGetSurfaceivNV)(GLvdpauSurfaceNV, GLenum, GLsizei, GLsizei *, GLint *);
    void (KHRONOS_APIENTRY * tunisVDPAUInitNV)(const void *, const void *);
    GLboolean(KHRONOS_APIENTRY * tunisVDPAUIsSurfaceNV)(GLvdpauSurfaceNV);
    void (KHRONOS_APIENTRY * tunisVDPAUMapSurfacesNV)(GLsizei, const GLvdpauSurfaceNV *);
    GLvdpauSurfaceNV(KHRONOS_APIENTRY * tunisVDPAURegisterOutputSurfaceNV)(const void *, GLenum, GLsizei, const GLuint *);
    GLvdpauSurfaceNV(KHRONOS_APIENTRY * tunisVDPAURegisterVideoSurfaceNV)(const void *, GLenum, GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY * tunisVDPAUSurfaceAccessNV)(GLvdpauSurfaceNV, GLenum);
    void (KHRONOS_APIENTRY * tunisVDPAUUnmapSurfacesNV)(GLsizei, const GLvdpauSurfaceNV *);
    void (KHRONOS_APIENTRY * tunisVDPAUUnregisterSurfaceNV)(GLvdpauSurfaceNV);
    void (KHRONOS_APIENTRY * tunisValidateProgram)(GLuint);
    void (KHRONOS_APIENTRY * tunisValidateProgramARB)(GLhandleARB);
    void (KHRONOS_APIENTRY * tunisValidateProgramPipeline)(GLuint);
    void (KHRONOS_APIENTRY * tunisValidateProgramPipelineEXT)(GLuint);
    void (KHRONOS_APIENTRY * tunisVariantArrayObjectATI)(GLuint, GLenum, GLsizei, GLuint, GLuint);
    void (KHRONOS_APIENTRY * tunisVariantPointerEXT)(GLuint, GLenum, GLuint, const void *);
    void (KHRONOS_APIENTRY * tunisVariantbvEXT)(GLuint, const GLbyte *);
    void (KHRONOS_APIENTRY * tunisVariantdvEXT)(GLuint, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisVariantfvEXT)(GLuint, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisVariantivEXT)(GLuint, const GLint *);
    void (KHRONOS_APIENTRY * tunisVariantsvEXT)(GLuint, const GLshort *);
    void (KHRONOS_APIENTRY * tunisVariantubvEXT)(GLuint, const GLubyte *);
    void (KHRONOS_APIENTRY * tunisVariantuivEXT)(GLuint, const GLuint *);
    void (KHRONOS_APIENTRY * tunisVariantusvEXT)(GLuint, const GLushort *);
    void (KHRONOS_APIENTRY * tunisVertex2bOES)(GLbyte, GLbyte);
    void (KHRONOS_APIENTRY * tunisVertex2bvOES)(const GLbyte *);
    void (KHRONOS_APIENTRY * tunisVertex2d)(GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * tunisVertex2dv)(const GLdouble *);
    void (KHRONOS_APIENTRY * tunisVertex2f)(GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisVertex2fv)(const GLfloat *);
    void (KHRONOS_APIENTRY * tunisVertex2hNV)(GLhalfNV, GLhalfNV);
    void (KHRONOS_APIENTRY * tunisVertex2hvNV)(const GLhalfNV *);
    void (KHRONOS_APIENTRY * tunisVertex2i)(GLint, GLint);
    void (KHRONOS_APIENTRY * tunisVertex2iv)(const GLint *);
    void (KHRONOS_APIENTRY * tunisVertex2s)(GLshort, GLshort);
    void (KHRONOS_APIENTRY * tunisVertex2sv)(const GLshort *);
    void (KHRONOS_APIENTRY * tunisVertex2xOES)(GLfixed);
    void (KHRONOS_APIENTRY * tunisVertex2xvOES)(const GLfixed *);
    void (KHRONOS_APIENTRY * tunisVertex3bOES)(GLbyte, GLbyte, GLbyte);
    void (KHRONOS_APIENTRY * tunisVertex3bvOES)(const GLbyte *);
    void (KHRONOS_APIENTRY * tunisVertex3d)(GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * tunisVertex3dv)(const GLdouble *);
    void (KHRONOS_APIENTRY * tunisVertex3f)(GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisVertex3fv)(const GLfloat *);
    void (KHRONOS_APIENTRY * tunisVertex3hNV)(GLhalfNV, GLhalfNV, GLhalfNV);
    void (KHRONOS_APIENTRY * tunisVertex3hvNV)(const GLhalfNV *);
    void (KHRONOS_APIENTRY * tunisVertex3i)(GLint, GLint, GLint);
    void (KHRONOS_APIENTRY * tunisVertex3iv)(const GLint *);
    void (KHRONOS_APIENTRY * tunisVertex3s)(GLshort, GLshort, GLshort);
    void (KHRONOS_APIENTRY * tunisVertex3sv)(const GLshort *);
    void (KHRONOS_APIENTRY * tunisVertex3xOES)(GLfixed, GLfixed);
    void (KHRONOS_APIENTRY * tunisVertex3xvOES)(const GLfixed *);
    void (KHRONOS_APIENTRY * tunisVertex4bOES)(GLbyte, GLbyte, GLbyte, GLbyte);
    void (KHRONOS_APIENTRY * tunisVertex4bvOES)(const GLbyte *);
    void (KHRONOS_APIENTRY * tunisVertex4d)(GLdouble, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * tunisVertex4dv)(const GLdouble *);
    void (KHRONOS_APIENTRY * tunisVertex4f)(GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisVertex4fv)(const GLfloat *);
    void (KHRONOS_APIENTRY * tunisVertex4hNV)(GLhalfNV, GLhalfNV, GLhalfNV, GLhalfNV);
    void (KHRONOS_APIENTRY * tunisVertex4hvNV)(const GLhalfNV *);
    void (KHRONOS_APIENTRY * tunisVertex4i)(GLint, GLint, GLint, GLint);
    void (KHRONOS_APIENTRY * tunisVertex4iv)(const GLint *);
    void (KHRONOS_APIENTRY * tunisVertex4s)(GLshort, GLshort, GLshort, GLshort);
    void (KHRONOS_APIENTRY * tunisVertex4sv)(const GLshort *);
    void (KHRONOS_APIENTRY * tunisVertex4xOES)(GLfixed, GLfixed, GLfixed);
    void (KHRONOS_APIENTRY * tunisVertex4xvOES)(const GLfixed *);
    void (KHRONOS_APIENTRY * tunisVertexArrayAttribBinding)(GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY * tunisVertexArrayAttribFormat)(GLuint, GLuint, GLint, GLenum, GLboolean, GLuint);
    void (KHRONOS_APIENTRY * tunisVertexArrayAttribIFormat)(GLuint, GLuint, GLint, GLenum, GLuint);
    void (KHRONOS_APIENTRY * tunisVertexArrayAttribLFormat)(GLuint, GLuint, GLint, GLenum, GLuint);
    void (KHRONOS_APIENTRY * tunisVertexArrayBindVertexBufferEXT)(GLuint, GLuint, GLuint, GLintptr, GLsizei);
    void (KHRONOS_APIENTRY * tunisVertexArrayBindingDivisor)(GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY * tunisVertexArrayColorOffsetEXT)(GLuint, GLuint, GLint, GLenum, GLsizei, GLintptr);
    void (KHRONOS_APIENTRY * tunisVertexArrayEdgeFlagOffsetEXT)(GLuint, GLuint, GLsizei, GLintptr);
    void (KHRONOS_APIENTRY * tunisVertexArrayElementBuffer)(GLuint, GLuint);
    void (KHRONOS_APIENTRY * tunisVertexArrayFogCoordOffsetEXT)(GLuint, GLuint, GLenum, GLsizei, GLintptr);
    void (KHRONOS_APIENTRY * tunisVertexArrayIndexOffsetEXT)(GLuint, GLuint, GLenum, GLsizei, GLintptr);
    void (KHRONOS_APIENTRY * tunisVertexArrayMultiTexCoordOffsetEXT)(GLuint, GLuint, GLenum, GLint, GLenum, GLsizei, GLintptr);
    void (KHRONOS_APIENTRY * tunisVertexArrayNormalOffsetEXT)(GLuint, GLuint, GLenum, GLsizei, GLintptr);
    void (KHRONOS_APIENTRY * tunisVertexArrayParameteriAPPLE)(GLenum, GLint);
    void (KHRONOS_APIENTRY * tunisVertexArrayRangeAPPLE)(GLsizei, void *);
    void (KHRONOS_APIENTRY * tunisVertexArrayRangeNV)(GLsizei, const void *);
    void (KHRONOS_APIENTRY * tunisVertexArraySecondaryColorOffsetEXT)(GLuint, GLuint, GLint, GLenum, GLsizei, GLintptr);
    void (KHRONOS_APIENTRY * tunisVertexArrayTexCoordOffsetEXT)(GLuint, GLuint, GLint, GLenum, GLsizei, GLintptr);
    void (KHRONOS_APIENTRY * tunisVertexArrayVertexAttribBindingEXT)(GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY * tunisVertexArrayVertexAttribDivisorEXT)(GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY * tunisVertexArrayVertexAttribFormatEXT)(GLuint, GLuint, GLint, GLenum, GLboolean, GLuint);
    void (KHRONOS_APIENTRY * tunisVertexArrayVertexAttribIFormatEXT)(GLuint, GLuint, GLint, GLenum, GLuint);
    void (KHRONOS_APIENTRY * tunisVertexArrayVertexAttribIOffsetEXT)(GLuint, GLuint, GLuint, GLint, GLenum, GLsizei, GLintptr);
    void (KHRONOS_APIENTRY * tunisVertexArrayVertexAttribLFormatEXT)(GLuint, GLuint, GLint, GLenum, GLuint);
    void (KHRONOS_APIENTRY * tunisVertexArrayVertexAttribLOffsetEXT)(GLuint, GLuint, GLuint, GLint, GLenum, GLsizei, GLintptr);
    void (KHRONOS_APIENTRY * tunisVertexArrayVertexAttribOffsetEXT)(GLuint, GLuint, GLuint, GLint, GLenum, GLboolean, GLsizei, GLintptr);
    void (KHRONOS_APIENTRY * tunisVertexArrayVertexBindingDivisorEXT)(GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY * tunisVertexArrayVertexBuffer)(GLuint, GLuint, GLuint, GLintptr, GLsizei);
    void (KHRONOS_APIENTRY * tunisVertexArrayVertexBuffers)(GLuint, GLuint, GLsizei, const GLuint *, const GLintptr *, const GLsizei *);
    void (KHRONOS_APIENTRY * tunisVertexArrayVertexOffsetEXT)(GLuint, GLuint, GLint, GLenum, GLsizei, GLintptr);
    void (KHRONOS_APIENTRY * tunisVertexAttrib1d)(GLuint, GLdouble);
    void (KHRONOS_APIENTRY * tunisVertexAttrib1dARB)(GLuint, GLdouble);
    void (KHRONOS_APIENTRY * tunisVertexAttrib1dNV)(GLuint, GLdouble);
    void (KHRONOS_APIENTRY * tunisVertexAttrib1dv)(GLuint, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisVertexAttrib1dvARB)(GLuint, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisVertexAttrib1dvNV)(GLuint, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisVertexAttrib1f)(GLuint, GLfloat);
    void (KHRONOS_APIENTRY * tunisVertexAttrib1fARB)(GLuint, GLfloat);
    void (KHRONOS_APIENTRY * tunisVertexAttrib1fNV)(GLuint, GLfloat);
    void (KHRONOS_APIENTRY * tunisVertexAttrib1fv)(GLuint, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisVertexAttrib1fvARB)(GLuint, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisVertexAttrib1fvNV)(GLuint, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisVertexAttrib1hNV)(GLuint, GLhalfNV);
    void (KHRONOS_APIENTRY * tunisVertexAttrib1hvNV)(GLuint, const GLhalfNV *);
    void (KHRONOS_APIENTRY * tunisVertexAttrib1s)(GLuint, GLshort);
    void (KHRONOS_APIENTRY * tunisVertexAttrib1sARB)(GLuint, GLshort);
    void (KHRONOS_APIENTRY * tunisVertexAttrib1sNV)(GLuint, GLshort);
    void (KHRONOS_APIENTRY * tunisVertexAttrib1sv)(GLuint, const GLshort *);
    void (KHRONOS_APIENTRY * tunisVertexAttrib1svARB)(GLuint, const GLshort *);
    void (KHRONOS_APIENTRY * tunisVertexAttrib1svNV)(GLuint, const GLshort *);
    void (KHRONOS_APIENTRY * tunisVertexAttrib2d)(GLuint, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * tunisVertexAttrib2dARB)(GLuint, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * tunisVertexAttrib2dNV)(GLuint, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * tunisVertexAttrib2dv)(GLuint, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisVertexAttrib2dvARB)(GLuint, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisVertexAttrib2dvNV)(GLuint, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisVertexAttrib2f)(GLuint, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisVertexAttrib2fARB)(GLuint, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisVertexAttrib2fNV)(GLuint, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisVertexAttrib2fv)(GLuint, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisVertexAttrib2fvARB)(GLuint, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisVertexAttrib2fvNV)(GLuint, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisVertexAttrib2hNV)(GLuint, GLhalfNV, GLhalfNV);
    void (KHRONOS_APIENTRY * tunisVertexAttrib2hvNV)(GLuint, const GLhalfNV *);
    void (KHRONOS_APIENTRY * tunisVertexAttrib2s)(GLuint, GLshort, GLshort);
    void (KHRONOS_APIENTRY * tunisVertexAttrib2sARB)(GLuint, GLshort, GLshort);
    void (KHRONOS_APIENTRY * tunisVertexAttrib2sNV)(GLuint, GLshort, GLshort);
    void (KHRONOS_APIENTRY * tunisVertexAttrib2sv)(GLuint, const GLshort *);
    void (KHRONOS_APIENTRY * tunisVertexAttrib2svARB)(GLuint, const GLshort *);
    void (KHRONOS_APIENTRY * tunisVertexAttrib2svNV)(GLuint, const GLshort *);
    void (KHRONOS_APIENTRY * tunisVertexAttrib3d)(GLuint, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * tunisVertexAttrib3dARB)(GLuint, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * tunisVertexAttrib3dNV)(GLuint, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * tunisVertexAttrib3dv)(GLuint, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisVertexAttrib3dvARB)(GLuint, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisVertexAttrib3dvNV)(GLuint, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisVertexAttrib3f)(GLuint, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisVertexAttrib3fARB)(GLuint, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisVertexAttrib3fNV)(GLuint, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisVertexAttrib3fv)(GLuint, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisVertexAttrib3fvARB)(GLuint, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisVertexAttrib3fvNV)(GLuint, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisVertexAttrib3hNV)(GLuint, GLhalfNV, GLhalfNV, GLhalfNV);
    void (KHRONOS_APIENTRY * tunisVertexAttrib3hvNV)(GLuint, const GLhalfNV *);
    void (KHRONOS_APIENTRY * tunisVertexAttrib3s)(GLuint, GLshort, GLshort, GLshort);
    void (KHRONOS_APIENTRY * tunisVertexAttrib3sARB)(GLuint, GLshort, GLshort, GLshort);
    void (KHRONOS_APIENTRY * tunisVertexAttrib3sNV)(GLuint, GLshort, GLshort, GLshort);
    void (KHRONOS_APIENTRY * tunisVertexAttrib3sv)(GLuint, const GLshort *);
    void (KHRONOS_APIENTRY * tunisVertexAttrib3svARB)(GLuint, const GLshort *);
    void (KHRONOS_APIENTRY * tunisVertexAttrib3svNV)(GLuint, const GLshort *);
    void (KHRONOS_APIENTRY * tunisVertexAttrib4Nbv)(GLuint, const GLbyte *);
    void (KHRONOS_APIENTRY * tunisVertexAttrib4NbvARB)(GLuint, const GLbyte *);
    void (KHRONOS_APIENTRY * tunisVertexAttrib4Niv)(GLuint, const GLint *);
    void (KHRONOS_APIENTRY * tunisVertexAttrib4NivARB)(GLuint, const GLint *);
    void (KHRONOS_APIENTRY * tunisVertexAttrib4Nsv)(GLuint, const GLshort *);
    void (KHRONOS_APIENTRY * tunisVertexAttrib4NsvARB)(GLuint, const GLshort *);
    void (KHRONOS_APIENTRY * tunisVertexAttrib4Nub)(GLuint, GLubyte, GLubyte, GLubyte, GLubyte);
    void (KHRONOS_APIENTRY * tunisVertexAttrib4NubARB)(GLuint, GLubyte, GLubyte, GLubyte, GLubyte);
    void (KHRONOS_APIENTRY * tunisVertexAttrib4Nubv)(GLuint, const GLubyte *);
    void (KHRONOS_APIENTRY * tunisVertexAttrib4NubvARB)(GLuint, const GLubyte *);
    void (KHRONOS_APIENTRY * tunisVertexAttrib4Nuiv)(GLuint, const GLuint *);
    void (KHRONOS_APIENTRY * tunisVertexAttrib4NuivARB)(GLuint, const GLuint *);
    void (KHRONOS_APIENTRY * tunisVertexAttrib4Nusv)(GLuint, const GLushort *);
    void (KHRONOS_APIENTRY * tunisVertexAttrib4NusvARB)(GLuint, const GLushort *);
    void (KHRONOS_APIENTRY * tunisVertexAttrib4bv)(GLuint, const GLbyte *);
    void (KHRONOS_APIENTRY * tunisVertexAttrib4bvARB)(GLuint, const GLbyte *);
    void (KHRONOS_APIENTRY * tunisVertexAttrib4d)(GLuint, GLdouble, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * tunisVertexAttrib4dARB)(GLuint, GLdouble, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * tunisVertexAttrib4dNV)(GLuint, GLdouble, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * tunisVertexAttrib4dv)(GLuint, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisVertexAttrib4dvARB)(GLuint, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisVertexAttrib4dvNV)(GLuint, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisVertexAttrib4f)(GLuint, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisVertexAttrib4fARB)(GLuint, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisVertexAttrib4fNV)(GLuint, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisVertexAttrib4fv)(GLuint, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisVertexAttrib4fvARB)(GLuint, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisVertexAttrib4fvNV)(GLuint, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisVertexAttrib4hNV)(GLuint, GLhalfNV, GLhalfNV, GLhalfNV, GLhalfNV);
    void (KHRONOS_APIENTRY * tunisVertexAttrib4hvNV)(GLuint, const GLhalfNV *);
    void (KHRONOS_APIENTRY * tunisVertexAttrib4iv)(GLuint, const GLint *);
    void (KHRONOS_APIENTRY * tunisVertexAttrib4ivARB)(GLuint, const GLint *);
    void (KHRONOS_APIENTRY * tunisVertexAttrib4s)(GLuint, GLshort, GLshort, GLshort, GLshort);
    void (KHRONOS_APIENTRY * tunisVertexAttrib4sARB)(GLuint, GLshort, GLshort, GLshort, GLshort);
    void (KHRONOS_APIENTRY * tunisVertexAttrib4sNV)(GLuint, GLshort, GLshort, GLshort, GLshort);
    void (KHRONOS_APIENTRY * tunisVertexAttrib4sv)(GLuint, const GLshort *);
    void (KHRONOS_APIENTRY * tunisVertexAttrib4svARB)(GLuint, const GLshort *);
    void (KHRONOS_APIENTRY * tunisVertexAttrib4svNV)(GLuint, const GLshort *);
    void (KHRONOS_APIENTRY * tunisVertexAttrib4ubNV)(GLuint, GLubyte, GLubyte, GLubyte, GLubyte);
    void (KHRONOS_APIENTRY * tunisVertexAttrib4ubv)(GLuint, const GLubyte *);
    void (KHRONOS_APIENTRY * tunisVertexAttrib4ubvARB)(GLuint, const GLubyte *);
    void (KHRONOS_APIENTRY * tunisVertexAttrib4ubvNV)(GLuint, const GLubyte *);
    void (KHRONOS_APIENTRY * tunisVertexAttrib4uiv)(GLuint, const GLuint *);
    void (KHRONOS_APIENTRY * tunisVertexAttrib4uivARB)(GLuint, const GLuint *);
    void (KHRONOS_APIENTRY * tunisVertexAttrib4usv)(GLuint, const GLushort *);
    void (KHRONOS_APIENTRY * tunisVertexAttrib4usvARB)(GLuint, const GLushort *);
    void (KHRONOS_APIENTRY * tunisVertexAttribArrayObjectATI)(GLuint, GLint, GLenum, GLboolean, GLsizei, GLuint, GLuint);
    void (KHRONOS_APIENTRY * tunisVertexAttribBinding)(GLuint, GLuint);
    void (KHRONOS_APIENTRY * tunisVertexAttribDivisor)(GLuint, GLuint);
    void (KHRONOS_APIENTRY * tunisVertexAttribDivisorANGLE)(GLuint, GLuint);
    void (KHRONOS_APIENTRY * tunisVertexAttribDivisorARB)(GLuint, GLuint);
    void (KHRONOS_APIENTRY * tunisVertexAttribDivisorEXT)(GLuint, GLuint);
    void (KHRONOS_APIENTRY * tunisVertexAttribDivisorNV)(GLuint, GLuint);
    void (KHRONOS_APIENTRY * tunisVertexAttribFormat)(GLuint, GLint, GLenum, GLboolean, GLuint);
    void (KHRONOS_APIENTRY * tunisVertexAttribFormatNV)(GLuint, GLint, GLenum, GLboolean, GLsizei);
    void (KHRONOS_APIENTRY * tunisVertexAttribI1i)(GLuint, GLint);
    void (KHRONOS_APIENTRY * tunisVertexAttribI1iEXT)(GLuint, GLint);
    void (KHRONOS_APIENTRY * tunisVertexAttribI1iv)(GLuint, const GLint *);
    void (KHRONOS_APIENTRY * tunisVertexAttribI1ivEXT)(GLuint, const GLint *);
    void (KHRONOS_APIENTRY * tunisVertexAttribI1ui)(GLuint, GLuint);
    void (KHRONOS_APIENTRY * tunisVertexAttribI1uiEXT)(GLuint, GLuint);
    void (KHRONOS_APIENTRY * tunisVertexAttribI1uiv)(GLuint, const GLuint *);
    void (KHRONOS_APIENTRY * tunisVertexAttribI1uivEXT)(GLuint, const GLuint *);
    void (KHRONOS_APIENTRY * tunisVertexAttribI2i)(GLuint, GLint, GLint);
    void (KHRONOS_APIENTRY * tunisVertexAttribI2iEXT)(GLuint, GLint, GLint);
    void (KHRONOS_APIENTRY * tunisVertexAttribI2iv)(GLuint, const GLint *);
    void (KHRONOS_APIENTRY * tunisVertexAttribI2ivEXT)(GLuint, const GLint *);
    void (KHRONOS_APIENTRY * tunisVertexAttribI2ui)(GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY * tunisVertexAttribI2uiEXT)(GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY * tunisVertexAttribI2uiv)(GLuint, const GLuint *);
    void (KHRONOS_APIENTRY * tunisVertexAttribI2uivEXT)(GLuint, const GLuint *);
    void (KHRONOS_APIENTRY * tunisVertexAttribI3i)(GLuint, GLint, GLint, GLint);
    void (KHRONOS_APIENTRY * tunisVertexAttribI3iEXT)(GLuint, GLint, GLint, GLint);
    void (KHRONOS_APIENTRY * tunisVertexAttribI3iv)(GLuint, const GLint *);
    void (KHRONOS_APIENTRY * tunisVertexAttribI3ivEXT)(GLuint, const GLint *);
    void (KHRONOS_APIENTRY * tunisVertexAttribI3ui)(GLuint, GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY * tunisVertexAttribI3uiEXT)(GLuint, GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY * tunisVertexAttribI3uiv)(GLuint, const GLuint *);
    void (KHRONOS_APIENTRY * tunisVertexAttribI3uivEXT)(GLuint, const GLuint *);
    void (KHRONOS_APIENTRY * tunisVertexAttribI4bv)(GLuint, const GLbyte *);
    void (KHRONOS_APIENTRY * tunisVertexAttribI4bvEXT)(GLuint, const GLbyte *);
    void (KHRONOS_APIENTRY * tunisVertexAttribI4i)(GLuint, GLint, GLint, GLint, GLint);
    void (KHRONOS_APIENTRY * tunisVertexAttribI4iEXT)(GLuint, GLint, GLint, GLint, GLint);
    void (KHRONOS_APIENTRY * tunisVertexAttribI4iv)(GLuint, const GLint *);
    void (KHRONOS_APIENTRY * tunisVertexAttribI4ivEXT)(GLuint, const GLint *);
    void (KHRONOS_APIENTRY * tunisVertexAttribI4sv)(GLuint, const GLshort *);
    void (KHRONOS_APIENTRY * tunisVertexAttribI4svEXT)(GLuint, const GLshort *);
    void (KHRONOS_APIENTRY * tunisVertexAttribI4ubv)(GLuint, const GLubyte *);
    void (KHRONOS_APIENTRY * tunisVertexAttribI4ubvEXT)(GLuint, const GLubyte *);
    void (KHRONOS_APIENTRY * tunisVertexAttribI4ui)(GLuint, GLuint, GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY * tunisVertexAttribI4uiEXT)(GLuint, GLuint, GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY * tunisVertexAttribI4uiv)(GLuint, const GLuint *);
    void (KHRONOS_APIENTRY * tunisVertexAttribI4uivEXT)(GLuint, const GLuint *);
    void (KHRONOS_APIENTRY * tunisVertexAttribI4usv)(GLuint, const GLushort *);
    void (KHRONOS_APIENTRY * tunisVertexAttribI4usvEXT)(GLuint, const GLushort *);
    void (KHRONOS_APIENTRY * tunisVertexAttribIFormat)(GLuint, GLint, GLenum, GLuint);
    void (KHRONOS_APIENTRY * tunisVertexAttribIFormatNV)(GLuint, GLint, GLenum, GLsizei);
    void (KHRONOS_APIENTRY * tunisVertexAttribIPointer)(GLuint, GLint, GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY * tunisVertexAttribIPointerEXT)(GLuint, GLint, GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY * tunisVertexAttribL1d)(GLuint, GLdouble);
    void (KHRONOS_APIENTRY * tunisVertexAttribL1dEXT)(GLuint, GLdouble);
    void (KHRONOS_APIENTRY * tunisVertexAttribL1dv)(GLuint, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisVertexAttribL1dvEXT)(GLuint, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisVertexAttribL1i64NV)(GLuint, GLint64EXT);
    void (KHRONOS_APIENTRY * tunisVertexAttribL1i64vNV)(GLuint, const GLint64EXT *);
    void (KHRONOS_APIENTRY * tunisVertexAttribL1ui64ARB)(GLuint, GLuint64EXT);
    void (KHRONOS_APIENTRY * tunisVertexAttribL1ui64NV)(GLuint, GLuint64EXT);
    void (KHRONOS_APIENTRY * tunisVertexAttribL1ui64vARB)(GLuint, const GLuint64EXT *);
    void (KHRONOS_APIENTRY * tunisVertexAttribL1ui64vNV)(GLuint, const GLuint64EXT *);
    void (KHRONOS_APIENTRY * tunisVertexAttribL2d)(GLuint, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * tunisVertexAttribL2dEXT)(GLuint, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * tunisVertexAttribL2dv)(GLuint, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisVertexAttribL2dvEXT)(GLuint, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisVertexAttribL2i64NV)(GLuint, GLint64EXT, GLint64EXT);
    void (KHRONOS_APIENTRY * tunisVertexAttribL2i64vNV)(GLuint, const GLint64EXT *);
    void (KHRONOS_APIENTRY * tunisVertexAttribL2ui64NV)(GLuint, GLuint64EXT, GLuint64EXT);
    void (KHRONOS_APIENTRY * tunisVertexAttribL2ui64vNV)(GLuint, const GLuint64EXT *);
    void (KHRONOS_APIENTRY * tunisVertexAttribL3d)(GLuint, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * tunisVertexAttribL3dEXT)(GLuint, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * tunisVertexAttribL3dv)(GLuint, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisVertexAttribL3dvEXT)(GLuint, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisVertexAttribL3i64NV)(GLuint, GLint64EXT, GLint64EXT, GLint64EXT);
    void (KHRONOS_APIENTRY * tunisVertexAttribL3i64vNV)(GLuint, const GLint64EXT *);
    void (KHRONOS_APIENTRY * tunisVertexAttribL3ui64NV)(GLuint, GLuint64EXT, GLuint64EXT, GLuint64EXT);
    void (KHRONOS_APIENTRY * tunisVertexAttribL3ui64vNV)(GLuint, const GLuint64EXT *);
    void (KHRONOS_APIENTRY * tunisVertexAttribL4d)(GLuint, GLdouble, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * tunisVertexAttribL4dEXT)(GLuint, GLdouble, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * tunisVertexAttribL4dv)(GLuint, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisVertexAttribL4dvEXT)(GLuint, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisVertexAttribL4i64NV)(GLuint, GLint64EXT, GLint64EXT, GLint64EXT, GLint64EXT);
    void (KHRONOS_APIENTRY * tunisVertexAttribL4i64vNV)(GLuint, const GLint64EXT *);
    void (KHRONOS_APIENTRY * tunisVertexAttribL4ui64NV)(GLuint, GLuint64EXT, GLuint64EXT, GLuint64EXT, GLuint64EXT);
    void (KHRONOS_APIENTRY * tunisVertexAttribL4ui64vNV)(GLuint, const GLuint64EXT *);
    void (KHRONOS_APIENTRY * tunisVertexAttribLFormat)(GLuint, GLint, GLenum, GLuint);
    void (KHRONOS_APIENTRY * tunisVertexAttribLFormatNV)(GLuint, GLint, GLenum, GLsizei);
    void (KHRONOS_APIENTRY * tunisVertexAttribLPointer)(GLuint, GLint, GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY * tunisVertexAttribLPointerEXT)(GLuint, GLint, GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY * tunisVertexAttribP1ui)(GLuint, GLenum, GLboolean, GLuint);
    void (KHRONOS_APIENTRY * tunisVertexAttribP1uiv)(GLuint, GLenum, GLboolean, const GLuint *);
    void (KHRONOS_APIENTRY * tunisVertexAttribP2ui)(GLuint, GLenum, GLboolean, GLuint);
    void (KHRONOS_APIENTRY * tunisVertexAttribP2uiv)(GLuint, GLenum, GLboolean, const GLuint *);
    void (KHRONOS_APIENTRY * tunisVertexAttribP3ui)(GLuint, GLenum, GLboolean, GLuint);
    void (KHRONOS_APIENTRY * tunisVertexAttribP3uiv)(GLuint, GLenum, GLboolean, const GLuint *);
    void (KHRONOS_APIENTRY * tunisVertexAttribP4ui)(GLuint, GLenum, GLboolean, GLuint);
    void (KHRONOS_APIENTRY * tunisVertexAttribP4uiv)(GLuint, GLenum, GLboolean, const GLuint *);
    void (KHRONOS_APIENTRY * tunisVertexAttribParameteriAMD)(GLuint, GLenum, GLint);
    void (KHRONOS_APIENTRY * tunisVertexAttribPointer)(GLuint, GLint, GLenum, GLboolean, GLsizei, const void *);
    void (KHRONOS_APIENTRY * tunisVertexAttribPointerARB)(GLuint, GLint, GLenum, GLboolean, GLsizei, const void *);
    void (KHRONOS_APIENTRY * tunisVertexAttribPointerNV)(GLuint, GLint, GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY * tunisVertexAttribs1dvNV)(GLuint, GLsizei, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisVertexAttribs1fvNV)(GLuint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisVertexAttribs1hvNV)(GLuint, GLsizei, const GLhalfNV *);
    void (KHRONOS_APIENTRY * tunisVertexAttribs1svNV)(GLuint, GLsizei, const GLshort *);
    void (KHRONOS_APIENTRY * tunisVertexAttribs2dvNV)(GLuint, GLsizei, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisVertexAttribs2fvNV)(GLuint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisVertexAttribs2hvNV)(GLuint, GLsizei, const GLhalfNV *);
    void (KHRONOS_APIENTRY * tunisVertexAttribs2svNV)(GLuint, GLsizei, const GLshort *);
    void (KHRONOS_APIENTRY * tunisVertexAttribs3dvNV)(GLuint, GLsizei, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisVertexAttribs3fvNV)(GLuint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisVertexAttribs3hvNV)(GLuint, GLsizei, const GLhalfNV *);
    void (KHRONOS_APIENTRY * tunisVertexAttribs3svNV)(GLuint, GLsizei, const GLshort *);
    void (KHRONOS_APIENTRY * tunisVertexAttribs4dvNV)(GLuint, GLsizei, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisVertexAttribs4fvNV)(GLuint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisVertexAttribs4hvNV)(GLuint, GLsizei, const GLhalfNV *);
    void (KHRONOS_APIENTRY * tunisVertexAttribs4svNV)(GLuint, GLsizei, const GLshort *);
    void (KHRONOS_APIENTRY * tunisVertexAttribs4ubvNV)(GLuint, GLsizei, const GLubyte *);
    void (KHRONOS_APIENTRY * tunisVertexBindingDivisor)(GLuint, GLuint);
    void (KHRONOS_APIENTRY * tunisVertexBlendARB)(GLint);
    void (KHRONOS_APIENTRY * tunisVertexBlendEnvfATI)(GLenum, GLfloat);
    void (KHRONOS_APIENTRY * tunisVertexBlendEnviATI)(GLenum, GLint);
    void (KHRONOS_APIENTRY * tunisVertexFormatNV)(GLint, GLenum, GLsizei);
    void (KHRONOS_APIENTRY * tunisVertexP2ui)(GLenum, GLuint);
    void (KHRONOS_APIENTRY * tunisVertexP2uiv)(GLenum, const GLuint *);
    void (KHRONOS_APIENTRY * tunisVertexP3ui)(GLenum, GLuint);
    void (KHRONOS_APIENTRY * tunisVertexP3uiv)(GLenum, const GLuint *);
    void (KHRONOS_APIENTRY * tunisVertexP4ui)(GLenum, GLuint);
    void (KHRONOS_APIENTRY * tunisVertexP4uiv)(GLenum, const GLuint *);
    void (KHRONOS_APIENTRY * tunisVertexPointer)(GLint, GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY * tunisVertexPointerEXT)(GLint, GLenum, GLsizei, GLsizei, const void *);
    void (KHRONOS_APIENTRY * tunisVertexPointerListIBM)(GLint, GLenum, GLint, const void **, GLint);
    void (KHRONOS_APIENTRY * tunisVertexPointervINTEL)(GLint, GLenum, const void **);
    void (KHRONOS_APIENTRY * tunisVertexStream1dATI)(GLenum, GLdouble);
    void (KHRONOS_APIENTRY * tunisVertexStream1dvATI)(GLenum, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisVertexStream1fATI)(GLenum, GLfloat);
    void (KHRONOS_APIENTRY * tunisVertexStream1fvATI)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisVertexStream1iATI)(GLenum, GLint);
    void (KHRONOS_APIENTRY * tunisVertexStream1ivATI)(GLenum, const GLint *);
    void (KHRONOS_APIENTRY * tunisVertexStream1sATI)(GLenum, GLshort);
    void (KHRONOS_APIENTRY * tunisVertexStream1svATI)(GLenum, const GLshort *);
    void (KHRONOS_APIENTRY * tunisVertexStream2dATI)(GLenum, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * tunisVertexStream2dvATI)(GLenum, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisVertexStream2fATI)(GLenum, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisVertexStream2fvATI)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisVertexStream2iATI)(GLenum, GLint, GLint);
    void (KHRONOS_APIENTRY * tunisVertexStream2ivATI)(GLenum, const GLint *);
    void (KHRONOS_APIENTRY * tunisVertexStream2sATI)(GLenum, GLshort, GLshort);
    void (KHRONOS_APIENTRY * tunisVertexStream2svATI)(GLenum, const GLshort *);
    void (KHRONOS_APIENTRY * tunisVertexStream3dATI)(GLenum, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * tunisVertexStream3dvATI)(GLenum, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisVertexStream3fATI)(GLenum, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisVertexStream3fvATI)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisVertexStream3iATI)(GLenum, GLint, GLint, GLint);
    void (KHRONOS_APIENTRY * tunisVertexStream3ivATI)(GLenum, const GLint *);
    void (KHRONOS_APIENTRY * tunisVertexStream3sATI)(GLenum, GLshort, GLshort, GLshort);
    void (KHRONOS_APIENTRY * tunisVertexStream3svATI)(GLenum, const GLshort *);
    void (KHRONOS_APIENTRY * tunisVertexStream4dATI)(GLenum, GLdouble, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * tunisVertexStream4dvATI)(GLenum, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisVertexStream4fATI)(GLenum, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisVertexStream4fvATI)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisVertexStream4iATI)(GLenum, GLint, GLint, GLint, GLint);
    void (KHRONOS_APIENTRY * tunisVertexStream4ivATI)(GLenum, const GLint *);
    void (KHRONOS_APIENTRY * tunisVertexStream4sATI)(GLenum, GLshort, GLshort, GLshort, GLshort);
    void (KHRONOS_APIENTRY * tunisVertexStream4svATI)(GLenum, const GLshort *);
    void (KHRONOS_APIENTRY * tunisVertexWeightPointerEXT)(GLint, GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY * tunisVertexWeightfEXT)(GLfloat);
    void (KHRONOS_APIENTRY * tunisVertexWeightfvEXT)(const GLfloat *);
    void (KHRONOS_APIENTRY * tunisVertexWeighthNV)(GLhalfNV);
    void (KHRONOS_APIENTRY * tunisVertexWeighthvNV)(const GLhalfNV *);
    GLenum(KHRONOS_APIENTRY * tunisVideoCaptureNV)(GLuint, GLuint *, GLuint64EXT *);
    void (KHRONOS_APIENTRY * tunisVideoCaptureStreamParameterdvNV)(GLuint, GLuint, GLenum, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisVideoCaptureStreamParameterfvNV)(GLuint, GLuint, GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisVideoCaptureStreamParameterivNV)(GLuint, GLuint, GLenum, const GLint *);
    void (KHRONOS_APIENTRY * tunisViewport)(GLint, GLint, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * tunisViewportArrayv)(GLuint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisViewportArrayvNV)(GLuint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisViewportArrayvOES)(GLuint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisViewportIndexedf)(GLuint, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisViewportIndexedfNV)(GLuint, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisViewportIndexedfOES)(GLuint, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisViewportIndexedfv)(GLuint, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisViewportIndexedfvNV)(GLuint, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisViewportIndexedfvOES)(GLuint, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisViewportPositionWScaleNV)(GLuint, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisViewportSwizzleNV)(GLuint, GLenum, GLenum, GLenum, GLenum);
    void (KHRONOS_APIENTRY * tunisWaitSemaphoreEXT)(GLuint, GLuint, const GLuint *, GLuint, const GLuint *, const GLenum *);
    void (KHRONOS_APIENTRY * tunisWaitSync)(GLsync, GLbitfield, GLuint64);
    void (KHRONOS_APIENTRY * tunisWaitSyncAPPLE)(GLsync, GLbitfield, GLuint64);
    void (KHRONOS_APIENTRY * tunisWaitVkSemaphoreNV)(GLuint64);
    void (KHRONOS_APIENTRY * tunisWeightPathsNV)(GLuint, GLsizei, const GLuint *, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisWeightPointerARB)(GLint, GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY * tunisWeightPointerOES)(GLint, GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY * tunisWeightbvARB)(GLint, const GLbyte *);
    void (KHRONOS_APIENTRY * tunisWeightdvARB)(GLint, const GLdouble *);
    void (KHRONOS_APIENTRY * tunisWeightfvARB)(GLint, const GLfloat *);
    void (KHRONOS_APIENTRY * tunisWeightivARB)(GLint, const GLint *);
    void (KHRONOS_APIENTRY * tunisWeightsvARB)(GLint, const GLshort *);
    void (KHRONOS_APIENTRY * tunisWeightubvARB)(GLint, const GLubyte *);
    void (KHRONOS_APIENTRY * tunisWeightuivARB)(GLint, const GLuint *);
    void (KHRONOS_APIENTRY * tunisWeightusvARB)(GLint, const GLushort *);
    void (KHRONOS_APIENTRY * tunisWindowPos2d)(GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * tunisWindowPos2dARB)(GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * tunisWindowPos2dMESA)(GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * tunisWindowPos2dv)(const GLdouble *);
    void (KHRONOS_APIENTRY * tunisWindowPos2dvARB)(const GLdouble *);
    void (KHRONOS_APIENTRY * tunisWindowPos2dvMESA)(const GLdouble *);
    void (KHRONOS_APIENTRY * tunisWindowPos2f)(GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisWindowPos2fARB)(GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisWindowPos2fMESA)(GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisWindowPos2fv)(const GLfloat *);
    void (KHRONOS_APIENTRY * tunisWindowPos2fvARB)(const GLfloat *);
    void (KHRONOS_APIENTRY * tunisWindowPos2fvMESA)(const GLfloat *);
    void (KHRONOS_APIENTRY * tunisWindowPos2i)(GLint, GLint);
    void (KHRONOS_APIENTRY * tunisWindowPos2iARB)(GLint, GLint);
    void (KHRONOS_APIENTRY * tunisWindowPos2iMESA)(GLint, GLint);
    void (KHRONOS_APIENTRY * tunisWindowPos2iv)(const GLint *);
    void (KHRONOS_APIENTRY * tunisWindowPos2ivARB)(const GLint *);
    void (KHRONOS_APIENTRY * tunisWindowPos2ivMESA)(const GLint *);
    void (KHRONOS_APIENTRY * tunisWindowPos2s)(GLshort, GLshort);
    void (KHRONOS_APIENTRY * tunisWindowPos2sARB)(GLshort, GLshort);
    void (KHRONOS_APIENTRY * tunisWindowPos2sMESA)(GLshort, GLshort);
    void (KHRONOS_APIENTRY * tunisWindowPos2sv)(const GLshort *);
    void (KHRONOS_APIENTRY * tunisWindowPos2svARB)(const GLshort *);
    void (KHRONOS_APIENTRY * tunisWindowPos2svMESA)(const GLshort *);
    void (KHRONOS_APIENTRY * tunisWindowPos3d)(GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * tunisWindowPos3dARB)(GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * tunisWindowPos3dMESA)(GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * tunisWindowPos3dv)(const GLdouble *);
    void (KHRONOS_APIENTRY * tunisWindowPos3dvARB)(const GLdouble *);
    void (KHRONOS_APIENTRY * tunisWindowPos3dvMESA)(const GLdouble *);
    void (KHRONOS_APIENTRY * tunisWindowPos3f)(GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisWindowPos3fARB)(GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisWindowPos3fMESA)(GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisWindowPos3fv)(const GLfloat *);
    void (KHRONOS_APIENTRY * tunisWindowPos3fvARB)(const GLfloat *);
    void (KHRONOS_APIENTRY * tunisWindowPos3fvMESA)(const GLfloat *);
    void (KHRONOS_APIENTRY * tunisWindowPos3i)(GLint, GLint, GLint);
    void (KHRONOS_APIENTRY * tunisWindowPos3iARB)(GLint, GLint, GLint);
    void (KHRONOS_APIENTRY * tunisWindowPos3iMESA)(GLint, GLint, GLint);
    void (KHRONOS_APIENTRY * tunisWindowPos3iv)(const GLint *);
    void (KHRONOS_APIENTRY * tunisWindowPos3ivARB)(const GLint *);
    void (KHRONOS_APIENTRY * tunisWindowPos3ivMESA)(const GLint *);
    void (KHRONOS_APIENTRY * tunisWindowPos3s)(GLshort, GLshort, GLshort);
    void (KHRONOS_APIENTRY * tunisWindowPos3sARB)(GLshort, GLshort, GLshort);
    void (KHRONOS_APIENTRY * tunisWindowPos3sMESA)(GLshort, GLshort, GLshort);
    void (KHRONOS_APIENTRY * tunisWindowPos3sv)(const GLshort *);
    void (KHRONOS_APIENTRY * tunisWindowPos3svARB)(const GLshort *);
    void (KHRONOS_APIENTRY * tunisWindowPos3svMESA)(const GLshort *);
    void (KHRONOS_APIENTRY * tunisWindowPos4dMESA)(GLdouble, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * tunisWindowPos4dvMESA)(const GLdouble *);
    void (KHRONOS_APIENTRY * tunisWindowPos4fMESA)(GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * tunisWindowPos4fvMESA)(const GLfloat *);
    void (KHRONOS_APIENTRY * tunisWindowPos4iMESA)(GLint, GLint, GLint, GLint);
    void (KHRONOS_APIENTRY * tunisWindowPos4ivMESA)(const GLint *);
    void (KHRONOS_APIENTRY * tunisWindowPos4sMESA)(GLshort, GLshort, GLshort, GLshort);
    void (KHRONOS_APIENTRY * tunisWindowPos4svMESA)(const GLshort *);
    void (KHRONOS_APIENTRY * tunisWindowRectanglesEXT)(GLenum, GLsizei, const GLint *);
    void (KHRONOS_APIENTRY * tunisWriteMaskEXT)(GLuint, GLuint, GLenum, GLenum, GLenum, GLenum);

} TunisGLConfig;

extern TunisGLConfig tunisGL; /* global instance. */

TUNIS_FORCE_INLINE khronos_int8_t tunisGLSupport(khronos_usize_t id) {
    return tunisGL.support[id];
}

TUNIS_FORCE_INLINE void  tunisAccum(GLenum op, GLfloat value) { tunisGL.tunisAccum(op, value); }
#define glAccum tunisAccum
TUNIS_FORCE_INLINE void  tunisAccumxOES(GLenum op, GLfixed value) { tunisGL.tunisAccumxOES(op, value); }
#define glAccumxOES tunisAccumxOES
TUNIS_FORCE_INLINE GLboolean tunisAcquireKeyedMutexWin32EXT(GLuint memory, GLuint64 key, GLuint timeout) { return tunisGL.tunisAcquireKeyedMutexWin32EXT(memory, key, timeout); }
#define glAcquireKeyedMutexWin32EXT tunisAcquireKeyedMutexWin32EXT
TUNIS_FORCE_INLINE void  tunisActiveProgramEXT(GLuint program) { tunisGL.tunisActiveProgramEXT(program); }
#define glActiveProgramEXT tunisActiveProgramEXT
TUNIS_FORCE_INLINE void  tunisActiveShaderProgram(GLuint pipeline, GLuint program) { tunisGL.tunisActiveShaderProgram(pipeline, program); }
#define glActiveShaderProgram tunisActiveShaderProgram
TUNIS_FORCE_INLINE void  tunisActiveShaderProgramEXT(GLuint pipeline, GLuint program) { tunisGL.tunisActiveShaderProgramEXT(pipeline, program); }
#define glActiveShaderProgramEXT tunisActiveShaderProgramEXT
TUNIS_FORCE_INLINE void  tunisActiveStencilFaceEXT(GLenum face) { tunisGL.tunisActiveStencilFaceEXT(face); }
#define glActiveStencilFaceEXT tunisActiveStencilFaceEXT
TUNIS_FORCE_INLINE void  tunisActiveTexture(GLenum texture) { tunisGL.tunisActiveTexture(texture); }
#define glActiveTexture tunisActiveTexture
TUNIS_FORCE_INLINE void  tunisActiveTextureARB(GLenum texture) { tunisGL.tunisActiveTextureARB(texture); }
#define glActiveTextureARB tunisActiveTextureARB
TUNIS_FORCE_INLINE void  tunisActiveVaryingNV(GLuint program, const GLchar * name) { tunisGL.tunisActiveVaryingNV(program, name); }
#define glActiveVaryingNV tunisActiveVaryingNV
TUNIS_FORCE_INLINE void  tunisAlphaFragmentOp1ATI(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod) { tunisGL.tunisAlphaFragmentOp1ATI(op, dst, dstMod, arg1, arg1Rep, arg1Mod); }
#define glAlphaFragmentOp1ATI tunisAlphaFragmentOp1ATI
TUNIS_FORCE_INLINE void  tunisAlphaFragmentOp2ATI(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod) { tunisGL.tunisAlphaFragmentOp2ATI(op, dst, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod); }
#define glAlphaFragmentOp2ATI tunisAlphaFragmentOp2ATI
TUNIS_FORCE_INLINE void  tunisAlphaFragmentOp3ATI(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod) { tunisGL.tunisAlphaFragmentOp3ATI(op, dst, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod, arg3, arg3Rep, arg3Mod); }
#define glAlphaFragmentOp3ATI tunisAlphaFragmentOp3ATI
TUNIS_FORCE_INLINE void  tunisAlphaFunc(GLenum func, GLfloat ref) { tunisGL.tunisAlphaFunc(func, ref); }
#define glAlphaFunc tunisAlphaFunc
TUNIS_FORCE_INLINE void  tunisAlphaFuncQCOM(GLenum func, GLclampf ref) { tunisGL.tunisAlphaFuncQCOM(func, ref); }
#define glAlphaFuncQCOM tunisAlphaFuncQCOM
TUNIS_FORCE_INLINE void  tunisAlphaFuncx(GLenum func, GLfixed ref) { tunisGL.tunisAlphaFuncx(func, ref); }
#define glAlphaFuncx tunisAlphaFuncx
TUNIS_FORCE_INLINE void  tunisAlphaFuncxOES(GLenum func, GLfixed ref) { tunisGL.tunisAlphaFuncxOES(func, ref); }
#define glAlphaFuncxOES tunisAlphaFuncxOES
TUNIS_FORCE_INLINE void  tunisAlphaToCoverageDitherControlNV(GLenum mode) { tunisGL.tunisAlphaToCoverageDitherControlNV(mode); }
#define glAlphaToCoverageDitherControlNV tunisAlphaToCoverageDitherControlNV
TUNIS_FORCE_INLINE void  tunisApplyFramebufferAttachmentCMAAINTEL(void) { tunisGL.tunisApplyFramebufferAttachmentCMAAINTEL(); }
#define glApplyFramebufferAttachmentCMAAINTEL tunisApplyFramebufferAttachmentCMAAINTEL
TUNIS_FORCE_INLINE void  tunisApplyTextureEXT(GLenum mode) { tunisGL.tunisApplyTextureEXT(mode); }
#define glApplyTextureEXT tunisApplyTextureEXT
TUNIS_FORCE_INLINE GLboolean tunisAreProgramsResidentNV(GLsizei n, const GLuint * programs, GLboolean * residences) { return tunisGL.tunisAreProgramsResidentNV(n, programs, residences); }
#define glAreProgramsResidentNV tunisAreProgramsResidentNV
TUNIS_FORCE_INLINE GLboolean tunisAreTexturesResident(GLsizei n, const GLuint * textures, GLboolean * residences) { return tunisGL.tunisAreTexturesResident(n, textures, residences); }
#define glAreTexturesResident tunisAreTexturesResident
TUNIS_FORCE_INLINE GLboolean tunisAreTexturesResidentEXT(GLsizei n, const GLuint * textures, GLboolean * residences) { return tunisGL.tunisAreTexturesResidentEXT(n, textures, residences); }
#define glAreTexturesResidentEXT tunisAreTexturesResidentEXT
TUNIS_FORCE_INLINE void  tunisArrayElement(GLint i) { tunisGL.tunisArrayElement(i); }
#define glArrayElement tunisArrayElement
TUNIS_FORCE_INLINE void  tunisArrayElementEXT(GLint i) { tunisGL.tunisArrayElementEXT(i); }
#define glArrayElementEXT tunisArrayElementEXT
TUNIS_FORCE_INLINE void  tunisArrayObjectATI(GLenum array, GLint size, GLenum type, GLsizei stride, GLuint buffer, GLuint offset) { tunisGL.tunisArrayObjectATI(array, size, type, stride, buffer, offset); }
#define glArrayObjectATI tunisArrayObjectATI
TUNIS_FORCE_INLINE void  tunisAsyncMarkerSGIX(GLuint marker) { tunisGL.tunisAsyncMarkerSGIX(marker); }
#define glAsyncMarkerSGIX tunisAsyncMarkerSGIX
TUNIS_FORCE_INLINE void  tunisAttachObjectARB(GLhandleARB containerObj, GLhandleARB obj) { tunisGL.tunisAttachObjectARB(containerObj, obj); }
#define glAttachObjectARB tunisAttachObjectARB
TUNIS_FORCE_INLINE void  tunisAttachShader(GLuint program, GLuint shader) { tunisGL.tunisAttachShader(program, shader); }
#define glAttachShader tunisAttachShader
TUNIS_FORCE_INLINE void  tunisBegin(GLenum mode) { tunisGL.tunisBegin(mode); }
#define glBegin tunisBegin
TUNIS_FORCE_INLINE void  tunisBeginConditionalRender(GLuint id, GLenum mode) { tunisGL.tunisBeginConditionalRender(id, mode); }
#define glBeginConditionalRender tunisBeginConditionalRender
TUNIS_FORCE_INLINE void  tunisBeginConditionalRenderNV(GLuint id, GLenum mode) { tunisGL.tunisBeginConditionalRenderNV(id, mode); }
#define glBeginConditionalRenderNV tunisBeginConditionalRenderNV
TUNIS_FORCE_INLINE void  tunisBeginConditionalRenderNVX(GLuint id) { tunisGL.tunisBeginConditionalRenderNVX(id); }
#define glBeginConditionalRenderNVX tunisBeginConditionalRenderNVX
TUNIS_FORCE_INLINE void  tunisBeginFragmentShaderATI(void) { tunisGL.tunisBeginFragmentShaderATI(); }
#define glBeginFragmentShaderATI tunisBeginFragmentShaderATI
TUNIS_FORCE_INLINE void  tunisBeginOcclusionQueryNV(GLuint id) { tunisGL.tunisBeginOcclusionQueryNV(id); }
#define glBeginOcclusionQueryNV tunisBeginOcclusionQueryNV
TUNIS_FORCE_INLINE void  tunisBeginPerfMonitorAMD(GLuint monitor) { tunisGL.tunisBeginPerfMonitorAMD(monitor); }
#define glBeginPerfMonitorAMD tunisBeginPerfMonitorAMD
TUNIS_FORCE_INLINE void  tunisBeginPerfQueryINTEL(GLuint queryHandle) { tunisGL.tunisBeginPerfQueryINTEL(queryHandle); }
#define glBeginPerfQueryINTEL tunisBeginPerfQueryINTEL
TUNIS_FORCE_INLINE void  tunisBeginQuery(GLenum target, GLuint id) { tunisGL.tunisBeginQuery(target, id); }
#define glBeginQuery tunisBeginQuery
TUNIS_FORCE_INLINE void  tunisBeginQueryARB(GLenum target, GLuint id) { tunisGL.tunisBeginQueryARB(target, id); }
#define glBeginQueryARB tunisBeginQueryARB
TUNIS_FORCE_INLINE void  tunisBeginQueryEXT(GLenum target, GLuint id) { tunisGL.tunisBeginQueryEXT(target, id); }
#define glBeginQueryEXT tunisBeginQueryEXT
TUNIS_FORCE_INLINE void  tunisBeginQueryIndexed(GLenum target, GLuint index, GLuint id) { tunisGL.tunisBeginQueryIndexed(target, index, id); }
#define glBeginQueryIndexed tunisBeginQueryIndexed
TUNIS_FORCE_INLINE void  tunisBeginTransformFeedback(GLenum primitiveMode) { tunisGL.tunisBeginTransformFeedback(primitiveMode); }
#define glBeginTransformFeedback tunisBeginTransformFeedback
TUNIS_FORCE_INLINE void  tunisBeginTransformFeedbackEXT(GLenum primitiveMode) { tunisGL.tunisBeginTransformFeedbackEXT(primitiveMode); }
#define glBeginTransformFeedbackEXT tunisBeginTransformFeedbackEXT
TUNIS_FORCE_INLINE void  tunisBeginTransformFeedbackNV(GLenum primitiveMode) { tunisGL.tunisBeginTransformFeedbackNV(primitiveMode); }
#define glBeginTransformFeedbackNV tunisBeginTransformFeedbackNV
TUNIS_FORCE_INLINE void  tunisBeginVertexShaderEXT(void) { tunisGL.tunisBeginVertexShaderEXT(); }
#define glBeginVertexShaderEXT tunisBeginVertexShaderEXT
TUNIS_FORCE_INLINE void  tunisBeginVideoCaptureNV(GLuint video_capture_slot) { tunisGL.tunisBeginVideoCaptureNV(video_capture_slot); }
#define glBeginVideoCaptureNV tunisBeginVideoCaptureNV
TUNIS_FORCE_INLINE void  tunisBindAttribLocation(GLuint program, GLuint index, const GLchar * name) { tunisGL.tunisBindAttribLocation(program, index, name); }
#define glBindAttribLocation tunisBindAttribLocation
TUNIS_FORCE_INLINE void  tunisBindAttribLocationARB(GLhandleARB programObj, GLuint index, const GLcharARB * name) { tunisGL.tunisBindAttribLocationARB(programObj, index, name); }
#define glBindAttribLocationARB tunisBindAttribLocationARB
TUNIS_FORCE_INLINE void  tunisBindBuffer(GLenum target, GLuint buffer) { tunisGL.tunisBindBuffer(target, buffer); }
#define glBindBuffer tunisBindBuffer
TUNIS_FORCE_INLINE void  tunisBindBufferARB(GLenum target, GLuint buffer) { tunisGL.tunisBindBufferARB(target, buffer); }
#define glBindBufferARB tunisBindBufferARB
TUNIS_FORCE_INLINE void  tunisBindBufferBase(GLenum target, GLuint index, GLuint buffer) { tunisGL.tunisBindBufferBase(target, index, buffer); }
#define glBindBufferBase tunisBindBufferBase
TUNIS_FORCE_INLINE void  tunisBindBufferBaseEXT(GLenum target, GLuint index, GLuint buffer) { tunisGL.tunisBindBufferBaseEXT(target, index, buffer); }
#define glBindBufferBaseEXT tunisBindBufferBaseEXT
TUNIS_FORCE_INLINE void  tunisBindBufferBaseNV(GLenum target, GLuint index, GLuint buffer) { tunisGL.tunisBindBufferBaseNV(target, index, buffer); }
#define glBindBufferBaseNV tunisBindBufferBaseNV
TUNIS_FORCE_INLINE void  tunisBindBufferOffsetEXT(GLenum target, GLuint index, GLuint buffer, GLintptr offset) { tunisGL.tunisBindBufferOffsetEXT(target, index, buffer, offset); }
#define glBindBufferOffsetEXT tunisBindBufferOffsetEXT
TUNIS_FORCE_INLINE void  tunisBindBufferOffsetNV(GLenum target, GLuint index, GLuint buffer, GLintptr offset) { tunisGL.tunisBindBufferOffsetNV(target, index, buffer, offset); }
#define glBindBufferOffsetNV tunisBindBufferOffsetNV
TUNIS_FORCE_INLINE void  tunisBindBufferRange(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size) { tunisGL.tunisBindBufferRange(target, index, buffer, offset, size); }
#define glBindBufferRange tunisBindBufferRange
TUNIS_FORCE_INLINE void  tunisBindBufferRangeEXT(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size) { tunisGL.tunisBindBufferRangeEXT(target, index, buffer, offset, size); }
#define glBindBufferRangeEXT tunisBindBufferRangeEXT
TUNIS_FORCE_INLINE void  tunisBindBufferRangeNV(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size) { tunisGL.tunisBindBufferRangeNV(target, index, buffer, offset, size); }
#define glBindBufferRangeNV tunisBindBufferRangeNV
TUNIS_FORCE_INLINE void  tunisBindBuffersBase(GLenum target, GLuint first, GLsizei count, const GLuint * buffers) { tunisGL.tunisBindBuffersBase(target, first, count, buffers); }
#define glBindBuffersBase tunisBindBuffersBase
TUNIS_FORCE_INLINE void  tunisBindBuffersRange(GLenum target, GLuint first, GLsizei count, const GLuint * buffers, const GLintptr * offsets, const GLsizeiptr * sizes) { tunisGL.tunisBindBuffersRange(target, first, count, buffers, offsets, sizes); }
#define glBindBuffersRange tunisBindBuffersRange
TUNIS_FORCE_INLINE void  tunisBindFragDataLocation(GLuint program, GLuint color, const GLchar * name) { tunisGL.tunisBindFragDataLocation(program, color, name); }
#define glBindFragDataLocation tunisBindFragDataLocation
TUNIS_FORCE_INLINE void  tunisBindFragDataLocationEXT(GLuint program, GLuint color, const GLchar * name) { tunisGL.tunisBindFragDataLocationEXT(program, color, name); }
#define glBindFragDataLocationEXT tunisBindFragDataLocationEXT
TUNIS_FORCE_INLINE void  tunisBindFragDataLocationIndexed(GLuint program, GLuint colorNumber, GLuint index, const GLchar * name) { tunisGL.tunisBindFragDataLocationIndexed(program, colorNumber, index, name); }
#define glBindFragDataLocationIndexed tunisBindFragDataLocationIndexed
TUNIS_FORCE_INLINE void  tunisBindFragDataLocationIndexedEXT(GLuint program, GLuint colorNumber, GLuint index, const GLchar * name) { tunisGL.tunisBindFragDataLocationIndexedEXT(program, colorNumber, index, name); }
#define glBindFragDataLocationIndexedEXT tunisBindFragDataLocationIndexedEXT
TUNIS_FORCE_INLINE void  tunisBindFragmentShaderATI(GLuint id) { tunisGL.tunisBindFragmentShaderATI(id); }
#define glBindFragmentShaderATI tunisBindFragmentShaderATI
TUNIS_FORCE_INLINE void  tunisBindFramebuffer(GLenum target, GLuint framebuffer) { tunisGL.tunisBindFramebuffer(target, framebuffer); }
#define glBindFramebuffer tunisBindFramebuffer
TUNIS_FORCE_INLINE void  tunisBindFramebufferEXT(GLenum target, GLuint framebuffer) { tunisGL.tunisBindFramebufferEXT(target, framebuffer); }
#define glBindFramebufferEXT tunisBindFramebufferEXT
TUNIS_FORCE_INLINE void  tunisBindFramebufferOES(GLenum target, GLuint framebuffer) { tunisGL.tunisBindFramebufferOES(target, framebuffer); }
#define glBindFramebufferOES tunisBindFramebufferOES
TUNIS_FORCE_INLINE void  tunisBindImageTexture(GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format) { tunisGL.tunisBindImageTexture(unit, texture, level, layered, layer, access, format); }
#define glBindImageTexture tunisBindImageTexture
TUNIS_FORCE_INLINE void  tunisBindImageTextureEXT(GLuint index, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLint format) { tunisGL.tunisBindImageTextureEXT(index, texture, level, layered, layer, access, format); }
#define glBindImageTextureEXT tunisBindImageTextureEXT
TUNIS_FORCE_INLINE void  tunisBindImageTextures(GLuint first, GLsizei count, const GLuint * textures) { tunisGL.tunisBindImageTextures(first, count, textures); }
#define glBindImageTextures tunisBindImageTextures
TUNIS_FORCE_INLINE GLuint tunisBindLightParameterEXT(GLenum light, GLenum value) { return tunisGL.tunisBindLightParameterEXT(light, value); }
#define glBindLightParameterEXT tunisBindLightParameterEXT
TUNIS_FORCE_INLINE GLuint tunisBindMaterialParameterEXT(GLenum face, GLenum value) { return tunisGL.tunisBindMaterialParameterEXT(face, value); }
#define glBindMaterialParameterEXT tunisBindMaterialParameterEXT
TUNIS_FORCE_INLINE void  tunisBindMultiTextureEXT(GLenum texunit, GLenum target, GLuint texture) { tunisGL.tunisBindMultiTextureEXT(texunit, target, texture); }
#define glBindMultiTextureEXT tunisBindMultiTextureEXT
TUNIS_FORCE_INLINE GLuint tunisBindParameterEXT(GLenum value) { return tunisGL.tunisBindParameterEXT(value); }
#define glBindParameterEXT tunisBindParameterEXT
TUNIS_FORCE_INLINE void  tunisBindProgramARB(GLenum target, GLuint program) { tunisGL.tunisBindProgramARB(target, program); }
#define glBindProgramARB tunisBindProgramARB
TUNIS_FORCE_INLINE void  tunisBindProgramNV(GLenum target, GLuint id) { tunisGL.tunisBindProgramNV(target, id); }
#define glBindProgramNV tunisBindProgramNV
TUNIS_FORCE_INLINE void  tunisBindProgramPipeline(GLuint pipeline) { tunisGL.tunisBindProgramPipeline(pipeline); }
#define glBindProgramPipeline tunisBindProgramPipeline
TUNIS_FORCE_INLINE void  tunisBindProgramPipelineEXT(GLuint pipeline) { tunisGL.tunisBindProgramPipelineEXT(pipeline); }
#define glBindProgramPipelineEXT tunisBindProgramPipelineEXT
TUNIS_FORCE_INLINE void  tunisBindRenderbuffer(GLenum target, GLuint renderbuffer) { tunisGL.tunisBindRenderbuffer(target, renderbuffer); }
#define glBindRenderbuffer tunisBindRenderbuffer
TUNIS_FORCE_INLINE void  tunisBindRenderbufferEXT(GLenum target, GLuint renderbuffer) { tunisGL.tunisBindRenderbufferEXT(target, renderbuffer); }
#define glBindRenderbufferEXT tunisBindRenderbufferEXT
TUNIS_FORCE_INLINE void  tunisBindRenderbufferOES(GLenum target, GLuint renderbuffer) { tunisGL.tunisBindRenderbufferOES(target, renderbuffer); }
#define glBindRenderbufferOES tunisBindRenderbufferOES
TUNIS_FORCE_INLINE void  tunisBindSampler(GLuint unit, GLuint sampler) { tunisGL.tunisBindSampler(unit, sampler); }
#define glBindSampler tunisBindSampler
TUNIS_FORCE_INLINE void  tunisBindSamplers(GLuint first, GLsizei count, const GLuint * samplers) { tunisGL.tunisBindSamplers(first, count, samplers); }
#define glBindSamplers tunisBindSamplers
TUNIS_FORCE_INLINE void  tunisBindShadingRateImageNV(GLuint texture) { tunisGL.tunisBindShadingRateImageNV(texture); }
#define glBindShadingRateImageNV tunisBindShadingRateImageNV
TUNIS_FORCE_INLINE GLuint tunisBindTexGenParameterEXT(GLenum unit, GLenum coord, GLenum value) { return tunisGL.tunisBindTexGenParameterEXT(unit, coord, value); }
#define glBindTexGenParameterEXT tunisBindTexGenParameterEXT
TUNIS_FORCE_INLINE void  tunisBindTexture(GLenum target, GLuint texture) { tunisGL.tunisBindTexture(target, texture); }
#define glBindTexture tunisBindTexture
TUNIS_FORCE_INLINE void  tunisBindTextureEXT(GLenum target, GLuint texture) { tunisGL.tunisBindTextureEXT(target, texture); }
#define glBindTextureEXT tunisBindTextureEXT
TUNIS_FORCE_INLINE void  tunisBindTextureUnit(GLuint unit, GLuint texture) { tunisGL.tunisBindTextureUnit(unit, texture); }
#define glBindTextureUnit tunisBindTextureUnit
TUNIS_FORCE_INLINE GLuint tunisBindTextureUnitParameterEXT(GLenum unit, GLenum value) { return tunisGL.tunisBindTextureUnitParameterEXT(unit, value); }
#define glBindTextureUnitParameterEXT tunisBindTextureUnitParameterEXT
TUNIS_FORCE_INLINE void  tunisBindTextures(GLuint first, GLsizei count, const GLuint * textures) { tunisGL.tunisBindTextures(first, count, textures); }
#define glBindTextures tunisBindTextures
TUNIS_FORCE_INLINE void  tunisBindTransformFeedback(GLenum target, GLuint id) { tunisGL.tunisBindTransformFeedback(target, id); }
#define glBindTransformFeedback tunisBindTransformFeedback
TUNIS_FORCE_INLINE void  tunisBindTransformFeedbackNV(GLenum target, GLuint id) { tunisGL.tunisBindTransformFeedbackNV(target, id); }
#define glBindTransformFeedbackNV tunisBindTransformFeedbackNV
TUNIS_FORCE_INLINE void  tunisBindVertexArray(GLuint array) { tunisGL.tunisBindVertexArray(array); }
#define glBindVertexArray tunisBindVertexArray
TUNIS_FORCE_INLINE void  tunisBindVertexArrayAPPLE(GLuint array) { tunisGL.tunisBindVertexArrayAPPLE(array); }
#define glBindVertexArrayAPPLE tunisBindVertexArrayAPPLE
TUNIS_FORCE_INLINE void  tunisBindVertexArrayOES(GLuint array) { tunisGL.tunisBindVertexArrayOES(array); }
#define glBindVertexArrayOES tunisBindVertexArrayOES
TUNIS_FORCE_INLINE void  tunisBindVertexBuffer(GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride) { tunisGL.tunisBindVertexBuffer(bindingindex, buffer, offset, stride); }
#define glBindVertexBuffer tunisBindVertexBuffer
TUNIS_FORCE_INLINE void  tunisBindVertexBuffers(GLuint first, GLsizei count, const GLuint * buffers, const GLintptr * offsets, const GLsizei * strides) { tunisGL.tunisBindVertexBuffers(first, count, buffers, offsets, strides); }
#define glBindVertexBuffers tunisBindVertexBuffers
TUNIS_FORCE_INLINE void  tunisBindVertexShaderEXT(GLuint id) { tunisGL.tunisBindVertexShaderEXT(id); }
#define glBindVertexShaderEXT tunisBindVertexShaderEXT
TUNIS_FORCE_INLINE void  tunisBindVideoCaptureStreamBufferNV(GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLintptrARB offset) { tunisGL.tunisBindVideoCaptureStreamBufferNV(video_capture_slot, stream, frame_region, offset); }
#define glBindVideoCaptureStreamBufferNV tunisBindVideoCaptureStreamBufferNV
TUNIS_FORCE_INLINE void  tunisBindVideoCaptureStreamTextureNV(GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLenum target, GLuint texture) { tunisGL.tunisBindVideoCaptureStreamTextureNV(video_capture_slot, stream, frame_region, target, texture); }
#define glBindVideoCaptureStreamTextureNV tunisBindVideoCaptureStreamTextureNV
TUNIS_FORCE_INLINE void  tunisBinormal3bEXT(GLbyte bx, GLbyte by, GLbyte bz) { tunisGL.tunisBinormal3bEXT(bx, by, bz); }
#define glBinormal3bEXT tunisBinormal3bEXT
TUNIS_FORCE_INLINE void  tunisBinormal3bvEXT(const GLbyte * v) { tunisGL.tunisBinormal3bvEXT(v); }
#define glBinormal3bvEXT tunisBinormal3bvEXT
TUNIS_FORCE_INLINE void  tunisBinormal3dEXT(GLdouble bx, GLdouble by, GLdouble bz) { tunisGL.tunisBinormal3dEXT(bx, by, bz); }
#define glBinormal3dEXT tunisBinormal3dEXT
TUNIS_FORCE_INLINE void  tunisBinormal3dvEXT(const GLdouble * v) { tunisGL.tunisBinormal3dvEXT(v); }
#define glBinormal3dvEXT tunisBinormal3dvEXT
TUNIS_FORCE_INLINE void  tunisBinormal3fEXT(GLfloat bx, GLfloat by, GLfloat bz) { tunisGL.tunisBinormal3fEXT(bx, by, bz); }
#define glBinormal3fEXT tunisBinormal3fEXT
TUNIS_FORCE_INLINE void  tunisBinormal3fvEXT(const GLfloat * v) { tunisGL.tunisBinormal3fvEXT(v); }
#define glBinormal3fvEXT tunisBinormal3fvEXT
TUNIS_FORCE_INLINE void  tunisBinormal3iEXT(GLint bx, GLint by, GLint bz) { tunisGL.tunisBinormal3iEXT(bx, by, bz); }
#define glBinormal3iEXT tunisBinormal3iEXT
TUNIS_FORCE_INLINE void  tunisBinormal3ivEXT(const GLint * v) { tunisGL.tunisBinormal3ivEXT(v); }
#define glBinormal3ivEXT tunisBinormal3ivEXT
TUNIS_FORCE_INLINE void  tunisBinormal3sEXT(GLshort bx, GLshort by, GLshort bz) { tunisGL.tunisBinormal3sEXT(bx, by, bz); }
#define glBinormal3sEXT tunisBinormal3sEXT
TUNIS_FORCE_INLINE void  tunisBinormal3svEXT(const GLshort * v) { tunisGL.tunisBinormal3svEXT(v); }
#define glBinormal3svEXT tunisBinormal3svEXT
TUNIS_FORCE_INLINE void  tunisBinormalPointerEXT(GLenum type, GLsizei stride, const void * pointer) { tunisGL.tunisBinormalPointerEXT(type, stride, pointer); }
#define glBinormalPointerEXT tunisBinormalPointerEXT
TUNIS_FORCE_INLINE void  tunisBitmap(GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const GLubyte * bitmap) { tunisGL.tunisBitmap(width, height, xorig, yorig, xmove, ymove, bitmap); }
#define glBitmap tunisBitmap
TUNIS_FORCE_INLINE void  tunisBitmapxOES(GLsizei width, GLsizei height, GLfixed xorig, GLfixed yorig, GLfixed xmove, GLfixed ymove, const GLubyte * bitmap) { tunisGL.tunisBitmapxOES(width, height, xorig, yorig, xmove, ymove, bitmap); }
#define glBitmapxOES tunisBitmapxOES
TUNIS_FORCE_INLINE void  tunisBlendBarrier(void) { tunisGL.tunisBlendBarrier(); }
#define glBlendBarrier tunisBlendBarrier
TUNIS_FORCE_INLINE void  tunisBlendBarrierKHR(void) { tunisGL.tunisBlendBarrierKHR(); }
#define glBlendBarrierKHR tunisBlendBarrierKHR
TUNIS_FORCE_INLINE void  tunisBlendBarrierNV(void) { tunisGL.tunisBlendBarrierNV(); }
#define glBlendBarrierNV tunisBlendBarrierNV
TUNIS_FORCE_INLINE void  tunisBlendColor(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha) { tunisGL.tunisBlendColor(red, green, blue, alpha); }
#define glBlendColor tunisBlendColor
TUNIS_FORCE_INLINE void  tunisBlendColorEXT(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha) { tunisGL.tunisBlendColorEXT(red, green, blue, alpha); }
#define glBlendColorEXT tunisBlendColorEXT
TUNIS_FORCE_INLINE void  tunisBlendColorxOES(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha) { tunisGL.tunisBlendColorxOES(red, green, blue, alpha); }
#define glBlendColorxOES tunisBlendColorxOES
TUNIS_FORCE_INLINE void  tunisBlendEquation(GLenum mode) { tunisGL.tunisBlendEquation(mode); }
#define glBlendEquation tunisBlendEquation
TUNIS_FORCE_INLINE void  tunisBlendEquationEXT(GLenum mode) { tunisGL.tunisBlendEquationEXT(mode); }
#define glBlendEquationEXT tunisBlendEquationEXT
TUNIS_FORCE_INLINE void  tunisBlendEquationIndexedAMD(GLuint buf, GLenum mode) { tunisGL.tunisBlendEquationIndexedAMD(buf, mode); }
#define glBlendEquationIndexedAMD tunisBlendEquationIndexedAMD
TUNIS_FORCE_INLINE void  tunisBlendEquationOES(GLenum mode) { tunisGL.tunisBlendEquationOES(mode); }
#define glBlendEquationOES tunisBlendEquationOES
TUNIS_FORCE_INLINE void  tunisBlendEquationSeparate(GLenum modeRGB, GLenum modeAlpha) { tunisGL.tunisBlendEquationSeparate(modeRGB, modeAlpha); }
#define glBlendEquationSeparate tunisBlendEquationSeparate
TUNIS_FORCE_INLINE void  tunisBlendEquationSeparateEXT(GLenum modeRGB, GLenum modeAlpha) { tunisGL.tunisBlendEquationSeparateEXT(modeRGB, modeAlpha); }
#define glBlendEquationSeparateEXT tunisBlendEquationSeparateEXT
TUNIS_FORCE_INLINE void  tunisBlendEquationSeparateIndexedAMD(GLuint buf, GLenum modeRGB, GLenum modeAlpha) { tunisGL.tunisBlendEquationSeparateIndexedAMD(buf, modeRGB, modeAlpha); }
#define glBlendEquationSeparateIndexedAMD tunisBlendEquationSeparateIndexedAMD
TUNIS_FORCE_INLINE void  tunisBlendEquationSeparateOES(GLenum modeRGB, GLenum modeAlpha) { tunisGL.tunisBlendEquationSeparateOES(modeRGB, modeAlpha); }
#define glBlendEquationSeparateOES tunisBlendEquationSeparateOES
TUNIS_FORCE_INLINE void  tunisBlendEquationSeparatei(GLuint buf, GLenum modeRGB, GLenum modeAlpha) { tunisGL.tunisBlendEquationSeparatei(buf, modeRGB, modeAlpha); }
#define glBlendEquationSeparatei tunisBlendEquationSeparatei
TUNIS_FORCE_INLINE void  tunisBlendEquationSeparateiARB(GLuint buf, GLenum modeRGB, GLenum modeAlpha) { tunisGL.tunisBlendEquationSeparateiARB(buf, modeRGB, modeAlpha); }
#define glBlendEquationSeparateiARB tunisBlendEquationSeparateiARB
TUNIS_FORCE_INLINE void  tunisBlendEquationSeparateiEXT(GLuint buf, GLenum modeRGB, GLenum modeAlpha) { tunisGL.tunisBlendEquationSeparateiEXT(buf, modeRGB, modeAlpha); }
#define glBlendEquationSeparateiEXT tunisBlendEquationSeparateiEXT
TUNIS_FORCE_INLINE void  tunisBlendEquationSeparateiOES(GLuint buf, GLenum modeRGB, GLenum modeAlpha) { tunisGL.tunisBlendEquationSeparateiOES(buf, modeRGB, modeAlpha); }
#define glBlendEquationSeparateiOES tunisBlendEquationSeparateiOES
TUNIS_FORCE_INLINE void  tunisBlendEquationi(GLuint buf, GLenum mode) { tunisGL.tunisBlendEquationi(buf, mode); }
#define glBlendEquationi tunisBlendEquationi
TUNIS_FORCE_INLINE void  tunisBlendEquationiARB(GLuint buf, GLenum mode) { tunisGL.tunisBlendEquationiARB(buf, mode); }
#define glBlendEquationiARB tunisBlendEquationiARB
TUNIS_FORCE_INLINE void  tunisBlendEquationiEXT(GLuint buf, GLenum mode) { tunisGL.tunisBlendEquationiEXT(buf, mode); }
#define glBlendEquationiEXT tunisBlendEquationiEXT
TUNIS_FORCE_INLINE void  tunisBlendEquationiOES(GLuint buf, GLenum mode) { tunisGL.tunisBlendEquationiOES(buf, mode); }
#define glBlendEquationiOES tunisBlendEquationiOES
TUNIS_FORCE_INLINE void  tunisBlendFunc(GLenum sfactor, GLenum dfactor) { tunisGL.tunisBlendFunc(sfactor, dfactor); }
#define glBlendFunc tunisBlendFunc
TUNIS_FORCE_INLINE void  tunisBlendFuncIndexedAMD(GLuint buf, GLenum src, GLenum dst) { tunisGL.tunisBlendFuncIndexedAMD(buf, src, dst); }
#define glBlendFuncIndexedAMD tunisBlendFuncIndexedAMD
TUNIS_FORCE_INLINE void  tunisBlendFuncSeparate(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha) { tunisGL.tunisBlendFuncSeparate(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha); }
#define glBlendFuncSeparate tunisBlendFuncSeparate
TUNIS_FORCE_INLINE void  tunisBlendFuncSeparateEXT(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha) { tunisGL.tunisBlendFuncSeparateEXT(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha); }
#define glBlendFuncSeparateEXT tunisBlendFuncSeparateEXT
TUNIS_FORCE_INLINE void  tunisBlendFuncSeparateINGR(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha) { tunisGL.tunisBlendFuncSeparateINGR(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha); }
#define glBlendFuncSeparateINGR tunisBlendFuncSeparateINGR
TUNIS_FORCE_INLINE void  tunisBlendFuncSeparateIndexedAMD(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha) { tunisGL.tunisBlendFuncSeparateIndexedAMD(buf, srcRGB, dstRGB, srcAlpha, dstAlpha); }
#define glBlendFuncSeparateIndexedAMD tunisBlendFuncSeparateIndexedAMD
TUNIS_FORCE_INLINE void  tunisBlendFuncSeparateOES(GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha) { tunisGL.tunisBlendFuncSeparateOES(srcRGB, dstRGB, srcAlpha, dstAlpha); }
#define glBlendFuncSeparateOES tunisBlendFuncSeparateOES
TUNIS_FORCE_INLINE void  tunisBlendFuncSeparatei(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha) { tunisGL.tunisBlendFuncSeparatei(buf, srcRGB, dstRGB, srcAlpha, dstAlpha); }
#define glBlendFuncSeparatei tunisBlendFuncSeparatei
TUNIS_FORCE_INLINE void  tunisBlendFuncSeparateiARB(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha) { tunisGL.tunisBlendFuncSeparateiARB(buf, srcRGB, dstRGB, srcAlpha, dstAlpha); }
#define glBlendFuncSeparateiARB tunisBlendFuncSeparateiARB
TUNIS_FORCE_INLINE void  tunisBlendFuncSeparateiEXT(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha) { tunisGL.tunisBlendFuncSeparateiEXT(buf, srcRGB, dstRGB, srcAlpha, dstAlpha); }
#define glBlendFuncSeparateiEXT tunisBlendFuncSeparateiEXT
TUNIS_FORCE_INLINE void  tunisBlendFuncSeparateiOES(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha) { tunisGL.tunisBlendFuncSeparateiOES(buf, srcRGB, dstRGB, srcAlpha, dstAlpha); }
#define glBlendFuncSeparateiOES tunisBlendFuncSeparateiOES
TUNIS_FORCE_INLINE void  tunisBlendFunci(GLuint buf, GLenum src, GLenum dst) { tunisGL.tunisBlendFunci(buf, src, dst); }
#define glBlendFunci tunisBlendFunci
TUNIS_FORCE_INLINE void  tunisBlendFunciARB(GLuint buf, GLenum src, GLenum dst) { tunisGL.tunisBlendFunciARB(buf, src, dst); }
#define glBlendFunciARB tunisBlendFunciARB
TUNIS_FORCE_INLINE void  tunisBlendFunciEXT(GLuint buf, GLenum src, GLenum dst) { tunisGL.tunisBlendFunciEXT(buf, src, dst); }
#define glBlendFunciEXT tunisBlendFunciEXT
TUNIS_FORCE_INLINE void  tunisBlendFunciOES(GLuint buf, GLenum src, GLenum dst) { tunisGL.tunisBlendFunciOES(buf, src, dst); }
#define glBlendFunciOES tunisBlendFunciOES
TUNIS_FORCE_INLINE void  tunisBlendParameteriNV(GLenum pname, GLint value) { tunisGL.tunisBlendParameteriNV(pname, value); }
#define glBlendParameteriNV tunisBlendParameteriNV
TUNIS_FORCE_INLINE void  tunisBlitFramebuffer(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter) { tunisGL.tunisBlitFramebuffer(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter); }
#define glBlitFramebuffer tunisBlitFramebuffer
TUNIS_FORCE_INLINE void  tunisBlitFramebufferANGLE(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter) { tunisGL.tunisBlitFramebufferANGLE(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter); }
#define glBlitFramebufferANGLE tunisBlitFramebufferANGLE
TUNIS_FORCE_INLINE void  tunisBlitFramebufferEXT(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter) { tunisGL.tunisBlitFramebufferEXT(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter); }
#define glBlitFramebufferEXT tunisBlitFramebufferEXT
TUNIS_FORCE_INLINE void  tunisBlitFramebufferNV(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter) { tunisGL.tunisBlitFramebufferNV(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter); }
#define glBlitFramebufferNV tunisBlitFramebufferNV
TUNIS_FORCE_INLINE void  tunisBlitNamedFramebuffer(GLuint readFramebuffer, GLuint drawFramebuffer, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter) { tunisGL.tunisBlitNamedFramebuffer(readFramebuffer, drawFramebuffer, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter); }
#define glBlitNamedFramebuffer tunisBlitNamedFramebuffer
TUNIS_FORCE_INLINE void  tunisBufferAddressRangeNV(GLenum pname, GLuint index, GLuint64EXT address, GLsizeiptr length) { tunisGL.tunisBufferAddressRangeNV(pname, index, address, length); }
#define glBufferAddressRangeNV tunisBufferAddressRangeNV
TUNIS_FORCE_INLINE void  tunisBufferAttachMemoryNV(GLenum target, GLuint memory, GLuint64 offset) { tunisGL.tunisBufferAttachMemoryNV(target, memory, offset); }
#define glBufferAttachMemoryNV tunisBufferAttachMemoryNV
TUNIS_FORCE_INLINE void  tunisBufferData(GLenum target, GLsizeiptr size, const void * data, GLenum usage) { tunisGL.tunisBufferData(target, size, data, usage); }
#define glBufferData tunisBufferData
TUNIS_FORCE_INLINE void  tunisBufferDataARB(GLenum target, GLsizeiptrARB size, const void * data, GLenum usage) { tunisGL.tunisBufferDataARB(target, size, data, usage); }
#define glBufferDataARB tunisBufferDataARB
TUNIS_FORCE_INLINE void  tunisBufferPageCommitmentARB(GLenum target, GLintptr offset, GLsizeiptr size, GLboolean commit) { tunisGL.tunisBufferPageCommitmentARB(target, offset, size, commit); }
#define glBufferPageCommitmentARB tunisBufferPageCommitmentARB
TUNIS_FORCE_INLINE void  tunisBufferParameteriAPPLE(GLenum target, GLenum pname, GLint param) { tunisGL.tunisBufferParameteriAPPLE(target, pname, param); }
#define glBufferParameteriAPPLE tunisBufferParameteriAPPLE
TUNIS_FORCE_INLINE GLuint tunisBufferRegionEnabled(void) { return tunisGL.tunisBufferRegionEnabled(); }
#define glBufferRegionEnabled tunisBufferRegionEnabled
TUNIS_FORCE_INLINE void  tunisBufferStorage(GLenum target, GLsizeiptr size, const void * data, GLbitfield flags) { tunisGL.tunisBufferStorage(target, size, data, flags); }
#define glBufferStorage tunisBufferStorage
TUNIS_FORCE_INLINE void  tunisBufferStorageEXT(GLenum target, GLsizeiptr size, const void * data, GLbitfield flags) { tunisGL.tunisBufferStorageEXT(target, size, data, flags); }
#define glBufferStorageEXT tunisBufferStorageEXT
TUNIS_FORCE_INLINE void  tunisBufferStorageExternalEXT(GLenum target, GLintptr offset, GLsizeiptr size, GLeglClientBufferEXT clientBuffer, GLbitfield flags) { tunisGL.tunisBufferStorageExternalEXT(target, offset, size, clientBuffer, flags); }
#define glBufferStorageExternalEXT tunisBufferStorageExternalEXT
TUNIS_FORCE_INLINE void  tunisBufferStorageMemEXT(GLenum target, GLsizeiptr size, GLuint memory, GLuint64 offset) { tunisGL.tunisBufferStorageMemEXT(target, size, memory, offset); }
#define glBufferStorageMemEXT tunisBufferStorageMemEXT
TUNIS_FORCE_INLINE void  tunisBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, const void * data) { tunisGL.tunisBufferSubData(target, offset, size, data); }
#define glBufferSubData tunisBufferSubData
TUNIS_FORCE_INLINE void  tunisBufferSubDataARB(GLenum target, GLintptrARB offset, GLsizeiptrARB size, const void * data) { tunisGL.tunisBufferSubDataARB(target, offset, size, data); }
#define glBufferSubDataARB tunisBufferSubDataARB
TUNIS_FORCE_INLINE void  tunisCallCommandListNV(GLuint list) { tunisGL.tunisCallCommandListNV(list); }
#define glCallCommandListNV tunisCallCommandListNV
TUNIS_FORCE_INLINE void  tunisCallList(GLuint list) { tunisGL.tunisCallList(list); }
#define glCallList tunisCallList
TUNIS_FORCE_INLINE void  tunisCallLists(GLsizei n, GLenum type, const void * lists) { tunisGL.tunisCallLists(n, type, lists); }
#define glCallLists tunisCallLists
TUNIS_FORCE_INLINE GLenum tunisCheckFramebufferStatus(GLenum target) { return tunisGL.tunisCheckFramebufferStatus(target); }
#define glCheckFramebufferStatus tunisCheckFramebufferStatus
TUNIS_FORCE_INLINE GLenum tunisCheckFramebufferStatusEXT(GLenum target) { return tunisGL.tunisCheckFramebufferStatusEXT(target); }
#define glCheckFramebufferStatusEXT tunisCheckFramebufferStatusEXT
TUNIS_FORCE_INLINE GLenum tunisCheckFramebufferStatusOES(GLenum target) { return tunisGL.tunisCheckFramebufferStatusOES(target); }
#define glCheckFramebufferStatusOES tunisCheckFramebufferStatusOES
TUNIS_FORCE_INLINE GLenum tunisCheckNamedFramebufferStatus(GLuint framebuffer, GLenum target) { return tunisGL.tunisCheckNamedFramebufferStatus(framebuffer, target); }
#define glCheckNamedFramebufferStatus tunisCheckNamedFramebufferStatus
TUNIS_FORCE_INLINE GLenum tunisCheckNamedFramebufferStatusEXT(GLuint framebuffer, GLenum target) { return tunisGL.tunisCheckNamedFramebufferStatusEXT(framebuffer, target); }
#define glCheckNamedFramebufferStatusEXT tunisCheckNamedFramebufferStatusEXT
TUNIS_FORCE_INLINE void  tunisClampColor(GLenum target, GLenum clamp) { tunisGL.tunisClampColor(target, clamp); }
#define glClampColor tunisClampColor
TUNIS_FORCE_INLINE void  tunisClampColorARB(GLenum target, GLenum clamp) { tunisGL.tunisClampColorARB(target, clamp); }
#define glClampColorARB tunisClampColorARB
TUNIS_FORCE_INLINE void  tunisClear(GLbitfield mask) { tunisGL.tunisClear(mask); }
#define glClear tunisClear
TUNIS_FORCE_INLINE void  tunisClearAccum(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha) { tunisGL.tunisClearAccum(red, green, blue, alpha); }
#define glClearAccum tunisClearAccum
TUNIS_FORCE_INLINE void  tunisClearAccumxOES(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha) { tunisGL.tunisClearAccumxOES(red, green, blue, alpha); }
#define glClearAccumxOES tunisClearAccumxOES
TUNIS_FORCE_INLINE void  tunisClearBufferData(GLenum target, GLenum internalformat, GLenum format, GLenum type, const void * data) { tunisGL.tunisClearBufferData(target, internalformat, format, type, data); }
#define glClearBufferData tunisClearBufferData
TUNIS_FORCE_INLINE void  tunisClearBufferSubData(GLenum target, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void * data) { tunisGL.tunisClearBufferSubData(target, internalformat, offset, size, format, type, data); }
#define glClearBufferSubData tunisClearBufferSubData
TUNIS_FORCE_INLINE void  tunisClearBufferfi(GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil) { tunisGL.tunisClearBufferfi(buffer, drawbuffer, depth, stencil); }
#define glClearBufferfi tunisClearBufferfi
TUNIS_FORCE_INLINE void  tunisClearBufferfv(GLenum buffer, GLint drawbuffer, const GLfloat * value) { tunisGL.tunisClearBufferfv(buffer, drawbuffer, value); }
#define glClearBufferfv tunisClearBufferfv
TUNIS_FORCE_INLINE void  tunisClearBufferiv(GLenum buffer, GLint drawbuffer, const GLint * value) { tunisGL.tunisClearBufferiv(buffer, drawbuffer, value); }
#define glClearBufferiv tunisClearBufferiv
TUNIS_FORCE_INLINE void  tunisClearBufferuiv(GLenum buffer, GLint drawbuffer, const GLuint * value) { tunisGL.tunisClearBufferuiv(buffer, drawbuffer, value); }
#define glClearBufferuiv tunisClearBufferuiv
TUNIS_FORCE_INLINE void  tunisClearColor(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha) { tunisGL.tunisClearColor(red, green, blue, alpha); }
#define glClearColor tunisClearColor
TUNIS_FORCE_INLINE void  tunisClearColorIiEXT(GLint red, GLint green, GLint blue, GLint alpha) { tunisGL.tunisClearColorIiEXT(red, green, blue, alpha); }
#define glClearColorIiEXT tunisClearColorIiEXT
TUNIS_FORCE_INLINE void  tunisClearColorIuiEXT(GLuint red, GLuint green, GLuint blue, GLuint alpha) { tunisGL.tunisClearColorIuiEXT(red, green, blue, alpha); }
#define glClearColorIuiEXT tunisClearColorIuiEXT
TUNIS_FORCE_INLINE void  tunisClearColorx(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha) { tunisGL.tunisClearColorx(red, green, blue, alpha); }
#define glClearColorx tunisClearColorx
TUNIS_FORCE_INLINE void  tunisClearColorxOES(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha) { tunisGL.tunisClearColorxOES(red, green, blue, alpha); }
#define glClearColorxOES tunisClearColorxOES
TUNIS_FORCE_INLINE void  tunisClearDepth(GLdouble depth) { tunisGL.tunisClearDepth(depth); }
#define glClearDepth tunisClearDepth
TUNIS_FORCE_INLINE void  tunisClearDepthdNV(GLdouble depth) { tunisGL.tunisClearDepthdNV(depth); }
#define glClearDepthdNV tunisClearDepthdNV
TUNIS_FORCE_INLINE void  tunisClearDepthf(GLfloat d) { tunisGL.tunisClearDepthf(d); }
#define glClearDepthf tunisClearDepthf
TUNIS_FORCE_INLINE void  tunisClearDepthfOES(GLclampf depth) { tunisGL.tunisClearDepthfOES(depth); }
#define glClearDepthfOES tunisClearDepthfOES
TUNIS_FORCE_INLINE void  tunisClearDepthx(GLfixed depth) { tunisGL.tunisClearDepthx(depth); }
#define glClearDepthx tunisClearDepthx
TUNIS_FORCE_INLINE void  tunisClearDepthxOES(GLfixed depth) { tunisGL.tunisClearDepthxOES(depth); }
#define glClearDepthxOES tunisClearDepthxOES
TUNIS_FORCE_INLINE void  tunisClearIndex(GLfloat c) { tunisGL.tunisClearIndex(c); }
#define glClearIndex tunisClearIndex
TUNIS_FORCE_INLINE void  tunisClearNamedBufferData(GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void * data) { tunisGL.tunisClearNamedBufferData(buffer, internalformat, format, type, data); }
#define glClearNamedBufferData tunisClearNamedBufferData
TUNIS_FORCE_INLINE void  tunisClearNamedBufferDataEXT(GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void * data) { tunisGL.tunisClearNamedBufferDataEXT(buffer, internalformat, format, type, data); }
#define glClearNamedBufferDataEXT tunisClearNamedBufferDataEXT
TUNIS_FORCE_INLINE void  tunisClearNamedBufferSubData(GLuint buffer, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void * data) { tunisGL.tunisClearNamedBufferSubData(buffer, internalformat, offset, size, format, type, data); }
#define glClearNamedBufferSubData tunisClearNamedBufferSubData
TUNIS_FORCE_INLINE void  tunisClearNamedBufferSubDataEXT(GLuint buffer, GLenum internalformat, GLsizeiptr offset, GLsizeiptr size, GLenum format, GLenum type, const void * data) { tunisGL.tunisClearNamedBufferSubDataEXT(buffer, internalformat, offset, size, format, type, data); }
#define glClearNamedBufferSubDataEXT tunisClearNamedBufferSubDataEXT
TUNIS_FORCE_INLINE void  tunisClearNamedFramebufferfi(GLuint framebuffer, GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil) { tunisGL.tunisClearNamedFramebufferfi(framebuffer, buffer, drawbuffer, depth, stencil); }
#define glClearNamedFramebufferfi tunisClearNamedFramebufferfi
TUNIS_FORCE_INLINE void  tunisClearNamedFramebufferfv(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLfloat * value) { tunisGL.tunisClearNamedFramebufferfv(framebuffer, buffer, drawbuffer, value); }
#define glClearNamedFramebufferfv tunisClearNamedFramebufferfv
TUNIS_FORCE_INLINE void  tunisClearNamedFramebufferiv(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLint * value) { tunisGL.tunisClearNamedFramebufferiv(framebuffer, buffer, drawbuffer, value); }
#define glClearNamedFramebufferiv tunisClearNamedFramebufferiv
TUNIS_FORCE_INLINE void  tunisClearNamedFramebufferuiv(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLuint * value) { tunisGL.tunisClearNamedFramebufferuiv(framebuffer, buffer, drawbuffer, value); }
#define glClearNamedFramebufferuiv tunisClearNamedFramebufferuiv
TUNIS_FORCE_INLINE void  tunisClearPixelLocalStorageuiEXT(GLsizei offset, GLsizei n, const GLuint * values) { tunisGL.tunisClearPixelLocalStorageuiEXT(offset, n, values); }
#define glClearPixelLocalStorageuiEXT tunisClearPixelLocalStorageuiEXT
TUNIS_FORCE_INLINE void  tunisClearStencil(GLint s) { tunisGL.tunisClearStencil(s); }
#define glClearStencil tunisClearStencil
TUNIS_FORCE_INLINE void  tunisClearTexImage(GLuint texture, GLint level, GLenum format, GLenum type, const void * data) { tunisGL.tunisClearTexImage(texture, level, format, type, data); }
#define glClearTexImage tunisClearTexImage
TUNIS_FORCE_INLINE void  tunisClearTexImageEXT(GLuint texture, GLint level, GLenum format, GLenum type, const void * data) { tunisGL.tunisClearTexImageEXT(texture, level, format, type, data); }
#define glClearTexImageEXT tunisClearTexImageEXT
TUNIS_FORCE_INLINE void  tunisClearTexSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void * data) { tunisGL.tunisClearTexSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, data); }
#define glClearTexSubImage tunisClearTexSubImage
TUNIS_FORCE_INLINE void  tunisClearTexSubImageEXT(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void * data) { tunisGL.tunisClearTexSubImageEXT(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, data); }
#define glClearTexSubImageEXT tunisClearTexSubImageEXT
TUNIS_FORCE_INLINE void  tunisClientActiveTexture(GLenum texture) { tunisGL.tunisClientActiveTexture(texture); }
#define glClientActiveTexture tunisClientActiveTexture
TUNIS_FORCE_INLINE void  tunisClientActiveTextureARB(GLenum texture) { tunisGL.tunisClientActiveTextureARB(texture); }
#define glClientActiveTextureARB tunisClientActiveTextureARB
TUNIS_FORCE_INLINE void  tunisClientActiveVertexStreamATI(GLenum stream) { tunisGL.tunisClientActiveVertexStreamATI(stream); }
#define glClientActiveVertexStreamATI tunisClientActiveVertexStreamATI
TUNIS_FORCE_INLINE void  tunisClientAttribDefaultEXT(GLbitfield mask) { tunisGL.tunisClientAttribDefaultEXT(mask); }
#define glClientAttribDefaultEXT tunisClientAttribDefaultEXT
TUNIS_FORCE_INLINE GLenum tunisClientWaitSync(GLsync sync, GLbitfield flags, GLuint64 timeout) { return tunisGL.tunisClientWaitSync(sync, flags, timeout); }
#define glClientWaitSync tunisClientWaitSync
TUNIS_FORCE_INLINE GLenum tunisClientWaitSyncAPPLE(GLsync sync, GLbitfield flags, GLuint64 timeout) { return tunisGL.tunisClientWaitSyncAPPLE(sync, flags, timeout); }
#define glClientWaitSyncAPPLE tunisClientWaitSyncAPPLE
TUNIS_FORCE_INLINE void  tunisClipControl(GLenum origin, GLenum depth) { tunisGL.tunisClipControl(origin, depth); }
#define glClipControl tunisClipControl
TUNIS_FORCE_INLINE void  tunisClipControlEXT(GLenum origin, GLenum depth) { tunisGL.tunisClipControlEXT(origin, depth); }
#define glClipControlEXT tunisClipControlEXT
TUNIS_FORCE_INLINE void  tunisClipPlane(GLenum plane, const GLdouble * equation) { tunisGL.tunisClipPlane(plane, equation); }
#define glClipPlane tunisClipPlane
TUNIS_FORCE_INLINE void  tunisClipPlanef(GLenum p, const GLfloat * eqn) { tunisGL.tunisClipPlanef(p, eqn); }
#define glClipPlanef tunisClipPlanef
TUNIS_FORCE_INLINE void  tunisClipPlanefIMG(GLenum p, const GLfloat * eqn) { tunisGL.tunisClipPlanefIMG(p, eqn); }
#define glClipPlanefIMG tunisClipPlanefIMG
TUNIS_FORCE_INLINE void  tunisClipPlanefOES(GLenum plane, const GLfloat * equation) { tunisGL.tunisClipPlanefOES(plane, equation); }
#define glClipPlanefOES tunisClipPlanefOES
TUNIS_FORCE_INLINE void  tunisClipPlanex(GLenum plane, const GLfixed * equation) { tunisGL.tunisClipPlanex(plane, equation); }
#define glClipPlanex tunisClipPlanex
TUNIS_FORCE_INLINE void  tunisClipPlanexIMG(GLenum p, const GLfixed * eqn) { tunisGL.tunisClipPlanexIMG(p, eqn); }
#define glClipPlanexIMG tunisClipPlanexIMG
TUNIS_FORCE_INLINE void  tunisClipPlanexOES(GLenum plane, const GLfixed * equation) { tunisGL.tunisClipPlanexOES(plane, equation); }
#define glClipPlanexOES tunisClipPlanexOES
TUNIS_FORCE_INLINE void  tunisColor3b(GLbyte red, GLbyte green, GLbyte blue) { tunisGL.tunisColor3b(red, green, blue); }
#define glColor3b tunisColor3b
TUNIS_FORCE_INLINE void  tunisColor3bv(const GLbyte * v) { tunisGL.tunisColor3bv(v); }
#define glColor3bv tunisColor3bv
TUNIS_FORCE_INLINE void  tunisColor3d(GLdouble red, GLdouble green, GLdouble blue) { tunisGL.tunisColor3d(red, green, blue); }
#define glColor3d tunisColor3d
TUNIS_FORCE_INLINE void  tunisColor3dv(const GLdouble * v) { tunisGL.tunisColor3dv(v); }
#define glColor3dv tunisColor3dv
TUNIS_FORCE_INLINE void  tunisColor3f(GLfloat red, GLfloat green, GLfloat blue) { tunisGL.tunisColor3f(red, green, blue); }
#define glColor3f tunisColor3f
TUNIS_FORCE_INLINE void  tunisColor3fVertex3fSUN(GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z) { tunisGL.tunisColor3fVertex3fSUN(r, g, b, x, y, z); }
#define glColor3fVertex3fSUN tunisColor3fVertex3fSUN
TUNIS_FORCE_INLINE void  tunisColor3fVertex3fvSUN(const GLfloat * c, const GLfloat * v) { tunisGL.tunisColor3fVertex3fvSUN(c, v); }
#define glColor3fVertex3fvSUN tunisColor3fVertex3fvSUN
TUNIS_FORCE_INLINE void  tunisColor3fv(const GLfloat * v) { tunisGL.tunisColor3fv(v); }
#define glColor3fv tunisColor3fv
TUNIS_FORCE_INLINE void  tunisColor3hNV(GLhalfNV red, GLhalfNV green, GLhalfNV blue) { tunisGL.tunisColor3hNV(red, green, blue); }
#define glColor3hNV tunisColor3hNV
TUNIS_FORCE_INLINE void  tunisColor3hvNV(const GLhalfNV * v) { tunisGL.tunisColor3hvNV(v); }
#define glColor3hvNV tunisColor3hvNV
TUNIS_FORCE_INLINE void  tunisColor3i(GLint red, GLint green, GLint blue) { tunisGL.tunisColor3i(red, green, blue); }
#define glColor3i tunisColor3i
TUNIS_FORCE_INLINE void  tunisColor3iv(const GLint * v) { tunisGL.tunisColor3iv(v); }
#define glColor3iv tunisColor3iv
TUNIS_FORCE_INLINE void  tunisColor3s(GLshort red, GLshort green, GLshort blue) { tunisGL.tunisColor3s(red, green, blue); }
#define glColor3s tunisColor3s
TUNIS_FORCE_INLINE void  tunisColor3sv(const GLshort * v) { tunisGL.tunisColor3sv(v); }
#define glColor3sv tunisColor3sv
TUNIS_FORCE_INLINE void  tunisColor3ub(GLubyte red, GLubyte green, GLubyte blue) { tunisGL.tunisColor3ub(red, green, blue); }
#define glColor3ub tunisColor3ub
TUNIS_FORCE_INLINE void  tunisColor3ubv(const GLubyte * v) { tunisGL.tunisColor3ubv(v); }
#define glColor3ubv tunisColor3ubv
TUNIS_FORCE_INLINE void  tunisColor3ui(GLuint red, GLuint green, GLuint blue) { tunisGL.tunisColor3ui(red, green, blue); }
#define glColor3ui tunisColor3ui
TUNIS_FORCE_INLINE void  tunisColor3uiv(const GLuint * v) { tunisGL.tunisColor3uiv(v); }
#define glColor3uiv tunisColor3uiv
TUNIS_FORCE_INLINE void  tunisColor3us(GLushort red, GLushort green, GLushort blue) { tunisGL.tunisColor3us(red, green, blue); }
#define glColor3us tunisColor3us
TUNIS_FORCE_INLINE void  tunisColor3usv(const GLushort * v) { tunisGL.tunisColor3usv(v); }
#define glColor3usv tunisColor3usv
TUNIS_FORCE_INLINE void  tunisColor3xOES(GLfixed red, GLfixed green, GLfixed blue) { tunisGL.tunisColor3xOES(red, green, blue); }
#define glColor3xOES tunisColor3xOES
TUNIS_FORCE_INLINE void  tunisColor3xvOES(const GLfixed * components) { tunisGL.tunisColor3xvOES(components); }
#define glColor3xvOES tunisColor3xvOES
TUNIS_FORCE_INLINE void  tunisColor4b(GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha) { tunisGL.tunisColor4b(red, green, blue, alpha); }
#define glColor4b tunisColor4b
TUNIS_FORCE_INLINE void  tunisColor4bv(const GLbyte * v) { tunisGL.tunisColor4bv(v); }
#define glColor4bv tunisColor4bv
TUNIS_FORCE_INLINE void  tunisColor4d(GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha) { tunisGL.tunisColor4d(red, green, blue, alpha); }
#define glColor4d tunisColor4d
TUNIS_FORCE_INLINE void  tunisColor4dv(const GLdouble * v) { tunisGL.tunisColor4dv(v); }
#define glColor4dv tunisColor4dv
TUNIS_FORCE_INLINE void  tunisColor4f(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha) { tunisGL.tunisColor4f(red, green, blue, alpha); }
#define glColor4f tunisColor4f
TUNIS_FORCE_INLINE void  tunisColor4fNormal3fVertex3fSUN(GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z) { tunisGL.tunisColor4fNormal3fVertex3fSUN(r, g, b, a, nx, ny, nz, x, y, z); }
#define glColor4fNormal3fVertex3fSUN tunisColor4fNormal3fVertex3fSUN
TUNIS_FORCE_INLINE void  tunisColor4fNormal3fVertex3fvSUN(const GLfloat * c, const GLfloat * n, const GLfloat * v) { tunisGL.tunisColor4fNormal3fVertex3fvSUN(c, n, v); }
#define glColor4fNormal3fVertex3fvSUN tunisColor4fNormal3fVertex3fvSUN
TUNIS_FORCE_INLINE void  tunisColor4fv(const GLfloat * v) { tunisGL.tunisColor4fv(v); }
#define glColor4fv tunisColor4fv
TUNIS_FORCE_INLINE void  tunisColor4hNV(GLhalfNV red, GLhalfNV green, GLhalfNV blue, GLhalfNV alpha) { tunisGL.tunisColor4hNV(red, green, blue, alpha); }
#define glColor4hNV tunisColor4hNV
TUNIS_FORCE_INLINE void  tunisColor4hvNV(const GLhalfNV * v) { tunisGL.tunisColor4hvNV(v); }
#define glColor4hvNV tunisColor4hvNV
TUNIS_FORCE_INLINE void  tunisColor4i(GLint red, GLint green, GLint blue, GLint alpha) { tunisGL.tunisColor4i(red, green, blue, alpha); }
#define glColor4i tunisColor4i
TUNIS_FORCE_INLINE void  tunisColor4iv(const GLint * v) { tunisGL.tunisColor4iv(v); }
#define glColor4iv tunisColor4iv
TUNIS_FORCE_INLINE void  tunisColor4s(GLshort red, GLshort green, GLshort blue, GLshort alpha) { tunisGL.tunisColor4s(red, green, blue, alpha); }
#define glColor4s tunisColor4s
TUNIS_FORCE_INLINE void  tunisColor4sv(const GLshort * v) { tunisGL.tunisColor4sv(v); }
#define glColor4sv tunisColor4sv
TUNIS_FORCE_INLINE void  tunisColor4ub(GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha) { tunisGL.tunisColor4ub(red, green, blue, alpha); }
#define glColor4ub tunisColor4ub
TUNIS_FORCE_INLINE void  tunisColor4ubVertex2fSUN(GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y) { tunisGL.tunisColor4ubVertex2fSUN(r, g, b, a, x, y); }
#define glColor4ubVertex2fSUN tunisColor4ubVertex2fSUN
TUNIS_FORCE_INLINE void  tunisColor4ubVertex2fvSUN(const GLubyte * c, const GLfloat * v) { tunisGL.tunisColor4ubVertex2fvSUN(c, v); }
#define glColor4ubVertex2fvSUN tunisColor4ubVertex2fvSUN
TUNIS_FORCE_INLINE void  tunisColor4ubVertex3fSUN(GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z) { tunisGL.tunisColor4ubVertex3fSUN(r, g, b, a, x, y, z); }
#define glColor4ubVertex3fSUN tunisColor4ubVertex3fSUN
TUNIS_FORCE_INLINE void  tunisColor4ubVertex3fvSUN(const GLubyte * c, const GLfloat * v) { tunisGL.tunisColor4ubVertex3fvSUN(c, v); }
#define glColor4ubVertex3fvSUN tunisColor4ubVertex3fvSUN
TUNIS_FORCE_INLINE void  tunisColor4ubv(const GLubyte * v) { tunisGL.tunisColor4ubv(v); }
#define glColor4ubv tunisColor4ubv
TUNIS_FORCE_INLINE void  tunisColor4ui(GLuint red, GLuint green, GLuint blue, GLuint alpha) { tunisGL.tunisColor4ui(red, green, blue, alpha); }
#define glColor4ui tunisColor4ui
TUNIS_FORCE_INLINE void  tunisColor4uiv(const GLuint * v) { tunisGL.tunisColor4uiv(v); }
#define glColor4uiv tunisColor4uiv
TUNIS_FORCE_INLINE void  tunisColor4us(GLushort red, GLushort green, GLushort blue, GLushort alpha) { tunisGL.tunisColor4us(red, green, blue, alpha); }
#define glColor4us tunisColor4us
TUNIS_FORCE_INLINE void  tunisColor4usv(const GLushort * v) { tunisGL.tunisColor4usv(v); }
#define glColor4usv tunisColor4usv
TUNIS_FORCE_INLINE void  tunisColor4x(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha) { tunisGL.tunisColor4x(red, green, blue, alpha); }
#define glColor4x tunisColor4x
TUNIS_FORCE_INLINE void  tunisColor4xOES(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha) { tunisGL.tunisColor4xOES(red, green, blue, alpha); }
#define glColor4xOES tunisColor4xOES
TUNIS_FORCE_INLINE void  tunisColor4xvOES(const GLfixed * components) { tunisGL.tunisColor4xvOES(components); }
#define glColor4xvOES tunisColor4xvOES
TUNIS_FORCE_INLINE void  tunisColorFormatNV(GLint size, GLenum type, GLsizei stride) { tunisGL.tunisColorFormatNV(size, type, stride); }
#define glColorFormatNV tunisColorFormatNV
TUNIS_FORCE_INLINE void  tunisColorFragmentOp1ATI(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod) { tunisGL.tunisColorFragmentOp1ATI(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod); }
#define glColorFragmentOp1ATI tunisColorFragmentOp1ATI
TUNIS_FORCE_INLINE void  tunisColorFragmentOp2ATI(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod) { tunisGL.tunisColorFragmentOp2ATI(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod); }
#define glColorFragmentOp2ATI tunisColorFragmentOp2ATI
TUNIS_FORCE_INLINE void  tunisColorFragmentOp3ATI(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod) { tunisGL.tunisColorFragmentOp3ATI(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod, arg3, arg3Rep, arg3Mod); }
#define glColorFragmentOp3ATI tunisColorFragmentOp3ATI
TUNIS_FORCE_INLINE void  tunisColorMask(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha) { tunisGL.tunisColorMask(red, green, blue, alpha); }
#define glColorMask tunisColorMask
TUNIS_FORCE_INLINE void  tunisColorMaskIndexedEXT(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a) { tunisGL.tunisColorMaskIndexedEXT(index, r, g, b, a); }
#define glColorMaskIndexedEXT tunisColorMaskIndexedEXT
TUNIS_FORCE_INLINE void  tunisColorMaski(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a) { tunisGL.tunisColorMaski(index, r, g, b, a); }
#define glColorMaski tunisColorMaski
TUNIS_FORCE_INLINE void  tunisColorMaskiEXT(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a) { tunisGL.tunisColorMaskiEXT(index, r, g, b, a); }
#define glColorMaskiEXT tunisColorMaskiEXT
TUNIS_FORCE_INLINE void  tunisColorMaskiOES(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a) { tunisGL.tunisColorMaskiOES(index, r, g, b, a); }
#define glColorMaskiOES tunisColorMaskiOES
TUNIS_FORCE_INLINE void  tunisColorMaterial(GLenum face, GLenum mode) { tunisGL.tunisColorMaterial(face, mode); }
#define glColorMaterial tunisColorMaterial
TUNIS_FORCE_INLINE void  tunisColorP3ui(GLenum type, GLuint color) { tunisGL.tunisColorP3ui(type, color); }
#define glColorP3ui tunisColorP3ui
TUNIS_FORCE_INLINE void  tunisColorP3uiv(GLenum type, const GLuint * color) { tunisGL.tunisColorP3uiv(type, color); }
#define glColorP3uiv tunisColorP3uiv
TUNIS_FORCE_INLINE void  tunisColorP4ui(GLenum type, GLuint color) { tunisGL.tunisColorP4ui(type, color); }
#define glColorP4ui tunisColorP4ui
TUNIS_FORCE_INLINE void  tunisColorP4uiv(GLenum type, const GLuint * color) { tunisGL.tunisColorP4uiv(type, color); }
#define glColorP4uiv tunisColorP4uiv
TUNIS_FORCE_INLINE void  tunisColorPointer(GLint size, GLenum type, GLsizei stride, const void * pointer) { tunisGL.tunisColorPointer(size, type, stride, pointer); }
#define glColorPointer tunisColorPointer
TUNIS_FORCE_INLINE void  tunisColorPointerEXT(GLint size, GLenum type, GLsizei stride, GLsizei count, const void * pointer) { tunisGL.tunisColorPointerEXT(size, type, stride, count, pointer); }
#define glColorPointerEXT tunisColorPointerEXT
TUNIS_FORCE_INLINE void  tunisColorPointerListIBM(GLint size, GLenum type, GLint stride, const void ** pointer, GLint ptrstride) { tunisGL.tunisColorPointerListIBM(size, type, stride, pointer, ptrstride); }
#define glColorPointerListIBM tunisColorPointerListIBM
TUNIS_FORCE_INLINE void  tunisColorPointervINTEL(GLint size, GLenum type, const void ** pointer) { tunisGL.tunisColorPointervINTEL(size, type, pointer); }
#define glColorPointervINTEL tunisColorPointervINTEL
TUNIS_FORCE_INLINE void  tunisColorSubTable(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const void * data) { tunisGL.tunisColorSubTable(target, start, count, format, type, data); }
#define glColorSubTable tunisColorSubTable
TUNIS_FORCE_INLINE void  tunisColorSubTableEXT(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const void * data) { tunisGL.tunisColorSubTableEXT(target, start, count, format, type, data); }
#define glColorSubTableEXT tunisColorSubTableEXT
TUNIS_FORCE_INLINE void  tunisColorTable(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void * table) { tunisGL.tunisColorTable(target, internalformat, width, format, type, table); }
#define glColorTable tunisColorTable
TUNIS_FORCE_INLINE void  tunisColorTableEXT(GLenum target, GLenum internalFormat, GLsizei width, GLenum format, GLenum type, const void * table) { tunisGL.tunisColorTableEXT(target, internalFormat, width, format, type, table); }
#define glColorTableEXT tunisColorTableEXT
TUNIS_FORCE_INLINE void  tunisColorTableParameterfv(GLenum target, GLenum pname, const GLfloat * params) { tunisGL.tunisColorTableParameterfv(target, pname, params); }
#define glColorTableParameterfv tunisColorTableParameterfv
TUNIS_FORCE_INLINE void  tunisColorTableParameterfvSGI(GLenum target, GLenum pname, const GLfloat * params) { tunisGL.tunisColorTableParameterfvSGI(target, pname, params); }
#define glColorTableParameterfvSGI tunisColorTableParameterfvSGI
TUNIS_FORCE_INLINE void  tunisColorTableParameteriv(GLenum target, GLenum pname, const GLint * params) { tunisGL.tunisColorTableParameteriv(target, pname, params); }
#define glColorTableParameteriv tunisColorTableParameteriv
TUNIS_FORCE_INLINE void  tunisColorTableParameterivSGI(GLenum target, GLenum pname, const GLint * params) { tunisGL.tunisColorTableParameterivSGI(target, pname, params); }
#define glColorTableParameterivSGI tunisColorTableParameterivSGI
TUNIS_FORCE_INLINE void  tunisColorTableSGI(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void * table) { tunisGL.tunisColorTableSGI(target, internalformat, width, format, type, table); }
#define glColorTableSGI tunisColorTableSGI
TUNIS_FORCE_INLINE void  tunisCombinerInputNV(GLenum stage, GLenum portion, GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage) { tunisGL.tunisCombinerInputNV(stage, portion, variable, input, mapping, componentUsage); }
#define glCombinerInputNV tunisCombinerInputNV
TUNIS_FORCE_INLINE void  tunisCombinerOutputNV(GLenum stage, GLenum portion, GLenum abOutput, GLenum cdOutput, GLenum sumOutput, GLenum scale, GLenum bias, GLboolean abDotProduct, GLboolean cdDotProduct, GLboolean muxSum) { tunisGL.tunisCombinerOutputNV(stage, portion, abOutput, cdOutput, sumOutput, scale, bias, abDotProduct, cdDotProduct, muxSum); }
#define glCombinerOutputNV tunisCombinerOutputNV
TUNIS_FORCE_INLINE void  tunisCombinerParameterfNV(GLenum pname, GLfloat param) { tunisGL.tunisCombinerParameterfNV(pname, param); }
#define glCombinerParameterfNV tunisCombinerParameterfNV
TUNIS_FORCE_INLINE void  tunisCombinerParameterfvNV(GLenum pname, const GLfloat * params) { tunisGL.tunisCombinerParameterfvNV(pname, params); }
#define glCombinerParameterfvNV tunisCombinerParameterfvNV
TUNIS_FORCE_INLINE void  tunisCombinerParameteriNV(GLenum pname, GLint param) { tunisGL.tunisCombinerParameteriNV(pname, param); }
#define glCombinerParameteriNV tunisCombinerParameteriNV
TUNIS_FORCE_INLINE void  tunisCombinerParameterivNV(GLenum pname, const GLint * params) { tunisGL.tunisCombinerParameterivNV(pname, params); }
#define glCombinerParameterivNV tunisCombinerParameterivNV
TUNIS_FORCE_INLINE void  tunisCombinerStageParameterfvNV(GLenum stage, GLenum pname, const GLfloat * params) { tunisGL.tunisCombinerStageParameterfvNV(stage, pname, params); }
#define glCombinerStageParameterfvNV tunisCombinerStageParameterfvNV
TUNIS_FORCE_INLINE void  tunisCommandListSegmentsNV(GLuint list, GLuint segments) { tunisGL.tunisCommandListSegmentsNV(list, segments); }
#define glCommandListSegmentsNV tunisCommandListSegmentsNV
TUNIS_FORCE_INLINE void  tunisCompileCommandListNV(GLuint list) { tunisGL.tunisCompileCommandListNV(list); }
#define glCompileCommandListNV tunisCompileCommandListNV
TUNIS_FORCE_INLINE void  tunisCompileShader(GLuint shader) { tunisGL.tunisCompileShader(shader); }
#define glCompileShader tunisCompileShader
TUNIS_FORCE_INLINE void  tunisCompileShaderARB(GLhandleARB shaderObj) { tunisGL.tunisCompileShaderARB(shaderObj); }
#define glCompileShaderARB tunisCompileShaderARB
TUNIS_FORCE_INLINE void  tunisCompileShaderIncludeARB(GLuint shader, GLsizei count, const GLchar *const* path, const GLint * length) { tunisGL.tunisCompileShaderIncludeARB(shader, count, path, length); }
#define glCompileShaderIncludeARB tunisCompileShaderIncludeARB
TUNIS_FORCE_INLINE void  tunisCompressedMultiTexImage1DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void * bits) { tunisGL.tunisCompressedMultiTexImage1DEXT(texunit, target, level, internalformat, width, border, imageSize, bits); }
#define glCompressedMultiTexImage1DEXT tunisCompressedMultiTexImage1DEXT
TUNIS_FORCE_INLINE void  tunisCompressedMultiTexImage2DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void * bits) { tunisGL.tunisCompressedMultiTexImage2DEXT(texunit, target, level, internalformat, width, height, border, imageSize, bits); }
#define glCompressedMultiTexImage2DEXT tunisCompressedMultiTexImage2DEXT
TUNIS_FORCE_INLINE void  tunisCompressedMultiTexImage3DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void * bits) { tunisGL.tunisCompressedMultiTexImage3DEXT(texunit, target, level, internalformat, width, height, depth, border, imageSize, bits); }
#define glCompressedMultiTexImage3DEXT tunisCompressedMultiTexImage3DEXT
TUNIS_FORCE_INLINE void  tunisCompressedMultiTexSubImage1DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void * bits) { tunisGL.tunisCompressedMultiTexSubImage1DEXT(texunit, target, level, xoffset, width, format, imageSize, bits); }
#define glCompressedMultiTexSubImage1DEXT tunisCompressedMultiTexSubImage1DEXT
TUNIS_FORCE_INLINE void  tunisCompressedMultiTexSubImage2DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void * bits) { tunisGL.tunisCompressedMultiTexSubImage2DEXT(texunit, target, level, xoffset, yoffset, width, height, format, imageSize, bits); }
#define glCompressedMultiTexSubImage2DEXT tunisCompressedMultiTexSubImage2DEXT
TUNIS_FORCE_INLINE void  tunisCompressedMultiTexSubImage3DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void * bits) { tunisGL.tunisCompressedMultiTexSubImage3DEXT(texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, bits); }
#define glCompressedMultiTexSubImage3DEXT tunisCompressedMultiTexSubImage3DEXT
TUNIS_FORCE_INLINE void  tunisCompressedTexImage1D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void * data) { tunisGL.tunisCompressedTexImage1D(target, level, internalformat, width, border, imageSize, data); }
#define glCompressedTexImage1D tunisCompressedTexImage1D
TUNIS_FORCE_INLINE void  tunisCompressedTexImage1DARB(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void * data) { tunisGL.tunisCompressedTexImage1DARB(target, level, internalformat, width, border, imageSize, data); }
#define glCompressedTexImage1DARB tunisCompressedTexImage1DARB
TUNIS_FORCE_INLINE void  tunisCompressedTexImage2D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void * data) { tunisGL.tunisCompressedTexImage2D(target, level, internalformat, width, height, border, imageSize, data); }
#define glCompressedTexImage2D tunisCompressedTexImage2D
TUNIS_FORCE_INLINE void  tunisCompressedTexImage2DARB(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void * data) { tunisGL.tunisCompressedTexImage2DARB(target, level, internalformat, width, height, border, imageSize, data); }
#define glCompressedTexImage2DARB tunisCompressedTexImage2DARB
TUNIS_FORCE_INLINE void  tunisCompressedTexImage3D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void * data) { tunisGL.tunisCompressedTexImage3D(target, level, internalformat, width, height, depth, border, imageSize, data); }
#define glCompressedTexImage3D tunisCompressedTexImage3D
TUNIS_FORCE_INLINE void  tunisCompressedTexImage3DARB(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void * data) { tunisGL.tunisCompressedTexImage3DARB(target, level, internalformat, width, height, depth, border, imageSize, data); }
#define glCompressedTexImage3DARB tunisCompressedTexImage3DARB
TUNIS_FORCE_INLINE void  tunisCompressedTexImage3DOES(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void * data) { tunisGL.tunisCompressedTexImage3DOES(target, level, internalformat, width, height, depth, border, imageSize, data); }
#define glCompressedTexImage3DOES tunisCompressedTexImage3DOES
TUNIS_FORCE_INLINE void  tunisCompressedTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void * data) { tunisGL.tunisCompressedTexSubImage1D(target, level, xoffset, width, format, imageSize, data); }
#define glCompressedTexSubImage1D tunisCompressedTexSubImage1D
TUNIS_FORCE_INLINE void  tunisCompressedTexSubImage1DARB(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void * data) { tunisGL.tunisCompressedTexSubImage1DARB(target, level, xoffset, width, format, imageSize, data); }
#define glCompressedTexSubImage1DARB tunisCompressedTexSubImage1DARB
TUNIS_FORCE_INLINE void  tunisCompressedTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void * data) { tunisGL.tunisCompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, data); }
#define glCompressedTexSubImage2D tunisCompressedTexSubImage2D
TUNIS_FORCE_INLINE void  tunisCompressedTexSubImage2DARB(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void * data) { tunisGL.tunisCompressedTexSubImage2DARB(target, level, xoffset, yoffset, width, height, format, imageSize, data); }
#define glCompressedTexSubImage2DARB tunisCompressedTexSubImage2DARB
TUNIS_FORCE_INLINE void  tunisCompressedTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void * data) { tunisGL.tunisCompressedTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data); }
#define glCompressedTexSubImage3D tunisCompressedTexSubImage3D
TUNIS_FORCE_INLINE void  tunisCompressedTexSubImage3DARB(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void * data) { tunisGL.tunisCompressedTexSubImage3DARB(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data); }
#define glCompressedTexSubImage3DARB tunisCompressedTexSubImage3DARB
TUNIS_FORCE_INLINE void  tunisCompressedTexSubImage3DOES(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void * data) { tunisGL.tunisCompressedTexSubImage3DOES(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data); }
#define glCompressedTexSubImage3DOES tunisCompressedTexSubImage3DOES
TUNIS_FORCE_INLINE void  tunisCompressedTextureImage1DEXT(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void * bits) { tunisGL.tunisCompressedTextureImage1DEXT(texture, target, level, internalformat, width, border, imageSize, bits); }
#define glCompressedTextureImage1DEXT tunisCompressedTextureImage1DEXT
TUNIS_FORCE_INLINE void  tunisCompressedTextureImage2DEXT(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void * bits) { tunisGL.tunisCompressedTextureImage2DEXT(texture, target, level, internalformat, width, height, border, imageSize, bits); }
#define glCompressedTextureImage2DEXT tunisCompressedTextureImage2DEXT
TUNIS_FORCE_INLINE void  tunisCompressedTextureImage3DEXT(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void * bits) { tunisGL.tunisCompressedTextureImage3DEXT(texture, target, level, internalformat, width, height, depth, border, imageSize, bits); }
#define glCompressedTextureImage3DEXT tunisCompressedTextureImage3DEXT
TUNIS_FORCE_INLINE void  tunisCompressedTextureSubImage1D(GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void * data) { tunisGL.tunisCompressedTextureSubImage1D(texture, level, xoffset, width, format, imageSize, data); }
#define glCompressedTextureSubImage1D tunisCompressedTextureSubImage1D
TUNIS_FORCE_INLINE void  tunisCompressedTextureSubImage1DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void * bits) { tunisGL.tunisCompressedTextureSubImage1DEXT(texture, target, level, xoffset, width, format, imageSize, bits); }
#define glCompressedTextureSubImage1DEXT tunisCompressedTextureSubImage1DEXT
TUNIS_FORCE_INLINE void  tunisCompressedTextureSubImage2D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void * data) { tunisGL.tunisCompressedTextureSubImage2D(texture, level, xoffset, yoffset, width, height, format, imageSize, data); }
#define glCompressedTextureSubImage2D tunisCompressedTextureSubImage2D
TUNIS_FORCE_INLINE void  tunisCompressedTextureSubImage2DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void * bits) { tunisGL.tunisCompressedTextureSubImage2DEXT(texture, target, level, xoffset, yoffset, width, height, format, imageSize, bits); }
#define glCompressedTextureSubImage2DEXT tunisCompressedTextureSubImage2DEXT
TUNIS_FORCE_INLINE void  tunisCompressedTextureSubImage3D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void * data) { tunisGL.tunisCompressedTextureSubImage3D(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data); }
#define glCompressedTextureSubImage3D tunisCompressedTextureSubImage3D
TUNIS_FORCE_INLINE void  tunisCompressedTextureSubImage3DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void * bits) { tunisGL.tunisCompressedTextureSubImage3DEXT(texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, bits); }
#define glCompressedTextureSubImage3DEXT tunisCompressedTextureSubImage3DEXT
TUNIS_FORCE_INLINE void  tunisConservativeRasterParameterfNV(GLenum pname, GLfloat value) { tunisGL.tunisConservativeRasterParameterfNV(pname, value); }
#define glConservativeRasterParameterfNV tunisConservativeRasterParameterfNV
TUNIS_FORCE_INLINE void  tunisConservativeRasterParameteriNV(GLenum pname, GLint param) { tunisGL.tunisConservativeRasterParameteriNV(pname, param); }
#define glConservativeRasterParameteriNV tunisConservativeRasterParameteriNV
TUNIS_FORCE_INLINE void  tunisConvolutionFilter1D(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void * image) { tunisGL.tunisConvolutionFilter1D(target, internalformat, width, format, type, image); }
#define glConvolutionFilter1D tunisConvolutionFilter1D
TUNIS_FORCE_INLINE void  tunisConvolutionFilter1DEXT(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void * image) { tunisGL.tunisConvolutionFilter1DEXT(target, internalformat, width, format, type, image); }
#define glConvolutionFilter1DEXT tunisConvolutionFilter1DEXT
TUNIS_FORCE_INLINE void  tunisConvolutionFilter2D(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * image) { tunisGL.tunisConvolutionFilter2D(target, internalformat, width, height, format, type, image); }
#define glConvolutionFilter2D tunisConvolutionFilter2D
TUNIS_FORCE_INLINE void  tunisConvolutionFilter2DEXT(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * image) { tunisGL.tunisConvolutionFilter2DEXT(target, internalformat, width, height, format, type, image); }
#define glConvolutionFilter2DEXT tunisConvolutionFilter2DEXT
TUNIS_FORCE_INLINE void  tunisConvolutionParameterf(GLenum target, GLenum pname, GLfloat params) { tunisGL.tunisConvolutionParameterf(target, pname, params); }
#define glConvolutionParameterf tunisConvolutionParameterf
TUNIS_FORCE_INLINE void  tunisConvolutionParameterfEXT(GLenum target, GLenum pname, GLfloat params) { tunisGL.tunisConvolutionParameterfEXT(target, pname, params); }
#define glConvolutionParameterfEXT tunisConvolutionParameterfEXT
TUNIS_FORCE_INLINE void  tunisConvolutionParameterfv(GLenum target, GLenum pname, const GLfloat * params) { tunisGL.tunisConvolutionParameterfv(target, pname, params); }
#define glConvolutionParameterfv tunisConvolutionParameterfv
TUNIS_FORCE_INLINE void  tunisConvolutionParameterfvEXT(GLenum target, GLenum pname, const GLfloat * params) { tunisGL.tunisConvolutionParameterfvEXT(target, pname, params); }
#define glConvolutionParameterfvEXT tunisConvolutionParameterfvEXT
TUNIS_FORCE_INLINE void  tunisConvolutionParameteri(GLenum target, GLenum pname, GLint params) { tunisGL.tunisConvolutionParameteri(target, pname, params); }
#define glConvolutionParameteri tunisConvolutionParameteri
TUNIS_FORCE_INLINE void  tunisConvolutionParameteriEXT(GLenum target, GLenum pname, GLint params) { tunisGL.tunisConvolutionParameteriEXT(target, pname, params); }
#define glConvolutionParameteriEXT tunisConvolutionParameteriEXT
TUNIS_FORCE_INLINE void  tunisConvolutionParameteriv(GLenum target, GLenum pname, const GLint * params) { tunisGL.tunisConvolutionParameteriv(target, pname, params); }
#define glConvolutionParameteriv tunisConvolutionParameteriv
TUNIS_FORCE_INLINE void  tunisConvolutionParameterivEXT(GLenum target, GLenum pname, const GLint * params) { tunisGL.tunisConvolutionParameterivEXT(target, pname, params); }
#define glConvolutionParameterivEXT tunisConvolutionParameterivEXT
TUNIS_FORCE_INLINE void  tunisConvolutionParameterxOES(GLenum target, GLenum pname, GLfixed param) { tunisGL.tunisConvolutionParameterxOES(target, pname, param); }
#define glConvolutionParameterxOES tunisConvolutionParameterxOES
TUNIS_FORCE_INLINE void  tunisConvolutionParameterxvOES(GLenum target, GLenum pname, const GLfixed * params) { tunisGL.tunisConvolutionParameterxvOES(target, pname, params); }
#define glConvolutionParameterxvOES tunisConvolutionParameterxvOES
TUNIS_FORCE_INLINE void  tunisCopyBufferSubData(GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size) { tunisGL.tunisCopyBufferSubData(readTarget, writeTarget, readOffset, writeOffset, size); }
#define glCopyBufferSubData tunisCopyBufferSubData
TUNIS_FORCE_INLINE void  tunisCopyBufferSubDataNV(GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size) { tunisGL.tunisCopyBufferSubDataNV(readTarget, writeTarget, readOffset, writeOffset, size); }
#define glCopyBufferSubDataNV tunisCopyBufferSubDataNV
TUNIS_FORCE_INLINE void  tunisCopyColorSubTable(GLenum target, GLsizei start, GLint x, GLint y, GLsizei width) { tunisGL.tunisCopyColorSubTable(target, start, x, y, width); }
#define glCopyColorSubTable tunisCopyColorSubTable
TUNIS_FORCE_INLINE void  tunisCopyColorSubTableEXT(GLenum target, GLsizei start, GLint x, GLint y, GLsizei width) { tunisGL.tunisCopyColorSubTableEXT(target, start, x, y, width); }
#define glCopyColorSubTableEXT tunisCopyColorSubTableEXT
TUNIS_FORCE_INLINE void  tunisCopyColorTable(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width) { tunisGL.tunisCopyColorTable(target, internalformat, x, y, width); }
#define glCopyColorTable tunisCopyColorTable
TUNIS_FORCE_INLINE void  tunisCopyColorTableSGI(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width) { tunisGL.tunisCopyColorTableSGI(target, internalformat, x, y, width); }
#define glCopyColorTableSGI tunisCopyColorTableSGI
TUNIS_FORCE_INLINE void  tunisCopyConvolutionFilter1D(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width) { tunisGL.tunisCopyConvolutionFilter1D(target, internalformat, x, y, width); }
#define glCopyConvolutionFilter1D tunisCopyConvolutionFilter1D
TUNIS_FORCE_INLINE void  tunisCopyConvolutionFilter1DEXT(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width) { tunisGL.tunisCopyConvolutionFilter1DEXT(target, internalformat, x, y, width); }
#define glCopyConvolutionFilter1DEXT tunisCopyConvolutionFilter1DEXT
TUNIS_FORCE_INLINE void  tunisCopyConvolutionFilter2D(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height) { tunisGL.tunisCopyConvolutionFilter2D(target, internalformat, x, y, width, height); }
#define glCopyConvolutionFilter2D tunisCopyConvolutionFilter2D
TUNIS_FORCE_INLINE void  tunisCopyConvolutionFilter2DEXT(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height) { tunisGL.tunisCopyConvolutionFilter2DEXT(target, internalformat, x, y, width, height); }
#define glCopyConvolutionFilter2DEXT tunisCopyConvolutionFilter2DEXT
TUNIS_FORCE_INLINE void  tunisCopyImageSubData(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth) { tunisGL.tunisCopyImageSubData(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth); }
#define glCopyImageSubData tunisCopyImageSubData
TUNIS_FORCE_INLINE void  tunisCopyImageSubDataEXT(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth) { tunisGL.tunisCopyImageSubDataEXT(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth); }
#define glCopyImageSubDataEXT tunisCopyImageSubDataEXT
TUNIS_FORCE_INLINE void  tunisCopyImageSubDataNV(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth) { tunisGL.tunisCopyImageSubDataNV(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, width, height, depth); }
#define glCopyImageSubDataNV tunisCopyImageSubDataNV
TUNIS_FORCE_INLINE void  tunisCopyImageSubDataOES(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth) { tunisGL.tunisCopyImageSubDataOES(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth); }
#define glCopyImageSubDataOES tunisCopyImageSubDataOES
TUNIS_FORCE_INLINE void  tunisCopyMultiTexImage1DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border) { tunisGL.tunisCopyMultiTexImage1DEXT(texunit, target, level, internalformat, x, y, width, border); }
#define glCopyMultiTexImage1DEXT tunisCopyMultiTexImage1DEXT
TUNIS_FORCE_INLINE void  tunisCopyMultiTexImage2DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border) { tunisGL.tunisCopyMultiTexImage2DEXT(texunit, target, level, internalformat, x, y, width, height, border); }
#define glCopyMultiTexImage2DEXT tunisCopyMultiTexImage2DEXT
TUNIS_FORCE_INLINE void  tunisCopyMultiTexSubImage1DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width) { tunisGL.tunisCopyMultiTexSubImage1DEXT(texunit, target, level, xoffset, x, y, width); }
#define glCopyMultiTexSubImage1DEXT tunisCopyMultiTexSubImage1DEXT
TUNIS_FORCE_INLINE void  tunisCopyMultiTexSubImage2DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height) { tunisGL.tunisCopyMultiTexSubImage2DEXT(texunit, target, level, xoffset, yoffset, x, y, width, height); }
#define glCopyMultiTexSubImage2DEXT tunisCopyMultiTexSubImage2DEXT
TUNIS_FORCE_INLINE void  tunisCopyMultiTexSubImage3DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height) { tunisGL.tunisCopyMultiTexSubImage3DEXT(texunit, target, level, xoffset, yoffset, zoffset, x, y, width, height); }
#define glCopyMultiTexSubImage3DEXT tunisCopyMultiTexSubImage3DEXT
TUNIS_FORCE_INLINE void  tunisCopyNamedBufferSubData(GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size) { tunisGL.tunisCopyNamedBufferSubData(readBuffer, writeBuffer, readOffset, writeOffset, size); }
#define glCopyNamedBufferSubData tunisCopyNamedBufferSubData
TUNIS_FORCE_INLINE void  tunisCopyPathNV(GLuint resultPath, GLuint srcPath) { tunisGL.tunisCopyPathNV(resultPath, srcPath); }
#define glCopyPathNV tunisCopyPathNV
TUNIS_FORCE_INLINE void  tunisCopyPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum type) { tunisGL.tunisCopyPixels(x, y, width, height, type); }
#define glCopyPixels tunisCopyPixels
TUNIS_FORCE_INLINE void  tunisCopyTexImage1D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border) { tunisGL.tunisCopyTexImage1D(target, level, internalformat, x, y, width, border); }
#define glCopyTexImage1D tunisCopyTexImage1D
TUNIS_FORCE_INLINE void  tunisCopyTexImage1DEXT(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border) { tunisGL.tunisCopyTexImage1DEXT(target, level, internalformat, x, y, width, border); }
#define glCopyTexImage1DEXT tunisCopyTexImage1DEXT
TUNIS_FORCE_INLINE void  tunisCopyTexImage2D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border) { tunisGL.tunisCopyTexImage2D(target, level, internalformat, x, y, width, height, border); }
#define glCopyTexImage2D tunisCopyTexImage2D
TUNIS_FORCE_INLINE void  tunisCopyTexImage2DEXT(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border) { tunisGL.tunisCopyTexImage2DEXT(target, level, internalformat, x, y, width, height, border); }
#define glCopyTexImage2DEXT tunisCopyTexImage2DEXT
TUNIS_FORCE_INLINE void  tunisCopyTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width) { tunisGL.tunisCopyTexSubImage1D(target, level, xoffset, x, y, width); }
#define glCopyTexSubImage1D tunisCopyTexSubImage1D
TUNIS_FORCE_INLINE void  tunisCopyTexSubImage1DEXT(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width) { tunisGL.tunisCopyTexSubImage1DEXT(target, level, xoffset, x, y, width); }
#define glCopyTexSubImage1DEXT tunisCopyTexSubImage1DEXT
TUNIS_FORCE_INLINE void  tunisCopyTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height) { tunisGL.tunisCopyTexSubImage2D(target, level, xoffset, yoffset, x, y, width, height); }
#define glCopyTexSubImage2D tunisCopyTexSubImage2D
TUNIS_FORCE_INLINE void  tunisCopyTexSubImage2DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height) { tunisGL.tunisCopyTexSubImage2DEXT(target, level, xoffset, yoffset, x, y, width, height); }
#define glCopyTexSubImage2DEXT tunisCopyTexSubImage2DEXT
TUNIS_FORCE_INLINE void  tunisCopyTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height) { tunisGL.tunisCopyTexSubImage3D(target, level, xoffset, yoffset, zoffset, x, y, width, height); }
#define glCopyTexSubImage3D tunisCopyTexSubImage3D
TUNIS_FORCE_INLINE void  tunisCopyTexSubImage3DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height) { tunisGL.tunisCopyTexSubImage3DEXT(target, level, xoffset, yoffset, zoffset, x, y, width, height); }
#define glCopyTexSubImage3DEXT tunisCopyTexSubImage3DEXT
TUNIS_FORCE_INLINE void  tunisCopyTexSubImage3DOES(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height) { tunisGL.tunisCopyTexSubImage3DOES(target, level, xoffset, yoffset, zoffset, x, y, width, height); }
#define glCopyTexSubImage3DOES tunisCopyTexSubImage3DOES
TUNIS_FORCE_INLINE void  tunisCopyTextureImage1DEXT(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border) { tunisGL.tunisCopyTextureImage1DEXT(texture, target, level, internalformat, x, y, width, border); }
#define glCopyTextureImage1DEXT tunisCopyTextureImage1DEXT
TUNIS_FORCE_INLINE void  tunisCopyTextureImage2DEXT(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border) { tunisGL.tunisCopyTextureImage2DEXT(texture, target, level, internalformat, x, y, width, height, border); }
#define glCopyTextureImage2DEXT tunisCopyTextureImage2DEXT
TUNIS_FORCE_INLINE void  tunisCopyTextureLevelsAPPLE(GLuint destinationTexture, GLuint sourceTexture, GLint sourceBaseLevel, GLsizei sourceLevelCount) { tunisGL.tunisCopyTextureLevelsAPPLE(destinationTexture, sourceTexture, sourceBaseLevel, sourceLevelCount); }
#define glCopyTextureLevelsAPPLE tunisCopyTextureLevelsAPPLE
TUNIS_FORCE_INLINE void  tunisCopyTextureSubImage1D(GLuint texture, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width) { tunisGL.tunisCopyTextureSubImage1D(texture, level, xoffset, x, y, width); }
#define glCopyTextureSubImage1D tunisCopyTextureSubImage1D
TUNIS_FORCE_INLINE void  tunisCopyTextureSubImage1DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width) { tunisGL.tunisCopyTextureSubImage1DEXT(texture, target, level, xoffset, x, y, width); }
#define glCopyTextureSubImage1DEXT tunisCopyTextureSubImage1DEXT
TUNIS_FORCE_INLINE void  tunisCopyTextureSubImage2D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height) { tunisGL.tunisCopyTextureSubImage2D(texture, level, xoffset, yoffset, x, y, width, height); }
#define glCopyTextureSubImage2D tunisCopyTextureSubImage2D
TUNIS_FORCE_INLINE void  tunisCopyTextureSubImage2DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height) { tunisGL.tunisCopyTextureSubImage2DEXT(texture, target, level, xoffset, yoffset, x, y, width, height); }
#define glCopyTextureSubImage2DEXT tunisCopyTextureSubImage2DEXT
TUNIS_FORCE_INLINE void  tunisCopyTextureSubImage3D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height) { tunisGL.tunisCopyTextureSubImage3D(texture, level, xoffset, yoffset, zoffset, x, y, width, height); }
#define glCopyTextureSubImage3D tunisCopyTextureSubImage3D
TUNIS_FORCE_INLINE void  tunisCopyTextureSubImage3DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height) { tunisGL.tunisCopyTextureSubImage3DEXT(texture, target, level, xoffset, yoffset, zoffset, x, y, width, height); }
#define glCopyTextureSubImage3DEXT tunisCopyTextureSubImage3DEXT
TUNIS_FORCE_INLINE void  tunisCoverFillPathInstancedNV(GLsizei numPaths, GLenum pathNameType, const void * paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat * transformValues) { tunisGL.tunisCoverFillPathInstancedNV(numPaths, pathNameType, paths, pathBase, coverMode, transformType, transformValues); }
#define glCoverFillPathInstancedNV tunisCoverFillPathInstancedNV
TUNIS_FORCE_INLINE void  tunisCoverFillPathNV(GLuint path, GLenum coverMode) { tunisGL.tunisCoverFillPathNV(path, coverMode); }
#define glCoverFillPathNV tunisCoverFillPathNV
TUNIS_FORCE_INLINE void  tunisCoverStrokePathInstancedNV(GLsizei numPaths, GLenum pathNameType, const void * paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat * transformValues) { tunisGL.tunisCoverStrokePathInstancedNV(numPaths, pathNameType, paths, pathBase, coverMode, transformType, transformValues); }
#define glCoverStrokePathInstancedNV tunisCoverStrokePathInstancedNV
TUNIS_FORCE_INLINE void  tunisCoverStrokePathNV(GLuint path, GLenum coverMode) { tunisGL.tunisCoverStrokePathNV(path, coverMode); }
#define glCoverStrokePathNV tunisCoverStrokePathNV
TUNIS_FORCE_INLINE void  tunisCoverageMaskNV(GLboolean mask) { tunisGL.tunisCoverageMaskNV(mask); }
#define glCoverageMaskNV tunisCoverageMaskNV
TUNIS_FORCE_INLINE void  tunisCoverageModulationNV(GLenum components) { tunisGL.tunisCoverageModulationNV(components); }
#define glCoverageModulationNV tunisCoverageModulationNV
TUNIS_FORCE_INLINE void  tunisCoverageModulationTableNV(GLsizei n, const GLfloat * v) { tunisGL.tunisCoverageModulationTableNV(n, v); }
#define glCoverageModulationTableNV tunisCoverageModulationTableNV
TUNIS_FORCE_INLINE void  tunisCoverageOperationNV(GLenum operation) { tunisGL.tunisCoverageOperationNV(operation); }
#define glCoverageOperationNV tunisCoverageOperationNV
TUNIS_FORCE_INLINE void  tunisCreateBuffers(GLsizei n, GLuint * buffers) { tunisGL.tunisCreateBuffers(n, buffers); }
#define glCreateBuffers tunisCreateBuffers
TUNIS_FORCE_INLINE void  tunisCreateCommandListsNV(GLsizei n, GLuint * lists) { tunisGL.tunisCreateCommandListsNV(n, lists); }
#define glCreateCommandListsNV tunisCreateCommandListsNV
TUNIS_FORCE_INLINE void  tunisCreateFramebuffers(GLsizei n, GLuint * framebuffers) { tunisGL.tunisCreateFramebuffers(n, framebuffers); }
#define glCreateFramebuffers tunisCreateFramebuffers
TUNIS_FORCE_INLINE void  tunisCreateMemoryObjectsEXT(GLsizei n, GLuint * memoryObjects) { tunisGL.tunisCreateMemoryObjectsEXT(n, memoryObjects); }
#define glCreateMemoryObjectsEXT tunisCreateMemoryObjectsEXT
TUNIS_FORCE_INLINE void  tunisCreatePerfQueryINTEL(GLuint queryId, GLuint * queryHandle) { tunisGL.tunisCreatePerfQueryINTEL(queryId, queryHandle); }
#define glCreatePerfQueryINTEL tunisCreatePerfQueryINTEL
TUNIS_FORCE_INLINE GLuint tunisCreateProgram(void) { return tunisGL.tunisCreateProgram(); }
#define glCreateProgram tunisCreateProgram
TUNIS_FORCE_INLINE GLhandleARB tunisCreateProgramObjectARB(void) { return tunisGL.tunisCreateProgramObjectARB(); }
#define glCreateProgramObjectARB tunisCreateProgramObjectARB
TUNIS_FORCE_INLINE void  tunisCreateProgramPipelines(GLsizei n, GLuint * pipelines) { tunisGL.tunisCreateProgramPipelines(n, pipelines); }
#define glCreateProgramPipelines tunisCreateProgramPipelines
TUNIS_FORCE_INLINE void  tunisCreateQueries(GLenum target, GLsizei n, GLuint * ids) { tunisGL.tunisCreateQueries(target, n, ids); }
#define glCreateQueries tunisCreateQueries
TUNIS_FORCE_INLINE void  tunisCreateRenderbuffers(GLsizei n, GLuint * renderbuffers) { tunisGL.tunisCreateRenderbuffers(n, renderbuffers); }
#define glCreateRenderbuffers tunisCreateRenderbuffers
TUNIS_FORCE_INLINE void  tunisCreateSamplers(GLsizei n, GLuint * samplers) { tunisGL.tunisCreateSamplers(n, samplers); }
#define glCreateSamplers tunisCreateSamplers
TUNIS_FORCE_INLINE GLuint tunisCreateShader(GLenum type) { return tunisGL.tunisCreateShader(type); }
#define glCreateShader tunisCreateShader
TUNIS_FORCE_INLINE GLhandleARB tunisCreateShaderObjectARB(GLenum shaderType) { return tunisGL.tunisCreateShaderObjectARB(shaderType); }
#define glCreateShaderObjectARB tunisCreateShaderObjectARB
TUNIS_FORCE_INLINE GLuint tunisCreateShaderProgramEXT(GLenum type, const GLchar * string) { return tunisGL.tunisCreateShaderProgramEXT(type, string); }
#define glCreateShaderProgramEXT tunisCreateShaderProgramEXT
TUNIS_FORCE_INLINE GLuint tunisCreateShaderProgramv(GLenum type, GLsizei count, const GLchar *const* strings) { return tunisGL.tunisCreateShaderProgramv(type, count, strings); }
#define glCreateShaderProgramv tunisCreateShaderProgramv
TUNIS_FORCE_INLINE GLuint tunisCreateShaderProgramvEXT(GLenum type, GLsizei count, const GLchar ** strings) { return tunisGL.tunisCreateShaderProgramvEXT(type, count, strings); }
#define glCreateShaderProgramvEXT tunisCreateShaderProgramvEXT
TUNIS_FORCE_INLINE void  tunisCreateStatesNV(GLsizei n, GLuint * states) { tunisGL.tunisCreateStatesNV(n, states); }
#define glCreateStatesNV tunisCreateStatesNV
TUNIS_FORCE_INLINE GLsync tunisCreateSyncFromCLeventARB(struct _cl_context * context, struct _cl_event * event, GLbitfield flags) { return tunisGL.tunisCreateSyncFromCLeventARB(context, event, flags); }
#define glCreateSyncFromCLeventARB tunisCreateSyncFromCLeventARB
TUNIS_FORCE_INLINE void  tunisCreateTextures(GLenum target, GLsizei n, GLuint * textures) { tunisGL.tunisCreateTextures(target, n, textures); }
#define glCreateTextures tunisCreateTextures
TUNIS_FORCE_INLINE void  tunisCreateTransformFeedbacks(GLsizei n, GLuint * ids) { tunisGL.tunisCreateTransformFeedbacks(n, ids); }
#define glCreateTransformFeedbacks tunisCreateTransformFeedbacks
TUNIS_FORCE_INLINE void  tunisCreateVertexArrays(GLsizei n, GLuint * arrays) { tunisGL.tunisCreateVertexArrays(n, arrays); }
#define glCreateVertexArrays tunisCreateVertexArrays
TUNIS_FORCE_INLINE void  tunisCullFace(GLenum mode) { tunisGL.tunisCullFace(mode); }
#define glCullFace tunisCullFace
TUNIS_FORCE_INLINE void  tunisCullParameterdvEXT(GLenum pname, GLdouble * params) { tunisGL.tunisCullParameterdvEXT(pname, params); }
#define glCullParameterdvEXT tunisCullParameterdvEXT
TUNIS_FORCE_INLINE void  tunisCullParameterfvEXT(GLenum pname, GLfloat * params) { tunisGL.tunisCullParameterfvEXT(pname, params); }
#define glCullParameterfvEXT tunisCullParameterfvEXT
TUNIS_FORCE_INLINE void  tunisCurrentPaletteMatrixARB(GLint index) { tunisGL.tunisCurrentPaletteMatrixARB(index); }
#define glCurrentPaletteMatrixARB tunisCurrentPaletteMatrixARB
TUNIS_FORCE_INLINE void  tunisCurrentPaletteMatrixOES(GLuint matrixpaletteindex) { tunisGL.tunisCurrentPaletteMatrixOES(matrixpaletteindex); }
#define glCurrentPaletteMatrixOES tunisCurrentPaletteMatrixOES
TUNIS_FORCE_INLINE void  tunisDebugMessageCallback(GLDEBUGPROC callback, const void * userParam) { tunisGL.tunisDebugMessageCallback(callback, userParam); }
#define glDebugMessageCallback tunisDebugMessageCallback
TUNIS_FORCE_INLINE void  tunisDebugMessageCallbackAMD(GLDEBUGPROCAMD callback, void * userParam) { tunisGL.tunisDebugMessageCallbackAMD(callback, userParam); }
#define glDebugMessageCallbackAMD tunisDebugMessageCallbackAMD
TUNIS_FORCE_INLINE void  tunisDebugMessageCallbackARB(GLDEBUGPROCARB callback, const void * userParam) { tunisGL.tunisDebugMessageCallbackARB(callback, userParam); }
#define glDebugMessageCallbackARB tunisDebugMessageCallbackARB
TUNIS_FORCE_INLINE void  tunisDebugMessageCallbackKHR(GLDEBUGPROCKHR callback, const void * userParam) { tunisGL.tunisDebugMessageCallbackKHR(callback, userParam); }
#define glDebugMessageCallbackKHR tunisDebugMessageCallbackKHR
TUNIS_FORCE_INLINE void  tunisDebugMessageControl(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint * ids, GLboolean enabled) { tunisGL.tunisDebugMessageControl(source, type, severity, count, ids, enabled); }
#define glDebugMessageControl tunisDebugMessageControl
TUNIS_FORCE_INLINE void  tunisDebugMessageControlARB(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint * ids, GLboolean enabled) { tunisGL.tunisDebugMessageControlARB(source, type, severity, count, ids, enabled); }
#define glDebugMessageControlARB tunisDebugMessageControlARB
TUNIS_FORCE_INLINE void  tunisDebugMessageControlKHR(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint * ids, GLboolean enabled) { tunisGL.tunisDebugMessageControlKHR(source, type, severity, count, ids, enabled); }
#define glDebugMessageControlKHR tunisDebugMessageControlKHR
TUNIS_FORCE_INLINE void  tunisDebugMessageEnableAMD(GLenum category, GLenum severity, GLsizei count, const GLuint * ids, GLboolean enabled) { tunisGL.tunisDebugMessageEnableAMD(category, severity, count, ids, enabled); }
#define glDebugMessageEnableAMD tunisDebugMessageEnableAMD
TUNIS_FORCE_INLINE void  tunisDebugMessageInsert(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar * buf) { tunisGL.tunisDebugMessageInsert(source, type, id, severity, length, buf); }
#define glDebugMessageInsert tunisDebugMessageInsert
TUNIS_FORCE_INLINE void  tunisDebugMessageInsertAMD(GLenum category, GLenum severity, GLuint id, GLsizei length, const GLchar * buf) { tunisGL.tunisDebugMessageInsertAMD(category, severity, id, length, buf); }
#define glDebugMessageInsertAMD tunisDebugMessageInsertAMD
TUNIS_FORCE_INLINE void  tunisDebugMessageInsertARB(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar * buf) { tunisGL.tunisDebugMessageInsertARB(source, type, id, severity, length, buf); }
#define glDebugMessageInsertARB tunisDebugMessageInsertARB
TUNIS_FORCE_INLINE void  tunisDebugMessageInsertKHR(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar * buf) { tunisGL.tunisDebugMessageInsertKHR(source, type, id, severity, length, buf); }
#define glDebugMessageInsertKHR tunisDebugMessageInsertKHR
TUNIS_FORCE_INLINE void  tunisDeformSGIX(GLbitfield mask) { tunisGL.tunisDeformSGIX(mask); }
#define glDeformSGIX tunisDeformSGIX
TUNIS_FORCE_INLINE void  tunisDeformationMap3dSGIX(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, GLdouble w1, GLdouble w2, GLint wstride, GLint worder, const GLdouble * points) { tunisGL.tunisDeformationMap3dSGIX(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points); }
#define glDeformationMap3dSGIX tunisDeformationMap3dSGIX
TUNIS_FORCE_INLINE void  tunisDeformationMap3fSGIX(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, GLfloat w1, GLfloat w2, GLint wstride, GLint worder, const GLfloat * points) { tunisGL.tunisDeformationMap3fSGIX(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points); }
#define glDeformationMap3fSGIX tunisDeformationMap3fSGIX
TUNIS_FORCE_INLINE void  tunisDeleteAsyncMarkersSGIX(GLuint marker, GLsizei range) { tunisGL.tunisDeleteAsyncMarkersSGIX(marker, range); }
#define glDeleteAsyncMarkersSGIX tunisDeleteAsyncMarkersSGIX
TUNIS_FORCE_INLINE void  tunisDeleteBufferRegion(GLenum region) { tunisGL.tunisDeleteBufferRegion(region); }
#define glDeleteBufferRegion tunisDeleteBufferRegion
TUNIS_FORCE_INLINE void  tunisDeleteBuffers(GLsizei n, const GLuint * buffers) { tunisGL.tunisDeleteBuffers(n, buffers); }
#define glDeleteBuffers tunisDeleteBuffers
TUNIS_FORCE_INLINE void  tunisDeleteBuffersARB(GLsizei n, const GLuint * buffers) { tunisGL.tunisDeleteBuffersARB(n, buffers); }
#define glDeleteBuffersARB tunisDeleteBuffersARB
TUNIS_FORCE_INLINE void  tunisDeleteCommandListsNV(GLsizei n, const GLuint * lists) { tunisGL.tunisDeleteCommandListsNV(n, lists); }
#define glDeleteCommandListsNV tunisDeleteCommandListsNV
TUNIS_FORCE_INLINE void  tunisDeleteFencesAPPLE(GLsizei n, const GLuint * fences) { tunisGL.tunisDeleteFencesAPPLE(n, fences); }
#define glDeleteFencesAPPLE tunisDeleteFencesAPPLE
TUNIS_FORCE_INLINE void  tunisDeleteFencesNV(GLsizei n, const GLuint * fences) { tunisGL.tunisDeleteFencesNV(n, fences); }
#define glDeleteFencesNV tunisDeleteFencesNV
TUNIS_FORCE_INLINE void  tunisDeleteFragmentShaderATI(GLuint id) { tunisGL.tunisDeleteFragmentShaderATI(id); }
#define glDeleteFragmentShaderATI tunisDeleteFragmentShaderATI
TUNIS_FORCE_INLINE void  tunisDeleteFramebuffers(GLsizei n, const GLuint * framebuffers) { tunisGL.tunisDeleteFramebuffers(n, framebuffers); }
#define glDeleteFramebuffers tunisDeleteFramebuffers
TUNIS_FORCE_INLINE void  tunisDeleteFramebuffersEXT(GLsizei n, const GLuint * framebuffers) { tunisGL.tunisDeleteFramebuffersEXT(n, framebuffers); }
#define glDeleteFramebuffersEXT tunisDeleteFramebuffersEXT
TUNIS_FORCE_INLINE void  tunisDeleteFramebuffersOES(GLsizei n, const GLuint * framebuffers) { tunisGL.tunisDeleteFramebuffersOES(n, framebuffers); }
#define glDeleteFramebuffersOES tunisDeleteFramebuffersOES
TUNIS_FORCE_INLINE void  tunisDeleteLists(GLuint list, GLsizei range) { tunisGL.tunisDeleteLists(list, range); }
#define glDeleteLists tunisDeleteLists
TUNIS_FORCE_INLINE void  tunisDeleteMemoryObjectsEXT(GLsizei n, const GLuint * memoryObjects) { tunisGL.tunisDeleteMemoryObjectsEXT(n, memoryObjects); }
#define glDeleteMemoryObjectsEXT tunisDeleteMemoryObjectsEXT
TUNIS_FORCE_INLINE void  tunisDeleteNamedStringARB(GLint namelen, const GLchar * name) { tunisGL.tunisDeleteNamedStringARB(namelen, name); }
#define glDeleteNamedStringARB tunisDeleteNamedStringARB
TUNIS_FORCE_INLINE void  tunisDeleteNamesAMD(GLenum identifier, GLuint num, const GLuint * names) { tunisGL.tunisDeleteNamesAMD(identifier, num, names); }
#define glDeleteNamesAMD tunisDeleteNamesAMD
TUNIS_FORCE_INLINE void  tunisDeleteObjectARB(GLhandleARB obj) { tunisGL.tunisDeleteObjectARB(obj); }
#define glDeleteObjectARB tunisDeleteObjectARB
TUNIS_FORCE_INLINE void  tunisDeleteOcclusionQueriesNV(GLsizei n, const GLuint * ids) { tunisGL.tunisDeleteOcclusionQueriesNV(n, ids); }
#define glDeleteOcclusionQueriesNV tunisDeleteOcclusionQueriesNV
TUNIS_FORCE_INLINE void  tunisDeletePathsNV(GLuint path, GLsizei range) { tunisGL.tunisDeletePathsNV(path, range); }
#define glDeletePathsNV tunisDeletePathsNV
TUNIS_FORCE_INLINE void  tunisDeletePerfMonitorsAMD(GLsizei n, GLuint * monitors) { tunisGL.tunisDeletePerfMonitorsAMD(n, monitors); }
#define glDeletePerfMonitorsAMD tunisDeletePerfMonitorsAMD
TUNIS_FORCE_INLINE void  tunisDeletePerfQueryINTEL(GLuint queryHandle) { tunisGL.tunisDeletePerfQueryINTEL(queryHandle); }
#define glDeletePerfQueryINTEL tunisDeletePerfQueryINTEL
TUNIS_FORCE_INLINE void  tunisDeleteProgram(GLuint program) { tunisGL.tunisDeleteProgram(program); }
#define glDeleteProgram tunisDeleteProgram
TUNIS_FORCE_INLINE void  tunisDeleteProgramPipelines(GLsizei n, const GLuint * pipelines) { tunisGL.tunisDeleteProgramPipelines(n, pipelines); }
#define glDeleteProgramPipelines tunisDeleteProgramPipelines
TUNIS_FORCE_INLINE void  tunisDeleteProgramPipelinesEXT(GLsizei n, const GLuint * pipelines) { tunisGL.tunisDeleteProgramPipelinesEXT(n, pipelines); }
#define glDeleteProgramPipelinesEXT tunisDeleteProgramPipelinesEXT
TUNIS_FORCE_INLINE void  tunisDeleteProgramsARB(GLsizei n, const GLuint * programs) { tunisGL.tunisDeleteProgramsARB(n, programs); }
#define glDeleteProgramsARB tunisDeleteProgramsARB
TUNIS_FORCE_INLINE void  tunisDeleteProgramsNV(GLsizei n, const GLuint * programs) { tunisGL.tunisDeleteProgramsNV(n, programs); }
#define glDeleteProgramsNV tunisDeleteProgramsNV
TUNIS_FORCE_INLINE void  tunisDeleteQueries(GLsizei n, const GLuint * ids) { tunisGL.tunisDeleteQueries(n, ids); }
#define glDeleteQueries tunisDeleteQueries
TUNIS_FORCE_INLINE void  tunisDeleteQueriesARB(GLsizei n, const GLuint * ids) { tunisGL.tunisDeleteQueriesARB(n, ids); }
#define glDeleteQueriesARB tunisDeleteQueriesARB
TUNIS_FORCE_INLINE void  tunisDeleteQueriesEXT(GLsizei n, const GLuint * ids) { tunisGL.tunisDeleteQueriesEXT(n, ids); }
#define glDeleteQueriesEXT tunisDeleteQueriesEXT
TUNIS_FORCE_INLINE void  tunisDeleteQueryResourceTagNV(GLsizei n, const GLint * tagIds) { tunisGL.tunisDeleteQueryResourceTagNV(n, tagIds); }
#define glDeleteQueryResourceTagNV tunisDeleteQueryResourceTagNV
TUNIS_FORCE_INLINE void  tunisDeleteRenderbuffers(GLsizei n, const GLuint * renderbuffers) { tunisGL.tunisDeleteRenderbuffers(n, renderbuffers); }
#define glDeleteRenderbuffers tunisDeleteRenderbuffers
TUNIS_FORCE_INLINE void  tunisDeleteRenderbuffersEXT(GLsizei n, const GLuint * renderbuffers) { tunisGL.tunisDeleteRenderbuffersEXT(n, renderbuffers); }
#define glDeleteRenderbuffersEXT tunisDeleteRenderbuffersEXT
TUNIS_FORCE_INLINE void  tunisDeleteRenderbuffersOES(GLsizei n, const GLuint * renderbuffers) { tunisGL.tunisDeleteRenderbuffersOES(n, renderbuffers); }
#define glDeleteRenderbuffersOES tunisDeleteRenderbuffersOES
TUNIS_FORCE_INLINE void  tunisDeleteSamplers(GLsizei count, const GLuint * samplers) { tunisGL.tunisDeleteSamplers(count, samplers); }
#define glDeleteSamplers tunisDeleteSamplers
TUNIS_FORCE_INLINE void  tunisDeleteSemaphoresEXT(GLsizei n, const GLuint * semaphores) { tunisGL.tunisDeleteSemaphoresEXT(n, semaphores); }
#define glDeleteSemaphoresEXT tunisDeleteSemaphoresEXT
TUNIS_FORCE_INLINE void  tunisDeleteShader(GLuint shader) { tunisGL.tunisDeleteShader(shader); }
#define glDeleteShader tunisDeleteShader
TUNIS_FORCE_INLINE void  tunisDeleteStatesNV(GLsizei n, const GLuint * states) { tunisGL.tunisDeleteStatesNV(n, states); }
#define glDeleteStatesNV tunisDeleteStatesNV
TUNIS_FORCE_INLINE void  tunisDeleteSync(GLsync sync) { tunisGL.tunisDeleteSync(sync); }
#define glDeleteSync tunisDeleteSync
TUNIS_FORCE_INLINE void  tunisDeleteSyncAPPLE(GLsync sync) { tunisGL.tunisDeleteSyncAPPLE(sync); }
#define glDeleteSyncAPPLE tunisDeleteSyncAPPLE
TUNIS_FORCE_INLINE void  tunisDeleteTextures(GLsizei n, const GLuint * textures) { tunisGL.tunisDeleteTextures(n, textures); }
#define glDeleteTextures tunisDeleteTextures
TUNIS_FORCE_INLINE void  tunisDeleteTexturesEXT(GLsizei n, const GLuint * textures) { tunisGL.tunisDeleteTexturesEXT(n, textures); }
#define glDeleteTexturesEXT tunisDeleteTexturesEXT
TUNIS_FORCE_INLINE void  tunisDeleteTransformFeedbacks(GLsizei n, const GLuint * ids) { tunisGL.tunisDeleteTransformFeedbacks(n, ids); }
#define glDeleteTransformFeedbacks tunisDeleteTransformFeedbacks
TUNIS_FORCE_INLINE void  tunisDeleteTransformFeedbacksNV(GLsizei n, const GLuint * ids) { tunisGL.tunisDeleteTransformFeedbacksNV(n, ids); }
#define glDeleteTransformFeedbacksNV tunisDeleteTransformFeedbacksNV
TUNIS_FORCE_INLINE void  tunisDeleteVertexArrays(GLsizei n, const GLuint * arrays) { tunisGL.tunisDeleteVertexArrays(n, arrays); }
#define glDeleteVertexArrays tunisDeleteVertexArrays
TUNIS_FORCE_INLINE void  tunisDeleteVertexArraysAPPLE(GLsizei n, const GLuint * arrays) { tunisGL.tunisDeleteVertexArraysAPPLE(n, arrays); }
#define glDeleteVertexArraysAPPLE tunisDeleteVertexArraysAPPLE
TUNIS_FORCE_INLINE void  tunisDeleteVertexArraysOES(GLsizei n, const GLuint * arrays) { tunisGL.tunisDeleteVertexArraysOES(n, arrays); }
#define glDeleteVertexArraysOES tunisDeleteVertexArraysOES
TUNIS_FORCE_INLINE void  tunisDeleteVertexShaderEXT(GLuint id) { tunisGL.tunisDeleteVertexShaderEXT(id); }
#define glDeleteVertexShaderEXT tunisDeleteVertexShaderEXT
TUNIS_FORCE_INLINE void  tunisDepthBoundsEXT(GLclampd zmin, GLclampd zmax) { tunisGL.tunisDepthBoundsEXT(zmin, zmax); }
#define glDepthBoundsEXT tunisDepthBoundsEXT
TUNIS_FORCE_INLINE void  tunisDepthBoundsdNV(GLdouble zmin, GLdouble zmax) { tunisGL.tunisDepthBoundsdNV(zmin, zmax); }
#define glDepthBoundsdNV tunisDepthBoundsdNV
TUNIS_FORCE_INLINE void  tunisDepthFunc(GLenum func) { tunisGL.tunisDepthFunc(func); }
#define glDepthFunc tunisDepthFunc
TUNIS_FORCE_INLINE void  tunisDepthMask(GLboolean flag) { tunisGL.tunisDepthMask(flag); }
#define glDepthMask tunisDepthMask
TUNIS_FORCE_INLINE void  tunisDepthRange(GLdouble n, GLdouble f) { tunisGL.tunisDepthRange(n, f); }
#define glDepthRange tunisDepthRange
TUNIS_FORCE_INLINE void  tunisDepthRangeArrayfvNV(GLuint first, GLsizei count, const GLfloat * v) { tunisGL.tunisDepthRangeArrayfvNV(first, count, v); }
#define glDepthRangeArrayfvNV tunisDepthRangeArrayfvNV
TUNIS_FORCE_INLINE void  tunisDepthRangeArrayfvOES(GLuint first, GLsizei count, const GLfloat * v) { tunisGL.tunisDepthRangeArrayfvOES(first, count, v); }
#define glDepthRangeArrayfvOES tunisDepthRangeArrayfvOES
TUNIS_FORCE_INLINE void  tunisDepthRangeArrayv(GLuint first, GLsizei count, const GLdouble * v) { tunisGL.tunisDepthRangeArrayv(first, count, v); }
#define glDepthRangeArrayv tunisDepthRangeArrayv
TUNIS_FORCE_INLINE void  tunisDepthRangeIndexed(GLuint index, GLdouble n, GLdouble f) { tunisGL.tunisDepthRangeIndexed(index, n, f); }
#define glDepthRangeIndexed tunisDepthRangeIndexed
TUNIS_FORCE_INLINE void  tunisDepthRangeIndexedfNV(GLuint index, GLfloat n, GLfloat f) { tunisGL.tunisDepthRangeIndexedfNV(index, n, f); }
#define glDepthRangeIndexedfNV tunisDepthRangeIndexedfNV
TUNIS_FORCE_INLINE void  tunisDepthRangeIndexedfOES(GLuint index, GLfloat n, GLfloat f) { tunisGL.tunisDepthRangeIndexedfOES(index, n, f); }
#define glDepthRangeIndexedfOES tunisDepthRangeIndexedfOES
TUNIS_FORCE_INLINE void  tunisDepthRangedNV(GLdouble zNear, GLdouble zFar) { tunisGL.tunisDepthRangedNV(zNear, zFar); }
#define glDepthRangedNV tunisDepthRangedNV
TUNIS_FORCE_INLINE void  tunisDepthRangef(GLfloat n, GLfloat f) { tunisGL.tunisDepthRangef(n, f); }
#define glDepthRangef tunisDepthRangef
TUNIS_FORCE_INLINE void  tunisDepthRangefOES(GLclampf n, GLclampf f) { tunisGL.tunisDepthRangefOES(n, f); }
#define glDepthRangefOES tunisDepthRangefOES
TUNIS_FORCE_INLINE void  tunisDepthRangex(GLfixed n, GLfixed f) { tunisGL.tunisDepthRangex(n, f); }
#define glDepthRangex tunisDepthRangex
TUNIS_FORCE_INLINE void  tunisDepthRangexOES(GLfixed n, GLfixed f) { tunisGL.tunisDepthRangexOES(n, f); }
#define glDepthRangexOES tunisDepthRangexOES
TUNIS_FORCE_INLINE void  tunisDetachObjectARB(GLhandleARB containerObj, GLhandleARB attachedObj) { tunisGL.tunisDetachObjectARB(containerObj, attachedObj); }
#define glDetachObjectARB tunisDetachObjectARB
TUNIS_FORCE_INLINE void  tunisDetachShader(GLuint program, GLuint shader) { tunisGL.tunisDetachShader(program, shader); }
#define glDetachShader tunisDetachShader
TUNIS_FORCE_INLINE void  tunisDetailTexFuncSGIS(GLenum target, GLsizei n, const GLfloat * points) { tunisGL.tunisDetailTexFuncSGIS(target, n, points); }
#define glDetailTexFuncSGIS tunisDetailTexFuncSGIS
TUNIS_FORCE_INLINE void  tunisDisable(GLenum cap) { tunisGL.tunisDisable(cap); }
#define glDisable tunisDisable
TUNIS_FORCE_INLINE void  tunisDisableClientState(GLenum array) { tunisGL.tunisDisableClientState(array); }
#define glDisableClientState tunisDisableClientState
TUNIS_FORCE_INLINE void  tunisDisableClientStateIndexedEXT(GLenum array, GLuint index) { tunisGL.tunisDisableClientStateIndexedEXT(array, index); }
#define glDisableClientStateIndexedEXT tunisDisableClientStateIndexedEXT
TUNIS_FORCE_INLINE void  tunisDisableClientStateiEXT(GLenum array, GLuint index) { tunisGL.tunisDisableClientStateiEXT(array, index); }
#define glDisableClientStateiEXT tunisDisableClientStateiEXT
TUNIS_FORCE_INLINE void  tunisDisableDriverControlQCOM(GLuint driverControl) { tunisGL.tunisDisableDriverControlQCOM(driverControl); }
#define glDisableDriverControlQCOM tunisDisableDriverControlQCOM
TUNIS_FORCE_INLINE void  tunisDisableIndexedEXT(GLenum target, GLuint index) { tunisGL.tunisDisableIndexedEXT(target, index); }
#define glDisableIndexedEXT tunisDisableIndexedEXT
TUNIS_FORCE_INLINE void  tunisDisableVariantClientStateEXT(GLuint id) { tunisGL.tunisDisableVariantClientStateEXT(id); }
#define glDisableVariantClientStateEXT tunisDisableVariantClientStateEXT
TUNIS_FORCE_INLINE void  tunisDisableVertexArrayAttrib(GLuint vaobj, GLuint index) { tunisGL.tunisDisableVertexArrayAttrib(vaobj, index); }
#define glDisableVertexArrayAttrib tunisDisableVertexArrayAttrib
TUNIS_FORCE_INLINE void  tunisDisableVertexArrayAttribEXT(GLuint vaobj, GLuint index) { tunisGL.tunisDisableVertexArrayAttribEXT(vaobj, index); }
#define glDisableVertexArrayAttribEXT tunisDisableVertexArrayAttribEXT
TUNIS_FORCE_INLINE void  tunisDisableVertexArrayEXT(GLuint vaobj, GLenum array) { tunisGL.tunisDisableVertexArrayEXT(vaobj, array); }
#define glDisableVertexArrayEXT tunisDisableVertexArrayEXT
TUNIS_FORCE_INLINE void  tunisDisableVertexAttribAPPLE(GLuint index, GLenum pname) { tunisGL.tunisDisableVertexAttribAPPLE(index, pname); }
#define glDisableVertexAttribAPPLE tunisDisableVertexAttribAPPLE
TUNIS_FORCE_INLINE void  tunisDisableVertexAttribArray(GLuint index) { tunisGL.tunisDisableVertexAttribArray(index); }
#define glDisableVertexAttribArray tunisDisableVertexAttribArray
TUNIS_FORCE_INLINE void  tunisDisableVertexAttribArrayARB(GLuint index) { tunisGL.tunisDisableVertexAttribArrayARB(index); }
#define glDisableVertexAttribArrayARB tunisDisableVertexAttribArrayARB
TUNIS_FORCE_INLINE void  tunisDisablei(GLenum target, GLuint index) { tunisGL.tunisDisablei(target, index); }
#define glDisablei tunisDisablei
TUNIS_FORCE_INLINE void  tunisDisableiEXT(GLenum target, GLuint index) { tunisGL.tunisDisableiEXT(target, index); }
#define glDisableiEXT tunisDisableiEXT
TUNIS_FORCE_INLINE void  tunisDisableiNV(GLenum target, GLuint index) { tunisGL.tunisDisableiNV(target, index); }
#define glDisableiNV tunisDisableiNV
TUNIS_FORCE_INLINE void  tunisDisableiOES(GLenum target, GLuint index) { tunisGL.tunisDisableiOES(target, index); }
#define glDisableiOES tunisDisableiOES
TUNIS_FORCE_INLINE void  tunisDiscardFramebufferEXT(GLenum target, GLsizei numAttachments, const GLenum * attachments) { tunisGL.tunisDiscardFramebufferEXT(target, numAttachments, attachments); }
#define glDiscardFramebufferEXT tunisDiscardFramebufferEXT
TUNIS_FORCE_INLINE void  tunisDispatchCompute(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z) { tunisGL.tunisDispatchCompute(num_groups_x, num_groups_y, num_groups_z); }
#define glDispatchCompute tunisDispatchCompute
TUNIS_FORCE_INLINE void  tunisDispatchComputeGroupSizeARB(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z, GLuint group_size_x, GLuint group_size_y, GLuint group_size_z) { tunisGL.tunisDispatchComputeGroupSizeARB(num_groups_x, num_groups_y, num_groups_z, group_size_x, group_size_y, group_size_z); }
#define glDispatchComputeGroupSizeARB tunisDispatchComputeGroupSizeARB
TUNIS_FORCE_INLINE void  tunisDispatchComputeIndirect(GLintptr indirect) { tunisGL.tunisDispatchComputeIndirect(indirect); }
#define glDispatchComputeIndirect tunisDispatchComputeIndirect
TUNIS_FORCE_INLINE void  tunisDrawArrays(GLenum mode, GLint first, GLsizei count) { tunisGL.tunisDrawArrays(mode, first, count); }
#define glDrawArrays tunisDrawArrays
TUNIS_FORCE_INLINE void  tunisDrawArraysEXT(GLenum mode, GLint first, GLsizei count) { tunisGL.tunisDrawArraysEXT(mode, first, count); }
#define glDrawArraysEXT tunisDrawArraysEXT
TUNIS_FORCE_INLINE void  tunisDrawArraysIndirect(GLenum mode, const void * indirect) { tunisGL.tunisDrawArraysIndirect(mode, indirect); }
#define glDrawArraysIndirect tunisDrawArraysIndirect
TUNIS_FORCE_INLINE void  tunisDrawArraysInstanced(GLenum mode, GLint first, GLsizei count, GLsizei instancecount) { tunisGL.tunisDrawArraysInstanced(mode, first, count, instancecount); }
#define glDrawArraysInstanced tunisDrawArraysInstanced
TUNIS_FORCE_INLINE void  tunisDrawArraysInstancedANGLE(GLenum mode, GLint first, GLsizei count, GLsizei primcount) { tunisGL.tunisDrawArraysInstancedANGLE(mode, first, count, primcount); }
#define glDrawArraysInstancedANGLE tunisDrawArraysInstancedANGLE
TUNIS_FORCE_INLINE void  tunisDrawArraysInstancedARB(GLenum mode, GLint first, GLsizei count, GLsizei primcount) { tunisGL.tunisDrawArraysInstancedARB(mode, first, count, primcount); }
#define glDrawArraysInstancedARB tunisDrawArraysInstancedARB
TUNIS_FORCE_INLINE void  tunisDrawArraysInstancedBaseInstance(GLenum mode, GLint first, GLsizei count, GLsizei instancecount, GLuint baseinstance) { tunisGL.tunisDrawArraysInstancedBaseInstance(mode, first, count, instancecount, baseinstance); }
#define glDrawArraysInstancedBaseInstance tunisDrawArraysInstancedBaseInstance
TUNIS_FORCE_INLINE void  tunisDrawArraysInstancedBaseInstanceEXT(GLenum mode, GLint first, GLsizei count, GLsizei instancecount, GLuint baseinstance) { tunisGL.tunisDrawArraysInstancedBaseInstanceEXT(mode, first, count, instancecount, baseinstance); }
#define glDrawArraysInstancedBaseInstanceEXT tunisDrawArraysInstancedBaseInstanceEXT
TUNIS_FORCE_INLINE void  tunisDrawArraysInstancedEXT(GLenum mode, GLint start, GLsizei count, GLsizei primcount) { tunisGL.tunisDrawArraysInstancedEXT(mode, start, count, primcount); }
#define glDrawArraysInstancedEXT tunisDrawArraysInstancedEXT
TUNIS_FORCE_INLINE void  tunisDrawArraysInstancedNV(GLenum mode, GLint first, GLsizei count, GLsizei primcount) { tunisGL.tunisDrawArraysInstancedNV(mode, first, count, primcount); }
#define glDrawArraysInstancedNV tunisDrawArraysInstancedNV
TUNIS_FORCE_INLINE void  tunisDrawBuffer(GLenum buf) { tunisGL.tunisDrawBuffer(buf); }
#define glDrawBuffer tunisDrawBuffer
TUNIS_FORCE_INLINE void  tunisDrawBufferRegion(GLuint region, GLint x, GLint y, GLsizei width, GLsizei height, GLint xDest, GLint yDest) { tunisGL.tunisDrawBufferRegion(region, x, y, width, height, xDest, yDest); }
#define glDrawBufferRegion tunisDrawBufferRegion
TUNIS_FORCE_INLINE void  tunisDrawBuffers(GLsizei n, const GLenum * bufs) { tunisGL.tunisDrawBuffers(n, bufs); }
#define glDrawBuffers tunisDrawBuffers
TUNIS_FORCE_INLINE void  tunisDrawBuffersARB(GLsizei n, const GLenum * bufs) { tunisGL.tunisDrawBuffersARB(n, bufs); }
#define glDrawBuffersARB tunisDrawBuffersARB
TUNIS_FORCE_INLINE void  tunisDrawBuffersATI(GLsizei n, const GLenum * bufs) { tunisGL.tunisDrawBuffersATI(n, bufs); }
#define glDrawBuffersATI tunisDrawBuffersATI
TUNIS_FORCE_INLINE void  tunisDrawBuffersEXT(GLsizei n, const GLenum * bufs) { tunisGL.tunisDrawBuffersEXT(n, bufs); }
#define glDrawBuffersEXT tunisDrawBuffersEXT
TUNIS_FORCE_INLINE void  tunisDrawBuffersIndexedEXT(GLint n, const GLenum * location, const GLint * indices) { tunisGL.tunisDrawBuffersIndexedEXT(n, location, indices); }
#define glDrawBuffersIndexedEXT tunisDrawBuffersIndexedEXT
TUNIS_FORCE_INLINE void  tunisDrawBuffersNV(GLsizei n, const GLenum * bufs) { tunisGL.tunisDrawBuffersNV(n, bufs); }
#define glDrawBuffersNV tunisDrawBuffersNV
TUNIS_FORCE_INLINE void  tunisDrawCommandsAddressNV(GLenum primitiveMode, const GLuint64 * indirects, const GLsizei * sizes, GLuint count) { tunisGL.tunisDrawCommandsAddressNV(primitiveMode, indirects, sizes, count); }
#define glDrawCommandsAddressNV tunisDrawCommandsAddressNV
TUNIS_FORCE_INLINE void  tunisDrawCommandsNV(GLenum primitiveMode, GLuint buffer, const GLintptr * indirects, const GLsizei * sizes, GLuint count) { tunisGL.tunisDrawCommandsNV(primitiveMode, buffer, indirects, sizes, count); }
#define glDrawCommandsNV tunisDrawCommandsNV
TUNIS_FORCE_INLINE void  tunisDrawCommandsStatesAddressNV(const GLuint64 * indirects, const GLsizei * sizes, const GLuint * states, const GLuint * fbos, GLuint count) { tunisGL.tunisDrawCommandsStatesAddressNV(indirects, sizes, states, fbos, count); }
#define glDrawCommandsStatesAddressNV tunisDrawCommandsStatesAddressNV
TUNIS_FORCE_INLINE void  tunisDrawCommandsStatesNV(GLuint buffer, const GLintptr * indirects, const GLsizei * sizes, const GLuint * states, const GLuint * fbos, GLuint count) { tunisGL.tunisDrawCommandsStatesNV(buffer, indirects, sizes, states, fbos, count); }
#define glDrawCommandsStatesNV tunisDrawCommandsStatesNV
TUNIS_FORCE_INLINE void  tunisDrawElementArrayAPPLE(GLenum mode, GLint first, GLsizei count) { tunisGL.tunisDrawElementArrayAPPLE(mode, first, count); }
#define glDrawElementArrayAPPLE tunisDrawElementArrayAPPLE
TUNIS_FORCE_INLINE void  tunisDrawElementArrayATI(GLenum mode, GLsizei count) { tunisGL.tunisDrawElementArrayATI(mode, count); }
#define glDrawElementArrayATI tunisDrawElementArrayATI
TUNIS_FORCE_INLINE void  tunisDrawElements(GLenum mode, GLsizei count, GLenum type, const void * indices) { tunisGL.tunisDrawElements(mode, count, type, indices); }
#define glDrawElements tunisDrawElements
TUNIS_FORCE_INLINE void  tunisDrawElementsBaseVertex(GLenum mode, GLsizei count, GLenum type, const void * indices, GLint basevertex) { tunisGL.tunisDrawElementsBaseVertex(mode, count, type, indices, basevertex); }
#define glDrawElementsBaseVertex tunisDrawElementsBaseVertex
TUNIS_FORCE_INLINE void  tunisDrawElementsBaseVertexEXT(GLenum mode, GLsizei count, GLenum type, const void * indices, GLint basevertex) { tunisGL.tunisDrawElementsBaseVertexEXT(mode, count, type, indices, basevertex); }
#define glDrawElementsBaseVertexEXT tunisDrawElementsBaseVertexEXT
TUNIS_FORCE_INLINE void  tunisDrawElementsBaseVertexOES(GLenum mode, GLsizei count, GLenum type, const void * indices, GLint basevertex) { tunisGL.tunisDrawElementsBaseVertexOES(mode, count, type, indices, basevertex); }
#define glDrawElementsBaseVertexOES tunisDrawElementsBaseVertexOES
TUNIS_FORCE_INLINE void  tunisDrawElementsIndirect(GLenum mode, GLenum type, const void * indirect) { tunisGL.tunisDrawElementsIndirect(mode, type, indirect); }
#define glDrawElementsIndirect tunisDrawElementsIndirect
TUNIS_FORCE_INLINE void  tunisDrawElementsInstanced(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount) { tunisGL.tunisDrawElementsInstanced(mode, count, type, indices, instancecount); }
#define glDrawElementsInstanced tunisDrawElementsInstanced
TUNIS_FORCE_INLINE void  tunisDrawElementsInstancedANGLE(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei primcount) { tunisGL.tunisDrawElementsInstancedANGLE(mode, count, type, indices, primcount); }
#define glDrawElementsInstancedANGLE tunisDrawElementsInstancedANGLE
TUNIS_FORCE_INLINE void  tunisDrawElementsInstancedARB(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei primcount) { tunisGL.tunisDrawElementsInstancedARB(mode, count, type, indices, primcount); }
#define glDrawElementsInstancedARB tunisDrawElementsInstancedARB
TUNIS_FORCE_INLINE void  tunisDrawElementsInstancedBaseInstance(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount, GLuint baseinstance) { tunisGL.tunisDrawElementsInstancedBaseInstance(mode, count, type, indices, instancecount, baseinstance); }
#define glDrawElementsInstancedBaseInstance tunisDrawElementsInstancedBaseInstance
TUNIS_FORCE_INLINE void  tunisDrawElementsInstancedBaseInstanceEXT(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount, GLuint baseinstance) { tunisGL.tunisDrawElementsInstancedBaseInstanceEXT(mode, count, type, indices, instancecount, baseinstance); }
#define glDrawElementsInstancedBaseInstanceEXT tunisDrawElementsInstancedBaseInstanceEXT
TUNIS_FORCE_INLINE void  tunisDrawElementsInstancedBaseVertex(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount, GLint basevertex) { tunisGL.tunisDrawElementsInstancedBaseVertex(mode, count, type, indices, instancecount, basevertex); }
#define glDrawElementsInstancedBaseVertex tunisDrawElementsInstancedBaseVertex
TUNIS_FORCE_INLINE void  tunisDrawElementsInstancedBaseVertexBaseInstance(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount, GLint basevertex, GLuint baseinstance) { tunisGL.tunisDrawElementsInstancedBaseVertexBaseInstance(mode, count, type, indices, instancecount, basevertex, baseinstance); }
#define glDrawElementsInstancedBaseVertexBaseInstance tunisDrawElementsInstancedBaseVertexBaseInstance
TUNIS_FORCE_INLINE void  tunisDrawElementsInstancedBaseVertexBaseInstanceEXT(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount, GLint basevertex, GLuint baseinstance) { tunisGL.tunisDrawElementsInstancedBaseVertexBaseInstanceEXT(mode, count, type, indices, instancecount, basevertex, baseinstance); }
#define glDrawElementsInstancedBaseVertexBaseInstanceEXT tunisDrawElementsInstancedBaseVertexBaseInstanceEXT
TUNIS_FORCE_INLINE void  tunisDrawElementsInstancedBaseVertexEXT(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount, GLint basevertex) { tunisGL.tunisDrawElementsInstancedBaseVertexEXT(mode, count, type, indices, instancecount, basevertex); }
#define glDrawElementsInstancedBaseVertexEXT tunisDrawElementsInstancedBaseVertexEXT
TUNIS_FORCE_INLINE void  tunisDrawElementsInstancedBaseVertexOES(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount, GLint basevertex) { tunisGL.tunisDrawElementsInstancedBaseVertexOES(mode, count, type, indices, instancecount, basevertex); }
#define glDrawElementsInstancedBaseVertexOES tunisDrawElementsInstancedBaseVertexOES
TUNIS_FORCE_INLINE void  tunisDrawElementsInstancedEXT(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei primcount) { tunisGL.tunisDrawElementsInstancedEXT(mode, count, type, indices, primcount); }
#define glDrawElementsInstancedEXT tunisDrawElementsInstancedEXT
TUNIS_FORCE_INLINE void  tunisDrawElementsInstancedNV(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei primcount) { tunisGL.tunisDrawElementsInstancedNV(mode, count, type, indices, primcount); }
#define glDrawElementsInstancedNV tunisDrawElementsInstancedNV
TUNIS_FORCE_INLINE void  tunisDrawMeshArraysSUN(GLenum mode, GLint first, GLsizei count, GLsizei width) { tunisGL.tunisDrawMeshArraysSUN(mode, first, count, width); }
#define glDrawMeshArraysSUN tunisDrawMeshArraysSUN
TUNIS_FORCE_INLINE void  tunisDrawMeshTasksIndirectNV(GLintptr indirect) { tunisGL.tunisDrawMeshTasksIndirectNV(indirect); }
#define glDrawMeshTasksIndirectNV tunisDrawMeshTasksIndirectNV
TUNIS_FORCE_INLINE void  tunisDrawMeshTasksNV(GLuint first, GLuint count) { tunisGL.tunisDrawMeshTasksNV(first, count); }
#define glDrawMeshTasksNV tunisDrawMeshTasksNV
TUNIS_FORCE_INLINE void  tunisDrawPixels(GLsizei width, GLsizei height, GLenum format, GLenum type, const void * pixels) { tunisGL.tunisDrawPixels(width, height, format, type, pixels); }
#define glDrawPixels tunisDrawPixels
TUNIS_FORCE_INLINE void  tunisDrawRangeElementArrayAPPLE(GLenum mode, GLuint start, GLuint end, GLint first, GLsizei count) { tunisGL.tunisDrawRangeElementArrayAPPLE(mode, start, end, first, count); }
#define glDrawRangeElementArrayAPPLE tunisDrawRangeElementArrayAPPLE
TUNIS_FORCE_INLINE void  tunisDrawRangeElementArrayATI(GLenum mode, GLuint start, GLuint end, GLsizei count) { tunisGL.tunisDrawRangeElementArrayATI(mode, start, end, count); }
#define glDrawRangeElementArrayATI tunisDrawRangeElementArrayATI
TUNIS_FORCE_INLINE void  tunisDrawRangeElements(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void * indices) { tunisGL.tunisDrawRangeElements(mode, start, end, count, type, indices); }
#define glDrawRangeElements tunisDrawRangeElements
TUNIS_FORCE_INLINE void  tunisDrawRangeElementsBaseVertex(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void * indices, GLint basevertex) { tunisGL.tunisDrawRangeElementsBaseVertex(mode, start, end, count, type, indices, basevertex); }
#define glDrawRangeElementsBaseVertex tunisDrawRangeElementsBaseVertex
TUNIS_FORCE_INLINE void  tunisDrawRangeElementsBaseVertexEXT(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void * indices, GLint basevertex) { tunisGL.tunisDrawRangeElementsBaseVertexEXT(mode, start, end, count, type, indices, basevertex); }
#define glDrawRangeElementsBaseVertexEXT tunisDrawRangeElementsBaseVertexEXT
TUNIS_FORCE_INLINE void  tunisDrawRangeElementsBaseVertexOES(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void * indices, GLint basevertex) { tunisGL.tunisDrawRangeElementsBaseVertexOES(mode, start, end, count, type, indices, basevertex); }
#define glDrawRangeElementsBaseVertexOES tunisDrawRangeElementsBaseVertexOES
TUNIS_FORCE_INLINE void  tunisDrawRangeElementsEXT(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void * indices) { tunisGL.tunisDrawRangeElementsEXT(mode, start, end, count, type, indices); }
#define glDrawRangeElementsEXT tunisDrawRangeElementsEXT
TUNIS_FORCE_INLINE void  tunisDrawTexfOES(GLfloat x, GLfloat y, GLfloat z, GLfloat width, GLfloat height) { tunisGL.tunisDrawTexfOES(x, y, z, width, height); }
#define glDrawTexfOES tunisDrawTexfOES
TUNIS_FORCE_INLINE void  tunisDrawTexfvOES(const GLfloat * coords) { tunisGL.tunisDrawTexfvOES(coords); }
#define glDrawTexfvOES tunisDrawTexfvOES
TUNIS_FORCE_INLINE void  tunisDrawTexiOES(GLint x, GLint y, GLint z, GLint width, GLint height) { tunisGL.tunisDrawTexiOES(x, y, z, width, height); }
#define glDrawTexiOES tunisDrawTexiOES
TUNIS_FORCE_INLINE void  tunisDrawTexivOES(const GLint * coords) { tunisGL.tunisDrawTexivOES(coords); }
#define glDrawTexivOES tunisDrawTexivOES
TUNIS_FORCE_INLINE void  tunisDrawTexsOES(GLshort x, GLshort y, GLshort z, GLshort width, GLshort height) { tunisGL.tunisDrawTexsOES(x, y, z, width, height); }
#define glDrawTexsOES tunisDrawTexsOES
TUNIS_FORCE_INLINE void  tunisDrawTexsvOES(const GLshort * coords) { tunisGL.tunisDrawTexsvOES(coords); }
#define glDrawTexsvOES tunisDrawTexsvOES
TUNIS_FORCE_INLINE void  tunisDrawTextureNV(GLuint texture, GLuint sampler, GLfloat x0, GLfloat y0, GLfloat x1, GLfloat y1, GLfloat z, GLfloat s0, GLfloat t0, GLfloat s1, GLfloat t1) { tunisGL.tunisDrawTextureNV(texture, sampler, x0, y0, x1, y1, z, s0, t0, s1, t1); }
#define glDrawTextureNV tunisDrawTextureNV
TUNIS_FORCE_INLINE void  tunisDrawTexxOES(GLfixed x, GLfixed y, GLfixed z, GLfixed width, GLfixed height) { tunisGL.tunisDrawTexxOES(x, y, z, width, height); }
#define glDrawTexxOES tunisDrawTexxOES
TUNIS_FORCE_INLINE void  tunisDrawTexxvOES(const GLfixed * coords) { tunisGL.tunisDrawTexxvOES(coords); }
#define glDrawTexxvOES tunisDrawTexxvOES
TUNIS_FORCE_INLINE void  tunisDrawTransformFeedback(GLenum mode, GLuint id) { tunisGL.tunisDrawTransformFeedback(mode, id); }
#define glDrawTransformFeedback tunisDrawTransformFeedback
TUNIS_FORCE_INLINE void  tunisDrawTransformFeedbackEXT(GLenum mode, GLuint id) { tunisGL.tunisDrawTransformFeedbackEXT(mode, id); }
#define glDrawTransformFeedbackEXT tunisDrawTransformFeedbackEXT
TUNIS_FORCE_INLINE void  tunisDrawTransformFeedbackInstanced(GLenum mode, GLuint id, GLsizei instancecount) { tunisGL.tunisDrawTransformFeedbackInstanced(mode, id, instancecount); }
#define glDrawTransformFeedbackInstanced tunisDrawTransformFeedbackInstanced
TUNIS_FORCE_INLINE void  tunisDrawTransformFeedbackInstancedEXT(GLenum mode, GLuint id, GLsizei instancecount) { tunisGL.tunisDrawTransformFeedbackInstancedEXT(mode, id, instancecount); }
#define glDrawTransformFeedbackInstancedEXT tunisDrawTransformFeedbackInstancedEXT
TUNIS_FORCE_INLINE void  tunisDrawTransformFeedbackNV(GLenum mode, GLuint id) { tunisGL.tunisDrawTransformFeedbackNV(mode, id); }
#define glDrawTransformFeedbackNV tunisDrawTransformFeedbackNV
TUNIS_FORCE_INLINE void  tunisDrawTransformFeedbackStream(GLenum mode, GLuint id, GLuint stream) { tunisGL.tunisDrawTransformFeedbackStream(mode, id, stream); }
#define glDrawTransformFeedbackStream tunisDrawTransformFeedbackStream
TUNIS_FORCE_INLINE void  tunisDrawTransformFeedbackStreamInstanced(GLenum mode, GLuint id, GLuint stream, GLsizei instancecount) { tunisGL.tunisDrawTransformFeedbackStreamInstanced(mode, id, stream, instancecount); }
#define glDrawTransformFeedbackStreamInstanced tunisDrawTransformFeedbackStreamInstanced
TUNIS_FORCE_INLINE void  tunisDrawVkImageNV(GLuint64 vkImage, GLuint sampler, GLfloat x0, GLfloat y0, GLfloat x1, GLfloat y1, GLfloat z, GLfloat s0, GLfloat t0, GLfloat s1, GLfloat t1) { tunisGL.tunisDrawVkImageNV(vkImage, sampler, x0, y0, x1, y1, z, s0, t0, s1, t1); }
#define glDrawVkImageNV tunisDrawVkImageNV
TUNIS_FORCE_INLINE void  tunisEGLImageTargetRenderbufferStorageOES(GLenum target, GLeglImageOES image) { tunisGL.tunisEGLImageTargetRenderbufferStorageOES(target, image); }
#define glEGLImageTargetRenderbufferStorageOES tunisEGLImageTargetRenderbufferStorageOES
TUNIS_FORCE_INLINE void  tunisEGLImageTargetTexStorageEXT(GLenum target, GLeglImageOES image, const GLint*  attrib_list) { tunisGL.tunisEGLImageTargetTexStorageEXT(target, image, attrib_list); }
#define glEGLImageTargetTexStorageEXT tunisEGLImageTargetTexStorageEXT
TUNIS_FORCE_INLINE void  tunisEGLImageTargetTexture2DOES(GLenum target, GLeglImageOES image) { tunisGL.tunisEGLImageTargetTexture2DOES(target, image); }
#define glEGLImageTargetTexture2DOES tunisEGLImageTargetTexture2DOES
TUNIS_FORCE_INLINE void  tunisEGLImageTargetTextureStorageEXT(GLuint texture, GLeglImageOES image, const GLint*  attrib_list) { tunisGL.tunisEGLImageTargetTextureStorageEXT(texture, image, attrib_list); }
#define glEGLImageTargetTextureStorageEXT tunisEGLImageTargetTextureStorageEXT
TUNIS_FORCE_INLINE void  tunisEdgeFlag(GLboolean flag) { tunisGL.tunisEdgeFlag(flag); }
#define glEdgeFlag tunisEdgeFlag
TUNIS_FORCE_INLINE void  tunisEdgeFlagFormatNV(GLsizei stride) { tunisGL.tunisEdgeFlagFormatNV(stride); }
#define glEdgeFlagFormatNV tunisEdgeFlagFormatNV
TUNIS_FORCE_INLINE void  tunisEdgeFlagPointer(GLsizei stride, const void * pointer) { tunisGL.tunisEdgeFlagPointer(stride, pointer); }
#define glEdgeFlagPointer tunisEdgeFlagPointer
TUNIS_FORCE_INLINE void  tunisEdgeFlagPointerEXT(GLsizei stride, GLsizei count, const GLboolean * pointer) { tunisGL.tunisEdgeFlagPointerEXT(stride, count, pointer); }
#define glEdgeFlagPointerEXT tunisEdgeFlagPointerEXT
TUNIS_FORCE_INLINE void  tunisEdgeFlagPointerListIBM(GLint stride, const GLboolean ** pointer, GLint ptrstride) { tunisGL.tunisEdgeFlagPointerListIBM(stride, pointer, ptrstride); }
#define glEdgeFlagPointerListIBM tunisEdgeFlagPointerListIBM
TUNIS_FORCE_INLINE void  tunisEdgeFlagv(const GLboolean * flag) { tunisGL.tunisEdgeFlagv(flag); }
#define glEdgeFlagv tunisEdgeFlagv
TUNIS_FORCE_INLINE void  tunisElementPointerAPPLE(GLenum type, const void * pointer) { tunisGL.tunisElementPointerAPPLE(type, pointer); }
#define glElementPointerAPPLE tunisElementPointerAPPLE
TUNIS_FORCE_INLINE void  tunisElementPointerATI(GLenum type, const void * pointer) { tunisGL.tunisElementPointerATI(type, pointer); }
#define glElementPointerATI tunisElementPointerATI
TUNIS_FORCE_INLINE void  tunisEnable(GLenum cap) { tunisGL.tunisEnable(cap); }
#define glEnable tunisEnable
TUNIS_FORCE_INLINE void  tunisEnableClientState(GLenum array) { tunisGL.tunisEnableClientState(array); }
#define glEnableClientState tunisEnableClientState
TUNIS_FORCE_INLINE void  tunisEnableClientStateIndexedEXT(GLenum array, GLuint index) { tunisGL.tunisEnableClientStateIndexedEXT(array, index); }
#define glEnableClientStateIndexedEXT tunisEnableClientStateIndexedEXT
TUNIS_FORCE_INLINE void  tunisEnableClientStateiEXT(GLenum array, GLuint index) { tunisGL.tunisEnableClientStateiEXT(array, index); }
#define glEnableClientStateiEXT tunisEnableClientStateiEXT
TUNIS_FORCE_INLINE void  tunisEnableDriverControlQCOM(GLuint driverControl) { tunisGL.tunisEnableDriverControlQCOM(driverControl); }
#define glEnableDriverControlQCOM tunisEnableDriverControlQCOM
TUNIS_FORCE_INLINE void  tunisEnableIndexedEXT(GLenum target, GLuint index) { tunisGL.tunisEnableIndexedEXT(target, index); }
#define glEnableIndexedEXT tunisEnableIndexedEXT
TUNIS_FORCE_INLINE void  tunisEnableVariantClientStateEXT(GLuint id) { tunisGL.tunisEnableVariantClientStateEXT(id); }
#define glEnableVariantClientStateEXT tunisEnableVariantClientStateEXT
TUNIS_FORCE_INLINE void  tunisEnableVertexArrayAttrib(GLuint vaobj, GLuint index) { tunisGL.tunisEnableVertexArrayAttrib(vaobj, index); }
#define glEnableVertexArrayAttrib tunisEnableVertexArrayAttrib
TUNIS_FORCE_INLINE void  tunisEnableVertexArrayAttribEXT(GLuint vaobj, GLuint index) { tunisGL.tunisEnableVertexArrayAttribEXT(vaobj, index); }
#define glEnableVertexArrayAttribEXT tunisEnableVertexArrayAttribEXT
TUNIS_FORCE_INLINE void  tunisEnableVertexArrayEXT(GLuint vaobj, GLenum array) { tunisGL.tunisEnableVertexArrayEXT(vaobj, array); }
#define glEnableVertexArrayEXT tunisEnableVertexArrayEXT
TUNIS_FORCE_INLINE void  tunisEnableVertexAttribAPPLE(GLuint index, GLenum pname) { tunisGL.tunisEnableVertexAttribAPPLE(index, pname); }
#define glEnableVertexAttribAPPLE tunisEnableVertexAttribAPPLE
TUNIS_FORCE_INLINE void  tunisEnableVertexAttribArray(GLuint index) { tunisGL.tunisEnableVertexAttribArray(index); }
#define glEnableVertexAttribArray tunisEnableVertexAttribArray
TUNIS_FORCE_INLINE void  tunisEnableVertexAttribArrayARB(GLuint index) { tunisGL.tunisEnableVertexAttribArrayARB(index); }
#define glEnableVertexAttribArrayARB tunisEnableVertexAttribArrayARB
TUNIS_FORCE_INLINE void  tunisEnablei(GLenum target, GLuint index) { tunisGL.tunisEnablei(target, index); }
#define glEnablei tunisEnablei
TUNIS_FORCE_INLINE void  tunisEnableiEXT(GLenum target, GLuint index) { tunisGL.tunisEnableiEXT(target, index); }
#define glEnableiEXT tunisEnableiEXT
TUNIS_FORCE_INLINE void  tunisEnableiNV(GLenum target, GLuint index) { tunisGL.tunisEnableiNV(target, index); }
#define glEnableiNV tunisEnableiNV
TUNIS_FORCE_INLINE void  tunisEnableiOES(GLenum target, GLuint index) { tunisGL.tunisEnableiOES(target, index); }
#define glEnableiOES tunisEnableiOES
TUNIS_FORCE_INLINE void  tunisEnd(void) { tunisGL.tunisEnd(); }
#define glEnd tunisEnd
TUNIS_FORCE_INLINE void  tunisEndConditionalRender(void) { tunisGL.tunisEndConditionalRender(); }
#define glEndConditionalRender tunisEndConditionalRender
TUNIS_FORCE_INLINE void  tunisEndConditionalRenderNV(void) { tunisGL.tunisEndConditionalRenderNV(); }
#define glEndConditionalRenderNV tunisEndConditionalRenderNV
TUNIS_FORCE_INLINE void  tunisEndConditionalRenderNVX(void) { tunisGL.tunisEndConditionalRenderNVX(); }
#define glEndConditionalRenderNVX tunisEndConditionalRenderNVX
TUNIS_FORCE_INLINE void  tunisEndFragmentShaderATI(void) { tunisGL.tunisEndFragmentShaderATI(); }
#define glEndFragmentShaderATI tunisEndFragmentShaderATI
TUNIS_FORCE_INLINE void  tunisEndList(void) { tunisGL.tunisEndList(); }
#define glEndList tunisEndList
TUNIS_FORCE_INLINE void  tunisEndOcclusionQueryNV(void) { tunisGL.tunisEndOcclusionQueryNV(); }
#define glEndOcclusionQueryNV tunisEndOcclusionQueryNV
TUNIS_FORCE_INLINE void  tunisEndPerfMonitorAMD(GLuint monitor) { tunisGL.tunisEndPerfMonitorAMD(monitor); }
#define glEndPerfMonitorAMD tunisEndPerfMonitorAMD
TUNIS_FORCE_INLINE void  tunisEndPerfQueryINTEL(GLuint queryHandle) { tunisGL.tunisEndPerfQueryINTEL(queryHandle); }
#define glEndPerfQueryINTEL tunisEndPerfQueryINTEL
TUNIS_FORCE_INLINE void  tunisEndQuery(GLenum target) { tunisGL.tunisEndQuery(target); }
#define glEndQuery tunisEndQuery
TUNIS_FORCE_INLINE void  tunisEndQueryARB(GLenum target) { tunisGL.tunisEndQueryARB(target); }
#define glEndQueryARB tunisEndQueryARB
TUNIS_FORCE_INLINE void  tunisEndQueryEXT(GLenum target) { tunisGL.tunisEndQueryEXT(target); }
#define glEndQueryEXT tunisEndQueryEXT
TUNIS_FORCE_INLINE void  tunisEndQueryIndexed(GLenum target, GLuint index) { tunisGL.tunisEndQueryIndexed(target, index); }
#define glEndQueryIndexed tunisEndQueryIndexed
TUNIS_FORCE_INLINE void  tunisEndTilingQCOM(GLbitfield preserveMask) { tunisGL.tunisEndTilingQCOM(preserveMask); }
#define glEndTilingQCOM tunisEndTilingQCOM
TUNIS_FORCE_INLINE void  tunisEndTransformFeedback(void) { tunisGL.tunisEndTransformFeedback(); }
#define glEndTransformFeedback tunisEndTransformFeedback
TUNIS_FORCE_INLINE void  tunisEndTransformFeedbackEXT(void) { tunisGL.tunisEndTransformFeedbackEXT(); }
#define glEndTransformFeedbackEXT tunisEndTransformFeedbackEXT
TUNIS_FORCE_INLINE void  tunisEndTransformFeedbackNV(void) { tunisGL.tunisEndTransformFeedbackNV(); }
#define glEndTransformFeedbackNV tunisEndTransformFeedbackNV
TUNIS_FORCE_INLINE void  tunisEndVertexShaderEXT(void) { tunisGL.tunisEndVertexShaderEXT(); }
#define glEndVertexShaderEXT tunisEndVertexShaderEXT
TUNIS_FORCE_INLINE void  tunisEndVideoCaptureNV(GLuint video_capture_slot) { tunisGL.tunisEndVideoCaptureNV(video_capture_slot); }
#define glEndVideoCaptureNV tunisEndVideoCaptureNV
TUNIS_FORCE_INLINE void  tunisEvalCoord1d(GLdouble u) { tunisGL.tunisEvalCoord1d(u); }
#define glEvalCoord1d tunisEvalCoord1d
TUNIS_FORCE_INLINE void  tunisEvalCoord1dv(const GLdouble * u) { tunisGL.tunisEvalCoord1dv(u); }
#define glEvalCoord1dv tunisEvalCoord1dv
TUNIS_FORCE_INLINE void  tunisEvalCoord1f(GLfloat u) { tunisGL.tunisEvalCoord1f(u); }
#define glEvalCoord1f tunisEvalCoord1f
TUNIS_FORCE_INLINE void  tunisEvalCoord1fv(const GLfloat * u) { tunisGL.tunisEvalCoord1fv(u); }
#define glEvalCoord1fv tunisEvalCoord1fv
TUNIS_FORCE_INLINE void  tunisEvalCoord1xOES(GLfixed u) { tunisGL.tunisEvalCoord1xOES(u); }
#define glEvalCoord1xOES tunisEvalCoord1xOES
TUNIS_FORCE_INLINE void  tunisEvalCoord1xvOES(const GLfixed * coords) { tunisGL.tunisEvalCoord1xvOES(coords); }
#define glEvalCoord1xvOES tunisEvalCoord1xvOES
TUNIS_FORCE_INLINE void  tunisEvalCoord2d(GLdouble u, GLdouble v) { tunisGL.tunisEvalCoord2d(u, v); }
#define glEvalCoord2d tunisEvalCoord2d
TUNIS_FORCE_INLINE void  tunisEvalCoord2dv(const GLdouble * u) { tunisGL.tunisEvalCoord2dv(u); }
#define glEvalCoord2dv tunisEvalCoord2dv
TUNIS_FORCE_INLINE void  tunisEvalCoord2f(GLfloat u, GLfloat v) { tunisGL.tunisEvalCoord2f(u, v); }
#define glEvalCoord2f tunisEvalCoord2f
TUNIS_FORCE_INLINE void  tunisEvalCoord2fv(const GLfloat * u) { tunisGL.tunisEvalCoord2fv(u); }
#define glEvalCoord2fv tunisEvalCoord2fv
TUNIS_FORCE_INLINE void  tunisEvalCoord2xOES(GLfixed u, GLfixed v) { tunisGL.tunisEvalCoord2xOES(u, v); }
#define glEvalCoord2xOES tunisEvalCoord2xOES
TUNIS_FORCE_INLINE void  tunisEvalCoord2xvOES(const GLfixed * coords) { tunisGL.tunisEvalCoord2xvOES(coords); }
#define glEvalCoord2xvOES tunisEvalCoord2xvOES
TUNIS_FORCE_INLINE void  tunisEvalMapsNV(GLenum target, GLenum mode) { tunisGL.tunisEvalMapsNV(target, mode); }
#define glEvalMapsNV tunisEvalMapsNV
TUNIS_FORCE_INLINE void  tunisEvalMesh1(GLenum mode, GLint i1, GLint i2) { tunisGL.tunisEvalMesh1(mode, i1, i2); }
#define glEvalMesh1 tunisEvalMesh1
TUNIS_FORCE_INLINE void  tunisEvalMesh2(GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2) { tunisGL.tunisEvalMesh2(mode, i1, i2, j1, j2); }
#define glEvalMesh2 tunisEvalMesh2
TUNIS_FORCE_INLINE void  tunisEvalPoint1(GLint i) { tunisGL.tunisEvalPoint1(i); }
#define glEvalPoint1 tunisEvalPoint1
TUNIS_FORCE_INLINE void  tunisEvalPoint2(GLint i, GLint j) { tunisGL.tunisEvalPoint2(i, j); }
#define glEvalPoint2 tunisEvalPoint2
TUNIS_FORCE_INLINE void  tunisEvaluateDepthValuesARB(void) { tunisGL.tunisEvaluateDepthValuesARB(); }
#define glEvaluateDepthValuesARB tunisEvaluateDepthValuesARB
TUNIS_FORCE_INLINE void  tunisExecuteProgramNV(GLenum target, GLuint id, const GLfloat * params) { tunisGL.tunisExecuteProgramNV(target, id, params); }
#define glExecuteProgramNV tunisExecuteProgramNV
TUNIS_FORCE_INLINE void  tunisExtGetBufferPointervQCOM(GLenum target, void ** params) { tunisGL.tunisExtGetBufferPointervQCOM(target, params); }
#define glExtGetBufferPointervQCOM tunisExtGetBufferPointervQCOM
TUNIS_FORCE_INLINE void  tunisExtGetBuffersQCOM(GLuint * buffers, GLint maxBuffers, GLint * numBuffers) { tunisGL.tunisExtGetBuffersQCOM(buffers, maxBuffers, numBuffers); }
#define glExtGetBuffersQCOM tunisExtGetBuffersQCOM
TUNIS_FORCE_INLINE void  tunisExtGetFramebuffersQCOM(GLuint * framebuffers, GLint maxFramebuffers, GLint * numFramebuffers) { tunisGL.tunisExtGetFramebuffersQCOM(framebuffers, maxFramebuffers, numFramebuffers); }
#define glExtGetFramebuffersQCOM tunisExtGetFramebuffersQCOM
TUNIS_FORCE_INLINE void  tunisExtGetProgramBinarySourceQCOM(GLuint program, GLenum shadertype, GLchar * source, GLint * length) { tunisGL.tunisExtGetProgramBinarySourceQCOM(program, shadertype, source, length); }
#define glExtGetProgramBinarySourceQCOM tunisExtGetProgramBinarySourceQCOM
TUNIS_FORCE_INLINE void  tunisExtGetProgramsQCOM(GLuint * programs, GLint maxPrograms, GLint * numPrograms) { tunisGL.tunisExtGetProgramsQCOM(programs, maxPrograms, numPrograms); }
#define glExtGetProgramsQCOM tunisExtGetProgramsQCOM
TUNIS_FORCE_INLINE void  tunisExtGetRenderbuffersQCOM(GLuint * renderbuffers, GLint maxRenderbuffers, GLint * numRenderbuffers) { tunisGL.tunisExtGetRenderbuffersQCOM(renderbuffers, maxRenderbuffers, numRenderbuffers); }
#define glExtGetRenderbuffersQCOM tunisExtGetRenderbuffersQCOM
TUNIS_FORCE_INLINE void  tunisExtGetShadersQCOM(GLuint * shaders, GLint maxShaders, GLint * numShaders) { tunisGL.tunisExtGetShadersQCOM(shaders, maxShaders, numShaders); }
#define glExtGetShadersQCOM tunisExtGetShadersQCOM
TUNIS_FORCE_INLINE void  tunisExtGetTexLevelParameterivQCOM(GLuint texture, GLenum face, GLint level, GLenum pname, GLint * params) { tunisGL.tunisExtGetTexLevelParameterivQCOM(texture, face, level, pname, params); }
#define glExtGetTexLevelParameterivQCOM tunisExtGetTexLevelParameterivQCOM
TUNIS_FORCE_INLINE void  tunisExtGetTexSubImageQCOM(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, void * texels) { tunisGL.tunisExtGetTexSubImageQCOM(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, texels); }
#define glExtGetTexSubImageQCOM tunisExtGetTexSubImageQCOM
TUNIS_FORCE_INLINE void  tunisExtGetTexturesQCOM(GLuint * textures, GLint maxTextures, GLint * numTextures) { tunisGL.tunisExtGetTexturesQCOM(textures, maxTextures, numTextures); }
#define glExtGetTexturesQCOM tunisExtGetTexturesQCOM
TUNIS_FORCE_INLINE GLboolean tunisExtIsProgramBinaryQCOM(GLuint program) { return tunisGL.tunisExtIsProgramBinaryQCOM(program); }
#define glExtIsProgramBinaryQCOM tunisExtIsProgramBinaryQCOM
TUNIS_FORCE_INLINE void  tunisExtTexObjectStateOverrideiQCOM(GLenum target, GLenum pname, GLint param) { tunisGL.tunisExtTexObjectStateOverrideiQCOM(target, pname, param); }
#define glExtTexObjectStateOverrideiQCOM tunisExtTexObjectStateOverrideiQCOM
TUNIS_FORCE_INLINE void  tunisExtractComponentEXT(GLuint res, GLuint src, GLuint num) { tunisGL.tunisExtractComponentEXT(res, src, num); }
#define glExtractComponentEXT tunisExtractComponentEXT
TUNIS_FORCE_INLINE void  tunisFeedbackBuffer(GLsizei size, GLenum type, GLfloat * buffer) { tunisGL.tunisFeedbackBuffer(size, type, buffer); }
#define glFeedbackBuffer tunisFeedbackBuffer
TUNIS_FORCE_INLINE void  tunisFeedbackBufferxOES(GLsizei n, GLenum type, const GLfixed * buffer) { tunisGL.tunisFeedbackBufferxOES(n, type, buffer); }
#define glFeedbackBufferxOES tunisFeedbackBufferxOES
TUNIS_FORCE_INLINE GLsync tunisFenceSync(GLenum condition, GLbitfield flags) { return tunisGL.tunisFenceSync(condition, flags); }
#define glFenceSync tunisFenceSync
TUNIS_FORCE_INLINE GLsync tunisFenceSyncAPPLE(GLenum condition, GLbitfield flags) { return tunisGL.tunisFenceSyncAPPLE(condition, flags); }
#define glFenceSyncAPPLE tunisFenceSyncAPPLE
TUNIS_FORCE_INLINE void  tunisFinalCombinerInputNV(GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage) { tunisGL.tunisFinalCombinerInputNV(variable, input, mapping, componentUsage); }
#define glFinalCombinerInputNV tunisFinalCombinerInputNV
TUNIS_FORCE_INLINE void  tunisFinish(void) { tunisGL.tunisFinish(); }
#define glFinish tunisFinish
TUNIS_FORCE_INLINE GLint tunisFinishAsyncSGIX(GLuint * markerp) { return tunisGL.tunisFinishAsyncSGIX(markerp); }
#define glFinishAsyncSGIX tunisFinishAsyncSGIX
TUNIS_FORCE_INLINE void  tunisFinishFenceAPPLE(GLuint fence) { tunisGL.tunisFinishFenceAPPLE(fence); }
#define glFinishFenceAPPLE tunisFinishFenceAPPLE
TUNIS_FORCE_INLINE void  tunisFinishFenceNV(GLuint fence) { tunisGL.tunisFinishFenceNV(fence); }
#define glFinishFenceNV tunisFinishFenceNV
TUNIS_FORCE_INLINE void  tunisFinishObjectAPPLE(GLenum object, GLint name) { tunisGL.tunisFinishObjectAPPLE(object, name); }
#define glFinishObjectAPPLE tunisFinishObjectAPPLE
TUNIS_FORCE_INLINE void  tunisFinishTextureSUNX(void) { tunisGL.tunisFinishTextureSUNX(); }
#define glFinishTextureSUNX tunisFinishTextureSUNX
TUNIS_FORCE_INLINE void  tunisFlush(void) { tunisGL.tunisFlush(); }
#define glFlush tunisFlush
TUNIS_FORCE_INLINE void  tunisFlushMappedBufferRange(GLenum target, GLintptr offset, GLsizeiptr length) { tunisGL.tunisFlushMappedBufferRange(target, offset, length); }
#define glFlushMappedBufferRange tunisFlushMappedBufferRange
TUNIS_FORCE_INLINE void  tunisFlushMappedBufferRangeAPPLE(GLenum target, GLintptr offset, GLsizeiptr size) { tunisGL.tunisFlushMappedBufferRangeAPPLE(target, offset, size); }
#define glFlushMappedBufferRangeAPPLE tunisFlushMappedBufferRangeAPPLE
TUNIS_FORCE_INLINE void  tunisFlushMappedBufferRangeEXT(GLenum target, GLintptr offset, GLsizeiptr length) { tunisGL.tunisFlushMappedBufferRangeEXT(target, offset, length); }
#define glFlushMappedBufferRangeEXT tunisFlushMappedBufferRangeEXT
TUNIS_FORCE_INLINE void  tunisFlushMappedNamedBufferRange(GLuint buffer, GLintptr offset, GLsizeiptr length) { tunisGL.tunisFlushMappedNamedBufferRange(buffer, offset, length); }
#define glFlushMappedNamedBufferRange tunisFlushMappedNamedBufferRange
TUNIS_FORCE_INLINE void  tunisFlushMappedNamedBufferRangeEXT(GLuint buffer, GLintptr offset, GLsizeiptr length) { tunisGL.tunisFlushMappedNamedBufferRangeEXT(buffer, offset, length); }
#define glFlushMappedNamedBufferRangeEXT tunisFlushMappedNamedBufferRangeEXT
TUNIS_FORCE_INLINE void  tunisFlushPixelDataRangeNV(GLenum target) { tunisGL.tunisFlushPixelDataRangeNV(target); }
#define glFlushPixelDataRangeNV tunisFlushPixelDataRangeNV
TUNIS_FORCE_INLINE void  tunisFlushRasterSGIX(void) { tunisGL.tunisFlushRasterSGIX(); }
#define glFlushRasterSGIX tunisFlushRasterSGIX
TUNIS_FORCE_INLINE void  tunisFlushStaticDataIBM(GLenum target) { tunisGL.tunisFlushStaticDataIBM(target); }
#define glFlushStaticDataIBM tunisFlushStaticDataIBM
TUNIS_FORCE_INLINE void  tunisFlushVertexArrayRangeAPPLE(GLsizei length, void * pointer) { tunisGL.tunisFlushVertexArrayRangeAPPLE(length, pointer); }
#define glFlushVertexArrayRangeAPPLE tunisFlushVertexArrayRangeAPPLE
TUNIS_FORCE_INLINE void  tunisFlushVertexArrayRangeNV(void) { tunisGL.tunisFlushVertexArrayRangeNV(); }
#define glFlushVertexArrayRangeNV tunisFlushVertexArrayRangeNV
TUNIS_FORCE_INLINE void  tunisFogCoordFormatNV(GLenum type, GLsizei stride) { tunisGL.tunisFogCoordFormatNV(type, stride); }
#define glFogCoordFormatNV tunisFogCoordFormatNV
TUNIS_FORCE_INLINE void  tunisFogCoordPointer(GLenum type, GLsizei stride, const void * pointer) { tunisGL.tunisFogCoordPointer(type, stride, pointer); }
#define glFogCoordPointer tunisFogCoordPointer
TUNIS_FORCE_INLINE void  tunisFogCoordPointerEXT(GLenum type, GLsizei stride, const void * pointer) { tunisGL.tunisFogCoordPointerEXT(type, stride, pointer); }
#define glFogCoordPointerEXT tunisFogCoordPointerEXT
TUNIS_FORCE_INLINE void  tunisFogCoordPointerListIBM(GLenum type, GLint stride, const void ** pointer, GLint ptrstride) { tunisGL.tunisFogCoordPointerListIBM(type, stride, pointer, ptrstride); }
#define glFogCoordPointerListIBM tunisFogCoordPointerListIBM
TUNIS_FORCE_INLINE void  tunisFogCoordd(GLdouble coord) { tunisGL.tunisFogCoordd(coord); }
#define glFogCoordd tunisFogCoordd
TUNIS_FORCE_INLINE void  tunisFogCoorddEXT(GLdouble coord) { tunisGL.tunisFogCoorddEXT(coord); }
#define glFogCoorddEXT tunisFogCoorddEXT
TUNIS_FORCE_INLINE void  tunisFogCoorddv(const GLdouble * coord) { tunisGL.tunisFogCoorddv(coord); }
#define glFogCoorddv tunisFogCoorddv
TUNIS_FORCE_INLINE void  tunisFogCoorddvEXT(const GLdouble * coord) { tunisGL.tunisFogCoorddvEXT(coord); }
#define glFogCoorddvEXT tunisFogCoorddvEXT
TUNIS_FORCE_INLINE void  tunisFogCoordf(GLfloat coord) { tunisGL.tunisFogCoordf(coord); }
#define glFogCoordf tunisFogCoordf
TUNIS_FORCE_INLINE void  tunisFogCoordfEXT(GLfloat coord) { tunisGL.tunisFogCoordfEXT(coord); }
#define glFogCoordfEXT tunisFogCoordfEXT
TUNIS_FORCE_INLINE void  tunisFogCoordfv(const GLfloat * coord) { tunisGL.tunisFogCoordfv(coord); }
#define glFogCoordfv tunisFogCoordfv
TUNIS_FORCE_INLINE void  tunisFogCoordfvEXT(const GLfloat * coord) { tunisGL.tunisFogCoordfvEXT(coord); }
#define glFogCoordfvEXT tunisFogCoordfvEXT
TUNIS_FORCE_INLINE void  tunisFogCoordhNV(GLhalfNV fog) { tunisGL.tunisFogCoordhNV(fog); }
#define glFogCoordhNV tunisFogCoordhNV
TUNIS_FORCE_INLINE void  tunisFogCoordhvNV(const GLhalfNV * fog) { tunisGL.tunisFogCoordhvNV(fog); }
#define glFogCoordhvNV tunisFogCoordhvNV
TUNIS_FORCE_INLINE void  tunisFogFuncSGIS(GLsizei n, const GLfloat * points) { tunisGL.tunisFogFuncSGIS(n, points); }
#define glFogFuncSGIS tunisFogFuncSGIS
TUNIS_FORCE_INLINE void  tunisFogf(GLenum pname, GLfloat param) { tunisGL.tunisFogf(pname, param); }
#define glFogf tunisFogf
TUNIS_FORCE_INLINE void  tunisFogfv(GLenum pname, const GLfloat * params) { tunisGL.tunisFogfv(pname, params); }
#define glFogfv tunisFogfv
TUNIS_FORCE_INLINE void  tunisFogi(GLenum pname, GLint param) { tunisGL.tunisFogi(pname, param); }
#define glFogi tunisFogi
TUNIS_FORCE_INLINE void  tunisFogiv(GLenum pname, const GLint * params) { tunisGL.tunisFogiv(pname, params); }
#define glFogiv tunisFogiv
TUNIS_FORCE_INLINE void  tunisFogx(GLenum pname, GLfixed param) { tunisGL.tunisFogx(pname, param); }
#define glFogx tunisFogx
TUNIS_FORCE_INLINE void  tunisFogxOES(GLenum pname, GLfixed param) { tunisGL.tunisFogxOES(pname, param); }
#define glFogxOES tunisFogxOES
TUNIS_FORCE_INLINE void  tunisFogxv(GLenum pname, const GLfixed * param) { tunisGL.tunisFogxv(pname, param); }
#define glFogxv tunisFogxv
TUNIS_FORCE_INLINE void  tunisFogxvOES(GLenum pname, const GLfixed * param) { tunisGL.tunisFogxvOES(pname, param); }
#define glFogxvOES tunisFogxvOES
TUNIS_FORCE_INLINE void  tunisFragmentColorMaterialSGIX(GLenum face, GLenum mode) { tunisGL.tunisFragmentColorMaterialSGIX(face, mode); }
#define glFragmentColorMaterialSGIX tunisFragmentColorMaterialSGIX
TUNIS_FORCE_INLINE void  tunisFragmentCoverageColorNV(GLuint color) { tunisGL.tunisFragmentCoverageColorNV(color); }
#define glFragmentCoverageColorNV tunisFragmentCoverageColorNV
TUNIS_FORCE_INLINE void  tunisFragmentLightModelfSGIX(GLenum pname, GLfloat param) { tunisGL.tunisFragmentLightModelfSGIX(pname, param); }
#define glFragmentLightModelfSGIX tunisFragmentLightModelfSGIX
TUNIS_FORCE_INLINE void  tunisFragmentLightModelfvSGIX(GLenum pname, const GLfloat * params) { tunisGL.tunisFragmentLightModelfvSGIX(pname, params); }
#define glFragmentLightModelfvSGIX tunisFragmentLightModelfvSGIX
TUNIS_FORCE_INLINE void  tunisFragmentLightModeliSGIX(GLenum pname, GLint param) { tunisGL.tunisFragmentLightModeliSGIX(pname, param); }
#define glFragmentLightModeliSGIX tunisFragmentLightModeliSGIX
TUNIS_FORCE_INLINE void  tunisFragmentLightModelivSGIX(GLenum pname, const GLint * params) { tunisGL.tunisFragmentLightModelivSGIX(pname, params); }
#define glFragmentLightModelivSGIX tunisFragmentLightModelivSGIX
TUNIS_FORCE_INLINE void  tunisFragmentLightfSGIX(GLenum light, GLenum pname, GLfloat param) { tunisGL.tunisFragmentLightfSGIX(light, pname, param); }
#define glFragmentLightfSGIX tunisFragmentLightfSGIX
TUNIS_FORCE_INLINE void  tunisFragmentLightfvSGIX(GLenum light, GLenum pname, const GLfloat * params) { tunisGL.tunisFragmentLightfvSGIX(light, pname, params); }
#define glFragmentLightfvSGIX tunisFragmentLightfvSGIX
TUNIS_FORCE_INLINE void  tunisFragmentLightiSGIX(GLenum light, GLenum pname, GLint param) { tunisGL.tunisFragmentLightiSGIX(light, pname, param); }
#define glFragmentLightiSGIX tunisFragmentLightiSGIX
TUNIS_FORCE_INLINE void  tunisFragmentLightivSGIX(GLenum light, GLenum pname, const GLint * params) { tunisGL.tunisFragmentLightivSGIX(light, pname, params); }
#define glFragmentLightivSGIX tunisFragmentLightivSGIX
TUNIS_FORCE_INLINE void  tunisFragmentMaterialfSGIX(GLenum face, GLenum pname, GLfloat param) { tunisGL.tunisFragmentMaterialfSGIX(face, pname, param); }
#define glFragmentMaterialfSGIX tunisFragmentMaterialfSGIX
TUNIS_FORCE_INLINE void  tunisFragmentMaterialfvSGIX(GLenum face, GLenum pname, const GLfloat * params) { tunisGL.tunisFragmentMaterialfvSGIX(face, pname, params); }
#define glFragmentMaterialfvSGIX tunisFragmentMaterialfvSGIX
TUNIS_FORCE_INLINE void  tunisFragmentMaterialiSGIX(GLenum face, GLenum pname, GLint param) { tunisGL.tunisFragmentMaterialiSGIX(face, pname, param); }
#define glFragmentMaterialiSGIX tunisFragmentMaterialiSGIX
TUNIS_FORCE_INLINE void  tunisFragmentMaterialivSGIX(GLenum face, GLenum pname, const GLint * params) { tunisGL.tunisFragmentMaterialivSGIX(face, pname, params); }
#define glFragmentMaterialivSGIX tunisFragmentMaterialivSGIX
TUNIS_FORCE_INLINE void  tunisFrameTerminatorGREMEDY(void) { tunisGL.tunisFrameTerminatorGREMEDY(); }
#define glFrameTerminatorGREMEDY tunisFrameTerminatorGREMEDY
TUNIS_FORCE_INLINE void  tunisFrameZoomSGIX(GLint factor) { tunisGL.tunisFrameZoomSGIX(factor); }
#define glFrameZoomSGIX tunisFrameZoomSGIX
TUNIS_FORCE_INLINE void  tunisFramebufferDrawBufferEXT(GLuint framebuffer, GLenum mode) { tunisGL.tunisFramebufferDrawBufferEXT(framebuffer, mode); }
#define glFramebufferDrawBufferEXT tunisFramebufferDrawBufferEXT
TUNIS_FORCE_INLINE void  tunisFramebufferDrawBuffersEXT(GLuint framebuffer, GLsizei n, const GLenum * bufs) { tunisGL.tunisFramebufferDrawBuffersEXT(framebuffer, n, bufs); }
#define glFramebufferDrawBuffersEXT tunisFramebufferDrawBuffersEXT
TUNIS_FORCE_INLINE void  tunisFramebufferFetchBarrierEXT(void) { tunisGL.tunisFramebufferFetchBarrierEXT(); }
#define glFramebufferFetchBarrierEXT tunisFramebufferFetchBarrierEXT
TUNIS_FORCE_INLINE void  tunisFramebufferFetchBarrierQCOM(void) { tunisGL.tunisFramebufferFetchBarrierQCOM(); }
#define glFramebufferFetchBarrierQCOM tunisFramebufferFetchBarrierQCOM
TUNIS_FORCE_INLINE void  tunisFramebufferFoveationConfigQCOM(GLuint framebuffer, GLuint numLayers, GLuint focalPointsPerLayer, GLuint requestedFeatures, GLuint * providedFeatures) { tunisGL.tunisFramebufferFoveationConfigQCOM(framebuffer, numLayers, focalPointsPerLayer, requestedFeatures, providedFeatures); }
#define glFramebufferFoveationConfigQCOM tunisFramebufferFoveationConfigQCOM
TUNIS_FORCE_INLINE void  tunisFramebufferFoveationParametersQCOM(GLuint framebuffer, GLuint layer, GLuint focalPoint, GLfloat focalX, GLfloat focalY, GLfloat gainX, GLfloat gainY, GLfloat foveaArea) { tunisGL.tunisFramebufferFoveationParametersQCOM(framebuffer, layer, focalPoint, focalX, focalY, gainX, gainY, foveaArea); }
#define glFramebufferFoveationParametersQCOM tunisFramebufferFoveationParametersQCOM
TUNIS_FORCE_INLINE void  tunisFramebufferParameteri(GLenum target, GLenum pname, GLint param) { tunisGL.tunisFramebufferParameteri(target, pname, param); }
#define glFramebufferParameteri tunisFramebufferParameteri
TUNIS_FORCE_INLINE void  tunisFramebufferPixelLocalStorageSizeEXT(GLuint target, GLsizei size) { tunisGL.tunisFramebufferPixelLocalStorageSizeEXT(target, size); }
#define glFramebufferPixelLocalStorageSizeEXT tunisFramebufferPixelLocalStorageSizeEXT
TUNIS_FORCE_INLINE void  tunisFramebufferReadBufferEXT(GLuint framebuffer, GLenum mode) { tunisGL.tunisFramebufferReadBufferEXT(framebuffer, mode); }
#define glFramebufferReadBufferEXT tunisFramebufferReadBufferEXT
TUNIS_FORCE_INLINE void  tunisFramebufferRenderbuffer(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer) { tunisGL.tunisFramebufferRenderbuffer(target, attachment, renderbuffertarget, renderbuffer); }
#define glFramebufferRenderbuffer tunisFramebufferRenderbuffer
TUNIS_FORCE_INLINE void  tunisFramebufferRenderbufferEXT(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer) { tunisGL.tunisFramebufferRenderbufferEXT(target, attachment, renderbuffertarget, renderbuffer); }
#define glFramebufferRenderbufferEXT tunisFramebufferRenderbufferEXT
TUNIS_FORCE_INLINE void  tunisFramebufferRenderbufferOES(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer) { tunisGL.tunisFramebufferRenderbufferOES(target, attachment, renderbuffertarget, renderbuffer); }
#define glFramebufferRenderbufferOES tunisFramebufferRenderbufferOES
TUNIS_FORCE_INLINE void  tunisFramebufferSampleLocationsfvARB(GLenum target, GLuint start, GLsizei count, const GLfloat * v) { tunisGL.tunisFramebufferSampleLocationsfvARB(target, start, count, v); }
#define glFramebufferSampleLocationsfvARB tunisFramebufferSampleLocationsfvARB
TUNIS_FORCE_INLINE void  tunisFramebufferSampleLocationsfvNV(GLenum target, GLuint start, GLsizei count, const GLfloat * v) { tunisGL.tunisFramebufferSampleLocationsfvNV(target, start, count, v); }
#define glFramebufferSampleLocationsfvNV tunisFramebufferSampleLocationsfvNV
TUNIS_FORCE_INLINE void  tunisFramebufferSamplePositionsfvAMD(GLenum target, GLuint numsamples, GLuint pixelindex, const GLfloat * values) { tunisGL.tunisFramebufferSamplePositionsfvAMD(target, numsamples, pixelindex, values); }
#define glFramebufferSamplePositionsfvAMD tunisFramebufferSamplePositionsfvAMD
TUNIS_FORCE_INLINE void  tunisFramebufferTexture(GLenum target, GLenum attachment, GLuint texture, GLint level) { tunisGL.tunisFramebufferTexture(target, attachment, texture, level); }
#define glFramebufferTexture tunisFramebufferTexture
TUNIS_FORCE_INLINE void  tunisFramebufferTexture1D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level) { tunisGL.tunisFramebufferTexture1D(target, attachment, textarget, texture, level); }
#define glFramebufferTexture1D tunisFramebufferTexture1D
TUNIS_FORCE_INLINE void  tunisFramebufferTexture1DEXT(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level) { tunisGL.tunisFramebufferTexture1DEXT(target, attachment, textarget, texture, level); }
#define glFramebufferTexture1DEXT tunisFramebufferTexture1DEXT
TUNIS_FORCE_INLINE void  tunisFramebufferTexture2D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level) { tunisGL.tunisFramebufferTexture2D(target, attachment, textarget, texture, level); }
#define glFramebufferTexture2D tunisFramebufferTexture2D
TUNIS_FORCE_INLINE void  tunisFramebufferTexture2DDownsampleIMG(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint xscale, GLint yscale) { tunisGL.tunisFramebufferTexture2DDownsampleIMG(target, attachment, textarget, texture, level, xscale, yscale); }
#define glFramebufferTexture2DDownsampleIMG tunisFramebufferTexture2DDownsampleIMG
TUNIS_FORCE_INLINE void  tunisFramebufferTexture2DEXT(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level) { tunisGL.tunisFramebufferTexture2DEXT(target, attachment, textarget, texture, level); }
#define glFramebufferTexture2DEXT tunisFramebufferTexture2DEXT
TUNIS_FORCE_INLINE void  tunisFramebufferTexture2DMultisampleEXT(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLsizei samples) { tunisGL.tunisFramebufferTexture2DMultisampleEXT(target, attachment, textarget, texture, level, samples); }
#define glFramebufferTexture2DMultisampleEXT tunisFramebufferTexture2DMultisampleEXT
TUNIS_FORCE_INLINE void  tunisFramebufferTexture2DMultisampleIMG(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLsizei samples) { tunisGL.tunisFramebufferTexture2DMultisampleIMG(target, attachment, textarget, texture, level, samples); }
#define glFramebufferTexture2DMultisampleIMG tunisFramebufferTexture2DMultisampleIMG
TUNIS_FORCE_INLINE void  tunisFramebufferTexture2DOES(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level) { tunisGL.tunisFramebufferTexture2DOES(target, attachment, textarget, texture, level); }
#define glFramebufferTexture2DOES tunisFramebufferTexture2DOES
TUNIS_FORCE_INLINE void  tunisFramebufferTexture3D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset) { tunisGL.tunisFramebufferTexture3D(target, attachment, textarget, texture, level, zoffset); }
#define glFramebufferTexture3D tunisFramebufferTexture3D
TUNIS_FORCE_INLINE void  tunisFramebufferTexture3DEXT(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset) { tunisGL.tunisFramebufferTexture3DEXT(target, attachment, textarget, texture, level, zoffset); }
#define glFramebufferTexture3DEXT tunisFramebufferTexture3DEXT
TUNIS_FORCE_INLINE void  tunisFramebufferTexture3DOES(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset) { tunisGL.tunisFramebufferTexture3DOES(target, attachment, textarget, texture, level, zoffset); }
#define glFramebufferTexture3DOES tunisFramebufferTexture3DOES
TUNIS_FORCE_INLINE void  tunisFramebufferTextureARB(GLenum target, GLenum attachment, GLuint texture, GLint level) { tunisGL.tunisFramebufferTextureARB(target, attachment, texture, level); }
#define glFramebufferTextureARB tunisFramebufferTextureARB
TUNIS_FORCE_INLINE void  tunisFramebufferTextureEXT(GLenum target, GLenum attachment, GLuint texture, GLint level) { tunisGL.tunisFramebufferTextureEXT(target, attachment, texture, level); }
#define glFramebufferTextureEXT tunisFramebufferTextureEXT
TUNIS_FORCE_INLINE void  tunisFramebufferTextureFaceARB(GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face) { tunisGL.tunisFramebufferTextureFaceARB(target, attachment, texture, level, face); }
#define glFramebufferTextureFaceARB tunisFramebufferTextureFaceARB
TUNIS_FORCE_INLINE void  tunisFramebufferTextureFaceEXT(GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face) { tunisGL.tunisFramebufferTextureFaceEXT(target, attachment, texture, level, face); }
#define glFramebufferTextureFaceEXT tunisFramebufferTextureFaceEXT
TUNIS_FORCE_INLINE void  tunisFramebufferTextureLayer(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer) { tunisGL.tunisFramebufferTextureLayer(target, attachment, texture, level, layer); }
#define glFramebufferTextureLayer tunisFramebufferTextureLayer
TUNIS_FORCE_INLINE void  tunisFramebufferTextureLayerARB(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer) { tunisGL.tunisFramebufferTextureLayerARB(target, attachment, texture, level, layer); }
#define glFramebufferTextureLayerARB tunisFramebufferTextureLayerARB
TUNIS_FORCE_INLINE void  tunisFramebufferTextureLayerDownsampleIMG(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer, GLint xscale, GLint yscale) { tunisGL.tunisFramebufferTextureLayerDownsampleIMG(target, attachment, texture, level, layer, xscale, yscale); }
#define glFramebufferTextureLayerDownsampleIMG tunisFramebufferTextureLayerDownsampleIMG
TUNIS_FORCE_INLINE void  tunisFramebufferTextureLayerEXT(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer) { tunisGL.tunisFramebufferTextureLayerEXT(target, attachment, texture, level, layer); }
#define glFramebufferTextureLayerEXT tunisFramebufferTextureLayerEXT
TUNIS_FORCE_INLINE void  tunisFramebufferTextureMultisampleMultiviewOVR(GLenum target, GLenum attachment, GLuint texture, GLint level, GLsizei samples, GLint baseViewIndex, GLsizei numViews) { tunisGL.tunisFramebufferTextureMultisampleMultiviewOVR(target, attachment, texture, level, samples, baseViewIndex, numViews); }
#define glFramebufferTextureMultisampleMultiviewOVR tunisFramebufferTextureMultisampleMultiviewOVR
TUNIS_FORCE_INLINE void  tunisFramebufferTextureMultiviewOVR(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint baseViewIndex, GLsizei numViews) { tunisGL.tunisFramebufferTextureMultiviewOVR(target, attachment, texture, level, baseViewIndex, numViews); }
#define glFramebufferTextureMultiviewOVR tunisFramebufferTextureMultiviewOVR
TUNIS_FORCE_INLINE void  tunisFramebufferTextureOES(GLenum target, GLenum attachment, GLuint texture, GLint level) { tunisGL.tunisFramebufferTextureOES(target, attachment, texture, level); }
#define glFramebufferTextureOES tunisFramebufferTextureOES
TUNIS_FORCE_INLINE void  tunisFreeObjectBufferATI(GLuint buffer) { tunisGL.tunisFreeObjectBufferATI(buffer); }
#define glFreeObjectBufferATI tunisFreeObjectBufferATI
TUNIS_FORCE_INLINE void  tunisFrontFace(GLenum mode) { tunisGL.tunisFrontFace(mode); }
#define glFrontFace tunisFrontFace
TUNIS_FORCE_INLINE void  tunisFrustum(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar) { tunisGL.tunisFrustum(left, right, bottom, top, zNear, zFar); }
#define glFrustum tunisFrustum
TUNIS_FORCE_INLINE void  tunisFrustumf(GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f) { tunisGL.tunisFrustumf(l, r, b, t, n, f); }
#define glFrustumf tunisFrustumf
TUNIS_FORCE_INLINE void  tunisFrustumfOES(GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f) { tunisGL.tunisFrustumfOES(l, r, b, t, n, f); }
#define glFrustumfOES tunisFrustumfOES
TUNIS_FORCE_INLINE void  tunisFrustumx(GLfixed l, GLfixed r, GLfixed b, GLfixed t, GLfixed n, GLfixed f) { tunisGL.tunisFrustumx(l, r, b, t, n, f); }
#define glFrustumx tunisFrustumx
TUNIS_FORCE_INLINE void  tunisFrustumxOES(GLfixed l, GLfixed r, GLfixed b, GLfixed t, GLfixed n, GLfixed f) { tunisGL.tunisFrustumxOES(l, r, b, t, n, f); }
#define glFrustumxOES tunisFrustumxOES
TUNIS_FORCE_INLINE GLuint tunisGenAsyncMarkersSGIX(GLsizei range) { return tunisGL.tunisGenAsyncMarkersSGIX(range); }
#define glGenAsyncMarkersSGIX tunisGenAsyncMarkersSGIX
TUNIS_FORCE_INLINE void  tunisGenBuffers(GLsizei n, GLuint * buffers) { tunisGL.tunisGenBuffers(n, buffers); }
#define glGenBuffers tunisGenBuffers
TUNIS_FORCE_INLINE void  tunisGenBuffersARB(GLsizei n, GLuint * buffers) { tunisGL.tunisGenBuffersARB(n, buffers); }
#define glGenBuffersARB tunisGenBuffersARB
TUNIS_FORCE_INLINE void  tunisGenFencesAPPLE(GLsizei n, GLuint * fences) { tunisGL.tunisGenFencesAPPLE(n, fences); }
#define glGenFencesAPPLE tunisGenFencesAPPLE
TUNIS_FORCE_INLINE void  tunisGenFencesNV(GLsizei n, GLuint * fences) { tunisGL.tunisGenFencesNV(n, fences); }
#define glGenFencesNV tunisGenFencesNV
TUNIS_FORCE_INLINE GLuint tunisGenFragmentShadersATI(GLuint range) { return tunisGL.tunisGenFragmentShadersATI(range); }
#define glGenFragmentShadersATI tunisGenFragmentShadersATI
TUNIS_FORCE_INLINE void  tunisGenFramebuffers(GLsizei n, GLuint * framebuffers) { tunisGL.tunisGenFramebuffers(n, framebuffers); }
#define glGenFramebuffers tunisGenFramebuffers
TUNIS_FORCE_INLINE void  tunisGenFramebuffersEXT(GLsizei n, GLuint * framebuffers) { tunisGL.tunisGenFramebuffersEXT(n, framebuffers); }
#define glGenFramebuffersEXT tunisGenFramebuffersEXT
TUNIS_FORCE_INLINE void  tunisGenFramebuffersOES(GLsizei n, GLuint * framebuffers) { tunisGL.tunisGenFramebuffersOES(n, framebuffers); }
#define glGenFramebuffersOES tunisGenFramebuffersOES
TUNIS_FORCE_INLINE GLuint tunisGenLists(GLsizei range) { return tunisGL.tunisGenLists(range); }
#define glGenLists tunisGenLists
TUNIS_FORCE_INLINE void  tunisGenNamesAMD(GLenum identifier, GLuint num, GLuint * names) { tunisGL.tunisGenNamesAMD(identifier, num, names); }
#define glGenNamesAMD tunisGenNamesAMD
TUNIS_FORCE_INLINE void  tunisGenOcclusionQueriesNV(GLsizei n, GLuint * ids) { tunisGL.tunisGenOcclusionQueriesNV(n, ids); }
#define glGenOcclusionQueriesNV tunisGenOcclusionQueriesNV
TUNIS_FORCE_INLINE GLuint tunisGenPathsNV(GLsizei range) { return tunisGL.tunisGenPathsNV(range); }
#define glGenPathsNV tunisGenPathsNV
TUNIS_FORCE_INLINE void  tunisGenPerfMonitorsAMD(GLsizei n, GLuint * monitors) { tunisGL.tunisGenPerfMonitorsAMD(n, monitors); }
#define glGenPerfMonitorsAMD tunisGenPerfMonitorsAMD
TUNIS_FORCE_INLINE void  tunisGenProgramPipelines(GLsizei n, GLuint * pipelines) { tunisGL.tunisGenProgramPipelines(n, pipelines); }
#define glGenProgramPipelines tunisGenProgramPipelines
TUNIS_FORCE_INLINE void  tunisGenProgramPipelinesEXT(GLsizei n, GLuint * pipelines) { tunisGL.tunisGenProgramPipelinesEXT(n, pipelines); }
#define glGenProgramPipelinesEXT tunisGenProgramPipelinesEXT
TUNIS_FORCE_INLINE void  tunisGenProgramsARB(GLsizei n, GLuint * programs) { tunisGL.tunisGenProgramsARB(n, programs); }
#define glGenProgramsARB tunisGenProgramsARB
TUNIS_FORCE_INLINE void  tunisGenProgramsNV(GLsizei n, GLuint * programs) { tunisGL.tunisGenProgramsNV(n, programs); }
#define glGenProgramsNV tunisGenProgramsNV
TUNIS_FORCE_INLINE void  tunisGenQueries(GLsizei n, GLuint * ids) { tunisGL.tunisGenQueries(n, ids); }
#define glGenQueries tunisGenQueries
TUNIS_FORCE_INLINE void  tunisGenQueriesARB(GLsizei n, GLuint * ids) { tunisGL.tunisGenQueriesARB(n, ids); }
#define glGenQueriesARB tunisGenQueriesARB
TUNIS_FORCE_INLINE void  tunisGenQueriesEXT(GLsizei n, GLuint * ids) { tunisGL.tunisGenQueriesEXT(n, ids); }
#define glGenQueriesEXT tunisGenQueriesEXT
TUNIS_FORCE_INLINE void  tunisGenQueryResourceTagNV(GLsizei n, GLint * tagIds) { tunisGL.tunisGenQueryResourceTagNV(n, tagIds); }
#define glGenQueryResourceTagNV tunisGenQueryResourceTagNV
TUNIS_FORCE_INLINE void  tunisGenRenderbuffers(GLsizei n, GLuint * renderbuffers) { tunisGL.tunisGenRenderbuffers(n, renderbuffers); }
#define glGenRenderbuffers tunisGenRenderbuffers
TUNIS_FORCE_INLINE void  tunisGenRenderbuffersEXT(GLsizei n, GLuint * renderbuffers) { tunisGL.tunisGenRenderbuffersEXT(n, renderbuffers); }
#define glGenRenderbuffersEXT tunisGenRenderbuffersEXT
TUNIS_FORCE_INLINE void  tunisGenRenderbuffersOES(GLsizei n, GLuint * renderbuffers) { tunisGL.tunisGenRenderbuffersOES(n, renderbuffers); }
#define glGenRenderbuffersOES tunisGenRenderbuffersOES
TUNIS_FORCE_INLINE void  tunisGenSamplers(GLsizei count, GLuint * samplers) { tunisGL.tunisGenSamplers(count, samplers); }
#define glGenSamplers tunisGenSamplers
TUNIS_FORCE_INLINE void  tunisGenSemaphoresEXT(GLsizei n, GLuint * semaphores) { tunisGL.tunisGenSemaphoresEXT(n, semaphores); }
#define glGenSemaphoresEXT tunisGenSemaphoresEXT
TUNIS_FORCE_INLINE GLuint tunisGenSymbolsEXT(GLenum datatype, GLenum storagetype, GLenum range, GLuint components) { return tunisGL.tunisGenSymbolsEXT(datatype, storagetype, range, components); }
#define glGenSymbolsEXT tunisGenSymbolsEXT
TUNIS_FORCE_INLINE void  tunisGenTextures(GLsizei n, GLuint * textures) { tunisGL.tunisGenTextures(n, textures); }
#define glGenTextures tunisGenTextures
TUNIS_FORCE_INLINE void  tunisGenTexturesEXT(GLsizei n, GLuint * textures) { tunisGL.tunisGenTexturesEXT(n, textures); }
#define glGenTexturesEXT tunisGenTexturesEXT
TUNIS_FORCE_INLINE void  tunisGenTransformFeedbacks(GLsizei n, GLuint * ids) { tunisGL.tunisGenTransformFeedbacks(n, ids); }
#define glGenTransformFeedbacks tunisGenTransformFeedbacks
TUNIS_FORCE_INLINE void  tunisGenTransformFeedbacksNV(GLsizei n, GLuint * ids) { tunisGL.tunisGenTransformFeedbacksNV(n, ids); }
#define glGenTransformFeedbacksNV tunisGenTransformFeedbacksNV
TUNIS_FORCE_INLINE void  tunisGenVertexArrays(GLsizei n, GLuint * arrays) { tunisGL.tunisGenVertexArrays(n, arrays); }
#define glGenVertexArrays tunisGenVertexArrays
TUNIS_FORCE_INLINE void  tunisGenVertexArraysAPPLE(GLsizei n, GLuint * arrays) { tunisGL.tunisGenVertexArraysAPPLE(n, arrays); }
#define glGenVertexArraysAPPLE tunisGenVertexArraysAPPLE
TUNIS_FORCE_INLINE void  tunisGenVertexArraysOES(GLsizei n, GLuint * arrays) { tunisGL.tunisGenVertexArraysOES(n, arrays); }
#define glGenVertexArraysOES tunisGenVertexArraysOES
TUNIS_FORCE_INLINE GLuint tunisGenVertexShadersEXT(GLuint range) { return tunisGL.tunisGenVertexShadersEXT(range); }
#define glGenVertexShadersEXT tunisGenVertexShadersEXT
TUNIS_FORCE_INLINE void  tunisGenerateMipmap(GLenum target) { tunisGL.tunisGenerateMipmap(target); }
#define glGenerateMipmap tunisGenerateMipmap
TUNIS_FORCE_INLINE void  tunisGenerateMipmapEXT(GLenum target) { tunisGL.tunisGenerateMipmapEXT(target); }
#define glGenerateMipmapEXT tunisGenerateMipmapEXT
TUNIS_FORCE_INLINE void  tunisGenerateMipmapOES(GLenum target) { tunisGL.tunisGenerateMipmapOES(target); }
#define glGenerateMipmapOES tunisGenerateMipmapOES
TUNIS_FORCE_INLINE void  tunisGenerateMultiTexMipmapEXT(GLenum texunit, GLenum target) { tunisGL.tunisGenerateMultiTexMipmapEXT(texunit, target); }
#define glGenerateMultiTexMipmapEXT tunisGenerateMultiTexMipmapEXT
TUNIS_FORCE_INLINE void  tunisGenerateTextureMipmap(GLuint texture) { tunisGL.tunisGenerateTextureMipmap(texture); }
#define glGenerateTextureMipmap tunisGenerateTextureMipmap
TUNIS_FORCE_INLINE void  tunisGenerateTextureMipmapEXT(GLuint texture, GLenum target) { tunisGL.tunisGenerateTextureMipmapEXT(texture, target); }
#define glGenerateTextureMipmapEXT tunisGenerateTextureMipmapEXT
TUNIS_FORCE_INLINE void  tunisGetActiveAtomicCounterBufferiv(GLuint program, GLuint bufferIndex, GLenum pname, GLint * params) { tunisGL.tunisGetActiveAtomicCounterBufferiv(program, bufferIndex, pname, params); }
#define glGetActiveAtomicCounterBufferiv tunisGetActiveAtomicCounterBufferiv
TUNIS_FORCE_INLINE void  tunisGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLint * size, GLenum * type, GLchar * name) { tunisGL.tunisGetActiveAttrib(program, index, bufSize, length, size, type, name); }
#define glGetActiveAttrib tunisGetActiveAttrib
TUNIS_FORCE_INLINE void  tunisGetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei * length, GLint * size, GLenum * type, GLcharARB * name) { tunisGL.tunisGetActiveAttribARB(programObj, index, maxLength, length, size, type, name); }
#define glGetActiveAttribARB tunisGetActiveAttribARB
TUNIS_FORCE_INLINE void  tunisGetActiveSubroutineName(GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei * length, GLchar * name) { tunisGL.tunisGetActiveSubroutineName(program, shadertype, index, bufsize, length, name); }
#define glGetActiveSubroutineName tunisGetActiveSubroutineName
TUNIS_FORCE_INLINE void  tunisGetActiveSubroutineUniformName(GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei * length, GLchar * name) { tunisGL.tunisGetActiveSubroutineUniformName(program, shadertype, index, bufsize, length, name); }
#define glGetActiveSubroutineUniformName tunisGetActiveSubroutineUniformName
TUNIS_FORCE_INLINE void  tunisGetActiveSubroutineUniformiv(GLuint program, GLenum shadertype, GLuint index, GLenum pname, GLint * values) { tunisGL.tunisGetActiveSubroutineUniformiv(program, shadertype, index, pname, values); }
#define glGetActiveSubroutineUniformiv tunisGetActiveSubroutineUniformiv
TUNIS_FORCE_INLINE void  tunisGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLint * size, GLenum * type, GLchar * name) { tunisGL.tunisGetActiveUniform(program, index, bufSize, length, size, type, name); }
#define glGetActiveUniform tunisGetActiveUniform
TUNIS_FORCE_INLINE void  tunisGetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei * length, GLint * size, GLenum * type, GLcharARB * name) { tunisGL.tunisGetActiveUniformARB(programObj, index, maxLength, length, size, type, name); }
#define glGetActiveUniformARB tunisGetActiveUniformARB
TUNIS_FORCE_INLINE void  tunisGetActiveUniformBlockName(GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei * length, GLchar * uniformBlockName) { tunisGL.tunisGetActiveUniformBlockName(program, uniformBlockIndex, bufSize, length, uniformBlockName); }
#define glGetActiveUniformBlockName tunisGetActiveUniformBlockName
TUNIS_FORCE_INLINE void  tunisGetActiveUniformBlockiv(GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint * params) { tunisGL.tunisGetActiveUniformBlockiv(program, uniformBlockIndex, pname, params); }
#define glGetActiveUniformBlockiv tunisGetActiveUniformBlockiv
TUNIS_FORCE_INLINE void  tunisGetActiveUniformName(GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei * length, GLchar * uniformName) { tunisGL.tunisGetActiveUniformName(program, uniformIndex, bufSize, length, uniformName); }
#define glGetActiveUniformName tunisGetActiveUniformName
TUNIS_FORCE_INLINE void  tunisGetActiveUniformsiv(GLuint program, GLsizei uniformCount, const GLuint * uniformIndices, GLenum pname, GLint * params) { tunisGL.tunisGetActiveUniformsiv(program, uniformCount, uniformIndices, pname, params); }
#define glGetActiveUniformsiv tunisGetActiveUniformsiv
TUNIS_FORCE_INLINE void  tunisGetActiveVaryingNV(GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLsizei * size, GLenum * type, GLchar * name) { tunisGL.tunisGetActiveVaryingNV(program, index, bufSize, length, size, type, name); }
#define glGetActiveVaryingNV tunisGetActiveVaryingNV
TUNIS_FORCE_INLINE void  tunisGetArrayObjectfvATI(GLenum array, GLenum pname, GLfloat * params) { tunisGL.tunisGetArrayObjectfvATI(array, pname, params); }
#define glGetArrayObjectfvATI tunisGetArrayObjectfvATI
TUNIS_FORCE_INLINE void  tunisGetArrayObjectivATI(GLenum array, GLenum pname, GLint * params) { tunisGL.tunisGetArrayObjectivATI(array, pname, params); }
#define glGetArrayObjectivATI tunisGetArrayObjectivATI
TUNIS_FORCE_INLINE void  tunisGetAttachedObjectsARB(GLhandleARB containerObj, GLsizei maxCount, GLsizei * count, GLhandleARB * obj) { tunisGL.tunisGetAttachedObjectsARB(containerObj, maxCount, count, obj); }
#define glGetAttachedObjectsARB tunisGetAttachedObjectsARB
TUNIS_FORCE_INLINE void  tunisGetAttachedShaders(GLuint program, GLsizei maxCount, GLsizei * count, GLuint * shaders) { tunisGL.tunisGetAttachedShaders(program, maxCount, count, shaders); }
#define glGetAttachedShaders tunisGetAttachedShaders
TUNIS_FORCE_INLINE GLint tunisGetAttribLocation(GLuint program, const GLchar * name) { return tunisGL.tunisGetAttribLocation(program, name); }
#define glGetAttribLocation tunisGetAttribLocation
TUNIS_FORCE_INLINE GLint tunisGetAttribLocationARB(GLhandleARB programObj, const GLcharARB * name) { return tunisGL.tunisGetAttribLocationARB(programObj, name); }
#define glGetAttribLocationARB tunisGetAttribLocationARB
TUNIS_FORCE_INLINE void  tunisGetBooleanIndexedvEXT(GLenum target, GLuint index, GLboolean * data) { tunisGL.tunisGetBooleanIndexedvEXT(target, index, data); }
#define glGetBooleanIndexedvEXT tunisGetBooleanIndexedvEXT
TUNIS_FORCE_INLINE void  tunisGetBooleani_v(GLenum target, GLuint index, GLboolean * data) { tunisGL.tunisGetBooleani_v(target, index, data); }
#define glGetBooleani_v tunisGetBooleani_v
TUNIS_FORCE_INLINE void  tunisGetBooleanv(GLenum pname, GLboolean * data) { tunisGL.tunisGetBooleanv(pname, data); }
#define glGetBooleanv tunisGetBooleanv
TUNIS_FORCE_INLINE void  tunisGetBufferParameteri64v(GLenum target, GLenum pname, GLint64 * params) { tunisGL.tunisGetBufferParameteri64v(target, pname, params); }
#define glGetBufferParameteri64v tunisGetBufferParameteri64v
TUNIS_FORCE_INLINE void  tunisGetBufferParameteriv(GLenum target, GLenum pname, GLint * params) { tunisGL.tunisGetBufferParameteriv(target, pname, params); }
#define glGetBufferParameteriv tunisGetBufferParameteriv
TUNIS_FORCE_INLINE void  tunisGetBufferParameterivARB(GLenum target, GLenum pname, GLint * params) { tunisGL.tunisGetBufferParameterivARB(target, pname, params); }
#define glGetBufferParameterivARB tunisGetBufferParameterivARB
TUNIS_FORCE_INLINE void  tunisGetBufferParameterui64vNV(GLenum target, GLenum pname, GLuint64EXT * params) { tunisGL.tunisGetBufferParameterui64vNV(target, pname, params); }
#define glGetBufferParameterui64vNV tunisGetBufferParameterui64vNV
TUNIS_FORCE_INLINE void  tunisGetBufferPointerv(GLenum target, GLenum pname, void ** params) { tunisGL.tunisGetBufferPointerv(target, pname, params); }
#define glGetBufferPointerv tunisGetBufferPointerv
TUNIS_FORCE_INLINE void  tunisGetBufferPointervARB(GLenum target, GLenum pname, void ** params) { tunisGL.tunisGetBufferPointervARB(target, pname, params); }
#define glGetBufferPointervARB tunisGetBufferPointervARB
TUNIS_FORCE_INLINE void  tunisGetBufferPointervOES(GLenum target, GLenum pname, void ** params) { tunisGL.tunisGetBufferPointervOES(target, pname, params); }
#define glGetBufferPointervOES tunisGetBufferPointervOES
TUNIS_FORCE_INLINE void  tunisGetBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, void * data) { tunisGL.tunisGetBufferSubData(target, offset, size, data); }
#define glGetBufferSubData tunisGetBufferSubData
TUNIS_FORCE_INLINE void  tunisGetBufferSubDataARB(GLenum target, GLintptrARB offset, GLsizeiptrARB size, void * data) { tunisGL.tunisGetBufferSubDataARB(target, offset, size, data); }
#define glGetBufferSubDataARB tunisGetBufferSubDataARB
TUNIS_FORCE_INLINE void  tunisGetClipPlane(GLenum plane, GLdouble * equation) { tunisGL.tunisGetClipPlane(plane, equation); }
#define glGetClipPlane tunisGetClipPlane
TUNIS_FORCE_INLINE void  tunisGetClipPlanef(GLenum plane, GLfloat * equation) { tunisGL.tunisGetClipPlanef(plane, equation); }
#define glGetClipPlanef tunisGetClipPlanef
TUNIS_FORCE_INLINE void  tunisGetClipPlanefOES(GLenum plane, GLfloat * equation) { tunisGL.tunisGetClipPlanefOES(plane, equation); }
#define glGetClipPlanefOES tunisGetClipPlanefOES
TUNIS_FORCE_INLINE void  tunisGetClipPlanex(GLenum plane, GLfixed * equation) { tunisGL.tunisGetClipPlanex(plane, equation); }
#define glGetClipPlanex tunisGetClipPlanex
TUNIS_FORCE_INLINE void  tunisGetClipPlanexOES(GLenum plane, GLfixed * equation) { tunisGL.tunisGetClipPlanexOES(plane, equation); }
#define glGetClipPlanexOES tunisGetClipPlanexOES
TUNIS_FORCE_INLINE void  tunisGetColorTable(GLenum target, GLenum format, GLenum type, void * table) { tunisGL.tunisGetColorTable(target, format, type, table); }
#define glGetColorTable tunisGetColorTable
TUNIS_FORCE_INLINE void  tunisGetColorTableEXT(GLenum target, GLenum format, GLenum type, void * data) { tunisGL.tunisGetColorTableEXT(target, format, type, data); }
#define glGetColorTableEXT tunisGetColorTableEXT
TUNIS_FORCE_INLINE void  tunisGetColorTableParameterfv(GLenum target, GLenum pname, GLfloat * params) { tunisGL.tunisGetColorTableParameterfv(target, pname, params); }
#define glGetColorTableParameterfv tunisGetColorTableParameterfv
TUNIS_FORCE_INLINE void  tunisGetColorTableParameterfvEXT(GLenum target, GLenum pname, GLfloat * params) { tunisGL.tunisGetColorTableParameterfvEXT(target, pname, params); }
#define glGetColorTableParameterfvEXT tunisGetColorTableParameterfvEXT
TUNIS_FORCE_INLINE void  tunisGetColorTableParameterfvSGI(GLenum target, GLenum pname, GLfloat * params) { tunisGL.tunisGetColorTableParameterfvSGI(target, pname, params); }
#define glGetColorTableParameterfvSGI tunisGetColorTableParameterfvSGI
TUNIS_FORCE_INLINE void  tunisGetColorTableParameteriv(GLenum target, GLenum pname, GLint * params) { tunisGL.tunisGetColorTableParameteriv(target, pname, params); }
#define glGetColorTableParameteriv tunisGetColorTableParameteriv
TUNIS_FORCE_INLINE void  tunisGetColorTableParameterivEXT(GLenum target, GLenum pname, GLint * params) { tunisGL.tunisGetColorTableParameterivEXT(target, pname, params); }
#define glGetColorTableParameterivEXT tunisGetColorTableParameterivEXT
TUNIS_FORCE_INLINE void  tunisGetColorTableParameterivSGI(GLenum target, GLenum pname, GLint * params) { tunisGL.tunisGetColorTableParameterivSGI(target, pname, params); }
#define glGetColorTableParameterivSGI tunisGetColorTableParameterivSGI
TUNIS_FORCE_INLINE void  tunisGetColorTableSGI(GLenum target, GLenum format, GLenum type, void * table) { tunisGL.tunisGetColorTableSGI(target, format, type, table); }
#define glGetColorTableSGI tunisGetColorTableSGI
TUNIS_FORCE_INLINE void  tunisGetCombinerInputParameterfvNV(GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLfloat * params) { tunisGL.tunisGetCombinerInputParameterfvNV(stage, portion, variable, pname, params); }
#define glGetCombinerInputParameterfvNV tunisGetCombinerInputParameterfvNV
TUNIS_FORCE_INLINE void  tunisGetCombinerInputParameterivNV(GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLint * params) { tunisGL.tunisGetCombinerInputParameterivNV(stage, portion, variable, pname, params); }
#define glGetCombinerInputParameterivNV tunisGetCombinerInputParameterivNV
TUNIS_FORCE_INLINE void  tunisGetCombinerOutputParameterfvNV(GLenum stage, GLenum portion, GLenum pname, GLfloat * params) { tunisGL.tunisGetCombinerOutputParameterfvNV(stage, portion, pname, params); }
#define glGetCombinerOutputParameterfvNV tunisGetCombinerOutputParameterfvNV
TUNIS_FORCE_INLINE void  tunisGetCombinerOutputParameterivNV(GLenum stage, GLenum portion, GLenum pname, GLint * params) { tunisGL.tunisGetCombinerOutputParameterivNV(stage, portion, pname, params); }
#define glGetCombinerOutputParameterivNV tunisGetCombinerOutputParameterivNV
TUNIS_FORCE_INLINE void  tunisGetCombinerStageParameterfvNV(GLenum stage, GLenum pname, GLfloat * params) { tunisGL.tunisGetCombinerStageParameterfvNV(stage, pname, params); }
#define glGetCombinerStageParameterfvNV tunisGetCombinerStageParameterfvNV
TUNIS_FORCE_INLINE GLuint tunisGetCommandHeaderNV(GLenum tokenID, GLuint size) { return tunisGL.tunisGetCommandHeaderNV(tokenID, size); }
#define glGetCommandHeaderNV tunisGetCommandHeaderNV
TUNIS_FORCE_INLINE void  tunisGetCompressedMultiTexImageEXT(GLenum texunit, GLenum target, GLint lod, void * img) { tunisGL.tunisGetCompressedMultiTexImageEXT(texunit, target, lod, img); }
#define glGetCompressedMultiTexImageEXT tunisGetCompressedMultiTexImageEXT
TUNIS_FORCE_INLINE void  tunisGetCompressedTexImage(GLenum target, GLint level, void * img) { tunisGL.tunisGetCompressedTexImage(target, level, img); }
#define glGetCompressedTexImage tunisGetCompressedTexImage
TUNIS_FORCE_INLINE void  tunisGetCompressedTexImageARB(GLenum target, GLint level, void * img) { tunisGL.tunisGetCompressedTexImageARB(target, level, img); }
#define glGetCompressedTexImageARB tunisGetCompressedTexImageARB
TUNIS_FORCE_INLINE void  tunisGetCompressedTextureImage(GLuint texture, GLint level, GLsizei bufSize, void * pixels) { tunisGL.tunisGetCompressedTextureImage(texture, level, bufSize, pixels); }
#define glGetCompressedTextureImage tunisGetCompressedTextureImage
TUNIS_FORCE_INLINE void  tunisGetCompressedTextureImageEXT(GLuint texture, GLenum target, GLint lod, void * img) { tunisGL.tunisGetCompressedTextureImageEXT(texture, target, lod, img); }
#define glGetCompressedTextureImageEXT tunisGetCompressedTextureImageEXT
TUNIS_FORCE_INLINE void  tunisGetCompressedTextureSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei bufSize, void * pixels) { tunisGL.tunisGetCompressedTextureSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, bufSize, pixels); }
#define glGetCompressedTextureSubImage tunisGetCompressedTextureSubImage
TUNIS_FORCE_INLINE void  tunisGetConvolutionFilter(GLenum target, GLenum format, GLenum type, void * image) { tunisGL.tunisGetConvolutionFilter(target, format, type, image); }
#define glGetConvolutionFilter tunisGetConvolutionFilter
TUNIS_FORCE_INLINE void  tunisGetConvolutionFilterEXT(GLenum target, GLenum format, GLenum type, void * image) { tunisGL.tunisGetConvolutionFilterEXT(target, format, type, image); }
#define glGetConvolutionFilterEXT tunisGetConvolutionFilterEXT
TUNIS_FORCE_INLINE void  tunisGetConvolutionParameterfv(GLenum target, GLenum pname, GLfloat * params) { tunisGL.tunisGetConvolutionParameterfv(target, pname, params); }
#define glGetConvolutionParameterfv tunisGetConvolutionParameterfv
TUNIS_FORCE_INLINE void  tunisGetConvolutionParameterfvEXT(GLenum target, GLenum pname, GLfloat * params) { tunisGL.tunisGetConvolutionParameterfvEXT(target, pname, params); }
#define glGetConvolutionParameterfvEXT tunisGetConvolutionParameterfvEXT
TUNIS_FORCE_INLINE void  tunisGetConvolutionParameteriv(GLenum target, GLenum pname, GLint * params) { tunisGL.tunisGetConvolutionParameteriv(target, pname, params); }
#define glGetConvolutionParameteriv tunisGetConvolutionParameteriv
TUNIS_FORCE_INLINE void  tunisGetConvolutionParameterivEXT(GLenum target, GLenum pname, GLint * params) { tunisGL.tunisGetConvolutionParameterivEXT(target, pname, params); }
#define glGetConvolutionParameterivEXT tunisGetConvolutionParameterivEXT
TUNIS_FORCE_INLINE void  tunisGetConvolutionParameterxvOES(GLenum target, GLenum pname, GLfixed * params) { tunisGL.tunisGetConvolutionParameterxvOES(target, pname, params); }
#define glGetConvolutionParameterxvOES tunisGetConvolutionParameterxvOES
TUNIS_FORCE_INLINE void  tunisGetCoverageModulationTableNV(GLsizei bufsize, GLfloat * v) { tunisGL.tunisGetCoverageModulationTableNV(bufsize, v); }
#define glGetCoverageModulationTableNV tunisGetCoverageModulationTableNV
TUNIS_FORCE_INLINE GLuint tunisGetDebugMessageLog(GLuint count, GLsizei bufSize, GLenum * sources, GLenum * types, GLuint * ids, GLenum * severities, GLsizei * lengths, GLchar * messageLog) { return tunisGL.tunisGetDebugMessageLog(count, bufSize, sources, types, ids, severities, lengths, messageLog); }
#define glGetDebugMessageLog tunisGetDebugMessageLog
TUNIS_FORCE_INLINE GLuint tunisGetDebugMessageLogAMD(GLuint count, GLsizei bufsize, GLenum * categories, GLuint * severities, GLuint * ids, GLsizei * lengths, GLchar * message) { return tunisGL.tunisGetDebugMessageLogAMD(count, bufsize, categories, severities, ids, lengths, message); }
#define glGetDebugMessageLogAMD tunisGetDebugMessageLogAMD
TUNIS_FORCE_INLINE GLuint tunisGetDebugMessageLogARB(GLuint count, GLsizei bufSize, GLenum * sources, GLenum * types, GLuint * ids, GLenum * severities, GLsizei * lengths, GLchar * messageLog) { return tunisGL.tunisGetDebugMessageLogARB(count, bufSize, sources, types, ids, severities, lengths, messageLog); }
#define glGetDebugMessageLogARB tunisGetDebugMessageLogARB
TUNIS_FORCE_INLINE GLuint tunisGetDebugMessageLogKHR(GLuint count, GLsizei bufSize, GLenum * sources, GLenum * types, GLuint * ids, GLenum * severities, GLsizei * lengths, GLchar * messageLog) { return tunisGL.tunisGetDebugMessageLogKHR(count, bufSize, sources, types, ids, severities, lengths, messageLog); }
#define glGetDebugMessageLogKHR tunisGetDebugMessageLogKHR
TUNIS_FORCE_INLINE void  tunisGetDetailTexFuncSGIS(GLenum target, GLfloat * points) { tunisGL.tunisGetDetailTexFuncSGIS(target, points); }
#define glGetDetailTexFuncSGIS tunisGetDetailTexFuncSGIS
TUNIS_FORCE_INLINE void  tunisGetDoubleIndexedvEXT(GLenum target, GLuint index, GLdouble * data) { tunisGL.tunisGetDoubleIndexedvEXT(target, index, data); }
#define glGetDoubleIndexedvEXT tunisGetDoubleIndexedvEXT
TUNIS_FORCE_INLINE void  tunisGetDoublei_v(GLenum target, GLuint index, GLdouble * data) { tunisGL.tunisGetDoublei_v(target, index, data); }
#define glGetDoublei_v tunisGetDoublei_v
TUNIS_FORCE_INLINE void  tunisGetDoublei_vEXT(GLenum pname, GLuint index, GLdouble * params) { tunisGL.tunisGetDoublei_vEXT(pname, index, params); }
#define glGetDoublei_vEXT tunisGetDoublei_vEXT
TUNIS_FORCE_INLINE void  tunisGetDoublev(GLenum pname, GLdouble * data) { tunisGL.tunisGetDoublev(pname, data); }
#define glGetDoublev tunisGetDoublev
TUNIS_FORCE_INLINE void  tunisGetDriverControlStringQCOM(GLuint driverControl, GLsizei bufSize, GLsizei * length, GLchar * driverControlString) { tunisGL.tunisGetDriverControlStringQCOM(driverControl, bufSize, length, driverControlString); }
#define glGetDriverControlStringQCOM tunisGetDriverControlStringQCOM
TUNIS_FORCE_INLINE void  tunisGetDriverControlsQCOM(GLint * num, GLsizei size, GLuint * driverControls) { tunisGL.tunisGetDriverControlsQCOM(num, size, driverControls); }
#define glGetDriverControlsQCOM tunisGetDriverControlsQCOM
TUNIS_FORCE_INLINE GLenum tunisGetError(void) { return tunisGL.tunisGetError(); }
#define glGetError tunisGetError
TUNIS_FORCE_INLINE void  tunisGetFenceivNV(GLuint fence, GLenum pname, GLint * params) { tunisGL.tunisGetFenceivNV(fence, pname, params); }
#define glGetFenceivNV tunisGetFenceivNV
TUNIS_FORCE_INLINE void  tunisGetFinalCombinerInputParameterfvNV(GLenum variable, GLenum pname, GLfloat * params) { tunisGL.tunisGetFinalCombinerInputParameterfvNV(variable, pname, params); }
#define glGetFinalCombinerInputParameterfvNV tunisGetFinalCombinerInputParameterfvNV
TUNIS_FORCE_INLINE void  tunisGetFinalCombinerInputParameterivNV(GLenum variable, GLenum pname, GLint * params) { tunisGL.tunisGetFinalCombinerInputParameterivNV(variable, pname, params); }
#define glGetFinalCombinerInputParameterivNV tunisGetFinalCombinerInputParameterivNV
TUNIS_FORCE_INLINE void  tunisGetFirstPerfQueryIdINTEL(GLuint * queryId) { tunisGL.tunisGetFirstPerfQueryIdINTEL(queryId); }
#define glGetFirstPerfQueryIdINTEL tunisGetFirstPerfQueryIdINTEL
TUNIS_FORCE_INLINE void  tunisGetFixedv(GLenum pname, GLfixed * params) { tunisGL.tunisGetFixedv(pname, params); }
#define glGetFixedv tunisGetFixedv
TUNIS_FORCE_INLINE void  tunisGetFixedvOES(GLenum pname, GLfixed * params) { tunisGL.tunisGetFixedvOES(pname, params); }
#define glGetFixedvOES tunisGetFixedvOES
TUNIS_FORCE_INLINE void  tunisGetFloatIndexedvEXT(GLenum target, GLuint index, GLfloat * data) { tunisGL.tunisGetFloatIndexedvEXT(target, index, data); }
#define glGetFloatIndexedvEXT tunisGetFloatIndexedvEXT
TUNIS_FORCE_INLINE void  tunisGetFloati_v(GLenum target, GLuint index, GLfloat * data) { tunisGL.tunisGetFloati_v(target, index, data); }
#define glGetFloati_v tunisGetFloati_v
TUNIS_FORCE_INLINE void  tunisGetFloati_vEXT(GLenum pname, GLuint index, GLfloat * params) { tunisGL.tunisGetFloati_vEXT(pname, index, params); }
#define glGetFloati_vEXT tunisGetFloati_vEXT
TUNIS_FORCE_INLINE void  tunisGetFloati_vNV(GLenum target, GLuint index, GLfloat * data) { tunisGL.tunisGetFloati_vNV(target, index, data); }
#define glGetFloati_vNV tunisGetFloati_vNV
TUNIS_FORCE_INLINE void  tunisGetFloati_vOES(GLenum target, GLuint index, GLfloat * data) { tunisGL.tunisGetFloati_vOES(target, index, data); }
#define glGetFloati_vOES tunisGetFloati_vOES
TUNIS_FORCE_INLINE void  tunisGetFloatv(GLenum pname, GLfloat * data) { tunisGL.tunisGetFloatv(pname, data); }
#define glGetFloatv tunisGetFloatv
TUNIS_FORCE_INLINE void  tunisGetFogFuncSGIS(GLfloat * points) { tunisGL.tunisGetFogFuncSGIS(points); }
#define glGetFogFuncSGIS tunisGetFogFuncSGIS
TUNIS_FORCE_INLINE GLint tunisGetFragDataIndex(GLuint program, const GLchar * name) { return tunisGL.tunisGetFragDataIndex(program, name); }
#define glGetFragDataIndex tunisGetFragDataIndex
TUNIS_FORCE_INLINE GLint tunisGetFragDataIndexEXT(GLuint program, const GLchar * name) { return tunisGL.tunisGetFragDataIndexEXT(program, name); }
#define glGetFragDataIndexEXT tunisGetFragDataIndexEXT
TUNIS_FORCE_INLINE GLint tunisGetFragDataLocation(GLuint program, const GLchar * name) { return tunisGL.tunisGetFragDataLocation(program, name); }
#define glGetFragDataLocation tunisGetFragDataLocation
TUNIS_FORCE_INLINE GLint tunisGetFragDataLocationEXT(GLuint program, const GLchar * name) { return tunisGL.tunisGetFragDataLocationEXT(program, name); }
#define glGetFragDataLocationEXT tunisGetFragDataLocationEXT
TUNIS_FORCE_INLINE void  tunisGetFragmentLightfvSGIX(GLenum light, GLenum pname, GLfloat * params) { tunisGL.tunisGetFragmentLightfvSGIX(light, pname, params); }
#define glGetFragmentLightfvSGIX tunisGetFragmentLightfvSGIX
TUNIS_FORCE_INLINE void  tunisGetFragmentLightivSGIX(GLenum light, GLenum pname, GLint * params) { tunisGL.tunisGetFragmentLightivSGIX(light, pname, params); }
#define glGetFragmentLightivSGIX tunisGetFragmentLightivSGIX
TUNIS_FORCE_INLINE void  tunisGetFragmentMaterialfvSGIX(GLenum face, GLenum pname, GLfloat * params) { tunisGL.tunisGetFragmentMaterialfvSGIX(face, pname, params); }
#define glGetFragmentMaterialfvSGIX tunisGetFragmentMaterialfvSGIX
TUNIS_FORCE_INLINE void  tunisGetFragmentMaterialivSGIX(GLenum face, GLenum pname, GLint * params) { tunisGL.tunisGetFragmentMaterialivSGIX(face, pname, params); }
#define glGetFragmentMaterialivSGIX tunisGetFragmentMaterialivSGIX
TUNIS_FORCE_INLINE void  tunisGetFramebufferAttachmentParameteriv(GLenum target, GLenum attachment, GLenum pname, GLint * params) { tunisGL.tunisGetFramebufferAttachmentParameteriv(target, attachment, pname, params); }
#define glGetFramebufferAttachmentParameteriv tunisGetFramebufferAttachmentParameteriv
TUNIS_FORCE_INLINE void  tunisGetFramebufferAttachmentParameterivEXT(GLenum target, GLenum attachment, GLenum pname, GLint * params) { tunisGL.tunisGetFramebufferAttachmentParameterivEXT(target, attachment, pname, params); }
#define glGetFramebufferAttachmentParameterivEXT tunisGetFramebufferAttachmentParameterivEXT
TUNIS_FORCE_INLINE void  tunisGetFramebufferAttachmentParameterivOES(GLenum target, GLenum attachment, GLenum pname, GLint * params) { tunisGL.tunisGetFramebufferAttachmentParameterivOES(target, attachment, pname, params); }
#define glGetFramebufferAttachmentParameterivOES tunisGetFramebufferAttachmentParameterivOES
TUNIS_FORCE_INLINE void  tunisGetFramebufferParameterfvAMD(GLenum target, GLenum pname, GLuint numsamples, GLuint pixelindex, GLsizei size, GLfloat * values) { tunisGL.tunisGetFramebufferParameterfvAMD(target, pname, numsamples, pixelindex, size, values); }
#define glGetFramebufferParameterfvAMD tunisGetFramebufferParameterfvAMD
TUNIS_FORCE_INLINE void  tunisGetFramebufferParameteriv(GLenum target, GLenum pname, GLint * params) { tunisGL.tunisGetFramebufferParameteriv(target, pname, params); }
#define glGetFramebufferParameteriv tunisGetFramebufferParameteriv
TUNIS_FORCE_INLINE void  tunisGetFramebufferParameterivEXT(GLuint framebuffer, GLenum pname, GLint * params) { tunisGL.tunisGetFramebufferParameterivEXT(framebuffer, pname, params); }
#define glGetFramebufferParameterivEXT tunisGetFramebufferParameterivEXT
TUNIS_FORCE_INLINE GLsizei tunisGetFramebufferPixelLocalStorageSizeEXT(GLuint target) { return tunisGL.tunisGetFramebufferPixelLocalStorageSizeEXT(target); }
#define glGetFramebufferPixelLocalStorageSizeEXT tunisGetFramebufferPixelLocalStorageSizeEXT
TUNIS_FORCE_INLINE GLenum tunisGetGraphicsResetStatus(void) { return tunisGL.tunisGetGraphicsResetStatus(); }
#define glGetGraphicsResetStatus tunisGetGraphicsResetStatus
TUNIS_FORCE_INLINE GLenum tunisGetGraphicsResetStatusARB(void) { return tunisGL.tunisGetGraphicsResetStatusARB(); }
#define glGetGraphicsResetStatusARB tunisGetGraphicsResetStatusARB
TUNIS_FORCE_INLINE GLenum tunisGetGraphicsResetStatusEXT(void) { return tunisGL.tunisGetGraphicsResetStatusEXT(); }
#define glGetGraphicsResetStatusEXT tunisGetGraphicsResetStatusEXT
TUNIS_FORCE_INLINE GLenum tunisGetGraphicsResetStatusKHR(void) { return tunisGL.tunisGetGraphicsResetStatusKHR(); }
#define glGetGraphicsResetStatusKHR tunisGetGraphicsResetStatusKHR
TUNIS_FORCE_INLINE GLhandleARB tunisGetHandleARB(GLenum pname) { return tunisGL.tunisGetHandleARB(pname); }
#define glGetHandleARB tunisGetHandleARB
TUNIS_FORCE_INLINE void  tunisGetHistogram(GLenum target, GLboolean reset, GLenum format, GLenum type, void * values) { tunisGL.tunisGetHistogram(target, reset, format, type, values); }
#define glGetHistogram tunisGetHistogram
TUNIS_FORCE_INLINE void  tunisGetHistogramEXT(GLenum target, GLboolean reset, GLenum format, GLenum type, void * values) { tunisGL.tunisGetHistogramEXT(target, reset, format, type, values); }
#define glGetHistogramEXT tunisGetHistogramEXT
TUNIS_FORCE_INLINE void  tunisGetHistogramParameterfv(GLenum target, GLenum pname, GLfloat * params) { tunisGL.tunisGetHistogramParameterfv(target, pname, params); }
#define glGetHistogramParameterfv tunisGetHistogramParameterfv
TUNIS_FORCE_INLINE void  tunisGetHistogramParameterfvEXT(GLenum target, GLenum pname, GLfloat * params) { tunisGL.tunisGetHistogramParameterfvEXT(target, pname, params); }
#define glGetHistogramParameterfvEXT tunisGetHistogramParameterfvEXT
TUNIS_FORCE_INLINE void  tunisGetHistogramParameteriv(GLenum target, GLenum pname, GLint * params) { tunisGL.tunisGetHistogramParameteriv(target, pname, params); }
#define glGetHistogramParameteriv tunisGetHistogramParameteriv
TUNIS_FORCE_INLINE void  tunisGetHistogramParameterivEXT(GLenum target, GLenum pname, GLint * params) { tunisGL.tunisGetHistogramParameterivEXT(target, pname, params); }
#define glGetHistogramParameterivEXT tunisGetHistogramParameterivEXT
TUNIS_FORCE_INLINE void  tunisGetHistogramParameterxvOES(GLenum target, GLenum pname, GLfixed * params) { tunisGL.tunisGetHistogramParameterxvOES(target, pname, params); }
#define glGetHistogramParameterxvOES tunisGetHistogramParameterxvOES
TUNIS_FORCE_INLINE GLuint64 tunisGetImageHandleARB(GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format) { return tunisGL.tunisGetImageHandleARB(texture, level, layered, layer, format); }
#define glGetImageHandleARB tunisGetImageHandleARB
TUNIS_FORCE_INLINE GLuint64 tunisGetImageHandleNV(GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format) { return tunisGL.tunisGetImageHandleNV(texture, level, layered, layer, format); }
#define glGetImageHandleNV tunisGetImageHandleNV
TUNIS_FORCE_INLINE void  tunisGetImageTransformParameterfvHP(GLenum target, GLenum pname, GLfloat * params) { tunisGL.tunisGetImageTransformParameterfvHP(target, pname, params); }
#define glGetImageTransformParameterfvHP tunisGetImageTransformParameterfvHP
TUNIS_FORCE_INLINE void  tunisGetImageTransformParameterivHP(GLenum target, GLenum pname, GLint * params) { tunisGL.tunisGetImageTransformParameterivHP(target, pname, params); }
#define glGetImageTransformParameterivHP tunisGetImageTransformParameterivHP
TUNIS_FORCE_INLINE void  tunisGetInfoLogARB(GLhandleARB obj, GLsizei maxLength, GLsizei * length, GLcharARB * infoLog) { tunisGL.tunisGetInfoLogARB(obj, maxLength, length, infoLog); }
#define glGetInfoLogARB tunisGetInfoLogARB
TUNIS_FORCE_INLINE GLint tunisGetInstrumentsSGIX(void) { return tunisGL.tunisGetInstrumentsSGIX(); }
#define glGetInstrumentsSGIX tunisGetInstrumentsSGIX
TUNIS_FORCE_INLINE void  tunisGetInteger64i_v(GLenum target, GLuint index, GLint64 * data) { tunisGL.tunisGetInteger64i_v(target, index, data); }
#define glGetInteger64i_v tunisGetInteger64i_v
TUNIS_FORCE_INLINE void  tunisGetInteger64v(GLenum pname, GLint64 * data) { tunisGL.tunisGetInteger64v(pname, data); }
#define glGetInteger64v tunisGetInteger64v
TUNIS_FORCE_INLINE void  tunisGetInteger64vAPPLE(GLenum pname, GLint64 * params) { tunisGL.tunisGetInteger64vAPPLE(pname, params); }
#define glGetInteger64vAPPLE tunisGetInteger64vAPPLE
TUNIS_FORCE_INLINE void  tunisGetIntegerIndexedvEXT(GLenum target, GLuint index, GLint * data) { tunisGL.tunisGetIntegerIndexedvEXT(target, index, data); }
#define glGetIntegerIndexedvEXT tunisGetIntegerIndexedvEXT
TUNIS_FORCE_INLINE void  tunisGetIntegeri_v(GLenum target, GLuint index, GLint * data) { tunisGL.tunisGetIntegeri_v(target, index, data); }
#define glGetIntegeri_v tunisGetIntegeri_v
TUNIS_FORCE_INLINE void  tunisGetIntegeri_vEXT(GLenum target, GLuint index, GLint * data) { tunisGL.tunisGetIntegeri_vEXT(target, index, data); }
#define glGetIntegeri_vEXT tunisGetIntegeri_vEXT
TUNIS_FORCE_INLINE void  tunisGetIntegerui64i_vNV(GLenum value, GLuint index, GLuint64EXT * result) { tunisGL.tunisGetIntegerui64i_vNV(value, index, result); }
#define glGetIntegerui64i_vNV tunisGetIntegerui64i_vNV
TUNIS_FORCE_INLINE void  tunisGetIntegerui64vNV(GLenum value, GLuint64EXT * result) { tunisGL.tunisGetIntegerui64vNV(value, result); }
#define glGetIntegerui64vNV tunisGetIntegerui64vNV
TUNIS_FORCE_INLINE void  tunisGetIntegerv(GLenum pname, GLint * data) { tunisGL.tunisGetIntegerv(pname, data); }
#define glGetIntegerv tunisGetIntegerv
TUNIS_FORCE_INLINE void  tunisGetInternalformatSampleivNV(GLenum target, GLenum internalformat, GLsizei samples, GLenum pname, GLsizei bufSize, GLint * params) { tunisGL.tunisGetInternalformatSampleivNV(target, internalformat, samples, pname, bufSize, params); }
#define glGetInternalformatSampleivNV tunisGetInternalformatSampleivNV
TUNIS_FORCE_INLINE void  tunisGetInternalformati64v(GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint64 * params) { tunisGL.tunisGetInternalformati64v(target, internalformat, pname, bufSize, params); }
#define glGetInternalformati64v tunisGetInternalformati64v
TUNIS_FORCE_INLINE void  tunisGetInternalformativ(GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint * params) { tunisGL.tunisGetInternalformativ(target, internalformat, pname, bufSize, params); }
#define glGetInternalformativ tunisGetInternalformativ
TUNIS_FORCE_INLINE void  tunisGetInvariantBooleanvEXT(GLuint id, GLenum value, GLboolean * data) { tunisGL.tunisGetInvariantBooleanvEXT(id, value, data); }
#define glGetInvariantBooleanvEXT tunisGetInvariantBooleanvEXT
TUNIS_FORCE_INLINE void  tunisGetInvariantFloatvEXT(GLuint id, GLenum value, GLfloat * data) { tunisGL.tunisGetInvariantFloatvEXT(id, value, data); }
#define glGetInvariantFloatvEXT tunisGetInvariantFloatvEXT
TUNIS_FORCE_INLINE void  tunisGetInvariantIntegervEXT(GLuint id, GLenum value, GLint * data) { tunisGL.tunisGetInvariantIntegervEXT(id, value, data); }
#define glGetInvariantIntegervEXT tunisGetInvariantIntegervEXT
TUNIS_FORCE_INLINE void  tunisGetLightfv(GLenum light, GLenum pname, GLfloat * params) { tunisGL.tunisGetLightfv(light, pname, params); }
#define glGetLightfv tunisGetLightfv
TUNIS_FORCE_INLINE void  tunisGetLightiv(GLenum light, GLenum pname, GLint * params) { tunisGL.tunisGetLightiv(light, pname, params); }
#define glGetLightiv tunisGetLightiv
TUNIS_FORCE_INLINE void  tunisGetLightxOES(GLenum light, GLenum pname, GLfixed * params) { tunisGL.tunisGetLightxOES(light, pname, params); }
#define glGetLightxOES tunisGetLightxOES
TUNIS_FORCE_INLINE void  tunisGetLightxv(GLenum light, GLenum pname, GLfixed * params) { tunisGL.tunisGetLightxv(light, pname, params); }
#define glGetLightxv tunisGetLightxv
TUNIS_FORCE_INLINE void  tunisGetLightxvOES(GLenum light, GLenum pname, GLfixed * params) { tunisGL.tunisGetLightxvOES(light, pname, params); }
#define glGetLightxvOES tunisGetLightxvOES
TUNIS_FORCE_INLINE void  tunisGetListParameterfvSGIX(GLuint list, GLenum pname, GLfloat * params) { tunisGL.tunisGetListParameterfvSGIX(list, pname, params); }
#define glGetListParameterfvSGIX tunisGetListParameterfvSGIX
TUNIS_FORCE_INLINE void  tunisGetListParameterivSGIX(GLuint list, GLenum pname, GLint * params) { tunisGL.tunisGetListParameterivSGIX(list, pname, params); }
#define glGetListParameterivSGIX tunisGetListParameterivSGIX
TUNIS_FORCE_INLINE void  tunisGetLocalConstantBooleanvEXT(GLuint id, GLenum value, GLboolean * data) { tunisGL.tunisGetLocalConstantBooleanvEXT(id, value, data); }
#define glGetLocalConstantBooleanvEXT tunisGetLocalConstantBooleanvEXT
TUNIS_FORCE_INLINE void  tunisGetLocalConstantFloatvEXT(GLuint id, GLenum value, GLfloat * data) { tunisGL.tunisGetLocalConstantFloatvEXT(id, value, data); }
#define glGetLocalConstantFloatvEXT tunisGetLocalConstantFloatvEXT
TUNIS_FORCE_INLINE void  tunisGetLocalConstantIntegervEXT(GLuint id, GLenum value, GLint * data) { tunisGL.tunisGetLocalConstantIntegervEXT(id, value, data); }
#define glGetLocalConstantIntegervEXT tunisGetLocalConstantIntegervEXT
TUNIS_FORCE_INLINE void  tunisGetMapAttribParameterfvNV(GLenum target, GLuint index, GLenum pname, GLfloat * params) { tunisGL.tunisGetMapAttribParameterfvNV(target, index, pname, params); }
#define glGetMapAttribParameterfvNV tunisGetMapAttribParameterfvNV
TUNIS_FORCE_INLINE void  tunisGetMapAttribParameterivNV(GLenum target, GLuint index, GLenum pname, GLint * params) { tunisGL.tunisGetMapAttribParameterivNV(target, index, pname, params); }
#define glGetMapAttribParameterivNV tunisGetMapAttribParameterivNV
TUNIS_FORCE_INLINE void  tunisGetMapControlPointsNV(GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLboolean packed, void * points) { tunisGL.tunisGetMapControlPointsNV(target, index, type, ustride, vstride, packed, points); }
#define glGetMapControlPointsNV tunisGetMapControlPointsNV
TUNIS_FORCE_INLINE void  tunisGetMapParameterfvNV(GLenum target, GLenum pname, GLfloat * params) { tunisGL.tunisGetMapParameterfvNV(target, pname, params); }
#define glGetMapParameterfvNV tunisGetMapParameterfvNV
TUNIS_FORCE_INLINE void  tunisGetMapParameterivNV(GLenum target, GLenum pname, GLint * params) { tunisGL.tunisGetMapParameterivNV(target, pname, params); }
#define glGetMapParameterivNV tunisGetMapParameterivNV
TUNIS_FORCE_INLINE void  tunisGetMapdv(GLenum target, GLenum query, GLdouble * v) { tunisGL.tunisGetMapdv(target, query, v); }
#define glGetMapdv tunisGetMapdv
TUNIS_FORCE_INLINE void  tunisGetMapfv(GLenum target, GLenum query, GLfloat * v) { tunisGL.tunisGetMapfv(target, query, v); }
#define glGetMapfv tunisGetMapfv
TUNIS_FORCE_INLINE void  tunisGetMapiv(GLenum target, GLenum query, GLint * v) { tunisGL.tunisGetMapiv(target, query, v); }
#define glGetMapiv tunisGetMapiv
TUNIS_FORCE_INLINE void  tunisGetMapxvOES(GLenum target, GLenum query, GLfixed * v) { tunisGL.tunisGetMapxvOES(target, query, v); }
#define glGetMapxvOES tunisGetMapxvOES
TUNIS_FORCE_INLINE void  tunisGetMaterialfv(GLenum face, GLenum pname, GLfloat * params) { tunisGL.tunisGetMaterialfv(face, pname, params); }
#define glGetMaterialfv tunisGetMaterialfv
TUNIS_FORCE_INLINE void  tunisGetMaterialiv(GLenum face, GLenum pname, GLint * params) { tunisGL.tunisGetMaterialiv(face, pname, params); }
#define glGetMaterialiv tunisGetMaterialiv
TUNIS_FORCE_INLINE void  tunisGetMaterialxOES(GLenum face, GLenum pname, GLfixed param) { tunisGL.tunisGetMaterialxOES(face, pname, param); }
#define glGetMaterialxOES tunisGetMaterialxOES
TUNIS_FORCE_INLINE void  tunisGetMaterialxv(GLenum face, GLenum pname, GLfixed * params) { tunisGL.tunisGetMaterialxv(face, pname, params); }
#define glGetMaterialxv tunisGetMaterialxv
TUNIS_FORCE_INLINE void  tunisGetMaterialxvOES(GLenum face, GLenum pname, GLfixed * params) { tunisGL.tunisGetMaterialxvOES(face, pname, params); }
#define glGetMaterialxvOES tunisGetMaterialxvOES
TUNIS_FORCE_INLINE void  tunisGetMemoryObjectDetachedResourcesuivNV(GLuint memory, GLenum pname, GLint first, GLsizei count, GLuint * params) { tunisGL.tunisGetMemoryObjectDetachedResourcesuivNV(memory, pname, first, count, params); }
#define glGetMemoryObjectDetachedResourcesuivNV tunisGetMemoryObjectDetachedResourcesuivNV
TUNIS_FORCE_INLINE void  tunisGetMemoryObjectParameterivEXT(GLuint memoryObject, GLenum pname, GLint * params) { tunisGL.tunisGetMemoryObjectParameterivEXT(memoryObject, pname, params); }
#define glGetMemoryObjectParameterivEXT tunisGetMemoryObjectParameterivEXT
TUNIS_FORCE_INLINE void  tunisGetMinmax(GLenum target, GLboolean reset, GLenum format, GLenum type, void * values) { tunisGL.tunisGetMinmax(target, reset, format, type, values); }
#define glGetMinmax tunisGetMinmax
TUNIS_FORCE_INLINE void  tunisGetMinmaxEXT(GLenum target, GLboolean reset, GLenum format, GLenum type, void * values) { tunisGL.tunisGetMinmaxEXT(target, reset, format, type, values); }
#define glGetMinmaxEXT tunisGetMinmaxEXT
TUNIS_FORCE_INLINE void  tunisGetMinmaxParameterfv(GLenum target, GLenum pname, GLfloat * params) { tunisGL.tunisGetMinmaxParameterfv(target, pname, params); }
#define glGetMinmaxParameterfv tunisGetMinmaxParameterfv
TUNIS_FORCE_INLINE void  tunisGetMinmaxParameterfvEXT(GLenum target, GLenum pname, GLfloat * params) { tunisGL.tunisGetMinmaxParameterfvEXT(target, pname, params); }
#define glGetMinmaxParameterfvEXT tunisGetMinmaxParameterfvEXT
TUNIS_FORCE_INLINE void  tunisGetMinmaxParameteriv(GLenum target, GLenum pname, GLint * params) { tunisGL.tunisGetMinmaxParameteriv(target, pname, params); }
#define glGetMinmaxParameteriv tunisGetMinmaxParameteriv
TUNIS_FORCE_INLINE void  tunisGetMinmaxParameterivEXT(GLenum target, GLenum pname, GLint * params) { tunisGL.tunisGetMinmaxParameterivEXT(target, pname, params); }
#define glGetMinmaxParameterivEXT tunisGetMinmaxParameterivEXT
TUNIS_FORCE_INLINE void  tunisGetMultiTexEnvfvEXT(GLenum texunit, GLenum target, GLenum pname, GLfloat * params) { tunisGL.tunisGetMultiTexEnvfvEXT(texunit, target, pname, params); }
#define glGetMultiTexEnvfvEXT tunisGetMultiTexEnvfvEXT
TUNIS_FORCE_INLINE void  tunisGetMultiTexEnvivEXT(GLenum texunit, GLenum target, GLenum pname, GLint * params) { tunisGL.tunisGetMultiTexEnvivEXT(texunit, target, pname, params); }
#define glGetMultiTexEnvivEXT tunisGetMultiTexEnvivEXT
TUNIS_FORCE_INLINE void  tunisGetMultiTexGendvEXT(GLenum texunit, GLenum coord, GLenum pname, GLdouble * params) { tunisGL.tunisGetMultiTexGendvEXT(texunit, coord, pname, params); }
#define glGetMultiTexGendvEXT tunisGetMultiTexGendvEXT
TUNIS_FORCE_INLINE void  tunisGetMultiTexGenfvEXT(GLenum texunit, GLenum coord, GLenum pname, GLfloat * params) { tunisGL.tunisGetMultiTexGenfvEXT(texunit, coord, pname, params); }
#define glGetMultiTexGenfvEXT tunisGetMultiTexGenfvEXT
TUNIS_FORCE_INLINE void  tunisGetMultiTexGenivEXT(GLenum texunit, GLenum coord, GLenum pname, GLint * params) { tunisGL.tunisGetMultiTexGenivEXT(texunit, coord, pname, params); }
#define glGetMultiTexGenivEXT tunisGetMultiTexGenivEXT
TUNIS_FORCE_INLINE void  tunisGetMultiTexImageEXT(GLenum texunit, GLenum target, GLint level, GLenum format, GLenum type, void * pixels) { tunisGL.tunisGetMultiTexImageEXT(texunit, target, level, format, type, pixels); }
#define glGetMultiTexImageEXT tunisGetMultiTexImageEXT
TUNIS_FORCE_INLINE void  tunisGetMultiTexLevelParameterfvEXT(GLenum texunit, GLenum target, GLint level, GLenum pname, GLfloat * params) { tunisGL.tunisGetMultiTexLevelParameterfvEXT(texunit, target, level, pname, params); }
#define glGetMultiTexLevelParameterfvEXT tunisGetMultiTexLevelParameterfvEXT
TUNIS_FORCE_INLINE void  tunisGetMultiTexLevelParameterivEXT(GLenum texunit, GLenum target, GLint level, GLenum pname, GLint * params) { tunisGL.tunisGetMultiTexLevelParameterivEXT(texunit, target, level, pname, params); }
#define glGetMultiTexLevelParameterivEXT tunisGetMultiTexLevelParameterivEXT
TUNIS_FORCE_INLINE void  tunisGetMultiTexParameterIivEXT(GLenum texunit, GLenum target, GLenum pname, GLint * params) { tunisGL.tunisGetMultiTexParameterIivEXT(texunit, target, pname, params); }
#define glGetMultiTexParameterIivEXT tunisGetMultiTexParameterIivEXT
TUNIS_FORCE_INLINE void  tunisGetMultiTexParameterIuivEXT(GLenum texunit, GLenum target, GLenum pname, GLuint * params) { tunisGL.tunisGetMultiTexParameterIuivEXT(texunit, target, pname, params); }
#define glGetMultiTexParameterIuivEXT tunisGetMultiTexParameterIuivEXT
TUNIS_FORCE_INLINE void  tunisGetMultiTexParameterfvEXT(GLenum texunit, GLenum target, GLenum pname, GLfloat * params) { tunisGL.tunisGetMultiTexParameterfvEXT(texunit, target, pname, params); }
#define glGetMultiTexParameterfvEXT tunisGetMultiTexParameterfvEXT
TUNIS_FORCE_INLINE void  tunisGetMultiTexParameterivEXT(GLenum texunit, GLenum target, GLenum pname, GLint * params) { tunisGL.tunisGetMultiTexParameterivEXT(texunit, target, pname, params); }
#define glGetMultiTexParameterivEXT tunisGetMultiTexParameterivEXT
TUNIS_FORCE_INLINE void  tunisGetMultisamplefv(GLenum pname, GLuint index, GLfloat * val) { tunisGL.tunisGetMultisamplefv(pname, index, val); }
#define glGetMultisamplefv tunisGetMultisamplefv
TUNIS_FORCE_INLINE void  tunisGetMultisamplefvNV(GLenum pname, GLuint index, GLfloat * val) { tunisGL.tunisGetMultisamplefvNV(pname, index, val); }
#define glGetMultisamplefvNV tunisGetMultisamplefvNV
TUNIS_FORCE_INLINE void  tunisGetNamedBufferParameteri64v(GLuint buffer, GLenum pname, GLint64 * params) { tunisGL.tunisGetNamedBufferParameteri64v(buffer, pname, params); }
#define glGetNamedBufferParameteri64v tunisGetNamedBufferParameteri64v
TUNIS_FORCE_INLINE void  tunisGetNamedBufferParameteriv(GLuint buffer, GLenum pname, GLint * params) { tunisGL.tunisGetNamedBufferParameteriv(buffer, pname, params); }
#define glGetNamedBufferParameteriv tunisGetNamedBufferParameteriv
TUNIS_FORCE_INLINE void  tunisGetNamedBufferParameterivEXT(GLuint buffer, GLenum pname, GLint * params) { tunisGL.tunisGetNamedBufferParameterivEXT(buffer, pname, params); }
#define glGetNamedBufferParameterivEXT tunisGetNamedBufferParameterivEXT
TUNIS_FORCE_INLINE void  tunisGetNamedBufferParameterui64vNV(GLuint buffer, GLenum pname, GLuint64EXT * params) { tunisGL.tunisGetNamedBufferParameterui64vNV(buffer, pname, params); }
#define glGetNamedBufferParameterui64vNV tunisGetNamedBufferParameterui64vNV
TUNIS_FORCE_INLINE void  tunisGetNamedBufferPointerv(GLuint buffer, GLenum pname, void ** params) { tunisGL.tunisGetNamedBufferPointerv(buffer, pname, params); }
#define glGetNamedBufferPointerv tunisGetNamedBufferPointerv
TUNIS_FORCE_INLINE void  tunisGetNamedBufferPointervEXT(GLuint buffer, GLenum pname, void ** params) { tunisGL.tunisGetNamedBufferPointervEXT(buffer, pname, params); }
#define glGetNamedBufferPointervEXT tunisGetNamedBufferPointervEXT
TUNIS_FORCE_INLINE void  tunisGetNamedBufferSubData(GLuint buffer, GLintptr offset, GLsizeiptr size, void * data) { tunisGL.tunisGetNamedBufferSubData(buffer, offset, size, data); }
#define glGetNamedBufferSubData tunisGetNamedBufferSubData
TUNIS_FORCE_INLINE void  tunisGetNamedBufferSubDataEXT(GLuint buffer, GLintptr offset, GLsizeiptr size, void * data) { tunisGL.tunisGetNamedBufferSubDataEXT(buffer, offset, size, data); }
#define glGetNamedBufferSubDataEXT tunisGetNamedBufferSubDataEXT
TUNIS_FORCE_INLINE void  tunisGetNamedFramebufferAttachmentParameteriv(GLuint framebuffer, GLenum attachment, GLenum pname, GLint * params) { tunisGL.tunisGetNamedFramebufferAttachmentParameteriv(framebuffer, attachment, pname, params); }
#define glGetNamedFramebufferAttachmentParameteriv tunisGetNamedFramebufferAttachmentParameteriv
TUNIS_FORCE_INLINE void  tunisGetNamedFramebufferAttachmentParameterivEXT(GLuint framebuffer, GLenum attachment, GLenum pname, GLint * params) { tunisGL.tunisGetNamedFramebufferAttachmentParameterivEXT(framebuffer, attachment, pname, params); }
#define glGetNamedFramebufferAttachmentParameterivEXT tunisGetNamedFramebufferAttachmentParameterivEXT
TUNIS_FORCE_INLINE void  tunisGetNamedFramebufferParameterfvAMD(GLuint framebuffer, GLenum pname, GLuint numsamples, GLuint pixelindex, GLsizei size, GLfloat * values) { tunisGL.tunisGetNamedFramebufferParameterfvAMD(framebuffer, pname, numsamples, pixelindex, size, values); }
#define glGetNamedFramebufferParameterfvAMD tunisGetNamedFramebufferParameterfvAMD
TUNIS_FORCE_INLINE void  tunisGetNamedFramebufferParameteriv(GLuint framebuffer, GLenum pname, GLint * param) { tunisGL.tunisGetNamedFramebufferParameteriv(framebuffer, pname, param); }
#define glGetNamedFramebufferParameteriv tunisGetNamedFramebufferParameteriv
TUNIS_FORCE_INLINE void  tunisGetNamedFramebufferParameterivEXT(GLuint framebuffer, GLenum pname, GLint * params) { tunisGL.tunisGetNamedFramebufferParameterivEXT(framebuffer, pname, params); }
#define glGetNamedFramebufferParameterivEXT tunisGetNamedFramebufferParameterivEXT
TUNIS_FORCE_INLINE void  tunisGetNamedProgramLocalParameterIivEXT(GLuint program, GLenum target, GLuint index, GLint * params) { tunisGL.tunisGetNamedProgramLocalParameterIivEXT(program, target, index, params); }
#define glGetNamedProgramLocalParameterIivEXT tunisGetNamedProgramLocalParameterIivEXT
TUNIS_FORCE_INLINE void  tunisGetNamedProgramLocalParameterIuivEXT(GLuint program, GLenum target, GLuint index, GLuint * params) { tunisGL.tunisGetNamedProgramLocalParameterIuivEXT(program, target, index, params); }
#define glGetNamedProgramLocalParameterIuivEXT tunisGetNamedProgramLocalParameterIuivEXT
TUNIS_FORCE_INLINE void  tunisGetNamedProgramLocalParameterdvEXT(GLuint program, GLenum target, GLuint index, GLdouble * params) { tunisGL.tunisGetNamedProgramLocalParameterdvEXT(program, target, index, params); }
#define glGetNamedProgramLocalParameterdvEXT tunisGetNamedProgramLocalParameterdvEXT
TUNIS_FORCE_INLINE void  tunisGetNamedProgramLocalParameterfvEXT(GLuint program, GLenum target, GLuint index, GLfloat * params) { tunisGL.tunisGetNamedProgramLocalParameterfvEXT(program, target, index, params); }
#define glGetNamedProgramLocalParameterfvEXT tunisGetNamedProgramLocalParameterfvEXT
TUNIS_FORCE_INLINE void  tunisGetNamedProgramStringEXT(GLuint program, GLenum target, GLenum pname, void * string) { tunisGL.tunisGetNamedProgramStringEXT(program, target, pname, string); }
#define glGetNamedProgramStringEXT tunisGetNamedProgramStringEXT
TUNIS_FORCE_INLINE void  tunisGetNamedProgramivEXT(GLuint program, GLenum target, GLenum pname, GLint * params) { tunisGL.tunisGetNamedProgramivEXT(program, target, pname, params); }
#define glGetNamedProgramivEXT tunisGetNamedProgramivEXT
TUNIS_FORCE_INLINE void  tunisGetNamedRenderbufferParameteriv(GLuint renderbuffer, GLenum pname, GLint * params) { tunisGL.tunisGetNamedRenderbufferParameteriv(renderbuffer, pname, params); }
#define glGetNamedRenderbufferParameteriv tunisGetNamedRenderbufferParameteriv
TUNIS_FORCE_INLINE void  tunisGetNamedRenderbufferParameterivEXT(GLuint renderbuffer, GLenum pname, GLint * params) { tunisGL.tunisGetNamedRenderbufferParameterivEXT(renderbuffer, pname, params); }
#define glGetNamedRenderbufferParameterivEXT tunisGetNamedRenderbufferParameterivEXT
TUNIS_FORCE_INLINE void  tunisGetNamedStringARB(GLint namelen, const GLchar * name, GLsizei bufSize, GLint * stringlen, GLchar * string) { tunisGL.tunisGetNamedStringARB(namelen, name, bufSize, stringlen, string); }
#define glGetNamedStringARB tunisGetNamedStringARB
TUNIS_FORCE_INLINE void  tunisGetNamedStringivARB(GLint namelen, const GLchar * name, GLenum pname, GLint * params) { tunisGL.tunisGetNamedStringivARB(namelen, name, pname, params); }
#define glGetNamedStringivARB tunisGetNamedStringivARB
TUNIS_FORCE_INLINE void  tunisGetNextPerfQueryIdINTEL(GLuint queryId, GLuint * nextQueryId) { tunisGL.tunisGetNextPerfQueryIdINTEL(queryId, nextQueryId); }
#define glGetNextPerfQueryIdINTEL tunisGetNextPerfQueryIdINTEL
TUNIS_FORCE_INLINE void  tunisGetObjectBufferfvATI(GLuint buffer, GLenum pname, GLfloat * params) { tunisGL.tunisGetObjectBufferfvATI(buffer, pname, params); }
#define glGetObjectBufferfvATI tunisGetObjectBufferfvATI
TUNIS_FORCE_INLINE void  tunisGetObjectBufferivATI(GLuint buffer, GLenum pname, GLint * params) { tunisGL.tunisGetObjectBufferivATI(buffer, pname, params); }
#define glGetObjectBufferivATI tunisGetObjectBufferivATI
TUNIS_FORCE_INLINE void  tunisGetObjectLabel(GLenum identifier, GLuint name, GLsizei bufSize, GLsizei * length, GLchar * label) { tunisGL.tunisGetObjectLabel(identifier, name, bufSize, length, label); }
#define glGetObjectLabel tunisGetObjectLabel
TUNIS_FORCE_INLINE void  tunisGetObjectLabelEXT(GLenum type, GLuint object, GLsizei bufSize, GLsizei * length, GLchar * label) { tunisGL.tunisGetObjectLabelEXT(type, object, bufSize, length, label); }
#define glGetObjectLabelEXT tunisGetObjectLabelEXT
TUNIS_FORCE_INLINE void  tunisGetObjectLabelKHR(GLenum identifier, GLuint name, GLsizei bufSize, GLsizei * length, GLchar * label) { tunisGL.tunisGetObjectLabelKHR(identifier, name, bufSize, length, label); }
#define glGetObjectLabelKHR tunisGetObjectLabelKHR
TUNIS_FORCE_INLINE void  tunisGetObjectParameterfvARB(GLhandleARB obj, GLenum pname, GLfloat * params) { tunisGL.tunisGetObjectParameterfvARB(obj, pname, params); }
#define glGetObjectParameterfvARB tunisGetObjectParameterfvARB
TUNIS_FORCE_INLINE void  tunisGetObjectParameterivAPPLE(GLenum objectType, GLuint name, GLenum pname, GLint * params) { tunisGL.tunisGetObjectParameterivAPPLE(objectType, name, pname, params); }
#define glGetObjectParameterivAPPLE tunisGetObjectParameterivAPPLE
TUNIS_FORCE_INLINE void  tunisGetObjectParameterivARB(GLhandleARB obj, GLenum pname, GLint * params) { tunisGL.tunisGetObjectParameterivARB(obj, pname, params); }
#define glGetObjectParameterivARB tunisGetObjectParameterivARB
TUNIS_FORCE_INLINE void  tunisGetObjectPtrLabel(const void * ptr, GLsizei bufSize, GLsizei * length, GLchar * label) { tunisGL.tunisGetObjectPtrLabel(ptr, bufSize, length, label); }
#define glGetObjectPtrLabel tunisGetObjectPtrLabel
TUNIS_FORCE_INLINE void  tunisGetObjectPtrLabelKHR(const void * ptr, GLsizei bufSize, GLsizei * length, GLchar * label) { tunisGL.tunisGetObjectPtrLabelKHR(ptr, bufSize, length, label); }
#define glGetObjectPtrLabelKHR tunisGetObjectPtrLabelKHR
TUNIS_FORCE_INLINE void  tunisGetOcclusionQueryivNV(GLuint id, GLenum pname, GLint * params) { tunisGL.tunisGetOcclusionQueryivNV(id, pname, params); }
#define glGetOcclusionQueryivNV tunisGetOcclusionQueryivNV
TUNIS_FORCE_INLINE void  tunisGetOcclusionQueryuivNV(GLuint id, GLenum pname, GLuint * params) { tunisGL.tunisGetOcclusionQueryuivNV(id, pname, params); }
#define glGetOcclusionQueryuivNV tunisGetOcclusionQueryuivNV
TUNIS_FORCE_INLINE void  tunisGetPathColorGenfvNV(GLenum color, GLenum pname, GLfloat * value) { tunisGL.tunisGetPathColorGenfvNV(color, pname, value); }
#define glGetPathColorGenfvNV tunisGetPathColorGenfvNV
TUNIS_FORCE_INLINE void  tunisGetPathColorGenivNV(GLenum color, GLenum pname, GLint * value) { tunisGL.tunisGetPathColorGenivNV(color, pname, value); }
#define glGetPathColorGenivNV tunisGetPathColorGenivNV
TUNIS_FORCE_INLINE void  tunisGetPathCommandsNV(GLuint path, GLubyte * commands) { tunisGL.tunisGetPathCommandsNV(path, commands); }
#define glGetPathCommandsNV tunisGetPathCommandsNV
TUNIS_FORCE_INLINE void  tunisGetPathCoordsNV(GLuint path, GLfloat * coords) { tunisGL.tunisGetPathCoordsNV(path, coords); }
#define glGetPathCoordsNV tunisGetPathCoordsNV
TUNIS_FORCE_INLINE void  tunisGetPathDashArrayNV(GLuint path, GLfloat * dashArray) { tunisGL.tunisGetPathDashArrayNV(path, dashArray); }
#define glGetPathDashArrayNV tunisGetPathDashArrayNV
TUNIS_FORCE_INLINE GLfloat tunisGetPathLengthNV(GLuint path, GLsizei startSegment, GLsizei numSegments) { return tunisGL.tunisGetPathLengthNV(path, startSegment, numSegments); }
#define glGetPathLengthNV tunisGetPathLengthNV
TUNIS_FORCE_INLINE void  tunisGetPathMetricRangeNV(GLbitfield metricQueryMask, GLuint firstPathName, GLsizei numPaths, GLsizei stride, GLfloat * metrics) { tunisGL.tunisGetPathMetricRangeNV(metricQueryMask, firstPathName, numPaths, stride, metrics); }
#define glGetPathMetricRangeNV tunisGetPathMetricRangeNV
TUNIS_FORCE_INLINE void  tunisGetPathMetricsNV(GLbitfield metricQueryMask, GLsizei numPaths, GLenum pathNameType, const void * paths, GLuint pathBase, GLsizei stride, GLfloat * metrics) { tunisGL.tunisGetPathMetricsNV(metricQueryMask, numPaths, pathNameType, paths, pathBase, stride, metrics); }
#define glGetPathMetricsNV tunisGetPathMetricsNV
TUNIS_FORCE_INLINE void  tunisGetPathParameterfvNV(GLuint path, GLenum pname, GLfloat * value) { tunisGL.tunisGetPathParameterfvNV(path, pname, value); }
#define glGetPathParameterfvNV tunisGetPathParameterfvNV
TUNIS_FORCE_INLINE void  tunisGetPathParameterivNV(GLuint path, GLenum pname, GLint * value) { tunisGL.tunisGetPathParameterivNV(path, pname, value); }
#define glGetPathParameterivNV tunisGetPathParameterivNV
TUNIS_FORCE_INLINE void  tunisGetPathSpacingNV(GLenum pathListMode, GLsizei numPaths, GLenum pathNameType, const void * paths, GLuint pathBase, GLfloat advanceScale, GLfloat kerningScale, GLenum transformType, GLfloat * returnedSpacing) { tunisGL.tunisGetPathSpacingNV(pathListMode, numPaths, pathNameType, paths, pathBase, advanceScale, kerningScale, transformType, returnedSpacing); }
#define glGetPathSpacingNV tunisGetPathSpacingNV
TUNIS_FORCE_INLINE void  tunisGetPathTexGenfvNV(GLenum texCoordSet, GLenum pname, GLfloat * value) { tunisGL.tunisGetPathTexGenfvNV(texCoordSet, pname, value); }
#define glGetPathTexGenfvNV tunisGetPathTexGenfvNV
TUNIS_FORCE_INLINE void  tunisGetPathTexGenivNV(GLenum texCoordSet, GLenum pname, GLint * value) { tunisGL.tunisGetPathTexGenivNV(texCoordSet, pname, value); }
#define glGetPathTexGenivNV tunisGetPathTexGenivNV
TUNIS_FORCE_INLINE void  tunisGetPerfCounterInfoINTEL(GLuint queryId, GLuint counterId, GLuint counterNameLength, GLchar * counterName, GLuint counterDescLength, GLchar * counterDesc, GLuint * counterOffset, GLuint * counterDataSize, GLuint * counterTypeEnum, GLuint * counterDataTypeEnum, GLuint64 * rawCounterMaxValue) { tunisGL.tunisGetPerfCounterInfoINTEL(queryId, counterId, counterNameLength, counterName, counterDescLength, counterDesc, counterOffset, counterDataSize, counterTypeEnum, counterDataTypeEnum, rawCounterMaxValue); }
#define glGetPerfCounterInfoINTEL tunisGetPerfCounterInfoINTEL
TUNIS_FORCE_INLINE void  tunisGetPerfMonitorCounterDataAMD(GLuint monitor, GLenum pname, GLsizei dataSize, GLuint * data, GLint * bytesWritten) { tunisGL.tunisGetPerfMonitorCounterDataAMD(monitor, pname, dataSize, data, bytesWritten); }
#define glGetPerfMonitorCounterDataAMD tunisGetPerfMonitorCounterDataAMD
TUNIS_FORCE_INLINE void  tunisGetPerfMonitorCounterInfoAMD(GLuint group, GLuint counter, GLenum pname, void * data) { tunisGL.tunisGetPerfMonitorCounterInfoAMD(group, counter, pname, data); }
#define glGetPerfMonitorCounterInfoAMD tunisGetPerfMonitorCounterInfoAMD
TUNIS_FORCE_INLINE void  tunisGetPerfMonitorCounterStringAMD(GLuint group, GLuint counter, GLsizei bufSize, GLsizei * length, GLchar * counterString) { tunisGL.tunisGetPerfMonitorCounterStringAMD(group, counter, bufSize, length, counterString); }
#define glGetPerfMonitorCounterStringAMD tunisGetPerfMonitorCounterStringAMD
TUNIS_FORCE_INLINE void  tunisGetPerfMonitorCountersAMD(GLuint group, GLint * numCounters, GLint * maxActiveCounters, GLsizei counterSize, GLuint * counters) { tunisGL.tunisGetPerfMonitorCountersAMD(group, numCounters, maxActiveCounters, counterSize, counters); }
#define glGetPerfMonitorCountersAMD tunisGetPerfMonitorCountersAMD
TUNIS_FORCE_INLINE void  tunisGetPerfMonitorGroupStringAMD(GLuint group, GLsizei bufSize, GLsizei * length, GLchar * groupString) { tunisGL.tunisGetPerfMonitorGroupStringAMD(group, bufSize, length, groupString); }
#define glGetPerfMonitorGroupStringAMD tunisGetPerfMonitorGroupStringAMD
TUNIS_FORCE_INLINE void  tunisGetPerfMonitorGroupsAMD(GLint * numGroups, GLsizei groupsSize, GLuint * groups) { tunisGL.tunisGetPerfMonitorGroupsAMD(numGroups, groupsSize, groups); }
#define glGetPerfMonitorGroupsAMD tunisGetPerfMonitorGroupsAMD
TUNIS_FORCE_INLINE void  tunisGetPerfQueryDataINTEL(GLuint queryHandle, GLuint flags, GLsizei dataSize, void * data, GLuint * bytesWritten) { tunisGL.tunisGetPerfQueryDataINTEL(queryHandle, flags, dataSize, data, bytesWritten); }
#define glGetPerfQueryDataINTEL tunisGetPerfQueryDataINTEL
TUNIS_FORCE_INLINE void  tunisGetPerfQueryIdByNameINTEL(GLchar * queryName, GLuint * queryId) { tunisGL.tunisGetPerfQueryIdByNameINTEL(queryName, queryId); }
#define glGetPerfQueryIdByNameINTEL tunisGetPerfQueryIdByNameINTEL
TUNIS_FORCE_INLINE void  tunisGetPerfQueryInfoINTEL(GLuint queryId, GLuint queryNameLength, GLchar * queryName, GLuint * dataSize, GLuint * noCounters, GLuint * noInstances, GLuint * capsMask) { tunisGL.tunisGetPerfQueryInfoINTEL(queryId, queryNameLength, queryName, dataSize, noCounters, noInstances, capsMask); }
#define glGetPerfQueryInfoINTEL tunisGetPerfQueryInfoINTEL
TUNIS_FORCE_INLINE void  tunisGetPixelMapfv(GLenum map, GLfloat * values) { tunisGL.tunisGetPixelMapfv(map, values); }
#define glGetPixelMapfv tunisGetPixelMapfv
TUNIS_FORCE_INLINE void  tunisGetPixelMapuiv(GLenum map, GLuint * values) { tunisGL.tunisGetPixelMapuiv(map, values); }
#define glGetPixelMapuiv tunisGetPixelMapuiv
TUNIS_FORCE_INLINE void  tunisGetPixelMapusv(GLenum map, GLushort * values) { tunisGL.tunisGetPixelMapusv(map, values); }
#define glGetPixelMapusv tunisGetPixelMapusv
TUNIS_FORCE_INLINE void  tunisGetPixelMapxv(GLenum map, GLint size, GLfixed * values) { tunisGL.tunisGetPixelMapxv(map, size, values); }
#define glGetPixelMapxv tunisGetPixelMapxv
TUNIS_FORCE_INLINE void  tunisGetPixelTexGenParameterfvSGIS(GLenum pname, GLfloat * params) { tunisGL.tunisGetPixelTexGenParameterfvSGIS(pname, params); }
#define glGetPixelTexGenParameterfvSGIS tunisGetPixelTexGenParameterfvSGIS
TUNIS_FORCE_INLINE void  tunisGetPixelTexGenParameterivSGIS(GLenum pname, GLint * params) { tunisGL.tunisGetPixelTexGenParameterivSGIS(pname, params); }
#define glGetPixelTexGenParameterivSGIS tunisGetPixelTexGenParameterivSGIS
TUNIS_FORCE_INLINE void  tunisGetPixelTransformParameterfvEXT(GLenum target, GLenum pname, GLfloat * params) { tunisGL.tunisGetPixelTransformParameterfvEXT(target, pname, params); }
#define glGetPixelTransformParameterfvEXT tunisGetPixelTransformParameterfvEXT
TUNIS_FORCE_INLINE void  tunisGetPixelTransformParameterivEXT(GLenum target, GLenum pname, GLint * params) { tunisGL.tunisGetPixelTransformParameterivEXT(target, pname, params); }
#define glGetPixelTransformParameterivEXT tunisGetPixelTransformParameterivEXT
TUNIS_FORCE_INLINE void  tunisGetPointerIndexedvEXT(GLenum target, GLuint index, void ** data) { tunisGL.tunisGetPointerIndexedvEXT(target, index, data); }
#define glGetPointerIndexedvEXT tunisGetPointerIndexedvEXT
TUNIS_FORCE_INLINE void  tunisGetPointeri_vEXT(GLenum pname, GLuint index, void ** params) { tunisGL.tunisGetPointeri_vEXT(pname, index, params); }
#define glGetPointeri_vEXT tunisGetPointeri_vEXT
TUNIS_FORCE_INLINE void  tunisGetPointerv(GLenum pname, void ** params) { tunisGL.tunisGetPointerv(pname, params); }
#define glGetPointerv tunisGetPointerv
TUNIS_FORCE_INLINE void  tunisGetPointervEXT(GLenum pname, void ** params) { tunisGL.tunisGetPointervEXT(pname, params); }
#define glGetPointervEXT tunisGetPointervEXT
TUNIS_FORCE_INLINE void  tunisGetPointervKHR(GLenum pname, void ** params) { tunisGL.tunisGetPointervKHR(pname, params); }
#define glGetPointervKHR tunisGetPointervKHR
TUNIS_FORCE_INLINE void  tunisGetPolygonStipple(GLubyte * mask) { tunisGL.tunisGetPolygonStipple(mask); }
#define glGetPolygonStipple tunisGetPolygonStipple
TUNIS_FORCE_INLINE void  tunisGetProgramBinary(GLuint program, GLsizei bufSize, GLsizei * length, GLenum * binaryFormat, void * binary) { tunisGL.tunisGetProgramBinary(program, bufSize, length, binaryFormat, binary); }
#define glGetProgramBinary tunisGetProgramBinary
TUNIS_FORCE_INLINE void  tunisGetProgramBinaryOES(GLuint program, GLsizei bufSize, GLsizei * length, GLenum * binaryFormat, void * binary) { tunisGL.tunisGetProgramBinaryOES(program, bufSize, length, binaryFormat, binary); }
#define glGetProgramBinaryOES tunisGetProgramBinaryOES
TUNIS_FORCE_INLINE void  tunisGetProgramEnvParameterIivNV(GLenum target, GLuint index, GLint * params) { tunisGL.tunisGetProgramEnvParameterIivNV(target, index, params); }
#define glGetProgramEnvParameterIivNV tunisGetProgramEnvParameterIivNV
TUNIS_FORCE_INLINE void  tunisGetProgramEnvParameterIuivNV(GLenum target, GLuint index, GLuint * params) { tunisGL.tunisGetProgramEnvParameterIuivNV(target, index, params); }
#define glGetProgramEnvParameterIuivNV tunisGetProgramEnvParameterIuivNV
TUNIS_FORCE_INLINE void  tunisGetProgramEnvParameterdvARB(GLenum target, GLuint index, GLdouble * params) { tunisGL.tunisGetProgramEnvParameterdvARB(target, index, params); }
#define glGetProgramEnvParameterdvARB tunisGetProgramEnvParameterdvARB
TUNIS_FORCE_INLINE void  tunisGetProgramEnvParameterfvARB(GLenum target, GLuint index, GLfloat * params) { tunisGL.tunisGetProgramEnvParameterfvARB(target, index, params); }
#define glGetProgramEnvParameterfvARB tunisGetProgramEnvParameterfvARB
TUNIS_FORCE_INLINE void  tunisGetProgramInfoLog(GLuint program, GLsizei bufSize, GLsizei * length, GLchar * infoLog) { tunisGL.tunisGetProgramInfoLog(program, bufSize, length, infoLog); }
#define glGetProgramInfoLog tunisGetProgramInfoLog
TUNIS_FORCE_INLINE void  tunisGetProgramInterfaceiv(GLuint program, GLenum programInterface, GLenum pname, GLint * params) { tunisGL.tunisGetProgramInterfaceiv(program, programInterface, pname, params); }
#define glGetProgramInterfaceiv tunisGetProgramInterfaceiv
TUNIS_FORCE_INLINE void  tunisGetProgramLocalParameterIivNV(GLenum target, GLuint index, GLint * params) { tunisGL.tunisGetProgramLocalParameterIivNV(target, index, params); }
#define glGetProgramLocalParameterIivNV tunisGetProgramLocalParameterIivNV
TUNIS_FORCE_INLINE void  tunisGetProgramLocalParameterIuivNV(GLenum target, GLuint index, GLuint * params) { tunisGL.tunisGetProgramLocalParameterIuivNV(target, index, params); }
#define glGetProgramLocalParameterIuivNV tunisGetProgramLocalParameterIuivNV
TUNIS_FORCE_INLINE void  tunisGetProgramLocalParameterdvARB(GLenum target, GLuint index, GLdouble * params) { tunisGL.tunisGetProgramLocalParameterdvARB(target, index, params); }
#define glGetProgramLocalParameterdvARB tunisGetProgramLocalParameterdvARB
TUNIS_FORCE_INLINE void  tunisGetProgramLocalParameterfvARB(GLenum target, GLuint index, GLfloat * params) { tunisGL.tunisGetProgramLocalParameterfvARB(target, index, params); }
#define glGetProgramLocalParameterfvARB tunisGetProgramLocalParameterfvARB
TUNIS_FORCE_INLINE void  tunisGetProgramNamedParameterdvNV(GLuint id, GLsizei len, const GLubyte * name, GLdouble * params) { tunisGL.tunisGetProgramNamedParameterdvNV(id, len, name, params); }
#define glGetProgramNamedParameterdvNV tunisGetProgramNamedParameterdvNV
TUNIS_FORCE_INLINE void  tunisGetProgramNamedParameterfvNV(GLuint id, GLsizei len, const GLubyte * name, GLfloat * params) { tunisGL.tunisGetProgramNamedParameterfvNV(id, len, name, params); }
#define glGetProgramNamedParameterfvNV tunisGetProgramNamedParameterfvNV
TUNIS_FORCE_INLINE void  tunisGetProgramParameterdvNV(GLenum target, GLuint index, GLenum pname, GLdouble * params) { tunisGL.tunisGetProgramParameterdvNV(target, index, pname, params); }
#define glGetProgramParameterdvNV tunisGetProgramParameterdvNV
TUNIS_FORCE_INLINE void  tunisGetProgramParameterfvNV(GLenum target, GLuint index, GLenum pname, GLfloat * params) { tunisGL.tunisGetProgramParameterfvNV(target, index, pname, params); }
#define glGetProgramParameterfvNV tunisGetProgramParameterfvNV
TUNIS_FORCE_INLINE void  tunisGetProgramPipelineInfoLog(GLuint pipeline, GLsizei bufSize, GLsizei * length, GLchar * infoLog) { tunisGL.tunisGetProgramPipelineInfoLog(pipeline, bufSize, length, infoLog); }
#define glGetProgramPipelineInfoLog tunisGetProgramPipelineInfoLog
TUNIS_FORCE_INLINE void  tunisGetProgramPipelineInfoLogEXT(GLuint pipeline, GLsizei bufSize, GLsizei * length, GLchar * infoLog) { tunisGL.tunisGetProgramPipelineInfoLogEXT(pipeline, bufSize, length, infoLog); }
#define glGetProgramPipelineInfoLogEXT tunisGetProgramPipelineInfoLogEXT
TUNIS_FORCE_INLINE void  tunisGetProgramPipelineiv(GLuint pipeline, GLenum pname, GLint * params) { tunisGL.tunisGetProgramPipelineiv(pipeline, pname, params); }
#define glGetProgramPipelineiv tunisGetProgramPipelineiv
TUNIS_FORCE_INLINE void  tunisGetProgramPipelineivEXT(GLuint pipeline, GLenum pname, GLint * params) { if (tunisGLSupport(GL_ES_VERSION_2_0) && (pname == GL_CURRENT_PROGRAM)) { pname = GL_ACTIVE_PROGRAM; } else if (tunisGLSupport(GL_VERSION_1_0) && (pname == GL_ACTIVE_PROGRAM)) { pname = GL_CURRENT_PROGRAM; } tunisGL.tunisGetProgramPipelineivEXT(pipeline, pname, params); }
#define glGetProgramPipelineivEXT tunisGetProgramPipelineivEXT
TUNIS_FORCE_INLINE GLuint tunisGetProgramResourceIndex(GLuint program, GLenum programInterface, const GLchar * name) { return tunisGL.tunisGetProgramResourceIndex(program, programInterface, name); }
#define glGetProgramResourceIndex tunisGetProgramResourceIndex
TUNIS_FORCE_INLINE GLint tunisGetProgramResourceLocation(GLuint program, GLenum programInterface, const GLchar * name) { return tunisGL.tunisGetProgramResourceLocation(program, programInterface, name); }
#define glGetProgramResourceLocation tunisGetProgramResourceLocation
TUNIS_FORCE_INLINE GLint tunisGetProgramResourceLocationIndex(GLuint program, GLenum programInterface, const GLchar * name) { return tunisGL.tunisGetProgramResourceLocationIndex(program, programInterface, name); }
#define glGetProgramResourceLocationIndex tunisGetProgramResourceLocationIndex
TUNIS_FORCE_INLINE GLint tunisGetProgramResourceLocationIndexEXT(GLuint program, GLenum programInterface, const GLchar * name) { return tunisGL.tunisGetProgramResourceLocationIndexEXT(program, programInterface, name); }
#define glGetProgramResourceLocationIndexEXT tunisGetProgramResourceLocationIndexEXT
TUNIS_FORCE_INLINE void  tunisGetProgramResourceName(GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei * length, GLchar * name) { tunisGL.tunisGetProgramResourceName(program, programInterface, index, bufSize, length, name); }
#define glGetProgramResourceName tunisGetProgramResourceName
TUNIS_FORCE_INLINE void  tunisGetProgramResourcefvNV(GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum * props, GLsizei bufSize, GLsizei * length, GLfloat * params) { tunisGL.tunisGetProgramResourcefvNV(program, programInterface, index, propCount, props, bufSize, length, params); }
#define glGetProgramResourcefvNV tunisGetProgramResourcefvNV
TUNIS_FORCE_INLINE void  tunisGetProgramResourceiv(GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum * props, GLsizei bufSize, GLsizei * length, GLint * params) { tunisGL.tunisGetProgramResourceiv(program, programInterface, index, propCount, props, bufSize, length, params); }
#define glGetProgramResourceiv tunisGetProgramResourceiv
TUNIS_FORCE_INLINE void  tunisGetProgramStageiv(GLuint program, GLenum shadertype, GLenum pname, GLint * values) { tunisGL.tunisGetProgramStageiv(program, shadertype, pname, values); }
#define glGetProgramStageiv tunisGetProgramStageiv
TUNIS_FORCE_INLINE void  tunisGetProgramStringARB(GLenum target, GLenum pname, void * string) { tunisGL.tunisGetProgramStringARB(target, pname, string); }
#define glGetProgramStringARB tunisGetProgramStringARB
TUNIS_FORCE_INLINE void  tunisGetProgramStringNV(GLuint id, GLenum pname, GLubyte * program) { tunisGL.tunisGetProgramStringNV(id, pname, program); }
#define glGetProgramStringNV tunisGetProgramStringNV
TUNIS_FORCE_INLINE void  tunisGetProgramSubroutineParameteruivNV(GLenum target, GLuint index, GLuint * param) { tunisGL.tunisGetProgramSubroutineParameteruivNV(target, index, param); }
#define glGetProgramSubroutineParameteruivNV tunisGetProgramSubroutineParameteruivNV
TUNIS_FORCE_INLINE void  tunisGetProgramiv(GLuint program, GLenum pname, GLint * params) { tunisGL.tunisGetProgramiv(program, pname, params); }
#define glGetProgramiv tunisGetProgramiv
TUNIS_FORCE_INLINE void  tunisGetProgramivARB(GLenum target, GLenum pname, GLint * params) { tunisGL.tunisGetProgramivARB(target, pname, params); }
#define glGetProgramivARB tunisGetProgramivARB
TUNIS_FORCE_INLINE void  tunisGetProgramivNV(GLuint id, GLenum pname, GLint * params) { tunisGL.tunisGetProgramivNV(id, pname, params); }
#define glGetProgramivNV tunisGetProgramivNV
TUNIS_FORCE_INLINE void  tunisGetQueryBufferObjecti64v(GLuint id, GLuint buffer, GLenum pname, GLintptr offset) { tunisGL.tunisGetQueryBufferObjecti64v(id, buffer, pname, offset); }
#define glGetQueryBufferObjecti64v tunisGetQueryBufferObjecti64v
TUNIS_FORCE_INLINE void  tunisGetQueryBufferObjectiv(GLuint id, GLuint buffer, GLenum pname, GLintptr offset) { tunisGL.tunisGetQueryBufferObjectiv(id, buffer, pname, offset); }
#define glGetQueryBufferObjectiv tunisGetQueryBufferObjectiv
TUNIS_FORCE_INLINE void  tunisGetQueryBufferObjectui64v(GLuint id, GLuint buffer, GLenum pname, GLintptr offset) { tunisGL.tunisGetQueryBufferObjectui64v(id, buffer, pname, offset); }
#define glGetQueryBufferObjectui64v tunisGetQueryBufferObjectui64v
TUNIS_FORCE_INLINE void  tunisGetQueryBufferObjectuiv(GLuint id, GLuint buffer, GLenum pname, GLintptr offset) { tunisGL.tunisGetQueryBufferObjectuiv(id, buffer, pname, offset); }
#define glGetQueryBufferObjectuiv tunisGetQueryBufferObjectuiv
TUNIS_FORCE_INLINE void  tunisGetQueryIndexediv(GLenum target, GLuint index, GLenum pname, GLint * params) { tunisGL.tunisGetQueryIndexediv(target, index, pname, params); }
#define glGetQueryIndexediv tunisGetQueryIndexediv
TUNIS_FORCE_INLINE void  tunisGetQueryObjecti64v(GLuint id, GLenum pname, GLint64 * params) { tunisGL.tunisGetQueryObjecti64v(id, pname, params); }
#define glGetQueryObjecti64v tunisGetQueryObjecti64v
TUNIS_FORCE_INLINE void  tunisGetQueryObjecti64vEXT(GLuint id, GLenum pname, GLint64 * params) { tunisGL.tunisGetQueryObjecti64vEXT(id, pname, params); }
#define glGetQueryObjecti64vEXT tunisGetQueryObjecti64vEXT
TUNIS_FORCE_INLINE void  tunisGetQueryObjectiv(GLuint id, GLenum pname, GLint * params) { tunisGL.tunisGetQueryObjectiv(id, pname, params); }
#define glGetQueryObjectiv tunisGetQueryObjectiv
TUNIS_FORCE_INLINE void  tunisGetQueryObjectivARB(GLuint id, GLenum pname, GLint * params) { tunisGL.tunisGetQueryObjectivARB(id, pname, params); }
#define glGetQueryObjectivARB tunisGetQueryObjectivARB
TUNIS_FORCE_INLINE void  tunisGetQueryObjectivEXT(GLuint id, GLenum pname, GLint * params) { tunisGL.tunisGetQueryObjectivEXT(id, pname, params); }
#define glGetQueryObjectivEXT tunisGetQueryObjectivEXT
TUNIS_FORCE_INLINE void  tunisGetQueryObjectui64v(GLuint id, GLenum pname, GLuint64 * params) { tunisGL.tunisGetQueryObjectui64v(id, pname, params); }
#define glGetQueryObjectui64v tunisGetQueryObjectui64v
TUNIS_FORCE_INLINE void  tunisGetQueryObjectui64vEXT(GLuint id, GLenum pname, GLuint64 * params) { tunisGL.tunisGetQueryObjectui64vEXT(id, pname, params); }
#define glGetQueryObjectui64vEXT tunisGetQueryObjectui64vEXT
TUNIS_FORCE_INLINE void  tunisGetQueryObjectuiv(GLuint id, GLenum pname, GLuint * params) { tunisGL.tunisGetQueryObjectuiv(id, pname, params); }
#define glGetQueryObjectuiv tunisGetQueryObjectuiv
TUNIS_FORCE_INLINE void  tunisGetQueryObjectuivARB(GLuint id, GLenum pname, GLuint * params) { tunisGL.tunisGetQueryObjectuivARB(id, pname, params); }
#define glGetQueryObjectuivARB tunisGetQueryObjectuivARB
TUNIS_FORCE_INLINE void  tunisGetQueryObjectuivEXT(GLuint id, GLenum pname, GLuint * params) { tunisGL.tunisGetQueryObjectuivEXT(id, pname, params); }
#define glGetQueryObjectuivEXT tunisGetQueryObjectuivEXT
TUNIS_FORCE_INLINE void  tunisGetQueryiv(GLenum target, GLenum pname, GLint * params) { tunisGL.tunisGetQueryiv(target, pname, params); }
#define glGetQueryiv tunisGetQueryiv
TUNIS_FORCE_INLINE void  tunisGetQueryivARB(GLenum target, GLenum pname, GLint * params) { tunisGL.tunisGetQueryivARB(target, pname, params); }
#define glGetQueryivARB tunisGetQueryivARB
TUNIS_FORCE_INLINE void  tunisGetQueryivEXT(GLenum target, GLenum pname, GLint * params) { tunisGL.tunisGetQueryivEXT(target, pname, params); }
#define glGetQueryivEXT tunisGetQueryivEXT
TUNIS_FORCE_INLINE void  tunisGetRenderbufferParameteriv(GLenum target, GLenum pname, GLint * params) { tunisGL.tunisGetRenderbufferParameteriv(target, pname, params); }
#define glGetRenderbufferParameteriv tunisGetRenderbufferParameteriv
TUNIS_FORCE_INLINE void  tunisGetRenderbufferParameterivEXT(GLenum target, GLenum pname, GLint * params) { tunisGL.tunisGetRenderbufferParameterivEXT(target, pname, params); }
#define glGetRenderbufferParameterivEXT tunisGetRenderbufferParameterivEXT
TUNIS_FORCE_INLINE void  tunisGetRenderbufferParameterivOES(GLenum target, GLenum pname, GLint * params) { tunisGL.tunisGetRenderbufferParameterivOES(target, pname, params); }
#define glGetRenderbufferParameterivOES tunisGetRenderbufferParameterivOES
TUNIS_FORCE_INLINE void  tunisGetSamplerParameterIiv(GLuint sampler, GLenum pname, GLint * params) { tunisGL.tunisGetSamplerParameterIiv(sampler, pname, params); }
#define glGetSamplerParameterIiv tunisGetSamplerParameterIiv
TUNIS_FORCE_INLINE void  tunisGetSamplerParameterIivEXT(GLuint sampler, GLenum pname, GLint * params) { tunisGL.tunisGetSamplerParameterIivEXT(sampler, pname, params); }
#define glGetSamplerParameterIivEXT tunisGetSamplerParameterIivEXT
TUNIS_FORCE_INLINE void  tunisGetSamplerParameterIivOES(GLuint sampler, GLenum pname, GLint * params) { tunisGL.tunisGetSamplerParameterIivOES(sampler, pname, params); }
#define glGetSamplerParameterIivOES tunisGetSamplerParameterIivOES
TUNIS_FORCE_INLINE void  tunisGetSamplerParameterIuiv(GLuint sampler, GLenum pname, GLuint * params) { tunisGL.tunisGetSamplerParameterIuiv(sampler, pname, params); }
#define glGetSamplerParameterIuiv tunisGetSamplerParameterIuiv
TUNIS_FORCE_INLINE void  tunisGetSamplerParameterIuivEXT(GLuint sampler, GLenum pname, GLuint * params) { tunisGL.tunisGetSamplerParameterIuivEXT(sampler, pname, params); }
#define glGetSamplerParameterIuivEXT tunisGetSamplerParameterIuivEXT
TUNIS_FORCE_INLINE void  tunisGetSamplerParameterIuivOES(GLuint sampler, GLenum pname, GLuint * params) { tunisGL.tunisGetSamplerParameterIuivOES(sampler, pname, params); }
#define glGetSamplerParameterIuivOES tunisGetSamplerParameterIuivOES
TUNIS_FORCE_INLINE void  tunisGetSamplerParameterfv(GLuint sampler, GLenum pname, GLfloat * params) { tunisGL.tunisGetSamplerParameterfv(sampler, pname, params); }
#define glGetSamplerParameterfv tunisGetSamplerParameterfv
TUNIS_FORCE_INLINE void  tunisGetSamplerParameteriv(GLuint sampler, GLenum pname, GLint * params) { tunisGL.tunisGetSamplerParameteriv(sampler, pname, params); }
#define glGetSamplerParameteriv tunisGetSamplerParameteriv
TUNIS_FORCE_INLINE void  tunisGetSemaphoreParameterui64vEXT(GLuint semaphore, GLenum pname, GLuint64 * params) { tunisGL.tunisGetSemaphoreParameterui64vEXT(semaphore, pname, params); }
#define glGetSemaphoreParameterui64vEXT tunisGetSemaphoreParameterui64vEXT
TUNIS_FORCE_INLINE void  tunisGetSeparableFilter(GLenum target, GLenum format, GLenum type, void * row, void * column, void * span) { tunisGL.tunisGetSeparableFilter(target, format, type, row, column, span); }
#define glGetSeparableFilter tunisGetSeparableFilter
TUNIS_FORCE_INLINE void  tunisGetSeparableFilterEXT(GLenum target, GLenum format, GLenum type, void * row, void * column, void * span) { tunisGL.tunisGetSeparableFilterEXT(target, format, type, row, column, span); }
#define glGetSeparableFilterEXT tunisGetSeparableFilterEXT
TUNIS_FORCE_INLINE void  tunisGetShaderInfoLog(GLuint shader, GLsizei bufSize, GLsizei * length, GLchar * infoLog) { tunisGL.tunisGetShaderInfoLog(shader, bufSize, length, infoLog); }
#define glGetShaderInfoLog tunisGetShaderInfoLog
TUNIS_FORCE_INLINE void  tunisGetShaderPrecisionFormat(GLenum shadertype, GLenum precisiontype, GLint * range, GLint * precision) { tunisGL.tunisGetShaderPrecisionFormat(shadertype, precisiontype, range, precision); }
#define glGetShaderPrecisionFormat tunisGetShaderPrecisionFormat
TUNIS_FORCE_INLINE void  tunisGetShaderSource(GLuint shader, GLsizei bufSize, GLsizei * length, GLchar * source) { tunisGL.tunisGetShaderSource(shader, bufSize, length, source); }
#define glGetShaderSource tunisGetShaderSource
TUNIS_FORCE_INLINE void  tunisGetShaderSourceARB(GLhandleARB obj, GLsizei maxLength, GLsizei * length, GLcharARB * source) { tunisGL.tunisGetShaderSourceARB(obj, maxLength, length, source); }
#define glGetShaderSourceARB tunisGetShaderSourceARB
TUNIS_FORCE_INLINE void  tunisGetShaderiv(GLuint shader, GLenum pname, GLint * params) { tunisGL.tunisGetShaderiv(shader, pname, params); }
#define glGetShaderiv tunisGetShaderiv
TUNIS_FORCE_INLINE void  tunisGetShadingRateImagePaletteNV(GLuint viewport, GLuint entry, GLenum * rate) { tunisGL.tunisGetShadingRateImagePaletteNV(viewport, entry, rate); }
#define glGetShadingRateImagePaletteNV tunisGetShadingRateImagePaletteNV
TUNIS_FORCE_INLINE void  tunisGetShadingRateSampleLocationivNV(GLenum rate, GLuint samples, GLuint index, GLint * location) { tunisGL.tunisGetShadingRateSampleLocationivNV(rate, samples, index, location); }
#define glGetShadingRateSampleLocationivNV tunisGetShadingRateSampleLocationivNV
TUNIS_FORCE_INLINE void  tunisGetSharpenTexFuncSGIS(GLenum target, GLfloat * points) { tunisGL.tunisGetSharpenTexFuncSGIS(target, points); }
#define glGetSharpenTexFuncSGIS tunisGetSharpenTexFuncSGIS
TUNIS_FORCE_INLINE GLushort tunisGetStageIndexNV(GLenum shadertype) { return tunisGL.tunisGetStageIndexNV(shadertype); }
#define glGetStageIndexNV tunisGetStageIndexNV
TUNIS_FORCE_INLINE const GLubyte * tunisGetString(GLenum name) { return tunisGL.tunisGetString(name); }
#define glGetString tunisGetString
TUNIS_FORCE_INLINE const GLubyte * tunisGetStringi(GLenum name, GLuint index) { return tunisGL.tunisGetStringi(name, index); }
#define glGetStringi tunisGetStringi
TUNIS_FORCE_INLINE GLuint tunisGetSubroutineIndex(GLuint program, GLenum shadertype, const GLchar * name) { return tunisGL.tunisGetSubroutineIndex(program, shadertype, name); }
#define glGetSubroutineIndex tunisGetSubroutineIndex
TUNIS_FORCE_INLINE GLint tunisGetSubroutineUniformLocation(GLuint program, GLenum shadertype, const GLchar * name) { return tunisGL.tunisGetSubroutineUniformLocation(program, shadertype, name); }
#define glGetSubroutineUniformLocation tunisGetSubroutineUniformLocation
TUNIS_FORCE_INLINE void  tunisGetSynciv(GLsync sync, GLenum pname, GLsizei bufSize, GLsizei * length, GLint * values) { tunisGL.tunisGetSynciv(sync, pname, bufSize, length, values); }
#define glGetSynciv tunisGetSynciv
TUNIS_FORCE_INLINE void  tunisGetSyncivAPPLE(GLsync sync, GLenum pname, GLsizei bufSize, GLsizei * length, GLint * values) { tunisGL.tunisGetSyncivAPPLE(sync, pname, bufSize, length, values); }
#define glGetSyncivAPPLE tunisGetSyncivAPPLE
TUNIS_FORCE_INLINE void  tunisGetTexBumpParameterfvATI(GLenum pname, GLfloat * param) { tunisGL.tunisGetTexBumpParameterfvATI(pname, param); }
#define glGetTexBumpParameterfvATI tunisGetTexBumpParameterfvATI
TUNIS_FORCE_INLINE void  tunisGetTexBumpParameterivATI(GLenum pname, GLint * param) { tunisGL.tunisGetTexBumpParameterivATI(pname, param); }
#define glGetTexBumpParameterivATI tunisGetTexBumpParameterivATI
TUNIS_FORCE_INLINE void  tunisGetTexEnvfv(GLenum target, GLenum pname, GLfloat * params) { tunisGL.tunisGetTexEnvfv(target, pname, params); }
#define glGetTexEnvfv tunisGetTexEnvfv
TUNIS_FORCE_INLINE void  tunisGetTexEnviv(GLenum target, GLenum pname, GLint * params) { tunisGL.tunisGetTexEnviv(target, pname, params); }
#define glGetTexEnviv tunisGetTexEnviv
TUNIS_FORCE_INLINE void  tunisGetTexEnvxv(GLenum target, GLenum pname, GLfixed * params) { tunisGL.tunisGetTexEnvxv(target, pname, params); }
#define glGetTexEnvxv tunisGetTexEnvxv
TUNIS_FORCE_INLINE void  tunisGetTexEnvxvOES(GLenum target, GLenum pname, GLfixed * params) { tunisGL.tunisGetTexEnvxvOES(target, pname, params); }
#define glGetTexEnvxvOES tunisGetTexEnvxvOES
TUNIS_FORCE_INLINE void  tunisGetTexFilterFuncSGIS(GLenum target, GLenum filter, GLfloat * weights) { tunisGL.tunisGetTexFilterFuncSGIS(target, filter, weights); }
#define glGetTexFilterFuncSGIS tunisGetTexFilterFuncSGIS
TUNIS_FORCE_INLINE void  tunisGetTexGendv(GLenum coord, GLenum pname, GLdouble * params) { tunisGL.tunisGetTexGendv(coord, pname, params); }
#define glGetTexGendv tunisGetTexGendv
TUNIS_FORCE_INLINE void  tunisGetTexGenfv(GLenum coord, GLenum pname, GLfloat * params) { tunisGL.tunisGetTexGenfv(coord, pname, params); }
#define glGetTexGenfv tunisGetTexGenfv
TUNIS_FORCE_INLINE void  tunisGetTexGenfvOES(GLenum coord, GLenum pname, GLfloat * params) { tunisGL.tunisGetTexGenfvOES(coord, pname, params); }
#define glGetTexGenfvOES tunisGetTexGenfvOES
TUNIS_FORCE_INLINE void  tunisGetTexGeniv(GLenum coord, GLenum pname, GLint * params) { tunisGL.tunisGetTexGeniv(coord, pname, params); }
#define glGetTexGeniv tunisGetTexGeniv
TUNIS_FORCE_INLINE void  tunisGetTexGenivOES(GLenum coord, GLenum pname, GLint * params) { tunisGL.tunisGetTexGenivOES(coord, pname, params); }
#define glGetTexGenivOES tunisGetTexGenivOES
TUNIS_FORCE_INLINE void  tunisGetTexGenxvOES(GLenum coord, GLenum pname, GLfixed * params) { tunisGL.tunisGetTexGenxvOES(coord, pname, params); }
#define glGetTexGenxvOES tunisGetTexGenxvOES
TUNIS_FORCE_INLINE void  tunisGetTexImage(GLenum target, GLint level, GLenum format, GLenum type, void * pixels) { tunisGL.tunisGetTexImage(target, level, format, type, pixels); }
#define glGetTexImage tunisGetTexImage
TUNIS_FORCE_INLINE void  tunisGetTexLevelParameterfv(GLenum target, GLint level, GLenum pname, GLfloat * params) { tunisGL.tunisGetTexLevelParameterfv(target, level, pname, params); }
#define glGetTexLevelParameterfv tunisGetTexLevelParameterfv
TUNIS_FORCE_INLINE void  tunisGetTexLevelParameteriv(GLenum target, GLint level, GLenum pname, GLint * params) { tunisGL.tunisGetTexLevelParameteriv(target, level, pname, params); }
#define glGetTexLevelParameteriv tunisGetTexLevelParameteriv
TUNIS_FORCE_INLINE void  tunisGetTexLevelParameterxvOES(GLenum target, GLint level, GLenum pname, GLfixed * params) { tunisGL.tunisGetTexLevelParameterxvOES(target, level, pname, params); }
#define glGetTexLevelParameterxvOES tunisGetTexLevelParameterxvOES
TUNIS_FORCE_INLINE void  tunisGetTexParameterIiv(GLenum target, GLenum pname, GLint * params) { tunisGL.tunisGetTexParameterIiv(target, pname, params); }
#define glGetTexParameterIiv tunisGetTexParameterIiv
TUNIS_FORCE_INLINE void  tunisGetTexParameterIivEXT(GLenum target, GLenum pname, GLint * params) { tunisGL.tunisGetTexParameterIivEXT(target, pname, params); }
#define glGetTexParameterIivEXT tunisGetTexParameterIivEXT
TUNIS_FORCE_INLINE void  tunisGetTexParameterIivOES(GLenum target, GLenum pname, GLint * params) { tunisGL.tunisGetTexParameterIivOES(target, pname, params); }
#define glGetTexParameterIivOES tunisGetTexParameterIivOES
TUNIS_FORCE_INLINE void  tunisGetTexParameterIuiv(GLenum target, GLenum pname, GLuint * params) { tunisGL.tunisGetTexParameterIuiv(target, pname, params); }
#define glGetTexParameterIuiv tunisGetTexParameterIuiv
TUNIS_FORCE_INLINE void  tunisGetTexParameterIuivEXT(GLenum target, GLenum pname, GLuint * params) { tunisGL.tunisGetTexParameterIuivEXT(target, pname, params); }
#define glGetTexParameterIuivEXT tunisGetTexParameterIuivEXT
TUNIS_FORCE_INLINE void  tunisGetTexParameterIuivOES(GLenum target, GLenum pname, GLuint * params) { tunisGL.tunisGetTexParameterIuivOES(target, pname, params); }
#define glGetTexParameterIuivOES tunisGetTexParameterIuivOES
TUNIS_FORCE_INLINE void  tunisGetTexParameterPointervAPPLE(GLenum target, GLenum pname, void ** params) { tunisGL.tunisGetTexParameterPointervAPPLE(target, pname, params); }
#define glGetTexParameterPointervAPPLE tunisGetTexParameterPointervAPPLE
TUNIS_FORCE_INLINE void  tunisGetTexParameterfv(GLenum target, GLenum pname, GLfloat * params) { tunisGL.tunisGetTexParameterfv(target, pname, params); }
#define glGetTexParameterfv tunisGetTexParameterfv
TUNIS_FORCE_INLINE void  tunisGetTexParameteriv(GLenum target, GLenum pname, GLint * params) { tunisGL.tunisGetTexParameteriv(target, pname, params); }
#define glGetTexParameteriv tunisGetTexParameteriv
TUNIS_FORCE_INLINE void  tunisGetTexParameterxv(GLenum target, GLenum pname, GLfixed * params) { tunisGL.tunisGetTexParameterxv(target, pname, params); }
#define glGetTexParameterxv tunisGetTexParameterxv
TUNIS_FORCE_INLINE void  tunisGetTexParameterxvOES(GLenum target, GLenum pname, GLfixed * params) { tunisGL.tunisGetTexParameterxvOES(target, pname, params); }
#define glGetTexParameterxvOES tunisGetTexParameterxvOES
TUNIS_FORCE_INLINE GLuint64 tunisGetTextureHandleARB(GLuint texture) { return tunisGL.tunisGetTextureHandleARB(texture); }
#define glGetTextureHandleARB tunisGetTextureHandleARB
TUNIS_FORCE_INLINE GLuint64 tunisGetTextureHandleIMG(GLuint texture) { return tunisGL.tunisGetTextureHandleIMG(texture); }
#define glGetTextureHandleIMG tunisGetTextureHandleIMG
TUNIS_FORCE_INLINE GLuint64 tunisGetTextureHandleNV(GLuint texture) { return tunisGL.tunisGetTextureHandleNV(texture); }
#define glGetTextureHandleNV tunisGetTextureHandleNV
TUNIS_FORCE_INLINE void  tunisGetTextureImage(GLuint texture, GLint level, GLenum format, GLenum type, GLsizei bufSize, void * pixels) { tunisGL.tunisGetTextureImage(texture, level, format, type, bufSize, pixels); }
#define glGetTextureImage tunisGetTextureImage
TUNIS_FORCE_INLINE void  tunisGetTextureImageEXT(GLuint texture, GLenum target, GLint level, GLenum format, GLenum type, void * pixels) { tunisGL.tunisGetTextureImageEXT(texture, target, level, format, type, pixels); }
#define glGetTextureImageEXT tunisGetTextureImageEXT
TUNIS_FORCE_INLINE void  tunisGetTextureLevelParameterfv(GLuint texture, GLint level, GLenum pname, GLfloat * params) { tunisGL.tunisGetTextureLevelParameterfv(texture, level, pname, params); }
#define glGetTextureLevelParameterfv tunisGetTextureLevelParameterfv
TUNIS_FORCE_INLINE void  tunisGetTextureLevelParameterfvEXT(GLuint texture, GLenum target, GLint level, GLenum pname, GLfloat * params) { tunisGL.tunisGetTextureLevelParameterfvEXT(texture, target, level, pname, params); }
#define glGetTextureLevelParameterfvEXT tunisGetTextureLevelParameterfvEXT
TUNIS_FORCE_INLINE void  tunisGetTextureLevelParameteriv(GLuint texture, GLint level, GLenum pname, GLint * params) { tunisGL.tunisGetTextureLevelParameteriv(texture, level, pname, params); }
#define glGetTextureLevelParameteriv tunisGetTextureLevelParameteriv
TUNIS_FORCE_INLINE void  tunisGetTextureLevelParameterivEXT(GLuint texture, GLenum target, GLint level, GLenum pname, GLint * params) { tunisGL.tunisGetTextureLevelParameterivEXT(texture, target, level, pname, params); }
#define glGetTextureLevelParameterivEXT tunisGetTextureLevelParameterivEXT
TUNIS_FORCE_INLINE void  tunisGetTextureParameterIiv(GLuint texture, GLenum pname, GLint * params) { tunisGL.tunisGetTextureParameterIiv(texture, pname, params); }
#define glGetTextureParameterIiv tunisGetTextureParameterIiv
TUNIS_FORCE_INLINE void  tunisGetTextureParameterIivEXT(GLuint texture, GLenum target, GLenum pname, GLint * params) { tunisGL.tunisGetTextureParameterIivEXT(texture, target, pname, params); }
#define glGetTextureParameterIivEXT tunisGetTextureParameterIivEXT
TUNIS_FORCE_INLINE void  tunisGetTextureParameterIuiv(GLuint texture, GLenum pname, GLuint * params) { tunisGL.tunisGetTextureParameterIuiv(texture, pname, params); }
#define glGetTextureParameterIuiv tunisGetTextureParameterIuiv
TUNIS_FORCE_INLINE void  tunisGetTextureParameterIuivEXT(GLuint texture, GLenum target, GLenum pname, GLuint * params) { tunisGL.tunisGetTextureParameterIuivEXT(texture, target, pname, params); }
#define glGetTextureParameterIuivEXT tunisGetTextureParameterIuivEXT
TUNIS_FORCE_INLINE void  tunisGetTextureParameterfv(GLuint texture, GLenum pname, GLfloat * params) { tunisGL.tunisGetTextureParameterfv(texture, pname, params); }
#define glGetTextureParameterfv tunisGetTextureParameterfv
TUNIS_FORCE_INLINE void  tunisGetTextureParameterfvEXT(GLuint texture, GLenum target, GLenum pname, GLfloat * params) { tunisGL.tunisGetTextureParameterfvEXT(texture, target, pname, params); }
#define glGetTextureParameterfvEXT tunisGetTextureParameterfvEXT
TUNIS_FORCE_INLINE void  tunisGetTextureParameteriv(GLuint texture, GLenum pname, GLint * params) { tunisGL.tunisGetTextureParameteriv(texture, pname, params); }
#define glGetTextureParameteriv tunisGetTextureParameteriv
TUNIS_FORCE_INLINE void  tunisGetTextureParameterivEXT(GLuint texture, GLenum target, GLenum pname, GLint * params) { tunisGL.tunisGetTextureParameterivEXT(texture, target, pname, params); }
#define glGetTextureParameterivEXT tunisGetTextureParameterivEXT
TUNIS_FORCE_INLINE GLuint64 tunisGetTextureSamplerHandleARB(GLuint texture, GLuint sampler) { return tunisGL.tunisGetTextureSamplerHandleARB(texture, sampler); }
#define glGetTextureSamplerHandleARB tunisGetTextureSamplerHandleARB
TUNIS_FORCE_INLINE GLuint64 tunisGetTextureSamplerHandleIMG(GLuint texture, GLuint sampler) { return tunisGL.tunisGetTextureSamplerHandleIMG(texture, sampler); }
#define glGetTextureSamplerHandleIMG tunisGetTextureSamplerHandleIMG
TUNIS_FORCE_INLINE GLuint64 tunisGetTextureSamplerHandleNV(GLuint texture, GLuint sampler) { return tunisGL.tunisGetTextureSamplerHandleNV(texture, sampler); }
#define glGetTextureSamplerHandleNV tunisGetTextureSamplerHandleNV
TUNIS_FORCE_INLINE void  tunisGetTextureSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, GLsizei bufSize, void * pixels) { tunisGL.tunisGetTextureSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, bufSize, pixels); }
#define glGetTextureSubImage tunisGetTextureSubImage
TUNIS_FORCE_INLINE void  tunisGetTrackMatrixivNV(GLenum target, GLuint address, GLenum pname, GLint * params) { tunisGL.tunisGetTrackMatrixivNV(target, address, pname, params); }
#define glGetTrackMatrixivNV tunisGetTrackMatrixivNV
TUNIS_FORCE_INLINE void  tunisGetTransformFeedbackVarying(GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLsizei * size, GLenum * type, GLchar * name) { tunisGL.tunisGetTransformFeedbackVarying(program, index, bufSize, length, size, type, name); }
#define glGetTransformFeedbackVarying tunisGetTransformFeedbackVarying
TUNIS_FORCE_INLINE void  tunisGetTransformFeedbackVaryingEXT(GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLsizei * size, GLenum * type, GLchar * name) { tunisGL.tunisGetTransformFeedbackVaryingEXT(program, index, bufSize, length, size, type, name); }
#define glGetTransformFeedbackVaryingEXT tunisGetTransformFeedbackVaryingEXT
TUNIS_FORCE_INLINE void  tunisGetTransformFeedbackVaryingNV(GLuint program, GLuint index, GLint * location) { tunisGL.tunisGetTransformFeedbackVaryingNV(program, index, location); }
#define glGetTransformFeedbackVaryingNV tunisGetTransformFeedbackVaryingNV
TUNIS_FORCE_INLINE void  tunisGetTransformFeedbacki64_v(GLuint xfb, GLenum pname, GLuint index, GLint64 * param) { tunisGL.tunisGetTransformFeedbacki64_v(xfb, pname, index, param); }
#define glGetTransformFeedbacki64_v tunisGetTransformFeedbacki64_v
TUNIS_FORCE_INLINE void  tunisGetTransformFeedbacki_v(GLuint xfb, GLenum pname, GLuint index, GLint * param) { tunisGL.tunisGetTransformFeedbacki_v(xfb, pname, index, param); }
#define glGetTransformFeedbacki_v tunisGetTransformFeedbacki_v
TUNIS_FORCE_INLINE void  tunisGetTransformFeedbackiv(GLuint xfb, GLenum pname, GLint * param) { tunisGL.tunisGetTransformFeedbackiv(xfb, pname, param); }
#define glGetTransformFeedbackiv tunisGetTransformFeedbackiv
TUNIS_FORCE_INLINE void  tunisGetTranslatedShaderSourceANGLE(GLuint shader, GLsizei bufsize, GLsizei * length, GLchar * source) { tunisGL.tunisGetTranslatedShaderSourceANGLE(shader, bufsize, length, source); }
#define glGetTranslatedShaderSourceANGLE tunisGetTranslatedShaderSourceANGLE
TUNIS_FORCE_INLINE GLuint tunisGetUniformBlockIndex(GLuint program, const GLchar * uniformBlockName) { return tunisGL.tunisGetUniformBlockIndex(program, uniformBlockName); }
#define glGetUniformBlockIndex tunisGetUniformBlockIndex
TUNIS_FORCE_INLINE GLint tunisGetUniformBufferSizeEXT(GLuint program, GLint location) { return tunisGL.tunisGetUniformBufferSizeEXT(program, location); }
#define glGetUniformBufferSizeEXT tunisGetUniformBufferSizeEXT
TUNIS_FORCE_INLINE void  tunisGetUniformIndices(GLuint program, GLsizei uniformCount, const GLchar *const* uniformNames, GLuint * uniformIndices) { tunisGL.tunisGetUniformIndices(program, uniformCount, uniformNames, uniformIndices); }
#define glGetUniformIndices tunisGetUniformIndices
TUNIS_FORCE_INLINE GLint tunisGetUniformLocation(GLuint program, const GLchar * name) { return tunisGL.tunisGetUniformLocation(program, name); }
#define glGetUniformLocation tunisGetUniformLocation
TUNIS_FORCE_INLINE GLint tunisGetUniformLocationARB(GLhandleARB programObj, const GLcharARB * name) { return tunisGL.tunisGetUniformLocationARB(programObj, name); }
#define glGetUniformLocationARB tunisGetUniformLocationARB
TUNIS_FORCE_INLINE GLintptr tunisGetUniformOffsetEXT(GLuint program, GLint location) { return tunisGL.tunisGetUniformOffsetEXT(program, location); }
#define glGetUniformOffsetEXT tunisGetUniformOffsetEXT
TUNIS_FORCE_INLINE void  tunisGetUniformSubroutineuiv(GLenum shadertype, GLint location, GLuint * params) { tunisGL.tunisGetUniformSubroutineuiv(shadertype, location, params); }
#define glGetUniformSubroutineuiv tunisGetUniformSubroutineuiv
TUNIS_FORCE_INLINE void  tunisGetUniformdv(GLuint program, GLint location, GLdouble * params) { tunisGL.tunisGetUniformdv(program, location, params); }
#define glGetUniformdv tunisGetUniformdv
TUNIS_FORCE_INLINE void  tunisGetUniformfv(GLuint program, GLint location, GLfloat * params) { tunisGL.tunisGetUniformfv(program, location, params); }
#define glGetUniformfv tunisGetUniformfv
TUNIS_FORCE_INLINE void  tunisGetUniformfvARB(GLhandleARB programObj, GLint location, GLfloat * params) { tunisGL.tunisGetUniformfvARB(programObj, location, params); }
#define glGetUniformfvARB tunisGetUniformfvARB
TUNIS_FORCE_INLINE void  tunisGetUniformi64vARB(GLuint program, GLint location, GLint64 * params) { tunisGL.tunisGetUniformi64vARB(program, location, params); }
#define glGetUniformi64vARB tunisGetUniformi64vARB
TUNIS_FORCE_INLINE void  tunisGetUniformi64vNV(GLuint program, GLint location, GLint64EXT * params) { tunisGL.tunisGetUniformi64vNV(program, location, params); }
#define glGetUniformi64vNV tunisGetUniformi64vNV
TUNIS_FORCE_INLINE void  tunisGetUniformiv(GLuint program, GLint location, GLint * params) { tunisGL.tunisGetUniformiv(program, location, params); }
#define glGetUniformiv tunisGetUniformiv
TUNIS_FORCE_INLINE void  tunisGetUniformivARB(GLhandleARB programObj, GLint location, GLint * params) { tunisGL.tunisGetUniformivARB(programObj, location, params); }
#define glGetUniformivARB tunisGetUniformivARB
TUNIS_FORCE_INLINE void  tunisGetUniformui64vARB(GLuint program, GLint location, GLuint64 * params) { tunisGL.tunisGetUniformui64vARB(program, location, params); }
#define glGetUniformui64vARB tunisGetUniformui64vARB
TUNIS_FORCE_INLINE void  tunisGetUniformui64vNV(GLuint program, GLint location, GLuint64EXT * params) { tunisGL.tunisGetUniformui64vNV(program, location, params); }
#define glGetUniformui64vNV tunisGetUniformui64vNV
TUNIS_FORCE_INLINE void  tunisGetUniformuiv(GLuint program, GLint location, GLuint * params) { tunisGL.tunisGetUniformuiv(program, location, params); }
#define glGetUniformuiv tunisGetUniformuiv
TUNIS_FORCE_INLINE void  tunisGetUniformuivEXT(GLuint program, GLint location, GLuint * params) { tunisGL.tunisGetUniformuivEXT(program, location, params); }
#define glGetUniformuivEXT tunisGetUniformuivEXT
TUNIS_FORCE_INLINE void  tunisGetUnsignedBytei_vEXT(GLenum target, GLuint index, GLubyte * data) { tunisGL.tunisGetUnsignedBytei_vEXT(target, index, data); }
#define glGetUnsignedBytei_vEXT tunisGetUnsignedBytei_vEXT
TUNIS_FORCE_INLINE void  tunisGetUnsignedBytevEXT(GLenum pname, GLubyte * data) { tunisGL.tunisGetUnsignedBytevEXT(pname, data); }
#define glGetUnsignedBytevEXT tunisGetUnsignedBytevEXT
TUNIS_FORCE_INLINE void  tunisGetVariantArrayObjectfvATI(GLuint id, GLenum pname, GLfloat * params) { tunisGL.tunisGetVariantArrayObjectfvATI(id, pname, params); }
#define glGetVariantArrayObjectfvATI tunisGetVariantArrayObjectfvATI
TUNIS_FORCE_INLINE void  tunisGetVariantArrayObjectivATI(GLuint id, GLenum pname, GLint * params) { tunisGL.tunisGetVariantArrayObjectivATI(id, pname, params); }
#define glGetVariantArrayObjectivATI tunisGetVariantArrayObjectivATI
TUNIS_FORCE_INLINE void  tunisGetVariantBooleanvEXT(GLuint id, GLenum value, GLboolean * data) { tunisGL.tunisGetVariantBooleanvEXT(id, value, data); }
#define glGetVariantBooleanvEXT tunisGetVariantBooleanvEXT
TUNIS_FORCE_INLINE void  tunisGetVariantFloatvEXT(GLuint id, GLenum value, GLfloat * data) { tunisGL.tunisGetVariantFloatvEXT(id, value, data); }
#define glGetVariantFloatvEXT tunisGetVariantFloatvEXT
TUNIS_FORCE_INLINE void  tunisGetVariantIntegervEXT(GLuint id, GLenum value, GLint * data) { tunisGL.tunisGetVariantIntegervEXT(id, value, data); }
#define glGetVariantIntegervEXT tunisGetVariantIntegervEXT
TUNIS_FORCE_INLINE void  tunisGetVariantPointervEXT(GLuint id, GLenum value, void ** data) { tunisGL.tunisGetVariantPointervEXT(id, value, data); }
#define glGetVariantPointervEXT tunisGetVariantPointervEXT
TUNIS_FORCE_INLINE GLint tunisGetVaryingLocationNV(GLuint program, const GLchar * name) { return tunisGL.tunisGetVaryingLocationNV(program, name); }
#define glGetVaryingLocationNV tunisGetVaryingLocationNV
TUNIS_FORCE_INLINE void  tunisGetVertexArrayIndexed64iv(GLuint vaobj, GLuint index, GLenum pname, GLint64 * param) { tunisGL.tunisGetVertexArrayIndexed64iv(vaobj, index, pname, param); }
#define glGetVertexArrayIndexed64iv tunisGetVertexArrayIndexed64iv
TUNIS_FORCE_INLINE void  tunisGetVertexArrayIndexediv(GLuint vaobj, GLuint index, GLenum pname, GLint * param) { tunisGL.tunisGetVertexArrayIndexediv(vaobj, index, pname, param); }
#define glGetVertexArrayIndexediv tunisGetVertexArrayIndexediv
TUNIS_FORCE_INLINE void  tunisGetVertexArrayIntegeri_vEXT(GLuint vaobj, GLuint index, GLenum pname, GLint * param) { tunisGL.tunisGetVertexArrayIntegeri_vEXT(vaobj, index, pname, param); }
#define glGetVertexArrayIntegeri_vEXT tunisGetVertexArrayIntegeri_vEXT
TUNIS_FORCE_INLINE void  tunisGetVertexArrayIntegervEXT(GLuint vaobj, GLenum pname, GLint * param) { tunisGL.tunisGetVertexArrayIntegervEXT(vaobj, pname, param); }
#define glGetVertexArrayIntegervEXT tunisGetVertexArrayIntegervEXT
TUNIS_FORCE_INLINE void  tunisGetVertexArrayPointeri_vEXT(GLuint vaobj, GLuint index, GLenum pname, void ** param) { tunisGL.tunisGetVertexArrayPointeri_vEXT(vaobj, index, pname, param); }
#define glGetVertexArrayPointeri_vEXT tunisGetVertexArrayPointeri_vEXT
TUNIS_FORCE_INLINE void  tunisGetVertexArrayPointervEXT(GLuint vaobj, GLenum pname, void ** param) { tunisGL.tunisGetVertexArrayPointervEXT(vaobj, pname, param); }
#define glGetVertexArrayPointervEXT tunisGetVertexArrayPointervEXT
TUNIS_FORCE_INLINE void  tunisGetVertexArrayiv(GLuint vaobj, GLenum pname, GLint * param) { tunisGL.tunisGetVertexArrayiv(vaobj, pname, param); }
#define glGetVertexArrayiv tunisGetVertexArrayiv
TUNIS_FORCE_INLINE void  tunisGetVertexAttribArrayObjectfvATI(GLuint index, GLenum pname, GLfloat * params) { tunisGL.tunisGetVertexAttribArrayObjectfvATI(index, pname, params); }
#define glGetVertexAttribArrayObjectfvATI tunisGetVertexAttribArrayObjectfvATI
TUNIS_FORCE_INLINE void  tunisGetVertexAttribArrayObjectivATI(GLuint index, GLenum pname, GLint * params) { tunisGL.tunisGetVertexAttribArrayObjectivATI(index, pname, params); }
#define glGetVertexAttribArrayObjectivATI tunisGetVertexAttribArrayObjectivATI
TUNIS_FORCE_INLINE void  tunisGetVertexAttribIiv(GLuint index, GLenum pname, GLint * params) { tunisGL.tunisGetVertexAttribIiv(index, pname, params); }
#define glGetVertexAttribIiv tunisGetVertexAttribIiv
TUNIS_FORCE_INLINE void  tunisGetVertexAttribIivEXT(GLuint index, GLenum pname, GLint * params) { tunisGL.tunisGetVertexAttribIivEXT(index, pname, params); }
#define glGetVertexAttribIivEXT tunisGetVertexAttribIivEXT
TUNIS_FORCE_INLINE void  tunisGetVertexAttribIuiv(GLuint index, GLenum pname, GLuint * params) { tunisGL.tunisGetVertexAttribIuiv(index, pname, params); }
#define glGetVertexAttribIuiv tunisGetVertexAttribIuiv
TUNIS_FORCE_INLINE void  tunisGetVertexAttribIuivEXT(GLuint index, GLenum pname, GLuint * params) { tunisGL.tunisGetVertexAttribIuivEXT(index, pname, params); }
#define glGetVertexAttribIuivEXT tunisGetVertexAttribIuivEXT
TUNIS_FORCE_INLINE void  tunisGetVertexAttribLdv(GLuint index, GLenum pname, GLdouble * params) { tunisGL.tunisGetVertexAttribLdv(index, pname, params); }
#define glGetVertexAttribLdv tunisGetVertexAttribLdv
TUNIS_FORCE_INLINE void  tunisGetVertexAttribLdvEXT(GLuint index, GLenum pname, GLdouble * params) { tunisGL.tunisGetVertexAttribLdvEXT(index, pname, params); }
#define glGetVertexAttribLdvEXT tunisGetVertexAttribLdvEXT
TUNIS_FORCE_INLINE void  tunisGetVertexAttribLi64vNV(GLuint index, GLenum pname, GLint64EXT * params) { tunisGL.tunisGetVertexAttribLi64vNV(index, pname, params); }
#define glGetVertexAttribLi64vNV tunisGetVertexAttribLi64vNV
TUNIS_FORCE_INLINE void  tunisGetVertexAttribLui64vARB(GLuint index, GLenum pname, GLuint64EXT * params) { tunisGL.tunisGetVertexAttribLui64vARB(index, pname, params); }
#define glGetVertexAttribLui64vARB tunisGetVertexAttribLui64vARB
TUNIS_FORCE_INLINE void  tunisGetVertexAttribLui64vNV(GLuint index, GLenum pname, GLuint64EXT * params) { tunisGL.tunisGetVertexAttribLui64vNV(index, pname, params); }
#define glGetVertexAttribLui64vNV tunisGetVertexAttribLui64vNV
TUNIS_FORCE_INLINE void  tunisGetVertexAttribPointerv(GLuint index, GLenum pname, void ** pointer) { tunisGL.tunisGetVertexAttribPointerv(index, pname, pointer); }
#define glGetVertexAttribPointerv tunisGetVertexAttribPointerv
TUNIS_FORCE_INLINE void  tunisGetVertexAttribPointervARB(GLuint index, GLenum pname, void ** pointer) { tunisGL.tunisGetVertexAttribPointervARB(index, pname, pointer); }
#define glGetVertexAttribPointervARB tunisGetVertexAttribPointervARB
TUNIS_FORCE_INLINE void  tunisGetVertexAttribPointervNV(GLuint index, GLenum pname, void ** pointer) { tunisGL.tunisGetVertexAttribPointervNV(index, pname, pointer); }
#define glGetVertexAttribPointervNV tunisGetVertexAttribPointervNV
TUNIS_FORCE_INLINE void  tunisGetVertexAttribdv(GLuint index, GLenum pname, GLdouble * params) { tunisGL.tunisGetVertexAttribdv(index, pname, params); }
#define glGetVertexAttribdv tunisGetVertexAttribdv
TUNIS_FORCE_INLINE void  tunisGetVertexAttribdvARB(GLuint index, GLenum pname, GLdouble * params) { tunisGL.tunisGetVertexAttribdvARB(index, pname, params); }
#define glGetVertexAttribdvARB tunisGetVertexAttribdvARB
TUNIS_FORCE_INLINE void  tunisGetVertexAttribdvNV(GLuint index, GLenum pname, GLdouble * params) { tunisGL.tunisGetVertexAttribdvNV(index, pname, params); }
#define glGetVertexAttribdvNV tunisGetVertexAttribdvNV
TUNIS_FORCE_INLINE void  tunisGetVertexAttribfv(GLuint index, GLenum pname, GLfloat * params) { tunisGL.tunisGetVertexAttribfv(index, pname, params); }
#define glGetVertexAttribfv tunisGetVertexAttribfv
TUNIS_FORCE_INLINE void  tunisGetVertexAttribfvARB(GLuint index, GLenum pname, GLfloat * params) { tunisGL.tunisGetVertexAttribfvARB(index, pname, params); }
#define glGetVertexAttribfvARB tunisGetVertexAttribfvARB
TUNIS_FORCE_INLINE void  tunisGetVertexAttribfvNV(GLuint index, GLenum pname, GLfloat * params) { tunisGL.tunisGetVertexAttribfvNV(index, pname, params); }
#define glGetVertexAttribfvNV tunisGetVertexAttribfvNV
TUNIS_FORCE_INLINE void  tunisGetVertexAttribiv(GLuint index, GLenum pname, GLint * params) { tunisGL.tunisGetVertexAttribiv(index, pname, params); }
#define glGetVertexAttribiv tunisGetVertexAttribiv
TUNIS_FORCE_INLINE void  tunisGetVertexAttribivARB(GLuint index, GLenum pname, GLint * params) { tunisGL.tunisGetVertexAttribivARB(index, pname, params); }
#define glGetVertexAttribivARB tunisGetVertexAttribivARB
TUNIS_FORCE_INLINE void  tunisGetVertexAttribivNV(GLuint index, GLenum pname, GLint * params) { tunisGL.tunisGetVertexAttribivNV(index, pname, params); }
#define glGetVertexAttribivNV tunisGetVertexAttribivNV
TUNIS_FORCE_INLINE void  tunisGetVideoCaptureStreamdvNV(GLuint video_capture_slot, GLuint stream, GLenum pname, GLdouble * params) { tunisGL.tunisGetVideoCaptureStreamdvNV(video_capture_slot, stream, pname, params); }
#define glGetVideoCaptureStreamdvNV tunisGetVideoCaptureStreamdvNV
TUNIS_FORCE_INLINE void  tunisGetVideoCaptureStreamfvNV(GLuint video_capture_slot, GLuint stream, GLenum pname, GLfloat * params) { tunisGL.tunisGetVideoCaptureStreamfvNV(video_capture_slot, stream, pname, params); }
#define glGetVideoCaptureStreamfvNV tunisGetVideoCaptureStreamfvNV
TUNIS_FORCE_INLINE void  tunisGetVideoCaptureStreamivNV(GLuint video_capture_slot, GLuint stream, GLenum pname, GLint * params) { tunisGL.tunisGetVideoCaptureStreamivNV(video_capture_slot, stream, pname, params); }
#define glGetVideoCaptureStreamivNV tunisGetVideoCaptureStreamivNV
TUNIS_FORCE_INLINE void  tunisGetVideoCaptureivNV(GLuint video_capture_slot, GLenum pname, GLint * params) { tunisGL.tunisGetVideoCaptureivNV(video_capture_slot, pname, params); }
#define glGetVideoCaptureivNV tunisGetVideoCaptureivNV
TUNIS_FORCE_INLINE void  tunisGetVideoi64vNV(GLuint video_slot, GLenum pname, GLint64EXT * params) { tunisGL.tunisGetVideoi64vNV(video_slot, pname, params); }
#define glGetVideoi64vNV tunisGetVideoi64vNV
TUNIS_FORCE_INLINE void  tunisGetVideoivNV(GLuint video_slot, GLenum pname, GLint * params) { tunisGL.tunisGetVideoivNV(video_slot, pname, params); }
#define glGetVideoivNV tunisGetVideoivNV
TUNIS_FORCE_INLINE void  tunisGetVideoui64vNV(GLuint video_slot, GLenum pname, GLuint64EXT * params) { tunisGL.tunisGetVideoui64vNV(video_slot, pname, params); }
#define glGetVideoui64vNV tunisGetVideoui64vNV
TUNIS_FORCE_INLINE void  tunisGetVideouivNV(GLuint video_slot, GLenum pname, GLuint * params) { tunisGL.tunisGetVideouivNV(video_slot, pname, params); }
#define glGetVideouivNV tunisGetVideouivNV
TUNIS_FORCE_INLINE GLVULKANPROCNV tunisGetVkProcAddrNV(const GLchar * name) { return tunisGL.tunisGetVkProcAddrNV(name); }
#define glGetVkProcAddrNV tunisGetVkProcAddrNV
TUNIS_FORCE_INLINE void  tunisGetnColorTable(GLenum target, GLenum format, GLenum type, GLsizei bufSize, void * table) { tunisGL.tunisGetnColorTable(target, format, type, bufSize, table); }
#define glGetnColorTable tunisGetnColorTable
TUNIS_FORCE_INLINE void  tunisGetnColorTableARB(GLenum target, GLenum format, GLenum type, GLsizei bufSize, void * table) { tunisGL.tunisGetnColorTableARB(target, format, type, bufSize, table); }
#define glGetnColorTableARB tunisGetnColorTableARB
TUNIS_FORCE_INLINE void  tunisGetnCompressedTexImage(GLenum target, GLint lod, GLsizei bufSize, void * pixels) { tunisGL.tunisGetnCompressedTexImage(target, lod, bufSize, pixels); }
#define glGetnCompressedTexImage tunisGetnCompressedTexImage
TUNIS_FORCE_INLINE void  tunisGetnCompressedTexImageARB(GLenum target, GLint lod, GLsizei bufSize, void * img) { tunisGL.tunisGetnCompressedTexImageARB(target, lod, bufSize, img); }
#define glGetnCompressedTexImageARB tunisGetnCompressedTexImageARB
TUNIS_FORCE_INLINE void  tunisGetnConvolutionFilter(GLenum target, GLenum format, GLenum type, GLsizei bufSize, void * image) { tunisGL.tunisGetnConvolutionFilter(target, format, type, bufSize, image); }
#define glGetnConvolutionFilter tunisGetnConvolutionFilter
TUNIS_FORCE_INLINE void  tunisGetnConvolutionFilterARB(GLenum target, GLenum format, GLenum type, GLsizei bufSize, void * image) { tunisGL.tunisGetnConvolutionFilterARB(target, format, type, bufSize, image); }
#define glGetnConvolutionFilterARB tunisGetnConvolutionFilterARB
TUNIS_FORCE_INLINE void  tunisGetnHistogram(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void * values) { tunisGL.tunisGetnHistogram(target, reset, format, type, bufSize, values); }
#define glGetnHistogram tunisGetnHistogram
TUNIS_FORCE_INLINE void  tunisGetnHistogramARB(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void * values) { tunisGL.tunisGetnHistogramARB(target, reset, format, type, bufSize, values); }
#define glGetnHistogramARB tunisGetnHistogramARB
TUNIS_FORCE_INLINE void  tunisGetnMapdv(GLenum target, GLenum query, GLsizei bufSize, GLdouble * v) { tunisGL.tunisGetnMapdv(target, query, bufSize, v); }
#define glGetnMapdv tunisGetnMapdv
TUNIS_FORCE_INLINE void  tunisGetnMapdvARB(GLenum target, GLenum query, GLsizei bufSize, GLdouble * v) { tunisGL.tunisGetnMapdvARB(target, query, bufSize, v); }
#define glGetnMapdvARB tunisGetnMapdvARB
TUNIS_FORCE_INLINE void  tunisGetnMapfv(GLenum target, GLenum query, GLsizei bufSize, GLfloat * v) { tunisGL.tunisGetnMapfv(target, query, bufSize, v); }
#define glGetnMapfv tunisGetnMapfv
TUNIS_FORCE_INLINE void  tunisGetnMapfvARB(GLenum target, GLenum query, GLsizei bufSize, GLfloat * v) { tunisGL.tunisGetnMapfvARB(target, query, bufSize, v); }
#define glGetnMapfvARB tunisGetnMapfvARB
TUNIS_FORCE_INLINE void  tunisGetnMapiv(GLenum target, GLenum query, GLsizei bufSize, GLint * v) { tunisGL.tunisGetnMapiv(target, query, bufSize, v); }
#define glGetnMapiv tunisGetnMapiv
TUNIS_FORCE_INLINE void  tunisGetnMapivARB(GLenum target, GLenum query, GLsizei bufSize, GLint * v) { tunisGL.tunisGetnMapivARB(target, query, bufSize, v); }
#define glGetnMapivARB tunisGetnMapivARB
TUNIS_FORCE_INLINE void  tunisGetnMinmax(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void * values) { tunisGL.tunisGetnMinmax(target, reset, format, type, bufSize, values); }
#define glGetnMinmax tunisGetnMinmax
TUNIS_FORCE_INLINE void  tunisGetnMinmaxARB(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void * values) { tunisGL.tunisGetnMinmaxARB(target, reset, format, type, bufSize, values); }
#define glGetnMinmaxARB tunisGetnMinmaxARB
TUNIS_FORCE_INLINE void  tunisGetnPixelMapfv(GLenum map, GLsizei bufSize, GLfloat * values) { tunisGL.tunisGetnPixelMapfv(map, bufSize, values); }
#define glGetnPixelMapfv tunisGetnPixelMapfv
TUNIS_FORCE_INLINE void  tunisGetnPixelMapfvARB(GLenum map, GLsizei bufSize, GLfloat * values) { tunisGL.tunisGetnPixelMapfvARB(map, bufSize, values); }
#define glGetnPixelMapfvARB tunisGetnPixelMapfvARB
TUNIS_FORCE_INLINE void  tunisGetnPixelMapuiv(GLenum map, GLsizei bufSize, GLuint * values) { tunisGL.tunisGetnPixelMapuiv(map, bufSize, values); }
#define glGetnPixelMapuiv tunisGetnPixelMapuiv
TUNIS_FORCE_INLINE void  tunisGetnPixelMapuivARB(GLenum map, GLsizei bufSize, GLuint * values) { tunisGL.tunisGetnPixelMapuivARB(map, bufSize, values); }
#define glGetnPixelMapuivARB tunisGetnPixelMapuivARB
TUNIS_FORCE_INLINE void  tunisGetnPixelMapusv(GLenum map, GLsizei bufSize, GLushort * values) { tunisGL.tunisGetnPixelMapusv(map, bufSize, values); }
#define glGetnPixelMapusv tunisGetnPixelMapusv
TUNIS_FORCE_INLINE void  tunisGetnPixelMapusvARB(GLenum map, GLsizei bufSize, GLushort * values) { tunisGL.tunisGetnPixelMapusvARB(map, bufSize, values); }
#define glGetnPixelMapusvARB tunisGetnPixelMapusvARB
TUNIS_FORCE_INLINE void  tunisGetnPolygonStipple(GLsizei bufSize, GLubyte * pattern) { tunisGL.tunisGetnPolygonStipple(bufSize, pattern); }
#define glGetnPolygonStipple tunisGetnPolygonStipple
TUNIS_FORCE_INLINE void  tunisGetnPolygonStippleARB(GLsizei bufSize, GLubyte * pattern) { tunisGL.tunisGetnPolygonStippleARB(bufSize, pattern); }
#define glGetnPolygonStippleARB tunisGetnPolygonStippleARB
TUNIS_FORCE_INLINE void  tunisGetnSeparableFilter(GLenum target, GLenum format, GLenum type, GLsizei rowBufSize, void * row, GLsizei columnBufSize, void * column, void * span) { tunisGL.tunisGetnSeparableFilter(target, format, type, rowBufSize, row, columnBufSize, column, span); }
#define glGetnSeparableFilter tunisGetnSeparableFilter
TUNIS_FORCE_INLINE void  tunisGetnSeparableFilterARB(GLenum target, GLenum format, GLenum type, GLsizei rowBufSize, void * row, GLsizei columnBufSize, void * column, void * span) { tunisGL.tunisGetnSeparableFilterARB(target, format, type, rowBufSize, row, columnBufSize, column, span); }
#define glGetnSeparableFilterARB tunisGetnSeparableFilterARB
TUNIS_FORCE_INLINE void  tunisGetnTexImage(GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void * pixels) { tunisGL.tunisGetnTexImage(target, level, format, type, bufSize, pixels); }
#define glGetnTexImage tunisGetnTexImage
TUNIS_FORCE_INLINE void  tunisGetnTexImageARB(GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void * img) { tunisGL.tunisGetnTexImageARB(target, level, format, type, bufSize, img); }
#define glGetnTexImageARB tunisGetnTexImageARB
TUNIS_FORCE_INLINE void  tunisGetnUniformdv(GLuint program, GLint location, GLsizei bufSize, GLdouble * params) { tunisGL.tunisGetnUniformdv(program, location, bufSize, params); }
#define glGetnUniformdv tunisGetnUniformdv
TUNIS_FORCE_INLINE void  tunisGetnUniformdvARB(GLuint program, GLint location, GLsizei bufSize, GLdouble * params) { tunisGL.tunisGetnUniformdvARB(program, location, bufSize, params); }
#define glGetnUniformdvARB tunisGetnUniformdvARB
TUNIS_FORCE_INLINE void  tunisGetnUniformfv(GLuint program, GLint location, GLsizei bufSize, GLfloat * params) { tunisGL.tunisGetnUniformfv(program, location, bufSize, params); }
#define glGetnUniformfv tunisGetnUniformfv
TUNIS_FORCE_INLINE void  tunisGetnUniformfvARB(GLuint program, GLint location, GLsizei bufSize, GLfloat * params) { tunisGL.tunisGetnUniformfvARB(program, location, bufSize, params); }
#define glGetnUniformfvARB tunisGetnUniformfvARB
TUNIS_FORCE_INLINE void  tunisGetnUniformfvEXT(GLuint program, GLint location, GLsizei bufSize, GLfloat * params) { tunisGL.tunisGetnUniformfvEXT(program, location, bufSize, params); }
#define glGetnUniformfvEXT tunisGetnUniformfvEXT
TUNIS_FORCE_INLINE void  tunisGetnUniformfvKHR(GLuint program, GLint location, GLsizei bufSize, GLfloat * params) { tunisGL.tunisGetnUniformfvKHR(program, location, bufSize, params); }
#define glGetnUniformfvKHR tunisGetnUniformfvKHR
TUNIS_FORCE_INLINE void  tunisGetnUniformi64vARB(GLuint program, GLint location, GLsizei bufSize, GLint64 * params) { tunisGL.tunisGetnUniformi64vARB(program, location, bufSize, params); }
#define glGetnUniformi64vARB tunisGetnUniformi64vARB
TUNIS_FORCE_INLINE void  tunisGetnUniformiv(GLuint program, GLint location, GLsizei bufSize, GLint * params) { tunisGL.tunisGetnUniformiv(program, location, bufSize, params); }
#define glGetnUniformiv tunisGetnUniformiv
TUNIS_FORCE_INLINE void  tunisGetnUniformivARB(GLuint program, GLint location, GLsizei bufSize, GLint * params) { tunisGL.tunisGetnUniformivARB(program, location, bufSize, params); }
#define glGetnUniformivARB tunisGetnUniformivARB
TUNIS_FORCE_INLINE void  tunisGetnUniformivEXT(GLuint program, GLint location, GLsizei bufSize, GLint * params) { tunisGL.tunisGetnUniformivEXT(program, location, bufSize, params); }
#define glGetnUniformivEXT tunisGetnUniformivEXT
TUNIS_FORCE_INLINE void  tunisGetnUniformivKHR(GLuint program, GLint location, GLsizei bufSize, GLint * params) { tunisGL.tunisGetnUniformivKHR(program, location, bufSize, params); }
#define glGetnUniformivKHR tunisGetnUniformivKHR
TUNIS_FORCE_INLINE void  tunisGetnUniformui64vARB(GLuint program, GLint location, GLsizei bufSize, GLuint64 * params) { tunisGL.tunisGetnUniformui64vARB(program, location, bufSize, params); }
#define glGetnUniformui64vARB tunisGetnUniformui64vARB
TUNIS_FORCE_INLINE void  tunisGetnUniformuiv(GLuint program, GLint location, GLsizei bufSize, GLuint * params) { tunisGL.tunisGetnUniformuiv(program, location, bufSize, params); }
#define glGetnUniformuiv tunisGetnUniformuiv
TUNIS_FORCE_INLINE void  tunisGetnUniformuivARB(GLuint program, GLint location, GLsizei bufSize, GLuint * params) { tunisGL.tunisGetnUniformuivARB(program, location, bufSize, params); }
#define glGetnUniformuivARB tunisGetnUniformuivARB
TUNIS_FORCE_INLINE void  tunisGetnUniformuivKHR(GLuint program, GLint location, GLsizei bufSize, GLuint * params) { tunisGL.tunisGetnUniformuivKHR(program, location, bufSize, params); }
#define glGetnUniformuivKHR tunisGetnUniformuivKHR
TUNIS_FORCE_INLINE void  tunisGlobalAlphaFactorbSUN(GLbyte factor) { tunisGL.tunisGlobalAlphaFactorbSUN(factor); }
#define glGlobalAlphaFactorbSUN tunisGlobalAlphaFactorbSUN
TUNIS_FORCE_INLINE void  tunisGlobalAlphaFactordSUN(GLdouble factor) { tunisGL.tunisGlobalAlphaFactordSUN(factor); }
#define glGlobalAlphaFactordSUN tunisGlobalAlphaFactordSUN
TUNIS_FORCE_INLINE void  tunisGlobalAlphaFactorfSUN(GLfloat factor) { tunisGL.tunisGlobalAlphaFactorfSUN(factor); }
#define glGlobalAlphaFactorfSUN tunisGlobalAlphaFactorfSUN
TUNIS_FORCE_INLINE void  tunisGlobalAlphaFactoriSUN(GLint factor) { tunisGL.tunisGlobalAlphaFactoriSUN(factor); }
#define glGlobalAlphaFactoriSUN tunisGlobalAlphaFactoriSUN
TUNIS_FORCE_INLINE void  tunisGlobalAlphaFactorsSUN(GLshort factor) { tunisGL.tunisGlobalAlphaFactorsSUN(factor); }
#define glGlobalAlphaFactorsSUN tunisGlobalAlphaFactorsSUN
TUNIS_FORCE_INLINE void  tunisGlobalAlphaFactorubSUN(GLubyte factor) { tunisGL.tunisGlobalAlphaFactorubSUN(factor); }
#define glGlobalAlphaFactorubSUN tunisGlobalAlphaFactorubSUN
TUNIS_FORCE_INLINE void  tunisGlobalAlphaFactoruiSUN(GLuint factor) { tunisGL.tunisGlobalAlphaFactoruiSUN(factor); }
#define glGlobalAlphaFactoruiSUN tunisGlobalAlphaFactoruiSUN
TUNIS_FORCE_INLINE void  tunisGlobalAlphaFactorusSUN(GLushort factor) { tunisGL.tunisGlobalAlphaFactorusSUN(factor); }
#define glGlobalAlphaFactorusSUN tunisGlobalAlphaFactorusSUN
TUNIS_FORCE_INLINE void  tunisHint(GLenum target, GLenum mode) { tunisGL.tunisHint(target, mode); }
#define glHint tunisHint
TUNIS_FORCE_INLINE void  tunisHintPGI(GLenum target, GLint mode) { tunisGL.tunisHintPGI(target, mode); }
#define glHintPGI tunisHintPGI
TUNIS_FORCE_INLINE void  tunisHistogram(GLenum target, GLsizei width, GLenum internalformat, GLboolean sink) { tunisGL.tunisHistogram(target, width, internalformat, sink); }
#define glHistogram tunisHistogram
TUNIS_FORCE_INLINE void  tunisHistogramEXT(GLenum target, GLsizei width, GLenum internalformat, GLboolean sink) { tunisGL.tunisHistogramEXT(target, width, internalformat, sink); }
#define glHistogramEXT tunisHistogramEXT
TUNIS_FORCE_INLINE void  tunisIglooInterfaceSGIX(GLenum pname, const void * params) { tunisGL.tunisIglooInterfaceSGIX(pname, params); }
#define glIglooInterfaceSGIX tunisIglooInterfaceSGIX
TUNIS_FORCE_INLINE void  tunisImageTransformParameterfHP(GLenum target, GLenum pname, GLfloat param) { tunisGL.tunisImageTransformParameterfHP(target, pname, param); }
#define glImageTransformParameterfHP tunisImageTransformParameterfHP
TUNIS_FORCE_INLINE void  tunisImageTransformParameterfvHP(GLenum target, GLenum pname, const GLfloat * params) { tunisGL.tunisImageTransformParameterfvHP(target, pname, params); }
#define glImageTransformParameterfvHP tunisImageTransformParameterfvHP
TUNIS_FORCE_INLINE void  tunisImageTransformParameteriHP(GLenum target, GLenum pname, GLint param) { tunisGL.tunisImageTransformParameteriHP(target, pname, param); }
#define glImageTransformParameteriHP tunisImageTransformParameteriHP
TUNIS_FORCE_INLINE void  tunisImageTransformParameterivHP(GLenum target, GLenum pname, const GLint * params) { tunisGL.tunisImageTransformParameterivHP(target, pname, params); }
#define glImageTransformParameterivHP tunisImageTransformParameterivHP
TUNIS_FORCE_INLINE void  tunisImportMemoryFdEXT(GLuint memory, GLuint64 size, GLenum handleType, GLint fd) { tunisGL.tunisImportMemoryFdEXT(memory, size, handleType, fd); }
#define glImportMemoryFdEXT tunisImportMemoryFdEXT
TUNIS_FORCE_INLINE void  tunisImportMemoryWin32HandleEXT(GLuint memory, GLuint64 size, GLenum handleType, void * handle) { tunisGL.tunisImportMemoryWin32HandleEXT(memory, size, handleType, handle); }
#define glImportMemoryWin32HandleEXT tunisImportMemoryWin32HandleEXT
TUNIS_FORCE_INLINE void  tunisImportMemoryWin32NameEXT(GLuint memory, GLuint64 size, GLenum handleType, const void * name) { tunisGL.tunisImportMemoryWin32NameEXT(memory, size, handleType, name); }
#define glImportMemoryWin32NameEXT tunisImportMemoryWin32NameEXT
TUNIS_FORCE_INLINE void  tunisImportSemaphoreFdEXT(GLuint semaphore, GLenum handleType, GLint fd) { tunisGL.tunisImportSemaphoreFdEXT(semaphore, handleType, fd); }
#define glImportSemaphoreFdEXT tunisImportSemaphoreFdEXT
TUNIS_FORCE_INLINE void  tunisImportSemaphoreWin32HandleEXT(GLuint semaphore, GLenum handleType, void * handle) { tunisGL.tunisImportSemaphoreWin32HandleEXT(semaphore, handleType, handle); }
#define glImportSemaphoreWin32HandleEXT tunisImportSemaphoreWin32HandleEXT
TUNIS_FORCE_INLINE void  tunisImportSemaphoreWin32NameEXT(GLuint semaphore, GLenum handleType, const void * name) { tunisGL.tunisImportSemaphoreWin32NameEXT(semaphore, handleType, name); }
#define glImportSemaphoreWin32NameEXT tunisImportSemaphoreWin32NameEXT
TUNIS_FORCE_INLINE GLsync tunisImportSyncEXT(GLenum external_sync_type, GLintptr external_sync, GLbitfield flags) { return tunisGL.tunisImportSyncEXT(external_sync_type, external_sync, flags); }
#define glImportSyncEXT tunisImportSyncEXT
TUNIS_FORCE_INLINE void  tunisIndexFormatNV(GLenum type, GLsizei stride) { tunisGL.tunisIndexFormatNV(type, stride); }
#define glIndexFormatNV tunisIndexFormatNV
TUNIS_FORCE_INLINE void  tunisIndexFuncEXT(GLenum func, GLclampf ref) { tunisGL.tunisIndexFuncEXT(func, ref); }
#define glIndexFuncEXT tunisIndexFuncEXT
TUNIS_FORCE_INLINE void  tunisIndexMask(GLuint mask) { tunisGL.tunisIndexMask(mask); }
#define glIndexMask tunisIndexMask
TUNIS_FORCE_INLINE void  tunisIndexMaterialEXT(GLenum face, GLenum mode) { tunisGL.tunisIndexMaterialEXT(face, mode); }
#define glIndexMaterialEXT tunisIndexMaterialEXT
TUNIS_FORCE_INLINE void  tunisIndexPointer(GLenum type, GLsizei stride, const void * pointer) { tunisGL.tunisIndexPointer(type, stride, pointer); }
#define glIndexPointer tunisIndexPointer
TUNIS_FORCE_INLINE void  tunisIndexPointerEXT(GLenum type, GLsizei stride, GLsizei count, const void * pointer) { tunisGL.tunisIndexPointerEXT(type, stride, count, pointer); }
#define glIndexPointerEXT tunisIndexPointerEXT
TUNIS_FORCE_INLINE void  tunisIndexPointerListIBM(GLenum type, GLint stride, const void ** pointer, GLint ptrstride) { tunisGL.tunisIndexPointerListIBM(type, stride, pointer, ptrstride); }
#define glIndexPointerListIBM tunisIndexPointerListIBM
TUNIS_FORCE_INLINE void  tunisIndexd(GLdouble c) { tunisGL.tunisIndexd(c); }
#define glIndexd tunisIndexd
TUNIS_FORCE_INLINE void  tunisIndexdv(const GLdouble * c) { tunisGL.tunisIndexdv(c); }
#define glIndexdv tunisIndexdv
TUNIS_FORCE_INLINE void  tunisIndexf(GLfloat c) { tunisGL.tunisIndexf(c); }
#define glIndexf tunisIndexf
TUNIS_FORCE_INLINE void  tunisIndexfv(const GLfloat * c) { tunisGL.tunisIndexfv(c); }
#define glIndexfv tunisIndexfv
TUNIS_FORCE_INLINE void  tunisIndexi(GLint c) { tunisGL.tunisIndexi(c); }
#define glIndexi tunisIndexi
TUNIS_FORCE_INLINE void  tunisIndexiv(const GLint * c) { tunisGL.tunisIndexiv(c); }
#define glIndexiv tunisIndexiv
TUNIS_FORCE_INLINE void  tunisIndexs(GLshort c) { tunisGL.tunisIndexs(c); }
#define glIndexs tunisIndexs
TUNIS_FORCE_INLINE void  tunisIndexsv(const GLshort * c) { tunisGL.tunisIndexsv(c); }
#define glIndexsv tunisIndexsv
TUNIS_FORCE_INLINE void  tunisIndexub(GLubyte c) { tunisGL.tunisIndexub(c); }
#define glIndexub tunisIndexub
TUNIS_FORCE_INLINE void  tunisIndexubv(const GLubyte * c) { tunisGL.tunisIndexubv(c); }
#define glIndexubv tunisIndexubv
TUNIS_FORCE_INLINE void  tunisIndexxOES(GLfixed component) { tunisGL.tunisIndexxOES(component); }
#define glIndexxOES tunisIndexxOES
TUNIS_FORCE_INLINE void  tunisIndexxvOES(const GLfixed * component) { tunisGL.tunisIndexxvOES(component); }
#define glIndexxvOES tunisIndexxvOES
TUNIS_FORCE_INLINE void  tunisInitNames(void) { tunisGL.tunisInitNames(); }
#define glInitNames tunisInitNames
TUNIS_FORCE_INLINE void  tunisInsertComponentEXT(GLuint res, GLuint src, GLuint num) { tunisGL.tunisInsertComponentEXT(res, src, num); }
#define glInsertComponentEXT tunisInsertComponentEXT
TUNIS_FORCE_INLINE void  tunisInsertEventMarkerEXT(GLsizei length, const GLchar * marker) { tunisGL.tunisInsertEventMarkerEXT(length, marker); }
#define glInsertEventMarkerEXT tunisInsertEventMarkerEXT
TUNIS_FORCE_INLINE void  tunisInstrumentsBufferSGIX(GLsizei size, GLint * buffer) { tunisGL.tunisInstrumentsBufferSGIX(size, buffer); }
#define glInstrumentsBufferSGIX tunisInstrumentsBufferSGIX
TUNIS_FORCE_INLINE void  tunisInterleavedArrays(GLenum format, GLsizei stride, const void * pointer) { tunisGL.tunisInterleavedArrays(format, stride, pointer); }
#define glInterleavedArrays tunisInterleavedArrays
TUNIS_FORCE_INLINE void  tunisInterpolatePathsNV(GLuint resultPath, GLuint pathA, GLuint pathB, GLfloat weight) { tunisGL.tunisInterpolatePathsNV(resultPath, pathA, pathB, weight); }
#define glInterpolatePathsNV tunisInterpolatePathsNV
TUNIS_FORCE_INLINE void  tunisInvalidateBufferData(GLuint buffer) { tunisGL.tunisInvalidateBufferData(buffer); }
#define glInvalidateBufferData tunisInvalidateBufferData
TUNIS_FORCE_INLINE void  tunisInvalidateBufferSubData(GLuint buffer, GLintptr offset, GLsizeiptr length) { tunisGL.tunisInvalidateBufferSubData(buffer, offset, length); }
#define glInvalidateBufferSubData tunisInvalidateBufferSubData
TUNIS_FORCE_INLINE void  tunisInvalidateFramebuffer(GLenum target, GLsizei numAttachments, const GLenum * attachments) { tunisGL.tunisInvalidateFramebuffer(target, numAttachments, attachments); }
#define glInvalidateFramebuffer tunisInvalidateFramebuffer
TUNIS_FORCE_INLINE void  tunisInvalidateNamedFramebufferData(GLuint framebuffer, GLsizei numAttachments, const GLenum * attachments) { tunisGL.tunisInvalidateNamedFramebufferData(framebuffer, numAttachments, attachments); }
#define glInvalidateNamedFramebufferData tunisInvalidateNamedFramebufferData
TUNIS_FORCE_INLINE void  tunisInvalidateNamedFramebufferSubData(GLuint framebuffer, GLsizei numAttachments, const GLenum * attachments, GLint x, GLint y, GLsizei width, GLsizei height) { tunisGL.tunisInvalidateNamedFramebufferSubData(framebuffer, numAttachments, attachments, x, y, width, height); }
#define glInvalidateNamedFramebufferSubData tunisInvalidateNamedFramebufferSubData
TUNIS_FORCE_INLINE void  tunisInvalidateSubFramebuffer(GLenum target, GLsizei numAttachments, const GLenum * attachments, GLint x, GLint y, GLsizei width, GLsizei height) { tunisGL.tunisInvalidateSubFramebuffer(target, numAttachments, attachments, x, y, width, height); }
#define glInvalidateSubFramebuffer tunisInvalidateSubFramebuffer
TUNIS_FORCE_INLINE void  tunisInvalidateTexImage(GLuint texture, GLint level) { tunisGL.tunisInvalidateTexImage(texture, level); }
#define glInvalidateTexImage tunisInvalidateTexImage
TUNIS_FORCE_INLINE void  tunisInvalidateTexSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth) { tunisGL.tunisInvalidateTexSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth); }
#define glInvalidateTexSubImage tunisInvalidateTexSubImage
TUNIS_FORCE_INLINE GLboolean tunisIsAsyncMarkerSGIX(GLuint marker) { return tunisGL.tunisIsAsyncMarkerSGIX(marker); }
#define glIsAsyncMarkerSGIX tunisIsAsyncMarkerSGIX
TUNIS_FORCE_INLINE GLboolean tunisIsBuffer(GLuint buffer) { return tunisGL.tunisIsBuffer(buffer); }
#define glIsBuffer tunisIsBuffer
TUNIS_FORCE_INLINE GLboolean tunisIsBufferARB(GLuint buffer) { return tunisGL.tunisIsBufferARB(buffer); }
#define glIsBufferARB tunisIsBufferARB
TUNIS_FORCE_INLINE GLboolean tunisIsBufferResidentNV(GLenum target) { return tunisGL.tunisIsBufferResidentNV(target); }
#define glIsBufferResidentNV tunisIsBufferResidentNV
TUNIS_FORCE_INLINE GLboolean tunisIsCommandListNV(GLuint list) { return tunisGL.tunisIsCommandListNV(list); }
#define glIsCommandListNV tunisIsCommandListNV
TUNIS_FORCE_INLINE GLboolean tunisIsEnabled(GLenum cap) { return tunisGL.tunisIsEnabled(cap); }
#define glIsEnabled tunisIsEnabled
TUNIS_FORCE_INLINE GLboolean tunisIsEnabledIndexedEXT(GLenum target, GLuint index) { return tunisGL.tunisIsEnabledIndexedEXT(target, index); }
#define glIsEnabledIndexedEXT tunisIsEnabledIndexedEXT
TUNIS_FORCE_INLINE GLboolean tunisIsEnabledi(GLenum target, GLuint index) { return tunisGL.tunisIsEnabledi(target, index); }
#define glIsEnabledi tunisIsEnabledi
TUNIS_FORCE_INLINE GLboolean tunisIsEnablediEXT(GLenum target, GLuint index) { return tunisGL.tunisIsEnablediEXT(target, index); }
#define glIsEnablediEXT tunisIsEnablediEXT
TUNIS_FORCE_INLINE GLboolean tunisIsEnablediNV(GLenum target, GLuint index) { return tunisGL.tunisIsEnablediNV(target, index); }
#define glIsEnablediNV tunisIsEnablediNV
TUNIS_FORCE_INLINE GLboolean tunisIsEnablediOES(GLenum target, GLuint index) { return tunisGL.tunisIsEnablediOES(target, index); }
#define glIsEnablediOES tunisIsEnablediOES
TUNIS_FORCE_INLINE GLboolean tunisIsFenceAPPLE(GLuint fence) { return tunisGL.tunisIsFenceAPPLE(fence); }
#define glIsFenceAPPLE tunisIsFenceAPPLE
TUNIS_FORCE_INLINE GLboolean tunisIsFenceNV(GLuint fence) { return tunisGL.tunisIsFenceNV(fence); }
#define glIsFenceNV tunisIsFenceNV
TUNIS_FORCE_INLINE GLboolean tunisIsFramebuffer(GLuint framebuffer) { return tunisGL.tunisIsFramebuffer(framebuffer); }
#define glIsFramebuffer tunisIsFramebuffer
TUNIS_FORCE_INLINE GLboolean tunisIsFramebufferEXT(GLuint framebuffer) { return tunisGL.tunisIsFramebufferEXT(framebuffer); }
#define glIsFramebufferEXT tunisIsFramebufferEXT
TUNIS_FORCE_INLINE GLboolean tunisIsFramebufferOES(GLuint framebuffer) { return tunisGL.tunisIsFramebufferOES(framebuffer); }
#define glIsFramebufferOES tunisIsFramebufferOES
TUNIS_FORCE_INLINE GLboolean tunisIsImageHandleResidentARB(GLuint64 handle) { return tunisGL.tunisIsImageHandleResidentARB(handle); }
#define glIsImageHandleResidentARB tunisIsImageHandleResidentARB
TUNIS_FORCE_INLINE GLboolean tunisIsImageHandleResidentNV(GLuint64 handle) { return tunisGL.tunisIsImageHandleResidentNV(handle); }
#define glIsImageHandleResidentNV tunisIsImageHandleResidentNV
TUNIS_FORCE_INLINE GLboolean tunisIsList(GLuint list) { return tunisGL.tunisIsList(list); }
#define glIsList tunisIsList
TUNIS_FORCE_INLINE GLboolean tunisIsMemoryObjectEXT(GLuint memoryObject) { return tunisGL.tunisIsMemoryObjectEXT(memoryObject); }
#define glIsMemoryObjectEXT tunisIsMemoryObjectEXT
TUNIS_FORCE_INLINE GLboolean tunisIsNameAMD(GLenum identifier, GLuint name) { return tunisGL.tunisIsNameAMD(identifier, name); }
#define glIsNameAMD tunisIsNameAMD
TUNIS_FORCE_INLINE GLboolean tunisIsNamedBufferResidentNV(GLuint buffer) { return tunisGL.tunisIsNamedBufferResidentNV(buffer); }
#define glIsNamedBufferResidentNV tunisIsNamedBufferResidentNV
TUNIS_FORCE_INLINE GLboolean tunisIsNamedStringARB(GLint namelen, const GLchar * name) { return tunisGL.tunisIsNamedStringARB(namelen, name); }
#define glIsNamedStringARB tunisIsNamedStringARB
TUNIS_FORCE_INLINE GLboolean tunisIsObjectBufferATI(GLuint buffer) { return tunisGL.tunisIsObjectBufferATI(buffer); }
#define glIsObjectBufferATI tunisIsObjectBufferATI
TUNIS_FORCE_INLINE GLboolean tunisIsOcclusionQueryNV(GLuint id) { return tunisGL.tunisIsOcclusionQueryNV(id); }
#define glIsOcclusionQueryNV tunisIsOcclusionQueryNV
TUNIS_FORCE_INLINE GLboolean tunisIsPathNV(GLuint path) { return tunisGL.tunisIsPathNV(path); }
#define glIsPathNV tunisIsPathNV
TUNIS_FORCE_INLINE GLboolean tunisIsPointInFillPathNV(GLuint path, GLuint mask, GLfloat x, GLfloat y) { return tunisGL.tunisIsPointInFillPathNV(path, mask, x, y); }
#define glIsPointInFillPathNV tunisIsPointInFillPathNV
TUNIS_FORCE_INLINE GLboolean tunisIsPointInStrokePathNV(GLuint path, GLfloat x, GLfloat y) { return tunisGL.tunisIsPointInStrokePathNV(path, x, y); }
#define glIsPointInStrokePathNV tunisIsPointInStrokePathNV
TUNIS_FORCE_INLINE GLboolean tunisIsProgram(GLuint program) { return tunisGL.tunisIsProgram(program); }
#define glIsProgram tunisIsProgram
TUNIS_FORCE_INLINE GLboolean tunisIsProgramARB(GLuint program) { return tunisGL.tunisIsProgramARB(program); }
#define glIsProgramARB tunisIsProgramARB
TUNIS_FORCE_INLINE GLboolean tunisIsProgramNV(GLuint id) { return tunisGL.tunisIsProgramNV(id); }
#define glIsProgramNV tunisIsProgramNV
TUNIS_FORCE_INLINE GLboolean tunisIsProgramPipeline(GLuint pipeline) { return tunisGL.tunisIsProgramPipeline(pipeline); }
#define glIsProgramPipeline tunisIsProgramPipeline
TUNIS_FORCE_INLINE GLboolean tunisIsProgramPipelineEXT(GLuint pipeline) { return tunisGL.tunisIsProgramPipelineEXT(pipeline); }
#define glIsProgramPipelineEXT tunisIsProgramPipelineEXT
TUNIS_FORCE_INLINE GLboolean tunisIsQuery(GLuint id) { return tunisGL.tunisIsQuery(id); }
#define glIsQuery tunisIsQuery
TUNIS_FORCE_INLINE GLboolean tunisIsQueryARB(GLuint id) { return tunisGL.tunisIsQueryARB(id); }
#define glIsQueryARB tunisIsQueryARB
TUNIS_FORCE_INLINE GLboolean tunisIsQueryEXT(GLuint id) { return tunisGL.tunisIsQueryEXT(id); }
#define glIsQueryEXT tunisIsQueryEXT
TUNIS_FORCE_INLINE GLboolean tunisIsRenderbuffer(GLuint renderbuffer) { return tunisGL.tunisIsRenderbuffer(renderbuffer); }
#define glIsRenderbuffer tunisIsRenderbuffer
TUNIS_FORCE_INLINE GLboolean tunisIsRenderbufferEXT(GLuint renderbuffer) { return tunisGL.tunisIsRenderbufferEXT(renderbuffer); }
#define glIsRenderbufferEXT tunisIsRenderbufferEXT
TUNIS_FORCE_INLINE GLboolean tunisIsRenderbufferOES(GLuint renderbuffer) { return tunisGL.tunisIsRenderbufferOES(renderbuffer); }
#define glIsRenderbufferOES tunisIsRenderbufferOES
TUNIS_FORCE_INLINE GLboolean tunisIsSampler(GLuint sampler) { return tunisGL.tunisIsSampler(sampler); }
#define glIsSampler tunisIsSampler
TUNIS_FORCE_INLINE GLboolean tunisIsSemaphoreEXT(GLuint semaphore) { return tunisGL.tunisIsSemaphoreEXT(semaphore); }
#define glIsSemaphoreEXT tunisIsSemaphoreEXT
TUNIS_FORCE_INLINE GLboolean tunisIsShader(GLuint shader) { return tunisGL.tunisIsShader(shader); }
#define glIsShader tunisIsShader
TUNIS_FORCE_INLINE GLboolean tunisIsStateNV(GLuint state) { return tunisGL.tunisIsStateNV(state); }
#define glIsStateNV tunisIsStateNV
TUNIS_FORCE_INLINE GLboolean tunisIsSync(GLsync sync) { return tunisGL.tunisIsSync(sync); }
#define glIsSync tunisIsSync
TUNIS_FORCE_INLINE GLboolean tunisIsSyncAPPLE(GLsync sync) { return tunisGL.tunisIsSyncAPPLE(sync); }
#define glIsSyncAPPLE tunisIsSyncAPPLE
TUNIS_FORCE_INLINE GLboolean tunisIsTexture(GLuint texture) { return tunisGL.tunisIsTexture(texture); }
#define glIsTexture tunisIsTexture
TUNIS_FORCE_INLINE GLboolean tunisIsTextureEXT(GLuint texture) { return tunisGL.tunisIsTextureEXT(texture); }
#define glIsTextureEXT tunisIsTextureEXT
TUNIS_FORCE_INLINE GLboolean tunisIsTextureHandleResidentARB(GLuint64 handle) { return tunisGL.tunisIsTextureHandleResidentARB(handle); }
#define glIsTextureHandleResidentARB tunisIsTextureHandleResidentARB
TUNIS_FORCE_INLINE GLboolean tunisIsTextureHandleResidentNV(GLuint64 handle) { return tunisGL.tunisIsTextureHandleResidentNV(handle); }
#define glIsTextureHandleResidentNV tunisIsTextureHandleResidentNV
TUNIS_FORCE_INLINE GLboolean tunisIsTransformFeedback(GLuint id) { return tunisGL.tunisIsTransformFeedback(id); }
#define glIsTransformFeedback tunisIsTransformFeedback
TUNIS_FORCE_INLINE GLboolean tunisIsTransformFeedbackNV(GLuint id) { return tunisGL.tunisIsTransformFeedbackNV(id); }
#define glIsTransformFeedbackNV tunisIsTransformFeedbackNV
TUNIS_FORCE_INLINE GLboolean tunisIsVariantEnabledEXT(GLuint id, GLenum cap) { return tunisGL.tunisIsVariantEnabledEXT(id, cap); }
#define glIsVariantEnabledEXT tunisIsVariantEnabledEXT
TUNIS_FORCE_INLINE GLboolean tunisIsVertexArray(GLuint array) { return tunisGL.tunisIsVertexArray(array); }
#define glIsVertexArray tunisIsVertexArray
TUNIS_FORCE_INLINE GLboolean tunisIsVertexArrayAPPLE(GLuint array) { return tunisGL.tunisIsVertexArrayAPPLE(array); }
#define glIsVertexArrayAPPLE tunisIsVertexArrayAPPLE
TUNIS_FORCE_INLINE GLboolean tunisIsVertexArrayOES(GLuint array) { return tunisGL.tunisIsVertexArrayOES(array); }
#define glIsVertexArrayOES tunisIsVertexArrayOES
TUNIS_FORCE_INLINE GLboolean tunisIsVertexAttribEnabledAPPLE(GLuint index, GLenum pname) { return tunisGL.tunisIsVertexAttribEnabledAPPLE(index, pname); }
#define glIsVertexAttribEnabledAPPLE tunisIsVertexAttribEnabledAPPLE
TUNIS_FORCE_INLINE void  tunisLGPUCopyImageSubDataNVX(GLuint sourceGpu, GLbitfield destinationGpuMask, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srxY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth) { tunisGL.tunisLGPUCopyImageSubDataNVX(sourceGpu, destinationGpuMask, srcName, srcTarget, srcLevel, srcX, srxY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, width, height, depth); }
#define glLGPUCopyImageSubDataNVX tunisLGPUCopyImageSubDataNVX
TUNIS_FORCE_INLINE void  tunisLGPUInterlockNVX(void) { tunisGL.tunisLGPUInterlockNVX(); }
#define glLGPUInterlockNVX tunisLGPUInterlockNVX
TUNIS_FORCE_INLINE void  tunisLGPUNamedBufferSubDataNVX(GLbitfield gpuMask, GLuint buffer, GLintptr offset, GLsizeiptr size, const void * data) { tunisGL.tunisLGPUNamedBufferSubDataNVX(gpuMask, buffer, offset, size, data); }
#define glLGPUNamedBufferSubDataNVX tunisLGPUNamedBufferSubDataNVX
TUNIS_FORCE_INLINE void  tunisLabelObjectEXT(GLenum type, GLuint object, GLsizei length, const GLchar * label) { tunisGL.tunisLabelObjectEXT(type, object, length, label); }
#define glLabelObjectEXT tunisLabelObjectEXT
TUNIS_FORCE_INLINE void  tunisLightEnviSGIX(GLenum pname, GLint param) { tunisGL.tunisLightEnviSGIX(pname, param); }
#define glLightEnviSGIX tunisLightEnviSGIX
TUNIS_FORCE_INLINE void  tunisLightModelf(GLenum pname, GLfloat param) { tunisGL.tunisLightModelf(pname, param); }
#define glLightModelf tunisLightModelf
TUNIS_FORCE_INLINE void  tunisLightModelfv(GLenum pname, const GLfloat * params) { tunisGL.tunisLightModelfv(pname, params); }
#define glLightModelfv tunisLightModelfv
TUNIS_FORCE_INLINE void  tunisLightModeli(GLenum pname, GLint param) { tunisGL.tunisLightModeli(pname, param); }
#define glLightModeli tunisLightModeli
TUNIS_FORCE_INLINE void  tunisLightModeliv(GLenum pname, const GLint * params) { tunisGL.tunisLightModeliv(pname, params); }
#define glLightModeliv tunisLightModeliv
TUNIS_FORCE_INLINE void  tunisLightModelx(GLenum pname, GLfixed param) { tunisGL.tunisLightModelx(pname, param); }
#define glLightModelx tunisLightModelx
TUNIS_FORCE_INLINE void  tunisLightModelxOES(GLenum pname, GLfixed param) { tunisGL.tunisLightModelxOES(pname, param); }
#define glLightModelxOES tunisLightModelxOES
TUNIS_FORCE_INLINE void  tunisLightModelxv(GLenum pname, const GLfixed * param) { tunisGL.tunisLightModelxv(pname, param); }
#define glLightModelxv tunisLightModelxv
TUNIS_FORCE_INLINE void  tunisLightModelxvOES(GLenum pname, const GLfixed * param) { tunisGL.tunisLightModelxvOES(pname, param); }
#define glLightModelxvOES tunisLightModelxvOES
TUNIS_FORCE_INLINE void  tunisLightf(GLenum light, GLenum pname, GLfloat param) { tunisGL.tunisLightf(light, pname, param); }
#define glLightf tunisLightf
TUNIS_FORCE_INLINE void  tunisLightfv(GLenum light, GLenum pname, const GLfloat * params) { tunisGL.tunisLightfv(light, pname, params); }
#define glLightfv tunisLightfv
TUNIS_FORCE_INLINE void  tunisLighti(GLenum light, GLenum pname, GLint param) { tunisGL.tunisLighti(light, pname, param); }
#define glLighti tunisLighti
TUNIS_FORCE_INLINE void  tunisLightiv(GLenum light, GLenum pname, const GLint * params) { tunisGL.tunisLightiv(light, pname, params); }
#define glLightiv tunisLightiv
TUNIS_FORCE_INLINE void  tunisLightx(GLenum light, GLenum pname, GLfixed param) { tunisGL.tunisLightx(light, pname, param); }
#define glLightx tunisLightx
TUNIS_FORCE_INLINE void  tunisLightxOES(GLenum light, GLenum pname, GLfixed param) { tunisGL.tunisLightxOES(light, pname, param); }
#define glLightxOES tunisLightxOES
TUNIS_FORCE_INLINE void  tunisLightxv(GLenum light, GLenum pname, const GLfixed * params) { tunisGL.tunisLightxv(light, pname, params); }
#define glLightxv tunisLightxv
TUNIS_FORCE_INLINE void  tunisLightxvOES(GLenum light, GLenum pname, const GLfixed * params) { tunisGL.tunisLightxvOES(light, pname, params); }
#define glLightxvOES tunisLightxvOES
TUNIS_FORCE_INLINE void  tunisLineStipple(GLint factor, GLushort pattern) { tunisGL.tunisLineStipple(factor, pattern); }
#define glLineStipple tunisLineStipple
TUNIS_FORCE_INLINE void  tunisLineWidth(GLfloat width) { tunisGL.tunisLineWidth(width); }
#define glLineWidth tunisLineWidth
TUNIS_FORCE_INLINE void  tunisLineWidthx(GLfixed width) { tunisGL.tunisLineWidthx(width); }
#define glLineWidthx tunisLineWidthx
TUNIS_FORCE_INLINE void  tunisLineWidthxOES(GLfixed width) { tunisGL.tunisLineWidthxOES(width); }
#define glLineWidthxOES tunisLineWidthxOES
TUNIS_FORCE_INLINE void  tunisLinkProgram(GLuint program) { tunisGL.tunisLinkProgram(program); }
#define glLinkProgram tunisLinkProgram
TUNIS_FORCE_INLINE void  tunisLinkProgramARB(GLhandleARB programObj) { tunisGL.tunisLinkProgramARB(programObj); }
#define glLinkProgramARB tunisLinkProgramARB
TUNIS_FORCE_INLINE void  tunisListBase(GLuint base) { tunisGL.tunisListBase(base); }
#define glListBase tunisListBase
TUNIS_FORCE_INLINE void  tunisListDrawCommandsStatesClientNV(GLuint list, GLuint segment, const void ** indirects, const GLsizei * sizes, const GLuint * states, const GLuint * fbos, GLuint count) { tunisGL.tunisListDrawCommandsStatesClientNV(list, segment, indirects, sizes, states, fbos, count); }
#define glListDrawCommandsStatesClientNV tunisListDrawCommandsStatesClientNV
TUNIS_FORCE_INLINE void  tunisListParameterfSGIX(GLuint list, GLenum pname, GLfloat param) { tunisGL.tunisListParameterfSGIX(list, pname, param); }
#define glListParameterfSGIX tunisListParameterfSGIX
TUNIS_FORCE_INLINE void  tunisListParameterfvSGIX(GLuint list, GLenum pname, const GLfloat * params) { tunisGL.tunisListParameterfvSGIX(list, pname, params); }
#define glListParameterfvSGIX tunisListParameterfvSGIX
TUNIS_FORCE_INLINE void  tunisListParameteriSGIX(GLuint list, GLenum pname, GLint param) { tunisGL.tunisListParameteriSGIX(list, pname, param); }
#define glListParameteriSGIX tunisListParameteriSGIX
TUNIS_FORCE_INLINE void  tunisListParameterivSGIX(GLuint list, GLenum pname, const GLint * params) { tunisGL.tunisListParameterivSGIX(list, pname, params); }
#define glListParameterivSGIX tunisListParameterivSGIX
TUNIS_FORCE_INLINE void  tunisLoadIdentity(void) { tunisGL.tunisLoadIdentity(); }
#define glLoadIdentity tunisLoadIdentity
TUNIS_FORCE_INLINE void  tunisLoadIdentityDeformationMapSGIX(GLbitfield mask) { tunisGL.tunisLoadIdentityDeformationMapSGIX(mask); }
#define glLoadIdentityDeformationMapSGIX tunisLoadIdentityDeformationMapSGIX
TUNIS_FORCE_INLINE void  tunisLoadMatrixd(const GLdouble * m) { tunisGL.tunisLoadMatrixd(m); }
#define glLoadMatrixd tunisLoadMatrixd
TUNIS_FORCE_INLINE void  tunisLoadMatrixf(const GLfloat * m) { tunisGL.tunisLoadMatrixf(m); }
#define glLoadMatrixf tunisLoadMatrixf
TUNIS_FORCE_INLINE void  tunisLoadMatrixx(const GLfixed * m) { tunisGL.tunisLoadMatrixx(m); }
#define glLoadMatrixx tunisLoadMatrixx
TUNIS_FORCE_INLINE void  tunisLoadMatrixxOES(const GLfixed * m) { tunisGL.tunisLoadMatrixxOES(m); }
#define glLoadMatrixxOES tunisLoadMatrixxOES
TUNIS_FORCE_INLINE void  tunisLoadName(GLuint name) { tunisGL.tunisLoadName(name); }
#define glLoadName tunisLoadName
TUNIS_FORCE_INLINE void  tunisLoadPaletteFromModelViewMatrixOES(void) { tunisGL.tunisLoadPaletteFromModelViewMatrixOES(); }
#define glLoadPaletteFromModelViewMatrixOES tunisLoadPaletteFromModelViewMatrixOES
TUNIS_FORCE_INLINE void  tunisLoadProgramNV(GLenum target, GLuint id, GLsizei len, const GLubyte * program) { tunisGL.tunisLoadProgramNV(target, id, len, program); }
#define glLoadProgramNV tunisLoadProgramNV
TUNIS_FORCE_INLINE void  tunisLoadTransposeMatrixd(const GLdouble * m) { tunisGL.tunisLoadTransposeMatrixd(m); }
#define glLoadTransposeMatrixd tunisLoadTransposeMatrixd
TUNIS_FORCE_INLINE void  tunisLoadTransposeMatrixdARB(const GLdouble * m) { tunisGL.tunisLoadTransposeMatrixdARB(m); }
#define glLoadTransposeMatrixdARB tunisLoadTransposeMatrixdARB
TUNIS_FORCE_INLINE void  tunisLoadTransposeMatrixf(const GLfloat * m) { tunisGL.tunisLoadTransposeMatrixf(m); }
#define glLoadTransposeMatrixf tunisLoadTransposeMatrixf
TUNIS_FORCE_INLINE void  tunisLoadTransposeMatrixfARB(const GLfloat * m) { tunisGL.tunisLoadTransposeMatrixfARB(m); }
#define glLoadTransposeMatrixfARB tunisLoadTransposeMatrixfARB
TUNIS_FORCE_INLINE void  tunisLoadTransposeMatrixxOES(const GLfixed * m) { tunisGL.tunisLoadTransposeMatrixxOES(m); }
#define glLoadTransposeMatrixxOES tunisLoadTransposeMatrixxOES
TUNIS_FORCE_INLINE void  tunisLockArraysEXT(GLint first, GLsizei count) { tunisGL.tunisLockArraysEXT(first, count); }
#define glLockArraysEXT tunisLockArraysEXT
TUNIS_FORCE_INLINE void  tunisLogicOp(GLenum opcode) { tunisGL.tunisLogicOp(opcode); }
#define glLogicOp tunisLogicOp
TUNIS_FORCE_INLINE void  tunisMakeBufferNonResidentNV(GLenum target) { tunisGL.tunisMakeBufferNonResidentNV(target); }
#define glMakeBufferNonResidentNV tunisMakeBufferNonResidentNV
TUNIS_FORCE_INLINE void  tunisMakeBufferResidentNV(GLenum target, GLenum access) { tunisGL.tunisMakeBufferResidentNV(target, access); }
#define glMakeBufferResidentNV tunisMakeBufferResidentNV
TUNIS_FORCE_INLINE void  tunisMakeImageHandleNonResidentARB(GLuint64 handle) { tunisGL.tunisMakeImageHandleNonResidentARB(handle); }
#define glMakeImageHandleNonResidentARB tunisMakeImageHandleNonResidentARB
TUNIS_FORCE_INLINE void  tunisMakeImageHandleNonResidentNV(GLuint64 handle) { tunisGL.tunisMakeImageHandleNonResidentNV(handle); }
#define glMakeImageHandleNonResidentNV tunisMakeImageHandleNonResidentNV
TUNIS_FORCE_INLINE void  tunisMakeImageHandleResidentARB(GLuint64 handle, GLenum access) { tunisGL.tunisMakeImageHandleResidentARB(handle, access); }
#define glMakeImageHandleResidentARB tunisMakeImageHandleResidentARB
TUNIS_FORCE_INLINE void  tunisMakeImageHandleResidentNV(GLuint64 handle, GLenum access) { tunisGL.tunisMakeImageHandleResidentNV(handle, access); }
#define glMakeImageHandleResidentNV tunisMakeImageHandleResidentNV
TUNIS_FORCE_INLINE void  tunisMakeNamedBufferNonResidentNV(GLuint buffer) { tunisGL.tunisMakeNamedBufferNonResidentNV(buffer); }
#define glMakeNamedBufferNonResidentNV tunisMakeNamedBufferNonResidentNV
TUNIS_FORCE_INLINE void  tunisMakeNamedBufferResidentNV(GLuint buffer, GLenum access) { tunisGL.tunisMakeNamedBufferResidentNV(buffer, access); }
#define glMakeNamedBufferResidentNV tunisMakeNamedBufferResidentNV
TUNIS_FORCE_INLINE void  tunisMakeTextureHandleNonResidentARB(GLuint64 handle) { tunisGL.tunisMakeTextureHandleNonResidentARB(handle); }
#define glMakeTextureHandleNonResidentARB tunisMakeTextureHandleNonResidentARB
TUNIS_FORCE_INLINE void  tunisMakeTextureHandleNonResidentNV(GLuint64 handle) { tunisGL.tunisMakeTextureHandleNonResidentNV(handle); }
#define glMakeTextureHandleNonResidentNV tunisMakeTextureHandleNonResidentNV
TUNIS_FORCE_INLINE void  tunisMakeTextureHandleResidentARB(GLuint64 handle) { tunisGL.tunisMakeTextureHandleResidentARB(handle); }
#define glMakeTextureHandleResidentARB tunisMakeTextureHandleResidentARB
TUNIS_FORCE_INLINE void  tunisMakeTextureHandleResidentNV(GLuint64 handle) { tunisGL.tunisMakeTextureHandleResidentNV(handle); }
#define glMakeTextureHandleResidentNV tunisMakeTextureHandleResidentNV
TUNIS_FORCE_INLINE void  tunisMap1d(GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble * points) { tunisGL.tunisMap1d(target, u1, u2, stride, order, points); }
#define glMap1d tunisMap1d
TUNIS_FORCE_INLINE void  tunisMap1f(GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat * points) { tunisGL.tunisMap1f(target, u1, u2, stride, order, points); }
#define glMap1f tunisMap1f
TUNIS_FORCE_INLINE void  tunisMap1xOES(GLenum target, GLfixed u1, GLfixed u2, GLint stride, GLint order, GLfixed points) { tunisGL.tunisMap1xOES(target, u1, u2, stride, order, points); }
#define glMap1xOES tunisMap1xOES
TUNIS_FORCE_INLINE void  tunisMap2d(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble * points) { tunisGL.tunisMap2d(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points); }
#define glMap2d tunisMap2d
TUNIS_FORCE_INLINE void  tunisMap2f(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat * points) { tunisGL.tunisMap2f(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points); }
#define glMap2f tunisMap2f
TUNIS_FORCE_INLINE void  tunisMap2xOES(GLenum target, GLfixed u1, GLfixed u2, GLint ustride, GLint uorder, GLfixed v1, GLfixed v2, GLint vstride, GLint vorder, GLfixed points) { tunisGL.tunisMap2xOES(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points); }
#define glMap2xOES tunisMap2xOES
TUNIS_FORCE_INLINE void * tunisMapBuffer(GLenum target, GLenum access) { return tunisGL.tunisMapBuffer(target, access); }
#define glMapBuffer tunisMapBuffer
TUNIS_FORCE_INLINE void * tunisMapBufferARB(GLenum target, GLenum access) { return tunisGL.tunisMapBufferARB(target, access); }
#define glMapBufferARB tunisMapBufferARB
TUNIS_FORCE_INLINE void * tunisMapBufferOES(GLenum target, GLenum access) { return tunisGL.tunisMapBufferOES(target, access); }
#define glMapBufferOES tunisMapBufferOES
TUNIS_FORCE_INLINE void * tunisMapBufferRange(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access) { return tunisGL.tunisMapBufferRange(target, offset, length, access); }
#define glMapBufferRange tunisMapBufferRange
TUNIS_FORCE_INLINE void * tunisMapBufferRangeEXT(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access) { return tunisGL.tunisMapBufferRangeEXT(target, offset, length, access); }
#define glMapBufferRangeEXT tunisMapBufferRangeEXT
TUNIS_FORCE_INLINE void  tunisMapControlPointsNV(GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLint uorder, GLint vorder, GLboolean packed, const void * points) { tunisGL.tunisMapControlPointsNV(target, index, type, ustride, vstride, uorder, vorder, packed, points); }
#define glMapControlPointsNV tunisMapControlPointsNV
TUNIS_FORCE_INLINE void  tunisMapGrid1d(GLint un, GLdouble u1, GLdouble u2) { tunisGL.tunisMapGrid1d(un, u1, u2); }
#define glMapGrid1d tunisMapGrid1d
TUNIS_FORCE_INLINE void  tunisMapGrid1f(GLint un, GLfloat u1, GLfloat u2) { tunisGL.tunisMapGrid1f(un, u1, u2); }
#define glMapGrid1f tunisMapGrid1f
TUNIS_FORCE_INLINE void  tunisMapGrid1xOES(GLint n, GLfixed u1, GLfixed u2) { tunisGL.tunisMapGrid1xOES(n, u1, u2); }
#define glMapGrid1xOES tunisMapGrid1xOES
TUNIS_FORCE_INLINE void  tunisMapGrid2d(GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2) { tunisGL.tunisMapGrid2d(un, u1, u2, vn, v1, v2); }
#define glMapGrid2d tunisMapGrid2d
TUNIS_FORCE_INLINE void  tunisMapGrid2f(GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2) { tunisGL.tunisMapGrid2f(un, u1, u2, vn, v1, v2); }
#define glMapGrid2f tunisMapGrid2f
TUNIS_FORCE_INLINE void  tunisMapGrid2xOES(GLint n, GLfixed u1, GLfixed u2, GLfixed v1, GLfixed v2) { tunisGL.tunisMapGrid2xOES(n, u1, u2, v1, v2); }
#define glMapGrid2xOES tunisMapGrid2xOES
TUNIS_FORCE_INLINE void * tunisMapNamedBuffer(GLuint buffer, GLenum access) { return tunisGL.tunisMapNamedBuffer(buffer, access); }
#define glMapNamedBuffer tunisMapNamedBuffer
TUNIS_FORCE_INLINE void * tunisMapNamedBufferEXT(GLuint buffer, GLenum access) { return tunisGL.tunisMapNamedBufferEXT(buffer, access); }
#define glMapNamedBufferEXT tunisMapNamedBufferEXT
TUNIS_FORCE_INLINE void * tunisMapNamedBufferRange(GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access) { return tunisGL.tunisMapNamedBufferRange(buffer, offset, length, access); }
#define glMapNamedBufferRange tunisMapNamedBufferRange
TUNIS_FORCE_INLINE void * tunisMapNamedBufferRangeEXT(GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access) { return tunisGL.tunisMapNamedBufferRangeEXT(buffer, offset, length, access); }
#define glMapNamedBufferRangeEXT tunisMapNamedBufferRangeEXT
TUNIS_FORCE_INLINE void * tunisMapObjectBufferATI(GLuint buffer) { return tunisGL.tunisMapObjectBufferATI(buffer); }
#define glMapObjectBufferATI tunisMapObjectBufferATI
TUNIS_FORCE_INLINE void  tunisMapParameterfvNV(GLenum target, GLenum pname, const GLfloat * params) { tunisGL.tunisMapParameterfvNV(target, pname, params); }
#define glMapParameterfvNV tunisMapParameterfvNV
TUNIS_FORCE_INLINE void  tunisMapParameterivNV(GLenum target, GLenum pname, const GLint * params) { tunisGL.tunisMapParameterivNV(target, pname, params); }
#define glMapParameterivNV tunisMapParameterivNV
TUNIS_FORCE_INLINE void * tunisMapTexture2DINTEL(GLuint texture, GLint level, GLbitfield access, GLint * stride, GLenum * layout) { return tunisGL.tunisMapTexture2DINTEL(texture, level, access, stride, layout); }
#define glMapTexture2DINTEL tunisMapTexture2DINTEL
TUNIS_FORCE_INLINE void  tunisMapVertexAttrib1dAPPLE(GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble * points) { tunisGL.tunisMapVertexAttrib1dAPPLE(index, size, u1, u2, stride, order, points); }
#define glMapVertexAttrib1dAPPLE tunisMapVertexAttrib1dAPPLE
TUNIS_FORCE_INLINE void  tunisMapVertexAttrib1fAPPLE(GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat * points) { tunisGL.tunisMapVertexAttrib1fAPPLE(index, size, u1, u2, stride, order, points); }
#define glMapVertexAttrib1fAPPLE tunisMapVertexAttrib1fAPPLE
TUNIS_FORCE_INLINE void  tunisMapVertexAttrib2dAPPLE(GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble * points) { tunisGL.tunisMapVertexAttrib2dAPPLE(index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points); }
#define glMapVertexAttrib2dAPPLE tunisMapVertexAttrib2dAPPLE
TUNIS_FORCE_INLINE void  tunisMapVertexAttrib2fAPPLE(GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat * points) { tunisGL.tunisMapVertexAttrib2fAPPLE(index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points); }
#define glMapVertexAttrib2fAPPLE tunisMapVertexAttrib2fAPPLE
TUNIS_FORCE_INLINE void  tunisMaterialf(GLenum face, GLenum pname, GLfloat param) { tunisGL.tunisMaterialf(face, pname, param); }
#define glMaterialf tunisMaterialf
TUNIS_FORCE_INLINE void  tunisMaterialfv(GLenum face, GLenum pname, const GLfloat * params) { tunisGL.tunisMaterialfv(face, pname, params); }
#define glMaterialfv tunisMaterialfv
TUNIS_FORCE_INLINE void  tunisMateriali(GLenum face, GLenum pname, GLint param) { tunisGL.tunisMateriali(face, pname, param); }
#define glMateriali tunisMateriali
TUNIS_FORCE_INLINE void  tunisMaterialiv(GLenum face, GLenum pname, const GLint * params) { tunisGL.tunisMaterialiv(face, pname, params); }
#define glMaterialiv tunisMaterialiv
TUNIS_FORCE_INLINE void  tunisMaterialx(GLenum face, GLenum pname, GLfixed param) { tunisGL.tunisMaterialx(face, pname, param); }
#define glMaterialx tunisMaterialx
TUNIS_FORCE_INLINE void  tunisMaterialxOES(GLenum face, GLenum pname, GLfixed param) { tunisGL.tunisMaterialxOES(face, pname, param); }
#define glMaterialxOES tunisMaterialxOES
TUNIS_FORCE_INLINE void  tunisMaterialxv(GLenum face, GLenum pname, const GLfixed * param) { tunisGL.tunisMaterialxv(face, pname, param); }
#define glMaterialxv tunisMaterialxv
TUNIS_FORCE_INLINE void  tunisMaterialxvOES(GLenum face, GLenum pname, const GLfixed * param) { tunisGL.tunisMaterialxvOES(face, pname, param); }
#define glMaterialxvOES tunisMaterialxvOES
TUNIS_FORCE_INLINE void  tunisMatrixFrustumEXT(GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar) { tunisGL.tunisMatrixFrustumEXT(mode, left, right, bottom, top, zNear, zFar); }
#define glMatrixFrustumEXT tunisMatrixFrustumEXT
TUNIS_FORCE_INLINE void  tunisMatrixIndexPointerARB(GLint size, GLenum type, GLsizei stride, const void * pointer) { tunisGL.tunisMatrixIndexPointerARB(size, type, stride, pointer); }
#define glMatrixIndexPointerARB tunisMatrixIndexPointerARB
TUNIS_FORCE_INLINE void  tunisMatrixIndexPointerOES(GLint size, GLenum type, GLsizei stride, const void * pointer) { tunisGL.tunisMatrixIndexPointerOES(size, type, stride, pointer); }
#define glMatrixIndexPointerOES tunisMatrixIndexPointerOES
TUNIS_FORCE_INLINE void  tunisMatrixIndexubvARB(GLint size, const GLubyte * indices) { tunisGL.tunisMatrixIndexubvARB(size, indices); }
#define glMatrixIndexubvARB tunisMatrixIndexubvARB
TUNIS_FORCE_INLINE void  tunisMatrixIndexuivARB(GLint size, const GLuint * indices) { tunisGL.tunisMatrixIndexuivARB(size, indices); }
#define glMatrixIndexuivARB tunisMatrixIndexuivARB
TUNIS_FORCE_INLINE void  tunisMatrixIndexusvARB(GLint size, const GLushort * indices) { tunisGL.tunisMatrixIndexusvARB(size, indices); }
#define glMatrixIndexusvARB tunisMatrixIndexusvARB
TUNIS_FORCE_INLINE void  tunisMatrixLoad3x2fNV(GLenum matrixMode, const GLfloat * m) { tunisGL.tunisMatrixLoad3x2fNV(matrixMode, m); }
#define glMatrixLoad3x2fNV tunisMatrixLoad3x2fNV
TUNIS_FORCE_INLINE void  tunisMatrixLoad3x3fNV(GLenum matrixMode, const GLfloat * m) { tunisGL.tunisMatrixLoad3x3fNV(matrixMode, m); }
#define glMatrixLoad3x3fNV tunisMatrixLoad3x3fNV
TUNIS_FORCE_INLINE void  tunisMatrixLoadIdentityEXT(GLenum mode) { tunisGL.tunisMatrixLoadIdentityEXT(mode); }
#define glMatrixLoadIdentityEXT tunisMatrixLoadIdentityEXT
TUNIS_FORCE_INLINE void  tunisMatrixLoadTranspose3x3fNV(GLenum matrixMode, const GLfloat * m) { tunisGL.tunisMatrixLoadTranspose3x3fNV(matrixMode, m); }
#define glMatrixLoadTranspose3x3fNV tunisMatrixLoadTranspose3x3fNV
TUNIS_FORCE_INLINE void  tunisMatrixLoadTransposedEXT(GLenum mode, const GLdouble * m) { tunisGL.tunisMatrixLoadTransposedEXT(mode, m); }
#define glMatrixLoadTransposedEXT tunisMatrixLoadTransposedEXT
TUNIS_FORCE_INLINE void  tunisMatrixLoadTransposefEXT(GLenum mode, const GLfloat * m) { tunisGL.tunisMatrixLoadTransposefEXT(mode, m); }
#define glMatrixLoadTransposefEXT tunisMatrixLoadTransposefEXT
TUNIS_FORCE_INLINE void  tunisMatrixLoaddEXT(GLenum mode, const GLdouble * m) { tunisGL.tunisMatrixLoaddEXT(mode, m); }
#define glMatrixLoaddEXT tunisMatrixLoaddEXT
TUNIS_FORCE_INLINE void  tunisMatrixLoadfEXT(GLenum mode, const GLfloat * m) { tunisGL.tunisMatrixLoadfEXT(mode, m); }
#define glMatrixLoadfEXT tunisMatrixLoadfEXT
TUNIS_FORCE_INLINE void  tunisMatrixMode(GLenum mode) { tunisGL.tunisMatrixMode(mode); }
#define glMatrixMode tunisMatrixMode
TUNIS_FORCE_INLINE void  tunisMatrixMult3x2fNV(GLenum matrixMode, const GLfloat * m) { tunisGL.tunisMatrixMult3x2fNV(matrixMode, m); }
#define glMatrixMult3x2fNV tunisMatrixMult3x2fNV
TUNIS_FORCE_INLINE void  tunisMatrixMult3x3fNV(GLenum matrixMode, const GLfloat * m) { tunisGL.tunisMatrixMult3x3fNV(matrixMode, m); }
#define glMatrixMult3x3fNV tunisMatrixMult3x3fNV
TUNIS_FORCE_INLINE void  tunisMatrixMultTranspose3x3fNV(GLenum matrixMode, const GLfloat * m) { tunisGL.tunisMatrixMultTranspose3x3fNV(matrixMode, m); }
#define glMatrixMultTranspose3x3fNV tunisMatrixMultTranspose3x3fNV
TUNIS_FORCE_INLINE void  tunisMatrixMultTransposedEXT(GLenum mode, const GLdouble * m) { tunisGL.tunisMatrixMultTransposedEXT(mode, m); }
#define glMatrixMultTransposedEXT tunisMatrixMultTransposedEXT
TUNIS_FORCE_INLINE void  tunisMatrixMultTransposefEXT(GLenum mode, const GLfloat * m) { tunisGL.tunisMatrixMultTransposefEXT(mode, m); }
#define glMatrixMultTransposefEXT tunisMatrixMultTransposefEXT
TUNIS_FORCE_INLINE void  tunisMatrixMultdEXT(GLenum mode, const GLdouble * m) { tunisGL.tunisMatrixMultdEXT(mode, m); }
#define glMatrixMultdEXT tunisMatrixMultdEXT
TUNIS_FORCE_INLINE void  tunisMatrixMultfEXT(GLenum mode, const GLfloat * m) { tunisGL.tunisMatrixMultfEXT(mode, m); }
#define glMatrixMultfEXT tunisMatrixMultfEXT
TUNIS_FORCE_INLINE void  tunisMatrixOrthoEXT(GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar) { tunisGL.tunisMatrixOrthoEXT(mode, left, right, bottom, top, zNear, zFar); }
#define glMatrixOrthoEXT tunisMatrixOrthoEXT
TUNIS_FORCE_INLINE void  tunisMatrixPopEXT(GLenum mode) { tunisGL.tunisMatrixPopEXT(mode); }
#define glMatrixPopEXT tunisMatrixPopEXT
TUNIS_FORCE_INLINE void  tunisMatrixPushEXT(GLenum mode) { tunisGL.tunisMatrixPushEXT(mode); }
#define glMatrixPushEXT tunisMatrixPushEXT
TUNIS_FORCE_INLINE void  tunisMatrixRotatedEXT(GLenum mode, GLdouble angle, GLdouble x, GLdouble y, GLdouble z) { tunisGL.tunisMatrixRotatedEXT(mode, angle, x, y, z); }
#define glMatrixRotatedEXT tunisMatrixRotatedEXT
TUNIS_FORCE_INLINE void  tunisMatrixRotatefEXT(GLenum mode, GLfloat angle, GLfloat x, GLfloat y, GLfloat z) { tunisGL.tunisMatrixRotatefEXT(mode, angle, x, y, z); }
#define glMatrixRotatefEXT tunisMatrixRotatefEXT
TUNIS_FORCE_INLINE void  tunisMatrixScaledEXT(GLenum mode, GLdouble x, GLdouble y, GLdouble z) { tunisGL.tunisMatrixScaledEXT(mode, x, y, z); }
#define glMatrixScaledEXT tunisMatrixScaledEXT
TUNIS_FORCE_INLINE void  tunisMatrixScalefEXT(GLenum mode, GLfloat x, GLfloat y, GLfloat z) { tunisGL.tunisMatrixScalefEXT(mode, x, y, z); }
#define glMatrixScalefEXT tunisMatrixScalefEXT
TUNIS_FORCE_INLINE void  tunisMatrixTranslatedEXT(GLenum mode, GLdouble x, GLdouble y, GLdouble z) { tunisGL.tunisMatrixTranslatedEXT(mode, x, y, z); }
#define glMatrixTranslatedEXT tunisMatrixTranslatedEXT
TUNIS_FORCE_INLINE void  tunisMatrixTranslatefEXT(GLenum mode, GLfloat x, GLfloat y, GLfloat z) { tunisGL.tunisMatrixTranslatefEXT(mode, x, y, z); }
#define glMatrixTranslatefEXT tunisMatrixTranslatefEXT
TUNIS_FORCE_INLINE void  tunisMaxShaderCompilerThreadsARB(GLuint count) { tunisGL.tunisMaxShaderCompilerThreadsARB(count); }
#define glMaxShaderCompilerThreadsARB tunisMaxShaderCompilerThreadsARB
TUNIS_FORCE_INLINE void  tunisMaxShaderCompilerThreadsKHR(GLuint count) { tunisGL.tunisMaxShaderCompilerThreadsKHR(count); }
#define glMaxShaderCompilerThreadsKHR tunisMaxShaderCompilerThreadsKHR
TUNIS_FORCE_INLINE void  tunisMemoryBarrier(GLbitfield barriers) { tunisGL.tunisMemoryBarrier(barriers); }
#define glMemoryBarrier tunisMemoryBarrier
TUNIS_FORCE_INLINE void  tunisMemoryBarrierByRegion(GLbitfield barriers) { tunisGL.tunisMemoryBarrierByRegion(barriers); }
#define glMemoryBarrierByRegion tunisMemoryBarrierByRegion
TUNIS_FORCE_INLINE void  tunisMemoryBarrierEXT(GLbitfield barriers) { tunisGL.tunisMemoryBarrierEXT(barriers); }
#define glMemoryBarrierEXT tunisMemoryBarrierEXT
TUNIS_FORCE_INLINE void  tunisMemoryObjectParameterivEXT(GLuint memoryObject, GLenum pname, const GLint * params) { tunisGL.tunisMemoryObjectParameterivEXT(memoryObject, pname, params); }
#define glMemoryObjectParameterivEXT tunisMemoryObjectParameterivEXT
TUNIS_FORCE_INLINE void  tunisMinSampleShading(GLfloat value) { tunisGL.tunisMinSampleShading(value); }
#define glMinSampleShading tunisMinSampleShading
TUNIS_FORCE_INLINE void  tunisMinSampleShadingARB(GLfloat value) { tunisGL.tunisMinSampleShadingARB(value); }
#define glMinSampleShadingARB tunisMinSampleShadingARB
TUNIS_FORCE_INLINE void  tunisMinSampleShadingOES(GLfloat value) { tunisGL.tunisMinSampleShadingOES(value); }
#define glMinSampleShadingOES tunisMinSampleShadingOES
TUNIS_FORCE_INLINE void  tunisMinmax(GLenum target, GLenum internalformat, GLboolean sink) { tunisGL.tunisMinmax(target, internalformat, sink); }
#define glMinmax tunisMinmax
TUNIS_FORCE_INLINE void  tunisMinmaxEXT(GLenum target, GLenum internalformat, GLboolean sink) { tunisGL.tunisMinmaxEXT(target, internalformat, sink); }
#define glMinmaxEXT tunisMinmaxEXT
TUNIS_FORCE_INLINE void  tunisMultMatrixd(const GLdouble * m) { tunisGL.tunisMultMatrixd(m); }
#define glMultMatrixd tunisMultMatrixd
TUNIS_FORCE_INLINE void  tunisMultMatrixf(const GLfloat * m) { tunisGL.tunisMultMatrixf(m); }
#define glMultMatrixf tunisMultMatrixf
TUNIS_FORCE_INLINE void  tunisMultMatrixx(const GLfixed * m) { tunisGL.tunisMultMatrixx(m); }
#define glMultMatrixx tunisMultMatrixx
TUNIS_FORCE_INLINE void  tunisMultMatrixxOES(const GLfixed * m) { tunisGL.tunisMultMatrixxOES(m); }
#define glMultMatrixxOES tunisMultMatrixxOES
TUNIS_FORCE_INLINE void  tunisMultTransposeMatrixd(const GLdouble * m) { tunisGL.tunisMultTransposeMatrixd(m); }
#define glMultTransposeMatrixd tunisMultTransposeMatrixd
TUNIS_FORCE_INLINE void  tunisMultTransposeMatrixdARB(const GLdouble * m) { tunisGL.tunisMultTransposeMatrixdARB(m); }
#define glMultTransposeMatrixdARB tunisMultTransposeMatrixdARB
TUNIS_FORCE_INLINE void  tunisMultTransposeMatrixf(const GLfloat * m) { tunisGL.tunisMultTransposeMatrixf(m); }
#define glMultTransposeMatrixf tunisMultTransposeMatrixf
TUNIS_FORCE_INLINE void  tunisMultTransposeMatrixfARB(const GLfloat * m) { tunisGL.tunisMultTransposeMatrixfARB(m); }
#define glMultTransposeMatrixfARB tunisMultTransposeMatrixfARB
TUNIS_FORCE_INLINE void  tunisMultTransposeMatrixxOES(const GLfixed * m) { tunisGL.tunisMultTransposeMatrixxOES(m); }
#define glMultTransposeMatrixxOES tunisMultTransposeMatrixxOES
TUNIS_FORCE_INLINE void  tunisMultiDrawArrays(GLenum mode, const GLint * first, const GLsizei * count, GLsizei drawcount) { tunisGL.tunisMultiDrawArrays(mode, first, count, drawcount); }
#define glMultiDrawArrays tunisMultiDrawArrays
TUNIS_FORCE_INLINE void  tunisMultiDrawArraysEXT(GLenum mode, const GLint * first, const GLsizei * count, GLsizei primcount) { tunisGL.tunisMultiDrawArraysEXT(mode, first, count, primcount); }
#define glMultiDrawArraysEXT tunisMultiDrawArraysEXT
TUNIS_FORCE_INLINE void  tunisMultiDrawArraysIndirect(GLenum mode, const void * indirect, GLsizei drawcount, GLsizei stride) { tunisGL.tunisMultiDrawArraysIndirect(mode, indirect, drawcount, stride); }
#define glMultiDrawArraysIndirect tunisMultiDrawArraysIndirect
TUNIS_FORCE_INLINE void  tunisMultiDrawArraysIndirectAMD(GLenum mode, const void * indirect, GLsizei primcount, GLsizei stride) { tunisGL.tunisMultiDrawArraysIndirectAMD(mode, indirect, primcount, stride); }
#define glMultiDrawArraysIndirectAMD tunisMultiDrawArraysIndirectAMD
TUNIS_FORCE_INLINE void  tunisMultiDrawArraysIndirectBindlessCountNV(GLenum mode, const void * indirect, GLsizei drawCount, GLsizei maxDrawCount, GLsizei stride, GLint vertexBufferCount) { tunisGL.tunisMultiDrawArraysIndirectBindlessCountNV(mode, indirect, drawCount, maxDrawCount, stride, vertexBufferCount); }
#define glMultiDrawArraysIndirectBindlessCountNV tunisMultiDrawArraysIndirectBindlessCountNV
TUNIS_FORCE_INLINE void  tunisMultiDrawArraysIndirectBindlessNV(GLenum mode, const void * indirect, GLsizei drawCount, GLsizei stride, GLint vertexBufferCount) { tunisGL.tunisMultiDrawArraysIndirectBindlessNV(mode, indirect, drawCount, stride, vertexBufferCount); }
#define glMultiDrawArraysIndirectBindlessNV tunisMultiDrawArraysIndirectBindlessNV
TUNIS_FORCE_INLINE void  tunisMultiDrawArraysIndirectCount(GLenum mode, const void * indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride) { tunisGL.tunisMultiDrawArraysIndirectCount(mode, indirect, drawcount, maxdrawcount, stride); }
#define glMultiDrawArraysIndirectCount tunisMultiDrawArraysIndirectCount
TUNIS_FORCE_INLINE void  tunisMultiDrawArraysIndirectCountARB(GLenum mode, const void * indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride) { tunisGL.tunisMultiDrawArraysIndirectCountARB(mode, indirect, drawcount, maxdrawcount, stride); }
#define glMultiDrawArraysIndirectCountARB tunisMultiDrawArraysIndirectCountARB
TUNIS_FORCE_INLINE void  tunisMultiDrawArraysIndirectEXT(GLenum mode, const void * indirect, GLsizei drawcount, GLsizei stride) { tunisGL.tunisMultiDrawArraysIndirectEXT(mode, indirect, drawcount, stride); }
#define glMultiDrawArraysIndirectEXT tunisMultiDrawArraysIndirectEXT
TUNIS_FORCE_INLINE void  tunisMultiDrawElementArrayAPPLE(GLenum mode, const GLint * first, const GLsizei * count, GLsizei primcount) { tunisGL.tunisMultiDrawElementArrayAPPLE(mode, first, count, primcount); }
#define glMultiDrawElementArrayAPPLE tunisMultiDrawElementArrayAPPLE
TUNIS_FORCE_INLINE void  tunisMultiDrawElements(GLenum mode, const GLsizei * count, GLenum type, const void *const* indices, GLsizei drawcount) { tunisGL.tunisMultiDrawElements(mode, count, type, indices, drawcount); }
#define glMultiDrawElements tunisMultiDrawElements
TUNIS_FORCE_INLINE void  tunisMultiDrawElementsBaseVertex(GLenum mode, const GLsizei * count, GLenum type, const void *const* indices, GLsizei drawcount, const GLint * basevertex) { tunisGL.tunisMultiDrawElementsBaseVertex(mode, count, type, indices, drawcount, basevertex); }
#define glMultiDrawElementsBaseVertex tunisMultiDrawElementsBaseVertex
TUNIS_FORCE_INLINE void  tunisMultiDrawElementsBaseVertexEXT(GLenum mode, const GLsizei * count, GLenum type, const void *const* indices, GLsizei primcount, const GLint * basevertex) { tunisGL.tunisMultiDrawElementsBaseVertexEXT(mode, count, type, indices, primcount, basevertex); }
#define glMultiDrawElementsBaseVertexEXT tunisMultiDrawElementsBaseVertexEXT
TUNIS_FORCE_INLINE void  tunisMultiDrawElementsEXT(GLenum mode, const GLsizei * count, GLenum type, const void *const* indices, GLsizei primcount) { tunisGL.tunisMultiDrawElementsEXT(mode, count, type, indices, primcount); }
#define glMultiDrawElementsEXT tunisMultiDrawElementsEXT
TUNIS_FORCE_INLINE void  tunisMultiDrawElementsIndirect(GLenum mode, GLenum type, const void * indirect, GLsizei drawcount, GLsizei stride) { tunisGL.tunisMultiDrawElementsIndirect(mode, type, indirect, drawcount, stride); }
#define glMultiDrawElementsIndirect tunisMultiDrawElementsIndirect
TUNIS_FORCE_INLINE void  tunisMultiDrawElementsIndirectAMD(GLenum mode, GLenum type, const void * indirect, GLsizei primcount, GLsizei stride) { tunisGL.tunisMultiDrawElementsIndirectAMD(mode, type, indirect, primcount, stride); }
#define glMultiDrawElementsIndirectAMD tunisMultiDrawElementsIndirectAMD
TUNIS_FORCE_INLINE void  tunisMultiDrawElementsIndirectBindlessCountNV(GLenum mode, GLenum type, const void * indirect, GLsizei drawCount, GLsizei maxDrawCount, GLsizei stride, GLint vertexBufferCount) { tunisGL.tunisMultiDrawElementsIndirectBindlessCountNV(mode, type, indirect, drawCount, maxDrawCount, stride, vertexBufferCount); }
#define glMultiDrawElementsIndirectBindlessCountNV tunisMultiDrawElementsIndirectBindlessCountNV
TUNIS_FORCE_INLINE void  tunisMultiDrawElementsIndirectBindlessNV(GLenum mode, GLenum type, const void * indirect, GLsizei drawCount, GLsizei stride, GLint vertexBufferCount) { tunisGL.tunisMultiDrawElementsIndirectBindlessNV(mode, type, indirect, drawCount, stride, vertexBufferCount); }
#define glMultiDrawElementsIndirectBindlessNV tunisMultiDrawElementsIndirectBindlessNV
TUNIS_FORCE_INLINE void  tunisMultiDrawElementsIndirectCount(GLenum mode, GLenum type, const void * indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride) { tunisGL.tunisMultiDrawElementsIndirectCount(mode, type, indirect, drawcount, maxdrawcount, stride); }
#define glMultiDrawElementsIndirectCount tunisMultiDrawElementsIndirectCount
TUNIS_FORCE_INLINE void  tunisMultiDrawElementsIndirectCountARB(GLenum mode, GLenum type, const void * indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride) { tunisGL.tunisMultiDrawElementsIndirectCountARB(mode, type, indirect, drawcount, maxdrawcount, stride); }
#define glMultiDrawElementsIndirectCountARB tunisMultiDrawElementsIndirectCountARB
TUNIS_FORCE_INLINE void  tunisMultiDrawElementsIndirectEXT(GLenum mode, GLenum type, const void * indirect, GLsizei drawcount, GLsizei stride) { tunisGL.tunisMultiDrawElementsIndirectEXT(mode, type, indirect, drawcount, stride); }
#define glMultiDrawElementsIndirectEXT tunisMultiDrawElementsIndirectEXT
TUNIS_FORCE_INLINE void  tunisMultiDrawMeshTasksIndirectCountNV(GLintptr indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride) { tunisGL.tunisMultiDrawMeshTasksIndirectCountNV(indirect, drawcount, maxdrawcount, stride); }
#define glMultiDrawMeshTasksIndirectCountNV tunisMultiDrawMeshTasksIndirectCountNV
TUNIS_FORCE_INLINE void  tunisMultiDrawMeshTasksIndirectNV(GLintptr indirect, GLsizei drawcount, GLsizei stride) { tunisGL.tunisMultiDrawMeshTasksIndirectNV(indirect, drawcount, stride); }
#define glMultiDrawMeshTasksIndirectNV tunisMultiDrawMeshTasksIndirectNV
TUNIS_FORCE_INLINE void  tunisMultiDrawRangeElementArrayAPPLE(GLenum mode, GLuint start, GLuint end, const GLint * first, const GLsizei * count, GLsizei primcount) { tunisGL.tunisMultiDrawRangeElementArrayAPPLE(mode, start, end, first, count, primcount); }
#define glMultiDrawRangeElementArrayAPPLE tunisMultiDrawRangeElementArrayAPPLE
TUNIS_FORCE_INLINE void  tunisMultiModeDrawArraysIBM(const GLenum * mode, const GLint * first, const GLsizei * count, GLsizei primcount, GLint modestride) { tunisGL.tunisMultiModeDrawArraysIBM(mode, first, count, primcount, modestride); }
#define glMultiModeDrawArraysIBM tunisMultiModeDrawArraysIBM
TUNIS_FORCE_INLINE void  tunisMultiModeDrawElementsIBM(const GLenum * mode, const GLsizei * count, GLenum type, const void *const* indices, GLsizei primcount, GLint modestride) { tunisGL.tunisMultiModeDrawElementsIBM(mode, count, type, indices, primcount, modestride); }
#define glMultiModeDrawElementsIBM tunisMultiModeDrawElementsIBM
TUNIS_FORCE_INLINE void  tunisMultiTexBufferEXT(GLenum texunit, GLenum target, GLenum internalformat, GLuint buffer) { tunisGL.tunisMultiTexBufferEXT(texunit, target, internalformat, buffer); }
#define glMultiTexBufferEXT tunisMultiTexBufferEXT
TUNIS_FORCE_INLINE void  tunisMultiTexCoord1bOES(GLenum texture, GLbyte s) { tunisGL.tunisMultiTexCoord1bOES(texture, s); }
#define glMultiTexCoord1bOES tunisMultiTexCoord1bOES
TUNIS_FORCE_INLINE void  tunisMultiTexCoord1bvOES(GLenum texture, const GLbyte * coords) { tunisGL.tunisMultiTexCoord1bvOES(texture, coords); }
#define glMultiTexCoord1bvOES tunisMultiTexCoord1bvOES
TUNIS_FORCE_INLINE void  tunisMultiTexCoord1d(GLenum target, GLdouble s) { tunisGL.tunisMultiTexCoord1d(target, s); }
#define glMultiTexCoord1d tunisMultiTexCoord1d
TUNIS_FORCE_INLINE void  tunisMultiTexCoord1dARB(GLenum target, GLdouble s) { tunisGL.tunisMultiTexCoord1dARB(target, s); }
#define glMultiTexCoord1dARB tunisMultiTexCoord1dARB
TUNIS_FORCE_INLINE void  tunisMultiTexCoord1dv(GLenum target, const GLdouble * v) { tunisGL.tunisMultiTexCoord1dv(target, v); }
#define glMultiTexCoord1dv tunisMultiTexCoord1dv
TUNIS_FORCE_INLINE void  tunisMultiTexCoord1dvARB(GLenum target, const GLdouble * v) { tunisGL.tunisMultiTexCoord1dvARB(target, v); }
#define glMultiTexCoord1dvARB tunisMultiTexCoord1dvARB
TUNIS_FORCE_INLINE void  tunisMultiTexCoord1f(GLenum target, GLfloat s) { tunisGL.tunisMultiTexCoord1f(target, s); }
#define glMultiTexCoord1f tunisMultiTexCoord1f
TUNIS_FORCE_INLINE void  tunisMultiTexCoord1fARB(GLenum target, GLfloat s) { tunisGL.tunisMultiTexCoord1fARB(target, s); }
#define glMultiTexCoord1fARB tunisMultiTexCoord1fARB
TUNIS_FORCE_INLINE void  tunisMultiTexCoord1fv(GLenum target, const GLfloat * v) { tunisGL.tunisMultiTexCoord1fv(target, v); }
#define glMultiTexCoord1fv tunisMultiTexCoord1fv
TUNIS_FORCE_INLINE void  tunisMultiTexCoord1fvARB(GLenum target, const GLfloat * v) { tunisGL.tunisMultiTexCoord1fvARB(target, v); }
#define glMultiTexCoord1fvARB tunisMultiTexCoord1fvARB
TUNIS_FORCE_INLINE void  tunisMultiTexCoord1hNV(GLenum target, GLhalfNV s) { tunisGL.tunisMultiTexCoord1hNV(target, s); }
#define glMultiTexCoord1hNV tunisMultiTexCoord1hNV
TUNIS_FORCE_INLINE void  tunisMultiTexCoord1hvNV(GLenum target, const GLhalfNV * v) { tunisGL.tunisMultiTexCoord1hvNV(target, v); }
#define glMultiTexCoord1hvNV tunisMultiTexCoord1hvNV
TUNIS_FORCE_INLINE void  tunisMultiTexCoord1i(GLenum target, GLint s) { tunisGL.tunisMultiTexCoord1i(target, s); }
#define glMultiTexCoord1i tunisMultiTexCoord1i
TUNIS_FORCE_INLINE void  tunisMultiTexCoord1iARB(GLenum target, GLint s) { tunisGL.tunisMultiTexCoord1iARB(target, s); }
#define glMultiTexCoord1iARB tunisMultiTexCoord1iARB
TUNIS_FORCE_INLINE void  tunisMultiTexCoord1iv(GLenum target, const GLint * v) { tunisGL.tunisMultiTexCoord1iv(target, v); }
#define glMultiTexCoord1iv tunisMultiTexCoord1iv
TUNIS_FORCE_INLINE void  tunisMultiTexCoord1ivARB(GLenum target, const GLint * v) { tunisGL.tunisMultiTexCoord1ivARB(target, v); }
#define glMultiTexCoord1ivARB tunisMultiTexCoord1ivARB
TUNIS_FORCE_INLINE void  tunisMultiTexCoord1s(GLenum target, GLshort s) { tunisGL.tunisMultiTexCoord1s(target, s); }
#define glMultiTexCoord1s tunisMultiTexCoord1s
TUNIS_FORCE_INLINE void  tunisMultiTexCoord1sARB(GLenum target, GLshort s) { tunisGL.tunisMultiTexCoord1sARB(target, s); }
#define glMultiTexCoord1sARB tunisMultiTexCoord1sARB
TUNIS_FORCE_INLINE void  tunisMultiTexCoord1sv(GLenum target, const GLshort * v) { tunisGL.tunisMultiTexCoord1sv(target, v); }
#define glMultiTexCoord1sv tunisMultiTexCoord1sv
TUNIS_FORCE_INLINE void  tunisMultiTexCoord1svARB(GLenum target, const GLshort * v) { tunisGL.tunisMultiTexCoord1svARB(target, v); }
#define glMultiTexCoord1svARB tunisMultiTexCoord1svARB
TUNIS_FORCE_INLINE void  tunisMultiTexCoord1xOES(GLenum texture, GLfixed s) { tunisGL.tunisMultiTexCoord1xOES(texture, s); }
#define glMultiTexCoord1xOES tunisMultiTexCoord1xOES
TUNIS_FORCE_INLINE void  tunisMultiTexCoord1xvOES(GLenum texture, const GLfixed * coords) { tunisGL.tunisMultiTexCoord1xvOES(texture, coords); }
#define glMultiTexCoord1xvOES tunisMultiTexCoord1xvOES
TUNIS_FORCE_INLINE void  tunisMultiTexCoord2bOES(GLenum texture, GLbyte s, GLbyte t) { tunisGL.tunisMultiTexCoord2bOES(texture, s, t); }
#define glMultiTexCoord2bOES tunisMultiTexCoord2bOES
TUNIS_FORCE_INLINE void  tunisMultiTexCoord2bvOES(GLenum texture, const GLbyte * coords) { tunisGL.tunisMultiTexCoord2bvOES(texture, coords); }
#define glMultiTexCoord2bvOES tunisMultiTexCoord2bvOES
TUNIS_FORCE_INLINE void  tunisMultiTexCoord2d(GLenum target, GLdouble s, GLdouble t) { tunisGL.tunisMultiTexCoord2d(target, s, t); }
#define glMultiTexCoord2d tunisMultiTexCoord2d
TUNIS_FORCE_INLINE void  tunisMultiTexCoord2dARB(GLenum target, GLdouble s, GLdouble t) { tunisGL.tunisMultiTexCoord2dARB(target, s, t); }
#define glMultiTexCoord2dARB tunisMultiTexCoord2dARB
TUNIS_FORCE_INLINE void  tunisMultiTexCoord2dv(GLenum target, const GLdouble * v) { tunisGL.tunisMultiTexCoord2dv(target, v); }
#define glMultiTexCoord2dv tunisMultiTexCoord2dv
TUNIS_FORCE_INLINE void  tunisMultiTexCoord2dvARB(GLenum target, const GLdouble * v) { tunisGL.tunisMultiTexCoord2dvARB(target, v); }
#define glMultiTexCoord2dvARB tunisMultiTexCoord2dvARB
TUNIS_FORCE_INLINE void  tunisMultiTexCoord2f(GLenum target, GLfloat s, GLfloat t) { tunisGL.tunisMultiTexCoord2f(target, s, t); }
#define glMultiTexCoord2f tunisMultiTexCoord2f
TUNIS_FORCE_INLINE void  tunisMultiTexCoord2fARB(GLenum target, GLfloat s, GLfloat t) { tunisGL.tunisMultiTexCoord2fARB(target, s, t); }
#define glMultiTexCoord2fARB tunisMultiTexCoord2fARB
TUNIS_FORCE_INLINE void  tunisMultiTexCoord2fv(GLenum target, const GLfloat * v) { tunisGL.tunisMultiTexCoord2fv(target, v); }
#define glMultiTexCoord2fv tunisMultiTexCoord2fv
TUNIS_FORCE_INLINE void  tunisMultiTexCoord2fvARB(GLenum target, const GLfloat * v) { tunisGL.tunisMultiTexCoord2fvARB(target, v); }
#define glMultiTexCoord2fvARB tunisMultiTexCoord2fvARB
TUNIS_FORCE_INLINE void  tunisMultiTexCoord2hNV(GLenum target, GLhalfNV s, GLhalfNV t) { tunisGL.tunisMultiTexCoord2hNV(target, s, t); }
#define glMultiTexCoord2hNV tunisMultiTexCoord2hNV
TUNIS_FORCE_INLINE void  tunisMultiTexCoord2hvNV(GLenum target, const GLhalfNV * v) { tunisGL.tunisMultiTexCoord2hvNV(target, v); }
#define glMultiTexCoord2hvNV tunisMultiTexCoord2hvNV
TUNIS_FORCE_INLINE void  tunisMultiTexCoord2i(GLenum target, GLint s, GLint t) { tunisGL.tunisMultiTexCoord2i(target, s, t); }
#define glMultiTexCoord2i tunisMultiTexCoord2i
TUNIS_FORCE_INLINE void  tunisMultiTexCoord2iARB(GLenum target, GLint s, GLint t) { tunisGL.tunisMultiTexCoord2iARB(target, s, t); }
#define glMultiTexCoord2iARB tunisMultiTexCoord2iARB
TUNIS_FORCE_INLINE void  tunisMultiTexCoord2iv(GLenum target, const GLint * v) { tunisGL.tunisMultiTexCoord2iv(target, v); }
#define glMultiTexCoord2iv tunisMultiTexCoord2iv
TUNIS_FORCE_INLINE void  tunisMultiTexCoord2ivARB(GLenum target, const GLint * v) { tunisGL.tunisMultiTexCoord2ivARB(target, v); }
#define glMultiTexCoord2ivARB tunisMultiTexCoord2ivARB
TUNIS_FORCE_INLINE void  tunisMultiTexCoord2s(GLenum target, GLshort s, GLshort t) { tunisGL.tunisMultiTexCoord2s(target, s, t); }
#define glMultiTexCoord2s tunisMultiTexCoord2s
TUNIS_FORCE_INLINE void  tunisMultiTexCoord2sARB(GLenum target, GLshort s, GLshort t) { tunisGL.tunisMultiTexCoord2sARB(target, s, t); }
#define glMultiTexCoord2sARB tunisMultiTexCoord2sARB
TUNIS_FORCE_INLINE void  tunisMultiTexCoord2sv(GLenum target, const GLshort * v) { tunisGL.tunisMultiTexCoord2sv(target, v); }
#define glMultiTexCoord2sv tunisMultiTexCoord2sv
TUNIS_FORCE_INLINE void  tunisMultiTexCoord2svARB(GLenum target, const GLshort * v) { tunisGL.tunisMultiTexCoord2svARB(target, v); }
#define glMultiTexCoord2svARB tunisMultiTexCoord2svARB
TUNIS_FORCE_INLINE void  tunisMultiTexCoord2xOES(GLenum texture, GLfixed s, GLfixed t) { tunisGL.tunisMultiTexCoord2xOES(texture, s, t); }
#define glMultiTexCoord2xOES tunisMultiTexCoord2xOES
TUNIS_FORCE_INLINE void  tunisMultiTexCoord2xvOES(GLenum texture, const GLfixed * coords) { tunisGL.tunisMultiTexCoord2xvOES(texture, coords); }
#define glMultiTexCoord2xvOES tunisMultiTexCoord2xvOES
TUNIS_FORCE_INLINE void  tunisMultiTexCoord3bOES(GLenum texture, GLbyte s, GLbyte t, GLbyte r) { tunisGL.tunisMultiTexCoord3bOES(texture, s, t, r); }
#define glMultiTexCoord3bOES tunisMultiTexCoord3bOES
TUNIS_FORCE_INLINE void  tunisMultiTexCoord3bvOES(GLenum texture, const GLbyte * coords) { tunisGL.tunisMultiTexCoord3bvOES(texture, coords); }
#define glMultiTexCoord3bvOES tunisMultiTexCoord3bvOES
TUNIS_FORCE_INLINE void  tunisMultiTexCoord3d(GLenum target, GLdouble s, GLdouble t, GLdouble r) { tunisGL.tunisMultiTexCoord3d(target, s, t, r); }
#define glMultiTexCoord3d tunisMultiTexCoord3d
TUNIS_FORCE_INLINE void  tunisMultiTexCoord3dARB(GLenum target, GLdouble s, GLdouble t, GLdouble r) { tunisGL.tunisMultiTexCoord3dARB(target, s, t, r); }
#define glMultiTexCoord3dARB tunisMultiTexCoord3dARB
TUNIS_FORCE_INLINE void  tunisMultiTexCoord3dv(GLenum target, const GLdouble * v) { tunisGL.tunisMultiTexCoord3dv(target, v); }
#define glMultiTexCoord3dv tunisMultiTexCoord3dv
TUNIS_FORCE_INLINE void  tunisMultiTexCoord3dvARB(GLenum target, const GLdouble * v) { tunisGL.tunisMultiTexCoord3dvARB(target, v); }
#define glMultiTexCoord3dvARB tunisMultiTexCoord3dvARB
TUNIS_FORCE_INLINE void  tunisMultiTexCoord3f(GLenum target, GLfloat s, GLfloat t, GLfloat r) { tunisGL.tunisMultiTexCoord3f(target, s, t, r); }
#define glMultiTexCoord3f tunisMultiTexCoord3f
TUNIS_FORCE_INLINE void  tunisMultiTexCoord3fARB(GLenum target, GLfloat s, GLfloat t, GLfloat r) { tunisGL.tunisMultiTexCoord3fARB(target, s, t, r); }
#define glMultiTexCoord3fARB tunisMultiTexCoord3fARB
TUNIS_FORCE_INLINE void  tunisMultiTexCoord3fv(GLenum target, const GLfloat * v) { tunisGL.tunisMultiTexCoord3fv(target, v); }
#define glMultiTexCoord3fv tunisMultiTexCoord3fv
TUNIS_FORCE_INLINE void  tunisMultiTexCoord3fvARB(GLenum target, const GLfloat * v) { tunisGL.tunisMultiTexCoord3fvARB(target, v); }
#define glMultiTexCoord3fvARB tunisMultiTexCoord3fvARB
TUNIS_FORCE_INLINE void  tunisMultiTexCoord3hNV(GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r) { tunisGL.tunisMultiTexCoord3hNV(target, s, t, r); }
#define glMultiTexCoord3hNV tunisMultiTexCoord3hNV
TUNIS_FORCE_INLINE void  tunisMultiTexCoord3hvNV(GLenum target, const GLhalfNV * v) { tunisGL.tunisMultiTexCoord3hvNV(target, v); }
#define glMultiTexCoord3hvNV tunisMultiTexCoord3hvNV
TUNIS_FORCE_INLINE void  tunisMultiTexCoord3i(GLenum target, GLint s, GLint t, GLint r) { tunisGL.tunisMultiTexCoord3i(target, s, t, r); }
#define glMultiTexCoord3i tunisMultiTexCoord3i
TUNIS_FORCE_INLINE void  tunisMultiTexCoord3iARB(GLenum target, GLint s, GLint t, GLint r) { tunisGL.tunisMultiTexCoord3iARB(target, s, t, r); }
#define glMultiTexCoord3iARB tunisMultiTexCoord3iARB
TUNIS_FORCE_INLINE void  tunisMultiTexCoord3iv(GLenum target, const GLint * v) { tunisGL.tunisMultiTexCoord3iv(target, v); }
#define glMultiTexCoord3iv tunisMultiTexCoord3iv
TUNIS_FORCE_INLINE void  tunisMultiTexCoord3ivARB(GLenum target, const GLint * v) { tunisGL.tunisMultiTexCoord3ivARB(target, v); }
#define glMultiTexCoord3ivARB tunisMultiTexCoord3ivARB
TUNIS_FORCE_INLINE void  tunisMultiTexCoord3s(GLenum target, GLshort s, GLshort t, GLshort r) { tunisGL.tunisMultiTexCoord3s(target, s, t, r); }
#define glMultiTexCoord3s tunisMultiTexCoord3s
TUNIS_FORCE_INLINE void  tunisMultiTexCoord3sARB(GLenum target, GLshort s, GLshort t, GLshort r) { tunisGL.tunisMultiTexCoord3sARB(target, s, t, r); }
#define glMultiTexCoord3sARB tunisMultiTexCoord3sARB
TUNIS_FORCE_INLINE void  tunisMultiTexCoord3sv(GLenum target, const GLshort * v) { tunisGL.tunisMultiTexCoord3sv(target, v); }
#define glMultiTexCoord3sv tunisMultiTexCoord3sv
TUNIS_FORCE_INLINE void  tunisMultiTexCoord3svARB(GLenum target, const GLshort * v) { tunisGL.tunisMultiTexCoord3svARB(target, v); }
#define glMultiTexCoord3svARB tunisMultiTexCoord3svARB
TUNIS_FORCE_INLINE void  tunisMultiTexCoord3xOES(GLenum texture, GLfixed s, GLfixed t, GLfixed r) { tunisGL.tunisMultiTexCoord3xOES(texture, s, t, r); }
#define glMultiTexCoord3xOES tunisMultiTexCoord3xOES
TUNIS_FORCE_INLINE void  tunisMultiTexCoord3xvOES(GLenum texture, const GLfixed * coords) { tunisGL.tunisMultiTexCoord3xvOES(texture, coords); }
#define glMultiTexCoord3xvOES tunisMultiTexCoord3xvOES
TUNIS_FORCE_INLINE void  tunisMultiTexCoord4bOES(GLenum texture, GLbyte s, GLbyte t, GLbyte r, GLbyte q) { tunisGL.tunisMultiTexCoord4bOES(texture, s, t, r, q); }
#define glMultiTexCoord4bOES tunisMultiTexCoord4bOES
TUNIS_FORCE_INLINE void  tunisMultiTexCoord4bvOES(GLenum texture, const GLbyte * coords) { tunisGL.tunisMultiTexCoord4bvOES(texture, coords); }
#define glMultiTexCoord4bvOES tunisMultiTexCoord4bvOES
TUNIS_FORCE_INLINE void  tunisMultiTexCoord4d(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q) { tunisGL.tunisMultiTexCoord4d(target, s, t, r, q); }
#define glMultiTexCoord4d tunisMultiTexCoord4d
TUNIS_FORCE_INLINE void  tunisMultiTexCoord4dARB(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q) { tunisGL.tunisMultiTexCoord4dARB(target, s, t, r, q); }
#define glMultiTexCoord4dARB tunisMultiTexCoord4dARB
TUNIS_FORCE_INLINE void  tunisMultiTexCoord4dv(GLenum target, const GLdouble * v) { tunisGL.tunisMultiTexCoord4dv(target, v); }
#define glMultiTexCoord4dv tunisMultiTexCoord4dv
TUNIS_FORCE_INLINE void  tunisMultiTexCoord4dvARB(GLenum target, const GLdouble * v) { tunisGL.tunisMultiTexCoord4dvARB(target, v); }
#define glMultiTexCoord4dvARB tunisMultiTexCoord4dvARB
TUNIS_FORCE_INLINE void  tunisMultiTexCoord4f(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q) { tunisGL.tunisMultiTexCoord4f(target, s, t, r, q); }
#define glMultiTexCoord4f tunisMultiTexCoord4f
TUNIS_FORCE_INLINE void  tunisMultiTexCoord4fARB(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q) { tunisGL.tunisMultiTexCoord4fARB(target, s, t, r, q); }
#define glMultiTexCoord4fARB tunisMultiTexCoord4fARB
TUNIS_FORCE_INLINE void  tunisMultiTexCoord4fv(GLenum target, const GLfloat * v) { tunisGL.tunisMultiTexCoord4fv(target, v); }
#define glMultiTexCoord4fv tunisMultiTexCoord4fv
TUNIS_FORCE_INLINE void  tunisMultiTexCoord4fvARB(GLenum target, const GLfloat * v) { tunisGL.tunisMultiTexCoord4fvARB(target, v); }
#define glMultiTexCoord4fvARB tunisMultiTexCoord4fvARB
TUNIS_FORCE_INLINE void  tunisMultiTexCoord4hNV(GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q) { tunisGL.tunisMultiTexCoord4hNV(target, s, t, r, q); }
#define glMultiTexCoord4hNV tunisMultiTexCoord4hNV
TUNIS_FORCE_INLINE void  tunisMultiTexCoord4hvNV(GLenum target, const GLhalfNV * v) { tunisGL.tunisMultiTexCoord4hvNV(target, v); }
#define glMultiTexCoord4hvNV tunisMultiTexCoord4hvNV
TUNIS_FORCE_INLINE void  tunisMultiTexCoord4i(GLenum target, GLint s, GLint t, GLint r, GLint q) { tunisGL.tunisMultiTexCoord4i(target, s, t, r, q); }
#define glMultiTexCoord4i tunisMultiTexCoord4i
TUNIS_FORCE_INLINE void  tunisMultiTexCoord4iARB(GLenum target, GLint s, GLint t, GLint r, GLint q) { tunisGL.tunisMultiTexCoord4iARB(target, s, t, r, q); }
#define glMultiTexCoord4iARB tunisMultiTexCoord4iARB
TUNIS_FORCE_INLINE void  tunisMultiTexCoord4iv(GLenum target, const GLint * v) { tunisGL.tunisMultiTexCoord4iv(target, v); }
#define glMultiTexCoord4iv tunisMultiTexCoord4iv
TUNIS_FORCE_INLINE void  tunisMultiTexCoord4ivARB(GLenum target, const GLint * v) { tunisGL.tunisMultiTexCoord4ivARB(target, v); }
#define glMultiTexCoord4ivARB tunisMultiTexCoord4ivARB
TUNIS_FORCE_INLINE void  tunisMultiTexCoord4s(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q) { tunisGL.tunisMultiTexCoord4s(target, s, t, r, q); }
#define glMultiTexCoord4s tunisMultiTexCoord4s
TUNIS_FORCE_INLINE void  tunisMultiTexCoord4sARB(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q) { tunisGL.tunisMultiTexCoord4sARB(target, s, t, r, q); }
#define glMultiTexCoord4sARB tunisMultiTexCoord4sARB
TUNIS_FORCE_INLINE void  tunisMultiTexCoord4sv(GLenum target, const GLshort * v) { tunisGL.tunisMultiTexCoord4sv(target, v); }
#define glMultiTexCoord4sv tunisMultiTexCoord4sv
TUNIS_FORCE_INLINE void  tunisMultiTexCoord4svARB(GLenum target, const GLshort * v) { tunisGL.tunisMultiTexCoord4svARB(target, v); }
#define glMultiTexCoord4svARB tunisMultiTexCoord4svARB
TUNIS_FORCE_INLINE void  tunisMultiTexCoord4x(GLenum texture, GLfixed s, GLfixed t, GLfixed r, GLfixed q) { tunisGL.tunisMultiTexCoord4x(texture, s, t, r, q); }
#define glMultiTexCoord4x tunisMultiTexCoord4x
TUNIS_FORCE_INLINE void  tunisMultiTexCoord4xOES(GLenum texture, GLfixed s, GLfixed t, GLfixed r, GLfixed q) { tunisGL.tunisMultiTexCoord4xOES(texture, s, t, r, q); }
#define glMultiTexCoord4xOES tunisMultiTexCoord4xOES
TUNIS_FORCE_INLINE void  tunisMultiTexCoord4xvOES(GLenum texture, const GLfixed * coords) { tunisGL.tunisMultiTexCoord4xvOES(texture, coords); }
#define glMultiTexCoord4xvOES tunisMultiTexCoord4xvOES
TUNIS_FORCE_INLINE void  tunisMultiTexCoordP1ui(GLenum texture, GLenum type, GLuint coords) { tunisGL.tunisMultiTexCoordP1ui(texture, type, coords); }
#define glMultiTexCoordP1ui tunisMultiTexCoordP1ui
TUNIS_FORCE_INLINE void  tunisMultiTexCoordP1uiv(GLenum texture, GLenum type, const GLuint * coords) { tunisGL.tunisMultiTexCoordP1uiv(texture, type, coords); }
#define glMultiTexCoordP1uiv tunisMultiTexCoordP1uiv
TUNIS_FORCE_INLINE void  tunisMultiTexCoordP2ui(GLenum texture, GLenum type, GLuint coords) { tunisGL.tunisMultiTexCoordP2ui(texture, type, coords); }
#define glMultiTexCoordP2ui tunisMultiTexCoordP2ui
TUNIS_FORCE_INLINE void  tunisMultiTexCoordP2uiv(GLenum texture, GLenum type, const GLuint * coords) { tunisGL.tunisMultiTexCoordP2uiv(texture, type, coords); }
#define glMultiTexCoordP2uiv tunisMultiTexCoordP2uiv
TUNIS_FORCE_INLINE void  tunisMultiTexCoordP3ui(GLenum texture, GLenum type, GLuint coords) { tunisGL.tunisMultiTexCoordP3ui(texture, type, coords); }
#define glMultiTexCoordP3ui tunisMultiTexCoordP3ui
TUNIS_FORCE_INLINE void  tunisMultiTexCoordP3uiv(GLenum texture, GLenum type, const GLuint * coords) { tunisGL.tunisMultiTexCoordP3uiv(texture, type, coords); }
#define glMultiTexCoordP3uiv tunisMultiTexCoordP3uiv
TUNIS_FORCE_INLINE void  tunisMultiTexCoordP4ui(GLenum texture, GLenum type, GLuint coords) { tunisGL.tunisMultiTexCoordP4ui(texture, type, coords); }
#define glMultiTexCoordP4ui tunisMultiTexCoordP4ui
TUNIS_FORCE_INLINE void  tunisMultiTexCoordP4uiv(GLenum texture, GLenum type, const GLuint * coords) { tunisGL.tunisMultiTexCoordP4uiv(texture, type, coords); }
#define glMultiTexCoordP4uiv tunisMultiTexCoordP4uiv
TUNIS_FORCE_INLINE void  tunisMultiTexCoordPointerEXT(GLenum texunit, GLint size, GLenum type, GLsizei stride, const void * pointer) { tunisGL.tunisMultiTexCoordPointerEXT(texunit, size, type, stride, pointer); }
#define glMultiTexCoordPointerEXT tunisMultiTexCoordPointerEXT
TUNIS_FORCE_INLINE void  tunisMultiTexEnvfEXT(GLenum texunit, GLenum target, GLenum pname, GLfloat param) { tunisGL.tunisMultiTexEnvfEXT(texunit, target, pname, param); }
#define glMultiTexEnvfEXT tunisMultiTexEnvfEXT
TUNIS_FORCE_INLINE void  tunisMultiTexEnvfvEXT(GLenum texunit, GLenum target, GLenum pname, const GLfloat * params) { tunisGL.tunisMultiTexEnvfvEXT(texunit, target, pname, params); }
#define glMultiTexEnvfvEXT tunisMultiTexEnvfvEXT
TUNIS_FORCE_INLINE void  tunisMultiTexEnviEXT(GLenum texunit, GLenum target, GLenum pname, GLint param) { tunisGL.tunisMultiTexEnviEXT(texunit, target, pname, param); }
#define glMultiTexEnviEXT tunisMultiTexEnviEXT
TUNIS_FORCE_INLINE void  tunisMultiTexEnvivEXT(GLenum texunit, GLenum target, GLenum pname, const GLint * params) { tunisGL.tunisMultiTexEnvivEXT(texunit, target, pname, params); }
#define glMultiTexEnvivEXT tunisMultiTexEnvivEXT
TUNIS_FORCE_INLINE void  tunisMultiTexGendEXT(GLenum texunit, GLenum coord, GLenum pname, GLdouble param) { tunisGL.tunisMultiTexGendEXT(texunit, coord, pname, param); }
#define glMultiTexGendEXT tunisMultiTexGendEXT
TUNIS_FORCE_INLINE void  tunisMultiTexGendvEXT(GLenum texunit, GLenum coord, GLenum pname, const GLdouble * params) { tunisGL.tunisMultiTexGendvEXT(texunit, coord, pname, params); }
#define glMultiTexGendvEXT tunisMultiTexGendvEXT
TUNIS_FORCE_INLINE void  tunisMultiTexGenfEXT(GLenum texunit, GLenum coord, GLenum pname, GLfloat param) { tunisGL.tunisMultiTexGenfEXT(texunit, coord, pname, param); }
#define glMultiTexGenfEXT tunisMultiTexGenfEXT
TUNIS_FORCE_INLINE void  tunisMultiTexGenfvEXT(GLenum texunit, GLenum coord, GLenum pname, const GLfloat * params) { tunisGL.tunisMultiTexGenfvEXT(texunit, coord, pname, params); }
#define glMultiTexGenfvEXT tunisMultiTexGenfvEXT
TUNIS_FORCE_INLINE void  tunisMultiTexGeniEXT(GLenum texunit, GLenum coord, GLenum pname, GLint param) { tunisGL.tunisMultiTexGeniEXT(texunit, coord, pname, param); }
#define glMultiTexGeniEXT tunisMultiTexGeniEXT
TUNIS_FORCE_INLINE void  tunisMultiTexGenivEXT(GLenum texunit, GLenum coord, GLenum pname, const GLint * params) { tunisGL.tunisMultiTexGenivEXT(texunit, coord, pname, params); }
#define glMultiTexGenivEXT tunisMultiTexGenivEXT
TUNIS_FORCE_INLINE void  tunisMultiTexImage1DEXT(GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void * pixels) { tunisGL.tunisMultiTexImage1DEXT(texunit, target, level, internalformat, width, border, format, type, pixels); }
#define glMultiTexImage1DEXT tunisMultiTexImage1DEXT
TUNIS_FORCE_INLINE void  tunisMultiTexImage2DEXT(GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void * pixels) { tunisGL.tunisMultiTexImage2DEXT(texunit, target, level, internalformat, width, height, border, format, type, pixels); }
#define glMultiTexImage2DEXT tunisMultiTexImage2DEXT
TUNIS_FORCE_INLINE void  tunisMultiTexImage3DEXT(GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void * pixels) { tunisGL.tunisMultiTexImage3DEXT(texunit, target, level, internalformat, width, height, depth, border, format, type, pixels); }
#define glMultiTexImage3DEXT tunisMultiTexImage3DEXT
TUNIS_FORCE_INLINE void  tunisMultiTexParameterIivEXT(GLenum texunit, GLenum target, GLenum pname, const GLint * params) { tunisGL.tunisMultiTexParameterIivEXT(texunit, target, pname, params); }
#define glMultiTexParameterIivEXT tunisMultiTexParameterIivEXT
TUNIS_FORCE_INLINE void  tunisMultiTexParameterIuivEXT(GLenum texunit, GLenum target, GLenum pname, const GLuint * params) { tunisGL.tunisMultiTexParameterIuivEXT(texunit, target, pname, params); }
#define glMultiTexParameterIuivEXT tunisMultiTexParameterIuivEXT
TUNIS_FORCE_INLINE void  tunisMultiTexParameterfEXT(GLenum texunit, GLenum target, GLenum pname, GLfloat param) { tunisGL.tunisMultiTexParameterfEXT(texunit, target, pname, param); }
#define glMultiTexParameterfEXT tunisMultiTexParameterfEXT
TUNIS_FORCE_INLINE void  tunisMultiTexParameterfvEXT(GLenum texunit, GLenum target, GLenum pname, const GLfloat * params) { tunisGL.tunisMultiTexParameterfvEXT(texunit, target, pname, params); }
#define glMultiTexParameterfvEXT tunisMultiTexParameterfvEXT
TUNIS_FORCE_INLINE void  tunisMultiTexParameteriEXT(GLenum texunit, GLenum target, GLenum pname, GLint param) { tunisGL.tunisMultiTexParameteriEXT(texunit, target, pname, param); }
#define glMultiTexParameteriEXT tunisMultiTexParameteriEXT
TUNIS_FORCE_INLINE void  tunisMultiTexParameterivEXT(GLenum texunit, GLenum target, GLenum pname, const GLint * params) { tunisGL.tunisMultiTexParameterivEXT(texunit, target, pname, params); }
#define glMultiTexParameterivEXT tunisMultiTexParameterivEXT
TUNIS_FORCE_INLINE void  tunisMultiTexRenderbufferEXT(GLenum texunit, GLenum target, GLuint renderbuffer) { tunisGL.tunisMultiTexRenderbufferEXT(texunit, target, renderbuffer); }
#define glMultiTexRenderbufferEXT tunisMultiTexRenderbufferEXT
TUNIS_FORCE_INLINE void  tunisMultiTexSubImage1DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void * pixels) { tunisGL.tunisMultiTexSubImage1DEXT(texunit, target, level, xoffset, width, format, type, pixels); }
#define glMultiTexSubImage1DEXT tunisMultiTexSubImage1DEXT
TUNIS_FORCE_INLINE void  tunisMultiTexSubImage2DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * pixels) { tunisGL.tunisMultiTexSubImage2DEXT(texunit, target, level, xoffset, yoffset, width, height, format, type, pixels); }
#define glMultiTexSubImage2DEXT tunisMultiTexSubImage2DEXT
TUNIS_FORCE_INLINE void  tunisMultiTexSubImage3DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void * pixels) { tunisGL.tunisMultiTexSubImage3DEXT(texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels); }
#define glMultiTexSubImage3DEXT tunisMultiTexSubImage3DEXT
TUNIS_FORCE_INLINE void  tunisMulticastBarrierNV(void) { tunisGL.tunisMulticastBarrierNV(); }
#define glMulticastBarrierNV tunisMulticastBarrierNV
TUNIS_FORCE_INLINE void  tunisMulticastBlitFramebufferNV(GLuint srcGpu, GLuint dstGpu, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter) { tunisGL.tunisMulticastBlitFramebufferNV(srcGpu, dstGpu, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter); }
#define glMulticastBlitFramebufferNV tunisMulticastBlitFramebufferNV
TUNIS_FORCE_INLINE void  tunisMulticastBufferSubDataNV(GLbitfield gpuMask, GLuint buffer, GLintptr offset, GLsizeiptr size, const void * data) { tunisGL.tunisMulticastBufferSubDataNV(gpuMask, buffer, offset, size, data); }
#define glMulticastBufferSubDataNV tunisMulticastBufferSubDataNV
TUNIS_FORCE_INLINE void  tunisMulticastCopyBufferSubDataNV(GLuint readGpu, GLbitfield writeGpuMask, GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size) { tunisGL.tunisMulticastCopyBufferSubDataNV(readGpu, writeGpuMask, readBuffer, writeBuffer, readOffset, writeOffset, size); }
#define glMulticastCopyBufferSubDataNV tunisMulticastCopyBufferSubDataNV
TUNIS_FORCE_INLINE void  tunisMulticastCopyImageSubDataNV(GLuint srcGpu, GLbitfield dstGpuMask, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth) { tunisGL.tunisMulticastCopyImageSubDataNV(srcGpu, dstGpuMask, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth); }
#define glMulticastCopyImageSubDataNV tunisMulticastCopyImageSubDataNV
TUNIS_FORCE_INLINE void  tunisMulticastFramebufferSampleLocationsfvNV(GLuint gpu, GLuint framebuffer, GLuint start, GLsizei count, const GLfloat * v) { tunisGL.tunisMulticastFramebufferSampleLocationsfvNV(gpu, framebuffer, start, count, v); }
#define glMulticastFramebufferSampleLocationsfvNV tunisMulticastFramebufferSampleLocationsfvNV
TUNIS_FORCE_INLINE void  tunisMulticastGetQueryObjecti64vNV(GLuint gpu, GLuint id, GLenum pname, GLint64 * params) { tunisGL.tunisMulticastGetQueryObjecti64vNV(gpu, id, pname, params); }
#define glMulticastGetQueryObjecti64vNV tunisMulticastGetQueryObjecti64vNV
TUNIS_FORCE_INLINE void  tunisMulticastGetQueryObjectivNV(GLuint gpu, GLuint id, GLenum pname, GLint * params) { tunisGL.tunisMulticastGetQueryObjectivNV(gpu, id, pname, params); }
#define glMulticastGetQueryObjectivNV tunisMulticastGetQueryObjectivNV
TUNIS_FORCE_INLINE void  tunisMulticastGetQueryObjectui64vNV(GLuint gpu, GLuint id, GLenum pname, GLuint64 * params) { tunisGL.tunisMulticastGetQueryObjectui64vNV(gpu, id, pname, params); }
#define glMulticastGetQueryObjectui64vNV tunisMulticastGetQueryObjectui64vNV
TUNIS_FORCE_INLINE void  tunisMulticastGetQueryObjectuivNV(GLuint gpu, GLuint id, GLenum pname, GLuint * params) { tunisGL.tunisMulticastGetQueryObjectuivNV(gpu, id, pname, params); }
#define glMulticastGetQueryObjectuivNV tunisMulticastGetQueryObjectuivNV
TUNIS_FORCE_INLINE void  tunisMulticastWaitSyncNV(GLuint signalGpu, GLbitfield waitGpuMask) { tunisGL.tunisMulticastWaitSyncNV(signalGpu, waitGpuMask); }
#define glMulticastWaitSyncNV tunisMulticastWaitSyncNV
TUNIS_FORCE_INLINE void  tunisNamedBufferAttachMemoryNV(GLuint buffer, GLuint memory, GLuint64 offset) { tunisGL.tunisNamedBufferAttachMemoryNV(buffer, memory, offset); }
#define glNamedBufferAttachMemoryNV tunisNamedBufferAttachMemoryNV
TUNIS_FORCE_INLINE void  tunisNamedBufferData(GLuint buffer, GLsizeiptr size, const void * data, GLenum usage) { tunisGL.tunisNamedBufferData(buffer, size, data, usage); }
#define glNamedBufferData tunisNamedBufferData
TUNIS_FORCE_INLINE void  tunisNamedBufferDataEXT(GLuint buffer, GLsizeiptr size, const void * data, GLenum usage) { tunisGL.tunisNamedBufferDataEXT(buffer, size, data, usage); }
#define glNamedBufferDataEXT tunisNamedBufferDataEXT
TUNIS_FORCE_INLINE void  tunisNamedBufferPageCommitmentARB(GLuint buffer, GLintptr offset, GLsizeiptr size, GLboolean commit) { tunisGL.tunisNamedBufferPageCommitmentARB(buffer, offset, size, commit); }
#define glNamedBufferPageCommitmentARB tunisNamedBufferPageCommitmentARB
TUNIS_FORCE_INLINE void  tunisNamedBufferPageCommitmentEXT(GLuint buffer, GLintptr offset, GLsizeiptr size, GLboolean commit) { tunisGL.tunisNamedBufferPageCommitmentEXT(buffer, offset, size, commit); }
#define glNamedBufferPageCommitmentEXT tunisNamedBufferPageCommitmentEXT
TUNIS_FORCE_INLINE void  tunisNamedBufferStorage(GLuint buffer, GLsizeiptr size, const void * data, GLbitfield flags) { tunisGL.tunisNamedBufferStorage(buffer, size, data, flags); }
#define glNamedBufferStorage tunisNamedBufferStorage
TUNIS_FORCE_INLINE void  tunisNamedBufferStorageEXT(GLuint buffer, GLsizeiptr size, const void * data, GLbitfield flags) { tunisGL.tunisNamedBufferStorageEXT(buffer, size, data, flags); }
#define glNamedBufferStorageEXT tunisNamedBufferStorageEXT
TUNIS_FORCE_INLINE void  tunisNamedBufferStorageExternalEXT(GLuint buffer, GLintptr offset, GLsizeiptr size, GLeglClientBufferEXT clientBuffer, GLbitfield flags) { tunisGL.tunisNamedBufferStorageExternalEXT(buffer, offset, size, clientBuffer, flags); }
#define glNamedBufferStorageExternalEXT tunisNamedBufferStorageExternalEXT
TUNIS_FORCE_INLINE void  tunisNamedBufferStorageMemEXT(GLuint buffer, GLsizeiptr size, GLuint memory, GLuint64 offset) { tunisGL.tunisNamedBufferStorageMemEXT(buffer, size, memory, offset); }
#define glNamedBufferStorageMemEXT tunisNamedBufferStorageMemEXT
TUNIS_FORCE_INLINE void  tunisNamedBufferSubData(GLuint buffer, GLintptr offset, GLsizeiptr size, const void * data) { tunisGL.tunisNamedBufferSubData(buffer, offset, size, data); }
#define glNamedBufferSubData tunisNamedBufferSubData
TUNIS_FORCE_INLINE void  tunisNamedBufferSubDataEXT(GLuint buffer, GLintptr offset, GLsizeiptr size, const void * data) { tunisGL.tunisNamedBufferSubDataEXT(buffer, offset, size, data); }
#define glNamedBufferSubDataEXT tunisNamedBufferSubDataEXT
TUNIS_FORCE_INLINE void  tunisNamedCopyBufferSubDataEXT(GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size) { tunisGL.tunisNamedCopyBufferSubDataEXT(readBuffer, writeBuffer, readOffset, writeOffset, size); }
#define glNamedCopyBufferSubDataEXT tunisNamedCopyBufferSubDataEXT
TUNIS_FORCE_INLINE void  tunisNamedFramebufferDrawBuffer(GLuint framebuffer, GLenum buf) { tunisGL.tunisNamedFramebufferDrawBuffer(framebuffer, buf); }
#define glNamedFramebufferDrawBuffer tunisNamedFramebufferDrawBuffer
TUNIS_FORCE_INLINE void  tunisNamedFramebufferDrawBuffers(GLuint framebuffer, GLsizei n, const GLenum * bufs) { tunisGL.tunisNamedFramebufferDrawBuffers(framebuffer, n, bufs); }
#define glNamedFramebufferDrawBuffers tunisNamedFramebufferDrawBuffers
TUNIS_FORCE_INLINE void  tunisNamedFramebufferParameteri(GLuint framebuffer, GLenum pname, GLint param) { tunisGL.tunisNamedFramebufferParameteri(framebuffer, pname, param); }
#define glNamedFramebufferParameteri tunisNamedFramebufferParameteri
TUNIS_FORCE_INLINE void  tunisNamedFramebufferParameteriEXT(GLuint framebuffer, GLenum pname, GLint param) { tunisGL.tunisNamedFramebufferParameteriEXT(framebuffer, pname, param); }
#define glNamedFramebufferParameteriEXT tunisNamedFramebufferParameteriEXT
TUNIS_FORCE_INLINE void  tunisNamedFramebufferReadBuffer(GLuint framebuffer, GLenum src) { tunisGL.tunisNamedFramebufferReadBuffer(framebuffer, src); }
#define glNamedFramebufferReadBuffer tunisNamedFramebufferReadBuffer
TUNIS_FORCE_INLINE void  tunisNamedFramebufferRenderbuffer(GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer) { tunisGL.tunisNamedFramebufferRenderbuffer(framebuffer, attachment, renderbuffertarget, renderbuffer); }
#define glNamedFramebufferRenderbuffer tunisNamedFramebufferRenderbuffer
TUNIS_FORCE_INLINE void  tunisNamedFramebufferRenderbufferEXT(GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer) { tunisGL.tunisNamedFramebufferRenderbufferEXT(framebuffer, attachment, renderbuffertarget, renderbuffer); }
#define glNamedFramebufferRenderbufferEXT tunisNamedFramebufferRenderbufferEXT
TUNIS_FORCE_INLINE void  tunisNamedFramebufferSampleLocationsfvARB(GLuint framebuffer, GLuint start, GLsizei count, const GLfloat * v) { tunisGL.tunisNamedFramebufferSampleLocationsfvARB(framebuffer, start, count, v); }
#define glNamedFramebufferSampleLocationsfvARB tunisNamedFramebufferSampleLocationsfvARB
TUNIS_FORCE_INLINE void  tunisNamedFramebufferSampleLocationsfvNV(GLuint framebuffer, GLuint start, GLsizei count, const GLfloat * v) { tunisGL.tunisNamedFramebufferSampleLocationsfvNV(framebuffer, start, count, v); }
#define glNamedFramebufferSampleLocationsfvNV tunisNamedFramebufferSampleLocationsfvNV
TUNIS_FORCE_INLINE void  tunisNamedFramebufferSamplePositionsfvAMD(GLuint framebuffer, GLuint numsamples, GLuint pixelindex, const GLfloat * values) { tunisGL.tunisNamedFramebufferSamplePositionsfvAMD(framebuffer, numsamples, pixelindex, values); }
#define glNamedFramebufferSamplePositionsfvAMD tunisNamedFramebufferSamplePositionsfvAMD
TUNIS_FORCE_INLINE void  tunisNamedFramebufferTexture(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level) { tunisGL.tunisNamedFramebufferTexture(framebuffer, attachment, texture, level); }
#define glNamedFramebufferTexture tunisNamedFramebufferTexture
TUNIS_FORCE_INLINE void  tunisNamedFramebufferTexture1DEXT(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level) { tunisGL.tunisNamedFramebufferTexture1DEXT(framebuffer, attachment, textarget, texture, level); }
#define glNamedFramebufferTexture1DEXT tunisNamedFramebufferTexture1DEXT
TUNIS_FORCE_INLINE void  tunisNamedFramebufferTexture2DEXT(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level) { tunisGL.tunisNamedFramebufferTexture2DEXT(framebuffer, attachment, textarget, texture, level); }
#define glNamedFramebufferTexture2DEXT tunisNamedFramebufferTexture2DEXT
TUNIS_FORCE_INLINE void  tunisNamedFramebufferTexture3DEXT(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset) { tunisGL.tunisNamedFramebufferTexture3DEXT(framebuffer, attachment, textarget, texture, level, zoffset); }
#define glNamedFramebufferTexture3DEXT tunisNamedFramebufferTexture3DEXT
TUNIS_FORCE_INLINE void  tunisNamedFramebufferTextureEXT(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level) { tunisGL.tunisNamedFramebufferTextureEXT(framebuffer, attachment, texture, level); }
#define glNamedFramebufferTextureEXT tunisNamedFramebufferTextureEXT
TUNIS_FORCE_INLINE void  tunisNamedFramebufferTextureFaceEXT(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLenum face) { tunisGL.tunisNamedFramebufferTextureFaceEXT(framebuffer, attachment, texture, level, face); }
#define glNamedFramebufferTextureFaceEXT tunisNamedFramebufferTextureFaceEXT
TUNIS_FORCE_INLINE void  tunisNamedFramebufferTextureLayer(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer) { tunisGL.tunisNamedFramebufferTextureLayer(framebuffer, attachment, texture, level, layer); }
#define glNamedFramebufferTextureLayer tunisNamedFramebufferTextureLayer
TUNIS_FORCE_INLINE void  tunisNamedFramebufferTextureLayerEXT(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer) { tunisGL.tunisNamedFramebufferTextureLayerEXT(framebuffer, attachment, texture, level, layer); }
#define glNamedFramebufferTextureLayerEXT tunisNamedFramebufferTextureLayerEXT
TUNIS_FORCE_INLINE void  tunisNamedProgramLocalParameter4dEXT(GLuint program, GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) { tunisGL.tunisNamedProgramLocalParameter4dEXT(program, target, index, x, y, z, w); }
#define glNamedProgramLocalParameter4dEXT tunisNamedProgramLocalParameter4dEXT
TUNIS_FORCE_INLINE void  tunisNamedProgramLocalParameter4dvEXT(GLuint program, GLenum target, GLuint index, const GLdouble * params) { tunisGL.tunisNamedProgramLocalParameter4dvEXT(program, target, index, params); }
#define glNamedProgramLocalParameter4dvEXT tunisNamedProgramLocalParameter4dvEXT
TUNIS_FORCE_INLINE void  tunisNamedProgramLocalParameter4fEXT(GLuint program, GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w) { tunisGL.tunisNamedProgramLocalParameter4fEXT(program, target, index, x, y, z, w); }
#define glNamedProgramLocalParameter4fEXT tunisNamedProgramLocalParameter4fEXT
TUNIS_FORCE_INLINE void  tunisNamedProgramLocalParameter4fvEXT(GLuint program, GLenum target, GLuint index, const GLfloat * params) { tunisGL.tunisNamedProgramLocalParameter4fvEXT(program, target, index, params); }
#define glNamedProgramLocalParameter4fvEXT tunisNamedProgramLocalParameter4fvEXT
TUNIS_FORCE_INLINE void  tunisNamedProgramLocalParameterI4iEXT(GLuint program, GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w) { tunisGL.tunisNamedProgramLocalParameterI4iEXT(program, target, index, x, y, z, w); }
#define glNamedProgramLocalParameterI4iEXT tunisNamedProgramLocalParameterI4iEXT
TUNIS_FORCE_INLINE void  tunisNamedProgramLocalParameterI4ivEXT(GLuint program, GLenum target, GLuint index, const GLint * params) { tunisGL.tunisNamedProgramLocalParameterI4ivEXT(program, target, index, params); }
#define glNamedProgramLocalParameterI4ivEXT tunisNamedProgramLocalParameterI4ivEXT
TUNIS_FORCE_INLINE void  tunisNamedProgramLocalParameterI4uiEXT(GLuint program, GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w) { tunisGL.tunisNamedProgramLocalParameterI4uiEXT(program, target, index, x, y, z, w); }
#define glNamedProgramLocalParameterI4uiEXT tunisNamedProgramLocalParameterI4uiEXT
TUNIS_FORCE_INLINE void  tunisNamedProgramLocalParameterI4uivEXT(GLuint program, GLenum target, GLuint index, const GLuint * params) { tunisGL.tunisNamedProgramLocalParameterI4uivEXT(program, target, index, params); }
#define glNamedProgramLocalParameterI4uivEXT tunisNamedProgramLocalParameterI4uivEXT
TUNIS_FORCE_INLINE void  tunisNamedProgramLocalParameters4fvEXT(GLuint program, GLenum target, GLuint index, GLsizei count, const GLfloat * params) { tunisGL.tunisNamedProgramLocalParameters4fvEXT(program, target, index, count, params); }
#define glNamedProgramLocalParameters4fvEXT tunisNamedProgramLocalParameters4fvEXT
TUNIS_FORCE_INLINE void  tunisNamedProgramLocalParametersI4ivEXT(GLuint program, GLenum target, GLuint index, GLsizei count, const GLint * params) { tunisGL.tunisNamedProgramLocalParametersI4ivEXT(program, target, index, count, params); }
#define glNamedProgramLocalParametersI4ivEXT tunisNamedProgramLocalParametersI4ivEXT
TUNIS_FORCE_INLINE void  tunisNamedProgramLocalParametersI4uivEXT(GLuint program, GLenum target, GLuint index, GLsizei count, const GLuint * params) { tunisGL.tunisNamedProgramLocalParametersI4uivEXT(program, target, index, count, params); }
#define glNamedProgramLocalParametersI4uivEXT tunisNamedProgramLocalParametersI4uivEXT
TUNIS_FORCE_INLINE void  tunisNamedProgramStringEXT(GLuint program, GLenum target, GLenum format, GLsizei len, const void * string) { tunisGL.tunisNamedProgramStringEXT(program, target, format, len, string); }
#define glNamedProgramStringEXT tunisNamedProgramStringEXT
TUNIS_FORCE_INLINE void  tunisNamedRenderbufferStorage(GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height) { tunisGL.tunisNamedRenderbufferStorage(renderbuffer, internalformat, width, height); }
#define glNamedRenderbufferStorage tunisNamedRenderbufferStorage
TUNIS_FORCE_INLINE void  tunisNamedRenderbufferStorageEXT(GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height) { tunisGL.tunisNamedRenderbufferStorageEXT(renderbuffer, internalformat, width, height); }
#define glNamedRenderbufferStorageEXT tunisNamedRenderbufferStorageEXT
TUNIS_FORCE_INLINE void  tunisNamedRenderbufferStorageMultisample(GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height) { tunisGL.tunisNamedRenderbufferStorageMultisample(renderbuffer, samples, internalformat, width, height); }
#define glNamedRenderbufferStorageMultisample tunisNamedRenderbufferStorageMultisample
TUNIS_FORCE_INLINE void  tunisNamedRenderbufferStorageMultisampleAdvancedAMD(GLuint renderbuffer, GLsizei samples, GLsizei storageSamples, GLenum internalformat, GLsizei width, GLsizei height) { tunisGL.tunisNamedRenderbufferStorageMultisampleAdvancedAMD(renderbuffer, samples, storageSamples, internalformat, width, height); }
#define glNamedRenderbufferStorageMultisampleAdvancedAMD tunisNamedRenderbufferStorageMultisampleAdvancedAMD
TUNIS_FORCE_INLINE void  tunisNamedRenderbufferStorageMultisampleCoverageEXT(GLuint renderbuffer, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height) { tunisGL.tunisNamedRenderbufferStorageMultisampleCoverageEXT(renderbuffer, coverageSamples, colorSamples, internalformat, width, height); }
#define glNamedRenderbufferStorageMultisampleCoverageEXT tunisNamedRenderbufferStorageMultisampleCoverageEXT
TUNIS_FORCE_INLINE void  tunisNamedRenderbufferStorageMultisampleEXT(GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height) { tunisGL.tunisNamedRenderbufferStorageMultisampleEXT(renderbuffer, samples, internalformat, width, height); }
#define glNamedRenderbufferStorageMultisampleEXT tunisNamedRenderbufferStorageMultisampleEXT
TUNIS_FORCE_INLINE void  tunisNamedStringARB(GLenum type, GLint namelen, const GLchar * name, GLint stringlen, const GLchar * string) { tunisGL.tunisNamedStringARB(type, namelen, name, stringlen, string); }
#define glNamedStringARB tunisNamedStringARB
TUNIS_FORCE_INLINE GLuint tunisNewBufferRegion(GLenum region) { return tunisGL.tunisNewBufferRegion(region); }
#define glNewBufferRegion tunisNewBufferRegion
TUNIS_FORCE_INLINE void  tunisNewList(GLuint list, GLenum mode) { tunisGL.tunisNewList(list, mode); }
#define glNewList tunisNewList
TUNIS_FORCE_INLINE GLuint tunisNewObjectBufferATI(GLsizei size, const void * pointer, GLenum usage) { return tunisGL.tunisNewObjectBufferATI(size, pointer, usage); }
#define glNewObjectBufferATI tunisNewObjectBufferATI
TUNIS_FORCE_INLINE void  tunisNormal3b(GLbyte nx, GLbyte ny, GLbyte nz) { tunisGL.tunisNormal3b(nx, ny, nz); }
#define glNormal3b tunisNormal3b
TUNIS_FORCE_INLINE void  tunisNormal3bv(const GLbyte * v) { tunisGL.tunisNormal3bv(v); }
#define glNormal3bv tunisNormal3bv
TUNIS_FORCE_INLINE void  tunisNormal3d(GLdouble nx, GLdouble ny, GLdouble nz) { tunisGL.tunisNormal3d(nx, ny, nz); }
#define glNormal3d tunisNormal3d
TUNIS_FORCE_INLINE void  tunisNormal3dv(const GLdouble * v) { tunisGL.tunisNormal3dv(v); }
#define glNormal3dv tunisNormal3dv
TUNIS_FORCE_INLINE void  tunisNormal3f(GLfloat nx, GLfloat ny, GLfloat nz) { tunisGL.tunisNormal3f(nx, ny, nz); }
#define glNormal3f tunisNormal3f
TUNIS_FORCE_INLINE void  tunisNormal3fVertex3fSUN(GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z) { tunisGL.tunisNormal3fVertex3fSUN(nx, ny, nz, x, y, z); }
#define glNormal3fVertex3fSUN tunisNormal3fVertex3fSUN
TUNIS_FORCE_INLINE void  tunisNormal3fVertex3fvSUN(const GLfloat * n, const GLfloat * v) { tunisGL.tunisNormal3fVertex3fvSUN(n, v); }
#define glNormal3fVertex3fvSUN tunisNormal3fVertex3fvSUN
TUNIS_FORCE_INLINE void  tunisNormal3fv(const GLfloat * v) { tunisGL.tunisNormal3fv(v); }
#define glNormal3fv tunisNormal3fv
TUNIS_FORCE_INLINE void  tunisNormal3hNV(GLhalfNV nx, GLhalfNV ny, GLhalfNV nz) { tunisGL.tunisNormal3hNV(nx, ny, nz); }
#define glNormal3hNV tunisNormal3hNV
TUNIS_FORCE_INLINE void  tunisNormal3hvNV(const GLhalfNV * v) { tunisGL.tunisNormal3hvNV(v); }
#define glNormal3hvNV tunisNormal3hvNV
TUNIS_FORCE_INLINE void  tunisNormal3i(GLint nx, GLint ny, GLint nz) { tunisGL.tunisNormal3i(nx, ny, nz); }
#define glNormal3i tunisNormal3i
TUNIS_FORCE_INLINE void  tunisNormal3iv(const GLint * v) { tunisGL.tunisNormal3iv(v); }
#define glNormal3iv tunisNormal3iv
TUNIS_FORCE_INLINE void  tunisNormal3s(GLshort nx, GLshort ny, GLshort nz) { tunisGL.tunisNormal3s(nx, ny, nz); }
#define glNormal3s tunisNormal3s
TUNIS_FORCE_INLINE void  tunisNormal3sv(const GLshort * v) { tunisGL.tunisNormal3sv(v); }
#define glNormal3sv tunisNormal3sv
TUNIS_FORCE_INLINE void  tunisNormal3x(GLfixed nx, GLfixed ny, GLfixed nz) { tunisGL.tunisNormal3x(nx, ny, nz); }
#define glNormal3x tunisNormal3x
TUNIS_FORCE_INLINE void  tunisNormal3xOES(GLfixed nx, GLfixed ny, GLfixed nz) { tunisGL.tunisNormal3xOES(nx, ny, nz); }
#define glNormal3xOES tunisNormal3xOES
TUNIS_FORCE_INLINE void  tunisNormal3xvOES(const GLfixed * coords) { tunisGL.tunisNormal3xvOES(coords); }
#define glNormal3xvOES tunisNormal3xvOES
TUNIS_FORCE_INLINE void  tunisNormalFormatNV(GLenum type, GLsizei stride) { tunisGL.tunisNormalFormatNV(type, stride); }
#define glNormalFormatNV tunisNormalFormatNV
TUNIS_FORCE_INLINE void  tunisNormalP3ui(GLenum type, GLuint coords) { tunisGL.tunisNormalP3ui(type, coords); }
#define glNormalP3ui tunisNormalP3ui
TUNIS_FORCE_INLINE void  tunisNormalP3uiv(GLenum type, const GLuint * coords) { tunisGL.tunisNormalP3uiv(type, coords); }
#define glNormalP3uiv tunisNormalP3uiv
TUNIS_FORCE_INLINE void  tunisNormalPointer(GLenum type, GLsizei stride, const void * pointer) { tunisGL.tunisNormalPointer(type, stride, pointer); }
#define glNormalPointer tunisNormalPointer
TUNIS_FORCE_INLINE void  tunisNormalPointerEXT(GLenum type, GLsizei stride, GLsizei count, const void * pointer) { tunisGL.tunisNormalPointerEXT(type, stride, count, pointer); }
#define glNormalPointerEXT tunisNormalPointerEXT
TUNIS_FORCE_INLINE void  tunisNormalPointerListIBM(GLenum type, GLint stride, const void ** pointer, GLint ptrstride) { tunisGL.tunisNormalPointerListIBM(type, stride, pointer, ptrstride); }
#define glNormalPointerListIBM tunisNormalPointerListIBM
TUNIS_FORCE_INLINE void  tunisNormalPointervINTEL(GLenum type, const void ** pointer) { tunisGL.tunisNormalPointervINTEL(type, pointer); }
#define glNormalPointervINTEL tunisNormalPointervINTEL
TUNIS_FORCE_INLINE void  tunisNormalStream3bATI(GLenum stream, GLbyte nx, GLbyte ny, GLbyte nz) { tunisGL.tunisNormalStream3bATI(stream, nx, ny, nz); }
#define glNormalStream3bATI tunisNormalStream3bATI
TUNIS_FORCE_INLINE void  tunisNormalStream3bvATI(GLenum stream, const GLbyte * coords) { tunisGL.tunisNormalStream3bvATI(stream, coords); }
#define glNormalStream3bvATI tunisNormalStream3bvATI
TUNIS_FORCE_INLINE void  tunisNormalStream3dATI(GLenum stream, GLdouble nx, GLdouble ny, GLdouble nz) { tunisGL.tunisNormalStream3dATI(stream, nx, ny, nz); }
#define glNormalStream3dATI tunisNormalStream3dATI
TUNIS_FORCE_INLINE void  tunisNormalStream3dvATI(GLenum stream, const GLdouble * coords) { tunisGL.tunisNormalStream3dvATI(stream, coords); }
#define glNormalStream3dvATI tunisNormalStream3dvATI
TUNIS_FORCE_INLINE void  tunisNormalStream3fATI(GLenum stream, GLfloat nx, GLfloat ny, GLfloat nz) { tunisGL.tunisNormalStream3fATI(stream, nx, ny, nz); }
#define glNormalStream3fATI tunisNormalStream3fATI
TUNIS_FORCE_INLINE void  tunisNormalStream3fvATI(GLenum stream, const GLfloat * coords) { tunisGL.tunisNormalStream3fvATI(stream, coords); }
#define glNormalStream3fvATI tunisNormalStream3fvATI
TUNIS_FORCE_INLINE void  tunisNormalStream3iATI(GLenum stream, GLint nx, GLint ny, GLint nz) { tunisGL.tunisNormalStream3iATI(stream, nx, ny, nz); }
#define glNormalStream3iATI tunisNormalStream3iATI
TUNIS_FORCE_INLINE void  tunisNormalStream3ivATI(GLenum stream, const GLint * coords) { tunisGL.tunisNormalStream3ivATI(stream, coords); }
#define glNormalStream3ivATI tunisNormalStream3ivATI
TUNIS_FORCE_INLINE void  tunisNormalStream3sATI(GLenum stream, GLshort nx, GLshort ny, GLshort nz) { tunisGL.tunisNormalStream3sATI(stream, nx, ny, nz); }
#define glNormalStream3sATI tunisNormalStream3sATI
TUNIS_FORCE_INLINE void  tunisNormalStream3svATI(GLenum stream, const GLshort * coords) { tunisGL.tunisNormalStream3svATI(stream, coords); }
#define glNormalStream3svATI tunisNormalStream3svATI
TUNIS_FORCE_INLINE void  tunisObjectLabel(GLenum identifier, GLuint name, GLsizei length, const GLchar * label) { tunisGL.tunisObjectLabel(identifier, name, length, label); }
#define glObjectLabel tunisObjectLabel
TUNIS_FORCE_INLINE void  tunisObjectLabelKHR(GLenum identifier, GLuint name, GLsizei length, const GLchar * label) { tunisGL.tunisObjectLabelKHR(identifier, name, length, label); }
#define glObjectLabelKHR tunisObjectLabelKHR
TUNIS_FORCE_INLINE void  tunisObjectPtrLabel(const void * ptr, GLsizei length, const GLchar * label) { tunisGL.tunisObjectPtrLabel(ptr, length, label); }
#define glObjectPtrLabel tunisObjectPtrLabel
TUNIS_FORCE_INLINE void  tunisObjectPtrLabelKHR(const void * ptr, GLsizei length, const GLchar * label) { tunisGL.tunisObjectPtrLabelKHR(ptr, length, label); }
#define glObjectPtrLabelKHR tunisObjectPtrLabelKHR
TUNIS_FORCE_INLINE GLenum tunisObjectPurgeableAPPLE(GLenum objectType, GLuint name, GLenum option) { return tunisGL.tunisObjectPurgeableAPPLE(objectType, name, option); }
#define glObjectPurgeableAPPLE tunisObjectPurgeableAPPLE
TUNIS_FORCE_INLINE GLenum tunisObjectUnpurgeableAPPLE(GLenum objectType, GLuint name, GLenum option) { return tunisGL.tunisObjectUnpurgeableAPPLE(objectType, name, option); }
#define glObjectUnpurgeableAPPLE tunisObjectUnpurgeableAPPLE
TUNIS_FORCE_INLINE void  tunisOrtho(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar) { tunisGL.tunisOrtho(left, right, bottom, top, zNear, zFar); }
#define glOrtho tunisOrtho
TUNIS_FORCE_INLINE void  tunisOrthof(GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f) { tunisGL.tunisOrthof(l, r, b, t, n, f); }
#define glOrthof tunisOrthof
TUNIS_FORCE_INLINE void  tunisOrthofOES(GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f) { tunisGL.tunisOrthofOES(l, r, b, t, n, f); }
#define glOrthofOES tunisOrthofOES
TUNIS_FORCE_INLINE void  tunisOrthox(GLfixed l, GLfixed r, GLfixed b, GLfixed t, GLfixed n, GLfixed f) { tunisGL.tunisOrthox(l, r, b, t, n, f); }
#define glOrthox tunisOrthox
TUNIS_FORCE_INLINE void  tunisOrthoxOES(GLfixed l, GLfixed r, GLfixed b, GLfixed t, GLfixed n, GLfixed f) { tunisGL.tunisOrthoxOES(l, r, b, t, n, f); }
#define glOrthoxOES tunisOrthoxOES
TUNIS_FORCE_INLINE void  tunisPNTrianglesfATI(GLenum pname, GLfloat param) { tunisGL.tunisPNTrianglesfATI(pname, param); }
#define glPNTrianglesfATI tunisPNTrianglesfATI
TUNIS_FORCE_INLINE void  tunisPNTrianglesiATI(GLenum pname, GLint param) { tunisGL.tunisPNTrianglesiATI(pname, param); }
#define glPNTrianglesiATI tunisPNTrianglesiATI
TUNIS_FORCE_INLINE void  tunisPassTexCoordATI(GLuint dst, GLuint coord, GLenum swizzle) { tunisGL.tunisPassTexCoordATI(dst, coord, swizzle); }
#define glPassTexCoordATI tunisPassTexCoordATI
TUNIS_FORCE_INLINE void  tunisPassThrough(GLfloat token) { tunisGL.tunisPassThrough(token); }
#define glPassThrough tunisPassThrough
TUNIS_FORCE_INLINE void  tunisPassThroughxOES(GLfixed token) { tunisGL.tunisPassThroughxOES(token); }
#define glPassThroughxOES tunisPassThroughxOES
TUNIS_FORCE_INLINE void  tunisPatchParameterfv(GLenum pname, const GLfloat * values) { tunisGL.tunisPatchParameterfv(pname, values); }
#define glPatchParameterfv tunisPatchParameterfv
TUNIS_FORCE_INLINE void  tunisPatchParameteri(GLenum pname, GLint value) { tunisGL.tunisPatchParameteri(pname, value); }
#define glPatchParameteri tunisPatchParameteri
TUNIS_FORCE_INLINE void  tunisPatchParameteriEXT(GLenum pname, GLint value) { tunisGL.tunisPatchParameteriEXT(pname, value); }
#define glPatchParameteriEXT tunisPatchParameteriEXT
TUNIS_FORCE_INLINE void  tunisPatchParameteriOES(GLenum pname, GLint value) { tunisGL.tunisPatchParameteriOES(pname, value); }
#define glPatchParameteriOES tunisPatchParameteriOES
TUNIS_FORCE_INLINE void  tunisPathColorGenNV(GLenum color, GLenum genMode, GLenum colorFormat, const GLfloat * coeffs) { tunisGL.tunisPathColorGenNV(color, genMode, colorFormat, coeffs); }
#define glPathColorGenNV tunisPathColorGenNV
TUNIS_FORCE_INLINE void  tunisPathCommandsNV(GLuint path, GLsizei numCommands, const GLubyte * commands, GLsizei numCoords, GLenum coordType, const void * coords) { tunisGL.tunisPathCommandsNV(path, numCommands, commands, numCoords, coordType, coords); }
#define glPathCommandsNV tunisPathCommandsNV
TUNIS_FORCE_INLINE void  tunisPathCoordsNV(GLuint path, GLsizei numCoords, GLenum coordType, const void * coords) { tunisGL.tunisPathCoordsNV(path, numCoords, coordType, coords); }
#define glPathCoordsNV tunisPathCoordsNV
TUNIS_FORCE_INLINE void  tunisPathCoverDepthFuncNV(GLenum func) { tunisGL.tunisPathCoverDepthFuncNV(func); }
#define glPathCoverDepthFuncNV tunisPathCoverDepthFuncNV
TUNIS_FORCE_INLINE void  tunisPathDashArrayNV(GLuint path, GLsizei dashCount, const GLfloat * dashArray) { tunisGL.tunisPathDashArrayNV(path, dashCount, dashArray); }
#define glPathDashArrayNV tunisPathDashArrayNV
TUNIS_FORCE_INLINE void  tunisPathFogGenNV(GLenum genMode) { tunisGL.tunisPathFogGenNV(genMode); }
#define glPathFogGenNV tunisPathFogGenNV
TUNIS_FORCE_INLINE GLenum tunisPathGlyphIndexArrayNV(GLuint firstPathName, GLenum fontTarget, const void * fontName, GLbitfield fontStyle, GLuint firstGlyphIndex, GLsizei numGlyphs, GLuint pathParameterTemplate, GLfloat emScale) { return tunisGL.tunisPathGlyphIndexArrayNV(firstPathName, fontTarget, fontName, fontStyle, firstGlyphIndex, numGlyphs, pathParameterTemplate, emScale); }
#define glPathGlyphIndexArrayNV tunisPathGlyphIndexArrayNV
TUNIS_FORCE_INLINE GLenum tunisPathGlyphIndexRangeNV(GLenum fontTarget, const void * fontName, GLbitfield fontStyle, GLuint pathParameterTemplate, GLfloat emScale, GLuint baseAndCount[2]) { return tunisGL.tunisPathGlyphIndexRangeNV(fontTarget, fontName, fontStyle, pathParameterTemplate, emScale, baseAndCount); }
#define glPathGlyphIndexRangeNV tunisPathGlyphIndexRangeNV
TUNIS_FORCE_INLINE void  tunisPathGlyphRangeNV(GLuint firstPathName, GLenum fontTarget, const void * fontName, GLbitfield fontStyle, GLuint firstGlyph, GLsizei numGlyphs, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale) { tunisGL.tunisPathGlyphRangeNV(firstPathName, fontTarget, fontName, fontStyle, firstGlyph, numGlyphs, handleMissingGlyphs, pathParameterTemplate, emScale); }
#define glPathGlyphRangeNV tunisPathGlyphRangeNV
TUNIS_FORCE_INLINE void  tunisPathGlyphsNV(GLuint firstPathName, GLenum fontTarget, const void * fontName, GLbitfield fontStyle, GLsizei numGlyphs, GLenum type, const void * charcodes, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale) { tunisGL.tunisPathGlyphsNV(firstPathName, fontTarget, fontName, fontStyle, numGlyphs, type, charcodes, handleMissingGlyphs, pathParameterTemplate, emScale); }
#define glPathGlyphsNV tunisPathGlyphsNV
TUNIS_FORCE_INLINE GLenum tunisPathMemoryGlyphIndexArrayNV(GLuint firstPathName, GLenum fontTarget, GLsizeiptr fontSize, const void * fontData, GLsizei faceIndex, GLuint firstGlyphIndex, GLsizei numGlyphs, GLuint pathParameterTemplate, GLfloat emScale) { return tunisGL.tunisPathMemoryGlyphIndexArrayNV(firstPathName, fontTarget, fontSize, fontData, faceIndex, firstGlyphIndex, numGlyphs, pathParameterTemplate, emScale); }
#define glPathMemoryGlyphIndexArrayNV tunisPathMemoryGlyphIndexArrayNV
TUNIS_FORCE_INLINE void  tunisPathParameterfNV(GLuint path, GLenum pname, GLfloat value) { tunisGL.tunisPathParameterfNV(path, pname, value); }
#define glPathParameterfNV tunisPathParameterfNV
TUNIS_FORCE_INLINE void  tunisPathParameterfvNV(GLuint path, GLenum pname, const GLfloat * value) { tunisGL.tunisPathParameterfvNV(path, pname, value); }
#define glPathParameterfvNV tunisPathParameterfvNV
TUNIS_FORCE_INLINE void  tunisPathParameteriNV(GLuint path, GLenum pname, GLint value) { tunisGL.tunisPathParameteriNV(path, pname, value); }
#define glPathParameteriNV tunisPathParameteriNV
TUNIS_FORCE_INLINE void  tunisPathParameterivNV(GLuint path, GLenum pname, const GLint * value) { tunisGL.tunisPathParameterivNV(path, pname, value); }
#define glPathParameterivNV tunisPathParameterivNV
TUNIS_FORCE_INLINE void  tunisPathStencilDepthOffsetNV(GLfloat factor, GLfloat units) { tunisGL.tunisPathStencilDepthOffsetNV(factor, units); }
#define glPathStencilDepthOffsetNV tunisPathStencilDepthOffsetNV
TUNIS_FORCE_INLINE void  tunisPathStencilFuncNV(GLenum func, GLint ref, GLuint mask) { tunisGL.tunisPathStencilFuncNV(func, ref, mask); }
#define glPathStencilFuncNV tunisPathStencilFuncNV
TUNIS_FORCE_INLINE void  tunisPathStringNV(GLuint path, GLenum format, GLsizei length, const void * pathString) { tunisGL.tunisPathStringNV(path, format, length, pathString); }
#define glPathStringNV tunisPathStringNV
TUNIS_FORCE_INLINE void  tunisPathSubCommandsNV(GLuint path, GLsizei commandStart, GLsizei commandsToDelete, GLsizei numCommands, const GLubyte * commands, GLsizei numCoords, GLenum coordType, const void * coords) { tunisGL.tunisPathSubCommandsNV(path, commandStart, commandsToDelete, numCommands, commands, numCoords, coordType, coords); }
#define glPathSubCommandsNV tunisPathSubCommandsNV
TUNIS_FORCE_INLINE void  tunisPathSubCoordsNV(GLuint path, GLsizei coordStart, GLsizei numCoords, GLenum coordType, const void * coords) { tunisGL.tunisPathSubCoordsNV(path, coordStart, numCoords, coordType, coords); }
#define glPathSubCoordsNV tunisPathSubCoordsNV
TUNIS_FORCE_INLINE void  tunisPathTexGenNV(GLenum texCoordSet, GLenum genMode, GLint components, const GLfloat * coeffs) { tunisGL.tunisPathTexGenNV(texCoordSet, genMode, components, coeffs); }
#define glPathTexGenNV tunisPathTexGenNV
TUNIS_FORCE_INLINE void  tunisPauseTransformFeedback(void) { tunisGL.tunisPauseTransformFeedback(); }
#define glPauseTransformFeedback tunisPauseTransformFeedback
TUNIS_FORCE_INLINE void  tunisPauseTransformFeedbackNV(void) { tunisGL.tunisPauseTransformFeedbackNV(); }
#define glPauseTransformFeedbackNV tunisPauseTransformFeedbackNV
TUNIS_FORCE_INLINE void  tunisPixelDataRangeNV(GLenum target, GLsizei length, const void * pointer) { tunisGL.tunisPixelDataRangeNV(target, length, pointer); }
#define glPixelDataRangeNV tunisPixelDataRangeNV
TUNIS_FORCE_INLINE void  tunisPixelMapfv(GLenum map, GLsizei mapsize, const GLfloat * values) { tunisGL.tunisPixelMapfv(map, mapsize, values); }
#define glPixelMapfv tunisPixelMapfv
TUNIS_FORCE_INLINE void  tunisPixelMapuiv(GLenum map, GLsizei mapsize, const GLuint * values) { tunisGL.tunisPixelMapuiv(map, mapsize, values); }
#define glPixelMapuiv tunisPixelMapuiv
TUNIS_FORCE_INLINE void  tunisPixelMapusv(GLenum map, GLsizei mapsize, const GLushort * values) { tunisGL.tunisPixelMapusv(map, mapsize, values); }
#define glPixelMapusv tunisPixelMapusv
TUNIS_FORCE_INLINE void  tunisPixelMapx(GLenum map, GLint size, const GLfixed * values) { tunisGL.tunisPixelMapx(map, size, values); }
#define glPixelMapx tunisPixelMapx
TUNIS_FORCE_INLINE void  tunisPixelStoref(GLenum pname, GLfloat param) { tunisGL.tunisPixelStoref(pname, param); }
#define glPixelStoref tunisPixelStoref
TUNIS_FORCE_INLINE void  tunisPixelStorei(GLenum pname, GLint param) { tunisGL.tunisPixelStorei(pname, param); }
#define glPixelStorei tunisPixelStorei
TUNIS_FORCE_INLINE void  tunisPixelStorex(GLenum pname, GLfixed param) { tunisGL.tunisPixelStorex(pname, param); }
#define glPixelStorex tunisPixelStorex
TUNIS_FORCE_INLINE void  tunisPixelTexGenParameterfSGIS(GLenum pname, GLfloat param) { tunisGL.tunisPixelTexGenParameterfSGIS(pname, param); }
#define glPixelTexGenParameterfSGIS tunisPixelTexGenParameterfSGIS
TUNIS_FORCE_INLINE void  tunisPixelTexGenParameterfvSGIS(GLenum pname, const GLfloat * params) { tunisGL.tunisPixelTexGenParameterfvSGIS(pname, params); }
#define glPixelTexGenParameterfvSGIS tunisPixelTexGenParameterfvSGIS
TUNIS_FORCE_INLINE void  tunisPixelTexGenParameteriSGIS(GLenum pname, GLint param) { tunisGL.tunisPixelTexGenParameteriSGIS(pname, param); }
#define glPixelTexGenParameteriSGIS tunisPixelTexGenParameteriSGIS
TUNIS_FORCE_INLINE void  tunisPixelTexGenParameterivSGIS(GLenum pname, const GLint * params) { tunisGL.tunisPixelTexGenParameterivSGIS(pname, params); }
#define glPixelTexGenParameterivSGIS tunisPixelTexGenParameterivSGIS
TUNIS_FORCE_INLINE void  tunisPixelTexGenSGIX(GLenum mode) { tunisGL.tunisPixelTexGenSGIX(mode); }
#define glPixelTexGenSGIX tunisPixelTexGenSGIX
TUNIS_FORCE_INLINE void  tunisPixelTransferf(GLenum pname, GLfloat param) { tunisGL.tunisPixelTransferf(pname, param); }
#define glPixelTransferf tunisPixelTransferf
TUNIS_FORCE_INLINE void  tunisPixelTransferi(GLenum pname, GLint param) { tunisGL.tunisPixelTransferi(pname, param); }
#define glPixelTransferi tunisPixelTransferi
TUNIS_FORCE_INLINE void  tunisPixelTransferxOES(GLenum pname, GLfixed param) { tunisGL.tunisPixelTransferxOES(pname, param); }
#define glPixelTransferxOES tunisPixelTransferxOES
TUNIS_FORCE_INLINE void  tunisPixelTransformParameterfEXT(GLenum target, GLenum pname, GLfloat param) { tunisGL.tunisPixelTransformParameterfEXT(target, pname, param); }
#define glPixelTransformParameterfEXT tunisPixelTransformParameterfEXT
TUNIS_FORCE_INLINE void  tunisPixelTransformParameterfvEXT(GLenum target, GLenum pname, const GLfloat * params) { tunisGL.tunisPixelTransformParameterfvEXT(target, pname, params); }
#define glPixelTransformParameterfvEXT tunisPixelTransformParameterfvEXT
TUNIS_FORCE_INLINE void  tunisPixelTransformParameteriEXT(GLenum target, GLenum pname, GLint param) { tunisGL.tunisPixelTransformParameteriEXT(target, pname, param); }
#define glPixelTransformParameteriEXT tunisPixelTransformParameteriEXT
TUNIS_FORCE_INLINE void  tunisPixelTransformParameterivEXT(GLenum target, GLenum pname, const GLint * params) { tunisGL.tunisPixelTransformParameterivEXT(target, pname, params); }
#define glPixelTransformParameterivEXT tunisPixelTransformParameterivEXT
TUNIS_FORCE_INLINE void  tunisPixelZoom(GLfloat xfactor, GLfloat yfactor) { tunisGL.tunisPixelZoom(xfactor, yfactor); }
#define glPixelZoom tunisPixelZoom
TUNIS_FORCE_INLINE void  tunisPixelZoomxOES(GLfixed xfactor, GLfixed yfactor) { tunisGL.tunisPixelZoomxOES(xfactor, yfactor); }
#define glPixelZoomxOES tunisPixelZoomxOES
TUNIS_FORCE_INLINE GLboolean tunisPointAlongPathNV(GLuint path, GLsizei startSegment, GLsizei numSegments, GLfloat distance, GLfloat * x, GLfloat * y, GLfloat * tangentX, GLfloat * tangentY) { return tunisGL.tunisPointAlongPathNV(path, startSegment, numSegments, distance, x, y, tangentX, tangentY); }
#define glPointAlongPathNV tunisPointAlongPathNV
TUNIS_FORCE_INLINE void  tunisPointParameterf(GLenum pname, GLfloat param) { tunisGL.tunisPointParameterf(pname, param); }
#define glPointParameterf tunisPointParameterf
TUNIS_FORCE_INLINE void  tunisPointParameterfARB(GLenum pname, GLfloat param) { tunisGL.tunisPointParameterfARB(pname, param); }
#define glPointParameterfARB tunisPointParameterfARB
TUNIS_FORCE_INLINE void  tunisPointParameterfEXT(GLenum pname, GLfloat param) { tunisGL.tunisPointParameterfEXT(pname, param); }
#define glPointParameterfEXT tunisPointParameterfEXT
TUNIS_FORCE_INLINE void  tunisPointParameterfSGIS(GLenum pname, GLfloat param) { tunisGL.tunisPointParameterfSGIS(pname, param); }
#define glPointParameterfSGIS tunisPointParameterfSGIS
TUNIS_FORCE_INLINE void  tunisPointParameterfv(GLenum pname, const GLfloat * params) { tunisGL.tunisPointParameterfv(pname, params); }
#define glPointParameterfv tunisPointParameterfv
TUNIS_FORCE_INLINE void  tunisPointParameterfvARB(GLenum pname, const GLfloat * params) { tunisGL.tunisPointParameterfvARB(pname, params); }
#define glPointParameterfvARB tunisPointParameterfvARB
TUNIS_FORCE_INLINE void  tunisPointParameterfvEXT(GLenum pname, const GLfloat * params) { tunisGL.tunisPointParameterfvEXT(pname, params); }
#define glPointParameterfvEXT tunisPointParameterfvEXT
TUNIS_FORCE_INLINE void  tunisPointParameterfvSGIS(GLenum pname, const GLfloat * params) { tunisGL.tunisPointParameterfvSGIS(pname, params); }
#define glPointParameterfvSGIS tunisPointParameterfvSGIS
TUNIS_FORCE_INLINE void  tunisPointParameteri(GLenum pname, GLint param) { tunisGL.tunisPointParameteri(pname, param); }
#define glPointParameteri tunisPointParameteri
TUNIS_FORCE_INLINE void  tunisPointParameteriNV(GLenum pname, GLint param) { tunisGL.tunisPointParameteriNV(pname, param); }
#define glPointParameteriNV tunisPointParameteriNV
TUNIS_FORCE_INLINE void  tunisPointParameteriv(GLenum pname, const GLint * params) { tunisGL.tunisPointParameteriv(pname, params); }
#define glPointParameteriv tunisPointParameteriv
TUNIS_FORCE_INLINE void  tunisPointParameterivNV(GLenum pname, const GLint * params) { tunisGL.tunisPointParameterivNV(pname, params); }
#define glPointParameterivNV tunisPointParameterivNV
TUNIS_FORCE_INLINE void  tunisPointParameterx(GLenum pname, GLfixed param) { tunisGL.tunisPointParameterx(pname, param); }
#define glPointParameterx tunisPointParameterx
TUNIS_FORCE_INLINE void  tunisPointParameterxOES(GLenum pname, GLfixed param) { tunisGL.tunisPointParameterxOES(pname, param); }
#define glPointParameterxOES tunisPointParameterxOES
TUNIS_FORCE_INLINE void  tunisPointParameterxv(GLenum pname, const GLfixed * params) { tunisGL.tunisPointParameterxv(pname, params); }
#define glPointParameterxv tunisPointParameterxv
TUNIS_FORCE_INLINE void  tunisPointParameterxvOES(GLenum pname, const GLfixed * params) { tunisGL.tunisPointParameterxvOES(pname, params); }
#define glPointParameterxvOES tunisPointParameterxvOES
TUNIS_FORCE_INLINE void  tunisPointSize(GLfloat size) { tunisGL.tunisPointSize(size); }
#define glPointSize tunisPointSize
TUNIS_FORCE_INLINE void  tunisPointSizePointerOES(GLenum type, GLsizei stride, const void * pointer) { tunisGL.tunisPointSizePointerOES(type, stride, pointer); }
#define glPointSizePointerOES tunisPointSizePointerOES
TUNIS_FORCE_INLINE void  tunisPointSizex(GLfixed size) { tunisGL.tunisPointSizex(size); }
#define glPointSizex tunisPointSizex
TUNIS_FORCE_INLINE void  tunisPointSizexOES(GLfixed size) { tunisGL.tunisPointSizexOES(size); }
#define glPointSizexOES tunisPointSizexOES
TUNIS_FORCE_INLINE GLint tunisPollAsyncSGIX(GLuint * markerp) { return tunisGL.tunisPollAsyncSGIX(markerp); }
#define glPollAsyncSGIX tunisPollAsyncSGIX
TUNIS_FORCE_INLINE GLint tunisPollInstrumentsSGIX(GLint * marker_p) { return tunisGL.tunisPollInstrumentsSGIX(marker_p); }
#define glPollInstrumentsSGIX tunisPollInstrumentsSGIX
TUNIS_FORCE_INLINE void  tunisPolygonMode(GLenum face, GLenum mode) { tunisGL.tunisPolygonMode(face, mode); }
#define glPolygonMode tunisPolygonMode
TUNIS_FORCE_INLINE void  tunisPolygonModeNV(GLenum face, GLenum mode) { tunisGL.tunisPolygonModeNV(face, mode); }
#define glPolygonModeNV tunisPolygonModeNV
TUNIS_FORCE_INLINE void  tunisPolygonOffset(GLfloat factor, GLfloat units) { tunisGL.tunisPolygonOffset(factor, units); }
#define glPolygonOffset tunisPolygonOffset
TUNIS_FORCE_INLINE void  tunisPolygonOffsetClamp(GLfloat factor, GLfloat units, GLfloat clamp) { tunisGL.tunisPolygonOffsetClamp(factor, units, clamp); }
#define glPolygonOffsetClamp tunisPolygonOffsetClamp
TUNIS_FORCE_INLINE void  tunisPolygonOffsetClampEXT(GLfloat factor, GLfloat units, GLfloat clamp) { tunisGL.tunisPolygonOffsetClampEXT(factor, units, clamp); }
#define glPolygonOffsetClampEXT tunisPolygonOffsetClampEXT
TUNIS_FORCE_INLINE void  tunisPolygonOffsetEXT(GLfloat factor, GLfloat bias) { tunisGL.tunisPolygonOffsetEXT(factor, bias); }
#define glPolygonOffsetEXT tunisPolygonOffsetEXT
TUNIS_FORCE_INLINE void  tunisPolygonOffsetx(GLfixed factor, GLfixed units) { tunisGL.tunisPolygonOffsetx(factor, units); }
#define glPolygonOffsetx tunisPolygonOffsetx
TUNIS_FORCE_INLINE void  tunisPolygonOffsetxOES(GLfixed factor, GLfixed units) { tunisGL.tunisPolygonOffsetxOES(factor, units); }
#define glPolygonOffsetxOES tunisPolygonOffsetxOES
TUNIS_FORCE_INLINE void  tunisPolygonStipple(const GLubyte * mask) { tunisGL.tunisPolygonStipple(mask); }
#define glPolygonStipple tunisPolygonStipple
TUNIS_FORCE_INLINE void  tunisPopAttrib(void) { tunisGL.tunisPopAttrib(); }
#define glPopAttrib tunisPopAttrib
TUNIS_FORCE_INLINE void  tunisPopClientAttrib(void) { tunisGL.tunisPopClientAttrib(); }
#define glPopClientAttrib tunisPopClientAttrib
TUNIS_FORCE_INLINE void  tunisPopDebugGroup(void) { tunisGL.tunisPopDebugGroup(); }
#define glPopDebugGroup tunisPopDebugGroup
TUNIS_FORCE_INLINE void  tunisPopDebugGroupKHR(void) { tunisGL.tunisPopDebugGroupKHR(); }
#define glPopDebugGroupKHR tunisPopDebugGroupKHR
TUNIS_FORCE_INLINE void  tunisPopGroupMarkerEXT(void) { tunisGL.tunisPopGroupMarkerEXT(); }
#define glPopGroupMarkerEXT tunisPopGroupMarkerEXT
TUNIS_FORCE_INLINE void  tunisPopMatrix(void) { tunisGL.tunisPopMatrix(); }
#define glPopMatrix tunisPopMatrix
TUNIS_FORCE_INLINE void  tunisPopName(void) { tunisGL.tunisPopName(); }
#define glPopName tunisPopName
TUNIS_FORCE_INLINE void  tunisPresentFrameDualFillNV(GLuint video_slot, GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLenum target1, GLuint fill1, GLenum target2, GLuint fill2, GLenum target3, GLuint fill3) { tunisGL.tunisPresentFrameDualFillNV(video_slot, minPresentTime, beginPresentTimeId, presentDurationId, type, target0, fill0, target1, fill1, target2, fill2, target3, fill3); }
#define glPresentFrameDualFillNV tunisPresentFrameDualFillNV
TUNIS_FORCE_INLINE void  tunisPresentFrameKeyedNV(GLuint video_slot, GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLuint key0, GLenum target1, GLuint fill1, GLuint key1) { tunisGL.tunisPresentFrameKeyedNV(video_slot, minPresentTime, beginPresentTimeId, presentDurationId, type, target0, fill0, key0, target1, fill1, key1); }
#define glPresentFrameKeyedNV tunisPresentFrameKeyedNV
TUNIS_FORCE_INLINE void  tunisPrimitiveBoundingBox(GLfloat minX, GLfloat minY, GLfloat minZ, GLfloat minW, GLfloat maxX, GLfloat maxY, GLfloat maxZ, GLfloat maxW) { tunisGL.tunisPrimitiveBoundingBox(minX, minY, minZ, minW, maxX, maxY, maxZ, maxW); }
#define glPrimitiveBoundingBox tunisPrimitiveBoundingBox
TUNIS_FORCE_INLINE void  tunisPrimitiveBoundingBoxARB(GLfloat minX, GLfloat minY, GLfloat minZ, GLfloat minW, GLfloat maxX, GLfloat maxY, GLfloat maxZ, GLfloat maxW) { tunisGL.tunisPrimitiveBoundingBoxARB(minX, minY, minZ, minW, maxX, maxY, maxZ, maxW); }
#define glPrimitiveBoundingBoxARB tunisPrimitiveBoundingBoxARB
TUNIS_FORCE_INLINE void  tunisPrimitiveBoundingBoxEXT(GLfloat minX, GLfloat minY, GLfloat minZ, GLfloat minW, GLfloat maxX, GLfloat maxY, GLfloat maxZ, GLfloat maxW) { tunisGL.tunisPrimitiveBoundingBoxEXT(minX, minY, minZ, minW, maxX, maxY, maxZ, maxW); }
#define glPrimitiveBoundingBoxEXT tunisPrimitiveBoundingBoxEXT
TUNIS_FORCE_INLINE void  tunisPrimitiveBoundingBoxOES(GLfloat minX, GLfloat minY, GLfloat minZ, GLfloat minW, GLfloat maxX, GLfloat maxY, GLfloat maxZ, GLfloat maxW) { tunisGL.tunisPrimitiveBoundingBoxOES(minX, minY, minZ, minW, maxX, maxY, maxZ, maxW); }
#define glPrimitiveBoundingBoxOES tunisPrimitiveBoundingBoxOES
TUNIS_FORCE_INLINE void  tunisPrimitiveRestartIndex(GLuint index) { tunisGL.tunisPrimitiveRestartIndex(index); }
#define glPrimitiveRestartIndex tunisPrimitiveRestartIndex
TUNIS_FORCE_INLINE void  tunisPrimitiveRestartIndexNV(GLuint index) { tunisGL.tunisPrimitiveRestartIndexNV(index); }
#define glPrimitiveRestartIndexNV tunisPrimitiveRestartIndexNV
TUNIS_FORCE_INLINE void  tunisPrimitiveRestartNV(void) { tunisGL.tunisPrimitiveRestartNV(); }
#define glPrimitiveRestartNV tunisPrimitiveRestartNV
TUNIS_FORCE_INLINE void  tunisPrioritizeTextures(GLsizei n, const GLuint * textures, const GLfloat * priorities) { tunisGL.tunisPrioritizeTextures(n, textures, priorities); }
#define glPrioritizeTextures tunisPrioritizeTextures
TUNIS_FORCE_INLINE void  tunisPrioritizeTexturesEXT(GLsizei n, const GLuint * textures, const GLclampf * priorities) { tunisGL.tunisPrioritizeTexturesEXT(n, textures, priorities); }
#define glPrioritizeTexturesEXT tunisPrioritizeTexturesEXT
TUNIS_FORCE_INLINE void  tunisPrioritizeTexturesxOES(GLsizei n, const GLuint * textures, const GLfixed * priorities) { tunisGL.tunisPrioritizeTexturesxOES(n, textures, priorities); }
#define glPrioritizeTexturesxOES tunisPrioritizeTexturesxOES
TUNIS_FORCE_INLINE void  tunisProgramBinary(GLuint program, GLenum binaryFormat, const void * binary, GLsizei length) { tunisGL.tunisProgramBinary(program, binaryFormat, binary, length); }
#define glProgramBinary tunisProgramBinary
TUNIS_FORCE_INLINE void  tunisProgramBinaryOES(GLuint program, GLenum binaryFormat, const void * binary, GLint length) { tunisGL.tunisProgramBinaryOES(program, binaryFormat, binary, length); }
#define glProgramBinaryOES tunisProgramBinaryOES
TUNIS_FORCE_INLINE void  tunisProgramBufferParametersIivNV(GLenum target, GLuint bindingIndex, GLuint wordIndex, GLsizei count, const GLint * params) { tunisGL.tunisProgramBufferParametersIivNV(target, bindingIndex, wordIndex, count, params); }
#define glProgramBufferParametersIivNV tunisProgramBufferParametersIivNV
TUNIS_FORCE_INLINE void  tunisProgramBufferParametersIuivNV(GLenum target, GLuint bindingIndex, GLuint wordIndex, GLsizei count, const GLuint * params) { tunisGL.tunisProgramBufferParametersIuivNV(target, bindingIndex, wordIndex, count, params); }
#define glProgramBufferParametersIuivNV tunisProgramBufferParametersIuivNV
TUNIS_FORCE_INLINE void  tunisProgramBufferParametersfvNV(GLenum target, GLuint bindingIndex, GLuint wordIndex, GLsizei count, const GLfloat * params) { tunisGL.tunisProgramBufferParametersfvNV(target, bindingIndex, wordIndex, count, params); }
#define glProgramBufferParametersfvNV tunisProgramBufferParametersfvNV
TUNIS_FORCE_INLINE void  tunisProgramEnvParameter4dARB(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) { tunisGL.tunisProgramEnvParameter4dARB(target, index, x, y, z, w); }
#define glProgramEnvParameter4dARB tunisProgramEnvParameter4dARB
TUNIS_FORCE_INLINE void  tunisProgramEnvParameter4dvARB(GLenum target, GLuint index, const GLdouble * params) { tunisGL.tunisProgramEnvParameter4dvARB(target, index, params); }
#define glProgramEnvParameter4dvARB tunisProgramEnvParameter4dvARB
TUNIS_FORCE_INLINE void  tunisProgramEnvParameter4fARB(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w) { tunisGL.tunisProgramEnvParameter4fARB(target, index, x, y, z, w); }
#define glProgramEnvParameter4fARB tunisProgramEnvParameter4fARB
TUNIS_FORCE_INLINE void  tunisProgramEnvParameter4fvARB(GLenum target, GLuint index, const GLfloat * params) { tunisGL.tunisProgramEnvParameter4fvARB(target, index, params); }
#define glProgramEnvParameter4fvARB tunisProgramEnvParameter4fvARB
TUNIS_FORCE_INLINE void  tunisProgramEnvParameterI4iNV(GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w) { tunisGL.tunisProgramEnvParameterI4iNV(target, index, x, y, z, w); }
#define glProgramEnvParameterI4iNV tunisProgramEnvParameterI4iNV
TUNIS_FORCE_INLINE void  tunisProgramEnvParameterI4ivNV(GLenum target, GLuint index, const GLint * params) { tunisGL.tunisProgramEnvParameterI4ivNV(target, index, params); }
#define glProgramEnvParameterI4ivNV tunisProgramEnvParameterI4ivNV
TUNIS_FORCE_INLINE void  tunisProgramEnvParameterI4uiNV(GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w) { tunisGL.tunisProgramEnvParameterI4uiNV(target, index, x, y, z, w); }
#define glProgramEnvParameterI4uiNV tunisProgramEnvParameterI4uiNV
TUNIS_FORCE_INLINE void  tunisProgramEnvParameterI4uivNV(GLenum target, GLuint index, const GLuint * params) { tunisGL.tunisProgramEnvParameterI4uivNV(target, index, params); }
#define glProgramEnvParameterI4uivNV tunisProgramEnvParameterI4uivNV
TUNIS_FORCE_INLINE void  tunisProgramEnvParameters4fvEXT(GLenum target, GLuint index, GLsizei count, const GLfloat * params) { tunisGL.tunisProgramEnvParameters4fvEXT(target, index, count, params); }
#define glProgramEnvParameters4fvEXT tunisProgramEnvParameters4fvEXT
TUNIS_FORCE_INLINE void  tunisProgramEnvParametersI4ivNV(GLenum target, GLuint index, GLsizei count, const GLint * params) { tunisGL.tunisProgramEnvParametersI4ivNV(target, index, count, params); }
#define glProgramEnvParametersI4ivNV tunisProgramEnvParametersI4ivNV
TUNIS_FORCE_INLINE void  tunisProgramEnvParametersI4uivNV(GLenum target, GLuint index, GLsizei count, const GLuint * params) { tunisGL.tunisProgramEnvParametersI4uivNV(target, index, count, params); }
#define glProgramEnvParametersI4uivNV tunisProgramEnvParametersI4uivNV
TUNIS_FORCE_INLINE void  tunisProgramLocalParameter4dARB(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) { tunisGL.tunisProgramLocalParameter4dARB(target, index, x, y, z, w); }
#define glProgramLocalParameter4dARB tunisProgramLocalParameter4dARB
TUNIS_FORCE_INLINE void  tunisProgramLocalParameter4dvARB(GLenum target, GLuint index, const GLdouble * params) { tunisGL.tunisProgramLocalParameter4dvARB(target, index, params); }
#define glProgramLocalParameter4dvARB tunisProgramLocalParameter4dvARB
TUNIS_FORCE_INLINE void  tunisProgramLocalParameter4fARB(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w) { tunisGL.tunisProgramLocalParameter4fARB(target, index, x, y, z, w); }
#define glProgramLocalParameter4fARB tunisProgramLocalParameter4fARB
TUNIS_FORCE_INLINE void  tunisProgramLocalParameter4fvARB(GLenum target, GLuint index, const GLfloat * params) { tunisGL.tunisProgramLocalParameter4fvARB(target, index, params); }
#define glProgramLocalParameter4fvARB tunisProgramLocalParameter4fvARB
TUNIS_FORCE_INLINE void  tunisProgramLocalParameterI4iNV(GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w) { tunisGL.tunisProgramLocalParameterI4iNV(target, index, x, y, z, w); }
#define glProgramLocalParameterI4iNV tunisProgramLocalParameterI4iNV
TUNIS_FORCE_INLINE void  tunisProgramLocalParameterI4ivNV(GLenum target, GLuint index, const GLint * params) { tunisGL.tunisProgramLocalParameterI4ivNV(target, index, params); }
#define glProgramLocalParameterI4ivNV tunisProgramLocalParameterI4ivNV
TUNIS_FORCE_INLINE void  tunisProgramLocalParameterI4uiNV(GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w) { tunisGL.tunisProgramLocalParameterI4uiNV(target, index, x, y, z, w); }
#define glProgramLocalParameterI4uiNV tunisProgramLocalParameterI4uiNV
TUNIS_FORCE_INLINE void  tunisProgramLocalParameterI4uivNV(GLenum target, GLuint index, const GLuint * params) { tunisGL.tunisProgramLocalParameterI4uivNV(target, index, params); }
#define glProgramLocalParameterI4uivNV tunisProgramLocalParameterI4uivNV
TUNIS_FORCE_INLINE void  tunisProgramLocalParameters4fvEXT(GLenum target, GLuint index, GLsizei count, const GLfloat * params) { tunisGL.tunisProgramLocalParameters4fvEXT(target, index, count, params); }
#define glProgramLocalParameters4fvEXT tunisProgramLocalParameters4fvEXT
TUNIS_FORCE_INLINE void  tunisProgramLocalParametersI4ivNV(GLenum target, GLuint index, GLsizei count, const GLint * params) { tunisGL.tunisProgramLocalParametersI4ivNV(target, index, count, params); }
#define glProgramLocalParametersI4ivNV tunisProgramLocalParametersI4ivNV
TUNIS_FORCE_INLINE void  tunisProgramLocalParametersI4uivNV(GLenum target, GLuint index, GLsizei count, const GLuint * params) { tunisGL.tunisProgramLocalParametersI4uivNV(target, index, count, params); }
#define glProgramLocalParametersI4uivNV tunisProgramLocalParametersI4uivNV
TUNIS_FORCE_INLINE void  tunisProgramNamedParameter4dNV(GLuint id, GLsizei len, const GLubyte * name, GLdouble x, GLdouble y, GLdouble z, GLdouble w) { tunisGL.tunisProgramNamedParameter4dNV(id, len, name, x, y, z, w); }
#define glProgramNamedParameter4dNV tunisProgramNamedParameter4dNV
TUNIS_FORCE_INLINE void  tunisProgramNamedParameter4dvNV(GLuint id, GLsizei len, const GLubyte * name, const GLdouble * v) { tunisGL.tunisProgramNamedParameter4dvNV(id, len, name, v); }
#define glProgramNamedParameter4dvNV tunisProgramNamedParameter4dvNV
TUNIS_FORCE_INLINE void  tunisProgramNamedParameter4fNV(GLuint id, GLsizei len, const GLubyte * name, GLfloat x, GLfloat y, GLfloat z, GLfloat w) { tunisGL.tunisProgramNamedParameter4fNV(id, len, name, x, y, z, w); }
#define glProgramNamedParameter4fNV tunisProgramNamedParameter4fNV
TUNIS_FORCE_INLINE void  tunisProgramNamedParameter4fvNV(GLuint id, GLsizei len, const GLubyte * name, const GLfloat * v) { tunisGL.tunisProgramNamedParameter4fvNV(id, len, name, v); }
#define glProgramNamedParameter4fvNV tunisProgramNamedParameter4fvNV
TUNIS_FORCE_INLINE void  tunisProgramParameter4dNV(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) { tunisGL.tunisProgramParameter4dNV(target, index, x, y, z, w); }
#define glProgramParameter4dNV tunisProgramParameter4dNV
TUNIS_FORCE_INLINE void  tunisProgramParameter4dvNV(GLenum target, GLuint index, const GLdouble * v) { tunisGL.tunisProgramParameter4dvNV(target, index, v); }
#define glProgramParameter4dvNV tunisProgramParameter4dvNV
TUNIS_FORCE_INLINE void  tunisProgramParameter4fNV(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w) { tunisGL.tunisProgramParameter4fNV(target, index, x, y, z, w); }
#define glProgramParameter4fNV tunisProgramParameter4fNV
TUNIS_FORCE_INLINE void  tunisProgramParameter4fvNV(GLenum target, GLuint index, const GLfloat * v) { tunisGL.tunisProgramParameter4fvNV(target, index, v); }
#define glProgramParameter4fvNV tunisProgramParameter4fvNV
TUNIS_FORCE_INLINE void  tunisProgramParameteri(GLuint program, GLenum pname, GLint value) { tunisGL.tunisProgramParameteri(program, pname, value); }
#define glProgramParameteri tunisProgramParameteri
TUNIS_FORCE_INLINE void  tunisProgramParameteriARB(GLuint program, GLenum pname, GLint value) { tunisGL.tunisProgramParameteriARB(program, pname, value); }
#define glProgramParameteriARB tunisProgramParameteriARB
TUNIS_FORCE_INLINE void  tunisProgramParameteriEXT(GLuint program, GLenum pname, GLint value) { tunisGL.tunisProgramParameteriEXT(program, pname, value); }
#define glProgramParameteriEXT tunisProgramParameteriEXT
TUNIS_FORCE_INLINE void  tunisProgramParameters4dvNV(GLenum target, GLuint index, GLsizei count, const GLdouble * v) { tunisGL.tunisProgramParameters4dvNV(target, index, count, v); }
#define glProgramParameters4dvNV tunisProgramParameters4dvNV
TUNIS_FORCE_INLINE void  tunisProgramParameters4fvNV(GLenum target, GLuint index, GLsizei count, const GLfloat * v) { tunisGL.tunisProgramParameters4fvNV(target, index, count, v); }
#define glProgramParameters4fvNV tunisProgramParameters4fvNV
TUNIS_FORCE_INLINE void  tunisProgramPathFragmentInputGenNV(GLuint program, GLint location, GLenum genMode, GLint components, const GLfloat * coeffs) { tunisGL.tunisProgramPathFragmentInputGenNV(program, location, genMode, components, coeffs); }
#define glProgramPathFragmentInputGenNV tunisProgramPathFragmentInputGenNV
TUNIS_FORCE_INLINE void  tunisProgramStringARB(GLenum target, GLenum format, GLsizei len, const void * string) { tunisGL.tunisProgramStringARB(target, format, len, string); }
#define glProgramStringARB tunisProgramStringARB
TUNIS_FORCE_INLINE void  tunisProgramSubroutineParametersuivNV(GLenum target, GLsizei count, const GLuint * params) { tunisGL.tunisProgramSubroutineParametersuivNV(target, count, params); }
#define glProgramSubroutineParametersuivNV tunisProgramSubroutineParametersuivNV
TUNIS_FORCE_INLINE void  tunisProgramUniform1d(GLuint program, GLint location, GLdouble v0) { tunisGL.tunisProgramUniform1d(program, location, v0); }
#define glProgramUniform1d tunisProgramUniform1d
TUNIS_FORCE_INLINE void  tunisProgramUniform1dEXT(GLuint program, GLint location, GLdouble x) { tunisGL.tunisProgramUniform1dEXT(program, location, x); }
#define glProgramUniform1dEXT tunisProgramUniform1dEXT
TUNIS_FORCE_INLINE void  tunisProgramUniform1dv(GLuint program, GLint location, GLsizei count, const GLdouble * value) { tunisGL.tunisProgramUniform1dv(program, location, count, value); }
#define glProgramUniform1dv tunisProgramUniform1dv
TUNIS_FORCE_INLINE void  tunisProgramUniform1dvEXT(GLuint program, GLint location, GLsizei count, const GLdouble * value) { tunisGL.tunisProgramUniform1dvEXT(program, location, count, value); }
#define glProgramUniform1dvEXT tunisProgramUniform1dvEXT
TUNIS_FORCE_INLINE void  tunisProgramUniform1f(GLuint program, GLint location, GLfloat v0) { tunisGL.tunisProgramUniform1f(program, location, v0); }
#define glProgramUniform1f tunisProgramUniform1f
TUNIS_FORCE_INLINE void  tunisProgramUniform1fEXT(GLuint program, GLint location, GLfloat v0) { tunisGL.tunisProgramUniform1fEXT(program, location, v0); }
#define glProgramUniform1fEXT tunisProgramUniform1fEXT
TUNIS_FORCE_INLINE void  tunisProgramUniform1fv(GLuint program, GLint location, GLsizei count, const GLfloat * value) { tunisGL.tunisProgramUniform1fv(program, location, count, value); }
#define glProgramUniform1fv tunisProgramUniform1fv
TUNIS_FORCE_INLINE void  tunisProgramUniform1fvEXT(GLuint program, GLint location, GLsizei count, const GLfloat * value) { tunisGL.tunisProgramUniform1fvEXT(program, location, count, value); }
#define glProgramUniform1fvEXT tunisProgramUniform1fvEXT
TUNIS_FORCE_INLINE void  tunisProgramUniform1i(GLuint program, GLint location, GLint v0) { tunisGL.tunisProgramUniform1i(program, location, v0); }
#define glProgramUniform1i tunisProgramUniform1i
TUNIS_FORCE_INLINE void  tunisProgramUniform1i64ARB(GLuint program, GLint location, GLint64 x) { tunisGL.tunisProgramUniform1i64ARB(program, location, x); }
#define glProgramUniform1i64ARB tunisProgramUniform1i64ARB
TUNIS_FORCE_INLINE void  tunisProgramUniform1i64NV(GLuint program, GLint location, GLint64EXT x) { tunisGL.tunisProgramUniform1i64NV(program, location, x); }
#define glProgramUniform1i64NV tunisProgramUniform1i64NV
TUNIS_FORCE_INLINE void  tunisProgramUniform1i64vARB(GLuint program, GLint location, GLsizei count, const GLint64 * value) { tunisGL.tunisProgramUniform1i64vARB(program, location, count, value); }
#define glProgramUniform1i64vARB tunisProgramUniform1i64vARB
TUNIS_FORCE_INLINE void  tunisProgramUniform1i64vNV(GLuint program, GLint location, GLsizei count, const GLint64EXT * value) { tunisGL.tunisProgramUniform1i64vNV(program, location, count, value); }
#define glProgramUniform1i64vNV tunisProgramUniform1i64vNV
TUNIS_FORCE_INLINE void  tunisProgramUniform1iEXT(GLuint program, GLint location, GLint v0) { tunisGL.tunisProgramUniform1iEXT(program, location, v0); }
#define glProgramUniform1iEXT tunisProgramUniform1iEXT
TUNIS_FORCE_INLINE void  tunisProgramUniform1iv(GLuint program, GLint location, GLsizei count, const GLint * value) { tunisGL.tunisProgramUniform1iv(program, location, count, value); }
#define glProgramUniform1iv tunisProgramUniform1iv
TUNIS_FORCE_INLINE void  tunisProgramUniform1ivEXT(GLuint program, GLint location, GLsizei count, const GLint * value) { tunisGL.tunisProgramUniform1ivEXT(program, location, count, value); }
#define glProgramUniform1ivEXT tunisProgramUniform1ivEXT
TUNIS_FORCE_INLINE void  tunisProgramUniform1ui(GLuint program, GLint location, GLuint v0) { tunisGL.tunisProgramUniform1ui(program, location, v0); }
#define glProgramUniform1ui tunisProgramUniform1ui
TUNIS_FORCE_INLINE void  tunisProgramUniform1ui64ARB(GLuint program, GLint location, GLuint64 x) { tunisGL.tunisProgramUniform1ui64ARB(program, location, x); }
#define glProgramUniform1ui64ARB tunisProgramUniform1ui64ARB
TUNIS_FORCE_INLINE void  tunisProgramUniform1ui64NV(GLuint program, GLint location, GLuint64EXT x) { tunisGL.tunisProgramUniform1ui64NV(program, location, x); }
#define glProgramUniform1ui64NV tunisProgramUniform1ui64NV
TUNIS_FORCE_INLINE void  tunisProgramUniform1ui64vARB(GLuint program, GLint location, GLsizei count, const GLuint64 * value) { tunisGL.tunisProgramUniform1ui64vARB(program, location, count, value); }
#define glProgramUniform1ui64vARB tunisProgramUniform1ui64vARB
TUNIS_FORCE_INLINE void  tunisProgramUniform1ui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64EXT * value) { tunisGL.tunisProgramUniform1ui64vNV(program, location, count, value); }
#define glProgramUniform1ui64vNV tunisProgramUniform1ui64vNV
TUNIS_FORCE_INLINE void  tunisProgramUniform1uiEXT(GLuint program, GLint location, GLuint v0) { tunisGL.tunisProgramUniform1uiEXT(program, location, v0); }
#define glProgramUniform1uiEXT tunisProgramUniform1uiEXT
TUNIS_FORCE_INLINE void  tunisProgramUniform1uiv(GLuint program, GLint location, GLsizei count, const GLuint * value) { tunisGL.tunisProgramUniform1uiv(program, location, count, value); }
#define glProgramUniform1uiv tunisProgramUniform1uiv
TUNIS_FORCE_INLINE void  tunisProgramUniform1uivEXT(GLuint program, GLint location, GLsizei count, const GLuint * value) { tunisGL.tunisProgramUniform1uivEXT(program, location, count, value); }
#define glProgramUniform1uivEXT tunisProgramUniform1uivEXT
TUNIS_FORCE_INLINE void  tunisProgramUniform2d(GLuint program, GLint location, GLdouble v0, GLdouble v1) { tunisGL.tunisProgramUniform2d(program, location, v0, v1); }
#define glProgramUniform2d tunisProgramUniform2d
TUNIS_FORCE_INLINE void  tunisProgramUniform2dEXT(GLuint program, GLint location, GLdouble x, GLdouble y) { tunisGL.tunisProgramUniform2dEXT(program, location, x, y); }
#define glProgramUniform2dEXT tunisProgramUniform2dEXT
TUNIS_FORCE_INLINE void  tunisProgramUniform2dv(GLuint program, GLint location, GLsizei count, const GLdouble * value) { tunisGL.tunisProgramUniform2dv(program, location, count, value); }
#define glProgramUniform2dv tunisProgramUniform2dv
TUNIS_FORCE_INLINE void  tunisProgramUniform2dvEXT(GLuint program, GLint location, GLsizei count, const GLdouble * value) { tunisGL.tunisProgramUniform2dvEXT(program, location, count, value); }
#define glProgramUniform2dvEXT tunisProgramUniform2dvEXT
TUNIS_FORCE_INLINE void  tunisProgramUniform2f(GLuint program, GLint location, GLfloat v0, GLfloat v1) { tunisGL.tunisProgramUniform2f(program, location, v0, v1); }
#define glProgramUniform2f tunisProgramUniform2f
TUNIS_FORCE_INLINE void  tunisProgramUniform2fEXT(GLuint program, GLint location, GLfloat v0, GLfloat v1) { tunisGL.tunisProgramUniform2fEXT(program, location, v0, v1); }
#define glProgramUniform2fEXT tunisProgramUniform2fEXT
TUNIS_FORCE_INLINE void  tunisProgramUniform2fv(GLuint program, GLint location, GLsizei count, const GLfloat * value) { tunisGL.tunisProgramUniform2fv(program, location, count, value); }
#define glProgramUniform2fv tunisProgramUniform2fv
TUNIS_FORCE_INLINE void  tunisProgramUniform2fvEXT(GLuint program, GLint location, GLsizei count, const GLfloat * value) { tunisGL.tunisProgramUniform2fvEXT(program, location, count, value); }
#define glProgramUniform2fvEXT tunisProgramUniform2fvEXT
TUNIS_FORCE_INLINE void  tunisProgramUniform2i(GLuint program, GLint location, GLint v0, GLint v1) { tunisGL.tunisProgramUniform2i(program, location, v0, v1); }
#define glProgramUniform2i tunisProgramUniform2i
TUNIS_FORCE_INLINE void  tunisProgramUniform2i64ARB(GLuint program, GLint location, GLint64 x, GLint64 y) { tunisGL.tunisProgramUniform2i64ARB(program, location, x, y); }
#define glProgramUniform2i64ARB tunisProgramUniform2i64ARB
TUNIS_FORCE_INLINE void  tunisProgramUniform2i64NV(GLuint program, GLint location, GLint64EXT x, GLint64EXT y) { tunisGL.tunisProgramUniform2i64NV(program, location, x, y); }
#define glProgramUniform2i64NV tunisProgramUniform2i64NV
TUNIS_FORCE_INLINE void  tunisProgramUniform2i64vARB(GLuint program, GLint location, GLsizei count, const GLint64 * value) { tunisGL.tunisProgramUniform2i64vARB(program, location, count, value); }
#define glProgramUniform2i64vARB tunisProgramUniform2i64vARB
TUNIS_FORCE_INLINE void  tunisProgramUniform2i64vNV(GLuint program, GLint location, GLsizei count, const GLint64EXT * value) { tunisGL.tunisProgramUniform2i64vNV(program, location, count, value); }
#define glProgramUniform2i64vNV tunisProgramUniform2i64vNV
TUNIS_FORCE_INLINE void  tunisProgramUniform2iEXT(GLuint program, GLint location, GLint v0, GLint v1) { tunisGL.tunisProgramUniform2iEXT(program, location, v0, v1); }
#define glProgramUniform2iEXT tunisProgramUniform2iEXT
TUNIS_FORCE_INLINE void  tunisProgramUniform2iv(GLuint program, GLint location, GLsizei count, const GLint * value) { tunisGL.tunisProgramUniform2iv(program, location, count, value); }
#define glProgramUniform2iv tunisProgramUniform2iv
TUNIS_FORCE_INLINE void  tunisProgramUniform2ivEXT(GLuint program, GLint location, GLsizei count, const GLint * value) { tunisGL.tunisProgramUniform2ivEXT(program, location, count, value); }
#define glProgramUniform2ivEXT tunisProgramUniform2ivEXT
TUNIS_FORCE_INLINE void  tunisProgramUniform2ui(GLuint program, GLint location, GLuint v0, GLuint v1) { tunisGL.tunisProgramUniform2ui(program, location, v0, v1); }
#define glProgramUniform2ui tunisProgramUniform2ui
TUNIS_FORCE_INLINE void  tunisProgramUniform2ui64ARB(GLuint program, GLint location, GLuint64 x, GLuint64 y) { tunisGL.tunisProgramUniform2ui64ARB(program, location, x, y); }
#define glProgramUniform2ui64ARB tunisProgramUniform2ui64ARB
TUNIS_FORCE_INLINE void  tunisProgramUniform2ui64NV(GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y) { tunisGL.tunisProgramUniform2ui64NV(program, location, x, y); }
#define glProgramUniform2ui64NV tunisProgramUniform2ui64NV
TUNIS_FORCE_INLINE void  tunisProgramUniform2ui64vARB(GLuint program, GLint location, GLsizei count, const GLuint64 * value) { tunisGL.tunisProgramUniform2ui64vARB(program, location, count, value); }
#define glProgramUniform2ui64vARB tunisProgramUniform2ui64vARB
TUNIS_FORCE_INLINE void  tunisProgramUniform2ui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64EXT * value) { tunisGL.tunisProgramUniform2ui64vNV(program, location, count, value); }
#define glProgramUniform2ui64vNV tunisProgramUniform2ui64vNV
TUNIS_FORCE_INLINE void  tunisProgramUniform2uiEXT(GLuint program, GLint location, GLuint v0, GLuint v1) { tunisGL.tunisProgramUniform2uiEXT(program, location, v0, v1); }
#define glProgramUniform2uiEXT tunisProgramUniform2uiEXT
TUNIS_FORCE_INLINE void  tunisProgramUniform2uiv(GLuint program, GLint location, GLsizei count, const GLuint * value) { tunisGL.tunisProgramUniform2uiv(program, location, count, value); }
#define glProgramUniform2uiv tunisProgramUniform2uiv
TUNIS_FORCE_INLINE void  tunisProgramUniform2uivEXT(GLuint program, GLint location, GLsizei count, const GLuint * value) { tunisGL.tunisProgramUniform2uivEXT(program, location, count, value); }
#define glProgramUniform2uivEXT tunisProgramUniform2uivEXT
TUNIS_FORCE_INLINE void  tunisProgramUniform3d(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2) { tunisGL.tunisProgramUniform3d(program, location, v0, v1, v2); }
#define glProgramUniform3d tunisProgramUniform3d
TUNIS_FORCE_INLINE void  tunisProgramUniform3dEXT(GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z) { tunisGL.tunisProgramUniform3dEXT(program, location, x, y, z); }
#define glProgramUniform3dEXT tunisProgramUniform3dEXT
TUNIS_FORCE_INLINE void  tunisProgramUniform3dv(GLuint program, GLint location, GLsizei count, const GLdouble * value) { tunisGL.tunisProgramUniform3dv(program, location, count, value); }
#define glProgramUniform3dv tunisProgramUniform3dv
TUNIS_FORCE_INLINE void  tunisProgramUniform3dvEXT(GLuint program, GLint location, GLsizei count, const GLdouble * value) { tunisGL.tunisProgramUniform3dvEXT(program, location, count, value); }
#define glProgramUniform3dvEXT tunisProgramUniform3dvEXT
TUNIS_FORCE_INLINE void  tunisProgramUniform3f(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2) { tunisGL.tunisProgramUniform3f(program, location, v0, v1, v2); }
#define glProgramUniform3f tunisProgramUniform3f
TUNIS_FORCE_INLINE void  tunisProgramUniform3fEXT(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2) { tunisGL.tunisProgramUniform3fEXT(program, location, v0, v1, v2); }
#define glProgramUniform3fEXT tunisProgramUniform3fEXT
TUNIS_FORCE_INLINE void  tunisProgramUniform3fv(GLuint program, GLint location, GLsizei count, const GLfloat * value) { tunisGL.tunisProgramUniform3fv(program, location, count, value); }
#define glProgramUniform3fv tunisProgramUniform3fv
TUNIS_FORCE_INLINE void  tunisProgramUniform3fvEXT(GLuint program, GLint location, GLsizei count, const GLfloat * value) { tunisGL.tunisProgramUniform3fvEXT(program, location, count, value); }
#define glProgramUniform3fvEXT tunisProgramUniform3fvEXT
TUNIS_FORCE_INLINE void  tunisProgramUniform3i(GLuint program, GLint location, GLint v0, GLint v1, GLint v2) { tunisGL.tunisProgramUniform3i(program, location, v0, v1, v2); }
#define glProgramUniform3i tunisProgramUniform3i
TUNIS_FORCE_INLINE void  tunisProgramUniform3i64ARB(GLuint program, GLint location, GLint64 x, GLint64 y, GLint64 z) { tunisGL.tunisProgramUniform3i64ARB(program, location, x, y, z); }
#define glProgramUniform3i64ARB tunisProgramUniform3i64ARB
TUNIS_FORCE_INLINE void  tunisProgramUniform3i64NV(GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z) { tunisGL.tunisProgramUniform3i64NV(program, location, x, y, z); }
#define glProgramUniform3i64NV tunisProgramUniform3i64NV
TUNIS_FORCE_INLINE void  tunisProgramUniform3i64vARB(GLuint program, GLint location, GLsizei count, const GLint64 * value) { tunisGL.tunisProgramUniform3i64vARB(program, location, count, value); }
#define glProgramUniform3i64vARB tunisProgramUniform3i64vARB
TUNIS_FORCE_INLINE void  tunisProgramUniform3i64vNV(GLuint program, GLint location, GLsizei count, const GLint64EXT * value) { tunisGL.tunisProgramUniform3i64vNV(program, location, count, value); }
#define glProgramUniform3i64vNV tunisProgramUniform3i64vNV
TUNIS_FORCE_INLINE void  tunisProgramUniform3iEXT(GLuint program, GLint location, GLint v0, GLint v1, GLint v2) { tunisGL.tunisProgramUniform3iEXT(program, location, v0, v1, v2); }
#define glProgramUniform3iEXT tunisProgramUniform3iEXT
TUNIS_FORCE_INLINE void  tunisProgramUniform3iv(GLuint program, GLint location, GLsizei count, const GLint * value) { tunisGL.tunisProgramUniform3iv(program, location, count, value); }
#define glProgramUniform3iv tunisProgramUniform3iv
TUNIS_FORCE_INLINE void  tunisProgramUniform3ivEXT(GLuint program, GLint location, GLsizei count, const GLint * value) { tunisGL.tunisProgramUniform3ivEXT(program, location, count, value); }
#define glProgramUniform3ivEXT tunisProgramUniform3ivEXT
TUNIS_FORCE_INLINE void  tunisProgramUniform3ui(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2) { tunisGL.tunisProgramUniform3ui(program, location, v0, v1, v2); }
#define glProgramUniform3ui tunisProgramUniform3ui
TUNIS_FORCE_INLINE void  tunisProgramUniform3ui64ARB(GLuint program, GLint location, GLuint64 x, GLuint64 y, GLuint64 z) { tunisGL.tunisProgramUniform3ui64ARB(program, location, x, y, z); }
#define glProgramUniform3ui64ARB tunisProgramUniform3ui64ARB
TUNIS_FORCE_INLINE void  tunisProgramUniform3ui64NV(GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z) { tunisGL.tunisProgramUniform3ui64NV(program, location, x, y, z); }
#define glProgramUniform3ui64NV tunisProgramUniform3ui64NV
TUNIS_FORCE_INLINE void  tunisProgramUniform3ui64vARB(GLuint program, GLint location, GLsizei count, const GLuint64 * value) { tunisGL.tunisProgramUniform3ui64vARB(program, location, count, value); }
#define glProgramUniform3ui64vARB tunisProgramUniform3ui64vARB
TUNIS_FORCE_INLINE void  tunisProgramUniform3ui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64EXT * value) { tunisGL.tunisProgramUniform3ui64vNV(program, location, count, value); }
#define glProgramUniform3ui64vNV tunisProgramUniform3ui64vNV
TUNIS_FORCE_INLINE void  tunisProgramUniform3uiEXT(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2) { tunisGL.tunisProgramUniform3uiEXT(program, location, v0, v1, v2); }
#define glProgramUniform3uiEXT tunisProgramUniform3uiEXT
TUNIS_FORCE_INLINE void  tunisProgramUniform3uiv(GLuint program, GLint location, GLsizei count, const GLuint * value) { tunisGL.tunisProgramUniform3uiv(program, location, count, value); }
#define glProgramUniform3uiv tunisProgramUniform3uiv
TUNIS_FORCE_INLINE void  tunisProgramUniform3uivEXT(GLuint program, GLint location, GLsizei count, const GLuint * value) { tunisGL.tunisProgramUniform3uivEXT(program, location, count, value); }
#define glProgramUniform3uivEXT tunisProgramUniform3uivEXT
TUNIS_FORCE_INLINE void  tunisProgramUniform4d(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2, GLdouble v3) { tunisGL.tunisProgramUniform4d(program, location, v0, v1, v2, v3); }
#define glProgramUniform4d tunisProgramUniform4d
TUNIS_FORCE_INLINE void  tunisProgramUniform4dEXT(GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w) { tunisGL.tunisProgramUniform4dEXT(program, location, x, y, z, w); }
#define glProgramUniform4dEXT tunisProgramUniform4dEXT
TUNIS_FORCE_INLINE void  tunisProgramUniform4dv(GLuint program, GLint location, GLsizei count, const GLdouble * value) { tunisGL.tunisProgramUniform4dv(program, location, count, value); }
#define glProgramUniform4dv tunisProgramUniform4dv
TUNIS_FORCE_INLINE void  tunisProgramUniform4dvEXT(GLuint program, GLint location, GLsizei count, const GLdouble * value) { tunisGL.tunisProgramUniform4dvEXT(program, location, count, value); }
#define glProgramUniform4dvEXT tunisProgramUniform4dvEXT
TUNIS_FORCE_INLINE void  tunisProgramUniform4f(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3) { tunisGL.tunisProgramUniform4f(program, location, v0, v1, v2, v3); }
#define glProgramUniform4f tunisProgramUniform4f
TUNIS_FORCE_INLINE void  tunisProgramUniform4fEXT(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3) { tunisGL.tunisProgramUniform4fEXT(program, location, v0, v1, v2, v3); }
#define glProgramUniform4fEXT tunisProgramUniform4fEXT
TUNIS_FORCE_INLINE void  tunisProgramUniform4fv(GLuint program, GLint location, GLsizei count, const GLfloat * value) { tunisGL.tunisProgramUniform4fv(program, location, count, value); }
#define glProgramUniform4fv tunisProgramUniform4fv
TUNIS_FORCE_INLINE void  tunisProgramUniform4fvEXT(GLuint program, GLint location, GLsizei count, const GLfloat * value) { tunisGL.tunisProgramUniform4fvEXT(program, location, count, value); }
#define glProgramUniform4fvEXT tunisProgramUniform4fvEXT
TUNIS_FORCE_INLINE void  tunisProgramUniform4i(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3) { tunisGL.tunisProgramUniform4i(program, location, v0, v1, v2, v3); }
#define glProgramUniform4i tunisProgramUniform4i
TUNIS_FORCE_INLINE void  tunisProgramUniform4i64ARB(GLuint program, GLint location, GLint64 x, GLint64 y, GLint64 z, GLint64 w) { tunisGL.tunisProgramUniform4i64ARB(program, location, x, y, z, w); }
#define glProgramUniform4i64ARB tunisProgramUniform4i64ARB
TUNIS_FORCE_INLINE void  tunisProgramUniform4i64NV(GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w) { tunisGL.tunisProgramUniform4i64NV(program, location, x, y, z, w); }
#define glProgramUniform4i64NV tunisProgramUniform4i64NV
TUNIS_FORCE_INLINE void  tunisProgramUniform4i64vARB(GLuint program, GLint location, GLsizei count, const GLint64 * value) { tunisGL.tunisProgramUniform4i64vARB(program, location, count, value); }
#define glProgramUniform4i64vARB tunisProgramUniform4i64vARB
TUNIS_FORCE_INLINE void  tunisProgramUniform4i64vNV(GLuint program, GLint location, GLsizei count, const GLint64EXT * value) { tunisGL.tunisProgramUniform4i64vNV(program, location, count, value); }
#define glProgramUniform4i64vNV tunisProgramUniform4i64vNV
TUNIS_FORCE_INLINE void  tunisProgramUniform4iEXT(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3) { tunisGL.tunisProgramUniform4iEXT(program, location, v0, v1, v2, v3); }
#define glProgramUniform4iEXT tunisProgramUniform4iEXT
TUNIS_FORCE_INLINE void  tunisProgramUniform4iv(GLuint program, GLint location, GLsizei count, const GLint * value) { tunisGL.tunisProgramUniform4iv(program, location, count, value); }
#define glProgramUniform4iv tunisProgramUniform4iv
TUNIS_FORCE_INLINE void  tunisProgramUniform4ivEXT(GLuint program, GLint location, GLsizei count, const GLint * value) { tunisGL.tunisProgramUniform4ivEXT(program, location, count, value); }
#define glProgramUniform4ivEXT tunisProgramUniform4ivEXT
TUNIS_FORCE_INLINE void  tunisProgramUniform4ui(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3) { tunisGL.tunisProgramUniform4ui(program, location, v0, v1, v2, v3); }
#define glProgramUniform4ui tunisProgramUniform4ui
TUNIS_FORCE_INLINE void  tunisProgramUniform4ui64ARB(GLuint program, GLint location, GLuint64 x, GLuint64 y, GLuint64 z, GLuint64 w) { tunisGL.tunisProgramUniform4ui64ARB(program, location, x, y, z, w); }
#define glProgramUniform4ui64ARB tunisProgramUniform4ui64ARB
TUNIS_FORCE_INLINE void  tunisProgramUniform4ui64NV(GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w) { tunisGL.tunisProgramUniform4ui64NV(program, location, x, y, z, w); }
#define glProgramUniform4ui64NV tunisProgramUniform4ui64NV
TUNIS_FORCE_INLINE void  tunisProgramUniform4ui64vARB(GLuint program, GLint location, GLsizei count, const GLuint64 * value) { tunisGL.tunisProgramUniform4ui64vARB(program, location, count, value); }
#define glProgramUniform4ui64vARB tunisProgramUniform4ui64vARB
TUNIS_FORCE_INLINE void  tunisProgramUniform4ui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64EXT * value) { tunisGL.tunisProgramUniform4ui64vNV(program, location, count, value); }
#define glProgramUniform4ui64vNV tunisProgramUniform4ui64vNV
TUNIS_FORCE_INLINE void  tunisProgramUniform4uiEXT(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3) { tunisGL.tunisProgramUniform4uiEXT(program, location, v0, v1, v2, v3); }
#define glProgramUniform4uiEXT tunisProgramUniform4uiEXT
TUNIS_FORCE_INLINE void  tunisProgramUniform4uiv(GLuint program, GLint location, GLsizei count, const GLuint * value) { tunisGL.tunisProgramUniform4uiv(program, location, count, value); }
#define glProgramUniform4uiv tunisProgramUniform4uiv
TUNIS_FORCE_INLINE void  tunisProgramUniform4uivEXT(GLuint program, GLint location, GLsizei count, const GLuint * value) { tunisGL.tunisProgramUniform4uivEXT(program, location, count, value); }
#define glProgramUniform4uivEXT tunisProgramUniform4uivEXT
TUNIS_FORCE_INLINE void  tunisProgramUniformHandleui64ARB(GLuint program, GLint location, GLuint64 value) { tunisGL.tunisProgramUniformHandleui64ARB(program, location, value); }
#define glProgramUniformHandleui64ARB tunisProgramUniformHandleui64ARB
TUNIS_FORCE_INLINE void  tunisProgramUniformHandleui64IMG(GLuint program, GLint location, GLuint64 value) { tunisGL.tunisProgramUniformHandleui64IMG(program, location, value); }
#define glProgramUniformHandleui64IMG tunisProgramUniformHandleui64IMG
TUNIS_FORCE_INLINE void  tunisProgramUniformHandleui64NV(GLuint program, GLint location, GLuint64 value) { tunisGL.tunisProgramUniformHandleui64NV(program, location, value); }
#define glProgramUniformHandleui64NV tunisProgramUniformHandleui64NV
TUNIS_FORCE_INLINE void  tunisProgramUniformHandleui64vARB(GLuint program, GLint location, GLsizei count, const GLuint64 * values) { tunisGL.tunisProgramUniformHandleui64vARB(program, location, count, values); }
#define glProgramUniformHandleui64vARB tunisProgramUniformHandleui64vARB
TUNIS_FORCE_INLINE void  tunisProgramUniformHandleui64vIMG(GLuint program, GLint location, GLsizei count, const GLuint64 * values) { tunisGL.tunisProgramUniformHandleui64vIMG(program, location, count, values); }
#define glProgramUniformHandleui64vIMG tunisProgramUniformHandleui64vIMG
TUNIS_FORCE_INLINE void  tunisProgramUniformHandleui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64 * values) { tunisGL.tunisProgramUniformHandleui64vNV(program, location, count, values); }
#define glProgramUniformHandleui64vNV tunisProgramUniformHandleui64vNV
TUNIS_FORCE_INLINE void  tunisProgramUniformMatrix2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { tunisGL.tunisProgramUniformMatrix2dv(program, location, count, transpose, value); }
#define glProgramUniformMatrix2dv tunisProgramUniformMatrix2dv
TUNIS_FORCE_INLINE void  tunisProgramUniformMatrix2dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { tunisGL.tunisProgramUniformMatrix2dvEXT(program, location, count, transpose, value); }
#define glProgramUniformMatrix2dvEXT tunisProgramUniformMatrix2dvEXT
TUNIS_FORCE_INLINE void  tunisProgramUniformMatrix2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { tunisGL.tunisProgramUniformMatrix2fv(program, location, count, transpose, value); }
#define glProgramUniformMatrix2fv tunisProgramUniformMatrix2fv
TUNIS_FORCE_INLINE void  tunisProgramUniformMatrix2fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { tunisGL.tunisProgramUniformMatrix2fvEXT(program, location, count, transpose, value); }
#define glProgramUniformMatrix2fvEXT tunisProgramUniformMatrix2fvEXT
TUNIS_FORCE_INLINE void  tunisProgramUniformMatrix2x3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { tunisGL.tunisProgramUniformMatrix2x3dv(program, location, count, transpose, value); }
#define glProgramUniformMatrix2x3dv tunisProgramUniformMatrix2x3dv
TUNIS_FORCE_INLINE void  tunisProgramUniformMatrix2x3dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { tunisGL.tunisProgramUniformMatrix2x3dvEXT(program, location, count, transpose, value); }
#define glProgramUniformMatrix2x3dvEXT tunisProgramUniformMatrix2x3dvEXT
TUNIS_FORCE_INLINE void  tunisProgramUniformMatrix2x3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { tunisGL.tunisProgramUniformMatrix2x3fv(program, location, count, transpose, value); }
#define glProgramUniformMatrix2x3fv tunisProgramUniformMatrix2x3fv
TUNIS_FORCE_INLINE void  tunisProgramUniformMatrix2x3fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { tunisGL.tunisProgramUniformMatrix2x3fvEXT(program, location, count, transpose, value); }
#define glProgramUniformMatrix2x3fvEXT tunisProgramUniformMatrix2x3fvEXT
TUNIS_FORCE_INLINE void  tunisProgramUniformMatrix2x4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { tunisGL.tunisProgramUniformMatrix2x4dv(program, location, count, transpose, value); }
#define glProgramUniformMatrix2x4dv tunisProgramUniformMatrix2x4dv
TUNIS_FORCE_INLINE void  tunisProgramUniformMatrix2x4dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { tunisGL.tunisProgramUniformMatrix2x4dvEXT(program, location, count, transpose, value); }
#define glProgramUniformMatrix2x4dvEXT tunisProgramUniformMatrix2x4dvEXT
TUNIS_FORCE_INLINE void  tunisProgramUniformMatrix2x4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { tunisGL.tunisProgramUniformMatrix2x4fv(program, location, count, transpose, value); }
#define glProgramUniformMatrix2x4fv tunisProgramUniformMatrix2x4fv
TUNIS_FORCE_INLINE void  tunisProgramUniformMatrix2x4fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { tunisGL.tunisProgramUniformMatrix2x4fvEXT(program, location, count, transpose, value); }
#define glProgramUniformMatrix2x4fvEXT tunisProgramUniformMatrix2x4fvEXT
TUNIS_FORCE_INLINE void  tunisProgramUniformMatrix3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { tunisGL.tunisProgramUniformMatrix3dv(program, location, count, transpose, value); }
#define glProgramUniformMatrix3dv tunisProgramUniformMatrix3dv
TUNIS_FORCE_INLINE void  tunisProgramUniformMatrix3dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { tunisGL.tunisProgramUniformMatrix3dvEXT(program, location, count, transpose, value); }
#define glProgramUniformMatrix3dvEXT tunisProgramUniformMatrix3dvEXT
TUNIS_FORCE_INLINE void  tunisProgramUniformMatrix3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { tunisGL.tunisProgramUniformMatrix3fv(program, location, count, transpose, value); }
#define glProgramUniformMatrix3fv tunisProgramUniformMatrix3fv
TUNIS_FORCE_INLINE void  tunisProgramUniformMatrix3fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { tunisGL.tunisProgramUniformMatrix3fvEXT(program, location, count, transpose, value); }
#define glProgramUniformMatrix3fvEXT tunisProgramUniformMatrix3fvEXT
TUNIS_FORCE_INLINE void  tunisProgramUniformMatrix3x2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { tunisGL.tunisProgramUniformMatrix3x2dv(program, location, count, transpose, value); }
#define glProgramUniformMatrix3x2dv tunisProgramUniformMatrix3x2dv
TUNIS_FORCE_INLINE void  tunisProgramUniformMatrix3x2dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { tunisGL.tunisProgramUniformMatrix3x2dvEXT(program, location, count, transpose, value); }
#define glProgramUniformMatrix3x2dvEXT tunisProgramUniformMatrix3x2dvEXT
TUNIS_FORCE_INLINE void  tunisProgramUniformMatrix3x2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { tunisGL.tunisProgramUniformMatrix3x2fv(program, location, count, transpose, value); }
#define glProgramUniformMatrix3x2fv tunisProgramUniformMatrix3x2fv
TUNIS_FORCE_INLINE void  tunisProgramUniformMatrix3x2fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { tunisGL.tunisProgramUniformMatrix3x2fvEXT(program, location, count, transpose, value); }
#define glProgramUniformMatrix3x2fvEXT tunisProgramUniformMatrix3x2fvEXT
TUNIS_FORCE_INLINE void  tunisProgramUniformMatrix3x4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { tunisGL.tunisProgramUniformMatrix3x4dv(program, location, count, transpose, value); }
#define glProgramUniformMatrix3x4dv tunisProgramUniformMatrix3x4dv
TUNIS_FORCE_INLINE void  tunisProgramUniformMatrix3x4dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { tunisGL.tunisProgramUniformMatrix3x4dvEXT(program, location, count, transpose, value); }
#define glProgramUniformMatrix3x4dvEXT tunisProgramUniformMatrix3x4dvEXT
TUNIS_FORCE_INLINE void  tunisProgramUniformMatrix3x4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { tunisGL.tunisProgramUniformMatrix3x4fv(program, location, count, transpose, value); }
#define glProgramUniformMatrix3x4fv tunisProgramUniformMatrix3x4fv
TUNIS_FORCE_INLINE void  tunisProgramUniformMatrix3x4fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { tunisGL.tunisProgramUniformMatrix3x4fvEXT(program, location, count, transpose, value); }
#define glProgramUniformMatrix3x4fvEXT tunisProgramUniformMatrix3x4fvEXT
TUNIS_FORCE_INLINE void  tunisProgramUniformMatrix4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { tunisGL.tunisProgramUniformMatrix4dv(program, location, count, transpose, value); }
#define glProgramUniformMatrix4dv tunisProgramUniformMatrix4dv
TUNIS_FORCE_INLINE void  tunisProgramUniformMatrix4dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { tunisGL.tunisProgramUniformMatrix4dvEXT(program, location, count, transpose, value); }
#define glProgramUniformMatrix4dvEXT tunisProgramUniformMatrix4dvEXT
TUNIS_FORCE_INLINE void  tunisProgramUniformMatrix4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { tunisGL.tunisProgramUniformMatrix4fv(program, location, count, transpose, value); }
#define glProgramUniformMatrix4fv tunisProgramUniformMatrix4fv
TUNIS_FORCE_INLINE void  tunisProgramUniformMatrix4fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { tunisGL.tunisProgramUniformMatrix4fvEXT(program, location, count, transpose, value); }
#define glProgramUniformMatrix4fvEXT tunisProgramUniformMatrix4fvEXT
TUNIS_FORCE_INLINE void  tunisProgramUniformMatrix4x2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { tunisGL.tunisProgramUniformMatrix4x2dv(program, location, count, transpose, value); }
#define glProgramUniformMatrix4x2dv tunisProgramUniformMatrix4x2dv
TUNIS_FORCE_INLINE void  tunisProgramUniformMatrix4x2dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { tunisGL.tunisProgramUniformMatrix4x2dvEXT(program, location, count, transpose, value); }
#define glProgramUniformMatrix4x2dvEXT tunisProgramUniformMatrix4x2dvEXT
TUNIS_FORCE_INLINE void  tunisProgramUniformMatrix4x2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { tunisGL.tunisProgramUniformMatrix4x2fv(program, location, count, transpose, value); }
#define glProgramUniformMatrix4x2fv tunisProgramUniformMatrix4x2fv
TUNIS_FORCE_INLINE void  tunisProgramUniformMatrix4x2fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { tunisGL.tunisProgramUniformMatrix4x2fvEXT(program, location, count, transpose, value); }
#define glProgramUniformMatrix4x2fvEXT tunisProgramUniformMatrix4x2fvEXT
TUNIS_FORCE_INLINE void  tunisProgramUniformMatrix4x3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { tunisGL.tunisProgramUniformMatrix4x3dv(program, location, count, transpose, value); }
#define glProgramUniformMatrix4x3dv tunisProgramUniformMatrix4x3dv
TUNIS_FORCE_INLINE void  tunisProgramUniformMatrix4x3dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { tunisGL.tunisProgramUniformMatrix4x3dvEXT(program, location, count, transpose, value); }
#define glProgramUniformMatrix4x3dvEXT tunisProgramUniformMatrix4x3dvEXT
TUNIS_FORCE_INLINE void  tunisProgramUniformMatrix4x3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { tunisGL.tunisProgramUniformMatrix4x3fv(program, location, count, transpose, value); }
#define glProgramUniformMatrix4x3fv tunisProgramUniformMatrix4x3fv
TUNIS_FORCE_INLINE void  tunisProgramUniformMatrix4x3fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { tunisGL.tunisProgramUniformMatrix4x3fvEXT(program, location, count, transpose, value); }
#define glProgramUniformMatrix4x3fvEXT tunisProgramUniformMatrix4x3fvEXT
TUNIS_FORCE_INLINE void  tunisProgramUniformui64NV(GLuint program, GLint location, GLuint64EXT value) { tunisGL.tunisProgramUniformui64NV(program, location, value); }
#define glProgramUniformui64NV tunisProgramUniformui64NV
TUNIS_FORCE_INLINE void  tunisProgramUniformui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64EXT * value) { tunisGL.tunisProgramUniformui64vNV(program, location, count, value); }
#define glProgramUniformui64vNV tunisProgramUniformui64vNV
TUNIS_FORCE_INLINE void  tunisProgramVertexLimitNV(GLenum target, GLint limit) { tunisGL.tunisProgramVertexLimitNV(target, limit); }
#define glProgramVertexLimitNV tunisProgramVertexLimitNV
TUNIS_FORCE_INLINE void  tunisProvokingVertex(GLenum mode) { tunisGL.tunisProvokingVertex(mode); }
#define glProvokingVertex tunisProvokingVertex
TUNIS_FORCE_INLINE void  tunisProvokingVertexEXT(GLenum mode) { tunisGL.tunisProvokingVertexEXT(mode); }
#define glProvokingVertexEXT tunisProvokingVertexEXT
TUNIS_FORCE_INLINE void  tunisPushAttrib(GLbitfield mask) { tunisGL.tunisPushAttrib(mask); }
#define glPushAttrib tunisPushAttrib
TUNIS_FORCE_INLINE void  tunisPushClientAttrib(GLbitfield mask) { tunisGL.tunisPushClientAttrib(mask); }
#define glPushClientAttrib tunisPushClientAttrib
TUNIS_FORCE_INLINE void  tunisPushClientAttribDefaultEXT(GLbitfield mask) { tunisGL.tunisPushClientAttribDefaultEXT(mask); }
#define glPushClientAttribDefaultEXT tunisPushClientAttribDefaultEXT
TUNIS_FORCE_INLINE void  tunisPushDebugGroup(GLenum source, GLuint id, GLsizei length, const GLchar * message) { tunisGL.tunisPushDebugGroup(source, id, length, message); }
#define glPushDebugGroup tunisPushDebugGroup
TUNIS_FORCE_INLINE void  tunisPushDebugGroupKHR(GLenum source, GLuint id, GLsizei length, const GLchar * message) { tunisGL.tunisPushDebugGroupKHR(source, id, length, message); }
#define glPushDebugGroupKHR tunisPushDebugGroupKHR
TUNIS_FORCE_INLINE void  tunisPushGroupMarkerEXT(GLsizei length, const GLchar * marker) { tunisGL.tunisPushGroupMarkerEXT(length, marker); }
#define glPushGroupMarkerEXT tunisPushGroupMarkerEXT
TUNIS_FORCE_INLINE void  tunisPushMatrix(void) { tunisGL.tunisPushMatrix(); }
#define glPushMatrix tunisPushMatrix
TUNIS_FORCE_INLINE void  tunisPushName(GLuint name) { tunisGL.tunisPushName(name); }
#define glPushName tunisPushName
TUNIS_FORCE_INLINE void  tunisQueryCounter(GLuint id, GLenum target) { tunisGL.tunisQueryCounter(id, target); }
#define glQueryCounter tunisQueryCounter
TUNIS_FORCE_INLINE void  tunisQueryCounterEXT(GLuint id, GLenum target) { tunisGL.tunisQueryCounterEXT(id, target); }
#define glQueryCounterEXT tunisQueryCounterEXT
TUNIS_FORCE_INLINE GLbitfield tunisQueryMatrixxOES(GLfixed * mantissa, GLint * exponent) { return tunisGL.tunisQueryMatrixxOES(mantissa, exponent); }
#define glQueryMatrixxOES tunisQueryMatrixxOES
TUNIS_FORCE_INLINE void  tunisQueryObjectParameteruiAMD(GLenum target, GLuint id, GLenum pname, GLuint param) { tunisGL.tunisQueryObjectParameteruiAMD(target, id, pname, param); }
#define glQueryObjectParameteruiAMD tunisQueryObjectParameteruiAMD
TUNIS_FORCE_INLINE GLint tunisQueryResourceNV(GLenum queryType, GLint tagId, GLuint bufSize, GLint * buffer) { return tunisGL.tunisQueryResourceNV(queryType, tagId, bufSize, buffer); }
#define glQueryResourceNV tunisQueryResourceNV
TUNIS_FORCE_INLINE void  tunisQueryResourceTagNV(GLint tagId, const GLchar * tagString) { tunisGL.tunisQueryResourceTagNV(tagId, tagString); }
#define glQueryResourceTagNV tunisQueryResourceTagNV
TUNIS_FORCE_INLINE void  tunisRasterPos2d(GLdouble x, GLdouble y) { tunisGL.tunisRasterPos2d(x, y); }
#define glRasterPos2d tunisRasterPos2d
TUNIS_FORCE_INLINE void  tunisRasterPos2dv(const GLdouble * v) { tunisGL.tunisRasterPos2dv(v); }
#define glRasterPos2dv tunisRasterPos2dv
TUNIS_FORCE_INLINE void  tunisRasterPos2f(GLfloat x, GLfloat y) { tunisGL.tunisRasterPos2f(x, y); }
#define glRasterPos2f tunisRasterPos2f
TUNIS_FORCE_INLINE void  tunisRasterPos2fv(const GLfloat * v) { tunisGL.tunisRasterPos2fv(v); }
#define glRasterPos2fv tunisRasterPos2fv
TUNIS_FORCE_INLINE void  tunisRasterPos2i(GLint x, GLint y) { tunisGL.tunisRasterPos2i(x, y); }
#define glRasterPos2i tunisRasterPos2i
TUNIS_FORCE_INLINE void  tunisRasterPos2iv(const GLint * v) { tunisGL.tunisRasterPos2iv(v); }
#define glRasterPos2iv tunisRasterPos2iv
TUNIS_FORCE_INLINE void  tunisRasterPos2s(GLshort x, GLshort y) { tunisGL.tunisRasterPos2s(x, y); }
#define glRasterPos2s tunisRasterPos2s
TUNIS_FORCE_INLINE void  tunisRasterPos2sv(const GLshort * v) { tunisGL.tunisRasterPos2sv(v); }
#define glRasterPos2sv tunisRasterPos2sv
TUNIS_FORCE_INLINE void  tunisRasterPos2xOES(GLfixed x, GLfixed y) { tunisGL.tunisRasterPos2xOES(x, y); }
#define glRasterPos2xOES tunisRasterPos2xOES
TUNIS_FORCE_INLINE void  tunisRasterPos2xvOES(const GLfixed * coords) { tunisGL.tunisRasterPos2xvOES(coords); }
#define glRasterPos2xvOES tunisRasterPos2xvOES
TUNIS_FORCE_INLINE void  tunisRasterPos3d(GLdouble x, GLdouble y, GLdouble z) { tunisGL.tunisRasterPos3d(x, y, z); }
#define glRasterPos3d tunisRasterPos3d
TUNIS_FORCE_INLINE void  tunisRasterPos3dv(const GLdouble * v) { tunisGL.tunisRasterPos3dv(v); }
#define glRasterPos3dv tunisRasterPos3dv
TUNIS_FORCE_INLINE void  tunisRasterPos3f(GLfloat x, GLfloat y, GLfloat z) { tunisGL.tunisRasterPos3f(x, y, z); }
#define glRasterPos3f tunisRasterPos3f
TUNIS_FORCE_INLINE void  tunisRasterPos3fv(const GLfloat * v) { tunisGL.tunisRasterPos3fv(v); }
#define glRasterPos3fv tunisRasterPos3fv
TUNIS_FORCE_INLINE void  tunisRasterPos3i(GLint x, GLint y, GLint z) { tunisGL.tunisRasterPos3i(x, y, z); }
#define glRasterPos3i tunisRasterPos3i
TUNIS_FORCE_INLINE void  tunisRasterPos3iv(const GLint * v) { tunisGL.tunisRasterPos3iv(v); }
#define glRasterPos3iv tunisRasterPos3iv
TUNIS_FORCE_INLINE void  tunisRasterPos3s(GLshort x, GLshort y, GLshort z) { tunisGL.tunisRasterPos3s(x, y, z); }
#define glRasterPos3s tunisRasterPos3s
TUNIS_FORCE_INLINE void  tunisRasterPos3sv(const GLshort * v) { tunisGL.tunisRasterPos3sv(v); }
#define glRasterPos3sv tunisRasterPos3sv
TUNIS_FORCE_INLINE void  tunisRasterPos3xOES(GLfixed x, GLfixed y, GLfixed z) { tunisGL.tunisRasterPos3xOES(x, y, z); }
#define glRasterPos3xOES tunisRasterPos3xOES
TUNIS_FORCE_INLINE void  tunisRasterPos3xvOES(const GLfixed * coords) { tunisGL.tunisRasterPos3xvOES(coords); }
#define glRasterPos3xvOES tunisRasterPos3xvOES
TUNIS_FORCE_INLINE void  tunisRasterPos4d(GLdouble x, GLdouble y, GLdouble z, GLdouble w) { tunisGL.tunisRasterPos4d(x, y, z, w); }
#define glRasterPos4d tunisRasterPos4d
TUNIS_FORCE_INLINE void  tunisRasterPos4dv(const GLdouble * v) { tunisGL.tunisRasterPos4dv(v); }
#define glRasterPos4dv tunisRasterPos4dv
TUNIS_FORCE_INLINE void  tunisRasterPos4f(GLfloat x, GLfloat y, GLfloat z, GLfloat w) { tunisGL.tunisRasterPos4f(x, y, z, w); }
#define glRasterPos4f tunisRasterPos4f
TUNIS_FORCE_INLINE void  tunisRasterPos4fv(const GLfloat * v) { tunisGL.tunisRasterPos4fv(v); }
#define glRasterPos4fv tunisRasterPos4fv
TUNIS_FORCE_INLINE void  tunisRasterPos4i(GLint x, GLint y, GLint z, GLint w) { tunisGL.tunisRasterPos4i(x, y, z, w); }
#define glRasterPos4i tunisRasterPos4i
TUNIS_FORCE_INLINE void  tunisRasterPos4iv(const GLint * v) { tunisGL.tunisRasterPos4iv(v); }
#define glRasterPos4iv tunisRasterPos4iv
TUNIS_FORCE_INLINE void  tunisRasterPos4s(GLshort x, GLshort y, GLshort z, GLshort w) { tunisGL.tunisRasterPos4s(x, y, z, w); }
#define glRasterPos4s tunisRasterPos4s
TUNIS_FORCE_INLINE void  tunisRasterPos4sv(const GLshort * v) { tunisGL.tunisRasterPos4sv(v); }
#define glRasterPos4sv tunisRasterPos4sv
TUNIS_FORCE_INLINE void  tunisRasterPos4xOES(GLfixed x, GLfixed y, GLfixed z, GLfixed w) { tunisGL.tunisRasterPos4xOES(x, y, z, w); }
#define glRasterPos4xOES tunisRasterPos4xOES
TUNIS_FORCE_INLINE void  tunisRasterPos4xvOES(const GLfixed * coords) { tunisGL.tunisRasterPos4xvOES(coords); }
#define glRasterPos4xvOES tunisRasterPos4xvOES
TUNIS_FORCE_INLINE void  tunisRasterSamplesEXT(GLuint samples, GLboolean fixedsamplelocations) { tunisGL.tunisRasterSamplesEXT(samples, fixedsamplelocations); }
#define glRasterSamplesEXT tunisRasterSamplesEXT
TUNIS_FORCE_INLINE void  tunisReadBuffer(GLenum src) { tunisGL.tunisReadBuffer(src); }
#define glReadBuffer tunisReadBuffer
TUNIS_FORCE_INLINE void  tunisReadBufferIndexedEXT(GLenum src, GLint index) { tunisGL.tunisReadBufferIndexedEXT(src, index); }
#define glReadBufferIndexedEXT tunisReadBufferIndexedEXT
TUNIS_FORCE_INLINE void  tunisReadBufferNV(GLenum mode) { tunisGL.tunisReadBufferNV(mode); }
#define glReadBufferNV tunisReadBufferNV
TUNIS_FORCE_INLINE void  tunisReadBufferRegion(GLuint region, GLint x, GLint y, GLsizei width, GLsizei height) { tunisGL.tunisReadBufferRegion(region, x, y, width, height); }
#define glReadBufferRegion tunisReadBufferRegion
TUNIS_FORCE_INLINE void  tunisReadInstrumentsSGIX(GLint marker) { tunisGL.tunisReadInstrumentsSGIX(marker); }
#define glReadInstrumentsSGIX tunisReadInstrumentsSGIX
TUNIS_FORCE_INLINE void  tunisReadPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void * pixels) { tunisGL.tunisReadPixels(x, y, width, height, format, type, pixels); }
#define glReadPixels tunisReadPixels
TUNIS_FORCE_INLINE void  tunisReadnPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void * data) { tunisGL.tunisReadnPixels(x, y, width, height, format, type, bufSize, data); }
#define glReadnPixels tunisReadnPixels
TUNIS_FORCE_INLINE void  tunisReadnPixelsARB(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void * data) { tunisGL.tunisReadnPixelsARB(x, y, width, height, format, type, bufSize, data); }
#define glReadnPixelsARB tunisReadnPixelsARB
TUNIS_FORCE_INLINE void  tunisReadnPixelsEXT(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void * data) { tunisGL.tunisReadnPixelsEXT(x, y, width, height, format, type, bufSize, data); }
#define glReadnPixelsEXT tunisReadnPixelsEXT
TUNIS_FORCE_INLINE void  tunisReadnPixelsKHR(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void * data) { tunisGL.tunisReadnPixelsKHR(x, y, width, height, format, type, bufSize, data); }
#define glReadnPixelsKHR tunisReadnPixelsKHR
TUNIS_FORCE_INLINE void  tunisRectd(GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2) { tunisGL.tunisRectd(x1, y1, x2, y2); }
#define glRectd tunisRectd
TUNIS_FORCE_INLINE void  tunisRectdv(const GLdouble * v1, const GLdouble * v2) { tunisGL.tunisRectdv(v1, v2); }
#define glRectdv tunisRectdv
TUNIS_FORCE_INLINE void  tunisRectf(GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2) { tunisGL.tunisRectf(x1, y1, x2, y2); }
#define glRectf tunisRectf
TUNIS_FORCE_INLINE void  tunisRectfv(const GLfloat * v1, const GLfloat * v2) { tunisGL.tunisRectfv(v1, v2); }
#define glRectfv tunisRectfv
TUNIS_FORCE_INLINE void  tunisRecti(GLint x1, GLint y1, GLint x2, GLint y2) { tunisGL.tunisRecti(x1, y1, x2, y2); }
#define glRecti tunisRecti
TUNIS_FORCE_INLINE void  tunisRectiv(const GLint * v1, const GLint * v2) { tunisGL.tunisRectiv(v1, v2); }
#define glRectiv tunisRectiv
TUNIS_FORCE_INLINE void  tunisRects(GLshort x1, GLshort y1, GLshort x2, GLshort y2) { tunisGL.tunisRects(x1, y1, x2, y2); }
#define glRects tunisRects
TUNIS_FORCE_INLINE void  tunisRectsv(const GLshort * v1, const GLshort * v2) { tunisGL.tunisRectsv(v1, v2); }
#define glRectsv tunisRectsv
TUNIS_FORCE_INLINE void  tunisRectxOES(GLfixed x1, GLfixed y1, GLfixed x2, GLfixed y2) { tunisGL.tunisRectxOES(x1, y1, x2, y2); }
#define glRectxOES tunisRectxOES
TUNIS_FORCE_INLINE void  tunisRectxvOES(const GLfixed * v1, const GLfixed * v2) { tunisGL.tunisRectxvOES(v1, v2); }
#define glRectxvOES tunisRectxvOES
TUNIS_FORCE_INLINE void  tunisReferencePlaneSGIX(const GLdouble * equation) { tunisGL.tunisReferencePlaneSGIX(equation); }
#define glReferencePlaneSGIX tunisReferencePlaneSGIX
TUNIS_FORCE_INLINE GLboolean tunisReleaseKeyedMutexWin32EXT(GLuint memory, GLuint64 key) { return tunisGL.tunisReleaseKeyedMutexWin32EXT(memory, key); }
#define glReleaseKeyedMutexWin32EXT tunisReleaseKeyedMutexWin32EXT
TUNIS_FORCE_INLINE void  tunisReleaseShaderCompiler(void) { tunisGL.tunisReleaseShaderCompiler(); }
#define glReleaseShaderCompiler tunisReleaseShaderCompiler
TUNIS_FORCE_INLINE void  tunisRenderGpuMaskNV(GLbitfield mask) { tunisGL.tunisRenderGpuMaskNV(mask); }
#define glRenderGpuMaskNV tunisRenderGpuMaskNV
TUNIS_FORCE_INLINE GLint tunisRenderMode(GLenum mode) { return tunisGL.tunisRenderMode(mode); }
#define glRenderMode tunisRenderMode
TUNIS_FORCE_INLINE void  tunisRenderbufferStorage(GLenum target, GLenum internalformat, GLsizei width, GLsizei height) { tunisGL.tunisRenderbufferStorage(target, internalformat, width, height); }
#define glRenderbufferStorage tunisRenderbufferStorage
TUNIS_FORCE_INLINE void  tunisRenderbufferStorageEXT(GLenum target, GLenum internalformat, GLsizei width, GLsizei height) { tunisGL.tunisRenderbufferStorageEXT(target, internalformat, width, height); }
#define glRenderbufferStorageEXT tunisRenderbufferStorageEXT
TUNIS_FORCE_INLINE void  tunisRenderbufferStorageMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height) { tunisGL.tunisRenderbufferStorageMultisample(target, samples, internalformat, width, height); }
#define glRenderbufferStorageMultisample tunisRenderbufferStorageMultisample
TUNIS_FORCE_INLINE void  tunisRenderbufferStorageMultisampleANGLE(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height) { tunisGL.tunisRenderbufferStorageMultisampleANGLE(target, samples, internalformat, width, height); }
#define glRenderbufferStorageMultisampleANGLE tunisRenderbufferStorageMultisampleANGLE
TUNIS_FORCE_INLINE void  tunisRenderbufferStorageMultisampleAPPLE(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height) { tunisGL.tunisRenderbufferStorageMultisampleAPPLE(target, samples, internalformat, width, height); }
#define glRenderbufferStorageMultisampleAPPLE tunisRenderbufferStorageMultisampleAPPLE
TUNIS_FORCE_INLINE void  tunisRenderbufferStorageMultisampleAdvancedAMD(GLenum target, GLsizei samples, GLsizei storageSamples, GLenum internalformat, GLsizei width, GLsizei height) { tunisGL.tunisRenderbufferStorageMultisampleAdvancedAMD(target, samples, storageSamples, internalformat, width, height); }
#define glRenderbufferStorageMultisampleAdvancedAMD tunisRenderbufferStorageMultisampleAdvancedAMD
TUNIS_FORCE_INLINE void  tunisRenderbufferStorageMultisampleCoverageNV(GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height) { tunisGL.tunisRenderbufferStorageMultisampleCoverageNV(target, coverageSamples, colorSamples, internalformat, width, height); }
#define glRenderbufferStorageMultisampleCoverageNV tunisRenderbufferStorageMultisampleCoverageNV
TUNIS_FORCE_INLINE void  tunisRenderbufferStorageMultisampleEXT(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height) { tunisGL.tunisRenderbufferStorageMultisampleEXT(target, samples, internalformat, width, height); }
#define glRenderbufferStorageMultisampleEXT tunisRenderbufferStorageMultisampleEXT
TUNIS_FORCE_INLINE void  tunisRenderbufferStorageMultisampleIMG(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height) { tunisGL.tunisRenderbufferStorageMultisampleIMG(target, samples, internalformat, width, height); }
#define glRenderbufferStorageMultisampleIMG tunisRenderbufferStorageMultisampleIMG
TUNIS_FORCE_INLINE void  tunisRenderbufferStorageMultisampleNV(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height) { tunisGL.tunisRenderbufferStorageMultisampleNV(target, samples, internalformat, width, height); }
#define glRenderbufferStorageMultisampleNV tunisRenderbufferStorageMultisampleNV
TUNIS_FORCE_INLINE void  tunisRenderbufferStorageOES(GLenum target, GLenum internalformat, GLsizei width, GLsizei height) { tunisGL.tunisRenderbufferStorageOES(target, internalformat, width, height); }
#define glRenderbufferStorageOES tunisRenderbufferStorageOES
TUNIS_FORCE_INLINE void  tunisReplacementCodePointerSUN(GLenum type, GLsizei stride, const void ** pointer) { tunisGL.tunisReplacementCodePointerSUN(type, stride, pointer); }
#define glReplacementCodePointerSUN tunisReplacementCodePointerSUN
TUNIS_FORCE_INLINE void  tunisReplacementCodeubSUN(GLubyte code) { tunisGL.tunisReplacementCodeubSUN(code); }
#define glReplacementCodeubSUN tunisReplacementCodeubSUN
TUNIS_FORCE_INLINE void  tunisReplacementCodeubvSUN(const GLubyte * code) { tunisGL.tunisReplacementCodeubvSUN(code); }
#define glReplacementCodeubvSUN tunisReplacementCodeubvSUN
TUNIS_FORCE_INLINE void  tunisReplacementCodeuiColor3fVertex3fSUN(GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z) { tunisGL.tunisReplacementCodeuiColor3fVertex3fSUN(rc, r, g, b, x, y, z); }
#define glReplacementCodeuiColor3fVertex3fSUN tunisReplacementCodeuiColor3fVertex3fSUN
TUNIS_FORCE_INLINE void  tunisReplacementCodeuiColor3fVertex3fvSUN(const GLuint * rc, const GLfloat * c, const GLfloat * v) { tunisGL.tunisReplacementCodeuiColor3fVertex3fvSUN(rc, c, v); }
#define glReplacementCodeuiColor3fVertex3fvSUN tunisReplacementCodeuiColor3fVertex3fvSUN
TUNIS_FORCE_INLINE void  tunisReplacementCodeuiColor4fNormal3fVertex3fSUN(GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z) { tunisGL.tunisReplacementCodeuiColor4fNormal3fVertex3fSUN(rc, r, g, b, a, nx, ny, nz, x, y, z); }
#define glReplacementCodeuiColor4fNormal3fVertex3fSUN tunisReplacementCodeuiColor4fNormal3fVertex3fSUN
TUNIS_FORCE_INLINE void  tunisReplacementCodeuiColor4fNormal3fVertex3fvSUN(const GLuint * rc, const GLfloat * c, const GLfloat * n, const GLfloat * v) { tunisGL.tunisReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc, c, n, v); }
#define glReplacementCodeuiColor4fNormal3fVertex3fvSUN tunisReplacementCodeuiColor4fNormal3fVertex3fvSUN
TUNIS_FORCE_INLINE void  tunisReplacementCodeuiColor4ubVertex3fSUN(GLuint rc, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z) { tunisGL.tunisReplacementCodeuiColor4ubVertex3fSUN(rc, r, g, b, a, x, y, z); }
#define glReplacementCodeuiColor4ubVertex3fSUN tunisReplacementCodeuiColor4ubVertex3fSUN
TUNIS_FORCE_INLINE void  tunisReplacementCodeuiColor4ubVertex3fvSUN(const GLuint * rc, const GLubyte * c, const GLfloat * v) { tunisGL.tunisReplacementCodeuiColor4ubVertex3fvSUN(rc, c, v); }
#define glReplacementCodeuiColor4ubVertex3fvSUN tunisReplacementCodeuiColor4ubVertex3fvSUN
TUNIS_FORCE_INLINE void  tunisReplacementCodeuiNormal3fVertex3fSUN(GLuint rc, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z) { tunisGL.tunisReplacementCodeuiNormal3fVertex3fSUN(rc, nx, ny, nz, x, y, z); }
#define glReplacementCodeuiNormal3fVertex3fSUN tunisReplacementCodeuiNormal3fVertex3fSUN
TUNIS_FORCE_INLINE void  tunisReplacementCodeuiNormal3fVertex3fvSUN(const GLuint * rc, const GLfloat * n, const GLfloat * v) { tunisGL.tunisReplacementCodeuiNormal3fVertex3fvSUN(rc, n, v); }
#define glReplacementCodeuiNormal3fVertex3fvSUN tunisReplacementCodeuiNormal3fVertex3fvSUN
TUNIS_FORCE_INLINE void  tunisReplacementCodeuiSUN(GLuint code) { tunisGL.tunisReplacementCodeuiSUN(code); }
#define glReplacementCodeuiSUN tunisReplacementCodeuiSUN
TUNIS_FORCE_INLINE void  tunisReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN(GLuint rc, GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z) { tunisGL.tunisReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN(rc, s, t, r, g, b, a, nx, ny, nz, x, y, z); }
#define glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN tunisReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN
TUNIS_FORCE_INLINE void  tunisReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(const GLuint * rc, const GLfloat * tc, const GLfloat * c, const GLfloat * n, const GLfloat * v) { tunisGL.tunisReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc, c, n, v); }
#define glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN tunisReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN
TUNIS_FORCE_INLINE void  tunisReplacementCodeuiTexCoord2fNormal3fVertex3fSUN(GLuint rc, GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z) { tunisGL.tunisReplacementCodeuiTexCoord2fNormal3fVertex3fSUN(rc, s, t, nx, ny, nz, x, y, z); }
#define glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN tunisReplacementCodeuiTexCoord2fNormal3fVertex3fSUN
TUNIS_FORCE_INLINE void  tunisReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(const GLuint * rc, const GLfloat * tc, const GLfloat * n, const GLfloat * v) { tunisGL.tunisReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc, tc, n, v); }
#define glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN tunisReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN
TUNIS_FORCE_INLINE void  tunisReplacementCodeuiTexCoord2fVertex3fSUN(GLuint rc, GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z) { tunisGL.tunisReplacementCodeuiTexCoord2fVertex3fSUN(rc, s, t, x, y, z); }
#define glReplacementCodeuiTexCoord2fVertex3fSUN tunisReplacementCodeuiTexCoord2fVertex3fSUN
TUNIS_FORCE_INLINE void  tunisReplacementCodeuiTexCoord2fVertex3fvSUN(const GLuint * rc, const GLfloat * tc, const GLfloat * v) { tunisGL.tunisReplacementCodeuiTexCoord2fVertex3fvSUN(rc, tc, v); }
#define glReplacementCodeuiTexCoord2fVertex3fvSUN tunisReplacementCodeuiTexCoord2fVertex3fvSUN
TUNIS_FORCE_INLINE void  tunisReplacementCodeuiVertex3fSUN(GLuint rc, GLfloat x, GLfloat y, GLfloat z) { tunisGL.tunisReplacementCodeuiVertex3fSUN(rc, x, y, z); }
#define glReplacementCodeuiVertex3fSUN tunisReplacementCodeuiVertex3fSUN
TUNIS_FORCE_INLINE void  tunisReplacementCodeuiVertex3fvSUN(const GLuint * rc, const GLfloat * v) { tunisGL.tunisReplacementCodeuiVertex3fvSUN(rc, v); }
#define glReplacementCodeuiVertex3fvSUN tunisReplacementCodeuiVertex3fvSUN
TUNIS_FORCE_INLINE void  tunisReplacementCodeuivSUN(const GLuint * code) { tunisGL.tunisReplacementCodeuivSUN(code); }
#define glReplacementCodeuivSUN tunisReplacementCodeuivSUN
TUNIS_FORCE_INLINE void  tunisReplacementCodeusSUN(GLushort code) { tunisGL.tunisReplacementCodeusSUN(code); }
#define glReplacementCodeusSUN tunisReplacementCodeusSUN
TUNIS_FORCE_INLINE void  tunisReplacementCodeusvSUN(const GLushort * code) { tunisGL.tunisReplacementCodeusvSUN(code); }
#define glReplacementCodeusvSUN tunisReplacementCodeusvSUN
TUNIS_FORCE_INLINE void  tunisRequestResidentProgramsNV(GLsizei n, const GLuint * programs) { tunisGL.tunisRequestResidentProgramsNV(n, programs); }
#define glRequestResidentProgramsNV tunisRequestResidentProgramsNV
TUNIS_FORCE_INLINE void  tunisResetHistogram(GLenum target) { tunisGL.tunisResetHistogram(target); }
#define glResetHistogram tunisResetHistogram
TUNIS_FORCE_INLINE void  tunisResetHistogramEXT(GLenum target) { tunisGL.tunisResetHistogramEXT(target); }
#define glResetHistogramEXT tunisResetHistogramEXT
TUNIS_FORCE_INLINE void  tunisResetMemoryObjectParameterNV(GLuint memory, GLenum pname) { tunisGL.tunisResetMemoryObjectParameterNV(memory, pname); }
#define glResetMemoryObjectParameterNV tunisResetMemoryObjectParameterNV
TUNIS_FORCE_INLINE void  tunisResetMinmax(GLenum target) { tunisGL.tunisResetMinmax(target); }
#define glResetMinmax tunisResetMinmax
TUNIS_FORCE_INLINE void  tunisResetMinmaxEXT(GLenum target) { tunisGL.tunisResetMinmaxEXT(target); }
#define glResetMinmaxEXT tunisResetMinmaxEXT
TUNIS_FORCE_INLINE void  tunisResizeBuffersMESA(void) { tunisGL.tunisResizeBuffersMESA(); }
#define glResizeBuffersMESA tunisResizeBuffersMESA
TUNIS_FORCE_INLINE void  tunisResolveDepthValuesNV(void) { tunisGL.tunisResolveDepthValuesNV(); }
#define glResolveDepthValuesNV tunisResolveDepthValuesNV
TUNIS_FORCE_INLINE void  tunisResolveMultisampleFramebufferAPPLE(void) { tunisGL.tunisResolveMultisampleFramebufferAPPLE(); }
#define glResolveMultisampleFramebufferAPPLE tunisResolveMultisampleFramebufferAPPLE
TUNIS_FORCE_INLINE void  tunisResumeTransformFeedback(void) { tunisGL.tunisResumeTransformFeedback(); }
#define glResumeTransformFeedback tunisResumeTransformFeedback
TUNIS_FORCE_INLINE void  tunisResumeTransformFeedbackNV(void) { tunisGL.tunisResumeTransformFeedbackNV(); }
#define glResumeTransformFeedbackNV tunisResumeTransformFeedbackNV
TUNIS_FORCE_INLINE void  tunisRotated(GLdouble angle, GLdouble x, GLdouble y, GLdouble z) { tunisGL.tunisRotated(angle, x, y, z); }
#define glRotated tunisRotated
TUNIS_FORCE_INLINE void  tunisRotatef(GLfloat angle, GLfloat x, GLfloat y, GLfloat z) { tunisGL.tunisRotatef(angle, x, y, z); }
#define glRotatef tunisRotatef
TUNIS_FORCE_INLINE void  tunisRotatex(GLfixed angle, GLfixed x, GLfixed y, GLfixed z) { tunisGL.tunisRotatex(angle, x, y, z); }
#define glRotatex tunisRotatex
TUNIS_FORCE_INLINE void  tunisRotatexOES(GLfixed angle, GLfixed x, GLfixed y, GLfixed z) { tunisGL.tunisRotatexOES(angle, x, y, z); }
#define glRotatexOES tunisRotatexOES
TUNIS_FORCE_INLINE void  tunisSampleCoverage(GLfloat value, GLboolean invert) { tunisGL.tunisSampleCoverage(value, invert); }
#define glSampleCoverage tunisSampleCoverage
TUNIS_FORCE_INLINE void  tunisSampleCoverageARB(GLfloat value, GLboolean invert) { tunisGL.tunisSampleCoverageARB(value, invert); }
#define glSampleCoverageARB tunisSampleCoverageARB
TUNIS_FORCE_INLINE void  tunisSampleCoveragex(GLclampx value, GLboolean invert) { tunisGL.tunisSampleCoveragex(value, invert); }
#define glSampleCoveragex tunisSampleCoveragex
TUNIS_FORCE_INLINE void  tunisSampleCoveragexOES(GLclampx value, GLboolean invert) { tunisGL.tunisSampleCoveragexOES(value, invert); }
#define glSampleCoveragexOES tunisSampleCoveragexOES
TUNIS_FORCE_INLINE void  tunisSampleMapATI(GLuint dst, GLuint interp, GLenum swizzle) { tunisGL.tunisSampleMapATI(dst, interp, swizzle); }
#define glSampleMapATI tunisSampleMapATI
TUNIS_FORCE_INLINE void  tunisSampleMaskEXT(GLclampf value, GLboolean invert) { tunisGL.tunisSampleMaskEXT(value, invert); }
#define glSampleMaskEXT tunisSampleMaskEXT
TUNIS_FORCE_INLINE void  tunisSampleMaskIndexedNV(GLuint index, GLbitfield mask) { tunisGL.tunisSampleMaskIndexedNV(index, mask); }
#define glSampleMaskIndexedNV tunisSampleMaskIndexedNV
TUNIS_FORCE_INLINE void  tunisSampleMaskSGIS(GLclampf value, GLboolean invert) { tunisGL.tunisSampleMaskSGIS(value, invert); }
#define glSampleMaskSGIS tunisSampleMaskSGIS
TUNIS_FORCE_INLINE void  tunisSampleMaski(GLuint maskNumber, GLbitfield mask) { tunisGL.tunisSampleMaski(maskNumber, mask); }
#define glSampleMaski tunisSampleMaski
TUNIS_FORCE_INLINE void  tunisSamplePatternEXT(GLenum pattern) { tunisGL.tunisSamplePatternEXT(pattern); }
#define glSamplePatternEXT tunisSamplePatternEXT
TUNIS_FORCE_INLINE void  tunisSamplePatternSGIS(GLenum pattern) { tunisGL.tunisSamplePatternSGIS(pattern); }
#define glSamplePatternSGIS tunisSamplePatternSGIS
TUNIS_FORCE_INLINE void  tunisSamplerParameterIiv(GLuint sampler, GLenum pname, const GLint * param) { tunisGL.tunisSamplerParameterIiv(sampler, pname, param); }
#define glSamplerParameterIiv tunisSamplerParameterIiv
TUNIS_FORCE_INLINE void  tunisSamplerParameterIivEXT(GLuint sampler, GLenum pname, const GLint * param) { tunisGL.tunisSamplerParameterIivEXT(sampler, pname, param); }
#define glSamplerParameterIivEXT tunisSamplerParameterIivEXT
TUNIS_FORCE_INLINE void  tunisSamplerParameterIivOES(GLuint sampler, GLenum pname, const GLint * param) { tunisGL.tunisSamplerParameterIivOES(sampler, pname, param); }
#define glSamplerParameterIivOES tunisSamplerParameterIivOES
TUNIS_FORCE_INLINE void  tunisSamplerParameterIuiv(GLuint sampler, GLenum pname, const GLuint * param) { tunisGL.tunisSamplerParameterIuiv(sampler, pname, param); }
#define glSamplerParameterIuiv tunisSamplerParameterIuiv
TUNIS_FORCE_INLINE void  tunisSamplerParameterIuivEXT(GLuint sampler, GLenum pname, const GLuint * param) { tunisGL.tunisSamplerParameterIuivEXT(sampler, pname, param); }
#define glSamplerParameterIuivEXT tunisSamplerParameterIuivEXT
TUNIS_FORCE_INLINE void  tunisSamplerParameterIuivOES(GLuint sampler, GLenum pname, const GLuint * param) { tunisGL.tunisSamplerParameterIuivOES(sampler, pname, param); }
#define glSamplerParameterIuivOES tunisSamplerParameterIuivOES
TUNIS_FORCE_INLINE void  tunisSamplerParameterf(GLuint sampler, GLenum pname, GLfloat param) { tunisGL.tunisSamplerParameterf(sampler, pname, param); }
#define glSamplerParameterf tunisSamplerParameterf
TUNIS_FORCE_INLINE void  tunisSamplerParameterfv(GLuint sampler, GLenum pname, const GLfloat * param) { tunisGL.tunisSamplerParameterfv(sampler, pname, param); }
#define glSamplerParameterfv tunisSamplerParameterfv
TUNIS_FORCE_INLINE void  tunisSamplerParameteri(GLuint sampler, GLenum pname, GLint param) { tunisGL.tunisSamplerParameteri(sampler, pname, param); }
#define glSamplerParameteri tunisSamplerParameteri
TUNIS_FORCE_INLINE void  tunisSamplerParameteriv(GLuint sampler, GLenum pname, const GLint * param) { tunisGL.tunisSamplerParameteriv(sampler, pname, param); }
#define glSamplerParameteriv tunisSamplerParameteriv
TUNIS_FORCE_INLINE void  tunisScaled(GLdouble x, GLdouble y, GLdouble z) { tunisGL.tunisScaled(x, y, z); }
#define glScaled tunisScaled
TUNIS_FORCE_INLINE void  tunisScalef(GLfloat x, GLfloat y, GLfloat z) { tunisGL.tunisScalef(x, y, z); }
#define glScalef tunisScalef
TUNIS_FORCE_INLINE void  tunisScalex(GLfixed x, GLfixed y, GLfixed z) { tunisGL.tunisScalex(x, y, z); }
#define glScalex tunisScalex
TUNIS_FORCE_INLINE void  tunisScalexOES(GLfixed x, GLfixed y, GLfixed z) { tunisGL.tunisScalexOES(x, y, z); }
#define glScalexOES tunisScalexOES
TUNIS_FORCE_INLINE void  tunisScissor(GLint x, GLint y, GLsizei width, GLsizei height) { tunisGL.tunisScissor(x, y, width, height); }
#define glScissor tunisScissor
TUNIS_FORCE_INLINE void  tunisScissorArrayv(GLuint first, GLsizei count, const GLint * v) { tunisGL.tunisScissorArrayv(first, count, v); }
#define glScissorArrayv tunisScissorArrayv
TUNIS_FORCE_INLINE void  tunisScissorArrayvNV(GLuint first, GLsizei count, const GLint * v) { tunisGL.tunisScissorArrayvNV(first, count, v); }
#define glScissorArrayvNV tunisScissorArrayvNV
TUNIS_FORCE_INLINE void  tunisScissorArrayvOES(GLuint first, GLsizei count, const GLint * v) { tunisGL.tunisScissorArrayvOES(first, count, v); }
#define glScissorArrayvOES tunisScissorArrayvOES
TUNIS_FORCE_INLINE void  tunisScissorExclusiveArrayvNV(GLuint first, GLsizei count, const GLint * v) { tunisGL.tunisScissorExclusiveArrayvNV(first, count, v); }
#define glScissorExclusiveArrayvNV tunisScissorExclusiveArrayvNV
TUNIS_FORCE_INLINE void  tunisScissorExclusiveNV(GLint x, GLint y, GLsizei width, GLsizei height) { tunisGL.tunisScissorExclusiveNV(x, y, width, height); }
#define glScissorExclusiveNV tunisScissorExclusiveNV
TUNIS_FORCE_INLINE void  tunisScissorIndexed(GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height) { tunisGL.tunisScissorIndexed(index, left, bottom, width, height); }
#define glScissorIndexed tunisScissorIndexed
TUNIS_FORCE_INLINE void  tunisScissorIndexedNV(GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height) { tunisGL.tunisScissorIndexedNV(index, left, bottom, width, height); }
#define glScissorIndexedNV tunisScissorIndexedNV
TUNIS_FORCE_INLINE void  tunisScissorIndexedOES(GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height) { tunisGL.tunisScissorIndexedOES(index, left, bottom, width, height); }
#define glScissorIndexedOES tunisScissorIndexedOES
TUNIS_FORCE_INLINE void  tunisScissorIndexedv(GLuint index, const GLint * v) { tunisGL.tunisScissorIndexedv(index, v); }
#define glScissorIndexedv tunisScissorIndexedv
TUNIS_FORCE_INLINE void  tunisScissorIndexedvNV(GLuint index, const GLint * v) { tunisGL.tunisScissorIndexedvNV(index, v); }
#define glScissorIndexedvNV tunisScissorIndexedvNV
TUNIS_FORCE_INLINE void  tunisScissorIndexedvOES(GLuint index, const GLint * v) { tunisGL.tunisScissorIndexedvOES(index, v); }
#define glScissorIndexedvOES tunisScissorIndexedvOES
TUNIS_FORCE_INLINE void  tunisSecondaryColor3b(GLbyte red, GLbyte green, GLbyte blue) { tunisGL.tunisSecondaryColor3b(red, green, blue); }
#define glSecondaryColor3b tunisSecondaryColor3b
TUNIS_FORCE_INLINE void  tunisSecondaryColor3bEXT(GLbyte red, GLbyte green, GLbyte blue) { tunisGL.tunisSecondaryColor3bEXT(red, green, blue); }
#define glSecondaryColor3bEXT tunisSecondaryColor3bEXT
TUNIS_FORCE_INLINE void  tunisSecondaryColor3bv(const GLbyte * v) { tunisGL.tunisSecondaryColor3bv(v); }
#define glSecondaryColor3bv tunisSecondaryColor3bv
TUNIS_FORCE_INLINE void  tunisSecondaryColor3bvEXT(const GLbyte * v) { tunisGL.tunisSecondaryColor3bvEXT(v); }
#define glSecondaryColor3bvEXT tunisSecondaryColor3bvEXT
TUNIS_FORCE_INLINE void  tunisSecondaryColor3d(GLdouble red, GLdouble green, GLdouble blue) { tunisGL.tunisSecondaryColor3d(red, green, blue); }
#define glSecondaryColor3d tunisSecondaryColor3d
TUNIS_FORCE_INLINE void  tunisSecondaryColor3dEXT(GLdouble red, GLdouble green, GLdouble blue) { tunisGL.tunisSecondaryColor3dEXT(red, green, blue); }
#define glSecondaryColor3dEXT tunisSecondaryColor3dEXT
TUNIS_FORCE_INLINE void  tunisSecondaryColor3dv(const GLdouble * v) { tunisGL.tunisSecondaryColor3dv(v); }
#define glSecondaryColor3dv tunisSecondaryColor3dv
TUNIS_FORCE_INLINE void  tunisSecondaryColor3dvEXT(const GLdouble * v) { tunisGL.tunisSecondaryColor3dvEXT(v); }
#define glSecondaryColor3dvEXT tunisSecondaryColor3dvEXT
TUNIS_FORCE_INLINE void  tunisSecondaryColor3f(GLfloat red, GLfloat green, GLfloat blue) { tunisGL.tunisSecondaryColor3f(red, green, blue); }
#define glSecondaryColor3f tunisSecondaryColor3f
TUNIS_FORCE_INLINE void  tunisSecondaryColor3fEXT(GLfloat red, GLfloat green, GLfloat blue) { tunisGL.tunisSecondaryColor3fEXT(red, green, blue); }
#define glSecondaryColor3fEXT tunisSecondaryColor3fEXT
TUNIS_FORCE_INLINE void  tunisSecondaryColor3fv(const GLfloat * v) { tunisGL.tunisSecondaryColor3fv(v); }
#define glSecondaryColor3fv tunisSecondaryColor3fv
TUNIS_FORCE_INLINE void  tunisSecondaryColor3fvEXT(const GLfloat * v) { tunisGL.tunisSecondaryColor3fvEXT(v); }
#define glSecondaryColor3fvEXT tunisSecondaryColor3fvEXT
TUNIS_FORCE_INLINE void  tunisSecondaryColor3hNV(GLhalfNV red, GLhalfNV green, GLhalfNV blue) { tunisGL.tunisSecondaryColor3hNV(red, green, blue); }
#define glSecondaryColor3hNV tunisSecondaryColor3hNV
TUNIS_FORCE_INLINE void  tunisSecondaryColor3hvNV(const GLhalfNV * v) { tunisGL.tunisSecondaryColor3hvNV(v); }
#define glSecondaryColor3hvNV tunisSecondaryColor3hvNV
TUNIS_FORCE_INLINE void  tunisSecondaryColor3i(GLint red, GLint green, GLint blue) { tunisGL.tunisSecondaryColor3i(red, green, blue); }
#define glSecondaryColor3i tunisSecondaryColor3i
TUNIS_FORCE_INLINE void  tunisSecondaryColor3iEXT(GLint red, GLint green, GLint blue) { tunisGL.tunisSecondaryColor3iEXT(red, green, blue); }
#define glSecondaryColor3iEXT tunisSecondaryColor3iEXT
TUNIS_FORCE_INLINE void  tunisSecondaryColor3iv(const GLint * v) { tunisGL.tunisSecondaryColor3iv(v); }
#define glSecondaryColor3iv tunisSecondaryColor3iv
TUNIS_FORCE_INLINE void  tunisSecondaryColor3ivEXT(const GLint * v) { tunisGL.tunisSecondaryColor3ivEXT(v); }
#define glSecondaryColor3ivEXT tunisSecondaryColor3ivEXT
TUNIS_FORCE_INLINE void  tunisSecondaryColor3s(GLshort red, GLshort green, GLshort blue) { tunisGL.tunisSecondaryColor3s(red, green, blue); }
#define glSecondaryColor3s tunisSecondaryColor3s
TUNIS_FORCE_INLINE void  tunisSecondaryColor3sEXT(GLshort red, GLshort green, GLshort blue) { tunisGL.tunisSecondaryColor3sEXT(red, green, blue); }
#define glSecondaryColor3sEXT tunisSecondaryColor3sEXT
TUNIS_FORCE_INLINE void  tunisSecondaryColor3sv(const GLshort * v) { tunisGL.tunisSecondaryColor3sv(v); }
#define glSecondaryColor3sv tunisSecondaryColor3sv
TUNIS_FORCE_INLINE void  tunisSecondaryColor3svEXT(const GLshort * v) { tunisGL.tunisSecondaryColor3svEXT(v); }
#define glSecondaryColor3svEXT tunisSecondaryColor3svEXT
TUNIS_FORCE_INLINE void  tunisSecondaryColor3ub(GLubyte red, GLubyte green, GLubyte blue) { tunisGL.tunisSecondaryColor3ub(red, green, blue); }
#define glSecondaryColor3ub tunisSecondaryColor3ub
TUNIS_FORCE_INLINE void  tunisSecondaryColor3ubEXT(GLubyte red, GLubyte green, GLubyte blue) { tunisGL.tunisSecondaryColor3ubEXT(red, green, blue); }
#define glSecondaryColor3ubEXT tunisSecondaryColor3ubEXT
TUNIS_FORCE_INLINE void  tunisSecondaryColor3ubv(const GLubyte * v) { tunisGL.tunisSecondaryColor3ubv(v); }
#define glSecondaryColor3ubv tunisSecondaryColor3ubv
TUNIS_FORCE_INLINE void  tunisSecondaryColor3ubvEXT(const GLubyte * v) { tunisGL.tunisSecondaryColor3ubvEXT(v); }
#define glSecondaryColor3ubvEXT tunisSecondaryColor3ubvEXT
TUNIS_FORCE_INLINE void  tunisSecondaryColor3ui(GLuint red, GLuint green, GLuint blue) { tunisGL.tunisSecondaryColor3ui(red, green, blue); }
#define glSecondaryColor3ui tunisSecondaryColor3ui
TUNIS_FORCE_INLINE void  tunisSecondaryColor3uiEXT(GLuint red, GLuint green, GLuint blue) { tunisGL.tunisSecondaryColor3uiEXT(red, green, blue); }
#define glSecondaryColor3uiEXT tunisSecondaryColor3uiEXT
TUNIS_FORCE_INLINE void  tunisSecondaryColor3uiv(const GLuint * v) { tunisGL.tunisSecondaryColor3uiv(v); }
#define glSecondaryColor3uiv tunisSecondaryColor3uiv
TUNIS_FORCE_INLINE void  tunisSecondaryColor3uivEXT(const GLuint * v) { tunisGL.tunisSecondaryColor3uivEXT(v); }
#define glSecondaryColor3uivEXT tunisSecondaryColor3uivEXT
TUNIS_FORCE_INLINE void  tunisSecondaryColor3us(GLushort red, GLushort green, GLushort blue) { tunisGL.tunisSecondaryColor3us(red, green, blue); }
#define glSecondaryColor3us tunisSecondaryColor3us
TUNIS_FORCE_INLINE void  tunisSecondaryColor3usEXT(GLushort red, GLushort green, GLushort blue) { tunisGL.tunisSecondaryColor3usEXT(red, green, blue); }
#define glSecondaryColor3usEXT tunisSecondaryColor3usEXT
TUNIS_FORCE_INLINE void  tunisSecondaryColor3usv(const GLushort * v) { tunisGL.tunisSecondaryColor3usv(v); }
#define glSecondaryColor3usv tunisSecondaryColor3usv
TUNIS_FORCE_INLINE void  tunisSecondaryColor3usvEXT(const GLushort * v) { tunisGL.tunisSecondaryColor3usvEXT(v); }
#define glSecondaryColor3usvEXT tunisSecondaryColor3usvEXT
TUNIS_FORCE_INLINE void  tunisSecondaryColorFormatNV(GLint size, GLenum type, GLsizei stride) { tunisGL.tunisSecondaryColorFormatNV(size, type, stride); }
#define glSecondaryColorFormatNV tunisSecondaryColorFormatNV
TUNIS_FORCE_INLINE void  tunisSecondaryColorP3ui(GLenum type, GLuint color) { tunisGL.tunisSecondaryColorP3ui(type, color); }
#define glSecondaryColorP3ui tunisSecondaryColorP3ui
TUNIS_FORCE_INLINE void  tunisSecondaryColorP3uiv(GLenum type, const GLuint * color) { tunisGL.tunisSecondaryColorP3uiv(type, color); }
#define glSecondaryColorP3uiv tunisSecondaryColorP3uiv
TUNIS_FORCE_INLINE void  tunisSecondaryColorPointer(GLint size, GLenum type, GLsizei stride, const void * pointer) { tunisGL.tunisSecondaryColorPointer(size, type, stride, pointer); }
#define glSecondaryColorPointer tunisSecondaryColorPointer
TUNIS_FORCE_INLINE void  tunisSecondaryColorPointerEXT(GLint size, GLenum type, GLsizei stride, const void * pointer) { tunisGL.tunisSecondaryColorPointerEXT(size, type, stride, pointer); }
#define glSecondaryColorPointerEXT tunisSecondaryColorPointerEXT
TUNIS_FORCE_INLINE void  tunisSecondaryColorPointerListIBM(GLint size, GLenum type, GLint stride, const void ** pointer, GLint ptrstride) { tunisGL.tunisSecondaryColorPointerListIBM(size, type, stride, pointer, ptrstride); }
#define glSecondaryColorPointerListIBM tunisSecondaryColorPointerListIBM
TUNIS_FORCE_INLINE void  tunisSelectBuffer(GLsizei size, GLuint * buffer) { tunisGL.tunisSelectBuffer(size, buffer); }
#define glSelectBuffer tunisSelectBuffer
TUNIS_FORCE_INLINE void  tunisSelectPerfMonitorCountersAMD(GLuint monitor, GLboolean enable, GLuint group, GLint numCounters, GLuint * counterList) { tunisGL.tunisSelectPerfMonitorCountersAMD(monitor, enable, group, numCounters, counterList); }
#define glSelectPerfMonitorCountersAMD tunisSelectPerfMonitorCountersAMD
TUNIS_FORCE_INLINE void  tunisSemaphoreParameterui64vEXT(GLuint semaphore, GLenum pname, const GLuint64 * params) { tunisGL.tunisSemaphoreParameterui64vEXT(semaphore, pname, params); }
#define glSemaphoreParameterui64vEXT tunisSemaphoreParameterui64vEXT
TUNIS_FORCE_INLINE void  tunisSeparableFilter2D(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * row, const void * column) { tunisGL.tunisSeparableFilter2D(target, internalformat, width, height, format, type, row, column); }
#define glSeparableFilter2D tunisSeparableFilter2D
TUNIS_FORCE_INLINE void  tunisSeparableFilter2DEXT(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * row, const void * column) { tunisGL.tunisSeparableFilter2DEXT(target, internalformat, width, height, format, type, row, column); }
#define glSeparableFilter2DEXT tunisSeparableFilter2DEXT
TUNIS_FORCE_INLINE void  tunisSetFenceAPPLE(GLuint fence) { tunisGL.tunisSetFenceAPPLE(fence); }
#define glSetFenceAPPLE tunisSetFenceAPPLE
TUNIS_FORCE_INLINE void  tunisSetFenceNV(GLuint fence, GLenum condition) { tunisGL.tunisSetFenceNV(fence, condition); }
#define glSetFenceNV tunisSetFenceNV
TUNIS_FORCE_INLINE void  tunisSetFragmentShaderConstantATI(GLuint dst, const GLfloat * value) { tunisGL.tunisSetFragmentShaderConstantATI(dst, value); }
#define glSetFragmentShaderConstantATI tunisSetFragmentShaderConstantATI
TUNIS_FORCE_INLINE void  tunisSetInvariantEXT(GLuint id, GLenum type, const void * addr) { tunisGL.tunisSetInvariantEXT(id, type, addr); }
#define glSetInvariantEXT tunisSetInvariantEXT
TUNIS_FORCE_INLINE void  tunisSetLocalConstantEXT(GLuint id, GLenum type, const void * addr) { tunisGL.tunisSetLocalConstantEXT(id, type, addr); }
#define glSetLocalConstantEXT tunisSetLocalConstantEXT
TUNIS_FORCE_INLINE void  tunisSetMultisamplefvAMD(GLenum pname, GLuint index, const GLfloat * val) { tunisGL.tunisSetMultisamplefvAMD(pname, index, val); }
#define glSetMultisamplefvAMD tunisSetMultisamplefvAMD
TUNIS_FORCE_INLINE void  tunisShadeModel(GLenum mode) { tunisGL.tunisShadeModel(mode); }
#define glShadeModel tunisShadeModel
TUNIS_FORCE_INLINE void  tunisShaderBinary(GLsizei count, const GLuint * shaders, GLenum binaryformat, const void * binary, GLsizei length) { tunisGL.tunisShaderBinary(count, shaders, binaryformat, binary, length); }
#define glShaderBinary tunisShaderBinary
TUNIS_FORCE_INLINE void  tunisShaderOp1EXT(GLenum op, GLuint res, GLuint arg1) { tunisGL.tunisShaderOp1EXT(op, res, arg1); }
#define glShaderOp1EXT tunisShaderOp1EXT
TUNIS_FORCE_INLINE void  tunisShaderOp2EXT(GLenum op, GLuint res, GLuint arg1, GLuint arg2) { tunisGL.tunisShaderOp2EXT(op, res, arg1, arg2); }
#define glShaderOp2EXT tunisShaderOp2EXT
TUNIS_FORCE_INLINE void  tunisShaderOp3EXT(GLenum op, GLuint res, GLuint arg1, GLuint arg2, GLuint arg3) { tunisGL.tunisShaderOp3EXT(op, res, arg1, arg2, arg3); }
#define glShaderOp3EXT tunisShaderOp3EXT
TUNIS_FORCE_INLINE void  tunisShaderSource(GLuint shader, GLsizei count, const GLchar *const* string, const GLint * length) { tunisGL.tunisShaderSource(shader, count, string, length); }
#define glShaderSource tunisShaderSource
TUNIS_FORCE_INLINE void  tunisShaderSourceARB(GLhandleARB shaderObj, GLsizei count, const GLcharARB ** string, const GLint * length) { tunisGL.tunisShaderSourceARB(shaderObj, count, string, length); }
#define glShaderSourceARB tunisShaderSourceARB
TUNIS_FORCE_INLINE void  tunisShaderStorageBlockBinding(GLuint program, GLuint storageBlockIndex, GLuint storageBlockBinding) { tunisGL.tunisShaderStorageBlockBinding(program, storageBlockIndex, storageBlockBinding); }
#define glShaderStorageBlockBinding tunisShaderStorageBlockBinding
TUNIS_FORCE_INLINE void  tunisShadingRateImageBarrierNV(GLboolean synchronize) { tunisGL.tunisShadingRateImageBarrierNV(synchronize); }
#define glShadingRateImageBarrierNV tunisShadingRateImageBarrierNV
TUNIS_FORCE_INLINE void  tunisShadingRateImagePaletteNV(GLuint viewport, GLuint first, GLsizei count, const GLenum * rates) { tunisGL.tunisShadingRateImagePaletteNV(viewport, first, count, rates); }
#define glShadingRateImagePaletteNV tunisShadingRateImagePaletteNV
TUNIS_FORCE_INLINE void  tunisShadingRateSampleOrderCustomNV(GLenum rate, GLuint samples, const GLint * locations) { tunisGL.tunisShadingRateSampleOrderCustomNV(rate, samples, locations); }
#define glShadingRateSampleOrderCustomNV tunisShadingRateSampleOrderCustomNV
TUNIS_FORCE_INLINE void  tunisShadingRateSampleOrderNV(GLenum order) { tunisGL.tunisShadingRateSampleOrderNV(order); }
#define glShadingRateSampleOrderNV tunisShadingRateSampleOrderNV
TUNIS_FORCE_INLINE void  tunisSharpenTexFuncSGIS(GLenum target, GLsizei n, const GLfloat * points) { tunisGL.tunisSharpenTexFuncSGIS(target, n, points); }
#define glSharpenTexFuncSGIS tunisSharpenTexFuncSGIS
TUNIS_FORCE_INLINE void  tunisSignalSemaphoreEXT(GLuint semaphore, GLuint numBufferBarriers, const GLuint * buffers, GLuint numTextureBarriers, const GLuint * textures, const GLenum * dstLayouts) { tunisGL.tunisSignalSemaphoreEXT(semaphore, numBufferBarriers, buffers, numTextureBarriers, textures, dstLayouts); }
#define glSignalSemaphoreEXT tunisSignalSemaphoreEXT
TUNIS_FORCE_INLINE void  tunisSignalVkFenceNV(GLuint64 vkFence) { tunisGL.tunisSignalVkFenceNV(vkFence); }
#define glSignalVkFenceNV tunisSignalVkFenceNV
TUNIS_FORCE_INLINE void  tunisSignalVkSemaphoreNV(GLuint64 vkSemaphore) { tunisGL.tunisSignalVkSemaphoreNV(vkSemaphore); }
#define glSignalVkSemaphoreNV tunisSignalVkSemaphoreNV
TUNIS_FORCE_INLINE void  tunisSpecializeShader(GLuint shader, const GLchar * pEntryPoint, GLuint numSpecializationConstants, const GLuint * pConstantIndex, const GLuint * pConstantValue) { tunisGL.tunisSpecializeShader(shader, pEntryPoint, numSpecializationConstants, pConstantIndex, pConstantValue); }
#define glSpecializeShader tunisSpecializeShader
TUNIS_FORCE_INLINE void  tunisSpecializeShaderARB(GLuint shader, const GLchar * pEntryPoint, GLuint numSpecializationConstants, const GLuint * pConstantIndex, const GLuint * pConstantValue) { tunisGL.tunisSpecializeShaderARB(shader, pEntryPoint, numSpecializationConstants, pConstantIndex, pConstantValue); }
#define glSpecializeShaderARB tunisSpecializeShaderARB
TUNIS_FORCE_INLINE void  tunisSpriteParameterfSGIX(GLenum pname, GLfloat param) { tunisGL.tunisSpriteParameterfSGIX(pname, param); }
#define glSpriteParameterfSGIX tunisSpriteParameterfSGIX
TUNIS_FORCE_INLINE void  tunisSpriteParameterfvSGIX(GLenum pname, const GLfloat * params) { tunisGL.tunisSpriteParameterfvSGIX(pname, params); }
#define glSpriteParameterfvSGIX tunisSpriteParameterfvSGIX
TUNIS_FORCE_INLINE void  tunisSpriteParameteriSGIX(GLenum pname, GLint param) { tunisGL.tunisSpriteParameteriSGIX(pname, param); }
#define glSpriteParameteriSGIX tunisSpriteParameteriSGIX
TUNIS_FORCE_INLINE void  tunisSpriteParameterivSGIX(GLenum pname, const GLint * params) { tunisGL.tunisSpriteParameterivSGIX(pname, params); }
#define glSpriteParameterivSGIX tunisSpriteParameterivSGIX
TUNIS_FORCE_INLINE void  tunisStartInstrumentsSGIX(void) { tunisGL.tunisStartInstrumentsSGIX(); }
#define glStartInstrumentsSGIX tunisStartInstrumentsSGIX
TUNIS_FORCE_INLINE void  tunisStartTilingQCOM(GLuint x, GLuint y, GLuint width, GLuint height, GLbitfield preserveMask) { tunisGL.tunisStartTilingQCOM(x, y, width, height, preserveMask); }
#define glStartTilingQCOM tunisStartTilingQCOM
TUNIS_FORCE_INLINE void  tunisStateCaptureNV(GLuint state, GLenum mode) { tunisGL.tunisStateCaptureNV(state, mode); }
#define glStateCaptureNV tunisStateCaptureNV
TUNIS_FORCE_INLINE void  tunisStencilClearTagEXT(GLsizei stencilTagBits, GLuint stencilClearTag) { tunisGL.tunisStencilClearTagEXT(stencilTagBits, stencilClearTag); }
#define glStencilClearTagEXT tunisStencilClearTagEXT
TUNIS_FORCE_INLINE void  tunisStencilFillPathInstancedNV(GLsizei numPaths, GLenum pathNameType, const void * paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum transformType, const GLfloat * transformValues) { tunisGL.tunisStencilFillPathInstancedNV(numPaths, pathNameType, paths, pathBase, fillMode, mask, transformType, transformValues); }
#define glStencilFillPathInstancedNV tunisStencilFillPathInstancedNV
TUNIS_FORCE_INLINE void  tunisStencilFillPathNV(GLuint path, GLenum fillMode, GLuint mask) { tunisGL.tunisStencilFillPathNV(path, fillMode, mask); }
#define glStencilFillPathNV tunisStencilFillPathNV
TUNIS_FORCE_INLINE void  tunisStencilFunc(GLenum func, GLint ref, GLuint mask) { tunisGL.tunisStencilFunc(func, ref, mask); }
#define glStencilFunc tunisStencilFunc
TUNIS_FORCE_INLINE void  tunisStencilFuncSeparate(GLenum face, GLenum func, GLint ref, GLuint mask) { tunisGL.tunisStencilFuncSeparate(face, func, ref, mask); }
#define glStencilFuncSeparate tunisStencilFuncSeparate
TUNIS_FORCE_INLINE void  tunisStencilFuncSeparateATI(GLenum frontfunc, GLenum backfunc, GLint ref, GLuint mask) { tunisGL.tunisStencilFuncSeparateATI(frontfunc, backfunc, ref, mask); }
#define glStencilFuncSeparateATI tunisStencilFuncSeparateATI
TUNIS_FORCE_INLINE void  tunisStencilMask(GLuint mask) { tunisGL.tunisStencilMask(mask); }
#define glStencilMask tunisStencilMask
TUNIS_FORCE_INLINE void  tunisStencilMaskSeparate(GLenum face, GLuint mask) { tunisGL.tunisStencilMaskSeparate(face, mask); }
#define glStencilMaskSeparate tunisStencilMaskSeparate
TUNIS_FORCE_INLINE void  tunisStencilOp(GLenum fail, GLenum zfail, GLenum zpass) { tunisGL.tunisStencilOp(fail, zfail, zpass); }
#define glStencilOp tunisStencilOp
TUNIS_FORCE_INLINE void  tunisStencilOpSeparate(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass) { tunisGL.tunisStencilOpSeparate(face, sfail, dpfail, dppass); }
#define glStencilOpSeparate tunisStencilOpSeparate
TUNIS_FORCE_INLINE void  tunisStencilOpSeparateATI(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass) { tunisGL.tunisStencilOpSeparateATI(face, sfail, dpfail, dppass); }
#define glStencilOpSeparateATI tunisStencilOpSeparateATI
TUNIS_FORCE_INLINE void  tunisStencilOpValueAMD(GLenum face, GLuint value) { tunisGL.tunisStencilOpValueAMD(face, value); }
#define glStencilOpValueAMD tunisStencilOpValueAMD
TUNIS_FORCE_INLINE void  tunisStencilStrokePathInstancedNV(GLsizei numPaths, GLenum pathNameType, const void * paths, GLuint pathBase, GLint reference, GLuint mask, GLenum transformType, const GLfloat * transformValues) { tunisGL.tunisStencilStrokePathInstancedNV(numPaths, pathNameType, paths, pathBase, reference, mask, transformType, transformValues); }
#define glStencilStrokePathInstancedNV tunisStencilStrokePathInstancedNV
TUNIS_FORCE_INLINE void  tunisStencilStrokePathNV(GLuint path, GLint reference, GLuint mask) { tunisGL.tunisStencilStrokePathNV(path, reference, mask); }
#define glStencilStrokePathNV tunisStencilStrokePathNV
TUNIS_FORCE_INLINE void  tunisStencilThenCoverFillPathInstancedNV(GLsizei numPaths, GLenum pathNameType, const void * paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum coverMode, GLenum transformType, const GLfloat * transformValues) { tunisGL.tunisStencilThenCoverFillPathInstancedNV(numPaths, pathNameType, paths, pathBase, fillMode, mask, coverMode, transformType, transformValues); }
#define glStencilThenCoverFillPathInstancedNV tunisStencilThenCoverFillPathInstancedNV
TUNIS_FORCE_INLINE void  tunisStencilThenCoverFillPathNV(GLuint path, GLenum fillMode, GLuint mask, GLenum coverMode) { tunisGL.tunisStencilThenCoverFillPathNV(path, fillMode, mask, coverMode); }
#define glStencilThenCoverFillPathNV tunisStencilThenCoverFillPathNV
TUNIS_FORCE_INLINE void  tunisStencilThenCoverStrokePathInstancedNV(GLsizei numPaths, GLenum pathNameType, const void * paths, GLuint pathBase, GLint reference, GLuint mask, GLenum coverMode, GLenum transformType, const GLfloat * transformValues) { tunisGL.tunisStencilThenCoverStrokePathInstancedNV(numPaths, pathNameType, paths, pathBase, reference, mask, coverMode, transformType, transformValues); }
#define glStencilThenCoverStrokePathInstancedNV tunisStencilThenCoverStrokePathInstancedNV
TUNIS_FORCE_INLINE void  tunisStencilThenCoverStrokePathNV(GLuint path, GLint reference, GLuint mask, GLenum coverMode) { tunisGL.tunisStencilThenCoverStrokePathNV(path, reference, mask, coverMode); }
#define glStencilThenCoverStrokePathNV tunisStencilThenCoverStrokePathNV
TUNIS_FORCE_INLINE void  tunisStopInstrumentsSGIX(GLint marker) { tunisGL.tunisStopInstrumentsSGIX(marker); }
#define glStopInstrumentsSGIX tunisStopInstrumentsSGIX
TUNIS_FORCE_INLINE void  tunisStringMarkerGREMEDY(GLsizei len, const void * string) { tunisGL.tunisStringMarkerGREMEDY(len, string); }
#define glStringMarkerGREMEDY tunisStringMarkerGREMEDY
TUNIS_FORCE_INLINE void  tunisSubpixelPrecisionBiasNV(GLuint xbits, GLuint ybits) { tunisGL.tunisSubpixelPrecisionBiasNV(xbits, ybits); }
#define glSubpixelPrecisionBiasNV tunisSubpixelPrecisionBiasNV
TUNIS_FORCE_INLINE void  tunisSwizzleEXT(GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW) { tunisGL.tunisSwizzleEXT(res, in, outX, outY, outZ, outW); }
#define glSwizzleEXT tunisSwizzleEXT
TUNIS_FORCE_INLINE void  tunisSyncTextureINTEL(GLuint texture) { tunisGL.tunisSyncTextureINTEL(texture); }
#define glSyncTextureINTEL tunisSyncTextureINTEL
TUNIS_FORCE_INLINE void  tunisTagSampleBufferSGIX(void) { tunisGL.tunisTagSampleBufferSGIX(); }
#define glTagSampleBufferSGIX tunisTagSampleBufferSGIX
TUNIS_FORCE_INLINE void  tunisTangent3bEXT(GLbyte tx, GLbyte ty, GLbyte tz) { tunisGL.tunisTangent3bEXT(tx, ty, tz); }
#define glTangent3bEXT tunisTangent3bEXT
TUNIS_FORCE_INLINE void  tunisTangent3bvEXT(const GLbyte * v) { tunisGL.tunisTangent3bvEXT(v); }
#define glTangent3bvEXT tunisTangent3bvEXT
TUNIS_FORCE_INLINE void  tunisTangent3dEXT(GLdouble tx, GLdouble ty, GLdouble tz) { tunisGL.tunisTangent3dEXT(tx, ty, tz); }
#define glTangent3dEXT tunisTangent3dEXT
TUNIS_FORCE_INLINE void  tunisTangent3dvEXT(const GLdouble * v) { tunisGL.tunisTangent3dvEXT(v); }
#define glTangent3dvEXT tunisTangent3dvEXT
TUNIS_FORCE_INLINE void  tunisTangent3fEXT(GLfloat tx, GLfloat ty, GLfloat tz) { tunisGL.tunisTangent3fEXT(tx, ty, tz); }
#define glTangent3fEXT tunisTangent3fEXT
TUNIS_FORCE_INLINE void  tunisTangent3fvEXT(const GLfloat * v) { tunisGL.tunisTangent3fvEXT(v); }
#define glTangent3fvEXT tunisTangent3fvEXT
TUNIS_FORCE_INLINE void  tunisTangent3iEXT(GLint tx, GLint ty, GLint tz) { tunisGL.tunisTangent3iEXT(tx, ty, tz); }
#define glTangent3iEXT tunisTangent3iEXT
TUNIS_FORCE_INLINE void  tunisTangent3ivEXT(const GLint * v) { tunisGL.tunisTangent3ivEXT(v); }
#define glTangent3ivEXT tunisTangent3ivEXT
TUNIS_FORCE_INLINE void  tunisTangent3sEXT(GLshort tx, GLshort ty, GLshort tz) { tunisGL.tunisTangent3sEXT(tx, ty, tz); }
#define glTangent3sEXT tunisTangent3sEXT
TUNIS_FORCE_INLINE void  tunisTangent3svEXT(const GLshort * v) { tunisGL.tunisTangent3svEXT(v); }
#define glTangent3svEXT tunisTangent3svEXT
TUNIS_FORCE_INLINE void  tunisTangentPointerEXT(GLenum type, GLsizei stride, const void * pointer) { tunisGL.tunisTangentPointerEXT(type, stride, pointer); }
#define glTangentPointerEXT tunisTangentPointerEXT
TUNIS_FORCE_INLINE void  tunisTbufferMask3DFX(GLuint mask) { tunisGL.tunisTbufferMask3DFX(mask); }
#define glTbufferMask3DFX tunisTbufferMask3DFX
TUNIS_FORCE_INLINE void  tunisTessellationFactorAMD(GLfloat factor) { tunisGL.tunisTessellationFactorAMD(factor); }
#define glTessellationFactorAMD tunisTessellationFactorAMD
TUNIS_FORCE_INLINE void  tunisTessellationModeAMD(GLenum mode) { tunisGL.tunisTessellationModeAMD(mode); }
#define glTessellationModeAMD tunisTessellationModeAMD
TUNIS_FORCE_INLINE GLboolean tunisTestFenceAPPLE(GLuint fence) { return tunisGL.tunisTestFenceAPPLE(fence); }
#define glTestFenceAPPLE tunisTestFenceAPPLE
TUNIS_FORCE_INLINE GLboolean tunisTestFenceNV(GLuint fence) { return tunisGL.tunisTestFenceNV(fence); }
#define glTestFenceNV tunisTestFenceNV
TUNIS_FORCE_INLINE GLboolean tunisTestObjectAPPLE(GLenum object, GLuint name) { return tunisGL.tunisTestObjectAPPLE(object, name); }
#define glTestObjectAPPLE tunisTestObjectAPPLE
TUNIS_FORCE_INLINE void  tunisTexAttachMemoryNV(GLenum target, GLuint memory, GLuint64 offset) { tunisGL.tunisTexAttachMemoryNV(target, memory, offset); }
#define glTexAttachMemoryNV tunisTexAttachMemoryNV
TUNIS_FORCE_INLINE void  tunisTexBuffer(GLenum target, GLenum internalformat, GLuint buffer) { tunisGL.tunisTexBuffer(target, internalformat, buffer); }
#define glTexBuffer tunisTexBuffer
TUNIS_FORCE_INLINE void  tunisTexBufferARB(GLenum target, GLenum internalformat, GLuint buffer) { tunisGL.tunisTexBufferARB(target, internalformat, buffer); }
#define glTexBufferARB tunisTexBufferARB
TUNIS_FORCE_INLINE void  tunisTexBufferEXT(GLenum target, GLenum internalformat, GLuint buffer) { tunisGL.tunisTexBufferEXT(target, internalformat, buffer); }
#define glTexBufferEXT tunisTexBufferEXT
TUNIS_FORCE_INLINE void  tunisTexBufferOES(GLenum target, GLenum internalformat, GLuint buffer) { tunisGL.tunisTexBufferOES(target, internalformat, buffer); }
#define glTexBufferOES tunisTexBufferOES
TUNIS_FORCE_INLINE void  tunisTexBufferRange(GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size) { tunisGL.tunisTexBufferRange(target, internalformat, buffer, offset, size); }
#define glTexBufferRange tunisTexBufferRange
TUNIS_FORCE_INLINE void  tunisTexBufferRangeEXT(GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size) { tunisGL.tunisTexBufferRangeEXT(target, internalformat, buffer, offset, size); }
#define glTexBufferRangeEXT tunisTexBufferRangeEXT
TUNIS_FORCE_INLINE void  tunisTexBufferRangeOES(GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size) { tunisGL.tunisTexBufferRangeOES(target, internalformat, buffer, offset, size); }
#define glTexBufferRangeOES tunisTexBufferRangeOES
TUNIS_FORCE_INLINE void  tunisTexBumpParameterfvATI(GLenum pname, const GLfloat * param) { tunisGL.tunisTexBumpParameterfvATI(pname, param); }
#define glTexBumpParameterfvATI tunisTexBumpParameterfvATI
TUNIS_FORCE_INLINE void  tunisTexBumpParameterivATI(GLenum pname, const GLint * param) { tunisGL.tunisTexBumpParameterivATI(pname, param); }
#define glTexBumpParameterivATI tunisTexBumpParameterivATI
TUNIS_FORCE_INLINE void  tunisTexCoord1bOES(GLbyte s) { tunisGL.tunisTexCoord1bOES(s); }
#define glTexCoord1bOES tunisTexCoord1bOES
TUNIS_FORCE_INLINE void  tunisTexCoord1bvOES(const GLbyte * coords) { tunisGL.tunisTexCoord1bvOES(coords); }
#define glTexCoord1bvOES tunisTexCoord1bvOES
TUNIS_FORCE_INLINE void  tunisTexCoord1d(GLdouble s) { tunisGL.tunisTexCoord1d(s); }
#define glTexCoord1d tunisTexCoord1d
TUNIS_FORCE_INLINE void  tunisTexCoord1dv(const GLdouble * v) { tunisGL.tunisTexCoord1dv(v); }
#define glTexCoord1dv tunisTexCoord1dv
TUNIS_FORCE_INLINE void  tunisTexCoord1f(GLfloat s) { tunisGL.tunisTexCoord1f(s); }
#define glTexCoord1f tunisTexCoord1f
TUNIS_FORCE_INLINE void  tunisTexCoord1fv(const GLfloat * v) { tunisGL.tunisTexCoord1fv(v); }
#define glTexCoord1fv tunisTexCoord1fv
TUNIS_FORCE_INLINE void  tunisTexCoord1hNV(GLhalfNV s) { tunisGL.tunisTexCoord1hNV(s); }
#define glTexCoord1hNV tunisTexCoord1hNV
TUNIS_FORCE_INLINE void  tunisTexCoord1hvNV(const GLhalfNV * v) { tunisGL.tunisTexCoord1hvNV(v); }
#define glTexCoord1hvNV tunisTexCoord1hvNV
TUNIS_FORCE_INLINE void  tunisTexCoord1i(GLint s) { tunisGL.tunisTexCoord1i(s); }
#define glTexCoord1i tunisTexCoord1i
TUNIS_FORCE_INLINE void  tunisTexCoord1iv(const GLint * v) { tunisGL.tunisTexCoord1iv(v); }
#define glTexCoord1iv tunisTexCoord1iv
TUNIS_FORCE_INLINE void  tunisTexCoord1s(GLshort s) { tunisGL.tunisTexCoord1s(s); }
#define glTexCoord1s tunisTexCoord1s
TUNIS_FORCE_INLINE void  tunisTexCoord1sv(const GLshort * v) { tunisGL.tunisTexCoord1sv(v); }
#define glTexCoord1sv tunisTexCoord1sv
TUNIS_FORCE_INLINE void  tunisTexCoord1xOES(GLfixed s) { tunisGL.tunisTexCoord1xOES(s); }
#define glTexCoord1xOES tunisTexCoord1xOES
TUNIS_FORCE_INLINE void  tunisTexCoord1xvOES(const GLfixed * coords) { tunisGL.tunisTexCoord1xvOES(coords); }
#define glTexCoord1xvOES tunisTexCoord1xvOES
TUNIS_FORCE_INLINE void  tunisTexCoord2bOES(GLbyte s, GLbyte t) { tunisGL.tunisTexCoord2bOES(s, t); }
#define glTexCoord2bOES tunisTexCoord2bOES
TUNIS_FORCE_INLINE void  tunisTexCoord2bvOES(const GLbyte * coords) { tunisGL.tunisTexCoord2bvOES(coords); }
#define glTexCoord2bvOES tunisTexCoord2bvOES
TUNIS_FORCE_INLINE void  tunisTexCoord2d(GLdouble s, GLdouble t) { tunisGL.tunisTexCoord2d(s, t); }
#define glTexCoord2d tunisTexCoord2d
TUNIS_FORCE_INLINE void  tunisTexCoord2dv(const GLdouble * v) { tunisGL.tunisTexCoord2dv(v); }
#define glTexCoord2dv tunisTexCoord2dv
TUNIS_FORCE_INLINE void  tunisTexCoord2f(GLfloat s, GLfloat t) { tunisGL.tunisTexCoord2f(s, t); }
#define glTexCoord2f tunisTexCoord2f
TUNIS_FORCE_INLINE void  tunisTexCoord2fColor3fVertex3fSUN(GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z) { tunisGL.tunisTexCoord2fColor3fVertex3fSUN(s, t, r, g, b, x, y, z); }
#define glTexCoord2fColor3fVertex3fSUN tunisTexCoord2fColor3fVertex3fSUN
TUNIS_FORCE_INLINE void  tunisTexCoord2fColor3fVertex3fvSUN(const GLfloat * tc, const GLfloat * c, const GLfloat * v) { tunisGL.tunisTexCoord2fColor3fVertex3fvSUN(tc, c, v); }
#define glTexCoord2fColor3fVertex3fvSUN tunisTexCoord2fColor3fVertex3fvSUN
TUNIS_FORCE_INLINE void  tunisTexCoord2fColor4fNormal3fVertex3fSUN(GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z) { tunisGL.tunisTexCoord2fColor4fNormal3fVertex3fSUN(s, t, r, g, b, a, nx, ny, nz, x, y, z); }
#define glTexCoord2fColor4fNormal3fVertex3fSUN tunisTexCoord2fColor4fNormal3fVertex3fSUN
TUNIS_FORCE_INLINE void  tunisTexCoord2fColor4fNormal3fVertex3fvSUN(const GLfloat * tc, const GLfloat * c, const GLfloat * n, const GLfloat * v) { tunisGL.tunisTexCoord2fColor4fNormal3fVertex3fvSUN(tc, c, n, v); }
#define glTexCoord2fColor4fNormal3fVertex3fvSUN tunisTexCoord2fColor4fNormal3fVertex3fvSUN
TUNIS_FORCE_INLINE void  tunisTexCoord2fColor4ubVertex3fSUN(GLfloat s, GLfloat t, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z) { tunisGL.tunisTexCoord2fColor4ubVertex3fSUN(s, t, r, g, b, a, x, y, z); }
#define glTexCoord2fColor4ubVertex3fSUN tunisTexCoord2fColor4ubVertex3fSUN
TUNIS_FORCE_INLINE void  tunisTexCoord2fColor4ubVertex3fvSUN(const GLfloat * tc, const GLubyte * c, const GLfloat * v) { tunisGL.tunisTexCoord2fColor4ubVertex3fvSUN(tc, c, v); }
#define glTexCoord2fColor4ubVertex3fvSUN tunisTexCoord2fColor4ubVertex3fvSUN
TUNIS_FORCE_INLINE void  tunisTexCoord2fNormal3fVertex3fSUN(GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z) { tunisGL.tunisTexCoord2fNormal3fVertex3fSUN(s, t, nx, ny, nz, x, y, z); }
#define glTexCoord2fNormal3fVertex3fSUN tunisTexCoord2fNormal3fVertex3fSUN
TUNIS_FORCE_INLINE void  tunisTexCoord2fNormal3fVertex3fvSUN(const GLfloat * tc, const GLfloat * n, const GLfloat * v) { tunisGL.tunisTexCoord2fNormal3fVertex3fvSUN(tc, n, v); }
#define glTexCoord2fNormal3fVertex3fvSUN tunisTexCoord2fNormal3fVertex3fvSUN
TUNIS_FORCE_INLINE void  tunisTexCoord2fVertex3fSUN(GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z) { tunisGL.tunisTexCoord2fVertex3fSUN(s, t, x, y, z); }
#define glTexCoord2fVertex3fSUN tunisTexCoord2fVertex3fSUN
TUNIS_FORCE_INLINE void  tunisTexCoord2fVertex3fvSUN(const GLfloat * tc, const GLfloat * v) { tunisGL.tunisTexCoord2fVertex3fvSUN(tc, v); }
#define glTexCoord2fVertex3fvSUN tunisTexCoord2fVertex3fvSUN
TUNIS_FORCE_INLINE void  tunisTexCoord2fv(const GLfloat * v) { tunisGL.tunisTexCoord2fv(v); }
#define glTexCoord2fv tunisTexCoord2fv
TUNIS_FORCE_INLINE void  tunisTexCoord2hNV(GLhalfNV s, GLhalfNV t) { tunisGL.tunisTexCoord2hNV(s, t); }
#define glTexCoord2hNV tunisTexCoord2hNV
TUNIS_FORCE_INLINE void  tunisTexCoord2hvNV(const GLhalfNV * v) { tunisGL.tunisTexCoord2hvNV(v); }
#define glTexCoord2hvNV tunisTexCoord2hvNV
TUNIS_FORCE_INLINE void  tunisTexCoord2i(GLint s, GLint t) { tunisGL.tunisTexCoord2i(s, t); }
#define glTexCoord2i tunisTexCoord2i
TUNIS_FORCE_INLINE void  tunisTexCoord2iv(const GLint * v) { tunisGL.tunisTexCoord2iv(v); }
#define glTexCoord2iv tunisTexCoord2iv
TUNIS_FORCE_INLINE void  tunisTexCoord2s(GLshort s, GLshort t) { tunisGL.tunisTexCoord2s(s, t); }
#define glTexCoord2s tunisTexCoord2s
TUNIS_FORCE_INLINE void  tunisTexCoord2sv(const GLshort * v) { tunisGL.tunisTexCoord2sv(v); }
#define glTexCoord2sv tunisTexCoord2sv
TUNIS_FORCE_INLINE void  tunisTexCoord2xOES(GLfixed s, GLfixed t) { tunisGL.tunisTexCoord2xOES(s, t); }
#define glTexCoord2xOES tunisTexCoord2xOES
TUNIS_FORCE_INLINE void  tunisTexCoord2xvOES(const GLfixed * coords) { tunisGL.tunisTexCoord2xvOES(coords); }
#define glTexCoord2xvOES tunisTexCoord2xvOES
TUNIS_FORCE_INLINE void  tunisTexCoord3bOES(GLbyte s, GLbyte t, GLbyte r) { tunisGL.tunisTexCoord3bOES(s, t, r); }
#define glTexCoord3bOES tunisTexCoord3bOES
TUNIS_FORCE_INLINE void  tunisTexCoord3bvOES(const GLbyte * coords) { tunisGL.tunisTexCoord3bvOES(coords); }
#define glTexCoord3bvOES tunisTexCoord3bvOES
TUNIS_FORCE_INLINE void  tunisTexCoord3d(GLdouble s, GLdouble t, GLdouble r) { tunisGL.tunisTexCoord3d(s, t, r); }
#define glTexCoord3d tunisTexCoord3d
TUNIS_FORCE_INLINE void  tunisTexCoord3dv(const GLdouble * v) { tunisGL.tunisTexCoord3dv(v); }
#define glTexCoord3dv tunisTexCoord3dv
TUNIS_FORCE_INLINE void  tunisTexCoord3f(GLfloat s, GLfloat t, GLfloat r) { tunisGL.tunisTexCoord3f(s, t, r); }
#define glTexCoord3f tunisTexCoord3f
TUNIS_FORCE_INLINE void  tunisTexCoord3fv(const GLfloat * v) { tunisGL.tunisTexCoord3fv(v); }
#define glTexCoord3fv tunisTexCoord3fv
TUNIS_FORCE_INLINE void  tunisTexCoord3hNV(GLhalfNV s, GLhalfNV t, GLhalfNV r) { tunisGL.tunisTexCoord3hNV(s, t, r); }
#define glTexCoord3hNV tunisTexCoord3hNV
TUNIS_FORCE_INLINE void  tunisTexCoord3hvNV(const GLhalfNV * v) { tunisGL.tunisTexCoord3hvNV(v); }
#define glTexCoord3hvNV tunisTexCoord3hvNV
TUNIS_FORCE_INLINE void  tunisTexCoord3i(GLint s, GLint t, GLint r) { tunisGL.tunisTexCoord3i(s, t, r); }
#define glTexCoord3i tunisTexCoord3i
TUNIS_FORCE_INLINE void  tunisTexCoord3iv(const GLint * v) { tunisGL.tunisTexCoord3iv(v); }
#define glTexCoord3iv tunisTexCoord3iv
TUNIS_FORCE_INLINE void  tunisTexCoord3s(GLshort s, GLshort t, GLshort r) { tunisGL.tunisTexCoord3s(s, t, r); }
#define glTexCoord3s tunisTexCoord3s
TUNIS_FORCE_INLINE void  tunisTexCoord3sv(const GLshort * v) { tunisGL.tunisTexCoord3sv(v); }
#define glTexCoord3sv tunisTexCoord3sv
TUNIS_FORCE_INLINE void  tunisTexCoord3xOES(GLfixed s, GLfixed t, GLfixed r) { tunisGL.tunisTexCoord3xOES(s, t, r); }
#define glTexCoord3xOES tunisTexCoord3xOES
TUNIS_FORCE_INLINE void  tunisTexCoord3xvOES(const GLfixed * coords) { tunisGL.tunisTexCoord3xvOES(coords); }
#define glTexCoord3xvOES tunisTexCoord3xvOES
TUNIS_FORCE_INLINE void  tunisTexCoord4bOES(GLbyte s, GLbyte t, GLbyte r, GLbyte q) { tunisGL.tunisTexCoord4bOES(s, t, r, q); }
#define glTexCoord4bOES tunisTexCoord4bOES
TUNIS_FORCE_INLINE void  tunisTexCoord4bvOES(const GLbyte * coords) { tunisGL.tunisTexCoord4bvOES(coords); }
#define glTexCoord4bvOES tunisTexCoord4bvOES
TUNIS_FORCE_INLINE void  tunisTexCoord4d(GLdouble s, GLdouble t, GLdouble r, GLdouble q) { tunisGL.tunisTexCoord4d(s, t, r, q); }
#define glTexCoord4d tunisTexCoord4d
TUNIS_FORCE_INLINE void  tunisTexCoord4dv(const GLdouble * v) { tunisGL.tunisTexCoord4dv(v); }
#define glTexCoord4dv tunisTexCoord4dv
TUNIS_FORCE_INLINE void  tunisTexCoord4f(GLfloat s, GLfloat t, GLfloat r, GLfloat q) { tunisGL.tunisTexCoord4f(s, t, r, q); }
#define glTexCoord4f tunisTexCoord4f
TUNIS_FORCE_INLINE void  tunisTexCoord4fColor4fNormal3fVertex4fSUN(GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z, GLfloat w) { tunisGL.tunisTexCoord4fColor4fNormal3fVertex4fSUN(s, t, p, q, r, g, b, a, nx, ny, nz, x, y, z, w); }
#define glTexCoord4fColor4fNormal3fVertex4fSUN tunisTexCoord4fColor4fNormal3fVertex4fSUN
TUNIS_FORCE_INLINE void  tunisTexCoord4fColor4fNormal3fVertex4fvSUN(const GLfloat * tc, const GLfloat * c, const GLfloat * n, const GLfloat * v) { tunisGL.tunisTexCoord4fColor4fNormal3fVertex4fvSUN(tc, c, n, v); }
#define glTexCoord4fColor4fNormal3fVertex4fvSUN tunisTexCoord4fColor4fNormal3fVertex4fvSUN
TUNIS_FORCE_INLINE void  tunisTexCoord4fVertex4fSUN(GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat x, GLfloat y, GLfloat z, GLfloat w) { tunisGL.tunisTexCoord4fVertex4fSUN(s, t, p, q, x, y, z, w); }
#define glTexCoord4fVertex4fSUN tunisTexCoord4fVertex4fSUN
TUNIS_FORCE_INLINE void  tunisTexCoord4fVertex4fvSUN(const GLfloat * tc, const GLfloat * v) { tunisGL.tunisTexCoord4fVertex4fvSUN(tc, v); }
#define glTexCoord4fVertex4fvSUN tunisTexCoord4fVertex4fvSUN
TUNIS_FORCE_INLINE void  tunisTexCoord4fv(const GLfloat * v) { tunisGL.tunisTexCoord4fv(v); }
#define glTexCoord4fv tunisTexCoord4fv
TUNIS_FORCE_INLINE void  tunisTexCoord4hNV(GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q) { tunisGL.tunisTexCoord4hNV(s, t, r, q); }
#define glTexCoord4hNV tunisTexCoord4hNV
TUNIS_FORCE_INLINE void  tunisTexCoord4hvNV(const GLhalfNV * v) { tunisGL.tunisTexCoord4hvNV(v); }
#define glTexCoord4hvNV tunisTexCoord4hvNV
TUNIS_FORCE_INLINE void  tunisTexCoord4i(GLint s, GLint t, GLint r, GLint q) { tunisGL.tunisTexCoord4i(s, t, r, q); }
#define glTexCoord4i tunisTexCoord4i
TUNIS_FORCE_INLINE void  tunisTexCoord4iv(const GLint * v) { tunisGL.tunisTexCoord4iv(v); }
#define glTexCoord4iv tunisTexCoord4iv
TUNIS_FORCE_INLINE void  tunisTexCoord4s(GLshort s, GLshort t, GLshort r, GLshort q) { tunisGL.tunisTexCoord4s(s, t, r, q); }
#define glTexCoord4s tunisTexCoord4s
TUNIS_FORCE_INLINE void  tunisTexCoord4sv(const GLshort * v) { tunisGL.tunisTexCoord4sv(v); }
#define glTexCoord4sv tunisTexCoord4sv
TUNIS_FORCE_INLINE void  tunisTexCoord4xOES(GLfixed s, GLfixed t, GLfixed r, GLfixed q) { tunisGL.tunisTexCoord4xOES(s, t, r, q); }
#define glTexCoord4xOES tunisTexCoord4xOES
TUNIS_FORCE_INLINE void  tunisTexCoord4xvOES(const GLfixed * coords) { tunisGL.tunisTexCoord4xvOES(coords); }
#define glTexCoord4xvOES tunisTexCoord4xvOES
TUNIS_FORCE_INLINE void  tunisTexCoordFormatNV(GLint size, GLenum type, GLsizei stride) { tunisGL.tunisTexCoordFormatNV(size, type, stride); }
#define glTexCoordFormatNV tunisTexCoordFormatNV
TUNIS_FORCE_INLINE void  tunisTexCoordP1ui(GLenum type, GLuint coords) { tunisGL.tunisTexCoordP1ui(type, coords); }
#define glTexCoordP1ui tunisTexCoordP1ui
TUNIS_FORCE_INLINE void  tunisTexCoordP1uiv(GLenum type, const GLuint * coords) { tunisGL.tunisTexCoordP1uiv(type, coords); }
#define glTexCoordP1uiv tunisTexCoordP1uiv
TUNIS_FORCE_INLINE void  tunisTexCoordP2ui(GLenum type, GLuint coords) { tunisGL.tunisTexCoordP2ui(type, coords); }
#define glTexCoordP2ui tunisTexCoordP2ui
TUNIS_FORCE_INLINE void  tunisTexCoordP2uiv(GLenum type, const GLuint * coords) { tunisGL.tunisTexCoordP2uiv(type, coords); }
#define glTexCoordP2uiv tunisTexCoordP2uiv
TUNIS_FORCE_INLINE void  tunisTexCoordP3ui(GLenum type, GLuint coords) { tunisGL.tunisTexCoordP3ui(type, coords); }
#define glTexCoordP3ui tunisTexCoordP3ui
TUNIS_FORCE_INLINE void  tunisTexCoordP3uiv(GLenum type, const GLuint * coords) { tunisGL.tunisTexCoordP3uiv(type, coords); }
#define glTexCoordP3uiv tunisTexCoordP3uiv
TUNIS_FORCE_INLINE void  tunisTexCoordP4ui(GLenum type, GLuint coords) { tunisGL.tunisTexCoordP4ui(type, coords); }
#define glTexCoordP4ui tunisTexCoordP4ui
TUNIS_FORCE_INLINE void  tunisTexCoordP4uiv(GLenum type, const GLuint * coords) { tunisGL.tunisTexCoordP4uiv(type, coords); }
#define glTexCoordP4uiv tunisTexCoordP4uiv
TUNIS_FORCE_INLINE void  tunisTexCoordPointer(GLint size, GLenum type, GLsizei stride, const void * pointer) { tunisGL.tunisTexCoordPointer(size, type, stride, pointer); }
#define glTexCoordPointer tunisTexCoordPointer
TUNIS_FORCE_INLINE void  tunisTexCoordPointerEXT(GLint size, GLenum type, GLsizei stride, GLsizei count, const void * pointer) { tunisGL.tunisTexCoordPointerEXT(size, type, stride, count, pointer); }
#define glTexCoordPointerEXT tunisTexCoordPointerEXT
TUNIS_FORCE_INLINE void  tunisTexCoordPointerListIBM(GLint size, GLenum type, GLint stride, const void ** pointer, GLint ptrstride) { tunisGL.tunisTexCoordPointerListIBM(size, type, stride, pointer, ptrstride); }
#define glTexCoordPointerListIBM tunisTexCoordPointerListIBM
TUNIS_FORCE_INLINE void  tunisTexCoordPointervINTEL(GLint size, GLenum type, const void ** pointer) { tunisGL.tunisTexCoordPointervINTEL(size, type, pointer); }
#define glTexCoordPointervINTEL tunisTexCoordPointervINTEL
TUNIS_FORCE_INLINE void  tunisTexEnvf(GLenum target, GLenum pname, GLfloat param) { tunisGL.tunisTexEnvf(target, pname, param); }
#define glTexEnvf tunisTexEnvf
TUNIS_FORCE_INLINE void  tunisTexEnvfv(GLenum target, GLenum pname, const GLfloat * params) { tunisGL.tunisTexEnvfv(target, pname, params); }
#define glTexEnvfv tunisTexEnvfv
TUNIS_FORCE_INLINE void  tunisTexEnvi(GLenum target, GLenum pname, GLint param) { tunisGL.tunisTexEnvi(target, pname, param); }
#define glTexEnvi tunisTexEnvi
TUNIS_FORCE_INLINE void  tunisTexEnviv(GLenum target, GLenum pname, const GLint * params) { tunisGL.tunisTexEnviv(target, pname, params); }
#define glTexEnviv tunisTexEnviv
TUNIS_FORCE_INLINE void  tunisTexEnvx(GLenum target, GLenum pname, GLfixed param) { tunisGL.tunisTexEnvx(target, pname, param); }
#define glTexEnvx tunisTexEnvx
TUNIS_FORCE_INLINE void  tunisTexEnvxOES(GLenum target, GLenum pname, GLfixed param) { tunisGL.tunisTexEnvxOES(target, pname, param); }
#define glTexEnvxOES tunisTexEnvxOES
TUNIS_FORCE_INLINE void  tunisTexEnvxv(GLenum target, GLenum pname, const GLfixed * params) { tunisGL.tunisTexEnvxv(target, pname, params); }
#define glTexEnvxv tunisTexEnvxv
TUNIS_FORCE_INLINE void  tunisTexEnvxvOES(GLenum target, GLenum pname, const GLfixed * params) { tunisGL.tunisTexEnvxvOES(target, pname, params); }
#define glTexEnvxvOES tunisTexEnvxvOES
TUNIS_FORCE_INLINE void  tunisTexFilterFuncSGIS(GLenum target, GLenum filter, GLsizei n, const GLfloat * weights) { tunisGL.tunisTexFilterFuncSGIS(target, filter, n, weights); }
#define glTexFilterFuncSGIS tunisTexFilterFuncSGIS
TUNIS_FORCE_INLINE void  tunisTexGend(GLenum coord, GLenum pname, GLdouble param) { tunisGL.tunisTexGend(coord, pname, param); }
#define glTexGend tunisTexGend
TUNIS_FORCE_INLINE void  tunisTexGendv(GLenum coord, GLenum pname, const GLdouble * params) { tunisGL.tunisTexGendv(coord, pname, params); }
#define glTexGendv tunisTexGendv
TUNIS_FORCE_INLINE void  tunisTexGenf(GLenum coord, GLenum pname, GLfloat param) { tunisGL.tunisTexGenf(coord, pname, param); }
#define glTexGenf tunisTexGenf
TUNIS_FORCE_INLINE void  tunisTexGenfOES(GLenum coord, GLenum pname, GLfloat param) { tunisGL.tunisTexGenfOES(coord, pname, param); }
#define glTexGenfOES tunisTexGenfOES
TUNIS_FORCE_INLINE void  tunisTexGenfv(GLenum coord, GLenum pname, const GLfloat * params) { tunisGL.tunisTexGenfv(coord, pname, params); }
#define glTexGenfv tunisTexGenfv
TUNIS_FORCE_INLINE void  tunisTexGenfvOES(GLenum coord, GLenum pname, const GLfloat * params) { tunisGL.tunisTexGenfvOES(coord, pname, params); }
#define glTexGenfvOES tunisTexGenfvOES
TUNIS_FORCE_INLINE void  tunisTexGeni(GLenum coord, GLenum pname, GLint param) { tunisGL.tunisTexGeni(coord, pname, param); }
#define glTexGeni tunisTexGeni
TUNIS_FORCE_INLINE void  tunisTexGeniOES(GLenum coord, GLenum pname, GLint param) { tunisGL.tunisTexGeniOES(coord, pname, param); }
#define glTexGeniOES tunisTexGeniOES
TUNIS_FORCE_INLINE void  tunisTexGeniv(GLenum coord, GLenum pname, const GLint * params) { tunisGL.tunisTexGeniv(coord, pname, params); }
#define glTexGeniv tunisTexGeniv
TUNIS_FORCE_INLINE void  tunisTexGenivOES(GLenum coord, GLenum pname, const GLint * params) { tunisGL.tunisTexGenivOES(coord, pname, params); }
#define glTexGenivOES tunisTexGenivOES
TUNIS_FORCE_INLINE void  tunisTexGenxOES(GLenum coord, GLenum pname, GLfixed param) { tunisGL.tunisTexGenxOES(coord, pname, param); }
#define glTexGenxOES tunisTexGenxOES
TUNIS_FORCE_INLINE void  tunisTexGenxvOES(GLenum coord, GLenum pname, const GLfixed * params) { tunisGL.tunisTexGenxvOES(coord, pname, params); }
#define glTexGenxvOES tunisTexGenxvOES
TUNIS_FORCE_INLINE void  tunisTexImage1D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void * pixels) { tunisGL.tunisTexImage1D(target, level, internalformat, width, border, format, type, pixels); }
#define glTexImage1D tunisTexImage1D
TUNIS_FORCE_INLINE void  tunisTexImage2D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void * pixels) { tunisGL.tunisTexImage2D(target, level, internalformat, width, height, border, format, type, pixels); }
#define glTexImage2D tunisTexImage2D
TUNIS_FORCE_INLINE void  tunisTexImage2DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations) { tunisGL.tunisTexImage2DMultisample(target, samples, internalformat, width, height, fixedsamplelocations); }
#define glTexImage2DMultisample tunisTexImage2DMultisample
TUNIS_FORCE_INLINE void  tunisTexImage2DMultisampleCoverageNV(GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations) { tunisGL.tunisTexImage2DMultisampleCoverageNV(target, coverageSamples, colorSamples, internalFormat, width, height, fixedSampleLocations); }
#define glTexImage2DMultisampleCoverageNV tunisTexImage2DMultisampleCoverageNV
TUNIS_FORCE_INLINE void  tunisTexImage3D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void * pixels) { tunisGL.tunisTexImage3D(target, level, internalformat, width, height, depth, border, format, type, pixels); }
#define glTexImage3D tunisTexImage3D
TUNIS_FORCE_INLINE void  tunisTexImage3DEXT(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void * pixels) { tunisGL.tunisTexImage3DEXT(target, level, internalformat, width, height, depth, border, format, type, pixels); }
#define glTexImage3DEXT tunisTexImage3DEXT
TUNIS_FORCE_INLINE void  tunisTexImage3DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations) { tunisGL.tunisTexImage3DMultisample(target, samples, internalformat, width, height, depth, fixedsamplelocations); }
#define glTexImage3DMultisample tunisTexImage3DMultisample
TUNIS_FORCE_INLINE void  tunisTexImage3DMultisampleCoverageNV(GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations) { tunisGL.tunisTexImage3DMultisampleCoverageNV(target, coverageSamples, colorSamples, internalFormat, width, height, depth, fixedSampleLocations); }
#define glTexImage3DMultisampleCoverageNV tunisTexImage3DMultisampleCoverageNV
TUNIS_FORCE_INLINE void  tunisTexImage3DOES(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void * pixels) { tunisGL.tunisTexImage3DOES(target, level, internalformat, width, height, depth, border, format, type, pixels); }
#define glTexImage3DOES tunisTexImage3DOES
TUNIS_FORCE_INLINE void  tunisTexImage4DSGIS(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLint border, GLenum format, GLenum type, const void * pixels) { tunisGL.tunisTexImage4DSGIS(target, level, internalformat, width, height, depth, size4d, border, format, type, pixels); }
#define glTexImage4DSGIS tunisTexImage4DSGIS
TUNIS_FORCE_INLINE void  tunisTexPageCommitmentARB(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit) { tunisGL.tunisTexPageCommitmentARB(target, level, xoffset, yoffset, zoffset, width, height, depth, commit); }
#define glTexPageCommitmentARB tunisTexPageCommitmentARB
TUNIS_FORCE_INLINE void  tunisTexPageCommitmentEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit) { tunisGL.tunisTexPageCommitmentEXT(target, level, xoffset, yoffset, zoffset, width, height, depth, commit); }
#define glTexPageCommitmentEXT tunisTexPageCommitmentEXT
TUNIS_FORCE_INLINE void  tunisTexParameterIiv(GLenum target, GLenum pname, const GLint * params) { tunisGL.tunisTexParameterIiv(target, pname, params); }
#define glTexParameterIiv tunisTexParameterIiv
TUNIS_FORCE_INLINE void  tunisTexParameterIivEXT(GLenum target, GLenum pname, const GLint * params) { tunisGL.tunisTexParameterIivEXT(target, pname, params); }
#define glTexParameterIivEXT tunisTexParameterIivEXT
TUNIS_FORCE_INLINE void  tunisTexParameterIivOES(GLenum target, GLenum pname, const GLint * params) { tunisGL.tunisTexParameterIivOES(target, pname, params); }
#define glTexParameterIivOES tunisTexParameterIivOES
TUNIS_FORCE_INLINE void  tunisTexParameterIuiv(GLenum target, GLenum pname, const GLuint * params) { tunisGL.tunisTexParameterIuiv(target, pname, params); }
#define glTexParameterIuiv tunisTexParameterIuiv
TUNIS_FORCE_INLINE void  tunisTexParameterIuivEXT(GLenum target, GLenum pname, const GLuint * params) { tunisGL.tunisTexParameterIuivEXT(target, pname, params); }
#define glTexParameterIuivEXT tunisTexParameterIuivEXT
TUNIS_FORCE_INLINE void  tunisTexParameterIuivOES(GLenum target, GLenum pname, const GLuint * params) { tunisGL.tunisTexParameterIuivOES(target, pname, params); }
#define glTexParameterIuivOES tunisTexParameterIuivOES
TUNIS_FORCE_INLINE void  tunisTexParameterf(GLenum target, GLenum pname, GLfloat param) { tunisGL.tunisTexParameterf(target, pname, param); }
#define glTexParameterf tunisTexParameterf
TUNIS_FORCE_INLINE void  tunisTexParameterfv(GLenum target, GLenum pname, const GLfloat * params) { tunisGL.tunisTexParameterfv(target, pname, params); }
#define glTexParameterfv tunisTexParameterfv
TUNIS_FORCE_INLINE void  tunisTexParameteri(GLenum target, GLenum pname, GLint param) { tunisGL.tunisTexParameteri(target, pname, param); }
#define glTexParameteri tunisTexParameteri
TUNIS_FORCE_INLINE void  tunisTexParameteriv(GLenum target, GLenum pname, const GLint * params) { tunisGL.tunisTexParameteriv(target, pname, params); }
#define glTexParameteriv tunisTexParameteriv
TUNIS_FORCE_INLINE void  tunisTexParameterx(GLenum target, GLenum pname, GLfixed param) { tunisGL.tunisTexParameterx(target, pname, param); }
#define glTexParameterx tunisTexParameterx
TUNIS_FORCE_INLINE void  tunisTexParameterxOES(GLenum target, GLenum pname, GLfixed param) { tunisGL.tunisTexParameterxOES(target, pname, param); }
#define glTexParameterxOES tunisTexParameterxOES
TUNIS_FORCE_INLINE void  tunisTexParameterxv(GLenum target, GLenum pname, const GLfixed * params) { tunisGL.tunisTexParameterxv(target, pname, params); }
#define glTexParameterxv tunisTexParameterxv
TUNIS_FORCE_INLINE void  tunisTexParameterxvOES(GLenum target, GLenum pname, const GLfixed * params) { tunisGL.tunisTexParameterxvOES(target, pname, params); }
#define glTexParameterxvOES tunisTexParameterxvOES
TUNIS_FORCE_INLINE void  tunisTexRenderbufferNV(GLenum target, GLuint renderbuffer) { tunisGL.tunisTexRenderbufferNV(target, renderbuffer); }
#define glTexRenderbufferNV tunisTexRenderbufferNV
TUNIS_FORCE_INLINE void  tunisTexStorage1D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width) { tunisGL.tunisTexStorage1D(target, levels, internalformat, width); }
#define glTexStorage1D tunisTexStorage1D
TUNIS_FORCE_INLINE void  tunisTexStorage1DEXT(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width) { tunisGL.tunisTexStorage1DEXT(target, levels, internalformat, width); }
#define glTexStorage1DEXT tunisTexStorage1DEXT
TUNIS_FORCE_INLINE void  tunisTexStorage2D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height) { tunisGL.tunisTexStorage2D(target, levels, internalformat, width, height); }
#define glTexStorage2D tunisTexStorage2D
TUNIS_FORCE_INLINE void  tunisTexStorage2DEXT(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height) { tunisGL.tunisTexStorage2DEXT(target, levels, internalformat, width, height); }
#define glTexStorage2DEXT tunisTexStorage2DEXT
TUNIS_FORCE_INLINE void  tunisTexStorage2DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations) { tunisGL.tunisTexStorage2DMultisample(target, samples, internalformat, width, height, fixedsamplelocations); }
#define glTexStorage2DMultisample tunisTexStorage2DMultisample
TUNIS_FORCE_INLINE void  tunisTexStorage3D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth) { tunisGL.tunisTexStorage3D(target, levels, internalformat, width, height, depth); }
#define glTexStorage3D tunisTexStorage3D
TUNIS_FORCE_INLINE void  tunisTexStorage3DEXT(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth) { tunisGL.tunisTexStorage3DEXT(target, levels, internalformat, width, height, depth); }
#define glTexStorage3DEXT tunisTexStorage3DEXT
TUNIS_FORCE_INLINE void  tunisTexStorage3DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations) { tunisGL.tunisTexStorage3DMultisample(target, samples, internalformat, width, height, depth, fixedsamplelocations); }
#define glTexStorage3DMultisample tunisTexStorage3DMultisample
TUNIS_FORCE_INLINE void  tunisTexStorage3DMultisampleOES(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations) { tunisGL.tunisTexStorage3DMultisampleOES(target, samples, internalformat, width, height, depth, fixedsamplelocations); }
#define glTexStorage3DMultisampleOES tunisTexStorage3DMultisampleOES
TUNIS_FORCE_INLINE void  tunisTexStorageMem1DEXT(GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLuint memory, GLuint64 offset) { tunisGL.tunisTexStorageMem1DEXT(target, levels, internalFormat, width, memory, offset); }
#define glTexStorageMem1DEXT tunisTexStorageMem1DEXT
TUNIS_FORCE_INLINE void  tunisTexStorageMem2DEXT(GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLuint memory, GLuint64 offset) { tunisGL.tunisTexStorageMem2DEXT(target, levels, internalFormat, width, height, memory, offset); }
#define glTexStorageMem2DEXT tunisTexStorageMem2DEXT
TUNIS_FORCE_INLINE void  tunisTexStorageMem2DMultisampleEXT(GLenum target, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset) { tunisGL.tunisTexStorageMem2DMultisampleEXT(target, samples, internalFormat, width, height, fixedSampleLocations, memory, offset); }
#define glTexStorageMem2DMultisampleEXT tunisTexStorageMem2DMultisampleEXT
TUNIS_FORCE_INLINE void  tunisTexStorageMem3DEXT(GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLuint memory, GLuint64 offset) { tunisGL.tunisTexStorageMem3DEXT(target, levels, internalFormat, width, height, depth, memory, offset); }
#define glTexStorageMem3DEXT tunisTexStorageMem3DEXT
TUNIS_FORCE_INLINE void  tunisTexStorageMem3DMultisampleEXT(GLenum target, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset) { tunisGL.tunisTexStorageMem3DMultisampleEXT(target, samples, internalFormat, width, height, depth, fixedSampleLocations, memory, offset); }
#define glTexStorageMem3DMultisampleEXT tunisTexStorageMem3DMultisampleEXT
TUNIS_FORCE_INLINE void  tunisTexStorageSparseAMD(GLenum target, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLsizei layers, GLbitfield flags) { tunisGL.tunisTexStorageSparseAMD(target, internalFormat, width, height, depth, layers, flags); }
#define glTexStorageSparseAMD tunisTexStorageSparseAMD
TUNIS_FORCE_INLINE void  tunisTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void * pixels) { tunisGL.tunisTexSubImage1D(target, level, xoffset, width, format, type, pixels); }
#define glTexSubImage1D tunisTexSubImage1D
TUNIS_FORCE_INLINE void  tunisTexSubImage1DEXT(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void * pixels) { tunisGL.tunisTexSubImage1DEXT(target, level, xoffset, width, format, type, pixels); }
#define glTexSubImage1DEXT tunisTexSubImage1DEXT
TUNIS_FORCE_INLINE void  tunisTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * pixels) { tunisGL.tunisTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels); }
#define glTexSubImage2D tunisTexSubImage2D
TUNIS_FORCE_INLINE void  tunisTexSubImage2DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * pixels) { tunisGL.tunisTexSubImage2DEXT(target, level, xoffset, yoffset, width, height, format, type, pixels); }
#define glTexSubImage2DEXT tunisTexSubImage2DEXT
TUNIS_FORCE_INLINE void  tunisTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void * pixels) { tunisGL.tunisTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels); }
#define glTexSubImage3D tunisTexSubImage3D
TUNIS_FORCE_INLINE void  tunisTexSubImage3DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void * pixels) { tunisGL.tunisTexSubImage3DEXT(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels); }
#define glTexSubImage3DEXT tunisTexSubImage3DEXT
TUNIS_FORCE_INLINE void  tunisTexSubImage3DOES(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void * pixels) { tunisGL.tunisTexSubImage3DOES(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels); }
#define glTexSubImage3DOES tunisTexSubImage3DOES
TUNIS_FORCE_INLINE void  tunisTexSubImage4DSGIS(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint woffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLenum format, GLenum type, const void * pixels) { tunisGL.tunisTexSubImage4DSGIS(target, level, xoffset, yoffset, zoffset, woffset, width, height, depth, size4d, format, type, pixels); }
#define glTexSubImage4DSGIS tunisTexSubImage4DSGIS
TUNIS_FORCE_INLINE void  tunisTextureAttachMemoryNV(GLuint texture, GLuint memory, GLuint64 offset) { tunisGL.tunisTextureAttachMemoryNV(texture, memory, offset); }
#define glTextureAttachMemoryNV tunisTextureAttachMemoryNV
TUNIS_FORCE_INLINE void  tunisTextureBarrier(void) { tunisGL.tunisTextureBarrier(); }
#define glTextureBarrier tunisTextureBarrier
TUNIS_FORCE_INLINE void  tunisTextureBarrierNV(void) { tunisGL.tunisTextureBarrierNV(); }
#define glTextureBarrierNV tunisTextureBarrierNV
TUNIS_FORCE_INLINE void  tunisTextureBuffer(GLuint texture, GLenum internalformat, GLuint buffer) { tunisGL.tunisTextureBuffer(texture, internalformat, buffer); }
#define glTextureBuffer tunisTextureBuffer
TUNIS_FORCE_INLINE void  tunisTextureBufferEXT(GLuint texture, GLenum target, GLenum internalformat, GLuint buffer) { tunisGL.tunisTextureBufferEXT(texture, target, internalformat, buffer); }
#define glTextureBufferEXT tunisTextureBufferEXT
TUNIS_FORCE_INLINE void  tunisTextureBufferRange(GLuint texture, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size) { tunisGL.tunisTextureBufferRange(texture, internalformat, buffer, offset, size); }
#define glTextureBufferRange tunisTextureBufferRange
TUNIS_FORCE_INLINE void  tunisTextureBufferRangeEXT(GLuint texture, GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size) { tunisGL.tunisTextureBufferRangeEXT(texture, target, internalformat, buffer, offset, size); }
#define glTextureBufferRangeEXT tunisTextureBufferRangeEXT
TUNIS_FORCE_INLINE void  tunisTextureColorMaskSGIS(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha) { tunisGL.tunisTextureColorMaskSGIS(red, green, blue, alpha); }
#define glTextureColorMaskSGIS tunisTextureColorMaskSGIS
TUNIS_FORCE_INLINE void  tunisTextureFoveationParametersQCOM(GLuint texture, GLuint layer, GLuint focalPoint, GLfloat focalX, GLfloat focalY, GLfloat gainX, GLfloat gainY, GLfloat foveaArea) { tunisGL.tunisTextureFoveationParametersQCOM(texture, layer, focalPoint, focalX, focalY, gainX, gainY, foveaArea); }
#define glTextureFoveationParametersQCOM tunisTextureFoveationParametersQCOM
TUNIS_FORCE_INLINE void  tunisTextureImage1DEXT(GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void * pixels) { tunisGL.tunisTextureImage1DEXT(texture, target, level, internalformat, width, border, format, type, pixels); }
#define glTextureImage1DEXT tunisTextureImage1DEXT
TUNIS_FORCE_INLINE void  tunisTextureImage2DEXT(GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void * pixels) { tunisGL.tunisTextureImage2DEXT(texture, target, level, internalformat, width, height, border, format, type, pixels); }
#define glTextureImage2DEXT tunisTextureImage2DEXT
TUNIS_FORCE_INLINE void  tunisTextureImage2DMultisampleCoverageNV(GLuint texture, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations) { tunisGL.tunisTextureImage2DMultisampleCoverageNV(texture, target, coverageSamples, colorSamples, internalFormat, width, height, fixedSampleLocations); }
#define glTextureImage2DMultisampleCoverageNV tunisTextureImage2DMultisampleCoverageNV
TUNIS_FORCE_INLINE void  tunisTextureImage2DMultisampleNV(GLuint texture, GLenum target, GLsizei samples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations) { tunisGL.tunisTextureImage2DMultisampleNV(texture, target, samples, internalFormat, width, height, fixedSampleLocations); }
#define glTextureImage2DMultisampleNV tunisTextureImage2DMultisampleNV
TUNIS_FORCE_INLINE void  tunisTextureImage3DEXT(GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void * pixels) { tunisGL.tunisTextureImage3DEXT(texture, target, level, internalformat, width, height, depth, border, format, type, pixels); }
#define glTextureImage3DEXT tunisTextureImage3DEXT
TUNIS_FORCE_INLINE void  tunisTextureImage3DMultisampleCoverageNV(GLuint texture, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations) { tunisGL.tunisTextureImage3DMultisampleCoverageNV(texture, target, coverageSamples, colorSamples, internalFormat, width, height, depth, fixedSampleLocations); }
#define glTextureImage3DMultisampleCoverageNV tunisTextureImage3DMultisampleCoverageNV
TUNIS_FORCE_INLINE void  tunisTextureImage3DMultisampleNV(GLuint texture, GLenum target, GLsizei samples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations) { tunisGL.tunisTextureImage3DMultisampleNV(texture, target, samples, internalFormat, width, height, depth, fixedSampleLocations); }
#define glTextureImage3DMultisampleNV tunisTextureImage3DMultisampleNV
TUNIS_FORCE_INLINE void  tunisTextureLightEXT(GLenum pname) { tunisGL.tunisTextureLightEXT(pname); }
#define glTextureLightEXT tunisTextureLightEXT
TUNIS_FORCE_INLINE void  tunisTextureMaterialEXT(GLenum face, GLenum mode) { tunisGL.tunisTextureMaterialEXT(face, mode); }
#define glTextureMaterialEXT tunisTextureMaterialEXT
TUNIS_FORCE_INLINE void  tunisTextureNormalEXT(GLenum mode) { tunisGL.tunisTextureNormalEXT(mode); }
#define glTextureNormalEXT tunisTextureNormalEXT
TUNIS_FORCE_INLINE void  tunisTexturePageCommitmentEXT(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit) { tunisGL.tunisTexturePageCommitmentEXT(texture, level, xoffset, yoffset, zoffset, width, height, depth, commit); }
#define glTexturePageCommitmentEXT tunisTexturePageCommitmentEXT
TUNIS_FORCE_INLINE void  tunisTextureParameterIiv(GLuint texture, GLenum pname, const GLint * params) { tunisGL.tunisTextureParameterIiv(texture, pname, params); }
#define glTextureParameterIiv tunisTextureParameterIiv
TUNIS_FORCE_INLINE void  tunisTextureParameterIivEXT(GLuint texture, GLenum target, GLenum pname, const GLint * params) { tunisGL.tunisTextureParameterIivEXT(texture, target, pname, params); }
#define glTextureParameterIivEXT tunisTextureParameterIivEXT
TUNIS_FORCE_INLINE void  tunisTextureParameterIuiv(GLuint texture, GLenum pname, const GLuint * params) { tunisGL.tunisTextureParameterIuiv(texture, pname, params); }
#define glTextureParameterIuiv tunisTextureParameterIuiv
TUNIS_FORCE_INLINE void  tunisTextureParameterIuivEXT(GLuint texture, GLenum target, GLenum pname, const GLuint * params) { tunisGL.tunisTextureParameterIuivEXT(texture, target, pname, params); }
#define glTextureParameterIuivEXT tunisTextureParameterIuivEXT
TUNIS_FORCE_INLINE void  tunisTextureParameterf(GLuint texture, GLenum pname, GLfloat param) { tunisGL.tunisTextureParameterf(texture, pname, param); }
#define glTextureParameterf tunisTextureParameterf
TUNIS_FORCE_INLINE void  tunisTextureParameterfEXT(GLuint texture, GLenum target, GLenum pname, GLfloat param) { tunisGL.tunisTextureParameterfEXT(texture, target, pname, param); }
#define glTextureParameterfEXT tunisTextureParameterfEXT
TUNIS_FORCE_INLINE void  tunisTextureParameterfv(GLuint texture, GLenum pname, const GLfloat * param) { tunisGL.tunisTextureParameterfv(texture, pname, param); }
#define glTextureParameterfv tunisTextureParameterfv
TUNIS_FORCE_INLINE void  tunisTextureParameterfvEXT(GLuint texture, GLenum target, GLenum pname, const GLfloat * params) { tunisGL.tunisTextureParameterfvEXT(texture, target, pname, params); }
#define glTextureParameterfvEXT tunisTextureParameterfvEXT
TUNIS_FORCE_INLINE void  tunisTextureParameteri(GLuint texture, GLenum pname, GLint param) { tunisGL.tunisTextureParameteri(texture, pname, param); }
#define glTextureParameteri tunisTextureParameteri
TUNIS_FORCE_INLINE void  tunisTextureParameteriEXT(GLuint texture, GLenum target, GLenum pname, GLint param) { tunisGL.tunisTextureParameteriEXT(texture, target, pname, param); }
#define glTextureParameteriEXT tunisTextureParameteriEXT
TUNIS_FORCE_INLINE void  tunisTextureParameteriv(GLuint texture, GLenum pname, const GLint * param) { tunisGL.tunisTextureParameteriv(texture, pname, param); }
#define glTextureParameteriv tunisTextureParameteriv
TUNIS_FORCE_INLINE void  tunisTextureParameterivEXT(GLuint texture, GLenum target, GLenum pname, const GLint * params) { tunisGL.tunisTextureParameterivEXT(texture, target, pname, params); }
#define glTextureParameterivEXT tunisTextureParameterivEXT
TUNIS_FORCE_INLINE void  tunisTextureRangeAPPLE(GLenum target, GLsizei length, const void * pointer) { tunisGL.tunisTextureRangeAPPLE(target, length, pointer); }
#define glTextureRangeAPPLE tunisTextureRangeAPPLE
TUNIS_FORCE_INLINE void  tunisTextureRenderbufferEXT(GLuint texture, GLenum target, GLuint renderbuffer) { tunisGL.tunisTextureRenderbufferEXT(texture, target, renderbuffer); }
#define glTextureRenderbufferEXT tunisTextureRenderbufferEXT
TUNIS_FORCE_INLINE void  tunisTextureStorage1D(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width) { tunisGL.tunisTextureStorage1D(texture, levels, internalformat, width); }
#define glTextureStorage1D tunisTextureStorage1D
TUNIS_FORCE_INLINE void  tunisTextureStorage1DEXT(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width) { tunisGL.tunisTextureStorage1DEXT(texture, target, levels, internalformat, width); }
#define glTextureStorage1DEXT tunisTextureStorage1DEXT
TUNIS_FORCE_INLINE void  tunisTextureStorage2D(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height) { tunisGL.tunisTextureStorage2D(texture, levels, internalformat, width, height); }
#define glTextureStorage2D tunisTextureStorage2D
TUNIS_FORCE_INLINE void  tunisTextureStorage2DEXT(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height) { tunisGL.tunisTextureStorage2DEXT(texture, target, levels, internalformat, width, height); }
#define glTextureStorage2DEXT tunisTextureStorage2DEXT
TUNIS_FORCE_INLINE void  tunisTextureStorage2DMultisample(GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations) { tunisGL.tunisTextureStorage2DMultisample(texture, samples, internalformat, width, height, fixedsamplelocations); }
#define glTextureStorage2DMultisample tunisTextureStorage2DMultisample
TUNIS_FORCE_INLINE void  tunisTextureStorage2DMultisampleEXT(GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations) { tunisGL.tunisTextureStorage2DMultisampleEXT(texture, target, samples, internalformat, width, height, fixedsamplelocations); }
#define glTextureStorage2DMultisampleEXT tunisTextureStorage2DMultisampleEXT
TUNIS_FORCE_INLINE void  tunisTextureStorage3D(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth) { tunisGL.tunisTextureStorage3D(texture, levels, internalformat, width, height, depth); }
#define glTextureStorage3D tunisTextureStorage3D
TUNIS_FORCE_INLINE void  tunisTextureStorage3DEXT(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth) { tunisGL.tunisTextureStorage3DEXT(texture, target, levels, internalformat, width, height, depth); }
#define glTextureStorage3DEXT tunisTextureStorage3DEXT
TUNIS_FORCE_INLINE void  tunisTextureStorage3DMultisample(GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations) { tunisGL.tunisTextureStorage3DMultisample(texture, samples, internalformat, width, height, depth, fixedsamplelocations); }
#define glTextureStorage3DMultisample tunisTextureStorage3DMultisample
TUNIS_FORCE_INLINE void  tunisTextureStorage3DMultisampleEXT(GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations) { tunisGL.tunisTextureStorage3DMultisampleEXT(texture, target, samples, internalformat, width, height, depth, fixedsamplelocations); }
#define glTextureStorage3DMultisampleEXT tunisTextureStorage3DMultisampleEXT
TUNIS_FORCE_INLINE void  tunisTextureStorageMem1DEXT(GLuint texture, GLsizei levels, GLenum internalFormat, GLsizei width, GLuint memory, GLuint64 offset) { tunisGL.tunisTextureStorageMem1DEXT(texture, levels, internalFormat, width, memory, offset); }
#define glTextureStorageMem1DEXT tunisTextureStorageMem1DEXT
TUNIS_FORCE_INLINE void  tunisTextureStorageMem2DEXT(GLuint texture, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLuint memory, GLuint64 offset) { tunisGL.tunisTextureStorageMem2DEXT(texture, levels, internalFormat, width, height, memory, offset); }
#define glTextureStorageMem2DEXT tunisTextureStorageMem2DEXT
TUNIS_FORCE_INLINE void  tunisTextureStorageMem2DMultisampleEXT(GLuint texture, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset) { tunisGL.tunisTextureStorageMem2DMultisampleEXT(texture, samples, internalFormat, width, height, fixedSampleLocations, memory, offset); }
#define glTextureStorageMem2DMultisampleEXT tunisTextureStorageMem2DMultisampleEXT
TUNIS_FORCE_INLINE void  tunisTextureStorageMem3DEXT(GLuint texture, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLuint memory, GLuint64 offset) { tunisGL.tunisTextureStorageMem3DEXT(texture, levels, internalFormat, width, height, depth, memory, offset); }
#define glTextureStorageMem3DEXT tunisTextureStorageMem3DEXT
TUNIS_FORCE_INLINE void  tunisTextureStorageMem3DMultisampleEXT(GLuint texture, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset) { tunisGL.tunisTextureStorageMem3DMultisampleEXT(texture, samples, internalFormat, width, height, depth, fixedSampleLocations, memory, offset); }
#define glTextureStorageMem3DMultisampleEXT tunisTextureStorageMem3DMultisampleEXT
TUNIS_FORCE_INLINE void  tunisTextureStorageSparseAMD(GLuint texture, GLenum target, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLsizei layers, GLbitfield flags) { tunisGL.tunisTextureStorageSparseAMD(texture, target, internalFormat, width, height, depth, layers, flags); }
#define glTextureStorageSparseAMD tunisTextureStorageSparseAMD
TUNIS_FORCE_INLINE void  tunisTextureSubImage1D(GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void * pixels) { tunisGL.tunisTextureSubImage1D(texture, level, xoffset, width, format, type, pixels); }
#define glTextureSubImage1D tunisTextureSubImage1D
TUNIS_FORCE_INLINE void  tunisTextureSubImage1DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void * pixels) { tunisGL.tunisTextureSubImage1DEXT(texture, target, level, xoffset, width, format, type, pixels); }
#define glTextureSubImage1DEXT tunisTextureSubImage1DEXT
TUNIS_FORCE_INLINE void  tunisTextureSubImage2D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * pixels) { tunisGL.tunisTextureSubImage2D(texture, level, xoffset, yoffset, width, height, format, type, pixels); }
#define glTextureSubImage2D tunisTextureSubImage2D
TUNIS_FORCE_INLINE void  tunisTextureSubImage2DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * pixels) { tunisGL.tunisTextureSubImage2DEXT(texture, target, level, xoffset, yoffset, width, height, format, type, pixels); }
#define glTextureSubImage2DEXT tunisTextureSubImage2DEXT
TUNIS_FORCE_INLINE void  tunisTextureSubImage3D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void * pixels) { tunisGL.tunisTextureSubImage3D(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels); }
#define glTextureSubImage3D tunisTextureSubImage3D
TUNIS_FORCE_INLINE void  tunisTextureSubImage3DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void * pixels) { tunisGL.tunisTextureSubImage3DEXT(texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels); }
#define glTextureSubImage3DEXT tunisTextureSubImage3DEXT
TUNIS_FORCE_INLINE void  tunisTextureView(GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers) { tunisGL.tunisTextureView(texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers); }
#define glTextureView tunisTextureView
TUNIS_FORCE_INLINE void  tunisTextureViewEXT(GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers) { tunisGL.tunisTextureViewEXT(texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers); }
#define glTextureViewEXT tunisTextureViewEXT
TUNIS_FORCE_INLINE void  tunisTextureViewOES(GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers) { tunisGL.tunisTextureViewOES(texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers); }
#define glTextureViewOES tunisTextureViewOES
TUNIS_FORCE_INLINE void  tunisTrackMatrixNV(GLenum target, GLuint address, GLenum matrix, GLenum transform) { tunisGL.tunisTrackMatrixNV(target, address, matrix, transform); }
#define glTrackMatrixNV tunisTrackMatrixNV
TUNIS_FORCE_INLINE void  tunisTransformFeedbackAttribsNV(GLsizei count, const GLint * attribs, GLenum bufferMode) { tunisGL.tunisTransformFeedbackAttribsNV(count, attribs, bufferMode); }
#define glTransformFeedbackAttribsNV tunisTransformFeedbackAttribsNV
TUNIS_FORCE_INLINE void  tunisTransformFeedbackBufferBase(GLuint xfb, GLuint index, GLuint buffer) { tunisGL.tunisTransformFeedbackBufferBase(xfb, index, buffer); }
#define glTransformFeedbackBufferBase tunisTransformFeedbackBufferBase
TUNIS_FORCE_INLINE void  tunisTransformFeedbackBufferRange(GLuint xfb, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size) { tunisGL.tunisTransformFeedbackBufferRange(xfb, index, buffer, offset, size); }
#define glTransformFeedbackBufferRange tunisTransformFeedbackBufferRange
TUNIS_FORCE_INLINE void  tunisTransformFeedbackStreamAttribsNV(GLsizei count, const GLint * attribs, GLsizei nbuffers, const GLint * bufstreams, GLenum bufferMode) { tunisGL.tunisTransformFeedbackStreamAttribsNV(count, attribs, nbuffers, bufstreams, bufferMode); }
#define glTransformFeedbackStreamAttribsNV tunisTransformFeedbackStreamAttribsNV
TUNIS_FORCE_INLINE void  tunisTransformFeedbackVaryings(GLuint program, GLsizei count, const GLchar *const* varyings, GLenum bufferMode) { tunisGL.tunisTransformFeedbackVaryings(program, count, varyings, bufferMode); }
#define glTransformFeedbackVaryings tunisTransformFeedbackVaryings
TUNIS_FORCE_INLINE void  tunisTransformFeedbackVaryingsEXT(GLuint program, GLsizei count, const GLchar *const* varyings, GLenum bufferMode) { tunisGL.tunisTransformFeedbackVaryingsEXT(program, count, varyings, bufferMode); }
#define glTransformFeedbackVaryingsEXT tunisTransformFeedbackVaryingsEXT
TUNIS_FORCE_INLINE void  tunisTransformFeedbackVaryingsNV(GLuint program, GLsizei count, const GLint * locations, GLenum bufferMode) { tunisGL.tunisTransformFeedbackVaryingsNV(program, count, locations, bufferMode); }
#define glTransformFeedbackVaryingsNV tunisTransformFeedbackVaryingsNV
TUNIS_FORCE_INLINE void  tunisTransformPathNV(GLuint resultPath, GLuint srcPath, GLenum transformType, const GLfloat * transformValues) { tunisGL.tunisTransformPathNV(resultPath, srcPath, transformType, transformValues); }
#define glTransformPathNV tunisTransformPathNV
TUNIS_FORCE_INLINE void  tunisTranslated(GLdouble x, GLdouble y, GLdouble z) { tunisGL.tunisTranslated(x, y, z); }
#define glTranslated tunisTranslated
TUNIS_FORCE_INLINE void  tunisTranslatef(GLfloat x, GLfloat y, GLfloat z) { tunisGL.tunisTranslatef(x, y, z); }
#define glTranslatef tunisTranslatef
TUNIS_FORCE_INLINE void  tunisTranslatex(GLfixed x, GLfixed y, GLfixed z) { tunisGL.tunisTranslatex(x, y, z); }
#define glTranslatex tunisTranslatex
TUNIS_FORCE_INLINE void  tunisTranslatexOES(GLfixed x, GLfixed y, GLfixed z) { tunisGL.tunisTranslatexOES(x, y, z); }
#define glTranslatexOES tunisTranslatexOES
TUNIS_FORCE_INLINE void  tunisUniform1d(GLint location, GLdouble x) { tunisGL.tunisUniform1d(location, x); }
#define glUniform1d tunisUniform1d
TUNIS_FORCE_INLINE void  tunisUniform1dv(GLint location, GLsizei count, const GLdouble * value) { tunisGL.tunisUniform1dv(location, count, value); }
#define glUniform1dv tunisUniform1dv
TUNIS_FORCE_INLINE void  tunisUniform1f(GLint location, GLfloat v0) { tunisGL.tunisUniform1f(location, v0); }
#define glUniform1f tunisUniform1f
TUNIS_FORCE_INLINE void  tunisUniform1fARB(GLint location, GLfloat v0) { tunisGL.tunisUniform1fARB(location, v0); }
#define glUniform1fARB tunisUniform1fARB
TUNIS_FORCE_INLINE void  tunisUniform1fv(GLint location, GLsizei count, const GLfloat * value) { tunisGL.tunisUniform1fv(location, count, value); }
#define glUniform1fv tunisUniform1fv
TUNIS_FORCE_INLINE void  tunisUniform1fvARB(GLint location, GLsizei count, const GLfloat * value) { tunisGL.tunisUniform1fvARB(location, count, value); }
#define glUniform1fvARB tunisUniform1fvARB
TUNIS_FORCE_INLINE void  tunisUniform1i(GLint location, GLint v0) { tunisGL.tunisUniform1i(location, v0); }
#define glUniform1i tunisUniform1i
TUNIS_FORCE_INLINE void  tunisUniform1i64ARB(GLint location, GLint64 x) { tunisGL.tunisUniform1i64ARB(location, x); }
#define glUniform1i64ARB tunisUniform1i64ARB
TUNIS_FORCE_INLINE void  tunisUniform1i64NV(GLint location, GLint64EXT x) { tunisGL.tunisUniform1i64NV(location, x); }
#define glUniform1i64NV tunisUniform1i64NV
TUNIS_FORCE_INLINE void  tunisUniform1i64vARB(GLint location, GLsizei count, const GLint64 * value) { tunisGL.tunisUniform1i64vARB(location, count, value); }
#define glUniform1i64vARB tunisUniform1i64vARB
TUNIS_FORCE_INLINE void  tunisUniform1i64vNV(GLint location, GLsizei count, const GLint64EXT * value) { tunisGL.tunisUniform1i64vNV(location, count, value); }
#define glUniform1i64vNV tunisUniform1i64vNV
TUNIS_FORCE_INLINE void  tunisUniform1iARB(GLint location, GLint v0) { tunisGL.tunisUniform1iARB(location, v0); }
#define glUniform1iARB tunisUniform1iARB
TUNIS_FORCE_INLINE void  tunisUniform1iv(GLint location, GLsizei count, const GLint * value) { tunisGL.tunisUniform1iv(location, count, value); }
#define glUniform1iv tunisUniform1iv
TUNIS_FORCE_INLINE void  tunisUniform1ivARB(GLint location, GLsizei count, const GLint * value) { tunisGL.tunisUniform1ivARB(location, count, value); }
#define glUniform1ivARB tunisUniform1ivARB
TUNIS_FORCE_INLINE void  tunisUniform1ui(GLint location, GLuint v0) { tunisGL.tunisUniform1ui(location, v0); }
#define glUniform1ui tunisUniform1ui
TUNIS_FORCE_INLINE void  tunisUniform1ui64ARB(GLint location, GLuint64 x) { tunisGL.tunisUniform1ui64ARB(location, x); }
#define glUniform1ui64ARB tunisUniform1ui64ARB
TUNIS_FORCE_INLINE void  tunisUniform1ui64NV(GLint location, GLuint64EXT x) { tunisGL.tunisUniform1ui64NV(location, x); }
#define glUniform1ui64NV tunisUniform1ui64NV
TUNIS_FORCE_INLINE void  tunisUniform1ui64vARB(GLint location, GLsizei count, const GLuint64 * value) { tunisGL.tunisUniform1ui64vARB(location, count, value); }
#define glUniform1ui64vARB tunisUniform1ui64vARB
TUNIS_FORCE_INLINE void  tunisUniform1ui64vNV(GLint location, GLsizei count, const GLuint64EXT * value) { tunisGL.tunisUniform1ui64vNV(location, count, value); }
#define glUniform1ui64vNV tunisUniform1ui64vNV
TUNIS_FORCE_INLINE void  tunisUniform1uiEXT(GLint location, GLuint v0) { tunisGL.tunisUniform1uiEXT(location, v0); }
#define glUniform1uiEXT tunisUniform1uiEXT
TUNIS_FORCE_INLINE void  tunisUniform1uiv(GLint location, GLsizei count, const GLuint * value) { tunisGL.tunisUniform1uiv(location, count, value); }
#define glUniform1uiv tunisUniform1uiv
TUNIS_FORCE_INLINE void  tunisUniform1uivEXT(GLint location, GLsizei count, const GLuint * value) { tunisGL.tunisUniform1uivEXT(location, count, value); }
#define glUniform1uivEXT tunisUniform1uivEXT
TUNIS_FORCE_INLINE void  tunisUniform2d(GLint location, GLdouble x, GLdouble y) { tunisGL.tunisUniform2d(location, x, y); }
#define glUniform2d tunisUniform2d
TUNIS_FORCE_INLINE void  tunisUniform2dv(GLint location, GLsizei count, const GLdouble * value) { tunisGL.tunisUniform2dv(location, count, value); }
#define glUniform2dv tunisUniform2dv
TUNIS_FORCE_INLINE void  tunisUniform2f(GLint location, GLfloat v0, GLfloat v1) { tunisGL.tunisUniform2f(location, v0, v1); }
#define glUniform2f tunisUniform2f
TUNIS_FORCE_INLINE void  tunisUniform2fARB(GLint location, GLfloat v0, GLfloat v1) { tunisGL.tunisUniform2fARB(location, v0, v1); }
#define glUniform2fARB tunisUniform2fARB
TUNIS_FORCE_INLINE void  tunisUniform2fv(GLint location, GLsizei count, const GLfloat * value) { tunisGL.tunisUniform2fv(location, count, value); }
#define glUniform2fv tunisUniform2fv
TUNIS_FORCE_INLINE void  tunisUniform2fvARB(GLint location, GLsizei count, const GLfloat * value) { tunisGL.tunisUniform2fvARB(location, count, value); }
#define glUniform2fvARB tunisUniform2fvARB
TUNIS_FORCE_INLINE void  tunisUniform2i(GLint location, GLint v0, GLint v1) { tunisGL.tunisUniform2i(location, v0, v1); }
#define glUniform2i tunisUniform2i
TUNIS_FORCE_INLINE void  tunisUniform2i64ARB(GLint location, GLint64 x, GLint64 y) { tunisGL.tunisUniform2i64ARB(location, x, y); }
#define glUniform2i64ARB tunisUniform2i64ARB
TUNIS_FORCE_INLINE void  tunisUniform2i64NV(GLint location, GLint64EXT x, GLint64EXT y) { tunisGL.tunisUniform2i64NV(location, x, y); }
#define glUniform2i64NV tunisUniform2i64NV
TUNIS_FORCE_INLINE void  tunisUniform2i64vARB(GLint location, GLsizei count, const GLint64 * value) { tunisGL.tunisUniform2i64vARB(location, count, value); }
#define glUniform2i64vARB tunisUniform2i64vARB
TUNIS_FORCE_INLINE void  tunisUniform2i64vNV(GLint location, GLsizei count, const GLint64EXT * value) { tunisGL.tunisUniform2i64vNV(location, count, value); }
#define glUniform2i64vNV tunisUniform2i64vNV
TUNIS_FORCE_INLINE void  tunisUniform2iARB(GLint location, GLint v0, GLint v1) { tunisGL.tunisUniform2iARB(location, v0, v1); }
#define glUniform2iARB tunisUniform2iARB
TUNIS_FORCE_INLINE void  tunisUniform2iv(GLint location, GLsizei count, const GLint * value) { tunisGL.tunisUniform2iv(location, count, value); }
#define glUniform2iv tunisUniform2iv
TUNIS_FORCE_INLINE void  tunisUniform2ivARB(GLint location, GLsizei count, const GLint * value) { tunisGL.tunisUniform2ivARB(location, count, value); }
#define glUniform2ivARB tunisUniform2ivARB
TUNIS_FORCE_INLINE void  tunisUniform2ui(GLint location, GLuint v0, GLuint v1) { tunisGL.tunisUniform2ui(location, v0, v1); }
#define glUniform2ui tunisUniform2ui
TUNIS_FORCE_INLINE void  tunisUniform2ui64ARB(GLint location, GLuint64 x, GLuint64 y) { tunisGL.tunisUniform2ui64ARB(location, x, y); }
#define glUniform2ui64ARB tunisUniform2ui64ARB
TUNIS_FORCE_INLINE void  tunisUniform2ui64NV(GLint location, GLuint64EXT x, GLuint64EXT y) { tunisGL.tunisUniform2ui64NV(location, x, y); }
#define glUniform2ui64NV tunisUniform2ui64NV
TUNIS_FORCE_INLINE void  tunisUniform2ui64vARB(GLint location, GLsizei count, const GLuint64 * value) { tunisGL.tunisUniform2ui64vARB(location, count, value); }
#define glUniform2ui64vARB tunisUniform2ui64vARB
TUNIS_FORCE_INLINE void  tunisUniform2ui64vNV(GLint location, GLsizei count, const GLuint64EXT * value) { tunisGL.tunisUniform2ui64vNV(location, count, value); }
#define glUniform2ui64vNV tunisUniform2ui64vNV
TUNIS_FORCE_INLINE void  tunisUniform2uiEXT(GLint location, GLuint v0, GLuint v1) { tunisGL.tunisUniform2uiEXT(location, v0, v1); }
#define glUniform2uiEXT tunisUniform2uiEXT
TUNIS_FORCE_INLINE void  tunisUniform2uiv(GLint location, GLsizei count, const GLuint * value) { tunisGL.tunisUniform2uiv(location, count, value); }
#define glUniform2uiv tunisUniform2uiv
TUNIS_FORCE_INLINE void  tunisUniform2uivEXT(GLint location, GLsizei count, const GLuint * value) { tunisGL.tunisUniform2uivEXT(location, count, value); }
#define glUniform2uivEXT tunisUniform2uivEXT
TUNIS_FORCE_INLINE void  tunisUniform3d(GLint location, GLdouble x, GLdouble y, GLdouble z) { tunisGL.tunisUniform3d(location, x, y, z); }
#define glUniform3d tunisUniform3d
TUNIS_FORCE_INLINE void  tunisUniform3dv(GLint location, GLsizei count, const GLdouble * value) { tunisGL.tunisUniform3dv(location, count, value); }
#define glUniform3dv tunisUniform3dv
TUNIS_FORCE_INLINE void  tunisUniform3f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2) { tunisGL.tunisUniform3f(location, v0, v1, v2); }
#define glUniform3f tunisUniform3f
TUNIS_FORCE_INLINE void  tunisUniform3fARB(GLint location, GLfloat v0, GLfloat v1, GLfloat v2) { tunisGL.tunisUniform3fARB(location, v0, v1, v2); }
#define glUniform3fARB tunisUniform3fARB
TUNIS_FORCE_INLINE void  tunisUniform3fv(GLint location, GLsizei count, const GLfloat * value) { tunisGL.tunisUniform3fv(location, count, value); }
#define glUniform3fv tunisUniform3fv
TUNIS_FORCE_INLINE void  tunisUniform3fvARB(GLint location, GLsizei count, const GLfloat * value) { tunisGL.tunisUniform3fvARB(location, count, value); }
#define glUniform3fvARB tunisUniform3fvARB
TUNIS_FORCE_INLINE void  tunisUniform3i(GLint location, GLint v0, GLint v1, GLint v2) { tunisGL.tunisUniform3i(location, v0, v1, v2); }
#define glUniform3i tunisUniform3i
TUNIS_FORCE_INLINE void  tunisUniform3i64ARB(GLint location, GLint64 x, GLint64 y, GLint64 z) { tunisGL.tunisUniform3i64ARB(location, x, y, z); }
#define glUniform3i64ARB tunisUniform3i64ARB
TUNIS_FORCE_INLINE void  tunisUniform3i64NV(GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z) { tunisGL.tunisUniform3i64NV(location, x, y, z); }
#define glUniform3i64NV tunisUniform3i64NV
TUNIS_FORCE_INLINE void  tunisUniform3i64vARB(GLint location, GLsizei count, const GLint64 * value) { tunisGL.tunisUniform3i64vARB(location, count, value); }
#define glUniform3i64vARB tunisUniform3i64vARB
TUNIS_FORCE_INLINE void  tunisUniform3i64vNV(GLint location, GLsizei count, const GLint64EXT * value) { tunisGL.tunisUniform3i64vNV(location, count, value); }
#define glUniform3i64vNV tunisUniform3i64vNV
TUNIS_FORCE_INLINE void  tunisUniform3iARB(GLint location, GLint v0, GLint v1, GLint v2) { tunisGL.tunisUniform3iARB(location, v0, v1, v2); }
#define glUniform3iARB tunisUniform3iARB
TUNIS_FORCE_INLINE void  tunisUniform3iv(GLint location, GLsizei count, const GLint * value) { tunisGL.tunisUniform3iv(location, count, value); }
#define glUniform3iv tunisUniform3iv
TUNIS_FORCE_INLINE void  tunisUniform3ivARB(GLint location, GLsizei count, const GLint * value) { tunisGL.tunisUniform3ivARB(location, count, value); }
#define glUniform3ivARB tunisUniform3ivARB
TUNIS_FORCE_INLINE void  tunisUniform3ui(GLint location, GLuint v0, GLuint v1, GLuint v2) { tunisGL.tunisUniform3ui(location, v0, v1, v2); }
#define glUniform3ui tunisUniform3ui
TUNIS_FORCE_INLINE void  tunisUniform3ui64ARB(GLint location, GLuint64 x, GLuint64 y, GLuint64 z) { tunisGL.tunisUniform3ui64ARB(location, x, y, z); }
#define glUniform3ui64ARB tunisUniform3ui64ARB
TUNIS_FORCE_INLINE void  tunisUniform3ui64NV(GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z) { tunisGL.tunisUniform3ui64NV(location, x, y, z); }
#define glUniform3ui64NV tunisUniform3ui64NV
TUNIS_FORCE_INLINE void  tunisUniform3ui64vARB(GLint location, GLsizei count, const GLuint64 * value) { tunisGL.tunisUniform3ui64vARB(location, count, value); }
#define glUniform3ui64vARB tunisUniform3ui64vARB
TUNIS_FORCE_INLINE void  tunisUniform3ui64vNV(GLint location, GLsizei count, const GLuint64EXT * value) { tunisGL.tunisUniform3ui64vNV(location, count, value); }
#define glUniform3ui64vNV tunisUniform3ui64vNV
TUNIS_FORCE_INLINE void  tunisUniform3uiEXT(GLint location, GLuint v0, GLuint v1, GLuint v2) { tunisGL.tunisUniform3uiEXT(location, v0, v1, v2); }
#define glUniform3uiEXT tunisUniform3uiEXT
TUNIS_FORCE_INLINE void  tunisUniform3uiv(GLint location, GLsizei count, const GLuint * value) { tunisGL.tunisUniform3uiv(location, count, value); }
#define glUniform3uiv tunisUniform3uiv
TUNIS_FORCE_INLINE void  tunisUniform3uivEXT(GLint location, GLsizei count, const GLuint * value) { tunisGL.tunisUniform3uivEXT(location, count, value); }
#define glUniform3uivEXT tunisUniform3uivEXT
TUNIS_FORCE_INLINE void  tunisUniform4d(GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w) { tunisGL.tunisUniform4d(location, x, y, z, w); }
#define glUniform4d tunisUniform4d
TUNIS_FORCE_INLINE void  tunisUniform4dv(GLint location, GLsizei count, const GLdouble * value) { tunisGL.tunisUniform4dv(location, count, value); }
#define glUniform4dv tunisUniform4dv
TUNIS_FORCE_INLINE void  tunisUniform4f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3) { tunisGL.tunisUniform4f(location, v0, v1, v2, v3); }
#define glUniform4f tunisUniform4f
TUNIS_FORCE_INLINE void  tunisUniform4fARB(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3) { tunisGL.tunisUniform4fARB(location, v0, v1, v2, v3); }
#define glUniform4fARB tunisUniform4fARB
TUNIS_FORCE_INLINE void  tunisUniform4fv(GLint location, GLsizei count, const GLfloat * value) { tunisGL.tunisUniform4fv(location, count, value); }
#define glUniform4fv tunisUniform4fv
TUNIS_FORCE_INLINE void  tunisUniform4fvARB(GLint location, GLsizei count, const GLfloat * value) { tunisGL.tunisUniform4fvARB(location, count, value); }
#define glUniform4fvARB tunisUniform4fvARB
TUNIS_FORCE_INLINE void  tunisUniform4i(GLint location, GLint v0, GLint v1, GLint v2, GLint v3) { tunisGL.tunisUniform4i(location, v0, v1, v2, v3); }
#define glUniform4i tunisUniform4i
TUNIS_FORCE_INLINE void  tunisUniform4i64ARB(GLint location, GLint64 x, GLint64 y, GLint64 z, GLint64 w) { tunisGL.tunisUniform4i64ARB(location, x, y, z, w); }
#define glUniform4i64ARB tunisUniform4i64ARB
TUNIS_FORCE_INLINE void  tunisUniform4i64NV(GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w) { tunisGL.tunisUniform4i64NV(location, x, y, z, w); }
#define glUniform4i64NV tunisUniform4i64NV
TUNIS_FORCE_INLINE void  tunisUniform4i64vARB(GLint location, GLsizei count, const GLint64 * value) { tunisGL.tunisUniform4i64vARB(location, count, value); }
#define glUniform4i64vARB tunisUniform4i64vARB
TUNIS_FORCE_INLINE void  tunisUniform4i64vNV(GLint location, GLsizei count, const GLint64EXT * value) { tunisGL.tunisUniform4i64vNV(location, count, value); }
#define glUniform4i64vNV tunisUniform4i64vNV
TUNIS_FORCE_INLINE void  tunisUniform4iARB(GLint location, GLint v0, GLint v1, GLint v2, GLint v3) { tunisGL.tunisUniform4iARB(location, v0, v1, v2, v3); }
#define glUniform4iARB tunisUniform4iARB
TUNIS_FORCE_INLINE void  tunisUniform4iv(GLint location, GLsizei count, const GLint * value) { tunisGL.tunisUniform4iv(location, count, value); }
#define glUniform4iv tunisUniform4iv
TUNIS_FORCE_INLINE void  tunisUniform4ivARB(GLint location, GLsizei count, const GLint * value) { tunisGL.tunisUniform4ivARB(location, count, value); }
#define glUniform4ivARB tunisUniform4ivARB
TUNIS_FORCE_INLINE void  tunisUniform4ui(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3) { tunisGL.tunisUniform4ui(location, v0, v1, v2, v3); }
#define glUniform4ui tunisUniform4ui
TUNIS_FORCE_INLINE void  tunisUniform4ui64ARB(GLint location, GLuint64 x, GLuint64 y, GLuint64 z, GLuint64 w) { tunisGL.tunisUniform4ui64ARB(location, x, y, z, w); }
#define glUniform4ui64ARB tunisUniform4ui64ARB
TUNIS_FORCE_INLINE void  tunisUniform4ui64NV(GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w) { tunisGL.tunisUniform4ui64NV(location, x, y, z, w); }
#define glUniform4ui64NV tunisUniform4ui64NV
TUNIS_FORCE_INLINE void  tunisUniform4ui64vARB(GLint location, GLsizei count, const GLuint64 * value) { tunisGL.tunisUniform4ui64vARB(location, count, value); }
#define glUniform4ui64vARB tunisUniform4ui64vARB
TUNIS_FORCE_INLINE void  tunisUniform4ui64vNV(GLint location, GLsizei count, const GLuint64EXT * value) { tunisGL.tunisUniform4ui64vNV(location, count, value); }
#define glUniform4ui64vNV tunisUniform4ui64vNV
TUNIS_FORCE_INLINE void  tunisUniform4uiEXT(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3) { tunisGL.tunisUniform4uiEXT(location, v0, v1, v2, v3); }
#define glUniform4uiEXT tunisUniform4uiEXT
TUNIS_FORCE_INLINE void  tunisUniform4uiv(GLint location, GLsizei count, const GLuint * value) { tunisGL.tunisUniform4uiv(location, count, value); }
#define glUniform4uiv tunisUniform4uiv
TUNIS_FORCE_INLINE void  tunisUniform4uivEXT(GLint location, GLsizei count, const GLuint * value) { tunisGL.tunisUniform4uivEXT(location, count, value); }
#define glUniform4uivEXT tunisUniform4uivEXT
TUNIS_FORCE_INLINE void  tunisUniformBlockBinding(GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding) { tunisGL.tunisUniformBlockBinding(program, uniformBlockIndex, uniformBlockBinding); }
#define glUniformBlockBinding tunisUniformBlockBinding
TUNIS_FORCE_INLINE void  tunisUniformBufferEXT(GLuint program, GLint location, GLuint buffer) { tunisGL.tunisUniformBufferEXT(program, location, buffer); }
#define glUniformBufferEXT tunisUniformBufferEXT
TUNIS_FORCE_INLINE void  tunisUniformHandleui64ARB(GLint location, GLuint64 value) { tunisGL.tunisUniformHandleui64ARB(location, value); }
#define glUniformHandleui64ARB tunisUniformHandleui64ARB
TUNIS_FORCE_INLINE void  tunisUniformHandleui64IMG(GLint location, GLuint64 value) { tunisGL.tunisUniformHandleui64IMG(location, value); }
#define glUniformHandleui64IMG tunisUniformHandleui64IMG
TUNIS_FORCE_INLINE void  tunisUniformHandleui64NV(GLint location, GLuint64 value) { tunisGL.tunisUniformHandleui64NV(location, value); }
#define glUniformHandleui64NV tunisUniformHandleui64NV
TUNIS_FORCE_INLINE void  tunisUniformHandleui64vARB(GLint location, GLsizei count, const GLuint64 * value) { tunisGL.tunisUniformHandleui64vARB(location, count, value); }
#define glUniformHandleui64vARB tunisUniformHandleui64vARB
TUNIS_FORCE_INLINE void  tunisUniformHandleui64vIMG(GLint location, GLsizei count, const GLuint64 * value) { tunisGL.tunisUniformHandleui64vIMG(location, count, value); }
#define glUniformHandleui64vIMG tunisUniformHandleui64vIMG
TUNIS_FORCE_INLINE void  tunisUniformHandleui64vNV(GLint location, GLsizei count, const GLuint64 * value) { tunisGL.tunisUniformHandleui64vNV(location, count, value); }
#define glUniformHandleui64vNV tunisUniformHandleui64vNV
TUNIS_FORCE_INLINE void  tunisUniformMatrix2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { tunisGL.tunisUniformMatrix2dv(location, count, transpose, value); }
#define glUniformMatrix2dv tunisUniformMatrix2dv
TUNIS_FORCE_INLINE void  tunisUniformMatrix2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { tunisGL.tunisUniformMatrix2fv(location, count, transpose, value); }
#define glUniformMatrix2fv tunisUniformMatrix2fv
TUNIS_FORCE_INLINE void  tunisUniformMatrix2fvARB(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { tunisGL.tunisUniformMatrix2fvARB(location, count, transpose, value); }
#define glUniformMatrix2fvARB tunisUniformMatrix2fvARB
TUNIS_FORCE_INLINE void  tunisUniformMatrix2x3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { tunisGL.tunisUniformMatrix2x3dv(location, count, transpose, value); }
#define glUniformMatrix2x3dv tunisUniformMatrix2x3dv
TUNIS_FORCE_INLINE void  tunisUniformMatrix2x3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { tunisGL.tunisUniformMatrix2x3fv(location, count, transpose, value); }
#define glUniformMatrix2x3fv tunisUniformMatrix2x3fv
TUNIS_FORCE_INLINE void  tunisUniformMatrix2x3fvNV(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { tunisGL.tunisUniformMatrix2x3fvNV(location, count, transpose, value); }
#define glUniformMatrix2x3fvNV tunisUniformMatrix2x3fvNV
TUNIS_FORCE_INLINE void  tunisUniformMatrix2x4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { tunisGL.tunisUniformMatrix2x4dv(location, count, transpose, value); }
#define glUniformMatrix2x4dv tunisUniformMatrix2x4dv
TUNIS_FORCE_INLINE void  tunisUniformMatrix2x4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { tunisGL.tunisUniformMatrix2x4fv(location, count, transpose, value); }
#define glUniformMatrix2x4fv tunisUniformMatrix2x4fv
TUNIS_FORCE_INLINE void  tunisUniformMatrix2x4fvNV(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { tunisGL.tunisUniformMatrix2x4fvNV(location, count, transpose, value); }
#define glUniformMatrix2x4fvNV tunisUniformMatrix2x4fvNV
TUNIS_FORCE_INLINE void  tunisUniformMatrix3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { tunisGL.tunisUniformMatrix3dv(location, count, transpose, value); }
#define glUniformMatrix3dv tunisUniformMatrix3dv
TUNIS_FORCE_INLINE void  tunisUniformMatrix3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { tunisGL.tunisUniformMatrix3fv(location, count, transpose, value); }
#define glUniformMatrix3fv tunisUniformMatrix3fv
TUNIS_FORCE_INLINE void  tunisUniformMatrix3fvARB(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { tunisGL.tunisUniformMatrix3fvARB(location, count, transpose, value); }
#define glUniformMatrix3fvARB tunisUniformMatrix3fvARB
TUNIS_FORCE_INLINE void  tunisUniformMatrix3x2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { tunisGL.tunisUniformMatrix3x2dv(location, count, transpose, value); }
#define glUniformMatrix3x2dv tunisUniformMatrix3x2dv
TUNIS_FORCE_INLINE void  tunisUniformMatrix3x2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { tunisGL.tunisUniformMatrix3x2fv(location, count, transpose, value); }
#define glUniformMatrix3x2fv tunisUniformMatrix3x2fv
TUNIS_FORCE_INLINE void  tunisUniformMatrix3x2fvNV(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { tunisGL.tunisUniformMatrix3x2fvNV(location, count, transpose, value); }
#define glUniformMatrix3x2fvNV tunisUniformMatrix3x2fvNV
TUNIS_FORCE_INLINE void  tunisUniformMatrix3x4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { tunisGL.tunisUniformMatrix3x4dv(location, count, transpose, value); }
#define glUniformMatrix3x4dv tunisUniformMatrix3x4dv
TUNIS_FORCE_INLINE void  tunisUniformMatrix3x4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { tunisGL.tunisUniformMatrix3x4fv(location, count, transpose, value); }
#define glUniformMatrix3x4fv tunisUniformMatrix3x4fv
TUNIS_FORCE_INLINE void  tunisUniformMatrix3x4fvNV(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { tunisGL.tunisUniformMatrix3x4fvNV(location, count, transpose, value); }
#define glUniformMatrix3x4fvNV tunisUniformMatrix3x4fvNV
TUNIS_FORCE_INLINE void  tunisUniformMatrix4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { tunisGL.tunisUniformMatrix4dv(location, count, transpose, value); }
#define glUniformMatrix4dv tunisUniformMatrix4dv
TUNIS_FORCE_INLINE void  tunisUniformMatrix4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { tunisGL.tunisUniformMatrix4fv(location, count, transpose, value); }
#define glUniformMatrix4fv tunisUniformMatrix4fv
TUNIS_FORCE_INLINE void  tunisUniformMatrix4fvARB(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { tunisGL.tunisUniformMatrix4fvARB(location, count, transpose, value); }
#define glUniformMatrix4fvARB tunisUniformMatrix4fvARB
TUNIS_FORCE_INLINE void  tunisUniformMatrix4x2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { tunisGL.tunisUniformMatrix4x2dv(location, count, transpose, value); }
#define glUniformMatrix4x2dv tunisUniformMatrix4x2dv
TUNIS_FORCE_INLINE void  tunisUniformMatrix4x2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { tunisGL.tunisUniformMatrix4x2fv(location, count, transpose, value); }
#define glUniformMatrix4x2fv tunisUniformMatrix4x2fv
TUNIS_FORCE_INLINE void  tunisUniformMatrix4x2fvNV(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { tunisGL.tunisUniformMatrix4x2fvNV(location, count, transpose, value); }
#define glUniformMatrix4x2fvNV tunisUniformMatrix4x2fvNV
TUNIS_FORCE_INLINE void  tunisUniformMatrix4x3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { tunisGL.tunisUniformMatrix4x3dv(location, count, transpose, value); }
#define glUniformMatrix4x3dv tunisUniformMatrix4x3dv
TUNIS_FORCE_INLINE void  tunisUniformMatrix4x3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { tunisGL.tunisUniformMatrix4x3fv(location, count, transpose, value); }
#define glUniformMatrix4x3fv tunisUniformMatrix4x3fv
TUNIS_FORCE_INLINE void  tunisUniformMatrix4x3fvNV(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { tunisGL.tunisUniformMatrix4x3fvNV(location, count, transpose, value); }
#define glUniformMatrix4x3fvNV tunisUniformMatrix4x3fvNV
TUNIS_FORCE_INLINE void  tunisUniformSubroutinesuiv(GLenum shadertype, GLsizei count, const GLuint * indices) { tunisGL.tunisUniformSubroutinesuiv(shadertype, count, indices); }
#define glUniformSubroutinesuiv tunisUniformSubroutinesuiv
TUNIS_FORCE_INLINE void  tunisUniformui64NV(GLint location, GLuint64EXT value) { tunisGL.tunisUniformui64NV(location, value); }
#define glUniformui64NV tunisUniformui64NV
TUNIS_FORCE_INLINE void  tunisUniformui64vNV(GLint location, GLsizei count, const GLuint64EXT * value) { tunisGL.tunisUniformui64vNV(location, count, value); }
#define glUniformui64vNV tunisUniformui64vNV
TUNIS_FORCE_INLINE void  tunisUnlockArraysEXT(void) { tunisGL.tunisUnlockArraysEXT(); }
#define glUnlockArraysEXT tunisUnlockArraysEXT
TUNIS_FORCE_INLINE GLboolean tunisUnmapBuffer(GLenum target) { return tunisGL.tunisUnmapBuffer(target); }
#define glUnmapBuffer tunisUnmapBuffer
TUNIS_FORCE_INLINE GLboolean tunisUnmapBufferARB(GLenum target) { return tunisGL.tunisUnmapBufferARB(target); }
#define glUnmapBufferARB tunisUnmapBufferARB
TUNIS_FORCE_INLINE GLboolean tunisUnmapBufferOES(GLenum target) { return tunisGL.tunisUnmapBufferOES(target); }
#define glUnmapBufferOES tunisUnmapBufferOES
TUNIS_FORCE_INLINE GLboolean tunisUnmapNamedBuffer(GLuint buffer) { return tunisGL.tunisUnmapNamedBuffer(buffer); }
#define glUnmapNamedBuffer tunisUnmapNamedBuffer
TUNIS_FORCE_INLINE GLboolean tunisUnmapNamedBufferEXT(GLuint buffer) { return tunisGL.tunisUnmapNamedBufferEXT(buffer); }
#define glUnmapNamedBufferEXT tunisUnmapNamedBufferEXT
TUNIS_FORCE_INLINE void  tunisUnmapObjectBufferATI(GLuint buffer) { tunisGL.tunisUnmapObjectBufferATI(buffer); }
#define glUnmapObjectBufferATI tunisUnmapObjectBufferATI
TUNIS_FORCE_INLINE void  tunisUnmapTexture2DINTEL(GLuint texture, GLint level) { tunisGL.tunisUnmapTexture2DINTEL(texture, level); }
#define glUnmapTexture2DINTEL tunisUnmapTexture2DINTEL
TUNIS_FORCE_INLINE void  tunisUpdateObjectBufferATI(GLuint buffer, GLuint offset, GLsizei size, const void * pointer, GLenum preserve) { tunisGL.tunisUpdateObjectBufferATI(buffer, offset, size, pointer, preserve); }
#define glUpdateObjectBufferATI tunisUpdateObjectBufferATI
TUNIS_FORCE_INLINE void  tunisUseProgram(GLuint program) { tunisGL.tunisUseProgram(program); }
#define glUseProgram tunisUseProgram
TUNIS_FORCE_INLINE void  tunisUseProgramObjectARB(GLhandleARB programObj) { tunisGL.tunisUseProgramObjectARB(programObj); }
#define glUseProgramObjectARB tunisUseProgramObjectARB
TUNIS_FORCE_INLINE void  tunisUseProgramStages(GLuint pipeline, GLbitfield stages, GLuint program) { tunisGL.tunisUseProgramStages(pipeline, stages, program); }
#define glUseProgramStages tunisUseProgramStages
TUNIS_FORCE_INLINE void  tunisUseProgramStagesEXT(GLuint pipeline, GLbitfield stages, GLuint program) { tunisGL.tunisUseProgramStagesEXT(pipeline, stages, program); }
#define glUseProgramStagesEXT tunisUseProgramStagesEXT
TUNIS_FORCE_INLINE void  tunisUseShaderProgramEXT(GLenum type, GLuint program) { tunisGL.tunisUseShaderProgramEXT(type, program); }
#define glUseShaderProgramEXT tunisUseShaderProgramEXT
TUNIS_FORCE_INLINE void  tunisVDPAUFiniNV(void) { tunisGL.tunisVDPAUFiniNV(); }
#define glVDPAUFiniNV tunisVDPAUFiniNV
TUNIS_FORCE_INLINE void  tunisVDPAUGetSurfaceivNV(GLvdpauSurfaceNV surface, GLenum pname, GLsizei bufSize, GLsizei * length, GLint * values) { tunisGL.tunisVDPAUGetSurfaceivNV(surface, pname, bufSize, length, values); }
#define glVDPAUGetSurfaceivNV tunisVDPAUGetSurfaceivNV
TUNIS_FORCE_INLINE void  tunisVDPAUInitNV(const void * vdpDevice, const void * getProcAddress) { tunisGL.tunisVDPAUInitNV(vdpDevice, getProcAddress); }
#define glVDPAUInitNV tunisVDPAUInitNV
TUNIS_FORCE_INLINE GLboolean tunisVDPAUIsSurfaceNV(GLvdpauSurfaceNV surface) { return tunisGL.tunisVDPAUIsSurfaceNV(surface); }
#define glVDPAUIsSurfaceNV tunisVDPAUIsSurfaceNV
TUNIS_FORCE_INLINE void  tunisVDPAUMapSurfacesNV(GLsizei numSurfaces, const GLvdpauSurfaceNV * surfaces) { tunisGL.tunisVDPAUMapSurfacesNV(numSurfaces, surfaces); }
#define glVDPAUMapSurfacesNV tunisVDPAUMapSurfacesNV
TUNIS_FORCE_INLINE GLvdpauSurfaceNV tunisVDPAURegisterOutputSurfaceNV(const void * vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint * textureNames) { return tunisGL.tunisVDPAURegisterOutputSurfaceNV(vdpSurface, target, numTextureNames, textureNames); }
#define glVDPAURegisterOutputSurfaceNV tunisVDPAURegisterOutputSurfaceNV
TUNIS_FORCE_INLINE GLvdpauSurfaceNV tunisVDPAURegisterVideoSurfaceNV(const void * vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint * textureNames) { return tunisGL.tunisVDPAURegisterVideoSurfaceNV(vdpSurface, target, numTextureNames, textureNames); }
#define glVDPAURegisterVideoSurfaceNV tunisVDPAURegisterVideoSurfaceNV
TUNIS_FORCE_INLINE void  tunisVDPAUSurfaceAccessNV(GLvdpauSurfaceNV surface, GLenum access) { tunisGL.tunisVDPAUSurfaceAccessNV(surface, access); }
#define glVDPAUSurfaceAccessNV tunisVDPAUSurfaceAccessNV
TUNIS_FORCE_INLINE void  tunisVDPAUUnmapSurfacesNV(GLsizei numSurface, const GLvdpauSurfaceNV * surfaces) { tunisGL.tunisVDPAUUnmapSurfacesNV(numSurface, surfaces); }
#define glVDPAUUnmapSurfacesNV tunisVDPAUUnmapSurfacesNV
TUNIS_FORCE_INLINE void  tunisVDPAUUnregisterSurfaceNV(GLvdpauSurfaceNV surface) { tunisGL.tunisVDPAUUnregisterSurfaceNV(surface); }
#define glVDPAUUnregisterSurfaceNV tunisVDPAUUnregisterSurfaceNV
TUNIS_FORCE_INLINE void  tunisValidateProgram(GLuint program) { tunisGL.tunisValidateProgram(program); }
#define glValidateProgram tunisValidateProgram
TUNIS_FORCE_INLINE void  tunisValidateProgramARB(GLhandleARB programObj) { tunisGL.tunisValidateProgramARB(programObj); }
#define glValidateProgramARB tunisValidateProgramARB
TUNIS_FORCE_INLINE void  tunisValidateProgramPipeline(GLuint pipeline) { tunisGL.tunisValidateProgramPipeline(pipeline); }
#define glValidateProgramPipeline tunisValidateProgramPipeline
TUNIS_FORCE_INLINE void  tunisValidateProgramPipelineEXT(GLuint pipeline) { tunisGL.tunisValidateProgramPipelineEXT(pipeline); }
#define glValidateProgramPipelineEXT tunisValidateProgramPipelineEXT
TUNIS_FORCE_INLINE void  tunisVariantArrayObjectATI(GLuint id, GLenum type, GLsizei stride, GLuint buffer, GLuint offset) { tunisGL.tunisVariantArrayObjectATI(id, type, stride, buffer, offset); }
#define glVariantArrayObjectATI tunisVariantArrayObjectATI
TUNIS_FORCE_INLINE void  tunisVariantPointerEXT(GLuint id, GLenum type, GLuint stride, const void * addr) { tunisGL.tunisVariantPointerEXT(id, type, stride, addr); }
#define glVariantPointerEXT tunisVariantPointerEXT
TUNIS_FORCE_INLINE void  tunisVariantbvEXT(GLuint id, const GLbyte * addr) { tunisGL.tunisVariantbvEXT(id, addr); }
#define glVariantbvEXT tunisVariantbvEXT
TUNIS_FORCE_INLINE void  tunisVariantdvEXT(GLuint id, const GLdouble * addr) { tunisGL.tunisVariantdvEXT(id, addr); }
#define glVariantdvEXT tunisVariantdvEXT
TUNIS_FORCE_INLINE void  tunisVariantfvEXT(GLuint id, const GLfloat * addr) { tunisGL.tunisVariantfvEXT(id, addr); }
#define glVariantfvEXT tunisVariantfvEXT
TUNIS_FORCE_INLINE void  tunisVariantivEXT(GLuint id, const GLint * addr) { tunisGL.tunisVariantivEXT(id, addr); }
#define glVariantivEXT tunisVariantivEXT
TUNIS_FORCE_INLINE void  tunisVariantsvEXT(GLuint id, const GLshort * addr) { tunisGL.tunisVariantsvEXT(id, addr); }
#define glVariantsvEXT tunisVariantsvEXT
TUNIS_FORCE_INLINE void  tunisVariantubvEXT(GLuint id, const GLubyte * addr) { tunisGL.tunisVariantubvEXT(id, addr); }
#define glVariantubvEXT tunisVariantubvEXT
TUNIS_FORCE_INLINE void  tunisVariantuivEXT(GLuint id, const GLuint * addr) { tunisGL.tunisVariantuivEXT(id, addr); }
#define glVariantuivEXT tunisVariantuivEXT
TUNIS_FORCE_INLINE void  tunisVariantusvEXT(GLuint id, const GLushort * addr) { tunisGL.tunisVariantusvEXT(id, addr); }
#define glVariantusvEXT tunisVariantusvEXT
TUNIS_FORCE_INLINE void  tunisVertex2bOES(GLbyte x, GLbyte y) { tunisGL.tunisVertex2bOES(x, y); }
#define glVertex2bOES tunisVertex2bOES
TUNIS_FORCE_INLINE void  tunisVertex2bvOES(const GLbyte * coords) { tunisGL.tunisVertex2bvOES(coords); }
#define glVertex2bvOES tunisVertex2bvOES
TUNIS_FORCE_INLINE void  tunisVertex2d(GLdouble x, GLdouble y) { tunisGL.tunisVertex2d(x, y); }
#define glVertex2d tunisVertex2d
TUNIS_FORCE_INLINE void  tunisVertex2dv(const GLdouble * v) { tunisGL.tunisVertex2dv(v); }
#define glVertex2dv tunisVertex2dv
TUNIS_FORCE_INLINE void  tunisVertex2f(GLfloat x, GLfloat y) { tunisGL.tunisVertex2f(x, y); }
#define glVertex2f tunisVertex2f
TUNIS_FORCE_INLINE void  tunisVertex2fv(const GLfloat * v) { tunisGL.tunisVertex2fv(v); }
#define glVertex2fv tunisVertex2fv
TUNIS_FORCE_INLINE void  tunisVertex2hNV(GLhalfNV x, GLhalfNV y) { tunisGL.tunisVertex2hNV(x, y); }
#define glVertex2hNV tunisVertex2hNV
TUNIS_FORCE_INLINE void  tunisVertex2hvNV(const GLhalfNV * v) { tunisGL.tunisVertex2hvNV(v); }
#define glVertex2hvNV tunisVertex2hvNV
TUNIS_FORCE_INLINE void  tunisVertex2i(GLint x, GLint y) { tunisGL.tunisVertex2i(x, y); }
#define glVertex2i tunisVertex2i
TUNIS_FORCE_INLINE void  tunisVertex2iv(const GLint * v) { tunisGL.tunisVertex2iv(v); }
#define glVertex2iv tunisVertex2iv
TUNIS_FORCE_INLINE void  tunisVertex2s(GLshort x, GLshort y) { tunisGL.tunisVertex2s(x, y); }
#define glVertex2s tunisVertex2s
TUNIS_FORCE_INLINE void  tunisVertex2sv(const GLshort * v) { tunisGL.tunisVertex2sv(v); }
#define glVertex2sv tunisVertex2sv
TUNIS_FORCE_INLINE void  tunisVertex2xOES(GLfixed x) { tunisGL.tunisVertex2xOES(x); }
#define glVertex2xOES tunisVertex2xOES
TUNIS_FORCE_INLINE void  tunisVertex2xvOES(const GLfixed * coords) { tunisGL.tunisVertex2xvOES(coords); }
#define glVertex2xvOES tunisVertex2xvOES
TUNIS_FORCE_INLINE void  tunisVertex3bOES(GLbyte x, GLbyte y, GLbyte z) { tunisGL.tunisVertex3bOES(x, y, z); }
#define glVertex3bOES tunisVertex3bOES
TUNIS_FORCE_INLINE void  tunisVertex3bvOES(const GLbyte * coords) { tunisGL.tunisVertex3bvOES(coords); }
#define glVertex3bvOES tunisVertex3bvOES
TUNIS_FORCE_INLINE void  tunisVertex3d(GLdouble x, GLdouble y, GLdouble z) { tunisGL.tunisVertex3d(x, y, z); }
#define glVertex3d tunisVertex3d
TUNIS_FORCE_INLINE void  tunisVertex3dv(const GLdouble * v) { tunisGL.tunisVertex3dv(v); }
#define glVertex3dv tunisVertex3dv
TUNIS_FORCE_INLINE void  tunisVertex3f(GLfloat x, GLfloat y, GLfloat z) { tunisGL.tunisVertex3f(x, y, z); }
#define glVertex3f tunisVertex3f
TUNIS_FORCE_INLINE void  tunisVertex3fv(const GLfloat * v) { tunisGL.tunisVertex3fv(v); }
#define glVertex3fv tunisVertex3fv
TUNIS_FORCE_INLINE void  tunisVertex3hNV(GLhalfNV x, GLhalfNV y, GLhalfNV z) { tunisGL.tunisVertex3hNV(x, y, z); }
#define glVertex3hNV tunisVertex3hNV
TUNIS_FORCE_INLINE void  tunisVertex3hvNV(const GLhalfNV * v) { tunisGL.tunisVertex3hvNV(v); }
#define glVertex3hvNV tunisVertex3hvNV
TUNIS_FORCE_INLINE void  tunisVertex3i(GLint x, GLint y, GLint z) { tunisGL.tunisVertex3i(x, y, z); }
#define glVertex3i tunisVertex3i
TUNIS_FORCE_INLINE void  tunisVertex3iv(const GLint * v) { tunisGL.tunisVertex3iv(v); }
#define glVertex3iv tunisVertex3iv
TUNIS_FORCE_INLINE void  tunisVertex3s(GLshort x, GLshort y, GLshort z) { tunisGL.tunisVertex3s(x, y, z); }
#define glVertex3s tunisVertex3s
TUNIS_FORCE_INLINE void  tunisVertex3sv(const GLshort * v) { tunisGL.tunisVertex3sv(v); }
#define glVertex3sv tunisVertex3sv
TUNIS_FORCE_INLINE void  tunisVertex3xOES(GLfixed x, GLfixed y) { tunisGL.tunisVertex3xOES(x, y); }
#define glVertex3xOES tunisVertex3xOES
TUNIS_FORCE_INLINE void  tunisVertex3xvOES(const GLfixed * coords) { tunisGL.tunisVertex3xvOES(coords); }
#define glVertex3xvOES tunisVertex3xvOES
TUNIS_FORCE_INLINE void  tunisVertex4bOES(GLbyte x, GLbyte y, GLbyte z, GLbyte w) { tunisGL.tunisVertex4bOES(x, y, z, w); }
#define glVertex4bOES tunisVertex4bOES
TUNIS_FORCE_INLINE void  tunisVertex4bvOES(const GLbyte * coords) { tunisGL.tunisVertex4bvOES(coords); }
#define glVertex4bvOES tunisVertex4bvOES
TUNIS_FORCE_INLINE void  tunisVertex4d(GLdouble x, GLdouble y, GLdouble z, GLdouble w) { tunisGL.tunisVertex4d(x, y, z, w); }
#define glVertex4d tunisVertex4d
TUNIS_FORCE_INLINE void  tunisVertex4dv(const GLdouble * v) { tunisGL.tunisVertex4dv(v); }
#define glVertex4dv tunisVertex4dv
TUNIS_FORCE_INLINE void  tunisVertex4f(GLfloat x, GLfloat y, GLfloat z, GLfloat w) { tunisGL.tunisVertex4f(x, y, z, w); }
#define glVertex4f tunisVertex4f
TUNIS_FORCE_INLINE void  tunisVertex4fv(const GLfloat * v) { tunisGL.tunisVertex4fv(v); }
#define glVertex4fv tunisVertex4fv
TUNIS_FORCE_INLINE void  tunisVertex4hNV(GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w) { tunisGL.tunisVertex4hNV(x, y, z, w); }
#define glVertex4hNV tunisVertex4hNV
TUNIS_FORCE_INLINE void  tunisVertex4hvNV(const GLhalfNV * v) { tunisGL.tunisVertex4hvNV(v); }
#define glVertex4hvNV tunisVertex4hvNV
TUNIS_FORCE_INLINE void  tunisVertex4i(GLint x, GLint y, GLint z, GLint w) { tunisGL.tunisVertex4i(x, y, z, w); }
#define glVertex4i tunisVertex4i
TUNIS_FORCE_INLINE void  tunisVertex4iv(const GLint * v) { tunisGL.tunisVertex4iv(v); }
#define glVertex4iv tunisVertex4iv
TUNIS_FORCE_INLINE void  tunisVertex4s(GLshort x, GLshort y, GLshort z, GLshort w) { tunisGL.tunisVertex4s(x, y, z, w); }
#define glVertex4s tunisVertex4s
TUNIS_FORCE_INLINE void  tunisVertex4sv(const GLshort * v) { tunisGL.tunisVertex4sv(v); }
#define glVertex4sv tunisVertex4sv
TUNIS_FORCE_INLINE void  tunisVertex4xOES(GLfixed x, GLfixed y, GLfixed z) { tunisGL.tunisVertex4xOES(x, y, z); }
#define glVertex4xOES tunisVertex4xOES
TUNIS_FORCE_INLINE void  tunisVertex4xvOES(const GLfixed * coords) { tunisGL.tunisVertex4xvOES(coords); }
#define glVertex4xvOES tunisVertex4xvOES
TUNIS_FORCE_INLINE void  tunisVertexArrayAttribBinding(GLuint vaobj, GLuint attribindex, GLuint bindingindex) { tunisGL.tunisVertexArrayAttribBinding(vaobj, attribindex, bindingindex); }
#define glVertexArrayAttribBinding tunisVertexArrayAttribBinding
TUNIS_FORCE_INLINE void  tunisVertexArrayAttribFormat(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset) { tunisGL.tunisVertexArrayAttribFormat(vaobj, attribindex, size, type, normalized, relativeoffset); }
#define glVertexArrayAttribFormat tunisVertexArrayAttribFormat
TUNIS_FORCE_INLINE void  tunisVertexArrayAttribIFormat(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset) { tunisGL.tunisVertexArrayAttribIFormat(vaobj, attribindex, size, type, relativeoffset); }
#define glVertexArrayAttribIFormat tunisVertexArrayAttribIFormat
TUNIS_FORCE_INLINE void  tunisVertexArrayAttribLFormat(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset) { tunisGL.tunisVertexArrayAttribLFormat(vaobj, attribindex, size, type, relativeoffset); }
#define glVertexArrayAttribLFormat tunisVertexArrayAttribLFormat
TUNIS_FORCE_INLINE void  tunisVertexArrayBindVertexBufferEXT(GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride) { tunisGL.tunisVertexArrayBindVertexBufferEXT(vaobj, bindingindex, buffer, offset, stride); }
#define glVertexArrayBindVertexBufferEXT tunisVertexArrayBindVertexBufferEXT
TUNIS_FORCE_INLINE void  tunisVertexArrayBindingDivisor(GLuint vaobj, GLuint bindingindex, GLuint divisor) { tunisGL.tunisVertexArrayBindingDivisor(vaobj, bindingindex, divisor); }
#define glVertexArrayBindingDivisor tunisVertexArrayBindingDivisor
TUNIS_FORCE_INLINE void  tunisVertexArrayColorOffsetEXT(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset) { tunisGL.tunisVertexArrayColorOffsetEXT(vaobj, buffer, size, type, stride, offset); }
#define glVertexArrayColorOffsetEXT tunisVertexArrayColorOffsetEXT
TUNIS_FORCE_INLINE void  tunisVertexArrayEdgeFlagOffsetEXT(GLuint vaobj, GLuint buffer, GLsizei stride, GLintptr offset) { tunisGL.tunisVertexArrayEdgeFlagOffsetEXT(vaobj, buffer, stride, offset); }
#define glVertexArrayEdgeFlagOffsetEXT tunisVertexArrayEdgeFlagOffsetEXT
TUNIS_FORCE_INLINE void  tunisVertexArrayElementBuffer(GLuint vaobj, GLuint buffer) { tunisGL.tunisVertexArrayElementBuffer(vaobj, buffer); }
#define glVertexArrayElementBuffer tunisVertexArrayElementBuffer
TUNIS_FORCE_INLINE void  tunisVertexArrayFogCoordOffsetEXT(GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset) { tunisGL.tunisVertexArrayFogCoordOffsetEXT(vaobj, buffer, type, stride, offset); }
#define glVertexArrayFogCoordOffsetEXT tunisVertexArrayFogCoordOffsetEXT
TUNIS_FORCE_INLINE void  tunisVertexArrayIndexOffsetEXT(GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset) { tunisGL.tunisVertexArrayIndexOffsetEXT(vaobj, buffer, type, stride, offset); }
#define glVertexArrayIndexOffsetEXT tunisVertexArrayIndexOffsetEXT
TUNIS_FORCE_INLINE void  tunisVertexArrayMultiTexCoordOffsetEXT(GLuint vaobj, GLuint buffer, GLenum texunit, GLint size, GLenum type, GLsizei stride, GLintptr offset) { tunisGL.tunisVertexArrayMultiTexCoordOffsetEXT(vaobj, buffer, texunit, size, type, stride, offset); }
#define glVertexArrayMultiTexCoordOffsetEXT tunisVertexArrayMultiTexCoordOffsetEXT
TUNIS_FORCE_INLINE void  tunisVertexArrayNormalOffsetEXT(GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset) { tunisGL.tunisVertexArrayNormalOffsetEXT(vaobj, buffer, type, stride, offset); }
#define glVertexArrayNormalOffsetEXT tunisVertexArrayNormalOffsetEXT
TUNIS_FORCE_INLINE void  tunisVertexArrayParameteriAPPLE(GLenum pname, GLint param) { tunisGL.tunisVertexArrayParameteriAPPLE(pname, param); }
#define glVertexArrayParameteriAPPLE tunisVertexArrayParameteriAPPLE
TUNIS_FORCE_INLINE void  tunisVertexArrayRangeAPPLE(GLsizei length, void * pointer) { tunisGL.tunisVertexArrayRangeAPPLE(length, pointer); }
#define glVertexArrayRangeAPPLE tunisVertexArrayRangeAPPLE
TUNIS_FORCE_INLINE void  tunisVertexArrayRangeNV(GLsizei length, const void * pointer) { tunisGL.tunisVertexArrayRangeNV(length, pointer); }
#define glVertexArrayRangeNV tunisVertexArrayRangeNV
TUNIS_FORCE_INLINE void  tunisVertexArraySecondaryColorOffsetEXT(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset) { tunisGL.tunisVertexArraySecondaryColorOffsetEXT(vaobj, buffer, size, type, stride, offset); }
#define glVertexArraySecondaryColorOffsetEXT tunisVertexArraySecondaryColorOffsetEXT
TUNIS_FORCE_INLINE void  tunisVertexArrayTexCoordOffsetEXT(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset) { tunisGL.tunisVertexArrayTexCoordOffsetEXT(vaobj, buffer, size, type, stride, offset); }
#define glVertexArrayTexCoordOffsetEXT tunisVertexArrayTexCoordOffsetEXT
TUNIS_FORCE_INLINE void  tunisVertexArrayVertexAttribBindingEXT(GLuint vaobj, GLuint attribindex, GLuint bindingindex) { tunisGL.tunisVertexArrayVertexAttribBindingEXT(vaobj, attribindex, bindingindex); }
#define glVertexArrayVertexAttribBindingEXT tunisVertexArrayVertexAttribBindingEXT
TUNIS_FORCE_INLINE void  tunisVertexArrayVertexAttribDivisorEXT(GLuint vaobj, GLuint index, GLuint divisor) { tunisGL.tunisVertexArrayVertexAttribDivisorEXT(vaobj, index, divisor); }
#define glVertexArrayVertexAttribDivisorEXT tunisVertexArrayVertexAttribDivisorEXT
TUNIS_FORCE_INLINE void  tunisVertexArrayVertexAttribFormatEXT(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset) { tunisGL.tunisVertexArrayVertexAttribFormatEXT(vaobj, attribindex, size, type, normalized, relativeoffset); }
#define glVertexArrayVertexAttribFormatEXT tunisVertexArrayVertexAttribFormatEXT
TUNIS_FORCE_INLINE void  tunisVertexArrayVertexAttribIFormatEXT(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset) { tunisGL.tunisVertexArrayVertexAttribIFormatEXT(vaobj, attribindex, size, type, relativeoffset); }
#define glVertexArrayVertexAttribIFormatEXT tunisVertexArrayVertexAttribIFormatEXT
TUNIS_FORCE_INLINE void  tunisVertexArrayVertexAttribIOffsetEXT(GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset) { tunisGL.tunisVertexArrayVertexAttribIOffsetEXT(vaobj, buffer, index, size, type, stride, offset); }
#define glVertexArrayVertexAttribIOffsetEXT tunisVertexArrayVertexAttribIOffsetEXT
TUNIS_FORCE_INLINE void  tunisVertexArrayVertexAttribLFormatEXT(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset) { tunisGL.tunisVertexArrayVertexAttribLFormatEXT(vaobj, attribindex, size, type, relativeoffset); }
#define glVertexArrayVertexAttribLFormatEXT tunisVertexArrayVertexAttribLFormatEXT
TUNIS_FORCE_INLINE void  tunisVertexArrayVertexAttribLOffsetEXT(GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset) { tunisGL.tunisVertexArrayVertexAttribLOffsetEXT(vaobj, buffer, index, size, type, stride, offset); }
#define glVertexArrayVertexAttribLOffsetEXT tunisVertexArrayVertexAttribLOffsetEXT
TUNIS_FORCE_INLINE void  tunisVertexArrayVertexAttribOffsetEXT(GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLintptr offset) { tunisGL.tunisVertexArrayVertexAttribOffsetEXT(vaobj, buffer, index, size, type, normalized, stride, offset); }
#define glVertexArrayVertexAttribOffsetEXT tunisVertexArrayVertexAttribOffsetEXT
TUNIS_FORCE_INLINE void  tunisVertexArrayVertexBindingDivisorEXT(GLuint vaobj, GLuint bindingindex, GLuint divisor) { tunisGL.tunisVertexArrayVertexBindingDivisorEXT(vaobj, bindingindex, divisor); }
#define glVertexArrayVertexBindingDivisorEXT tunisVertexArrayVertexBindingDivisorEXT
TUNIS_FORCE_INLINE void  tunisVertexArrayVertexBuffer(GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride) { tunisGL.tunisVertexArrayVertexBuffer(vaobj, bindingindex, buffer, offset, stride); }
#define glVertexArrayVertexBuffer tunisVertexArrayVertexBuffer
TUNIS_FORCE_INLINE void  tunisVertexArrayVertexBuffers(GLuint vaobj, GLuint first, GLsizei count, const GLuint * buffers, const GLintptr * offsets, const GLsizei * strides) { tunisGL.tunisVertexArrayVertexBuffers(vaobj, first, count, buffers, offsets, strides); }
#define glVertexArrayVertexBuffers tunisVertexArrayVertexBuffers
TUNIS_FORCE_INLINE void  tunisVertexArrayVertexOffsetEXT(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset) { tunisGL.tunisVertexArrayVertexOffsetEXT(vaobj, buffer, size, type, stride, offset); }
#define glVertexArrayVertexOffsetEXT tunisVertexArrayVertexOffsetEXT
TUNIS_FORCE_INLINE void  tunisVertexAttrib1d(GLuint index, GLdouble x) { tunisGL.tunisVertexAttrib1d(index, x); }
#define glVertexAttrib1d tunisVertexAttrib1d
TUNIS_FORCE_INLINE void  tunisVertexAttrib1dARB(GLuint index, GLdouble x) { tunisGL.tunisVertexAttrib1dARB(index, x); }
#define glVertexAttrib1dARB tunisVertexAttrib1dARB
TUNIS_FORCE_INLINE void  tunisVertexAttrib1dNV(GLuint index, GLdouble x) { tunisGL.tunisVertexAttrib1dNV(index, x); }
#define glVertexAttrib1dNV tunisVertexAttrib1dNV
TUNIS_FORCE_INLINE void  tunisVertexAttrib1dv(GLuint index, const GLdouble * v) { tunisGL.tunisVertexAttrib1dv(index, v); }
#define glVertexAttrib1dv tunisVertexAttrib1dv
TUNIS_FORCE_INLINE void  tunisVertexAttrib1dvARB(GLuint index, const GLdouble * v) { tunisGL.tunisVertexAttrib1dvARB(index, v); }
#define glVertexAttrib1dvARB tunisVertexAttrib1dvARB
TUNIS_FORCE_INLINE void  tunisVertexAttrib1dvNV(GLuint index, const GLdouble * v) { tunisGL.tunisVertexAttrib1dvNV(index, v); }
#define glVertexAttrib1dvNV tunisVertexAttrib1dvNV
TUNIS_FORCE_INLINE void  tunisVertexAttrib1f(GLuint index, GLfloat x) { tunisGL.tunisVertexAttrib1f(index, x); }
#define glVertexAttrib1f tunisVertexAttrib1f
TUNIS_FORCE_INLINE void  tunisVertexAttrib1fARB(GLuint index, GLfloat x) { tunisGL.tunisVertexAttrib1fARB(index, x); }
#define glVertexAttrib1fARB tunisVertexAttrib1fARB
TUNIS_FORCE_INLINE void  tunisVertexAttrib1fNV(GLuint index, GLfloat x) { tunisGL.tunisVertexAttrib1fNV(index, x); }
#define glVertexAttrib1fNV tunisVertexAttrib1fNV
TUNIS_FORCE_INLINE void  tunisVertexAttrib1fv(GLuint index, const GLfloat * v) { tunisGL.tunisVertexAttrib1fv(index, v); }
#define glVertexAttrib1fv tunisVertexAttrib1fv
TUNIS_FORCE_INLINE void  tunisVertexAttrib1fvARB(GLuint index, const GLfloat * v) { tunisGL.tunisVertexAttrib1fvARB(index, v); }
#define glVertexAttrib1fvARB tunisVertexAttrib1fvARB
TUNIS_FORCE_INLINE void  tunisVertexAttrib1fvNV(GLuint index, const GLfloat * v) { tunisGL.tunisVertexAttrib1fvNV(index, v); }
#define glVertexAttrib1fvNV tunisVertexAttrib1fvNV
TUNIS_FORCE_INLINE void  tunisVertexAttrib1hNV(GLuint index, GLhalfNV x) { tunisGL.tunisVertexAttrib1hNV(index, x); }
#define glVertexAttrib1hNV tunisVertexAttrib1hNV
TUNIS_FORCE_INLINE void  tunisVertexAttrib1hvNV(GLuint index, const GLhalfNV * v) { tunisGL.tunisVertexAttrib1hvNV(index, v); }
#define glVertexAttrib1hvNV tunisVertexAttrib1hvNV
TUNIS_FORCE_INLINE void  tunisVertexAttrib1s(GLuint index, GLshort x) { tunisGL.tunisVertexAttrib1s(index, x); }
#define glVertexAttrib1s tunisVertexAttrib1s
TUNIS_FORCE_INLINE void  tunisVertexAttrib1sARB(GLuint index, GLshort x) { tunisGL.tunisVertexAttrib1sARB(index, x); }
#define glVertexAttrib1sARB tunisVertexAttrib1sARB
TUNIS_FORCE_INLINE void  tunisVertexAttrib1sNV(GLuint index, GLshort x) { tunisGL.tunisVertexAttrib1sNV(index, x); }
#define glVertexAttrib1sNV tunisVertexAttrib1sNV
TUNIS_FORCE_INLINE void  tunisVertexAttrib1sv(GLuint index, const GLshort * v) { tunisGL.tunisVertexAttrib1sv(index, v); }
#define glVertexAttrib1sv tunisVertexAttrib1sv
TUNIS_FORCE_INLINE void  tunisVertexAttrib1svARB(GLuint index, const GLshort * v) { tunisGL.tunisVertexAttrib1svARB(index, v); }
#define glVertexAttrib1svARB tunisVertexAttrib1svARB
TUNIS_FORCE_INLINE void  tunisVertexAttrib1svNV(GLuint index, const GLshort * v) { tunisGL.tunisVertexAttrib1svNV(index, v); }
#define glVertexAttrib1svNV tunisVertexAttrib1svNV
TUNIS_FORCE_INLINE void  tunisVertexAttrib2d(GLuint index, GLdouble x, GLdouble y) { tunisGL.tunisVertexAttrib2d(index, x, y); }
#define glVertexAttrib2d tunisVertexAttrib2d
TUNIS_FORCE_INLINE void  tunisVertexAttrib2dARB(GLuint index, GLdouble x, GLdouble y) { tunisGL.tunisVertexAttrib2dARB(index, x, y); }
#define glVertexAttrib2dARB tunisVertexAttrib2dARB
TUNIS_FORCE_INLINE void  tunisVertexAttrib2dNV(GLuint index, GLdouble x, GLdouble y) { tunisGL.tunisVertexAttrib2dNV(index, x, y); }
#define glVertexAttrib2dNV tunisVertexAttrib2dNV
TUNIS_FORCE_INLINE void  tunisVertexAttrib2dv(GLuint index, const GLdouble * v) { tunisGL.tunisVertexAttrib2dv(index, v); }
#define glVertexAttrib2dv tunisVertexAttrib2dv
TUNIS_FORCE_INLINE void  tunisVertexAttrib2dvARB(GLuint index, const GLdouble * v) { tunisGL.tunisVertexAttrib2dvARB(index, v); }
#define glVertexAttrib2dvARB tunisVertexAttrib2dvARB
TUNIS_FORCE_INLINE void  tunisVertexAttrib2dvNV(GLuint index, const GLdouble * v) { tunisGL.tunisVertexAttrib2dvNV(index, v); }
#define glVertexAttrib2dvNV tunisVertexAttrib2dvNV
TUNIS_FORCE_INLINE void  tunisVertexAttrib2f(GLuint index, GLfloat x, GLfloat y) { tunisGL.tunisVertexAttrib2f(index, x, y); }
#define glVertexAttrib2f tunisVertexAttrib2f
TUNIS_FORCE_INLINE void  tunisVertexAttrib2fARB(GLuint index, GLfloat x, GLfloat y) { tunisGL.tunisVertexAttrib2fARB(index, x, y); }
#define glVertexAttrib2fARB tunisVertexAttrib2fARB
TUNIS_FORCE_INLINE void  tunisVertexAttrib2fNV(GLuint index, GLfloat x, GLfloat y) { tunisGL.tunisVertexAttrib2fNV(index, x, y); }
#define glVertexAttrib2fNV tunisVertexAttrib2fNV
TUNIS_FORCE_INLINE void  tunisVertexAttrib2fv(GLuint index, const GLfloat * v) { tunisGL.tunisVertexAttrib2fv(index, v); }
#define glVertexAttrib2fv tunisVertexAttrib2fv
TUNIS_FORCE_INLINE void  tunisVertexAttrib2fvARB(GLuint index, const GLfloat * v) { tunisGL.tunisVertexAttrib2fvARB(index, v); }
#define glVertexAttrib2fvARB tunisVertexAttrib2fvARB
TUNIS_FORCE_INLINE void  tunisVertexAttrib2fvNV(GLuint index, const GLfloat * v) { tunisGL.tunisVertexAttrib2fvNV(index, v); }
#define glVertexAttrib2fvNV tunisVertexAttrib2fvNV
TUNIS_FORCE_INLINE void  tunisVertexAttrib2hNV(GLuint index, GLhalfNV x, GLhalfNV y) { tunisGL.tunisVertexAttrib2hNV(index, x, y); }
#define glVertexAttrib2hNV tunisVertexAttrib2hNV
TUNIS_FORCE_INLINE void  tunisVertexAttrib2hvNV(GLuint index, const GLhalfNV * v) { tunisGL.tunisVertexAttrib2hvNV(index, v); }
#define glVertexAttrib2hvNV tunisVertexAttrib2hvNV
TUNIS_FORCE_INLINE void  tunisVertexAttrib2s(GLuint index, GLshort x, GLshort y) { tunisGL.tunisVertexAttrib2s(index, x, y); }
#define glVertexAttrib2s tunisVertexAttrib2s
TUNIS_FORCE_INLINE void  tunisVertexAttrib2sARB(GLuint index, GLshort x, GLshort y) { tunisGL.tunisVertexAttrib2sARB(index, x, y); }
#define glVertexAttrib2sARB tunisVertexAttrib2sARB
TUNIS_FORCE_INLINE void  tunisVertexAttrib2sNV(GLuint index, GLshort x, GLshort y) { tunisGL.tunisVertexAttrib2sNV(index, x, y); }
#define glVertexAttrib2sNV tunisVertexAttrib2sNV
TUNIS_FORCE_INLINE void  tunisVertexAttrib2sv(GLuint index, const GLshort * v) { tunisGL.tunisVertexAttrib2sv(index, v); }
#define glVertexAttrib2sv tunisVertexAttrib2sv
TUNIS_FORCE_INLINE void  tunisVertexAttrib2svARB(GLuint index, const GLshort * v) { tunisGL.tunisVertexAttrib2svARB(index, v); }
#define glVertexAttrib2svARB tunisVertexAttrib2svARB
TUNIS_FORCE_INLINE void  tunisVertexAttrib2svNV(GLuint index, const GLshort * v) { tunisGL.tunisVertexAttrib2svNV(index, v); }
#define glVertexAttrib2svNV tunisVertexAttrib2svNV
TUNIS_FORCE_INLINE void  tunisVertexAttrib3d(GLuint index, GLdouble x, GLdouble y, GLdouble z) { tunisGL.tunisVertexAttrib3d(index, x, y, z); }
#define glVertexAttrib3d tunisVertexAttrib3d
TUNIS_FORCE_INLINE void  tunisVertexAttrib3dARB(GLuint index, GLdouble x, GLdouble y, GLdouble z) { tunisGL.tunisVertexAttrib3dARB(index, x, y, z); }
#define glVertexAttrib3dARB tunisVertexAttrib3dARB
TUNIS_FORCE_INLINE void  tunisVertexAttrib3dNV(GLuint index, GLdouble x, GLdouble y, GLdouble z) { tunisGL.tunisVertexAttrib3dNV(index, x, y, z); }
#define glVertexAttrib3dNV tunisVertexAttrib3dNV
TUNIS_FORCE_INLINE void  tunisVertexAttrib3dv(GLuint index, const GLdouble * v) { tunisGL.tunisVertexAttrib3dv(index, v); }
#define glVertexAttrib3dv tunisVertexAttrib3dv
TUNIS_FORCE_INLINE void  tunisVertexAttrib3dvARB(GLuint index, const GLdouble * v) { tunisGL.tunisVertexAttrib3dvARB(index, v); }
#define glVertexAttrib3dvARB tunisVertexAttrib3dvARB
TUNIS_FORCE_INLINE void  tunisVertexAttrib3dvNV(GLuint index, const GLdouble * v) { tunisGL.tunisVertexAttrib3dvNV(index, v); }
#define glVertexAttrib3dvNV tunisVertexAttrib3dvNV
TUNIS_FORCE_INLINE void  tunisVertexAttrib3f(GLuint index, GLfloat x, GLfloat y, GLfloat z) { tunisGL.tunisVertexAttrib3f(index, x, y, z); }
#define glVertexAttrib3f tunisVertexAttrib3f
TUNIS_FORCE_INLINE void  tunisVertexAttrib3fARB(GLuint index, GLfloat x, GLfloat y, GLfloat z) { tunisGL.tunisVertexAttrib3fARB(index, x, y, z); }
#define glVertexAttrib3fARB tunisVertexAttrib3fARB
TUNIS_FORCE_INLINE void  tunisVertexAttrib3fNV(GLuint index, GLfloat x, GLfloat y, GLfloat z) { tunisGL.tunisVertexAttrib3fNV(index, x, y, z); }
#define glVertexAttrib3fNV tunisVertexAttrib3fNV
TUNIS_FORCE_INLINE void  tunisVertexAttrib3fv(GLuint index, const GLfloat * v) { tunisGL.tunisVertexAttrib3fv(index, v); }
#define glVertexAttrib3fv tunisVertexAttrib3fv
TUNIS_FORCE_INLINE void  tunisVertexAttrib3fvARB(GLuint index, const GLfloat * v) { tunisGL.tunisVertexAttrib3fvARB(index, v); }
#define glVertexAttrib3fvARB tunisVertexAttrib3fvARB
TUNIS_FORCE_INLINE void  tunisVertexAttrib3fvNV(GLuint index, const GLfloat * v) { tunisGL.tunisVertexAttrib3fvNV(index, v); }
#define glVertexAttrib3fvNV tunisVertexAttrib3fvNV
TUNIS_FORCE_INLINE void  tunisVertexAttrib3hNV(GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z) { tunisGL.tunisVertexAttrib3hNV(index, x, y, z); }
#define glVertexAttrib3hNV tunisVertexAttrib3hNV
TUNIS_FORCE_INLINE void  tunisVertexAttrib3hvNV(GLuint index, const GLhalfNV * v) { tunisGL.tunisVertexAttrib3hvNV(index, v); }
#define glVertexAttrib3hvNV tunisVertexAttrib3hvNV
TUNIS_FORCE_INLINE void  tunisVertexAttrib3s(GLuint index, GLshort x, GLshort y, GLshort z) { tunisGL.tunisVertexAttrib3s(index, x, y, z); }
#define glVertexAttrib3s tunisVertexAttrib3s
TUNIS_FORCE_INLINE void  tunisVertexAttrib3sARB(GLuint index, GLshort x, GLshort y, GLshort z) { tunisGL.tunisVertexAttrib3sARB(index, x, y, z); }
#define glVertexAttrib3sARB tunisVertexAttrib3sARB
TUNIS_FORCE_INLINE void  tunisVertexAttrib3sNV(GLuint index, GLshort x, GLshort y, GLshort z) { tunisGL.tunisVertexAttrib3sNV(index, x, y, z); }
#define glVertexAttrib3sNV tunisVertexAttrib3sNV
TUNIS_FORCE_INLINE void  tunisVertexAttrib3sv(GLuint index, const GLshort * v) { tunisGL.tunisVertexAttrib3sv(index, v); }
#define glVertexAttrib3sv tunisVertexAttrib3sv
TUNIS_FORCE_INLINE void  tunisVertexAttrib3svARB(GLuint index, const GLshort * v) { tunisGL.tunisVertexAttrib3svARB(index, v); }
#define glVertexAttrib3svARB tunisVertexAttrib3svARB
TUNIS_FORCE_INLINE void  tunisVertexAttrib3svNV(GLuint index, const GLshort * v) { tunisGL.tunisVertexAttrib3svNV(index, v); }
#define glVertexAttrib3svNV tunisVertexAttrib3svNV
TUNIS_FORCE_INLINE void  tunisVertexAttrib4Nbv(GLuint index, const GLbyte * v) { tunisGL.tunisVertexAttrib4Nbv(index, v); }
#define glVertexAttrib4Nbv tunisVertexAttrib4Nbv
TUNIS_FORCE_INLINE void  tunisVertexAttrib4NbvARB(GLuint index, const GLbyte * v) { tunisGL.tunisVertexAttrib4NbvARB(index, v); }
#define glVertexAttrib4NbvARB tunisVertexAttrib4NbvARB
TUNIS_FORCE_INLINE void  tunisVertexAttrib4Niv(GLuint index, const GLint * v) { tunisGL.tunisVertexAttrib4Niv(index, v); }
#define glVertexAttrib4Niv tunisVertexAttrib4Niv
TUNIS_FORCE_INLINE void  tunisVertexAttrib4NivARB(GLuint index, const GLint * v) { tunisGL.tunisVertexAttrib4NivARB(index, v); }
#define glVertexAttrib4NivARB tunisVertexAttrib4NivARB
TUNIS_FORCE_INLINE void  tunisVertexAttrib4Nsv(GLuint index, const GLshort * v) { tunisGL.tunisVertexAttrib4Nsv(index, v); }
#define glVertexAttrib4Nsv tunisVertexAttrib4Nsv
TUNIS_FORCE_INLINE void  tunisVertexAttrib4NsvARB(GLuint index, const GLshort * v) { tunisGL.tunisVertexAttrib4NsvARB(index, v); }
#define glVertexAttrib4NsvARB tunisVertexAttrib4NsvARB
TUNIS_FORCE_INLINE void  tunisVertexAttrib4Nub(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w) { tunisGL.tunisVertexAttrib4Nub(index, x, y, z, w); }
#define glVertexAttrib4Nub tunisVertexAttrib4Nub
TUNIS_FORCE_INLINE void  tunisVertexAttrib4NubARB(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w) { tunisGL.tunisVertexAttrib4NubARB(index, x, y, z, w); }
#define glVertexAttrib4NubARB tunisVertexAttrib4NubARB
TUNIS_FORCE_INLINE void  tunisVertexAttrib4Nubv(GLuint index, const GLubyte * v) { tunisGL.tunisVertexAttrib4Nubv(index, v); }
#define glVertexAttrib4Nubv tunisVertexAttrib4Nubv
TUNIS_FORCE_INLINE void  tunisVertexAttrib4NubvARB(GLuint index, const GLubyte * v) { tunisGL.tunisVertexAttrib4NubvARB(index, v); }
#define glVertexAttrib4NubvARB tunisVertexAttrib4NubvARB
TUNIS_FORCE_INLINE void  tunisVertexAttrib4Nuiv(GLuint index, const GLuint * v) { tunisGL.tunisVertexAttrib4Nuiv(index, v); }
#define glVertexAttrib4Nuiv tunisVertexAttrib4Nuiv
TUNIS_FORCE_INLINE void  tunisVertexAttrib4NuivARB(GLuint index, const GLuint * v) { tunisGL.tunisVertexAttrib4NuivARB(index, v); }
#define glVertexAttrib4NuivARB tunisVertexAttrib4NuivARB
TUNIS_FORCE_INLINE void  tunisVertexAttrib4Nusv(GLuint index, const GLushort * v) { tunisGL.tunisVertexAttrib4Nusv(index, v); }
#define glVertexAttrib4Nusv tunisVertexAttrib4Nusv
TUNIS_FORCE_INLINE void  tunisVertexAttrib4NusvARB(GLuint index, const GLushort * v) { tunisGL.tunisVertexAttrib4NusvARB(index, v); }
#define glVertexAttrib4NusvARB tunisVertexAttrib4NusvARB
TUNIS_FORCE_INLINE void  tunisVertexAttrib4bv(GLuint index, const GLbyte * v) { tunisGL.tunisVertexAttrib4bv(index, v); }
#define glVertexAttrib4bv tunisVertexAttrib4bv
TUNIS_FORCE_INLINE void  tunisVertexAttrib4bvARB(GLuint index, const GLbyte * v) { tunisGL.tunisVertexAttrib4bvARB(index, v); }
#define glVertexAttrib4bvARB tunisVertexAttrib4bvARB
TUNIS_FORCE_INLINE void  tunisVertexAttrib4d(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) { tunisGL.tunisVertexAttrib4d(index, x, y, z, w); }
#define glVertexAttrib4d tunisVertexAttrib4d
TUNIS_FORCE_INLINE void  tunisVertexAttrib4dARB(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) { tunisGL.tunisVertexAttrib4dARB(index, x, y, z, w); }
#define glVertexAttrib4dARB tunisVertexAttrib4dARB
TUNIS_FORCE_INLINE void  tunisVertexAttrib4dNV(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) { tunisGL.tunisVertexAttrib4dNV(index, x, y, z, w); }
#define glVertexAttrib4dNV tunisVertexAttrib4dNV
TUNIS_FORCE_INLINE void  tunisVertexAttrib4dv(GLuint index, const GLdouble * v) { tunisGL.tunisVertexAttrib4dv(index, v); }
#define glVertexAttrib4dv tunisVertexAttrib4dv
TUNIS_FORCE_INLINE void  tunisVertexAttrib4dvARB(GLuint index, const GLdouble * v) { tunisGL.tunisVertexAttrib4dvARB(index, v); }
#define glVertexAttrib4dvARB tunisVertexAttrib4dvARB
TUNIS_FORCE_INLINE void  tunisVertexAttrib4dvNV(GLuint index, const GLdouble * v) { tunisGL.tunisVertexAttrib4dvNV(index, v); }
#define glVertexAttrib4dvNV tunisVertexAttrib4dvNV
TUNIS_FORCE_INLINE void  tunisVertexAttrib4f(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w) { tunisGL.tunisVertexAttrib4f(index, x, y, z, w); }
#define glVertexAttrib4f tunisVertexAttrib4f
TUNIS_FORCE_INLINE void  tunisVertexAttrib4fARB(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w) { tunisGL.tunisVertexAttrib4fARB(index, x, y, z, w); }
#define glVertexAttrib4fARB tunisVertexAttrib4fARB
TUNIS_FORCE_INLINE void  tunisVertexAttrib4fNV(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w) { tunisGL.tunisVertexAttrib4fNV(index, x, y, z, w); }
#define glVertexAttrib4fNV tunisVertexAttrib4fNV
TUNIS_FORCE_INLINE void  tunisVertexAttrib4fv(GLuint index, const GLfloat * v) { tunisGL.tunisVertexAttrib4fv(index, v); }
#define glVertexAttrib4fv tunisVertexAttrib4fv
TUNIS_FORCE_INLINE void  tunisVertexAttrib4fvARB(GLuint index, const GLfloat * v) { tunisGL.tunisVertexAttrib4fvARB(index, v); }
#define glVertexAttrib4fvARB tunisVertexAttrib4fvARB
TUNIS_FORCE_INLINE void  tunisVertexAttrib4fvNV(GLuint index, const GLfloat * v) { tunisGL.tunisVertexAttrib4fvNV(index, v); }
#define glVertexAttrib4fvNV tunisVertexAttrib4fvNV
TUNIS_FORCE_INLINE void  tunisVertexAttrib4hNV(GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w) { tunisGL.tunisVertexAttrib4hNV(index, x, y, z, w); }
#define glVertexAttrib4hNV tunisVertexAttrib4hNV
TUNIS_FORCE_INLINE void  tunisVertexAttrib4hvNV(GLuint index, const GLhalfNV * v) { tunisGL.tunisVertexAttrib4hvNV(index, v); }
#define glVertexAttrib4hvNV tunisVertexAttrib4hvNV
TUNIS_FORCE_INLINE void  tunisVertexAttrib4iv(GLuint index, const GLint * v) { tunisGL.tunisVertexAttrib4iv(index, v); }
#define glVertexAttrib4iv tunisVertexAttrib4iv
TUNIS_FORCE_INLINE void  tunisVertexAttrib4ivARB(GLuint index, const GLint * v) { tunisGL.tunisVertexAttrib4ivARB(index, v); }
#define glVertexAttrib4ivARB tunisVertexAttrib4ivARB
TUNIS_FORCE_INLINE void  tunisVertexAttrib4s(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w) { tunisGL.tunisVertexAttrib4s(index, x, y, z, w); }
#define glVertexAttrib4s tunisVertexAttrib4s
TUNIS_FORCE_INLINE void  tunisVertexAttrib4sARB(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w) { tunisGL.tunisVertexAttrib4sARB(index, x, y, z, w); }
#define glVertexAttrib4sARB tunisVertexAttrib4sARB
TUNIS_FORCE_INLINE void  tunisVertexAttrib4sNV(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w) { tunisGL.tunisVertexAttrib4sNV(index, x, y, z, w); }
#define glVertexAttrib4sNV tunisVertexAttrib4sNV
TUNIS_FORCE_INLINE void  tunisVertexAttrib4sv(GLuint index, const GLshort * v) { tunisGL.tunisVertexAttrib4sv(index, v); }
#define glVertexAttrib4sv tunisVertexAttrib4sv
TUNIS_FORCE_INLINE void  tunisVertexAttrib4svARB(GLuint index, const GLshort * v) { tunisGL.tunisVertexAttrib4svARB(index, v); }
#define glVertexAttrib4svARB tunisVertexAttrib4svARB
TUNIS_FORCE_INLINE void  tunisVertexAttrib4svNV(GLuint index, const GLshort * v) { tunisGL.tunisVertexAttrib4svNV(index, v); }
#define glVertexAttrib4svNV tunisVertexAttrib4svNV
TUNIS_FORCE_INLINE void  tunisVertexAttrib4ubNV(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w) { tunisGL.tunisVertexAttrib4ubNV(index, x, y, z, w); }
#define glVertexAttrib4ubNV tunisVertexAttrib4ubNV
TUNIS_FORCE_INLINE void  tunisVertexAttrib4ubv(GLuint index, const GLubyte * v) { tunisGL.tunisVertexAttrib4ubv(index, v); }
#define glVertexAttrib4ubv tunisVertexAttrib4ubv
TUNIS_FORCE_INLINE void  tunisVertexAttrib4ubvARB(GLuint index, const GLubyte * v) { tunisGL.tunisVertexAttrib4ubvARB(index, v); }
#define glVertexAttrib4ubvARB tunisVertexAttrib4ubvARB
TUNIS_FORCE_INLINE void  tunisVertexAttrib4ubvNV(GLuint index, const GLubyte * v) { tunisGL.tunisVertexAttrib4ubvNV(index, v); }
#define glVertexAttrib4ubvNV tunisVertexAttrib4ubvNV
TUNIS_FORCE_INLINE void  tunisVertexAttrib4uiv(GLuint index, const GLuint * v) { tunisGL.tunisVertexAttrib4uiv(index, v); }
#define glVertexAttrib4uiv tunisVertexAttrib4uiv
TUNIS_FORCE_INLINE void  tunisVertexAttrib4uivARB(GLuint index, const GLuint * v) { tunisGL.tunisVertexAttrib4uivARB(index, v); }
#define glVertexAttrib4uivARB tunisVertexAttrib4uivARB
TUNIS_FORCE_INLINE void  tunisVertexAttrib4usv(GLuint index, const GLushort * v) { tunisGL.tunisVertexAttrib4usv(index, v); }
#define glVertexAttrib4usv tunisVertexAttrib4usv
TUNIS_FORCE_INLINE void  tunisVertexAttrib4usvARB(GLuint index, const GLushort * v) { tunisGL.tunisVertexAttrib4usvARB(index, v); }
#define glVertexAttrib4usvARB tunisVertexAttrib4usvARB
TUNIS_FORCE_INLINE void  tunisVertexAttribArrayObjectATI(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLuint buffer, GLuint offset) { tunisGL.tunisVertexAttribArrayObjectATI(index, size, type, normalized, stride, buffer, offset); }
#define glVertexAttribArrayObjectATI tunisVertexAttribArrayObjectATI
TUNIS_FORCE_INLINE void  tunisVertexAttribBinding(GLuint attribindex, GLuint bindingindex) { tunisGL.tunisVertexAttribBinding(attribindex, bindingindex); }
#define glVertexAttribBinding tunisVertexAttribBinding
TUNIS_FORCE_INLINE void  tunisVertexAttribDivisor(GLuint index, GLuint divisor) { tunisGL.tunisVertexAttribDivisor(index, divisor); }
#define glVertexAttribDivisor tunisVertexAttribDivisor
TUNIS_FORCE_INLINE void  tunisVertexAttribDivisorANGLE(GLuint index, GLuint divisor) { tunisGL.tunisVertexAttribDivisorANGLE(index, divisor); }
#define glVertexAttribDivisorANGLE tunisVertexAttribDivisorANGLE
TUNIS_FORCE_INLINE void  tunisVertexAttribDivisorARB(GLuint index, GLuint divisor) { tunisGL.tunisVertexAttribDivisorARB(index, divisor); }
#define glVertexAttribDivisorARB tunisVertexAttribDivisorARB
TUNIS_FORCE_INLINE void  tunisVertexAttribDivisorEXT(GLuint index, GLuint divisor) { tunisGL.tunisVertexAttribDivisorEXT(index, divisor); }
#define glVertexAttribDivisorEXT tunisVertexAttribDivisorEXT
TUNIS_FORCE_INLINE void  tunisVertexAttribDivisorNV(GLuint index, GLuint divisor) { tunisGL.tunisVertexAttribDivisorNV(index, divisor); }
#define glVertexAttribDivisorNV tunisVertexAttribDivisorNV
TUNIS_FORCE_INLINE void  tunisVertexAttribFormat(GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset) { tunisGL.tunisVertexAttribFormat(attribindex, size, type, normalized, relativeoffset); }
#define glVertexAttribFormat tunisVertexAttribFormat
TUNIS_FORCE_INLINE void  tunisVertexAttribFormatNV(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride) { tunisGL.tunisVertexAttribFormatNV(index, size, type, normalized, stride); }
#define glVertexAttribFormatNV tunisVertexAttribFormatNV
TUNIS_FORCE_INLINE void  tunisVertexAttribI1i(GLuint index, GLint x) { tunisGL.tunisVertexAttribI1i(index, x); }
#define glVertexAttribI1i tunisVertexAttribI1i
TUNIS_FORCE_INLINE void  tunisVertexAttribI1iEXT(GLuint index, GLint x) { tunisGL.tunisVertexAttribI1iEXT(index, x); }
#define glVertexAttribI1iEXT tunisVertexAttribI1iEXT
TUNIS_FORCE_INLINE void  tunisVertexAttribI1iv(GLuint index, const GLint * v) { tunisGL.tunisVertexAttribI1iv(index, v); }
#define glVertexAttribI1iv tunisVertexAttribI1iv
TUNIS_FORCE_INLINE void  tunisVertexAttribI1ivEXT(GLuint index, const GLint * v) { tunisGL.tunisVertexAttribI1ivEXT(index, v); }
#define glVertexAttribI1ivEXT tunisVertexAttribI1ivEXT
TUNIS_FORCE_INLINE void  tunisVertexAttribI1ui(GLuint index, GLuint x) { tunisGL.tunisVertexAttribI1ui(index, x); }
#define glVertexAttribI1ui tunisVertexAttribI1ui
TUNIS_FORCE_INLINE void  tunisVertexAttribI1uiEXT(GLuint index, GLuint x) { tunisGL.tunisVertexAttribI1uiEXT(index, x); }
#define glVertexAttribI1uiEXT tunisVertexAttribI1uiEXT
TUNIS_FORCE_INLINE void  tunisVertexAttribI1uiv(GLuint index, const GLuint * v) { tunisGL.tunisVertexAttribI1uiv(index, v); }
#define glVertexAttribI1uiv tunisVertexAttribI1uiv
TUNIS_FORCE_INLINE void  tunisVertexAttribI1uivEXT(GLuint index, const GLuint * v) { tunisGL.tunisVertexAttribI1uivEXT(index, v); }
#define glVertexAttribI1uivEXT tunisVertexAttribI1uivEXT
TUNIS_FORCE_INLINE void  tunisVertexAttribI2i(GLuint index, GLint x, GLint y) { tunisGL.tunisVertexAttribI2i(index, x, y); }
#define glVertexAttribI2i tunisVertexAttribI2i
TUNIS_FORCE_INLINE void  tunisVertexAttribI2iEXT(GLuint index, GLint x, GLint y) { tunisGL.tunisVertexAttribI2iEXT(index, x, y); }
#define glVertexAttribI2iEXT tunisVertexAttribI2iEXT
TUNIS_FORCE_INLINE void  tunisVertexAttribI2iv(GLuint index, const GLint * v) { tunisGL.tunisVertexAttribI2iv(index, v); }
#define glVertexAttribI2iv tunisVertexAttribI2iv
TUNIS_FORCE_INLINE void  tunisVertexAttribI2ivEXT(GLuint index, const GLint * v) { tunisGL.tunisVertexAttribI2ivEXT(index, v); }
#define glVertexAttribI2ivEXT tunisVertexAttribI2ivEXT
TUNIS_FORCE_INLINE void  tunisVertexAttribI2ui(GLuint index, GLuint x, GLuint y) { tunisGL.tunisVertexAttribI2ui(index, x, y); }
#define glVertexAttribI2ui tunisVertexAttribI2ui
TUNIS_FORCE_INLINE void  tunisVertexAttribI2uiEXT(GLuint index, GLuint x, GLuint y) { tunisGL.tunisVertexAttribI2uiEXT(index, x, y); }
#define glVertexAttribI2uiEXT tunisVertexAttribI2uiEXT
TUNIS_FORCE_INLINE void  tunisVertexAttribI2uiv(GLuint index, const GLuint * v) { tunisGL.tunisVertexAttribI2uiv(index, v); }
#define glVertexAttribI2uiv tunisVertexAttribI2uiv
TUNIS_FORCE_INLINE void  tunisVertexAttribI2uivEXT(GLuint index, const GLuint * v) { tunisGL.tunisVertexAttribI2uivEXT(index, v); }
#define glVertexAttribI2uivEXT tunisVertexAttribI2uivEXT
TUNIS_FORCE_INLINE void  tunisVertexAttribI3i(GLuint index, GLint x, GLint y, GLint z) { tunisGL.tunisVertexAttribI3i(index, x, y, z); }
#define glVertexAttribI3i tunisVertexAttribI3i
TUNIS_FORCE_INLINE void  tunisVertexAttribI3iEXT(GLuint index, GLint x, GLint y, GLint z) { tunisGL.tunisVertexAttribI3iEXT(index, x, y, z); }
#define glVertexAttribI3iEXT tunisVertexAttribI3iEXT
TUNIS_FORCE_INLINE void  tunisVertexAttribI3iv(GLuint index, const GLint * v) { tunisGL.tunisVertexAttribI3iv(index, v); }
#define glVertexAttribI3iv tunisVertexAttribI3iv
TUNIS_FORCE_INLINE void  tunisVertexAttribI3ivEXT(GLuint index, const GLint * v) { tunisGL.tunisVertexAttribI3ivEXT(index, v); }
#define glVertexAttribI3ivEXT tunisVertexAttribI3ivEXT
TUNIS_FORCE_INLINE void  tunisVertexAttribI3ui(GLuint index, GLuint x, GLuint y, GLuint z) { tunisGL.tunisVertexAttribI3ui(index, x, y, z); }
#define glVertexAttribI3ui tunisVertexAttribI3ui
TUNIS_FORCE_INLINE void  tunisVertexAttribI3uiEXT(GLuint index, GLuint x, GLuint y, GLuint z) { tunisGL.tunisVertexAttribI3uiEXT(index, x, y, z); }
#define glVertexAttribI3uiEXT tunisVertexAttribI3uiEXT
TUNIS_FORCE_INLINE void  tunisVertexAttribI3uiv(GLuint index, const GLuint * v) { tunisGL.tunisVertexAttribI3uiv(index, v); }
#define glVertexAttribI3uiv tunisVertexAttribI3uiv
TUNIS_FORCE_INLINE void  tunisVertexAttribI3uivEXT(GLuint index, const GLuint * v) { tunisGL.tunisVertexAttribI3uivEXT(index, v); }
#define glVertexAttribI3uivEXT tunisVertexAttribI3uivEXT
TUNIS_FORCE_INLINE void  tunisVertexAttribI4bv(GLuint index, const GLbyte * v) { tunisGL.tunisVertexAttribI4bv(index, v); }
#define glVertexAttribI4bv tunisVertexAttribI4bv
TUNIS_FORCE_INLINE void  tunisVertexAttribI4bvEXT(GLuint index, const GLbyte * v) { tunisGL.tunisVertexAttribI4bvEXT(index, v); }
#define glVertexAttribI4bvEXT tunisVertexAttribI4bvEXT
TUNIS_FORCE_INLINE void  tunisVertexAttribI4i(GLuint index, GLint x, GLint y, GLint z, GLint w) { tunisGL.tunisVertexAttribI4i(index, x, y, z, w); }
#define glVertexAttribI4i tunisVertexAttribI4i
TUNIS_FORCE_INLINE void  tunisVertexAttribI4iEXT(GLuint index, GLint x, GLint y, GLint z, GLint w) { tunisGL.tunisVertexAttribI4iEXT(index, x, y, z, w); }
#define glVertexAttribI4iEXT tunisVertexAttribI4iEXT
TUNIS_FORCE_INLINE void  tunisVertexAttribI4iv(GLuint index, const GLint * v) { tunisGL.tunisVertexAttribI4iv(index, v); }
#define glVertexAttribI4iv tunisVertexAttribI4iv
TUNIS_FORCE_INLINE void  tunisVertexAttribI4ivEXT(GLuint index, const GLint * v) { tunisGL.tunisVertexAttribI4ivEXT(index, v); }
#define glVertexAttribI4ivEXT tunisVertexAttribI4ivEXT
TUNIS_FORCE_INLINE void  tunisVertexAttribI4sv(GLuint index, const GLshort * v) { tunisGL.tunisVertexAttribI4sv(index, v); }
#define glVertexAttribI4sv tunisVertexAttribI4sv
TUNIS_FORCE_INLINE void  tunisVertexAttribI4svEXT(GLuint index, const GLshort * v) { tunisGL.tunisVertexAttribI4svEXT(index, v); }
#define glVertexAttribI4svEXT tunisVertexAttribI4svEXT
TUNIS_FORCE_INLINE void  tunisVertexAttribI4ubv(GLuint index, const GLubyte * v) { tunisGL.tunisVertexAttribI4ubv(index, v); }
#define glVertexAttribI4ubv tunisVertexAttribI4ubv
TUNIS_FORCE_INLINE void  tunisVertexAttribI4ubvEXT(GLuint index, const GLubyte * v) { tunisGL.tunisVertexAttribI4ubvEXT(index, v); }
#define glVertexAttribI4ubvEXT tunisVertexAttribI4ubvEXT
TUNIS_FORCE_INLINE void  tunisVertexAttribI4ui(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w) { tunisGL.tunisVertexAttribI4ui(index, x, y, z, w); }
#define glVertexAttribI4ui tunisVertexAttribI4ui
TUNIS_FORCE_INLINE void  tunisVertexAttribI4uiEXT(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w) { tunisGL.tunisVertexAttribI4uiEXT(index, x, y, z, w); }
#define glVertexAttribI4uiEXT tunisVertexAttribI4uiEXT
TUNIS_FORCE_INLINE void  tunisVertexAttribI4uiv(GLuint index, const GLuint * v) { tunisGL.tunisVertexAttribI4uiv(index, v); }
#define glVertexAttribI4uiv tunisVertexAttribI4uiv
TUNIS_FORCE_INLINE void  tunisVertexAttribI4uivEXT(GLuint index, const GLuint * v) { tunisGL.tunisVertexAttribI4uivEXT(index, v); }
#define glVertexAttribI4uivEXT tunisVertexAttribI4uivEXT
TUNIS_FORCE_INLINE void  tunisVertexAttribI4usv(GLuint index, const GLushort * v) { tunisGL.tunisVertexAttribI4usv(index, v); }
#define glVertexAttribI4usv tunisVertexAttribI4usv
TUNIS_FORCE_INLINE void  tunisVertexAttribI4usvEXT(GLuint index, const GLushort * v) { tunisGL.tunisVertexAttribI4usvEXT(index, v); }
#define glVertexAttribI4usvEXT tunisVertexAttribI4usvEXT
TUNIS_FORCE_INLINE void  tunisVertexAttribIFormat(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset) { tunisGL.tunisVertexAttribIFormat(attribindex, size, type, relativeoffset); }
#define glVertexAttribIFormat tunisVertexAttribIFormat
TUNIS_FORCE_INLINE void  tunisVertexAttribIFormatNV(GLuint index, GLint size, GLenum type, GLsizei stride) { tunisGL.tunisVertexAttribIFormatNV(index, size, type, stride); }
#define glVertexAttribIFormatNV tunisVertexAttribIFormatNV
TUNIS_FORCE_INLINE void  tunisVertexAttribIPointer(GLuint index, GLint size, GLenum type, GLsizei stride, const void * pointer) { tunisGL.tunisVertexAttribIPointer(index, size, type, stride, pointer); }
#define glVertexAttribIPointer tunisVertexAttribIPointer
TUNIS_FORCE_INLINE void  tunisVertexAttribIPointerEXT(GLuint index, GLint size, GLenum type, GLsizei stride, const void * pointer) { tunisGL.tunisVertexAttribIPointerEXT(index, size, type, stride, pointer); }
#define glVertexAttribIPointerEXT tunisVertexAttribIPointerEXT
TUNIS_FORCE_INLINE void  tunisVertexAttribL1d(GLuint index, GLdouble x) { tunisGL.tunisVertexAttribL1d(index, x); }
#define glVertexAttribL1d tunisVertexAttribL1d
TUNIS_FORCE_INLINE void  tunisVertexAttribL1dEXT(GLuint index, GLdouble x) { tunisGL.tunisVertexAttribL1dEXT(index, x); }
#define glVertexAttribL1dEXT tunisVertexAttribL1dEXT
TUNIS_FORCE_INLINE void  tunisVertexAttribL1dv(GLuint index, const GLdouble * v) { tunisGL.tunisVertexAttribL1dv(index, v); }
#define glVertexAttribL1dv tunisVertexAttribL1dv
TUNIS_FORCE_INLINE void  tunisVertexAttribL1dvEXT(GLuint index, const GLdouble * v) { tunisGL.tunisVertexAttribL1dvEXT(index, v); }
#define glVertexAttribL1dvEXT tunisVertexAttribL1dvEXT
TUNIS_FORCE_INLINE void  tunisVertexAttribL1i64NV(GLuint index, GLint64EXT x) { tunisGL.tunisVertexAttribL1i64NV(index, x); }
#define glVertexAttribL1i64NV tunisVertexAttribL1i64NV
TUNIS_FORCE_INLINE void  tunisVertexAttribL1i64vNV(GLuint index, const GLint64EXT * v) { tunisGL.tunisVertexAttribL1i64vNV(index, v); }
#define glVertexAttribL1i64vNV tunisVertexAttribL1i64vNV
TUNIS_FORCE_INLINE void  tunisVertexAttribL1ui64ARB(GLuint index, GLuint64EXT x) { tunisGL.tunisVertexAttribL1ui64ARB(index, x); }
#define glVertexAttribL1ui64ARB tunisVertexAttribL1ui64ARB
TUNIS_FORCE_INLINE void  tunisVertexAttribL1ui64NV(GLuint index, GLuint64EXT x) { tunisGL.tunisVertexAttribL1ui64NV(index, x); }
#define glVertexAttribL1ui64NV tunisVertexAttribL1ui64NV
TUNIS_FORCE_INLINE void  tunisVertexAttribL1ui64vARB(GLuint index, const GLuint64EXT * v) { tunisGL.tunisVertexAttribL1ui64vARB(index, v); }
#define glVertexAttribL1ui64vARB tunisVertexAttribL1ui64vARB
TUNIS_FORCE_INLINE void  tunisVertexAttribL1ui64vNV(GLuint index, const GLuint64EXT * v) { tunisGL.tunisVertexAttribL1ui64vNV(index, v); }
#define glVertexAttribL1ui64vNV tunisVertexAttribL1ui64vNV
TUNIS_FORCE_INLINE void  tunisVertexAttribL2d(GLuint index, GLdouble x, GLdouble y) { tunisGL.tunisVertexAttribL2d(index, x, y); }
#define glVertexAttribL2d tunisVertexAttribL2d
TUNIS_FORCE_INLINE void  tunisVertexAttribL2dEXT(GLuint index, GLdouble x, GLdouble y) { tunisGL.tunisVertexAttribL2dEXT(index, x, y); }
#define glVertexAttribL2dEXT tunisVertexAttribL2dEXT
TUNIS_FORCE_INLINE void  tunisVertexAttribL2dv(GLuint index, const GLdouble * v) { tunisGL.tunisVertexAttribL2dv(index, v); }
#define glVertexAttribL2dv tunisVertexAttribL2dv
TUNIS_FORCE_INLINE void  tunisVertexAttribL2dvEXT(GLuint index, const GLdouble * v) { tunisGL.tunisVertexAttribL2dvEXT(index, v); }
#define glVertexAttribL2dvEXT tunisVertexAttribL2dvEXT
TUNIS_FORCE_INLINE void  tunisVertexAttribL2i64NV(GLuint index, GLint64EXT x, GLint64EXT y) { tunisGL.tunisVertexAttribL2i64NV(index, x, y); }
#define glVertexAttribL2i64NV tunisVertexAttribL2i64NV
TUNIS_FORCE_INLINE void  tunisVertexAttribL2i64vNV(GLuint index, const GLint64EXT * v) { tunisGL.tunisVertexAttribL2i64vNV(index, v); }
#define glVertexAttribL2i64vNV tunisVertexAttribL2i64vNV
TUNIS_FORCE_INLINE void  tunisVertexAttribL2ui64NV(GLuint index, GLuint64EXT x, GLuint64EXT y) { tunisGL.tunisVertexAttribL2ui64NV(index, x, y); }
#define glVertexAttribL2ui64NV tunisVertexAttribL2ui64NV
TUNIS_FORCE_INLINE void  tunisVertexAttribL2ui64vNV(GLuint index, const GLuint64EXT * v) { tunisGL.tunisVertexAttribL2ui64vNV(index, v); }
#define glVertexAttribL2ui64vNV tunisVertexAttribL2ui64vNV
TUNIS_FORCE_INLINE void  tunisVertexAttribL3d(GLuint index, GLdouble x, GLdouble y, GLdouble z) { tunisGL.tunisVertexAttribL3d(index, x, y, z); }
#define glVertexAttribL3d tunisVertexAttribL3d
TUNIS_FORCE_INLINE void  tunisVertexAttribL3dEXT(GLuint index, GLdouble x, GLdouble y, GLdouble z) { tunisGL.tunisVertexAttribL3dEXT(index, x, y, z); }
#define glVertexAttribL3dEXT tunisVertexAttribL3dEXT
TUNIS_FORCE_INLINE void  tunisVertexAttribL3dv(GLuint index, const GLdouble * v) { tunisGL.tunisVertexAttribL3dv(index, v); }
#define glVertexAttribL3dv tunisVertexAttribL3dv
TUNIS_FORCE_INLINE void  tunisVertexAttribL3dvEXT(GLuint index, const GLdouble * v) { tunisGL.tunisVertexAttribL3dvEXT(index, v); }
#define glVertexAttribL3dvEXT tunisVertexAttribL3dvEXT
TUNIS_FORCE_INLINE void  tunisVertexAttribL3i64NV(GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z) { tunisGL.tunisVertexAttribL3i64NV(index, x, y, z); }
#define glVertexAttribL3i64NV tunisVertexAttribL3i64NV
TUNIS_FORCE_INLINE void  tunisVertexAttribL3i64vNV(GLuint index, const GLint64EXT * v) { tunisGL.tunisVertexAttribL3i64vNV(index, v); }
#define glVertexAttribL3i64vNV tunisVertexAttribL3i64vNV
TUNIS_FORCE_INLINE void  tunisVertexAttribL3ui64NV(GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z) { tunisGL.tunisVertexAttribL3ui64NV(index, x, y, z); }
#define glVertexAttribL3ui64NV tunisVertexAttribL3ui64NV
TUNIS_FORCE_INLINE void  tunisVertexAttribL3ui64vNV(GLuint index, const GLuint64EXT * v) { tunisGL.tunisVertexAttribL3ui64vNV(index, v); }
#define glVertexAttribL3ui64vNV tunisVertexAttribL3ui64vNV
TUNIS_FORCE_INLINE void  tunisVertexAttribL4d(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) { tunisGL.tunisVertexAttribL4d(index, x, y, z, w); }
#define glVertexAttribL4d tunisVertexAttribL4d
TUNIS_FORCE_INLINE void  tunisVertexAttribL4dEXT(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) { tunisGL.tunisVertexAttribL4dEXT(index, x, y, z, w); }
#define glVertexAttribL4dEXT tunisVertexAttribL4dEXT
TUNIS_FORCE_INLINE void  tunisVertexAttribL4dv(GLuint index, const GLdouble * v) { tunisGL.tunisVertexAttribL4dv(index, v); }
#define glVertexAttribL4dv tunisVertexAttribL4dv
TUNIS_FORCE_INLINE void  tunisVertexAttribL4dvEXT(GLuint index, const GLdouble * v) { tunisGL.tunisVertexAttribL4dvEXT(index, v); }
#define glVertexAttribL4dvEXT tunisVertexAttribL4dvEXT
TUNIS_FORCE_INLINE void  tunisVertexAttribL4i64NV(GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w) { tunisGL.tunisVertexAttribL4i64NV(index, x, y, z, w); }
#define glVertexAttribL4i64NV tunisVertexAttribL4i64NV
TUNIS_FORCE_INLINE void  tunisVertexAttribL4i64vNV(GLuint index, const GLint64EXT * v) { tunisGL.tunisVertexAttribL4i64vNV(index, v); }
#define glVertexAttribL4i64vNV tunisVertexAttribL4i64vNV
TUNIS_FORCE_INLINE void  tunisVertexAttribL4ui64NV(GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w) { tunisGL.tunisVertexAttribL4ui64NV(index, x, y, z, w); }
#define glVertexAttribL4ui64NV tunisVertexAttribL4ui64NV
TUNIS_FORCE_INLINE void  tunisVertexAttribL4ui64vNV(GLuint index, const GLuint64EXT * v) { tunisGL.tunisVertexAttribL4ui64vNV(index, v); }
#define glVertexAttribL4ui64vNV tunisVertexAttribL4ui64vNV
TUNIS_FORCE_INLINE void  tunisVertexAttribLFormat(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset) { tunisGL.tunisVertexAttribLFormat(attribindex, size, type, relativeoffset); }
#define glVertexAttribLFormat tunisVertexAttribLFormat
TUNIS_FORCE_INLINE void  tunisVertexAttribLFormatNV(GLuint index, GLint size, GLenum type, GLsizei stride) { tunisGL.tunisVertexAttribLFormatNV(index, size, type, stride); }
#define glVertexAttribLFormatNV tunisVertexAttribLFormatNV
TUNIS_FORCE_INLINE void  tunisVertexAttribLPointer(GLuint index, GLint size, GLenum type, GLsizei stride, const void * pointer) { tunisGL.tunisVertexAttribLPointer(index, size, type, stride, pointer); }
#define glVertexAttribLPointer tunisVertexAttribLPointer
TUNIS_FORCE_INLINE void  tunisVertexAttribLPointerEXT(GLuint index, GLint size, GLenum type, GLsizei stride, const void * pointer) { tunisGL.tunisVertexAttribLPointerEXT(index, size, type, stride, pointer); }
#define glVertexAttribLPointerEXT tunisVertexAttribLPointerEXT
TUNIS_FORCE_INLINE void  tunisVertexAttribP1ui(GLuint index, GLenum type, GLboolean normalized, GLuint value) { tunisGL.tunisVertexAttribP1ui(index, type, normalized, value); }
#define glVertexAttribP1ui tunisVertexAttribP1ui
TUNIS_FORCE_INLINE void  tunisVertexAttribP1uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint * value) { tunisGL.tunisVertexAttribP1uiv(index, type, normalized, value); }
#define glVertexAttribP1uiv tunisVertexAttribP1uiv
TUNIS_FORCE_INLINE void  tunisVertexAttribP2ui(GLuint index, GLenum type, GLboolean normalized, GLuint value) { tunisGL.tunisVertexAttribP2ui(index, type, normalized, value); }
#define glVertexAttribP2ui tunisVertexAttribP2ui
TUNIS_FORCE_INLINE void  tunisVertexAttribP2uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint * value) { tunisGL.tunisVertexAttribP2uiv(index, type, normalized, value); }
#define glVertexAttribP2uiv tunisVertexAttribP2uiv
TUNIS_FORCE_INLINE void  tunisVertexAttribP3ui(GLuint index, GLenum type, GLboolean normalized, GLuint value) { tunisGL.tunisVertexAttribP3ui(index, type, normalized, value); }
#define glVertexAttribP3ui tunisVertexAttribP3ui
TUNIS_FORCE_INLINE void  tunisVertexAttribP3uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint * value) { tunisGL.tunisVertexAttribP3uiv(index, type, normalized, value); }
#define glVertexAttribP3uiv tunisVertexAttribP3uiv
TUNIS_FORCE_INLINE void  tunisVertexAttribP4ui(GLuint index, GLenum type, GLboolean normalized, GLuint value) { tunisGL.tunisVertexAttribP4ui(index, type, normalized, value); }
#define glVertexAttribP4ui tunisVertexAttribP4ui
TUNIS_FORCE_INLINE void  tunisVertexAttribP4uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint * value) { tunisGL.tunisVertexAttribP4uiv(index, type, normalized, value); }
#define glVertexAttribP4uiv tunisVertexAttribP4uiv
TUNIS_FORCE_INLINE void  tunisVertexAttribParameteriAMD(GLuint index, GLenum pname, GLint param) { tunisGL.tunisVertexAttribParameteriAMD(index, pname, param); }
#define glVertexAttribParameteriAMD tunisVertexAttribParameteriAMD
TUNIS_FORCE_INLINE void  tunisVertexAttribPointer(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void * pointer) { tunisGL.tunisVertexAttribPointer(index, size, type, normalized, stride, pointer); }
#define glVertexAttribPointer tunisVertexAttribPointer
TUNIS_FORCE_INLINE void  tunisVertexAttribPointerARB(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void * pointer) { tunisGL.tunisVertexAttribPointerARB(index, size, type, normalized, stride, pointer); }
#define glVertexAttribPointerARB tunisVertexAttribPointerARB
TUNIS_FORCE_INLINE void  tunisVertexAttribPointerNV(GLuint index, GLint fsize, GLenum type, GLsizei stride, const void * pointer) { tunisGL.tunisVertexAttribPointerNV(index, fsize, type, stride, pointer); }
#define glVertexAttribPointerNV tunisVertexAttribPointerNV
TUNIS_FORCE_INLINE void  tunisVertexAttribs1dvNV(GLuint index, GLsizei count, const GLdouble * v) { tunisGL.tunisVertexAttribs1dvNV(index, count, v); }
#define glVertexAttribs1dvNV tunisVertexAttribs1dvNV
TUNIS_FORCE_INLINE void  tunisVertexAttribs1fvNV(GLuint index, GLsizei count, const GLfloat * v) { tunisGL.tunisVertexAttribs1fvNV(index, count, v); }
#define glVertexAttribs1fvNV tunisVertexAttribs1fvNV
TUNIS_FORCE_INLINE void  tunisVertexAttribs1hvNV(GLuint index, GLsizei n, const GLhalfNV * v) { tunisGL.tunisVertexAttribs1hvNV(index, n, v); }
#define glVertexAttribs1hvNV tunisVertexAttribs1hvNV
TUNIS_FORCE_INLINE void  tunisVertexAttribs1svNV(GLuint index, GLsizei count, const GLshort * v) { tunisGL.tunisVertexAttribs1svNV(index, count, v); }
#define glVertexAttribs1svNV tunisVertexAttribs1svNV
TUNIS_FORCE_INLINE void  tunisVertexAttribs2dvNV(GLuint index, GLsizei count, const GLdouble * v) { tunisGL.tunisVertexAttribs2dvNV(index, count, v); }
#define glVertexAttribs2dvNV tunisVertexAttribs2dvNV
TUNIS_FORCE_INLINE void  tunisVertexAttribs2fvNV(GLuint index, GLsizei count, const GLfloat * v) { tunisGL.tunisVertexAttribs2fvNV(index, count, v); }
#define glVertexAttribs2fvNV tunisVertexAttribs2fvNV
TUNIS_FORCE_INLINE void  tunisVertexAttribs2hvNV(GLuint index, GLsizei n, const GLhalfNV * v) { tunisGL.tunisVertexAttribs2hvNV(index, n, v); }
#define glVertexAttribs2hvNV tunisVertexAttribs2hvNV
TUNIS_FORCE_INLINE void  tunisVertexAttribs2svNV(GLuint index, GLsizei count, const GLshort * v) { tunisGL.tunisVertexAttribs2svNV(index, count, v); }
#define glVertexAttribs2svNV tunisVertexAttribs2svNV
TUNIS_FORCE_INLINE void  tunisVertexAttribs3dvNV(GLuint index, GLsizei count, const GLdouble * v) { tunisGL.tunisVertexAttribs3dvNV(index, count, v); }
#define glVertexAttribs3dvNV tunisVertexAttribs3dvNV
TUNIS_FORCE_INLINE void  tunisVertexAttribs3fvNV(GLuint index, GLsizei count, const GLfloat * v) { tunisGL.tunisVertexAttribs3fvNV(index, count, v); }
#define glVertexAttribs3fvNV tunisVertexAttribs3fvNV
TUNIS_FORCE_INLINE void  tunisVertexAttribs3hvNV(GLuint index, GLsizei n, const GLhalfNV * v) { tunisGL.tunisVertexAttribs3hvNV(index, n, v); }
#define glVertexAttribs3hvNV tunisVertexAttribs3hvNV
TUNIS_FORCE_INLINE void  tunisVertexAttribs3svNV(GLuint index, GLsizei count, const GLshort * v) { tunisGL.tunisVertexAttribs3svNV(index, count, v); }
#define glVertexAttribs3svNV tunisVertexAttribs3svNV
TUNIS_FORCE_INLINE void  tunisVertexAttribs4dvNV(GLuint index, GLsizei count, const GLdouble * v) { tunisGL.tunisVertexAttribs4dvNV(index, count, v); }
#define glVertexAttribs4dvNV tunisVertexAttribs4dvNV
TUNIS_FORCE_INLINE void  tunisVertexAttribs4fvNV(GLuint index, GLsizei count, const GLfloat * v) { tunisGL.tunisVertexAttribs4fvNV(index, count, v); }
#define glVertexAttribs4fvNV tunisVertexAttribs4fvNV
TUNIS_FORCE_INLINE void  tunisVertexAttribs4hvNV(GLuint index, GLsizei n, const GLhalfNV * v) { tunisGL.tunisVertexAttribs4hvNV(index, n, v); }
#define glVertexAttribs4hvNV tunisVertexAttribs4hvNV
TUNIS_FORCE_INLINE void  tunisVertexAttribs4svNV(GLuint index, GLsizei count, const GLshort * v) { tunisGL.tunisVertexAttribs4svNV(index, count, v); }
#define glVertexAttribs4svNV tunisVertexAttribs4svNV
TUNIS_FORCE_INLINE void  tunisVertexAttribs4ubvNV(GLuint index, GLsizei count, const GLubyte * v) { tunisGL.tunisVertexAttribs4ubvNV(index, count, v); }
#define glVertexAttribs4ubvNV tunisVertexAttribs4ubvNV
TUNIS_FORCE_INLINE void  tunisVertexBindingDivisor(GLuint bindingindex, GLuint divisor) { tunisGL.tunisVertexBindingDivisor(bindingindex, divisor); }
#define glVertexBindingDivisor tunisVertexBindingDivisor
TUNIS_FORCE_INLINE void  tunisVertexBlendARB(GLint count) { tunisGL.tunisVertexBlendARB(count); }
#define glVertexBlendARB tunisVertexBlendARB
TUNIS_FORCE_INLINE void  tunisVertexBlendEnvfATI(GLenum pname, GLfloat param) { tunisGL.tunisVertexBlendEnvfATI(pname, param); }
#define glVertexBlendEnvfATI tunisVertexBlendEnvfATI
TUNIS_FORCE_INLINE void  tunisVertexBlendEnviATI(GLenum pname, GLint param) { tunisGL.tunisVertexBlendEnviATI(pname, param); }
#define glVertexBlendEnviATI tunisVertexBlendEnviATI
TUNIS_FORCE_INLINE void  tunisVertexFormatNV(GLint size, GLenum type, GLsizei stride) { tunisGL.tunisVertexFormatNV(size, type, stride); }
#define glVertexFormatNV tunisVertexFormatNV
TUNIS_FORCE_INLINE void  tunisVertexP2ui(GLenum type, GLuint value) { tunisGL.tunisVertexP2ui(type, value); }
#define glVertexP2ui tunisVertexP2ui
TUNIS_FORCE_INLINE void  tunisVertexP2uiv(GLenum type, const GLuint * value) { tunisGL.tunisVertexP2uiv(type, value); }
#define glVertexP2uiv tunisVertexP2uiv
TUNIS_FORCE_INLINE void  tunisVertexP3ui(GLenum type, GLuint value) { tunisGL.tunisVertexP3ui(type, value); }
#define glVertexP3ui tunisVertexP3ui
TUNIS_FORCE_INLINE void  tunisVertexP3uiv(GLenum type, const GLuint * value) { tunisGL.tunisVertexP3uiv(type, value); }
#define glVertexP3uiv tunisVertexP3uiv
TUNIS_FORCE_INLINE void  tunisVertexP4ui(GLenum type, GLuint value) { tunisGL.tunisVertexP4ui(type, value); }
#define glVertexP4ui tunisVertexP4ui
TUNIS_FORCE_INLINE void  tunisVertexP4uiv(GLenum type, const GLuint * value) { tunisGL.tunisVertexP4uiv(type, value); }
#define glVertexP4uiv tunisVertexP4uiv
TUNIS_FORCE_INLINE void  tunisVertexPointer(GLint size, GLenum type, GLsizei stride, const void * pointer) { tunisGL.tunisVertexPointer(size, type, stride, pointer); }
#define glVertexPointer tunisVertexPointer
TUNIS_FORCE_INLINE void  tunisVertexPointerEXT(GLint size, GLenum type, GLsizei stride, GLsizei count, const void * pointer) { tunisGL.tunisVertexPointerEXT(size, type, stride, count, pointer); }
#define glVertexPointerEXT tunisVertexPointerEXT
TUNIS_FORCE_INLINE void  tunisVertexPointerListIBM(GLint size, GLenum type, GLint stride, const void ** pointer, GLint ptrstride) { tunisGL.tunisVertexPointerListIBM(size, type, stride, pointer, ptrstride); }
#define glVertexPointerListIBM tunisVertexPointerListIBM
TUNIS_FORCE_INLINE void  tunisVertexPointervINTEL(GLint size, GLenum type, const void ** pointer) { tunisGL.tunisVertexPointervINTEL(size, type, pointer); }
#define glVertexPointervINTEL tunisVertexPointervINTEL
TUNIS_FORCE_INLINE void  tunisVertexStream1dATI(GLenum stream, GLdouble x) { tunisGL.tunisVertexStream1dATI(stream, x); }
#define glVertexStream1dATI tunisVertexStream1dATI
TUNIS_FORCE_INLINE void  tunisVertexStream1dvATI(GLenum stream, const GLdouble * coords) { tunisGL.tunisVertexStream1dvATI(stream, coords); }
#define glVertexStream1dvATI tunisVertexStream1dvATI
TUNIS_FORCE_INLINE void  tunisVertexStream1fATI(GLenum stream, GLfloat x) { tunisGL.tunisVertexStream1fATI(stream, x); }
#define glVertexStream1fATI tunisVertexStream1fATI
TUNIS_FORCE_INLINE void  tunisVertexStream1fvATI(GLenum stream, const GLfloat * coords) { tunisGL.tunisVertexStream1fvATI(stream, coords); }
#define glVertexStream1fvATI tunisVertexStream1fvATI
TUNIS_FORCE_INLINE void  tunisVertexStream1iATI(GLenum stream, GLint x) { tunisGL.tunisVertexStream1iATI(stream, x); }
#define glVertexStream1iATI tunisVertexStream1iATI
TUNIS_FORCE_INLINE void  tunisVertexStream1ivATI(GLenum stream, const GLint * coords) { tunisGL.tunisVertexStream1ivATI(stream, coords); }
#define glVertexStream1ivATI tunisVertexStream1ivATI
TUNIS_FORCE_INLINE void  tunisVertexStream1sATI(GLenum stream, GLshort x) { tunisGL.tunisVertexStream1sATI(stream, x); }
#define glVertexStream1sATI tunisVertexStream1sATI
TUNIS_FORCE_INLINE void  tunisVertexStream1svATI(GLenum stream, const GLshort * coords) { tunisGL.tunisVertexStream1svATI(stream, coords); }
#define glVertexStream1svATI tunisVertexStream1svATI
TUNIS_FORCE_INLINE void  tunisVertexStream2dATI(GLenum stream, GLdouble x, GLdouble y) { tunisGL.tunisVertexStream2dATI(stream, x, y); }
#define glVertexStream2dATI tunisVertexStream2dATI
TUNIS_FORCE_INLINE void  tunisVertexStream2dvATI(GLenum stream, const GLdouble * coords) { tunisGL.tunisVertexStream2dvATI(stream, coords); }
#define glVertexStream2dvATI tunisVertexStream2dvATI
TUNIS_FORCE_INLINE void  tunisVertexStream2fATI(GLenum stream, GLfloat x, GLfloat y) { tunisGL.tunisVertexStream2fATI(stream, x, y); }
#define glVertexStream2fATI tunisVertexStream2fATI
TUNIS_FORCE_INLINE void  tunisVertexStream2fvATI(GLenum stream, const GLfloat * coords) { tunisGL.tunisVertexStream2fvATI(stream, coords); }
#define glVertexStream2fvATI tunisVertexStream2fvATI
TUNIS_FORCE_INLINE void  tunisVertexStream2iATI(GLenum stream, GLint x, GLint y) { tunisGL.tunisVertexStream2iATI(stream, x, y); }
#define glVertexStream2iATI tunisVertexStream2iATI
TUNIS_FORCE_INLINE void  tunisVertexStream2ivATI(GLenum stream, const GLint * coords) { tunisGL.tunisVertexStream2ivATI(stream, coords); }
#define glVertexStream2ivATI tunisVertexStream2ivATI
TUNIS_FORCE_INLINE void  tunisVertexStream2sATI(GLenum stream, GLshort x, GLshort y) { tunisGL.tunisVertexStream2sATI(stream, x, y); }
#define glVertexStream2sATI tunisVertexStream2sATI
TUNIS_FORCE_INLINE void  tunisVertexStream2svATI(GLenum stream, const GLshort * coords) { tunisGL.tunisVertexStream2svATI(stream, coords); }
#define glVertexStream2svATI tunisVertexStream2svATI
TUNIS_FORCE_INLINE void  tunisVertexStream3dATI(GLenum stream, GLdouble x, GLdouble y, GLdouble z) { tunisGL.tunisVertexStream3dATI(stream, x, y, z); }
#define glVertexStream3dATI tunisVertexStream3dATI
TUNIS_FORCE_INLINE void  tunisVertexStream3dvATI(GLenum stream, const GLdouble * coords) { tunisGL.tunisVertexStream3dvATI(stream, coords); }
#define glVertexStream3dvATI tunisVertexStream3dvATI
TUNIS_FORCE_INLINE void  tunisVertexStream3fATI(GLenum stream, GLfloat x, GLfloat y, GLfloat z) { tunisGL.tunisVertexStream3fATI(stream, x, y, z); }
#define glVertexStream3fATI tunisVertexStream3fATI
TUNIS_FORCE_INLINE void  tunisVertexStream3fvATI(GLenum stream, const GLfloat * coords) { tunisGL.tunisVertexStream3fvATI(stream, coords); }
#define glVertexStream3fvATI tunisVertexStream3fvATI
TUNIS_FORCE_INLINE void  tunisVertexStream3iATI(GLenum stream, GLint x, GLint y, GLint z) { tunisGL.tunisVertexStream3iATI(stream, x, y, z); }
#define glVertexStream3iATI tunisVertexStream3iATI
TUNIS_FORCE_INLINE void  tunisVertexStream3ivATI(GLenum stream, const GLint * coords) { tunisGL.tunisVertexStream3ivATI(stream, coords); }
#define glVertexStream3ivATI tunisVertexStream3ivATI
TUNIS_FORCE_INLINE void  tunisVertexStream3sATI(GLenum stream, GLshort x, GLshort y, GLshort z) { tunisGL.tunisVertexStream3sATI(stream, x, y, z); }
#define glVertexStream3sATI tunisVertexStream3sATI
TUNIS_FORCE_INLINE void  tunisVertexStream3svATI(GLenum stream, const GLshort * coords) { tunisGL.tunisVertexStream3svATI(stream, coords); }
#define glVertexStream3svATI tunisVertexStream3svATI
TUNIS_FORCE_INLINE void  tunisVertexStream4dATI(GLenum stream, GLdouble x, GLdouble y, GLdouble z, GLdouble w) { tunisGL.tunisVertexStream4dATI(stream, x, y, z, w); }
#define glVertexStream4dATI tunisVertexStream4dATI
TUNIS_FORCE_INLINE void  tunisVertexStream4dvATI(GLenum stream, const GLdouble * coords) { tunisGL.tunisVertexStream4dvATI(stream, coords); }
#define glVertexStream4dvATI tunisVertexStream4dvATI
TUNIS_FORCE_INLINE void  tunisVertexStream4fATI(GLenum stream, GLfloat x, GLfloat y, GLfloat z, GLfloat w) { tunisGL.tunisVertexStream4fATI(stream, x, y, z, w); }
#define glVertexStream4fATI tunisVertexStream4fATI
TUNIS_FORCE_INLINE void  tunisVertexStream4fvATI(GLenum stream, const GLfloat * coords) { tunisGL.tunisVertexStream4fvATI(stream, coords); }
#define glVertexStream4fvATI tunisVertexStream4fvATI
TUNIS_FORCE_INLINE void  tunisVertexStream4iATI(GLenum stream, GLint x, GLint y, GLint z, GLint w) { tunisGL.tunisVertexStream4iATI(stream, x, y, z, w); }
#define glVertexStream4iATI tunisVertexStream4iATI
TUNIS_FORCE_INLINE void  tunisVertexStream4ivATI(GLenum stream, const GLint * coords) { tunisGL.tunisVertexStream4ivATI(stream, coords); }
#define glVertexStream4ivATI tunisVertexStream4ivATI
TUNIS_FORCE_INLINE void  tunisVertexStream4sATI(GLenum stream, GLshort x, GLshort y, GLshort z, GLshort w) { tunisGL.tunisVertexStream4sATI(stream, x, y, z, w); }
#define glVertexStream4sATI tunisVertexStream4sATI
TUNIS_FORCE_INLINE void  tunisVertexStream4svATI(GLenum stream, const GLshort * coords) { tunisGL.tunisVertexStream4svATI(stream, coords); }
#define glVertexStream4svATI tunisVertexStream4svATI
TUNIS_FORCE_INLINE void  tunisVertexWeightPointerEXT(GLint size, GLenum type, GLsizei stride, const void * pointer) { tunisGL.tunisVertexWeightPointerEXT(size, type, stride, pointer); }
#define glVertexWeightPointerEXT tunisVertexWeightPointerEXT
TUNIS_FORCE_INLINE void  tunisVertexWeightfEXT(GLfloat weight) { tunisGL.tunisVertexWeightfEXT(weight); }
#define glVertexWeightfEXT tunisVertexWeightfEXT
TUNIS_FORCE_INLINE void  tunisVertexWeightfvEXT(const GLfloat * weight) { tunisGL.tunisVertexWeightfvEXT(weight); }
#define glVertexWeightfvEXT tunisVertexWeightfvEXT
TUNIS_FORCE_INLINE void  tunisVertexWeighthNV(GLhalfNV weight) { tunisGL.tunisVertexWeighthNV(weight); }
#define glVertexWeighthNV tunisVertexWeighthNV
TUNIS_FORCE_INLINE void  tunisVertexWeighthvNV(const GLhalfNV * weight) { tunisGL.tunisVertexWeighthvNV(weight); }
#define glVertexWeighthvNV tunisVertexWeighthvNV
TUNIS_FORCE_INLINE GLenum tunisVideoCaptureNV(GLuint video_capture_slot, GLuint * sequence_num, GLuint64EXT * capture_time) { return tunisGL.tunisVideoCaptureNV(video_capture_slot, sequence_num, capture_time); }
#define glVideoCaptureNV tunisVideoCaptureNV
TUNIS_FORCE_INLINE void  tunisVideoCaptureStreamParameterdvNV(GLuint video_capture_slot, GLuint stream, GLenum pname, const GLdouble * params) { tunisGL.tunisVideoCaptureStreamParameterdvNV(video_capture_slot, stream, pname, params); }
#define glVideoCaptureStreamParameterdvNV tunisVideoCaptureStreamParameterdvNV
TUNIS_FORCE_INLINE void  tunisVideoCaptureStreamParameterfvNV(GLuint video_capture_slot, GLuint stream, GLenum pname, const GLfloat * params) { tunisGL.tunisVideoCaptureStreamParameterfvNV(video_capture_slot, stream, pname, params); }
#define glVideoCaptureStreamParameterfvNV tunisVideoCaptureStreamParameterfvNV
TUNIS_FORCE_INLINE void  tunisVideoCaptureStreamParameterivNV(GLuint video_capture_slot, GLuint stream, GLenum pname, const GLint * params) { tunisGL.tunisVideoCaptureStreamParameterivNV(video_capture_slot, stream, pname, params); }
#define glVideoCaptureStreamParameterivNV tunisVideoCaptureStreamParameterivNV
TUNIS_FORCE_INLINE void  tunisViewport(GLint x, GLint y, GLsizei width, GLsizei height) { tunisGL.tunisViewport(x, y, width, height); }
#define glViewport tunisViewport
TUNIS_FORCE_INLINE void  tunisViewportArrayv(GLuint first, GLsizei count, const GLfloat * v) { tunisGL.tunisViewportArrayv(first, count, v); }
#define glViewportArrayv tunisViewportArrayv
TUNIS_FORCE_INLINE void  tunisViewportArrayvNV(GLuint first, GLsizei count, const GLfloat * v) { tunisGL.tunisViewportArrayvNV(first, count, v); }
#define glViewportArrayvNV tunisViewportArrayvNV
TUNIS_FORCE_INLINE void  tunisViewportArrayvOES(GLuint first, GLsizei count, const GLfloat * v) { tunisGL.tunisViewportArrayvOES(first, count, v); }
#define glViewportArrayvOES tunisViewportArrayvOES
TUNIS_FORCE_INLINE void  tunisViewportIndexedf(GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h) { tunisGL.tunisViewportIndexedf(index, x, y, w, h); }
#define glViewportIndexedf tunisViewportIndexedf
TUNIS_FORCE_INLINE void  tunisViewportIndexedfNV(GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h) { tunisGL.tunisViewportIndexedfNV(index, x, y, w, h); }
#define glViewportIndexedfNV tunisViewportIndexedfNV
TUNIS_FORCE_INLINE void  tunisViewportIndexedfOES(GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h) { tunisGL.tunisViewportIndexedfOES(index, x, y, w, h); }
#define glViewportIndexedfOES tunisViewportIndexedfOES
TUNIS_FORCE_INLINE void  tunisViewportIndexedfv(GLuint index, const GLfloat * v) { tunisGL.tunisViewportIndexedfv(index, v); }
#define glViewportIndexedfv tunisViewportIndexedfv
TUNIS_FORCE_INLINE void  tunisViewportIndexedfvNV(GLuint index, const GLfloat * v) { tunisGL.tunisViewportIndexedfvNV(index, v); }
#define glViewportIndexedfvNV tunisViewportIndexedfvNV
TUNIS_FORCE_INLINE void  tunisViewportIndexedfvOES(GLuint index, const GLfloat * v) { tunisGL.tunisViewportIndexedfvOES(index, v); }
#define glViewportIndexedfvOES tunisViewportIndexedfvOES
TUNIS_FORCE_INLINE void  tunisViewportPositionWScaleNV(GLuint index, GLfloat xcoeff, GLfloat ycoeff) { tunisGL.tunisViewportPositionWScaleNV(index, xcoeff, ycoeff); }
#define glViewportPositionWScaleNV tunisViewportPositionWScaleNV
TUNIS_FORCE_INLINE void  tunisViewportSwizzleNV(GLuint index, GLenum swizzlex, GLenum swizzley, GLenum swizzlez, GLenum swizzlew) { tunisGL.tunisViewportSwizzleNV(index, swizzlex, swizzley, swizzlez, swizzlew); }
#define glViewportSwizzleNV tunisViewportSwizzleNV
TUNIS_FORCE_INLINE void  tunisWaitSemaphoreEXT(GLuint semaphore, GLuint numBufferBarriers, const GLuint * buffers, GLuint numTextureBarriers, const GLuint * textures, const GLenum * srcLayouts) { tunisGL.tunisWaitSemaphoreEXT(semaphore, numBufferBarriers, buffers, numTextureBarriers, textures, srcLayouts); }
#define glWaitSemaphoreEXT tunisWaitSemaphoreEXT
TUNIS_FORCE_INLINE void  tunisWaitSync(GLsync sync, GLbitfield flags, GLuint64 timeout) { tunisGL.tunisWaitSync(sync, flags, timeout); }
#define glWaitSync tunisWaitSync
TUNIS_FORCE_INLINE void  tunisWaitSyncAPPLE(GLsync sync, GLbitfield flags, GLuint64 timeout) { tunisGL.tunisWaitSyncAPPLE(sync, flags, timeout); }
#define glWaitSyncAPPLE tunisWaitSyncAPPLE
TUNIS_FORCE_INLINE void  tunisWaitVkSemaphoreNV(GLuint64 vkSemaphore) { tunisGL.tunisWaitVkSemaphoreNV(vkSemaphore); }
#define glWaitVkSemaphoreNV tunisWaitVkSemaphoreNV
TUNIS_FORCE_INLINE void  tunisWeightPathsNV(GLuint resultPath, GLsizei numPaths, const GLuint * paths, const GLfloat * weights) { tunisGL.tunisWeightPathsNV(resultPath, numPaths, paths, weights); }
#define glWeightPathsNV tunisWeightPathsNV
TUNIS_FORCE_INLINE void  tunisWeightPointerARB(GLint size, GLenum type, GLsizei stride, const void * pointer) { tunisGL.tunisWeightPointerARB(size, type, stride, pointer); }
#define glWeightPointerARB tunisWeightPointerARB
TUNIS_FORCE_INLINE void  tunisWeightPointerOES(GLint size, GLenum type, GLsizei stride, const void * pointer) { tunisGL.tunisWeightPointerOES(size, type, stride, pointer); }
#define glWeightPointerOES tunisWeightPointerOES
TUNIS_FORCE_INLINE void  tunisWeightbvARB(GLint size, const GLbyte * weights) { tunisGL.tunisWeightbvARB(size, weights); }
#define glWeightbvARB tunisWeightbvARB
TUNIS_FORCE_INLINE void  tunisWeightdvARB(GLint size, const GLdouble * weights) { tunisGL.tunisWeightdvARB(size, weights); }
#define glWeightdvARB tunisWeightdvARB
TUNIS_FORCE_INLINE void  tunisWeightfvARB(GLint size, const GLfloat * weights) { tunisGL.tunisWeightfvARB(size, weights); }
#define glWeightfvARB tunisWeightfvARB
TUNIS_FORCE_INLINE void  tunisWeightivARB(GLint size, const GLint * weights) { tunisGL.tunisWeightivARB(size, weights); }
#define glWeightivARB tunisWeightivARB
TUNIS_FORCE_INLINE void  tunisWeightsvARB(GLint size, const GLshort * weights) { tunisGL.tunisWeightsvARB(size, weights); }
#define glWeightsvARB tunisWeightsvARB
TUNIS_FORCE_INLINE void  tunisWeightubvARB(GLint size, const GLubyte * weights) { tunisGL.tunisWeightubvARB(size, weights); }
#define glWeightubvARB tunisWeightubvARB
TUNIS_FORCE_INLINE void  tunisWeightuivARB(GLint size, const GLuint * weights) { tunisGL.tunisWeightuivARB(size, weights); }
#define glWeightuivARB tunisWeightuivARB
TUNIS_FORCE_INLINE void  tunisWeightusvARB(GLint size, const GLushort * weights) { tunisGL.tunisWeightusvARB(size, weights); }
#define glWeightusvARB tunisWeightusvARB
TUNIS_FORCE_INLINE void  tunisWindowPos2d(GLdouble x, GLdouble y) { tunisGL.tunisWindowPos2d(x, y); }
#define glWindowPos2d tunisWindowPos2d
TUNIS_FORCE_INLINE void  tunisWindowPos2dARB(GLdouble x, GLdouble y) { tunisGL.tunisWindowPos2dARB(x, y); }
#define glWindowPos2dARB tunisWindowPos2dARB
TUNIS_FORCE_INLINE void  tunisWindowPos2dMESA(GLdouble x, GLdouble y) { tunisGL.tunisWindowPos2dMESA(x, y); }
#define glWindowPos2dMESA tunisWindowPos2dMESA
TUNIS_FORCE_INLINE void  tunisWindowPos2dv(const GLdouble * v) { tunisGL.tunisWindowPos2dv(v); }
#define glWindowPos2dv tunisWindowPos2dv
TUNIS_FORCE_INLINE void  tunisWindowPos2dvARB(const GLdouble * v) { tunisGL.tunisWindowPos2dvARB(v); }
#define glWindowPos2dvARB tunisWindowPos2dvARB
TUNIS_FORCE_INLINE void  tunisWindowPos2dvMESA(const GLdouble * v) { tunisGL.tunisWindowPos2dvMESA(v); }
#define glWindowPos2dvMESA tunisWindowPos2dvMESA
TUNIS_FORCE_INLINE void  tunisWindowPos2f(GLfloat x, GLfloat y) { tunisGL.tunisWindowPos2f(x, y); }
#define glWindowPos2f tunisWindowPos2f
TUNIS_FORCE_INLINE void  tunisWindowPos2fARB(GLfloat x, GLfloat y) { tunisGL.tunisWindowPos2fARB(x, y); }
#define glWindowPos2fARB tunisWindowPos2fARB
TUNIS_FORCE_INLINE void  tunisWindowPos2fMESA(GLfloat x, GLfloat y) { tunisGL.tunisWindowPos2fMESA(x, y); }
#define glWindowPos2fMESA tunisWindowPos2fMESA
TUNIS_FORCE_INLINE void  tunisWindowPos2fv(const GLfloat * v) { tunisGL.tunisWindowPos2fv(v); }
#define glWindowPos2fv tunisWindowPos2fv
TUNIS_FORCE_INLINE void  tunisWindowPos2fvARB(const GLfloat * v) { tunisGL.tunisWindowPos2fvARB(v); }
#define glWindowPos2fvARB tunisWindowPos2fvARB
TUNIS_FORCE_INLINE void  tunisWindowPos2fvMESA(const GLfloat * v) { tunisGL.tunisWindowPos2fvMESA(v); }
#define glWindowPos2fvMESA tunisWindowPos2fvMESA
TUNIS_FORCE_INLINE void  tunisWindowPos2i(GLint x, GLint y) { tunisGL.tunisWindowPos2i(x, y); }
#define glWindowPos2i tunisWindowPos2i
TUNIS_FORCE_INLINE void  tunisWindowPos2iARB(GLint x, GLint y) { tunisGL.tunisWindowPos2iARB(x, y); }
#define glWindowPos2iARB tunisWindowPos2iARB
TUNIS_FORCE_INLINE void  tunisWindowPos2iMESA(GLint x, GLint y) { tunisGL.tunisWindowPos2iMESA(x, y); }
#define glWindowPos2iMESA tunisWindowPos2iMESA
TUNIS_FORCE_INLINE void  tunisWindowPos2iv(const GLint * v) { tunisGL.tunisWindowPos2iv(v); }
#define glWindowPos2iv tunisWindowPos2iv
TUNIS_FORCE_INLINE void  tunisWindowPos2ivARB(const GLint * v) { tunisGL.tunisWindowPos2ivARB(v); }
#define glWindowPos2ivARB tunisWindowPos2ivARB
TUNIS_FORCE_INLINE void  tunisWindowPos2ivMESA(const GLint * v) { tunisGL.tunisWindowPos2ivMESA(v); }
#define glWindowPos2ivMESA tunisWindowPos2ivMESA
TUNIS_FORCE_INLINE void  tunisWindowPos2s(GLshort x, GLshort y) { tunisGL.tunisWindowPos2s(x, y); }
#define glWindowPos2s tunisWindowPos2s
TUNIS_FORCE_INLINE void  tunisWindowPos2sARB(GLshort x, GLshort y) { tunisGL.tunisWindowPos2sARB(x, y); }
#define glWindowPos2sARB tunisWindowPos2sARB
TUNIS_FORCE_INLINE void  tunisWindowPos2sMESA(GLshort x, GLshort y) { tunisGL.tunisWindowPos2sMESA(x, y); }
#define glWindowPos2sMESA tunisWindowPos2sMESA
TUNIS_FORCE_INLINE void  tunisWindowPos2sv(const GLshort * v) { tunisGL.tunisWindowPos2sv(v); }
#define glWindowPos2sv tunisWindowPos2sv
TUNIS_FORCE_INLINE void  tunisWindowPos2svARB(const GLshort * v) { tunisGL.tunisWindowPos2svARB(v); }
#define glWindowPos2svARB tunisWindowPos2svARB
TUNIS_FORCE_INLINE void  tunisWindowPos2svMESA(const GLshort * v) { tunisGL.tunisWindowPos2svMESA(v); }
#define glWindowPos2svMESA tunisWindowPos2svMESA
TUNIS_FORCE_INLINE void  tunisWindowPos3d(GLdouble x, GLdouble y, GLdouble z) { tunisGL.tunisWindowPos3d(x, y, z); }
#define glWindowPos3d tunisWindowPos3d
TUNIS_FORCE_INLINE void  tunisWindowPos3dARB(GLdouble x, GLdouble y, GLdouble z) { tunisGL.tunisWindowPos3dARB(x, y, z); }
#define glWindowPos3dARB tunisWindowPos3dARB
TUNIS_FORCE_INLINE void  tunisWindowPos3dMESA(GLdouble x, GLdouble y, GLdouble z) { tunisGL.tunisWindowPos3dMESA(x, y, z); }
#define glWindowPos3dMESA tunisWindowPos3dMESA
TUNIS_FORCE_INLINE void  tunisWindowPos3dv(const GLdouble * v) { tunisGL.tunisWindowPos3dv(v); }
#define glWindowPos3dv tunisWindowPos3dv
TUNIS_FORCE_INLINE void  tunisWindowPos3dvARB(const GLdouble * v) { tunisGL.tunisWindowPos3dvARB(v); }
#define glWindowPos3dvARB tunisWindowPos3dvARB
TUNIS_FORCE_INLINE void  tunisWindowPos3dvMESA(const GLdouble * v) { tunisGL.tunisWindowPos3dvMESA(v); }
#define glWindowPos3dvMESA tunisWindowPos3dvMESA
TUNIS_FORCE_INLINE void  tunisWindowPos3f(GLfloat x, GLfloat y, GLfloat z) { tunisGL.tunisWindowPos3f(x, y, z); }
#define glWindowPos3f tunisWindowPos3f
TUNIS_FORCE_INLINE void  tunisWindowPos3fARB(GLfloat x, GLfloat y, GLfloat z) { tunisGL.tunisWindowPos3fARB(x, y, z); }
#define glWindowPos3fARB tunisWindowPos3fARB
TUNIS_FORCE_INLINE void  tunisWindowPos3fMESA(GLfloat x, GLfloat y, GLfloat z) { tunisGL.tunisWindowPos3fMESA(x, y, z); }
#define glWindowPos3fMESA tunisWindowPos3fMESA
TUNIS_FORCE_INLINE void  tunisWindowPos3fv(const GLfloat * v) { tunisGL.tunisWindowPos3fv(v); }
#define glWindowPos3fv tunisWindowPos3fv
TUNIS_FORCE_INLINE void  tunisWindowPos3fvARB(const GLfloat * v) { tunisGL.tunisWindowPos3fvARB(v); }
#define glWindowPos3fvARB tunisWindowPos3fvARB
TUNIS_FORCE_INLINE void  tunisWindowPos3fvMESA(const GLfloat * v) { tunisGL.tunisWindowPos3fvMESA(v); }
#define glWindowPos3fvMESA tunisWindowPos3fvMESA
TUNIS_FORCE_INLINE void  tunisWindowPos3i(GLint x, GLint y, GLint z) { tunisGL.tunisWindowPos3i(x, y, z); }
#define glWindowPos3i tunisWindowPos3i
TUNIS_FORCE_INLINE void  tunisWindowPos3iARB(GLint x, GLint y, GLint z) { tunisGL.tunisWindowPos3iARB(x, y, z); }
#define glWindowPos3iARB tunisWindowPos3iARB
TUNIS_FORCE_INLINE void  tunisWindowPos3iMESA(GLint x, GLint y, GLint z) { tunisGL.tunisWindowPos3iMESA(x, y, z); }
#define glWindowPos3iMESA tunisWindowPos3iMESA
TUNIS_FORCE_INLINE void  tunisWindowPos3iv(const GLint * v) { tunisGL.tunisWindowPos3iv(v); }
#define glWindowPos3iv tunisWindowPos3iv
TUNIS_FORCE_INLINE void  tunisWindowPos3ivARB(const GLint * v) { tunisGL.tunisWindowPos3ivARB(v); }
#define glWindowPos3ivARB tunisWindowPos3ivARB
TUNIS_FORCE_INLINE void  tunisWindowPos3ivMESA(const GLint * v) { tunisGL.tunisWindowPos3ivMESA(v); }
#define glWindowPos3ivMESA tunisWindowPos3ivMESA
TUNIS_FORCE_INLINE void  tunisWindowPos3s(GLshort x, GLshort y, GLshort z) { tunisGL.tunisWindowPos3s(x, y, z); }
#define glWindowPos3s tunisWindowPos3s
TUNIS_FORCE_INLINE void  tunisWindowPos3sARB(GLshort x, GLshort y, GLshort z) { tunisGL.tunisWindowPos3sARB(x, y, z); }
#define glWindowPos3sARB tunisWindowPos3sARB
TUNIS_FORCE_INLINE void  tunisWindowPos3sMESA(GLshort x, GLshort y, GLshort z) { tunisGL.tunisWindowPos3sMESA(x, y, z); }
#define glWindowPos3sMESA tunisWindowPos3sMESA
TUNIS_FORCE_INLINE void  tunisWindowPos3sv(const GLshort * v) { tunisGL.tunisWindowPos3sv(v); }
#define glWindowPos3sv tunisWindowPos3sv
TUNIS_FORCE_INLINE void  tunisWindowPos3svARB(const GLshort * v) { tunisGL.tunisWindowPos3svARB(v); }
#define glWindowPos3svARB tunisWindowPos3svARB
TUNIS_FORCE_INLINE void  tunisWindowPos3svMESA(const GLshort * v) { tunisGL.tunisWindowPos3svMESA(v); }
#define glWindowPos3svMESA tunisWindowPos3svMESA
TUNIS_FORCE_INLINE void  tunisWindowPos4dMESA(GLdouble x, GLdouble y, GLdouble z, GLdouble w) { tunisGL.tunisWindowPos4dMESA(x, y, z, w); }
#define glWindowPos4dMESA tunisWindowPos4dMESA
TUNIS_FORCE_INLINE void  tunisWindowPos4dvMESA(const GLdouble * v) { tunisGL.tunisWindowPos4dvMESA(v); }
#define glWindowPos4dvMESA tunisWindowPos4dvMESA
TUNIS_FORCE_INLINE void  tunisWindowPos4fMESA(GLfloat x, GLfloat y, GLfloat z, GLfloat w) { tunisGL.tunisWindowPos4fMESA(x, y, z, w); }
#define glWindowPos4fMESA tunisWindowPos4fMESA
TUNIS_FORCE_INLINE void  tunisWindowPos4fvMESA(const GLfloat * v) { tunisGL.tunisWindowPos4fvMESA(v); }
#define glWindowPos4fvMESA tunisWindowPos4fvMESA
TUNIS_FORCE_INLINE void  tunisWindowPos4iMESA(GLint x, GLint y, GLint z, GLint w) { tunisGL.tunisWindowPos4iMESA(x, y, z, w); }
#define glWindowPos4iMESA tunisWindowPos4iMESA
TUNIS_FORCE_INLINE void  tunisWindowPos4ivMESA(const GLint * v) { tunisGL.tunisWindowPos4ivMESA(v); }
#define glWindowPos4ivMESA tunisWindowPos4ivMESA
TUNIS_FORCE_INLINE void  tunisWindowPos4sMESA(GLshort x, GLshort y, GLshort z, GLshort w) { tunisGL.tunisWindowPos4sMESA(x, y, z, w); }
#define glWindowPos4sMESA tunisWindowPos4sMESA
TUNIS_FORCE_INLINE void  tunisWindowPos4svMESA(const GLshort * v) { tunisGL.tunisWindowPos4svMESA(v); }
#define glWindowPos4svMESA tunisWindowPos4svMESA
TUNIS_FORCE_INLINE void  tunisWindowRectanglesEXT(GLenum mode, GLsizei count, const GLint * box) { tunisGL.tunisWindowRectanglesEXT(mode, count, box); }
#define glWindowRectanglesEXT tunisWindowRectanglesEXT
TUNIS_FORCE_INLINE void  tunisWriteMaskEXT(GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW) { tunisGL.tunisWriteMaskEXT(res, in, outX, outY, outZ, outW); }
#define glWriteMaskEXT tunisWriteMaskEXT


#if defined(__cplusplus)
} /* extern "C" */
#endif

#if defined(TUNIS_GL_IMPLEMENTATION)

#include <stdio.h>
#include <string.h>

#if !defined(NDEBUG)
    #include <time.h>
#endif

#if !defined(_WIN32) && !defined(__EMSCRIPTEN__)
    #include <dlfcn.h>
#endif

#if !defined(TUNIS_SSCANF)
    #if defined(_MSC_VER)
        #define TUNIS_SSCANF sscanf_s
    #else
        #define TUNIS_SSCANF sscanf
    #endif
#endif

#if defined(__cplusplus)
extern "C"  {
#endif

#if defined(__EMSCRIPTEN__)
    extern void* emscripten_GetProcAddress(const char *name_);
#elif defined(_WIN32) && !defined(__CYGWIN__)
    static HMODULE s_tunisGLLib = NULL;
#else
    static void *s_tunisGLLib = NULL;
#endif

#if defined(_MSC_VER)
    #if defined(__has_include)
        #if __has_include(<winapifamily.h>)
            #define HAVE_WINAPIFAMILY 1
        #endif
    #elif _MSC_VER >= 1700 && !_USING_V110_SDK71_
        #define HAVE_WINAPIFAMILY 1
    #endif
#endif

#if defined(HAVE_WINAPIFAMILY)
    #include <winapifamily.h>
    #if !WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP) && WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP)
        #define IS_UWP 1
    #endif
#endif

TunisGLConfig tunisGL;

static TunisGLProc tunisGLGetProcAddressDefaultImpl(const char *procName)
{
    TunisGLProc proc;
#if defined(__EMSCRIPTEN__)
    proc = (TunisGLProc)emscripten_GetProcAddress(procName);
#elif defined(_WIN32)
    proc = (TunisGLProc)GetProcAddress(s_tunisGLLib, procName);
    if (!proc)
    {
        proc = (TunisGLProc)wglGetProcAddress(procName);
    }
#else
    *(void **)(&proc) = dlsym(s_tunisGLLib, procName);
#endif
    return proc;
}

TunisGLGetProcAddressFunc tunisGLGetProcAddress = tunisGLGetProcAddressDefaultImpl;

static void tunisGLAddExtension(khronos_int8_t isGLES, const char* const extensionStr, khronos_usize_t extensionStrLength) {
    if(isGLES) {
        if (!tunisGL.support[GL_AMD_compressed_3DC_texture] && (extensionStrLength == 29) && strncmp(extensionStr, "GL_AMD_compressed_3DC_texture", extensionStrLength) == 0) { tunisGL.support[GL_AMD_compressed_3DC_texture] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_AMD_compressed_ATC_texture] && (extensionStrLength == 29) && strncmp(extensionStr, "GL_AMD_compressed_ATC_texture", extensionStrLength) == 0) { tunisGL.support[GL_AMD_compressed_ATC_texture] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_AMD_program_binary_Z400] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_AMD_program_binary_Z400", extensionStrLength) == 0) { tunisGL.support[GL_AMD_program_binary_Z400] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ANDROID_extension_pack_es31a] && (extensionStrLength == 31) && strncmp(extensionStr, "GL_ANDROID_extension_pack_es31a", extensionStrLength) == 0) { tunisGL.support[GL_ANDROID_extension_pack_es31a] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ANGLE_depth_texture] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_ANGLE_depth_texture", extensionStrLength) == 0) { tunisGL.support[GL_ANGLE_depth_texture] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ANGLE_framebuffer_blit] && (extensionStrLength == 25) && strncmp(extensionStr, "GL_ANGLE_framebuffer_blit", extensionStrLength) == 0) { tunisGL.support[GL_ANGLE_framebuffer_blit] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ANGLE_framebuffer_multisample] && (extensionStrLength == 32) && strncmp(extensionStr, "GL_ANGLE_framebuffer_multisample", extensionStrLength) == 0) { tunisGL.support[GL_ANGLE_framebuffer_multisample] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ANGLE_instanced_arrays] && (extensionStrLength == 25) && strncmp(extensionStr, "GL_ANGLE_instanced_arrays", extensionStrLength) == 0) { tunisGL.support[GL_ANGLE_instanced_arrays] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ANGLE_pack_reverse_row_order] && (extensionStrLength == 31) && strncmp(extensionStr, "GL_ANGLE_pack_reverse_row_order", extensionStrLength) == 0) { tunisGL.support[GL_ANGLE_pack_reverse_row_order] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ANGLE_program_binary] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_ANGLE_program_binary", extensionStrLength) == 0) { tunisGL.support[GL_ANGLE_program_binary] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ANGLE_texture_compression_dxt3] && (extensionStrLength == 33) && strncmp(extensionStr, "GL_ANGLE_texture_compression_dxt3", extensionStrLength) == 0) { tunisGL.support[GL_ANGLE_texture_compression_dxt3] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ANGLE_texture_compression_dxt5] && (extensionStrLength == 33) && strncmp(extensionStr, "GL_ANGLE_texture_compression_dxt5", extensionStrLength) == 0) { tunisGL.support[GL_ANGLE_texture_compression_dxt5] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ANGLE_texture_usage] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_ANGLE_texture_usage", extensionStrLength) == 0) { tunisGL.support[GL_ANGLE_texture_usage] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ANGLE_translated_shader_source] && (extensionStrLength == 33) && strncmp(extensionStr, "GL_ANGLE_translated_shader_source", extensionStrLength) == 0) { tunisGL.support[GL_ANGLE_translated_shader_source] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_APPLE_clip_distance] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_APPLE_clip_distance", extensionStrLength) == 0) { tunisGL.support[GL_APPLE_clip_distance] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_APPLE_color_buffer_packed_float] && (extensionStrLength == 34) && strncmp(extensionStr, "GL_APPLE_color_buffer_packed_float", extensionStrLength) == 0) { tunisGL.support[GL_APPLE_color_buffer_packed_float] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_APPLE_copy_texture_levels] && (extensionStrLength == 28) && strncmp(extensionStr, "GL_APPLE_copy_texture_levels", extensionStrLength) == 0) { tunisGL.support[GL_APPLE_copy_texture_levels] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_APPLE_framebuffer_multisample] && (extensionStrLength == 32) && strncmp(extensionStr, "GL_APPLE_framebuffer_multisample", extensionStrLength) == 0) { tunisGL.support[GL_APPLE_framebuffer_multisample] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_APPLE_sync] && (extensionStrLength == 13) && strncmp(extensionStr, "GL_APPLE_sync", extensionStrLength) == 0) { tunisGL.support[GL_APPLE_sync] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_APPLE_texture_2D_limited_npot] && (extensionStrLength == 32) && strncmp(extensionStr, "GL_APPLE_texture_2D_limited_npot", extensionStrLength) == 0) { tunisGL.support[GL_APPLE_texture_2D_limited_npot] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_APPLE_texture_format_BGRA8888] && (extensionStrLength == 32) && strncmp(extensionStr, "GL_APPLE_texture_format_BGRA8888", extensionStrLength) == 0) { tunisGL.support[GL_APPLE_texture_format_BGRA8888] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_APPLE_texture_max_level] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_APPLE_texture_max_level", extensionStrLength) == 0) { tunisGL.support[GL_APPLE_texture_max_level] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_APPLE_texture_packed_float] && (extensionStrLength == 29) && strncmp(extensionStr, "GL_APPLE_texture_packed_float", extensionStrLength) == 0) { tunisGL.support[GL_APPLE_texture_packed_float] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARM_mali_program_binary] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_ARM_mali_program_binary", extensionStrLength) == 0) { tunisGL.support[GL_ARM_mali_program_binary] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARM_mali_shader_binary] && (extensionStrLength == 25) && strncmp(extensionStr, "GL_ARM_mali_shader_binary", extensionStrLength) == 0) { tunisGL.support[GL_ARM_mali_shader_binary] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARM_rgba8] && (extensionStrLength == 12) && strncmp(extensionStr, "GL_ARM_rgba8", extensionStrLength) == 0) { tunisGL.support[GL_ARM_rgba8] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARM_shader_framebuffer_fetch] && (extensionStrLength == 31) && strncmp(extensionStr, "GL_ARM_shader_framebuffer_fetch", extensionStrLength) == 0) { tunisGL.support[GL_ARM_shader_framebuffer_fetch] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARM_shader_framebuffer_fetch_depth_stencil] && (extensionStrLength == 45) && strncmp(extensionStr, "GL_ARM_shader_framebuffer_fetch_depth_stencil", extensionStrLength) == 0) { tunisGL.support[GL_ARM_shader_framebuffer_fetch_depth_stencil] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_DMP_program_binary] && (extensionStrLength == 21) && strncmp(extensionStr, "GL_DMP_program_binary", extensionStrLength) == 0) { tunisGL.support[GL_DMP_program_binary] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_DMP_shader_binary] && (extensionStrLength == 20) && strncmp(extensionStr, "GL_DMP_shader_binary", extensionStrLength) == 0) { tunisGL.support[GL_DMP_shader_binary] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_EGL_image_array] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_EXT_EGL_image_array", extensionStrLength) == 0) { tunisGL.support[GL_EXT_EGL_image_array] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_YUV_target] && (extensionStrLength == 17) && strncmp(extensionStr, "GL_EXT_YUV_target", extensionStrLength) == 0) { tunisGL.support[GL_EXT_YUV_target] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_base_instance] && (extensionStrLength == 20) && strncmp(extensionStr, "GL_EXT_base_instance", extensionStrLength) == 0) { tunisGL.support[GL_EXT_base_instance] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_blend_func_extended] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_EXT_blend_func_extended", extensionStrLength) == 0) { tunisGL.support[GL_EXT_blend_func_extended] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_blend_minmax] && (extensionStrLength == 19) && strncmp(extensionStr, "GL_EXT_blend_minmax", extensionStrLength) == 0) { tunisGL.support[GL_EXT_blend_minmax] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_buffer_storage] && (extensionStrLength == 21) && strncmp(extensionStr, "GL_EXT_buffer_storage", extensionStrLength) == 0) { tunisGL.support[GL_EXT_buffer_storage] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_clear_texture] && (extensionStrLength == 20) && strncmp(extensionStr, "GL_EXT_clear_texture", extensionStrLength) == 0) { tunisGL.support[GL_EXT_clear_texture] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_clip_control] && (extensionStrLength == 19) && strncmp(extensionStr, "GL_EXT_clip_control", extensionStrLength) == 0) { tunisGL.support[GL_EXT_clip_control] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_clip_cull_distance] && (extensionStrLength == 25) && strncmp(extensionStr, "GL_EXT_clip_cull_distance", extensionStrLength) == 0) { tunisGL.support[GL_EXT_clip_cull_distance] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_color_buffer_float] && (extensionStrLength == 25) && strncmp(extensionStr, "GL_EXT_color_buffer_float", extensionStrLength) == 0) { tunisGL.support[GL_EXT_color_buffer_float] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_color_buffer_half_float] && (extensionStrLength == 30) && strncmp(extensionStr, "GL_EXT_color_buffer_half_float", extensionStrLength) == 0) { tunisGL.support[GL_EXT_color_buffer_half_float] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_conservative_depth] && (extensionStrLength == 25) && strncmp(extensionStr, "GL_EXT_conservative_depth", extensionStrLength) == 0) { tunisGL.support[GL_EXT_conservative_depth] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_copy_image] && (extensionStrLength == 17) && strncmp(extensionStr, "GL_EXT_copy_image", extensionStrLength) == 0) { tunisGL.support[GL_EXT_copy_image] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_discard_framebuffer] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_EXT_discard_framebuffer", extensionStrLength) == 0) { tunisGL.support[GL_EXT_discard_framebuffer] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_disjoint_timer_query] && (extensionStrLength == 27) && strncmp(extensionStr, "GL_EXT_disjoint_timer_query", extensionStrLength) == 0) { tunisGL.support[GL_EXT_disjoint_timer_query] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_draw_buffers] && (extensionStrLength == 19) && strncmp(extensionStr, "GL_EXT_draw_buffers", extensionStrLength) == 0) { tunisGL.support[GL_EXT_draw_buffers] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_draw_buffers_indexed] && (extensionStrLength == 27) && strncmp(extensionStr, "GL_EXT_draw_buffers_indexed", extensionStrLength) == 0) { tunisGL.support[GL_EXT_draw_buffers_indexed] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_draw_elements_base_vertex] && (extensionStrLength == 32) && strncmp(extensionStr, "GL_EXT_draw_elements_base_vertex", extensionStrLength) == 0) { tunisGL.support[GL_EXT_draw_elements_base_vertex] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_draw_transform_feedback] && (extensionStrLength == 30) && strncmp(extensionStr, "GL_EXT_draw_transform_feedback", extensionStrLength) == 0) { tunisGL.support[GL_EXT_draw_transform_feedback] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_external_buffer] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_EXT_external_buffer", extensionStrLength) == 0) { tunisGL.support[GL_EXT_external_buffer] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_float_blend] && (extensionStrLength == 18) && strncmp(extensionStr, "GL_EXT_float_blend", extensionStrLength) == 0) { tunisGL.support[GL_EXT_float_blend] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_geometry_point_size] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_EXT_geometry_point_size", extensionStrLength) == 0) { tunisGL.support[GL_EXT_geometry_point_size] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_geometry_shader] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_EXT_geometry_shader", extensionStrLength) == 0) { tunisGL.support[GL_EXT_geometry_shader] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_gpu_shader5] && (extensionStrLength == 18) && strncmp(extensionStr, "GL_EXT_gpu_shader5", extensionStrLength) == 0) { tunisGL.support[GL_EXT_gpu_shader5] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_instanced_arrays] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_EXT_instanced_arrays", extensionStrLength) == 0) { tunisGL.support[GL_EXT_instanced_arrays] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_map_buffer_range] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_EXT_map_buffer_range", extensionStrLength) == 0) { tunisGL.support[GL_EXT_map_buffer_range] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_memory_object] && (extensionStrLength == 20) && strncmp(extensionStr, "GL_EXT_memory_object", extensionStrLength) == 0) { tunisGL.support[GL_EXT_memory_object] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_memory_object_fd] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_EXT_memory_object_fd", extensionStrLength) == 0) { tunisGL.support[GL_EXT_memory_object_fd] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_memory_object_win32] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_EXT_memory_object_win32", extensionStrLength) == 0) { tunisGL.support[GL_EXT_memory_object_win32] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_multi_draw_arrays] && (extensionStrLength == 24) && strncmp(extensionStr, "GL_EXT_multi_draw_arrays", extensionStrLength) == 0) { tunisGL.support[GL_EXT_multi_draw_arrays] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_multi_draw_indirect] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_EXT_multi_draw_indirect", extensionStrLength) == 0) { tunisGL.support[GL_EXT_multi_draw_indirect] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_multisampled_compatibility] && (extensionStrLength == 33) && strncmp(extensionStr, "GL_EXT_multisampled_compatibility", extensionStrLength) == 0) { tunisGL.support[GL_EXT_multisampled_compatibility] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_multisampled_render_to_texture] && (extensionStrLength == 37) && strncmp(extensionStr, "GL_EXT_multisampled_render_to_texture", extensionStrLength) == 0) { tunisGL.support[GL_EXT_multisampled_render_to_texture] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_multiview_draw_buffers] && (extensionStrLength == 29) && strncmp(extensionStr, "GL_EXT_multiview_draw_buffers", extensionStrLength) == 0) { tunisGL.support[GL_EXT_multiview_draw_buffers] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_occlusion_query_boolean] && (extensionStrLength == 30) && strncmp(extensionStr, "GL_EXT_occlusion_query_boolean", extensionStrLength) == 0) { tunisGL.support[GL_EXT_occlusion_query_boolean] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_primitive_bounding_box] && (extensionStrLength == 29) && strncmp(extensionStr, "GL_EXT_primitive_bounding_box", extensionStrLength) == 0) { tunisGL.support[GL_EXT_primitive_bounding_box] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_protected_textures] && (extensionStrLength == 25) && strncmp(extensionStr, "GL_EXT_protected_textures", extensionStrLength) == 0) { tunisGL.support[GL_EXT_protected_textures] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_pvrtc_sRGB] && (extensionStrLength == 17) && strncmp(extensionStr, "GL_EXT_pvrtc_sRGB", extensionStrLength) == 0) { tunisGL.support[GL_EXT_pvrtc_sRGB] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_read_format_bgra] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_EXT_read_format_bgra", extensionStrLength) == 0) { tunisGL.support[GL_EXT_read_format_bgra] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_render_snorm] && (extensionStrLength == 19) && strncmp(extensionStr, "GL_EXT_render_snorm", extensionStrLength) == 0) { tunisGL.support[GL_EXT_render_snorm] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_robustness] && (extensionStrLength == 17) && strncmp(extensionStr, "GL_EXT_robustness", extensionStrLength) == 0) { tunisGL.support[GL_EXT_robustness] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_sRGB] && (extensionStrLength == 11) && strncmp(extensionStr, "GL_EXT_sRGB", extensionStrLength) == 0) { tunisGL.support[GL_EXT_sRGB] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_sRGB_write_control] && (extensionStrLength == 25) && strncmp(extensionStr, "GL_EXT_sRGB_write_control", extensionStrLength) == 0) { tunisGL.support[GL_EXT_sRGB_write_control] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_semaphore] && (extensionStrLength == 16) && strncmp(extensionStr, "GL_EXT_semaphore", extensionStrLength) == 0) { tunisGL.support[GL_EXT_semaphore] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_semaphore_fd] && (extensionStrLength == 19) && strncmp(extensionStr, "GL_EXT_semaphore_fd", extensionStrLength) == 0) { tunisGL.support[GL_EXT_semaphore_fd] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_semaphore_win32] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_EXT_semaphore_win32", extensionStrLength) == 0) { tunisGL.support[GL_EXT_semaphore_win32] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_shader_group_vote] && (extensionStrLength == 24) && strncmp(extensionStr, "GL_EXT_shader_group_vote", extensionStrLength) == 0) { tunisGL.support[GL_EXT_shader_group_vote] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_shader_implicit_conversions] && (extensionStrLength == 34) && strncmp(extensionStr, "GL_EXT_shader_implicit_conversions", extensionStrLength) == 0) { tunisGL.support[GL_EXT_shader_implicit_conversions] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_shader_io_blocks] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_EXT_shader_io_blocks", extensionStrLength) == 0) { tunisGL.support[GL_EXT_shader_io_blocks] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_shader_non_constant_global_initializers] && (extensionStrLength == 46) && strncmp(extensionStr, "GL_EXT_shader_non_constant_global_initializers", extensionStrLength) == 0) { tunisGL.support[GL_EXT_shader_non_constant_global_initializers] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_shader_pixel_local_storage] && (extensionStrLength == 33) && strncmp(extensionStr, "GL_EXT_shader_pixel_local_storage", extensionStrLength) == 0) { tunisGL.support[GL_EXT_shader_pixel_local_storage] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_shader_pixel_local_storage2] && (extensionStrLength == 34) && strncmp(extensionStr, "GL_EXT_shader_pixel_local_storage2", extensionStrLength) == 0) { tunisGL.support[GL_EXT_shader_pixel_local_storage2] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_shader_texture_lod] && (extensionStrLength == 25) && strncmp(extensionStr, "GL_EXT_shader_texture_lod", extensionStrLength) == 0) { tunisGL.support[GL_EXT_shader_texture_lod] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_shadow_samplers] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_EXT_shadow_samplers", extensionStrLength) == 0) { tunisGL.support[GL_EXT_shadow_samplers] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_sparse_texture] && (extensionStrLength == 21) && strncmp(extensionStr, "GL_EXT_sparse_texture", extensionStrLength) == 0) { tunisGL.support[GL_EXT_sparse_texture] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_sparse_texture2] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_EXT_sparse_texture2", extensionStrLength) == 0) { tunisGL.support[GL_EXT_sparse_texture2] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_tessellation_point_size] && (extensionStrLength == 30) && strncmp(extensionStr, "GL_EXT_tessellation_point_size", extensionStrLength) == 0) { tunisGL.support[GL_EXT_tessellation_point_size] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_tessellation_shader] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_EXT_tessellation_shader", extensionStrLength) == 0) { tunisGL.support[GL_EXT_tessellation_shader] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_texture_border_clamp] && (extensionStrLength == 27) && strncmp(extensionStr, "GL_EXT_texture_border_clamp", extensionStrLength) == 0) { tunisGL.support[GL_EXT_texture_border_clamp] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_texture_buffer] && (extensionStrLength == 21) && strncmp(extensionStr, "GL_EXT_texture_buffer", extensionStrLength) == 0) { tunisGL.support[GL_EXT_texture_buffer] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_texture_compression_astc_decode_mode] && (extensionStrLength == 43) && strncmp(extensionStr, "GL_EXT_texture_compression_astc_decode_mode", extensionStrLength) == 0) { tunisGL.support[GL_EXT_texture_compression_astc_decode_mode] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_texture_compression_bptc] && (extensionStrLength == 31) && strncmp(extensionStr, "GL_EXT_texture_compression_bptc", extensionStrLength) == 0) { tunisGL.support[GL_EXT_texture_compression_bptc] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_texture_compression_dxt1] && (extensionStrLength == 31) && strncmp(extensionStr, "GL_EXT_texture_compression_dxt1", extensionStrLength) == 0) { tunisGL.support[GL_EXT_texture_compression_dxt1] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_texture_compression_rgtc] && (extensionStrLength == 31) && strncmp(extensionStr, "GL_EXT_texture_compression_rgtc", extensionStrLength) == 0) { tunisGL.support[GL_EXT_texture_compression_rgtc] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_texture_compression_s3tc_srgb] && (extensionStrLength == 36) && strncmp(extensionStr, "GL_EXT_texture_compression_s3tc_srgb", extensionStrLength) == 0) { tunisGL.support[GL_EXT_texture_compression_s3tc_srgb] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_texture_cube_map_array] && (extensionStrLength == 29) && strncmp(extensionStr, "GL_EXT_texture_cube_map_array", extensionStrLength) == 0) { tunisGL.support[GL_EXT_texture_cube_map_array] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_texture_filter_anisotropic] && (extensionStrLength == 33) && strncmp(extensionStr, "GL_EXT_texture_filter_anisotropic", extensionStrLength) == 0) { tunisGL.support[GL_EXT_texture_filter_anisotropic] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_texture_format_BGRA8888] && (extensionStrLength == 30) && strncmp(extensionStr, "GL_EXT_texture_format_BGRA8888", extensionStrLength) == 0) { tunisGL.support[GL_EXT_texture_format_BGRA8888] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_texture_format_sRGB_override] && (extensionStrLength == 35) && strncmp(extensionStr, "GL_EXT_texture_format_sRGB_override", extensionStrLength) == 0) { tunisGL.support[GL_EXT_texture_format_sRGB_override] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_texture_lod_bias] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_EXT_texture_lod_bias", extensionStrLength) == 0) { tunisGL.support[GL_EXT_texture_lod_bias] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_texture_mirror_clamp_to_edge] && (extensionStrLength == 35) && strncmp(extensionStr, "GL_EXT_texture_mirror_clamp_to_edge", extensionStrLength) == 0) { tunisGL.support[GL_EXT_texture_mirror_clamp_to_edge] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_texture_norm16] && (extensionStrLength == 21) && strncmp(extensionStr, "GL_EXT_texture_norm16", extensionStrLength) == 0) { tunisGL.support[GL_EXT_texture_norm16] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_texture_rg] && (extensionStrLength == 17) && strncmp(extensionStr, "GL_EXT_texture_rg", extensionStrLength) == 0) { tunisGL.support[GL_EXT_texture_rg] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_texture_sRGB_R8] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_EXT_texture_sRGB_R8", extensionStrLength) == 0) { tunisGL.support[GL_EXT_texture_sRGB_R8] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_texture_sRGB_RG8] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_EXT_texture_sRGB_RG8", extensionStrLength) == 0) { tunisGL.support[GL_EXT_texture_sRGB_RG8] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_texture_storage] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_EXT_texture_storage", extensionStrLength) == 0) { tunisGL.support[GL_EXT_texture_storage] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_texture_type_2_10_10_10_REV] && (extensionStrLength == 34) && strncmp(extensionStr, "GL_EXT_texture_type_2_10_10_10_REV", extensionStrLength) == 0) { tunisGL.support[GL_EXT_texture_type_2_10_10_10_REV] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_texture_view] && (extensionStrLength == 19) && strncmp(extensionStr, "GL_EXT_texture_view", extensionStrLength) == 0) { tunisGL.support[GL_EXT_texture_view] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_unpack_subimage] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_EXT_unpack_subimage", extensionStrLength) == 0) { tunisGL.support[GL_EXT_unpack_subimage] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_win32_keyed_mutex] && (extensionStrLength == 24) && strncmp(extensionStr, "GL_EXT_win32_keyed_mutex", extensionStrLength) == 0) { tunisGL.support[GL_EXT_win32_keyed_mutex] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_FJ_shader_binary_GCCSO] && (extensionStrLength == 25) && strncmp(extensionStr, "GL_FJ_shader_binary_GCCSO", extensionStrLength) == 0) { tunisGL.support[GL_FJ_shader_binary_GCCSO] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_IMG_bindless_texture] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_IMG_bindless_texture", extensionStrLength) == 0) { tunisGL.support[GL_IMG_bindless_texture] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_IMG_framebuffer_downsample] && (extensionStrLength == 29) && strncmp(extensionStr, "GL_IMG_framebuffer_downsample", extensionStrLength) == 0) { tunisGL.support[GL_IMG_framebuffer_downsample] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_IMG_multisampled_render_to_texture] && (extensionStrLength == 37) && strncmp(extensionStr, "GL_IMG_multisampled_render_to_texture", extensionStrLength) == 0) { tunisGL.support[GL_IMG_multisampled_render_to_texture] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_IMG_program_binary] && (extensionStrLength == 21) && strncmp(extensionStr, "GL_IMG_program_binary", extensionStrLength) == 0) { tunisGL.support[GL_IMG_program_binary] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_IMG_read_format] && (extensionStrLength == 18) && strncmp(extensionStr, "GL_IMG_read_format", extensionStrLength) == 0) { tunisGL.support[GL_IMG_read_format] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_IMG_shader_binary] && (extensionStrLength == 20) && strncmp(extensionStr, "GL_IMG_shader_binary", extensionStrLength) == 0) { tunisGL.support[GL_IMG_shader_binary] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_IMG_texture_compression_pvrtc] && (extensionStrLength == 32) && strncmp(extensionStr, "GL_IMG_texture_compression_pvrtc", extensionStrLength) == 0) { tunisGL.support[GL_IMG_texture_compression_pvrtc] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_IMG_texture_compression_pvrtc2] && (extensionStrLength == 33) && strncmp(extensionStr, "GL_IMG_texture_compression_pvrtc2", extensionStrLength) == 0) { tunisGL.support[GL_IMG_texture_compression_pvrtc2] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_IMG_texture_env_enhanced_fixed_function] && (extensionStrLength == 42) && strncmp(extensionStr, "GL_IMG_texture_env_enhanced_fixed_function", extensionStrLength) == 0) { tunisGL.support[GL_IMG_texture_env_enhanced_fixed_function] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_IMG_texture_filter_cubic] && (extensionStrLength == 27) && strncmp(extensionStr, "GL_IMG_texture_filter_cubic", extensionStrLength) == 0) { tunisGL.support[GL_IMG_texture_filter_cubic] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_IMG_user_clip_plane] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_IMG_user_clip_plane", extensionStrLength) == 0) { tunisGL.support[GL_IMG_user_clip_plane] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_MESA_framebuffer_flip_y] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_MESA_framebuffer_flip_y", extensionStrLength) == 0) { tunisGL.support[GL_MESA_framebuffer_flip_y] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_MESA_program_binary_formats] && (extensionStrLength == 30) && strncmp(extensionStr, "GL_MESA_program_binary_formats", extensionStrLength) == 0) { tunisGL.support[GL_MESA_program_binary_formats] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_MESA_shader_integer_functions] && (extensionStrLength == 32) && strncmp(extensionStr, "GL_MESA_shader_integer_functions", extensionStrLength) == 0) { tunisGL.support[GL_MESA_shader_integer_functions] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NVX_blend_equation_advanced_multi_draw_buffers] && (extensionStrLength == 49) && strncmp(extensionStr, "GL_NVX_blend_equation_advanced_multi_draw_buffers", extensionStrLength) == 0) { tunisGL.support[GL_NVX_blend_equation_advanced_multi_draw_buffers] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_copy_buffer] && (extensionStrLength == 17) && strncmp(extensionStr, "GL_NV_copy_buffer", extensionStrLength) == 0) { tunisGL.support[GL_NV_copy_buffer] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_coverage_sample] && (extensionStrLength == 21) && strncmp(extensionStr, "GL_NV_coverage_sample", extensionStrLength) == 0) { tunisGL.support[GL_NV_coverage_sample] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_depth_nonlinear] && (extensionStrLength == 21) && strncmp(extensionStr, "GL_NV_depth_nonlinear", extensionStrLength) == 0) { tunisGL.support[GL_NV_depth_nonlinear] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_draw_buffers] && (extensionStrLength == 18) && strncmp(extensionStr, "GL_NV_draw_buffers", extensionStrLength) == 0) { tunisGL.support[GL_NV_draw_buffers] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_draw_instanced] && (extensionStrLength == 20) && strncmp(extensionStr, "GL_NV_draw_instanced", extensionStrLength) == 0) { tunisGL.support[GL_NV_draw_instanced] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_explicit_attrib_location] && (extensionStrLength == 30) && strncmp(extensionStr, "GL_NV_explicit_attrib_location", extensionStrLength) == 0) { tunisGL.support[GL_NV_explicit_attrib_location] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_fbo_color_attachments] && (extensionStrLength == 27) && strncmp(extensionStr, "GL_NV_fbo_color_attachments", extensionStrLength) == 0) { tunisGL.support[GL_NV_fbo_color_attachments] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_fence] && (extensionStrLength == 11) && strncmp(extensionStr, "GL_NV_fence", extensionStrLength) == 0) { tunisGL.support[GL_NV_fence] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_framebuffer_blit] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_NV_framebuffer_blit", extensionStrLength) == 0) { tunisGL.support[GL_NV_framebuffer_blit] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_framebuffer_multisample] && (extensionStrLength == 29) && strncmp(extensionStr, "GL_NV_framebuffer_multisample", extensionStrLength) == 0) { tunisGL.support[GL_NV_framebuffer_multisample] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_generate_mipmap_sRGB] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_NV_generate_mipmap_sRGB", extensionStrLength) == 0) { tunisGL.support[GL_NV_generate_mipmap_sRGB] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_image_formats] && (extensionStrLength == 19) && strncmp(extensionStr, "GL_NV_image_formats", extensionStrLength) == 0) { tunisGL.support[GL_NV_image_formats] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_instanced_arrays] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_NV_instanced_arrays", extensionStrLength) == 0) { tunisGL.support[GL_NV_instanced_arrays] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_non_square_matrices] && (extensionStrLength == 25) && strncmp(extensionStr, "GL_NV_non_square_matrices", extensionStrLength) == 0) { tunisGL.support[GL_NV_non_square_matrices] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_pixel_buffer_object] && (extensionStrLength == 25) && strncmp(extensionStr, "GL_NV_pixel_buffer_object", extensionStrLength) == 0) { tunisGL.support[GL_NV_pixel_buffer_object] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_polygon_mode] && (extensionStrLength == 18) && strncmp(extensionStr, "GL_NV_polygon_mode", extensionStrLength) == 0) { tunisGL.support[GL_NV_polygon_mode] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_read_buffer] && (extensionStrLength == 17) && strncmp(extensionStr, "GL_NV_read_buffer", extensionStrLength) == 0) { tunisGL.support[GL_NV_read_buffer] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_read_buffer_front] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_NV_read_buffer_front", extensionStrLength) == 0) { tunisGL.support[GL_NV_read_buffer_front] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_read_depth] && (extensionStrLength == 16) && strncmp(extensionStr, "GL_NV_read_depth", extensionStrLength) == 0) { tunisGL.support[GL_NV_read_depth] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_read_depth_stencil] && (extensionStrLength == 24) && strncmp(extensionStr, "GL_NV_read_depth_stencil", extensionStrLength) == 0) { tunisGL.support[GL_NV_read_depth_stencil] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_read_stencil] && (extensionStrLength == 18) && strncmp(extensionStr, "GL_NV_read_stencil", extensionStrLength) == 0) { tunisGL.support[GL_NV_read_stencil] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_sRGB_formats] && (extensionStrLength == 18) && strncmp(extensionStr, "GL_NV_sRGB_formats", extensionStrLength) == 0) { tunisGL.support[GL_NV_sRGB_formats] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_shader_noperspective_interpolation] && (extensionStrLength == 40) && strncmp(extensionStr, "GL_NV_shader_noperspective_interpolation", extensionStrLength) == 0) { tunisGL.support[GL_NV_shader_noperspective_interpolation] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_shadow_samplers_array] && (extensionStrLength == 27) && strncmp(extensionStr, "GL_NV_shadow_samplers_array", extensionStrLength) == 0) { tunisGL.support[GL_NV_shadow_samplers_array] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_shadow_samplers_cube] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_NV_shadow_samplers_cube", extensionStrLength) == 0) { tunisGL.support[GL_NV_shadow_samplers_cube] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_texture_border_clamp] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_NV_texture_border_clamp", extensionStrLength) == 0) { tunisGL.support[GL_NV_texture_border_clamp] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_texture_compression_s3tc_update] && (extensionStrLength == 37) && strncmp(extensionStr, "GL_NV_texture_compression_s3tc_update", extensionStrLength) == 0) { tunisGL.support[GL_NV_texture_compression_s3tc_update] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_texture_npot_2D_mipmap] && (extensionStrLength == 28) && strncmp(extensionStr, "GL_NV_texture_npot_2D_mipmap", extensionStrLength) == 0) { tunisGL.support[GL_NV_texture_npot_2D_mipmap] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_viewport_array] && (extensionStrLength == 20) && strncmp(extensionStr, "GL_NV_viewport_array", extensionStrLength) == 0) { tunisGL.support[GL_NV_viewport_array] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_OES_EGL_image] && (extensionStrLength == 16) && strncmp(extensionStr, "GL_OES_EGL_image", extensionStrLength) == 0) { tunisGL.support[GL_OES_EGL_image] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_OES_EGL_image_external] && (extensionStrLength == 25) && strncmp(extensionStr, "GL_OES_EGL_image_external", extensionStrLength) == 0) { tunisGL.support[GL_OES_EGL_image_external] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_OES_EGL_image_external_essl3] && (extensionStrLength == 31) && strncmp(extensionStr, "GL_OES_EGL_image_external_essl3", extensionStrLength) == 0) { tunisGL.support[GL_OES_EGL_image_external_essl3] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_OES_blend_equation_separate] && (extensionStrLength == 30) && strncmp(extensionStr, "GL_OES_blend_equation_separate", extensionStrLength) == 0) { tunisGL.support[GL_OES_blend_equation_separate] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_OES_blend_func_separate] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_OES_blend_func_separate", extensionStrLength) == 0) { tunisGL.support[GL_OES_blend_func_separate] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_OES_blend_subtract] && (extensionStrLength == 21) && strncmp(extensionStr, "GL_OES_blend_subtract", extensionStrLength) == 0) { tunisGL.support[GL_OES_blend_subtract] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_OES_byte_coordinates] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_OES_byte_coordinates", extensionStrLength) == 0) { tunisGL.support[GL_OES_byte_coordinates] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_OES_compressed_ETC1_RGB8_sub_texture] && (extensionStrLength == 39) && strncmp(extensionStr, "GL_OES_compressed_ETC1_RGB8_sub_texture", extensionStrLength) == 0) { tunisGL.support[GL_OES_compressed_ETC1_RGB8_sub_texture] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_OES_compressed_ETC1_RGB8_texture] && (extensionStrLength == 35) && strncmp(extensionStr, "GL_OES_compressed_ETC1_RGB8_texture", extensionStrLength) == 0) { tunisGL.support[GL_OES_compressed_ETC1_RGB8_texture] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_OES_compressed_paletted_texture] && (extensionStrLength == 34) && strncmp(extensionStr, "GL_OES_compressed_paletted_texture", extensionStrLength) == 0) { tunisGL.support[GL_OES_compressed_paletted_texture] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_OES_copy_image] && (extensionStrLength == 17) && strncmp(extensionStr, "GL_OES_copy_image", extensionStrLength) == 0) { tunisGL.support[GL_OES_copy_image] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_OES_depth24] && (extensionStrLength == 14) && strncmp(extensionStr, "GL_OES_depth24", extensionStrLength) == 0) { tunisGL.support[GL_OES_depth24] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_OES_depth32] && (extensionStrLength == 14) && strncmp(extensionStr, "GL_OES_depth32", extensionStrLength) == 0) { tunisGL.support[GL_OES_depth32] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_OES_depth_texture] && (extensionStrLength == 20) && strncmp(extensionStr, "GL_OES_depth_texture", extensionStrLength) == 0) { tunisGL.support[GL_OES_depth_texture] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_OES_draw_buffers_indexed] && (extensionStrLength == 27) && strncmp(extensionStr, "GL_OES_draw_buffers_indexed", extensionStrLength) == 0) { tunisGL.support[GL_OES_draw_buffers_indexed] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_OES_draw_elements_base_vertex] && (extensionStrLength == 32) && strncmp(extensionStr, "GL_OES_draw_elements_base_vertex", extensionStrLength) == 0) { tunisGL.support[GL_OES_draw_elements_base_vertex] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_OES_draw_texture] && (extensionStrLength == 19) && strncmp(extensionStr, "GL_OES_draw_texture", extensionStrLength) == 0) { tunisGL.support[GL_OES_draw_texture] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_OES_element_index_uint] && (extensionStrLength == 25) && strncmp(extensionStr, "GL_OES_element_index_uint", extensionStrLength) == 0) { tunisGL.support[GL_OES_element_index_uint] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_OES_extended_matrix_palette] && (extensionStrLength == 30) && strncmp(extensionStr, "GL_OES_extended_matrix_palette", extensionStrLength) == 0) { tunisGL.support[GL_OES_extended_matrix_palette] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_OES_fbo_render_mipmap] && (extensionStrLength == 24) && strncmp(extensionStr, "GL_OES_fbo_render_mipmap", extensionStrLength) == 0) { tunisGL.support[GL_OES_fbo_render_mipmap] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_OES_fixed_point] && (extensionStrLength == 18) && strncmp(extensionStr, "GL_OES_fixed_point", extensionStrLength) == 0) { tunisGL.support[GL_OES_fixed_point] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_OES_fragment_precision_high] && (extensionStrLength == 30) && strncmp(extensionStr, "GL_OES_fragment_precision_high", extensionStrLength) == 0) { tunisGL.support[GL_OES_fragment_precision_high] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_OES_framebuffer_object] && (extensionStrLength == 25) && strncmp(extensionStr, "GL_OES_framebuffer_object", extensionStrLength) == 0) { tunisGL.support[GL_OES_framebuffer_object] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_OES_geometry_point_size] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_OES_geometry_point_size", extensionStrLength) == 0) { tunisGL.support[GL_OES_geometry_point_size] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_OES_geometry_shader] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_OES_geometry_shader", extensionStrLength) == 0) { tunisGL.support[GL_OES_geometry_shader] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_OES_get_program_binary] && (extensionStrLength == 25) && strncmp(extensionStr, "GL_OES_get_program_binary", extensionStrLength) == 0) { tunisGL.support[GL_OES_get_program_binary] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_OES_gpu_shader5] && (extensionStrLength == 18) && strncmp(extensionStr, "GL_OES_gpu_shader5", extensionStrLength) == 0) { tunisGL.support[GL_OES_gpu_shader5] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_OES_mapbuffer] && (extensionStrLength == 16) && strncmp(extensionStr, "GL_OES_mapbuffer", extensionStrLength) == 0) { tunisGL.support[GL_OES_mapbuffer] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_OES_matrix_get] && (extensionStrLength == 17) && strncmp(extensionStr, "GL_OES_matrix_get", extensionStrLength) == 0) { tunisGL.support[GL_OES_matrix_get] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_OES_matrix_palette] && (extensionStrLength == 21) && strncmp(extensionStr, "GL_OES_matrix_palette", extensionStrLength) == 0) { tunisGL.support[GL_OES_matrix_palette] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_OES_packed_depth_stencil] && (extensionStrLength == 27) && strncmp(extensionStr, "GL_OES_packed_depth_stencil", extensionStrLength) == 0) { tunisGL.support[GL_OES_packed_depth_stencil] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_OES_point_size_array] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_OES_point_size_array", extensionStrLength) == 0) { tunisGL.support[GL_OES_point_size_array] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_OES_point_sprite] && (extensionStrLength == 19) && strncmp(extensionStr, "GL_OES_point_sprite", extensionStrLength) == 0) { tunisGL.support[GL_OES_point_sprite] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_OES_primitive_bounding_box] && (extensionStrLength == 29) && strncmp(extensionStr, "GL_OES_primitive_bounding_box", extensionStrLength) == 0) { tunisGL.support[GL_OES_primitive_bounding_box] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_OES_query_matrix] && (extensionStrLength == 19) && strncmp(extensionStr, "GL_OES_query_matrix", extensionStrLength) == 0) { tunisGL.support[GL_OES_query_matrix] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_OES_read_format] && (extensionStrLength == 18) && strncmp(extensionStr, "GL_OES_read_format", extensionStrLength) == 0) { tunisGL.support[GL_OES_read_format] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_OES_required_internalformat] && (extensionStrLength == 30) && strncmp(extensionStr, "GL_OES_required_internalformat", extensionStrLength) == 0) { tunisGL.support[GL_OES_required_internalformat] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_OES_rgb8_rgba8] && (extensionStrLength == 17) && strncmp(extensionStr, "GL_OES_rgb8_rgba8", extensionStrLength) == 0) { tunisGL.support[GL_OES_rgb8_rgba8] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_OES_sample_shading] && (extensionStrLength == 21) && strncmp(extensionStr, "GL_OES_sample_shading", extensionStrLength) == 0) { tunisGL.support[GL_OES_sample_shading] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_OES_sample_variables] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_OES_sample_variables", extensionStrLength) == 0) { tunisGL.support[GL_OES_sample_variables] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_OES_shader_image_atomic] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_OES_shader_image_atomic", extensionStrLength) == 0) { tunisGL.support[GL_OES_shader_image_atomic] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_OES_shader_io_blocks] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_OES_shader_io_blocks", extensionStrLength) == 0) { tunisGL.support[GL_OES_shader_io_blocks] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_OES_shader_multisample_interpolation] && (extensionStrLength == 39) && strncmp(extensionStr, "GL_OES_shader_multisample_interpolation", extensionStrLength) == 0) { tunisGL.support[GL_OES_shader_multisample_interpolation] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_OES_single_precision] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_OES_single_precision", extensionStrLength) == 0) { tunisGL.support[GL_OES_single_precision] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_OES_standard_derivatives] && (extensionStrLength == 27) && strncmp(extensionStr, "GL_OES_standard_derivatives", extensionStrLength) == 0) { tunisGL.support[GL_OES_standard_derivatives] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_OES_stencil1] && (extensionStrLength == 15) && strncmp(extensionStr, "GL_OES_stencil1", extensionStrLength) == 0) { tunisGL.support[GL_OES_stencil1] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_OES_stencil4] && (extensionStrLength == 15) && strncmp(extensionStr, "GL_OES_stencil4", extensionStrLength) == 0) { tunisGL.support[GL_OES_stencil4] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_OES_stencil8] && (extensionStrLength == 15) && strncmp(extensionStr, "GL_OES_stencil8", extensionStrLength) == 0) { tunisGL.support[GL_OES_stencil8] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_OES_stencil_wrap] && (extensionStrLength == 19) && strncmp(extensionStr, "GL_OES_stencil_wrap", extensionStrLength) == 0) { tunisGL.support[GL_OES_stencil_wrap] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_OES_surfaceless_context] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_OES_surfaceless_context", extensionStrLength) == 0) { tunisGL.support[GL_OES_surfaceless_context] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_OES_tessellation_point_size] && (extensionStrLength == 30) && strncmp(extensionStr, "GL_OES_tessellation_point_size", extensionStrLength) == 0) { tunisGL.support[GL_OES_tessellation_point_size] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_OES_tessellation_shader] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_OES_tessellation_shader", extensionStrLength) == 0) { tunisGL.support[GL_OES_tessellation_shader] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_OES_texture_3D] && (extensionStrLength == 17) && strncmp(extensionStr, "GL_OES_texture_3D", extensionStrLength) == 0) { tunisGL.support[GL_OES_texture_3D] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_OES_texture_border_clamp] && (extensionStrLength == 27) && strncmp(extensionStr, "GL_OES_texture_border_clamp", extensionStrLength) == 0) { tunisGL.support[GL_OES_texture_border_clamp] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_OES_texture_buffer] && (extensionStrLength == 21) && strncmp(extensionStr, "GL_OES_texture_buffer", extensionStrLength) == 0) { tunisGL.support[GL_OES_texture_buffer] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_OES_texture_compression_astc] && (extensionStrLength == 31) && strncmp(extensionStr, "GL_OES_texture_compression_astc", extensionStrLength) == 0) { tunisGL.support[GL_OES_texture_compression_astc] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_OES_texture_cube_map] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_OES_texture_cube_map", extensionStrLength) == 0) { tunisGL.support[GL_OES_texture_cube_map] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_OES_texture_cube_map_array] && (extensionStrLength == 29) && strncmp(extensionStr, "GL_OES_texture_cube_map_array", extensionStrLength) == 0) { tunisGL.support[GL_OES_texture_cube_map_array] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_OES_texture_env_crossbar] && (extensionStrLength == 27) && strncmp(extensionStr, "GL_OES_texture_env_crossbar", extensionStrLength) == 0) { tunisGL.support[GL_OES_texture_env_crossbar] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_OES_texture_float] && (extensionStrLength == 20) && strncmp(extensionStr, "GL_OES_texture_float", extensionStrLength) == 0) { tunisGL.support[GL_OES_texture_float] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_OES_texture_float_linear] && (extensionStrLength == 27) && strncmp(extensionStr, "GL_OES_texture_float_linear", extensionStrLength) == 0) { tunisGL.support[GL_OES_texture_float_linear] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_OES_texture_half_float] && (extensionStrLength == 25) && strncmp(extensionStr, "GL_OES_texture_half_float", extensionStrLength) == 0) { tunisGL.support[GL_OES_texture_half_float] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_OES_texture_half_float_linear] && (extensionStrLength == 32) && strncmp(extensionStr, "GL_OES_texture_half_float_linear", extensionStrLength) == 0) { tunisGL.support[GL_OES_texture_half_float_linear] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_OES_texture_mirrored_repeat] && (extensionStrLength == 30) && strncmp(extensionStr, "GL_OES_texture_mirrored_repeat", extensionStrLength) == 0) { tunisGL.support[GL_OES_texture_mirrored_repeat] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_OES_texture_npot] && (extensionStrLength == 19) && strncmp(extensionStr, "GL_OES_texture_npot", extensionStrLength) == 0) { tunisGL.support[GL_OES_texture_npot] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_OES_texture_stencil8] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_OES_texture_stencil8", extensionStrLength) == 0) { tunisGL.support[GL_OES_texture_stencil8] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_OES_texture_storage_multisample_2d_array] && (extensionStrLength == 43) && strncmp(extensionStr, "GL_OES_texture_storage_multisample_2d_array", extensionStrLength) == 0) { tunisGL.support[GL_OES_texture_storage_multisample_2d_array] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_OES_texture_view] && (extensionStrLength == 19) && strncmp(extensionStr, "GL_OES_texture_view", extensionStrLength) == 0) { tunisGL.support[GL_OES_texture_view] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_OES_vertex_array_object] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_OES_vertex_array_object", extensionStrLength) == 0) { tunisGL.support[GL_OES_vertex_array_object] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_OES_vertex_half_float] && (extensionStrLength == 24) && strncmp(extensionStr, "GL_OES_vertex_half_float", extensionStrLength) == 0) { tunisGL.support[GL_OES_vertex_half_float] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_OES_vertex_type_10_10_10_2] && (extensionStrLength == 29) && strncmp(extensionStr, "GL_OES_vertex_type_10_10_10_2", extensionStrLength) == 0) { tunisGL.support[GL_OES_vertex_type_10_10_10_2] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_OES_viewport_array] && (extensionStrLength == 21) && strncmp(extensionStr, "GL_OES_viewport_array", extensionStrLength) == 0) { tunisGL.support[GL_OES_viewport_array] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_OVR_multiview_multisampled_render_to_texture] && (extensionStrLength == 47) && strncmp(extensionStr, "GL_OVR_multiview_multisampled_render_to_texture", extensionStrLength) == 0) { tunisGL.support[GL_OVR_multiview_multisampled_render_to_texture] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_QCOM_alpha_test] && (extensionStrLength == 18) && strncmp(extensionStr, "GL_QCOM_alpha_test", extensionStrLength) == 0) { tunisGL.support[GL_QCOM_alpha_test] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_QCOM_binning_control] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_QCOM_binning_control", extensionStrLength) == 0) { tunisGL.support[GL_QCOM_binning_control] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_QCOM_driver_control] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_QCOM_driver_control", extensionStrLength) == 0) { tunisGL.support[GL_QCOM_driver_control] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_QCOM_extended_get] && (extensionStrLength == 20) && strncmp(extensionStr, "GL_QCOM_extended_get", extensionStrLength) == 0) { tunisGL.support[GL_QCOM_extended_get] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_QCOM_extended_get2] && (extensionStrLength == 21) && strncmp(extensionStr, "GL_QCOM_extended_get2", extensionStrLength) == 0) { tunisGL.support[GL_QCOM_extended_get2] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_QCOM_framebuffer_foveated] && (extensionStrLength == 28) && strncmp(extensionStr, "GL_QCOM_framebuffer_foveated", extensionStrLength) == 0) { tunisGL.support[GL_QCOM_framebuffer_foveated] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_QCOM_perfmon_global_mode] && (extensionStrLength == 27) && strncmp(extensionStr, "GL_QCOM_perfmon_global_mode", extensionStrLength) == 0) { tunisGL.support[GL_QCOM_perfmon_global_mode] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_QCOM_shader_framebuffer_fetch_noncoherent] && (extensionStrLength == 44) && strncmp(extensionStr, "GL_QCOM_shader_framebuffer_fetch_noncoherent", extensionStrLength) == 0) { tunisGL.support[GL_QCOM_shader_framebuffer_fetch_noncoherent] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_QCOM_shader_framebuffer_fetch_rate] && (extensionStrLength == 37) && strncmp(extensionStr, "GL_QCOM_shader_framebuffer_fetch_rate", extensionStrLength) == 0) { tunisGL.support[GL_QCOM_shader_framebuffer_fetch_rate] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_QCOM_texture_foveated] && (extensionStrLength == 24) && strncmp(extensionStr, "GL_QCOM_texture_foveated", extensionStrLength) == 0) { tunisGL.support[GL_QCOM_texture_foveated] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_QCOM_texture_foveated_subsampled_layout] && (extensionStrLength == 42) && strncmp(extensionStr, "GL_QCOM_texture_foveated_subsampled_layout", extensionStrLength) == 0) { tunisGL.support[GL_QCOM_texture_foveated_subsampled_layout] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_QCOM_tiled_rendering] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_QCOM_tiled_rendering", extensionStrLength) == 0) { tunisGL.support[GL_QCOM_tiled_rendering] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_QCOM_writeonly_rendering] && (extensionStrLength == 27) && strncmp(extensionStr, "GL_QCOM_writeonly_rendering", extensionStrLength) == 0) { tunisGL.support[GL_QCOM_writeonly_rendering] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_VIV_shader_binary] && (extensionStrLength == 20) && strncmp(extensionStr, "GL_VIV_shader_binary", extensionStrLength) == 0) { tunisGL.support[GL_VIV_shader_binary] = KHRONOS_TRUE; return; }

        /*
         * Discovered a bug in Qualcomm Adreno 200 OpenGL ES driver, where
         * these three extensions are literally fused together.
         */
        if (!(tunisGL.support[GL_EXT_debug_label] && tunisGL.support[GL_EXT_debug_marker] && tunisGL.support[GL_EXT_robustness]) &&
            (extensionStrLength == 54) && strncmp(extensionStr, "GL_EXT_debug_labelGL_EXT_debug_markerGL_EXT_robustness", extensionStrLength) == 0)
        {
            tunisGL.support[GL_EXT_debug_label] = KHRONOS_TRUE;
            tunisGL.support[GL_EXT_debug_marker] = KHRONOS_TRUE;
            tunisGL.support[GL_EXT_robustness] = KHRONOS_TRUE;
            return;
        }
    } else {
        if (!tunisGL.support[GL_3DFX_multisample] && (extensionStrLength == 19) && strncmp(extensionStr, "GL_3DFX_multisample", extensionStrLength) == 0) { tunisGL.support[GL_3DFX_multisample] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_3DFX_tbuffer] && (extensionStrLength == 15) && strncmp(extensionStr, "GL_3DFX_tbuffer", extensionStrLength) == 0) { tunisGL.support[GL_3DFX_tbuffer] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_3DFX_texture_compression_FXT1] && (extensionStrLength == 32) && strncmp(extensionStr, "GL_3DFX_texture_compression_FXT1", extensionStrLength) == 0) { tunisGL.support[GL_3DFX_texture_compression_FXT1] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_AMD_blend_minmax_factor] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_AMD_blend_minmax_factor", extensionStrLength) == 0) { tunisGL.support[GL_AMD_blend_minmax_factor] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_AMD_conservative_depth] && (extensionStrLength == 25) && strncmp(extensionStr, "GL_AMD_conservative_depth", extensionStrLength) == 0) { tunisGL.support[GL_AMD_conservative_depth] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_AMD_debug_output] && (extensionStrLength == 19) && strncmp(extensionStr, "GL_AMD_debug_output", extensionStrLength) == 0) { tunisGL.support[GL_AMD_debug_output] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_AMD_depth_clamp_separate] && (extensionStrLength == 27) && strncmp(extensionStr, "GL_AMD_depth_clamp_separate", extensionStrLength) == 0) { tunisGL.support[GL_AMD_depth_clamp_separate] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_AMD_draw_buffers_blend] && (extensionStrLength == 25) && strncmp(extensionStr, "GL_AMD_draw_buffers_blend", extensionStrLength) == 0) { tunisGL.support[GL_AMD_draw_buffers_blend] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_AMD_framebuffer_multisample_advanced] && (extensionStrLength == 39) && strncmp(extensionStr, "GL_AMD_framebuffer_multisample_advanced", extensionStrLength) == 0) { tunisGL.support[GL_AMD_framebuffer_multisample_advanced] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_AMD_framebuffer_sample_positions] && (extensionStrLength == 35) && strncmp(extensionStr, "GL_AMD_framebuffer_sample_positions", extensionStrLength) == 0) { tunisGL.support[GL_AMD_framebuffer_sample_positions] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_AMD_gcn_shader] && (extensionStrLength == 17) && strncmp(extensionStr, "GL_AMD_gcn_shader", extensionStrLength) == 0) { tunisGL.support[GL_AMD_gcn_shader] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_AMD_gpu_shader_half_float] && (extensionStrLength == 28) && strncmp(extensionStr, "GL_AMD_gpu_shader_half_float", extensionStrLength) == 0) { tunisGL.support[GL_AMD_gpu_shader_half_float] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_AMD_gpu_shader_int16] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_AMD_gpu_shader_int16", extensionStrLength) == 0) { tunisGL.support[GL_AMD_gpu_shader_int16] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_AMD_gpu_shader_int64] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_AMD_gpu_shader_int64", extensionStrLength) == 0) { tunisGL.support[GL_AMD_gpu_shader_int64] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_AMD_interleaved_elements] && (extensionStrLength == 27) && strncmp(extensionStr, "GL_AMD_interleaved_elements", extensionStrLength) == 0) { tunisGL.support[GL_AMD_interleaved_elements] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_AMD_multi_draw_indirect] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_AMD_multi_draw_indirect", extensionStrLength) == 0) { tunisGL.support[GL_AMD_multi_draw_indirect] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_AMD_name_gen_delete] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_AMD_name_gen_delete", extensionStrLength) == 0) { tunisGL.support[GL_AMD_name_gen_delete] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_AMD_occlusion_query_event] && (extensionStrLength == 28) && strncmp(extensionStr, "GL_AMD_occlusion_query_event", extensionStrLength) == 0) { tunisGL.support[GL_AMD_occlusion_query_event] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_AMD_performance_monitor] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_AMD_performance_monitor", extensionStrLength) == 0) { tunisGL.support[GL_AMD_performance_monitor] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_AMD_pinned_memory] && (extensionStrLength == 20) && strncmp(extensionStr, "GL_AMD_pinned_memory", extensionStrLength) == 0) { tunisGL.support[GL_AMD_pinned_memory] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_AMD_query_buffer_object] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_AMD_query_buffer_object", extensionStrLength) == 0) { tunisGL.support[GL_AMD_query_buffer_object] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_AMD_sample_positions] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_AMD_sample_positions", extensionStrLength) == 0) { tunisGL.support[GL_AMD_sample_positions] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_AMD_seamless_cubemap_per_texture] && (extensionStrLength == 35) && strncmp(extensionStr, "GL_AMD_seamless_cubemap_per_texture", extensionStrLength) == 0) { tunisGL.support[GL_AMD_seamless_cubemap_per_texture] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_AMD_shader_atomic_counter_ops] && (extensionStrLength == 32) && strncmp(extensionStr, "GL_AMD_shader_atomic_counter_ops", extensionStrLength) == 0) { tunisGL.support[GL_AMD_shader_atomic_counter_ops] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_AMD_shader_ballot] && (extensionStrLength == 20) && strncmp(extensionStr, "GL_AMD_shader_ballot", extensionStrLength) == 0) { tunisGL.support[GL_AMD_shader_ballot] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_AMD_shader_explicit_vertex_parameter] && (extensionStrLength == 39) && strncmp(extensionStr, "GL_AMD_shader_explicit_vertex_parameter", extensionStrLength) == 0) { tunisGL.support[GL_AMD_shader_explicit_vertex_parameter] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_AMD_shader_gpu_shader_half_float_fetch] && (extensionStrLength == 41) && strncmp(extensionStr, "GL_AMD_shader_gpu_shader_half_float_fetch", extensionStrLength) == 0) { tunisGL.support[GL_AMD_shader_gpu_shader_half_float_fetch] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_AMD_shader_image_load_store_lod] && (extensionStrLength == 34) && strncmp(extensionStr, "GL_AMD_shader_image_load_store_lod", extensionStrLength) == 0) { tunisGL.support[GL_AMD_shader_image_load_store_lod] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_AMD_shader_stencil_export] && (extensionStrLength == 28) && strncmp(extensionStr, "GL_AMD_shader_stencil_export", extensionStrLength) == 0) { tunisGL.support[GL_AMD_shader_stencil_export] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_AMD_shader_trinary_minmax] && (extensionStrLength == 28) && strncmp(extensionStr, "GL_AMD_shader_trinary_minmax", extensionStrLength) == 0) { tunisGL.support[GL_AMD_shader_trinary_minmax] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_AMD_sparse_texture] && (extensionStrLength == 21) && strncmp(extensionStr, "GL_AMD_sparse_texture", extensionStrLength) == 0) { tunisGL.support[GL_AMD_sparse_texture] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_AMD_stencil_operation_extended] && (extensionStrLength == 33) && strncmp(extensionStr, "GL_AMD_stencil_operation_extended", extensionStrLength) == 0) { tunisGL.support[GL_AMD_stencil_operation_extended] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_AMD_texture_gather_bias_lod] && (extensionStrLength == 30) && strncmp(extensionStr, "GL_AMD_texture_gather_bias_lod", extensionStrLength) == 0) { tunisGL.support[GL_AMD_texture_gather_bias_lod] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_AMD_texture_texture4] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_AMD_texture_texture4", extensionStrLength) == 0) { tunisGL.support[GL_AMD_texture_texture4] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_AMD_transform_feedback3_lines_triangles] && (extensionStrLength == 42) && strncmp(extensionStr, "GL_AMD_transform_feedback3_lines_triangles", extensionStrLength) == 0) { tunisGL.support[GL_AMD_transform_feedback3_lines_triangles] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_AMD_transform_feedback4] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_AMD_transform_feedback4", extensionStrLength) == 0) { tunisGL.support[GL_AMD_transform_feedback4] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_AMD_vertex_shader_layer] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_AMD_vertex_shader_layer", extensionStrLength) == 0) { tunisGL.support[GL_AMD_vertex_shader_layer] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_AMD_vertex_shader_tessellator] && (extensionStrLength == 32) && strncmp(extensionStr, "GL_AMD_vertex_shader_tessellator", extensionStrLength) == 0) { tunisGL.support[GL_AMD_vertex_shader_tessellator] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_AMD_vertex_shader_viewport_index] && (extensionStrLength == 35) && strncmp(extensionStr, "GL_AMD_vertex_shader_viewport_index", extensionStrLength) == 0) { tunisGL.support[GL_AMD_vertex_shader_viewport_index] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_APPLE_aux_depth_stencil] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_APPLE_aux_depth_stencil", extensionStrLength) == 0) { tunisGL.support[GL_APPLE_aux_depth_stencil] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_APPLE_client_storage] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_APPLE_client_storage", extensionStrLength) == 0) { tunisGL.support[GL_APPLE_client_storage] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_APPLE_element_array] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_APPLE_element_array", extensionStrLength) == 0) { tunisGL.support[GL_APPLE_element_array] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_APPLE_fence] && (extensionStrLength == 14) && strncmp(extensionStr, "GL_APPLE_fence", extensionStrLength) == 0) { tunisGL.support[GL_APPLE_fence] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_APPLE_float_pixels] && (extensionStrLength == 21) && strncmp(extensionStr, "GL_APPLE_float_pixels", extensionStrLength) == 0) { tunisGL.support[GL_APPLE_float_pixels] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_APPLE_flush_buffer_range] && (extensionStrLength == 27) && strncmp(extensionStr, "GL_APPLE_flush_buffer_range", extensionStrLength) == 0) { tunisGL.support[GL_APPLE_flush_buffer_range] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_APPLE_object_purgeable] && (extensionStrLength == 25) && strncmp(extensionStr, "GL_APPLE_object_purgeable", extensionStrLength) == 0) { tunisGL.support[GL_APPLE_object_purgeable] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_APPLE_rgb_422] && (extensionStrLength == 16) && strncmp(extensionStr, "GL_APPLE_rgb_422", extensionStrLength) == 0) { tunisGL.support[GL_APPLE_rgb_422] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_APPLE_row_bytes] && (extensionStrLength == 18) && strncmp(extensionStr, "GL_APPLE_row_bytes", extensionStrLength) == 0) { tunisGL.support[GL_APPLE_row_bytes] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_APPLE_specular_vector] && (extensionStrLength == 24) && strncmp(extensionStr, "GL_APPLE_specular_vector", extensionStrLength) == 0) { tunisGL.support[GL_APPLE_specular_vector] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_APPLE_texture_range] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_APPLE_texture_range", extensionStrLength) == 0) { tunisGL.support[GL_APPLE_texture_range] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_APPLE_transform_hint] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_APPLE_transform_hint", extensionStrLength) == 0) { tunisGL.support[GL_APPLE_transform_hint] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_APPLE_vertex_array_object] && (extensionStrLength == 28) && strncmp(extensionStr, "GL_APPLE_vertex_array_object", extensionStrLength) == 0) { tunisGL.support[GL_APPLE_vertex_array_object] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_APPLE_vertex_array_range] && (extensionStrLength == 27) && strncmp(extensionStr, "GL_APPLE_vertex_array_range", extensionStrLength) == 0) { tunisGL.support[GL_APPLE_vertex_array_range] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_APPLE_vertex_program_evaluators] && (extensionStrLength == 34) && strncmp(extensionStr, "GL_APPLE_vertex_program_evaluators", extensionStrLength) == 0) { tunisGL.support[GL_APPLE_vertex_program_evaluators] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_APPLE_ycbcr_422] && (extensionStrLength == 18) && strncmp(extensionStr, "GL_APPLE_ycbcr_422", extensionStrLength) == 0) { tunisGL.support[GL_APPLE_ycbcr_422] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_ES2_compatibility] && (extensionStrLength == 24) && strncmp(extensionStr, "GL_ARB_ES2_compatibility", extensionStrLength) == 0) { tunisGL.support[GL_ARB_ES2_compatibility] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_ES3_1_compatibility] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_ARB_ES3_1_compatibility", extensionStrLength) == 0) { tunisGL.support[GL_ARB_ES3_1_compatibility] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_ES3_2_compatibility] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_ARB_ES3_2_compatibility", extensionStrLength) == 0) { tunisGL.support[GL_ARB_ES3_2_compatibility] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_ES3_compatibility] && (extensionStrLength == 24) && strncmp(extensionStr, "GL_ARB_ES3_compatibility", extensionStrLength) == 0) { tunisGL.support[GL_ARB_ES3_compatibility] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_arrays_of_arrays] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_ARB_arrays_of_arrays", extensionStrLength) == 0) { tunisGL.support[GL_ARB_arrays_of_arrays] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_base_instance] && (extensionStrLength == 20) && strncmp(extensionStr, "GL_ARB_base_instance", extensionStrLength) == 0) { tunisGL.support[GL_ARB_base_instance] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_bindless_texture] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_ARB_bindless_texture", extensionStrLength) == 0) { tunisGL.support[GL_ARB_bindless_texture] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_blend_func_extended] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_ARB_blend_func_extended", extensionStrLength) == 0) { tunisGL.support[GL_ARB_blend_func_extended] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_buffer_storage] && (extensionStrLength == 21) && strncmp(extensionStr, "GL_ARB_buffer_storage", extensionStrLength) == 0) { tunisGL.support[GL_ARB_buffer_storage] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_cl_event] && (extensionStrLength == 15) && strncmp(extensionStr, "GL_ARB_cl_event", extensionStrLength) == 0) { tunisGL.support[GL_ARB_cl_event] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_clear_buffer_object] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_ARB_clear_buffer_object", extensionStrLength) == 0) { tunisGL.support[GL_ARB_clear_buffer_object] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_clear_texture] && (extensionStrLength == 20) && strncmp(extensionStr, "GL_ARB_clear_texture", extensionStrLength) == 0) { tunisGL.support[GL_ARB_clear_texture] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_clip_control] && (extensionStrLength == 19) && strncmp(extensionStr, "GL_ARB_clip_control", extensionStrLength) == 0) { tunisGL.support[GL_ARB_clip_control] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_color_buffer_float] && (extensionStrLength == 25) && strncmp(extensionStr, "GL_ARB_color_buffer_float", extensionStrLength) == 0) { tunisGL.support[GL_ARB_color_buffer_float] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_compatibility] && (extensionStrLength == 20) && strncmp(extensionStr, "GL_ARB_compatibility", extensionStrLength) == 0) { tunisGL.support[GL_ARB_compatibility] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_compressed_texture_pixel_storage] && (extensionStrLength == 39) && strncmp(extensionStr, "GL_ARB_compressed_texture_pixel_storage", extensionStrLength) == 0) { tunisGL.support[GL_ARB_compressed_texture_pixel_storage] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_compute_shader] && (extensionStrLength == 21) && strncmp(extensionStr, "GL_ARB_compute_shader", extensionStrLength) == 0) { tunisGL.support[GL_ARB_compute_shader] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_compute_variable_group_size] && (extensionStrLength == 34) && strncmp(extensionStr, "GL_ARB_compute_variable_group_size", extensionStrLength) == 0) { tunisGL.support[GL_ARB_compute_variable_group_size] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_conditional_render_inverted] && (extensionStrLength == 34) && strncmp(extensionStr, "GL_ARB_conditional_render_inverted", extensionStrLength) == 0) { tunisGL.support[GL_ARB_conditional_render_inverted] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_conservative_depth] && (extensionStrLength == 25) && strncmp(extensionStr, "GL_ARB_conservative_depth", extensionStrLength) == 0) { tunisGL.support[GL_ARB_conservative_depth] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_copy_buffer] && (extensionStrLength == 18) && strncmp(extensionStr, "GL_ARB_copy_buffer", extensionStrLength) == 0) { tunisGL.support[GL_ARB_copy_buffer] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_copy_image] && (extensionStrLength == 17) && strncmp(extensionStr, "GL_ARB_copy_image", extensionStrLength) == 0) { tunisGL.support[GL_ARB_copy_image] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_cull_distance] && (extensionStrLength == 20) && strncmp(extensionStr, "GL_ARB_cull_distance", extensionStrLength) == 0) { tunisGL.support[GL_ARB_cull_distance] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_debug_output] && (extensionStrLength == 19) && strncmp(extensionStr, "GL_ARB_debug_output", extensionStrLength) == 0) { tunisGL.support[GL_ARB_debug_output] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_depth_buffer_float] && (extensionStrLength == 25) && strncmp(extensionStr, "GL_ARB_depth_buffer_float", extensionStrLength) == 0) { tunisGL.support[GL_ARB_depth_buffer_float] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_depth_clamp] && (extensionStrLength == 18) && strncmp(extensionStr, "GL_ARB_depth_clamp", extensionStrLength) == 0) { tunisGL.support[GL_ARB_depth_clamp] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_depth_texture] && (extensionStrLength == 20) && strncmp(extensionStr, "GL_ARB_depth_texture", extensionStrLength) == 0) { tunisGL.support[GL_ARB_depth_texture] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_derivative_control] && (extensionStrLength == 25) && strncmp(extensionStr, "GL_ARB_derivative_control", extensionStrLength) == 0) { tunisGL.support[GL_ARB_derivative_control] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_direct_state_access] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_ARB_direct_state_access", extensionStrLength) == 0) { tunisGL.support[GL_ARB_direct_state_access] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_draw_buffers] && (extensionStrLength == 19) && strncmp(extensionStr, "GL_ARB_draw_buffers", extensionStrLength) == 0) { tunisGL.support[GL_ARB_draw_buffers] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_draw_buffers_blend] && (extensionStrLength == 25) && strncmp(extensionStr, "GL_ARB_draw_buffers_blend", extensionStrLength) == 0) { tunisGL.support[GL_ARB_draw_buffers_blend] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_draw_elements_base_vertex] && (extensionStrLength == 32) && strncmp(extensionStr, "GL_ARB_draw_elements_base_vertex", extensionStrLength) == 0) { tunisGL.support[GL_ARB_draw_elements_base_vertex] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_draw_indirect] && (extensionStrLength == 20) && strncmp(extensionStr, "GL_ARB_draw_indirect", extensionStrLength) == 0) { tunisGL.support[GL_ARB_draw_indirect] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_draw_instanced] && (extensionStrLength == 21) && strncmp(extensionStr, "GL_ARB_draw_instanced", extensionStrLength) == 0) { tunisGL.support[GL_ARB_draw_instanced] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_enhanced_layouts] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_ARB_enhanced_layouts", extensionStrLength) == 0) { tunisGL.support[GL_ARB_enhanced_layouts] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_explicit_attrib_location] && (extensionStrLength == 31) && strncmp(extensionStr, "GL_ARB_explicit_attrib_location", extensionStrLength) == 0) { tunisGL.support[GL_ARB_explicit_attrib_location] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_explicit_uniform_location] && (extensionStrLength == 32) && strncmp(extensionStr, "GL_ARB_explicit_uniform_location", extensionStrLength) == 0) { tunisGL.support[GL_ARB_explicit_uniform_location] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_fragment_coord_conventions] && (extensionStrLength == 33) && strncmp(extensionStr, "GL_ARB_fragment_coord_conventions", extensionStrLength) == 0) { tunisGL.support[GL_ARB_fragment_coord_conventions] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_fragment_layer_viewport] && (extensionStrLength == 30) && strncmp(extensionStr, "GL_ARB_fragment_layer_viewport", extensionStrLength) == 0) { tunisGL.support[GL_ARB_fragment_layer_viewport] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_fragment_program] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_ARB_fragment_program", extensionStrLength) == 0) { tunisGL.support[GL_ARB_fragment_program] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_fragment_program_shadow] && (extensionStrLength == 30) && strncmp(extensionStr, "GL_ARB_fragment_program_shadow", extensionStrLength) == 0) { tunisGL.support[GL_ARB_fragment_program_shadow] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_fragment_shader] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_ARB_fragment_shader", extensionStrLength) == 0) { tunisGL.support[GL_ARB_fragment_shader] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_fragment_shader_interlock] && (extensionStrLength == 32) && strncmp(extensionStr, "GL_ARB_fragment_shader_interlock", extensionStrLength) == 0) { tunisGL.support[GL_ARB_fragment_shader_interlock] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_framebuffer_no_attachments] && (extensionStrLength == 33) && strncmp(extensionStr, "GL_ARB_framebuffer_no_attachments", extensionStrLength) == 0) { tunisGL.support[GL_ARB_framebuffer_no_attachments] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_framebuffer_object] && (extensionStrLength == 25) && strncmp(extensionStr, "GL_ARB_framebuffer_object", extensionStrLength) == 0) { tunisGL.support[GL_ARB_framebuffer_object] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_framebuffer_sRGB] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_ARB_framebuffer_sRGB", extensionStrLength) == 0) { tunisGL.support[GL_ARB_framebuffer_sRGB] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_geometry_shader4] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_ARB_geometry_shader4", extensionStrLength) == 0) { tunisGL.support[GL_ARB_geometry_shader4] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_get_program_binary] && (extensionStrLength == 25) && strncmp(extensionStr, "GL_ARB_get_program_binary", extensionStrLength) == 0) { tunisGL.support[GL_ARB_get_program_binary] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_get_texture_sub_image] && (extensionStrLength == 28) && strncmp(extensionStr, "GL_ARB_get_texture_sub_image", extensionStrLength) == 0) { tunisGL.support[GL_ARB_get_texture_sub_image] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_gl_spirv] && (extensionStrLength == 15) && strncmp(extensionStr, "GL_ARB_gl_spirv", extensionStrLength) == 0) { tunisGL.support[GL_ARB_gl_spirv] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_gpu_shader5] && (extensionStrLength == 18) && strncmp(extensionStr, "GL_ARB_gpu_shader5", extensionStrLength) == 0) { tunisGL.support[GL_ARB_gpu_shader5] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_gpu_shader_fp64] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_ARB_gpu_shader_fp64", extensionStrLength) == 0) { tunisGL.support[GL_ARB_gpu_shader_fp64] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_gpu_shader_int64] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_ARB_gpu_shader_int64", extensionStrLength) == 0) { tunisGL.support[GL_ARB_gpu_shader_int64] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_half_float_pixel] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_ARB_half_float_pixel", extensionStrLength) == 0) { tunisGL.support[GL_ARB_half_float_pixel] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_half_float_vertex] && (extensionStrLength == 24) && strncmp(extensionStr, "GL_ARB_half_float_vertex", extensionStrLength) == 0) { tunisGL.support[GL_ARB_half_float_vertex] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_imaging] && (extensionStrLength == 14) && strncmp(extensionStr, "GL_ARB_imaging", extensionStrLength) == 0) { tunisGL.support[GL_ARB_imaging] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_indirect_parameters] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_ARB_indirect_parameters", extensionStrLength) == 0) { tunisGL.support[GL_ARB_indirect_parameters] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_instanced_arrays] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_ARB_instanced_arrays", extensionStrLength) == 0) { tunisGL.support[GL_ARB_instanced_arrays] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_internalformat_query] && (extensionStrLength == 27) && strncmp(extensionStr, "GL_ARB_internalformat_query", extensionStrLength) == 0) { tunisGL.support[GL_ARB_internalformat_query] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_internalformat_query2] && (extensionStrLength == 28) && strncmp(extensionStr, "GL_ARB_internalformat_query2", extensionStrLength) == 0) { tunisGL.support[GL_ARB_internalformat_query2] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_invalidate_subdata] && (extensionStrLength == 25) && strncmp(extensionStr, "GL_ARB_invalidate_subdata", extensionStrLength) == 0) { tunisGL.support[GL_ARB_invalidate_subdata] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_map_buffer_alignment] && (extensionStrLength == 27) && strncmp(extensionStr, "GL_ARB_map_buffer_alignment", extensionStrLength) == 0) { tunisGL.support[GL_ARB_map_buffer_alignment] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_map_buffer_range] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_ARB_map_buffer_range", extensionStrLength) == 0) { tunisGL.support[GL_ARB_map_buffer_range] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_matrix_palette] && (extensionStrLength == 21) && strncmp(extensionStr, "GL_ARB_matrix_palette", extensionStrLength) == 0) { tunisGL.support[GL_ARB_matrix_palette] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_multi_bind] && (extensionStrLength == 17) && strncmp(extensionStr, "GL_ARB_multi_bind", extensionStrLength) == 0) { tunisGL.support[GL_ARB_multi_bind] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_multi_draw_indirect] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_ARB_multi_draw_indirect", extensionStrLength) == 0) { tunisGL.support[GL_ARB_multi_draw_indirect] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_multisample] && (extensionStrLength == 18) && strncmp(extensionStr, "GL_ARB_multisample", extensionStrLength) == 0) { tunisGL.support[GL_ARB_multisample] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_multitexture] && (extensionStrLength == 19) && strncmp(extensionStr, "GL_ARB_multitexture", extensionStrLength) == 0) { tunisGL.support[GL_ARB_multitexture] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_occlusion_query] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_ARB_occlusion_query", extensionStrLength) == 0) { tunisGL.support[GL_ARB_occlusion_query] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_occlusion_query2] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_ARB_occlusion_query2", extensionStrLength) == 0) { tunisGL.support[GL_ARB_occlusion_query2] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_parallel_shader_compile] && (extensionStrLength == 30) && strncmp(extensionStr, "GL_ARB_parallel_shader_compile", extensionStrLength) == 0) { tunisGL.support[GL_ARB_parallel_shader_compile] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_pipeline_statistics_query] && (extensionStrLength == 32) && strncmp(extensionStr, "GL_ARB_pipeline_statistics_query", extensionStrLength) == 0) { tunisGL.support[GL_ARB_pipeline_statistics_query] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_pixel_buffer_object] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_ARB_pixel_buffer_object", extensionStrLength) == 0) { tunisGL.support[GL_ARB_pixel_buffer_object] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_point_parameters] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_ARB_point_parameters", extensionStrLength) == 0) { tunisGL.support[GL_ARB_point_parameters] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_point_sprite] && (extensionStrLength == 19) && strncmp(extensionStr, "GL_ARB_point_sprite", extensionStrLength) == 0) { tunisGL.support[GL_ARB_point_sprite] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_polygon_offset_clamp] && (extensionStrLength == 27) && strncmp(extensionStr, "GL_ARB_polygon_offset_clamp", extensionStrLength) == 0) { tunisGL.support[GL_ARB_polygon_offset_clamp] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_post_depth_coverage] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_ARB_post_depth_coverage", extensionStrLength) == 0) { tunisGL.support[GL_ARB_post_depth_coverage] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_program_interface_query] && (extensionStrLength == 30) && strncmp(extensionStr, "GL_ARB_program_interface_query", extensionStrLength) == 0) { tunisGL.support[GL_ARB_program_interface_query] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_provoking_vertex] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_ARB_provoking_vertex", extensionStrLength) == 0) { tunisGL.support[GL_ARB_provoking_vertex] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_query_buffer_object] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_ARB_query_buffer_object", extensionStrLength) == 0) { tunisGL.support[GL_ARB_query_buffer_object] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_robust_buffer_access_behavior] && (extensionStrLength == 36) && strncmp(extensionStr, "GL_ARB_robust_buffer_access_behavior", extensionStrLength) == 0) { tunisGL.support[GL_ARB_robust_buffer_access_behavior] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_robustness] && (extensionStrLength == 17) && strncmp(extensionStr, "GL_ARB_robustness", extensionStrLength) == 0) { tunisGL.support[GL_ARB_robustness] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_robustness_isolation] && (extensionStrLength == 27) && strncmp(extensionStr, "GL_ARB_robustness_isolation", extensionStrLength) == 0) { tunisGL.support[GL_ARB_robustness_isolation] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_sample_locations] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_ARB_sample_locations", extensionStrLength) == 0) { tunisGL.support[GL_ARB_sample_locations] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_sample_shading] && (extensionStrLength == 21) && strncmp(extensionStr, "GL_ARB_sample_shading", extensionStrLength) == 0) { tunisGL.support[GL_ARB_sample_shading] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_sampler_objects] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_ARB_sampler_objects", extensionStrLength) == 0) { tunisGL.support[GL_ARB_sampler_objects] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_seamless_cube_map] && (extensionStrLength == 24) && strncmp(extensionStr, "GL_ARB_seamless_cube_map", extensionStrLength) == 0) { tunisGL.support[GL_ARB_seamless_cube_map] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_seamless_cubemap_per_texture] && (extensionStrLength == 35) && strncmp(extensionStr, "GL_ARB_seamless_cubemap_per_texture", extensionStrLength) == 0) { tunisGL.support[GL_ARB_seamless_cubemap_per_texture] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_separate_shader_objects] && (extensionStrLength == 30) && strncmp(extensionStr, "GL_ARB_separate_shader_objects", extensionStrLength) == 0) { tunisGL.support[GL_ARB_separate_shader_objects] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_shader_atomic_counter_ops] && (extensionStrLength == 32) && strncmp(extensionStr, "GL_ARB_shader_atomic_counter_ops", extensionStrLength) == 0) { tunisGL.support[GL_ARB_shader_atomic_counter_ops] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_shader_atomic_counters] && (extensionStrLength == 29) && strncmp(extensionStr, "GL_ARB_shader_atomic_counters", extensionStrLength) == 0) { tunisGL.support[GL_ARB_shader_atomic_counters] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_shader_ballot] && (extensionStrLength == 20) && strncmp(extensionStr, "GL_ARB_shader_ballot", extensionStrLength) == 0) { tunisGL.support[GL_ARB_shader_ballot] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_shader_bit_encoding] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_ARB_shader_bit_encoding", extensionStrLength) == 0) { tunisGL.support[GL_ARB_shader_bit_encoding] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_shader_clock] && (extensionStrLength == 19) && strncmp(extensionStr, "GL_ARB_shader_clock", extensionStrLength) == 0) { tunisGL.support[GL_ARB_shader_clock] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_shader_draw_parameters] && (extensionStrLength == 29) && strncmp(extensionStr, "GL_ARB_shader_draw_parameters", extensionStrLength) == 0) { tunisGL.support[GL_ARB_shader_draw_parameters] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_shader_group_vote] && (extensionStrLength == 24) && strncmp(extensionStr, "GL_ARB_shader_group_vote", extensionStrLength) == 0) { tunisGL.support[GL_ARB_shader_group_vote] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_shader_image_load_store] && (extensionStrLength == 30) && strncmp(extensionStr, "GL_ARB_shader_image_load_store", extensionStrLength) == 0) { tunisGL.support[GL_ARB_shader_image_load_store] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_shader_image_size] && (extensionStrLength == 24) && strncmp(extensionStr, "GL_ARB_shader_image_size", extensionStrLength) == 0) { tunisGL.support[GL_ARB_shader_image_size] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_shader_objects] && (extensionStrLength == 21) && strncmp(extensionStr, "GL_ARB_shader_objects", extensionStrLength) == 0) { tunisGL.support[GL_ARB_shader_objects] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_shader_precision] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_ARB_shader_precision", extensionStrLength) == 0) { tunisGL.support[GL_ARB_shader_precision] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_shader_stencil_export] && (extensionStrLength == 28) && strncmp(extensionStr, "GL_ARB_shader_stencil_export", extensionStrLength) == 0) { tunisGL.support[GL_ARB_shader_stencil_export] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_shader_storage_buffer_object] && (extensionStrLength == 35) && strncmp(extensionStr, "GL_ARB_shader_storage_buffer_object", extensionStrLength) == 0) { tunisGL.support[GL_ARB_shader_storage_buffer_object] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_shader_subroutine] && (extensionStrLength == 24) && strncmp(extensionStr, "GL_ARB_shader_subroutine", extensionStrLength) == 0) { tunisGL.support[GL_ARB_shader_subroutine] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_shader_texture_image_samples] && (extensionStrLength == 35) && strncmp(extensionStr, "GL_ARB_shader_texture_image_samples", extensionStrLength) == 0) { tunisGL.support[GL_ARB_shader_texture_image_samples] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_shader_texture_lod] && (extensionStrLength == 25) && strncmp(extensionStr, "GL_ARB_shader_texture_lod", extensionStrLength) == 0) { tunisGL.support[GL_ARB_shader_texture_lod] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_shader_viewport_layer_array] && (extensionStrLength == 34) && strncmp(extensionStr, "GL_ARB_shader_viewport_layer_array", extensionStrLength) == 0) { tunisGL.support[GL_ARB_shader_viewport_layer_array] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_shading_language_100] && (extensionStrLength == 27) && strncmp(extensionStr, "GL_ARB_shading_language_100", extensionStrLength) == 0) { tunisGL.support[GL_ARB_shading_language_100] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_shading_language_420pack] && (extensionStrLength == 31) && strncmp(extensionStr, "GL_ARB_shading_language_420pack", extensionStrLength) == 0) { tunisGL.support[GL_ARB_shading_language_420pack] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_shading_language_include] && (extensionStrLength == 31) && strncmp(extensionStr, "GL_ARB_shading_language_include", extensionStrLength) == 0) { tunisGL.support[GL_ARB_shading_language_include] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_shading_language_packing] && (extensionStrLength == 31) && strncmp(extensionStr, "GL_ARB_shading_language_packing", extensionStrLength) == 0) { tunisGL.support[GL_ARB_shading_language_packing] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_shadow] && (extensionStrLength == 13) && strncmp(extensionStr, "GL_ARB_shadow", extensionStrLength) == 0) { tunisGL.support[GL_ARB_shadow] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_shadow_ambient] && (extensionStrLength == 21) && strncmp(extensionStr, "GL_ARB_shadow_ambient", extensionStrLength) == 0) { tunisGL.support[GL_ARB_shadow_ambient] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_sparse_buffer] && (extensionStrLength == 20) && strncmp(extensionStr, "GL_ARB_sparse_buffer", extensionStrLength) == 0) { tunisGL.support[GL_ARB_sparse_buffer] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_sparse_texture] && (extensionStrLength == 21) && strncmp(extensionStr, "GL_ARB_sparse_texture", extensionStrLength) == 0) { tunisGL.support[GL_ARB_sparse_texture] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_sparse_texture2] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_ARB_sparse_texture2", extensionStrLength) == 0) { tunisGL.support[GL_ARB_sparse_texture2] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_sparse_texture_clamp] && (extensionStrLength == 27) && strncmp(extensionStr, "GL_ARB_sparse_texture_clamp", extensionStrLength) == 0) { tunisGL.support[GL_ARB_sparse_texture_clamp] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_spirv_extensions] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_ARB_spirv_extensions", extensionStrLength) == 0) { tunisGL.support[GL_ARB_spirv_extensions] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_stencil_texturing] && (extensionStrLength == 24) && strncmp(extensionStr, "GL_ARB_stencil_texturing", extensionStrLength) == 0) { tunisGL.support[GL_ARB_stencil_texturing] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_sync] && (extensionStrLength == 11) && strncmp(extensionStr, "GL_ARB_sync", extensionStrLength) == 0) { tunisGL.support[GL_ARB_sync] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_tessellation_shader] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_ARB_tessellation_shader", extensionStrLength) == 0) { tunisGL.support[GL_ARB_tessellation_shader] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_texture_barrier] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_ARB_texture_barrier", extensionStrLength) == 0) { tunisGL.support[GL_ARB_texture_barrier] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_texture_border_clamp] && (extensionStrLength == 27) && strncmp(extensionStr, "GL_ARB_texture_border_clamp", extensionStrLength) == 0) { tunisGL.support[GL_ARB_texture_border_clamp] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_texture_buffer_object] && (extensionStrLength == 28) && strncmp(extensionStr, "GL_ARB_texture_buffer_object", extensionStrLength) == 0) { tunisGL.support[GL_ARB_texture_buffer_object] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_texture_buffer_object_rgb32] && (extensionStrLength == 34) && strncmp(extensionStr, "GL_ARB_texture_buffer_object_rgb32", extensionStrLength) == 0) { tunisGL.support[GL_ARB_texture_buffer_object_rgb32] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_texture_buffer_range] && (extensionStrLength == 27) && strncmp(extensionStr, "GL_ARB_texture_buffer_range", extensionStrLength) == 0) { tunisGL.support[GL_ARB_texture_buffer_range] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_texture_compression] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_ARB_texture_compression", extensionStrLength) == 0) { tunisGL.support[GL_ARB_texture_compression] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_texture_compression_bptc] && (extensionStrLength == 31) && strncmp(extensionStr, "GL_ARB_texture_compression_bptc", extensionStrLength) == 0) { tunisGL.support[GL_ARB_texture_compression_bptc] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_texture_compression_rgtc] && (extensionStrLength == 31) && strncmp(extensionStr, "GL_ARB_texture_compression_rgtc", extensionStrLength) == 0) { tunisGL.support[GL_ARB_texture_compression_rgtc] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_texture_cube_map] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_ARB_texture_cube_map", extensionStrLength) == 0) { tunisGL.support[GL_ARB_texture_cube_map] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_texture_cube_map_array] && (extensionStrLength == 29) && strncmp(extensionStr, "GL_ARB_texture_cube_map_array", extensionStrLength) == 0) { tunisGL.support[GL_ARB_texture_cube_map_array] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_texture_env_add] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_ARB_texture_env_add", extensionStrLength) == 0) { tunisGL.support[GL_ARB_texture_env_add] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_texture_env_combine] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_ARB_texture_env_combine", extensionStrLength) == 0) { tunisGL.support[GL_ARB_texture_env_combine] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_texture_env_crossbar] && (extensionStrLength == 27) && strncmp(extensionStr, "GL_ARB_texture_env_crossbar", extensionStrLength) == 0) { tunisGL.support[GL_ARB_texture_env_crossbar] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_texture_env_dot3] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_ARB_texture_env_dot3", extensionStrLength) == 0) { tunisGL.support[GL_ARB_texture_env_dot3] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_texture_filter_anisotropic] && (extensionStrLength == 33) && strncmp(extensionStr, "GL_ARB_texture_filter_anisotropic", extensionStrLength) == 0) { tunisGL.support[GL_ARB_texture_filter_anisotropic] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_texture_filter_minmax] && (extensionStrLength == 28) && strncmp(extensionStr, "GL_ARB_texture_filter_minmax", extensionStrLength) == 0) { tunisGL.support[GL_ARB_texture_filter_minmax] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_texture_float] && (extensionStrLength == 20) && strncmp(extensionStr, "GL_ARB_texture_float", extensionStrLength) == 0) { tunisGL.support[GL_ARB_texture_float] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_texture_gather] && (extensionStrLength == 21) && strncmp(extensionStr, "GL_ARB_texture_gather", extensionStrLength) == 0) { tunisGL.support[GL_ARB_texture_gather] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_texture_mirror_clamp_to_edge] && (extensionStrLength == 35) && strncmp(extensionStr, "GL_ARB_texture_mirror_clamp_to_edge", extensionStrLength) == 0) { tunisGL.support[GL_ARB_texture_mirror_clamp_to_edge] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_texture_mirrored_repeat] && (extensionStrLength == 30) && strncmp(extensionStr, "GL_ARB_texture_mirrored_repeat", extensionStrLength) == 0) { tunisGL.support[GL_ARB_texture_mirrored_repeat] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_texture_multisample] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_ARB_texture_multisample", extensionStrLength) == 0) { tunisGL.support[GL_ARB_texture_multisample] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_texture_non_power_of_two] && (extensionStrLength == 31) && strncmp(extensionStr, "GL_ARB_texture_non_power_of_two", extensionStrLength) == 0) { tunisGL.support[GL_ARB_texture_non_power_of_two] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_texture_query_levels] && (extensionStrLength == 27) && strncmp(extensionStr, "GL_ARB_texture_query_levels", extensionStrLength) == 0) { tunisGL.support[GL_ARB_texture_query_levels] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_texture_query_lod] && (extensionStrLength == 24) && strncmp(extensionStr, "GL_ARB_texture_query_lod", extensionStrLength) == 0) { tunisGL.support[GL_ARB_texture_query_lod] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_texture_rectangle] && (extensionStrLength == 24) && strncmp(extensionStr, "GL_ARB_texture_rectangle", extensionStrLength) == 0) { tunisGL.support[GL_ARB_texture_rectangle] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_texture_rg] && (extensionStrLength == 17) && strncmp(extensionStr, "GL_ARB_texture_rg", extensionStrLength) == 0) { tunisGL.support[GL_ARB_texture_rg] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_texture_rgb10_a2ui] && (extensionStrLength == 25) && strncmp(extensionStr, "GL_ARB_texture_rgb10_a2ui", extensionStrLength) == 0) { tunisGL.support[GL_ARB_texture_rgb10_a2ui] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_texture_stencil8] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_ARB_texture_stencil8", extensionStrLength) == 0) { tunisGL.support[GL_ARB_texture_stencil8] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_texture_storage] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_ARB_texture_storage", extensionStrLength) == 0) { tunisGL.support[GL_ARB_texture_storage] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_texture_storage_multisample] && (extensionStrLength == 34) && strncmp(extensionStr, "GL_ARB_texture_storage_multisample", extensionStrLength) == 0) { tunisGL.support[GL_ARB_texture_storage_multisample] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_texture_swizzle] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_ARB_texture_swizzle", extensionStrLength) == 0) { tunisGL.support[GL_ARB_texture_swizzle] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_texture_view] && (extensionStrLength == 19) && strncmp(extensionStr, "GL_ARB_texture_view", extensionStrLength) == 0) { tunisGL.support[GL_ARB_texture_view] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_timer_query] && (extensionStrLength == 18) && strncmp(extensionStr, "GL_ARB_timer_query", extensionStrLength) == 0) { tunisGL.support[GL_ARB_timer_query] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_transform_feedback2] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_ARB_transform_feedback2", extensionStrLength) == 0) { tunisGL.support[GL_ARB_transform_feedback2] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_transform_feedback3] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_ARB_transform_feedback3", extensionStrLength) == 0) { tunisGL.support[GL_ARB_transform_feedback3] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_transform_feedback_instanced] && (extensionStrLength == 35) && strncmp(extensionStr, "GL_ARB_transform_feedback_instanced", extensionStrLength) == 0) { tunisGL.support[GL_ARB_transform_feedback_instanced] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_transform_feedback_overflow_query] && (extensionStrLength == 40) && strncmp(extensionStr, "GL_ARB_transform_feedback_overflow_query", extensionStrLength) == 0) { tunisGL.support[GL_ARB_transform_feedback_overflow_query] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_transpose_matrix] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_ARB_transpose_matrix", extensionStrLength) == 0) { tunisGL.support[GL_ARB_transpose_matrix] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_uniform_buffer_object] && (extensionStrLength == 28) && strncmp(extensionStr, "GL_ARB_uniform_buffer_object", extensionStrLength) == 0) { tunisGL.support[GL_ARB_uniform_buffer_object] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_vertex_array_bgra] && (extensionStrLength == 24) && strncmp(extensionStr, "GL_ARB_vertex_array_bgra", extensionStrLength) == 0) { tunisGL.support[GL_ARB_vertex_array_bgra] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_vertex_array_object] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_ARB_vertex_array_object", extensionStrLength) == 0) { tunisGL.support[GL_ARB_vertex_array_object] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_vertex_attrib_64bit] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_ARB_vertex_attrib_64bit", extensionStrLength) == 0) { tunisGL.support[GL_ARB_vertex_attrib_64bit] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_vertex_attrib_binding] && (extensionStrLength == 28) && strncmp(extensionStr, "GL_ARB_vertex_attrib_binding", extensionStrLength) == 0) { tunisGL.support[GL_ARB_vertex_attrib_binding] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_vertex_blend] && (extensionStrLength == 19) && strncmp(extensionStr, "GL_ARB_vertex_blend", extensionStrLength) == 0) { tunisGL.support[GL_ARB_vertex_blend] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_vertex_buffer_object] && (extensionStrLength == 27) && strncmp(extensionStr, "GL_ARB_vertex_buffer_object", extensionStrLength) == 0) { tunisGL.support[GL_ARB_vertex_buffer_object] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_vertex_program] && (extensionStrLength == 21) && strncmp(extensionStr, "GL_ARB_vertex_program", extensionStrLength) == 0) { tunisGL.support[GL_ARB_vertex_program] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_vertex_shader] && (extensionStrLength == 20) && strncmp(extensionStr, "GL_ARB_vertex_shader", extensionStrLength) == 0) { tunisGL.support[GL_ARB_vertex_shader] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_vertex_type_10f_11f_11f_rev] && (extensionStrLength == 34) && strncmp(extensionStr, "GL_ARB_vertex_type_10f_11f_11f_rev", extensionStrLength) == 0) { tunisGL.support[GL_ARB_vertex_type_10f_11f_11f_rev] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_vertex_type_2_10_10_10_rev] && (extensionStrLength == 33) && strncmp(extensionStr, "GL_ARB_vertex_type_2_10_10_10_rev", extensionStrLength) == 0) { tunisGL.support[GL_ARB_vertex_type_2_10_10_10_rev] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_viewport_array] && (extensionStrLength == 21) && strncmp(extensionStr, "GL_ARB_viewport_array", extensionStrLength) == 0) { tunisGL.support[GL_ARB_viewport_array] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ARB_window_pos] && (extensionStrLength == 17) && strncmp(extensionStr, "GL_ARB_window_pos", extensionStrLength) == 0) { tunisGL.support[GL_ARB_window_pos] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ATI_draw_buffers] && (extensionStrLength == 19) && strncmp(extensionStr, "GL_ATI_draw_buffers", extensionStrLength) == 0) { tunisGL.support[GL_ATI_draw_buffers] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ATI_element_array] && (extensionStrLength == 20) && strncmp(extensionStr, "GL_ATI_element_array", extensionStrLength) == 0) { tunisGL.support[GL_ATI_element_array] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ATI_envmap_bumpmap] && (extensionStrLength == 21) && strncmp(extensionStr, "GL_ATI_envmap_bumpmap", extensionStrLength) == 0) { tunisGL.support[GL_ATI_envmap_bumpmap] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ATI_fragment_shader] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_ATI_fragment_shader", extensionStrLength) == 0) { tunisGL.support[GL_ATI_fragment_shader] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ATI_map_object_buffer] && (extensionStrLength == 24) && strncmp(extensionStr, "GL_ATI_map_object_buffer", extensionStrLength) == 0) { tunisGL.support[GL_ATI_map_object_buffer] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ATI_meminfo] && (extensionStrLength == 14) && strncmp(extensionStr, "GL_ATI_meminfo", extensionStrLength) == 0) { tunisGL.support[GL_ATI_meminfo] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ATI_pixel_format_float] && (extensionStrLength == 25) && strncmp(extensionStr, "GL_ATI_pixel_format_float", extensionStrLength) == 0) { tunisGL.support[GL_ATI_pixel_format_float] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ATI_pn_triangles] && (extensionStrLength == 19) && strncmp(extensionStr, "GL_ATI_pn_triangles", extensionStrLength) == 0) { tunisGL.support[GL_ATI_pn_triangles] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ATI_separate_stencil] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_ATI_separate_stencil", extensionStrLength) == 0) { tunisGL.support[GL_ATI_separate_stencil] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ATI_text_fragment_shader] && (extensionStrLength == 27) && strncmp(extensionStr, "GL_ATI_text_fragment_shader", extensionStrLength) == 0) { tunisGL.support[GL_ATI_text_fragment_shader] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ATI_texture_env_combine3] && (extensionStrLength == 27) && strncmp(extensionStr, "GL_ATI_texture_env_combine3", extensionStrLength) == 0) { tunisGL.support[GL_ATI_texture_env_combine3] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ATI_texture_float] && (extensionStrLength == 20) && strncmp(extensionStr, "GL_ATI_texture_float", extensionStrLength) == 0) { tunisGL.support[GL_ATI_texture_float] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ATI_texture_mirror_once] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_ATI_texture_mirror_once", extensionStrLength) == 0) { tunisGL.support[GL_ATI_texture_mirror_once] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ATI_vertex_array_object] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_ATI_vertex_array_object", extensionStrLength) == 0) { tunisGL.support[GL_ATI_vertex_array_object] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ATI_vertex_attrib_array_object] && (extensionStrLength == 33) && strncmp(extensionStr, "GL_ATI_vertex_attrib_array_object", extensionStrLength) == 0) { tunisGL.support[GL_ATI_vertex_attrib_array_object] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_ATI_vertex_streams] && (extensionStrLength == 21) && strncmp(extensionStr, "GL_ATI_vertex_streams", extensionStrLength) == 0) { tunisGL.support[GL_ATI_vertex_streams] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXTX_framebuffer_mixed_formats] && (extensionStrLength == 33) && strncmp(extensionStr, "GL_EXTX_framebuffer_mixed_formats", extensionStrLength) == 0) { tunisGL.support[GL_EXTX_framebuffer_mixed_formats] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_422_pixels] && (extensionStrLength == 17) && strncmp(extensionStr, "GL_EXT_422_pixels", extensionStrLength) == 0) { tunisGL.support[GL_EXT_422_pixels] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_Cg_shader] && (extensionStrLength == 16) && strncmp(extensionStr, "GL_EXT_Cg_shader", extensionStrLength) == 0) { tunisGL.support[GL_EXT_Cg_shader] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_EGL_image_storage] && (extensionStrLength == 24) && strncmp(extensionStr, "GL_EXT_EGL_image_storage", extensionStrLength) == 0) { tunisGL.support[GL_EXT_EGL_image_storage] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_abgr] && (extensionStrLength == 11) && strncmp(extensionStr, "GL_EXT_abgr", extensionStrLength) == 0) { tunisGL.support[GL_EXT_abgr] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_bgra] && (extensionStrLength == 11) && strncmp(extensionStr, "GL_EXT_bgra", extensionStrLength) == 0) { tunisGL.support[GL_EXT_bgra] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_bindable_uniform] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_EXT_bindable_uniform", extensionStrLength) == 0) { tunisGL.support[GL_EXT_bindable_uniform] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_blend_color] && (extensionStrLength == 18) && strncmp(extensionStr, "GL_EXT_blend_color", extensionStrLength) == 0) { tunisGL.support[GL_EXT_blend_color] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_blend_equation_separate] && (extensionStrLength == 30) && strncmp(extensionStr, "GL_EXT_blend_equation_separate", extensionStrLength) == 0) { tunisGL.support[GL_EXT_blend_equation_separate] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_blend_func_separate] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_EXT_blend_func_separate", extensionStrLength) == 0) { tunisGL.support[GL_EXT_blend_func_separate] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_blend_logic_op] && (extensionStrLength == 21) && strncmp(extensionStr, "GL_EXT_blend_logic_op", extensionStrLength) == 0) { tunisGL.support[GL_EXT_blend_logic_op] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_blend_minmax] && (extensionStrLength == 19) && strncmp(extensionStr, "GL_EXT_blend_minmax", extensionStrLength) == 0) { tunisGL.support[GL_EXT_blend_minmax] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_blend_subtract] && (extensionStrLength == 21) && strncmp(extensionStr, "GL_EXT_blend_subtract", extensionStrLength) == 0) { tunisGL.support[GL_EXT_blend_subtract] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_clip_volume_hint] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_EXT_clip_volume_hint", extensionStrLength) == 0) { tunisGL.support[GL_EXT_clip_volume_hint] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_cmyka] && (extensionStrLength == 12) && strncmp(extensionStr, "GL_EXT_cmyka", extensionStrLength) == 0) { tunisGL.support[GL_EXT_cmyka] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_color_subtable] && (extensionStrLength == 21) && strncmp(extensionStr, "GL_EXT_color_subtable", extensionStrLength) == 0) { tunisGL.support[GL_EXT_color_subtable] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_compiled_vertex_array] && (extensionStrLength == 28) && strncmp(extensionStr, "GL_EXT_compiled_vertex_array", extensionStrLength) == 0) { tunisGL.support[GL_EXT_compiled_vertex_array] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_convolution] && (extensionStrLength == 18) && strncmp(extensionStr, "GL_EXT_convolution", extensionStrLength) == 0) { tunisGL.support[GL_EXT_convolution] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_coordinate_frame] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_EXT_coordinate_frame", extensionStrLength) == 0) { tunisGL.support[GL_EXT_coordinate_frame] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_copy_texture] && (extensionStrLength == 19) && strncmp(extensionStr, "GL_EXT_copy_texture", extensionStrLength) == 0) { tunisGL.support[GL_EXT_copy_texture] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_cull_vertex] && (extensionStrLength == 18) && strncmp(extensionStr, "GL_EXT_cull_vertex", extensionStrLength) == 0) { tunisGL.support[GL_EXT_cull_vertex] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_debug_label] && (extensionStrLength == 18) && strncmp(extensionStr, "GL_EXT_debug_label", extensionStrLength) == 0) { tunisGL.support[GL_EXT_debug_label] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_debug_marker] && (extensionStrLength == 19) && strncmp(extensionStr, "GL_EXT_debug_marker", extensionStrLength) == 0) { tunisGL.support[GL_EXT_debug_marker] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_depth_bounds_test] && (extensionStrLength == 24) && strncmp(extensionStr, "GL_EXT_depth_bounds_test", extensionStrLength) == 0) { tunisGL.support[GL_EXT_depth_bounds_test] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_direct_state_access] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_EXT_direct_state_access", extensionStrLength) == 0) { tunisGL.support[GL_EXT_direct_state_access] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_draw_buffers2] && (extensionStrLength == 20) && strncmp(extensionStr, "GL_EXT_draw_buffers2", extensionStrLength) == 0) { tunisGL.support[GL_EXT_draw_buffers2] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_draw_instanced] && (extensionStrLength == 21) && strncmp(extensionStr, "GL_EXT_draw_instanced", extensionStrLength) == 0) { tunisGL.support[GL_EXT_draw_instanced] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_draw_range_elements] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_EXT_draw_range_elements", extensionStrLength) == 0) { tunisGL.support[GL_EXT_draw_range_elements] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_external_buffer] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_EXT_external_buffer", extensionStrLength) == 0) { tunisGL.support[GL_EXT_external_buffer] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_fog_coord] && (extensionStrLength == 16) && strncmp(extensionStr, "GL_EXT_fog_coord", extensionStrLength) == 0) { tunisGL.support[GL_EXT_fog_coord] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_framebuffer_blit] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_EXT_framebuffer_blit", extensionStrLength) == 0) { tunisGL.support[GL_EXT_framebuffer_blit] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_framebuffer_multisample] && (extensionStrLength == 30) && strncmp(extensionStr, "GL_EXT_framebuffer_multisample", extensionStrLength) == 0) { tunisGL.support[GL_EXT_framebuffer_multisample] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_framebuffer_multisample_blit_scaled] && (extensionStrLength == 42) && strncmp(extensionStr, "GL_EXT_framebuffer_multisample_blit_scaled", extensionStrLength) == 0) { tunisGL.support[GL_EXT_framebuffer_multisample_blit_scaled] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_framebuffer_object] && (extensionStrLength == 25) && strncmp(extensionStr, "GL_EXT_framebuffer_object", extensionStrLength) == 0) { tunisGL.support[GL_EXT_framebuffer_object] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_framebuffer_sRGB] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_EXT_framebuffer_sRGB", extensionStrLength) == 0) { tunisGL.support[GL_EXT_framebuffer_sRGB] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_geometry_shader4] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_EXT_geometry_shader4", extensionStrLength) == 0) { tunisGL.support[GL_EXT_geometry_shader4] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_gpu_program_parameters] && (extensionStrLength == 29) && strncmp(extensionStr, "GL_EXT_gpu_program_parameters", extensionStrLength) == 0) { tunisGL.support[GL_EXT_gpu_program_parameters] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_gpu_shader4] && (extensionStrLength == 18) && strncmp(extensionStr, "GL_EXT_gpu_shader4", extensionStrLength) == 0) { tunisGL.support[GL_EXT_gpu_shader4] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_histogram] && (extensionStrLength == 16) && strncmp(extensionStr, "GL_EXT_histogram", extensionStrLength) == 0) { tunisGL.support[GL_EXT_histogram] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_import_sync_object] && (extensionStrLength == 25) && strncmp(extensionStr, "GL_EXT_import_sync_object", extensionStrLength) == 0) { tunisGL.support[GL_EXT_import_sync_object] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_index_array_formats] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_EXT_index_array_formats", extensionStrLength) == 0) { tunisGL.support[GL_EXT_index_array_formats] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_index_func] && (extensionStrLength == 17) && strncmp(extensionStr, "GL_EXT_index_func", extensionStrLength) == 0) { tunisGL.support[GL_EXT_index_func] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_index_material] && (extensionStrLength == 21) && strncmp(extensionStr, "GL_EXT_index_material", extensionStrLength) == 0) { tunisGL.support[GL_EXT_index_material] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_index_texture] && (extensionStrLength == 20) && strncmp(extensionStr, "GL_EXT_index_texture", extensionStrLength) == 0) { tunisGL.support[GL_EXT_index_texture] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_light_texture] && (extensionStrLength == 20) && strncmp(extensionStr, "GL_EXT_light_texture", extensionStrLength) == 0) { tunisGL.support[GL_EXT_light_texture] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_memory_object] && (extensionStrLength == 20) && strncmp(extensionStr, "GL_EXT_memory_object", extensionStrLength) == 0) { tunisGL.support[GL_EXT_memory_object] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_memory_object_fd] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_EXT_memory_object_fd", extensionStrLength) == 0) { tunisGL.support[GL_EXT_memory_object_fd] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_memory_object_win32] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_EXT_memory_object_win32", extensionStrLength) == 0) { tunisGL.support[GL_EXT_memory_object_win32] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_misc_attribute] && (extensionStrLength == 21) && strncmp(extensionStr, "GL_EXT_misc_attribute", extensionStrLength) == 0) { tunisGL.support[GL_EXT_misc_attribute] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_multi_draw_arrays] && (extensionStrLength == 24) && strncmp(extensionStr, "GL_EXT_multi_draw_arrays", extensionStrLength) == 0) { tunisGL.support[GL_EXT_multi_draw_arrays] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_multisample] && (extensionStrLength == 18) && strncmp(extensionStr, "GL_EXT_multisample", extensionStrLength) == 0) { tunisGL.support[GL_EXT_multisample] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_packed_depth_stencil] && (extensionStrLength == 27) && strncmp(extensionStr, "GL_EXT_packed_depth_stencil", extensionStrLength) == 0) { tunisGL.support[GL_EXT_packed_depth_stencil] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_packed_float] && (extensionStrLength == 19) && strncmp(extensionStr, "GL_EXT_packed_float", extensionStrLength) == 0) { tunisGL.support[GL_EXT_packed_float] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_packed_pixels] && (extensionStrLength == 20) && strncmp(extensionStr, "GL_EXT_packed_pixels", extensionStrLength) == 0) { tunisGL.support[GL_EXT_packed_pixels] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_paletted_texture] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_EXT_paletted_texture", extensionStrLength) == 0) { tunisGL.support[GL_EXT_paletted_texture] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_pixel_buffer_object] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_EXT_pixel_buffer_object", extensionStrLength) == 0) { tunisGL.support[GL_EXT_pixel_buffer_object] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_pixel_transform] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_EXT_pixel_transform", extensionStrLength) == 0) { tunisGL.support[GL_EXT_pixel_transform] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_pixel_transform_color_table] && (extensionStrLength == 34) && strncmp(extensionStr, "GL_EXT_pixel_transform_color_table", extensionStrLength) == 0) { tunisGL.support[GL_EXT_pixel_transform_color_table] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_point_parameters] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_EXT_point_parameters", extensionStrLength) == 0) { tunisGL.support[GL_EXT_point_parameters] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_polygon_offset] && (extensionStrLength == 21) && strncmp(extensionStr, "GL_EXT_polygon_offset", extensionStrLength) == 0) { tunisGL.support[GL_EXT_polygon_offset] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_polygon_offset_clamp] && (extensionStrLength == 27) && strncmp(extensionStr, "GL_EXT_polygon_offset_clamp", extensionStrLength) == 0) { tunisGL.support[GL_EXT_polygon_offset_clamp] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_post_depth_coverage] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_EXT_post_depth_coverage", extensionStrLength) == 0) { tunisGL.support[GL_EXT_post_depth_coverage] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_provoking_vertex] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_EXT_provoking_vertex", extensionStrLength) == 0) { tunisGL.support[GL_EXT_provoking_vertex] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_raster_multisample] && (extensionStrLength == 25) && strncmp(extensionStr, "GL_EXT_raster_multisample", extensionStrLength) == 0) { tunisGL.support[GL_EXT_raster_multisample] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_rescale_normal] && (extensionStrLength == 21) && strncmp(extensionStr, "GL_EXT_rescale_normal", extensionStrLength) == 0) { tunisGL.support[GL_EXT_rescale_normal] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_secondary_color] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_EXT_secondary_color", extensionStrLength) == 0) { tunisGL.support[GL_EXT_secondary_color] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_semaphore] && (extensionStrLength == 16) && strncmp(extensionStr, "GL_EXT_semaphore", extensionStrLength) == 0) { tunisGL.support[GL_EXT_semaphore] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_semaphore_fd] && (extensionStrLength == 19) && strncmp(extensionStr, "GL_EXT_semaphore_fd", extensionStrLength) == 0) { tunisGL.support[GL_EXT_semaphore_fd] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_semaphore_win32] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_EXT_semaphore_win32", extensionStrLength) == 0) { tunisGL.support[GL_EXT_semaphore_win32] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_separate_shader_objects] && (extensionStrLength == 30) && strncmp(extensionStr, "GL_EXT_separate_shader_objects", extensionStrLength) == 0) { tunisGL.support[GL_EXT_separate_shader_objects] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_separate_specular_color] && (extensionStrLength == 30) && strncmp(extensionStr, "GL_EXT_separate_specular_color", extensionStrLength) == 0) { tunisGL.support[GL_EXT_separate_specular_color] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_shader_framebuffer_fetch] && (extensionStrLength == 31) && strncmp(extensionStr, "GL_EXT_shader_framebuffer_fetch", extensionStrLength) == 0) { tunisGL.support[GL_EXT_shader_framebuffer_fetch] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_shader_framebuffer_fetch_non_coherent] && (extensionStrLength == 44) && strncmp(extensionStr, "GL_EXT_shader_framebuffer_fetch_non_coherent", extensionStrLength) == 0) { tunisGL.support[GL_EXT_shader_framebuffer_fetch_non_coherent] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_shader_image_load_formatted] && (extensionStrLength == 34) && strncmp(extensionStr, "GL_EXT_shader_image_load_formatted", extensionStrLength) == 0) { tunisGL.support[GL_EXT_shader_image_load_formatted] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_shader_image_load_store] && (extensionStrLength == 30) && strncmp(extensionStr, "GL_EXT_shader_image_load_store", extensionStrLength) == 0) { tunisGL.support[GL_EXT_shader_image_load_store] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_shader_integer_mix] && (extensionStrLength == 25) && strncmp(extensionStr, "GL_EXT_shader_integer_mix", extensionStrLength) == 0) { tunisGL.support[GL_EXT_shader_integer_mix] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_shadow_funcs] && (extensionStrLength == 19) && strncmp(extensionStr, "GL_EXT_shadow_funcs", extensionStrLength) == 0) { tunisGL.support[GL_EXT_shadow_funcs] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_shared_texture_palette] && (extensionStrLength == 29) && strncmp(extensionStr, "GL_EXT_shared_texture_palette", extensionStrLength) == 0) { tunisGL.support[GL_EXT_shared_texture_palette] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_sparse_texture2] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_EXT_sparse_texture2", extensionStrLength) == 0) { tunisGL.support[GL_EXT_sparse_texture2] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_stencil_clear_tag] && (extensionStrLength == 24) && strncmp(extensionStr, "GL_EXT_stencil_clear_tag", extensionStrLength) == 0) { tunisGL.support[GL_EXT_stencil_clear_tag] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_stencil_two_side] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_EXT_stencil_two_side", extensionStrLength) == 0) { tunisGL.support[GL_EXT_stencil_two_side] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_stencil_wrap] && (extensionStrLength == 19) && strncmp(extensionStr, "GL_EXT_stencil_wrap", extensionStrLength) == 0) { tunisGL.support[GL_EXT_stencil_wrap] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_subtexture] && (extensionStrLength == 17) && strncmp(extensionStr, "GL_EXT_subtexture", extensionStrLength) == 0) { tunisGL.support[GL_EXT_subtexture] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_texture] && (extensionStrLength == 14) && strncmp(extensionStr, "GL_EXT_texture", extensionStrLength) == 0) { tunisGL.support[GL_EXT_texture] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_texture3D] && (extensionStrLength == 16) && strncmp(extensionStr, "GL_EXT_texture3D", extensionStrLength) == 0) { tunisGL.support[GL_EXT_texture3D] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_texture_array] && (extensionStrLength == 20) && strncmp(extensionStr, "GL_EXT_texture_array", extensionStrLength) == 0) { tunisGL.support[GL_EXT_texture_array] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_texture_buffer_object] && (extensionStrLength == 28) && strncmp(extensionStr, "GL_EXT_texture_buffer_object", extensionStrLength) == 0) { tunisGL.support[GL_EXT_texture_buffer_object] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_texture_compression_dxt1] && (extensionStrLength == 31) && strncmp(extensionStr, "GL_EXT_texture_compression_dxt1", extensionStrLength) == 0) { tunisGL.support[GL_EXT_texture_compression_dxt1] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_texture_compression_latc] && (extensionStrLength == 31) && strncmp(extensionStr, "GL_EXT_texture_compression_latc", extensionStrLength) == 0) { tunisGL.support[GL_EXT_texture_compression_latc] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_texture_compression_rgtc] && (extensionStrLength == 31) && strncmp(extensionStr, "GL_EXT_texture_compression_rgtc", extensionStrLength) == 0) { tunisGL.support[GL_EXT_texture_compression_rgtc] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_texture_compression_s3tc] && (extensionStrLength == 31) && strncmp(extensionStr, "GL_EXT_texture_compression_s3tc", extensionStrLength) == 0) { tunisGL.support[GL_EXT_texture_compression_s3tc] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_texture_cube_map] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_EXT_texture_cube_map", extensionStrLength) == 0) { tunisGL.support[GL_EXT_texture_cube_map] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_texture_edge_clamp] && (extensionStrLength == 25) && strncmp(extensionStr, "GL_EXT_texture_edge_clamp", extensionStrLength) == 0) { tunisGL.support[GL_EXT_texture_edge_clamp] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_texture_env_add] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_EXT_texture_env_add", extensionStrLength) == 0) { tunisGL.support[GL_EXT_texture_env_add] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_texture_env_combine] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_EXT_texture_env_combine", extensionStrLength) == 0) { tunisGL.support[GL_EXT_texture_env_combine] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_texture_env_dot3] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_EXT_texture_env_dot3", extensionStrLength) == 0) { tunisGL.support[GL_EXT_texture_env_dot3] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_texture_filter_anisotropic] && (extensionStrLength == 33) && strncmp(extensionStr, "GL_EXT_texture_filter_anisotropic", extensionStrLength) == 0) { tunisGL.support[GL_EXT_texture_filter_anisotropic] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_texture_filter_minmax] && (extensionStrLength == 28) && strncmp(extensionStr, "GL_EXT_texture_filter_minmax", extensionStrLength) == 0) { tunisGL.support[GL_EXT_texture_filter_minmax] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_texture_integer] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_EXT_texture_integer", extensionStrLength) == 0) { tunisGL.support[GL_EXT_texture_integer] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_texture_lod] && (extensionStrLength == 18) && strncmp(extensionStr, "GL_EXT_texture_lod", extensionStrLength) == 0) { tunisGL.support[GL_EXT_texture_lod] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_texture_lod_bias] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_EXT_texture_lod_bias", extensionStrLength) == 0) { tunisGL.support[GL_EXT_texture_lod_bias] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_texture_mirror_clamp] && (extensionStrLength == 27) && strncmp(extensionStr, "GL_EXT_texture_mirror_clamp", extensionStrLength) == 0) { tunisGL.support[GL_EXT_texture_mirror_clamp] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_texture_object] && (extensionStrLength == 21) && strncmp(extensionStr, "GL_EXT_texture_object", extensionStrLength) == 0) { tunisGL.support[GL_EXT_texture_object] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_texture_perturb_normal] && (extensionStrLength == 29) && strncmp(extensionStr, "GL_EXT_texture_perturb_normal", extensionStrLength) == 0) { tunisGL.support[GL_EXT_texture_perturb_normal] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_texture_sRGB] && (extensionStrLength == 19) && strncmp(extensionStr, "GL_EXT_texture_sRGB", extensionStrLength) == 0) { tunisGL.support[GL_EXT_texture_sRGB] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_texture_sRGB_decode] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_EXT_texture_sRGB_decode", extensionStrLength) == 0) { tunisGL.support[GL_EXT_texture_sRGB_decode] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_texture_shared_exponent] && (extensionStrLength == 30) && strncmp(extensionStr, "GL_EXT_texture_shared_exponent", extensionStrLength) == 0) { tunisGL.support[GL_EXT_texture_shared_exponent] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_texture_snorm] && (extensionStrLength == 20) && strncmp(extensionStr, "GL_EXT_texture_snorm", extensionStrLength) == 0) { tunisGL.support[GL_EXT_texture_snorm] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_texture_storage] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_EXT_texture_storage", extensionStrLength) == 0) { tunisGL.support[GL_EXT_texture_storage] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_texture_swizzle] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_EXT_texture_swizzle", extensionStrLength) == 0) { tunisGL.support[GL_EXT_texture_swizzle] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_timer_query] && (extensionStrLength == 18) && strncmp(extensionStr, "GL_EXT_timer_query", extensionStrLength) == 0) { tunisGL.support[GL_EXT_timer_query] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_transform_feedback] && (extensionStrLength == 25) && strncmp(extensionStr, "GL_EXT_transform_feedback", extensionStrLength) == 0) { tunisGL.support[GL_EXT_transform_feedback] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_vertex_array] && (extensionStrLength == 19) && strncmp(extensionStr, "GL_EXT_vertex_array", extensionStrLength) == 0) { tunisGL.support[GL_EXT_vertex_array] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_vertex_array_bgra] && (extensionStrLength == 24) && strncmp(extensionStr, "GL_EXT_vertex_array_bgra", extensionStrLength) == 0) { tunisGL.support[GL_EXT_vertex_array_bgra] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_vertex_attrib_64bit] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_EXT_vertex_attrib_64bit", extensionStrLength) == 0) { tunisGL.support[GL_EXT_vertex_attrib_64bit] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_vertex_shader] && (extensionStrLength == 20) && strncmp(extensionStr, "GL_EXT_vertex_shader", extensionStrLength) == 0) { tunisGL.support[GL_EXT_vertex_shader] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_vertex_weighting] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_EXT_vertex_weighting", extensionStrLength) == 0) { tunisGL.support[GL_EXT_vertex_weighting] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_win32_keyed_mutex] && (extensionStrLength == 24) && strncmp(extensionStr, "GL_EXT_win32_keyed_mutex", extensionStrLength) == 0) { tunisGL.support[GL_EXT_win32_keyed_mutex] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_window_rectangles] && (extensionStrLength == 24) && strncmp(extensionStr, "GL_EXT_window_rectangles", extensionStrLength) == 0) { tunisGL.support[GL_EXT_window_rectangles] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_EXT_x11_sync_object] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_EXT_x11_sync_object", extensionStrLength) == 0) { tunisGL.support[GL_EXT_x11_sync_object] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_GREMEDY_frame_terminator] && (extensionStrLength == 27) && strncmp(extensionStr, "GL_GREMEDY_frame_terminator", extensionStrLength) == 0) { tunisGL.support[GL_GREMEDY_frame_terminator] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_GREMEDY_string_marker] && (extensionStrLength == 24) && strncmp(extensionStr, "GL_GREMEDY_string_marker", extensionStrLength) == 0) { tunisGL.support[GL_GREMEDY_string_marker] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_HP_convolution_border_modes] && (extensionStrLength == 30) && strncmp(extensionStr, "GL_HP_convolution_border_modes", extensionStrLength) == 0) { tunisGL.support[GL_HP_convolution_border_modes] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_HP_image_transform] && (extensionStrLength == 21) && strncmp(extensionStr, "GL_HP_image_transform", extensionStrLength) == 0) { tunisGL.support[GL_HP_image_transform] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_HP_occlusion_test] && (extensionStrLength == 20) && strncmp(extensionStr, "GL_HP_occlusion_test", extensionStrLength) == 0) { tunisGL.support[GL_HP_occlusion_test] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_HP_texture_lighting] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_HP_texture_lighting", extensionStrLength) == 0) { tunisGL.support[GL_HP_texture_lighting] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_IBM_cull_vertex] && (extensionStrLength == 18) && strncmp(extensionStr, "GL_IBM_cull_vertex", extensionStrLength) == 0) { tunisGL.support[GL_IBM_cull_vertex] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_IBM_multimode_draw_arrays] && (extensionStrLength == 28) && strncmp(extensionStr, "GL_IBM_multimode_draw_arrays", extensionStrLength) == 0) { tunisGL.support[GL_IBM_multimode_draw_arrays] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_IBM_rasterpos_clip] && (extensionStrLength == 21) && strncmp(extensionStr, "GL_IBM_rasterpos_clip", extensionStrLength) == 0) { tunisGL.support[GL_IBM_rasterpos_clip] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_IBM_static_data] && (extensionStrLength == 18) && strncmp(extensionStr, "GL_IBM_static_data", extensionStrLength) == 0) { tunisGL.support[GL_IBM_static_data] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_IBM_texture_mirrored_repeat] && (extensionStrLength == 30) && strncmp(extensionStr, "GL_IBM_texture_mirrored_repeat", extensionStrLength) == 0) { tunisGL.support[GL_IBM_texture_mirrored_repeat] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_IBM_vertex_array_lists] && (extensionStrLength == 25) && strncmp(extensionStr, "GL_IBM_vertex_array_lists", extensionStrLength) == 0) { tunisGL.support[GL_IBM_vertex_array_lists] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_INGR_blend_func_separate] && (extensionStrLength == 27) && strncmp(extensionStr, "GL_INGR_blend_func_separate", extensionStrLength) == 0) { tunisGL.support[GL_INGR_blend_func_separate] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_INGR_color_clamp] && (extensionStrLength == 19) && strncmp(extensionStr, "GL_INGR_color_clamp", extensionStrLength) == 0) { tunisGL.support[GL_INGR_color_clamp] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_INGR_interlace_read] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_INGR_interlace_read", extensionStrLength) == 0) { tunisGL.support[GL_INGR_interlace_read] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_INTEL_blackhole_render] && (extensionStrLength == 25) && strncmp(extensionStr, "GL_INTEL_blackhole_render", extensionStrLength) == 0) { tunisGL.support[GL_INTEL_blackhole_render] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_INTEL_conservative_rasterization] && (extensionStrLength == 35) && strncmp(extensionStr, "GL_INTEL_conservative_rasterization", extensionStrLength) == 0) { tunisGL.support[GL_INTEL_conservative_rasterization] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_INTEL_fragment_shader_ordering] && (extensionStrLength == 33) && strncmp(extensionStr, "GL_INTEL_fragment_shader_ordering", extensionStrLength) == 0) { tunisGL.support[GL_INTEL_fragment_shader_ordering] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_INTEL_framebuffer_CMAA] && (extensionStrLength == 25) && strncmp(extensionStr, "GL_INTEL_framebuffer_CMAA", extensionStrLength) == 0) { tunisGL.support[GL_INTEL_framebuffer_CMAA] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_INTEL_map_texture] && (extensionStrLength == 20) && strncmp(extensionStr, "GL_INTEL_map_texture", extensionStrLength) == 0) { tunisGL.support[GL_INTEL_map_texture] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_INTEL_parallel_arrays] && (extensionStrLength == 24) && strncmp(extensionStr, "GL_INTEL_parallel_arrays", extensionStrLength) == 0) { tunisGL.support[GL_INTEL_parallel_arrays] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_INTEL_performance_query] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_INTEL_performance_query", extensionStrLength) == 0) { tunisGL.support[GL_INTEL_performance_query] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_KHR_blend_equation_advanced] && (extensionStrLength == 30) && strncmp(extensionStr, "GL_KHR_blend_equation_advanced", extensionStrLength) == 0) { tunisGL.support[GL_KHR_blend_equation_advanced] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_KHR_blend_equation_advanced_coherent] && (extensionStrLength == 39) && strncmp(extensionStr, "GL_KHR_blend_equation_advanced_coherent", extensionStrLength) == 0) { tunisGL.support[GL_KHR_blend_equation_advanced_coherent] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_KHR_context_flush_control] && (extensionStrLength == 28) && strncmp(extensionStr, "GL_KHR_context_flush_control", extensionStrLength) == 0) { tunisGL.support[GL_KHR_context_flush_control] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_KHR_debug] && (extensionStrLength == 12) && strncmp(extensionStr, "GL_KHR_debug", extensionStrLength) == 0) { tunisGL.support[GL_KHR_debug] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_KHR_no_error] && (extensionStrLength == 15) && strncmp(extensionStr, "GL_KHR_no_error", extensionStrLength) == 0) { tunisGL.support[GL_KHR_no_error] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_KHR_parallel_shader_compile] && (extensionStrLength == 30) && strncmp(extensionStr, "GL_KHR_parallel_shader_compile", extensionStrLength) == 0) { tunisGL.support[GL_KHR_parallel_shader_compile] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_KHR_robust_buffer_access_behavior] && (extensionStrLength == 36) && strncmp(extensionStr, "GL_KHR_robust_buffer_access_behavior", extensionStrLength) == 0) { tunisGL.support[GL_KHR_robust_buffer_access_behavior] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_KHR_robustness] && (extensionStrLength == 17) && strncmp(extensionStr, "GL_KHR_robustness", extensionStrLength) == 0) { tunisGL.support[GL_KHR_robustness] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_KHR_texture_compression_astc_hdr] && (extensionStrLength == 35) && strncmp(extensionStr, "GL_KHR_texture_compression_astc_hdr", extensionStrLength) == 0) { tunisGL.support[GL_KHR_texture_compression_astc_hdr] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_KHR_texture_compression_astc_ldr] && (extensionStrLength == 35) && strncmp(extensionStr, "GL_KHR_texture_compression_astc_ldr", extensionStrLength) == 0) { tunisGL.support[GL_KHR_texture_compression_astc_ldr] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_KHR_texture_compression_astc_sliced_3d] && (extensionStrLength == 41) && strncmp(extensionStr, "GL_KHR_texture_compression_astc_sliced_3d", extensionStrLength) == 0) { tunisGL.support[GL_KHR_texture_compression_astc_sliced_3d] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_KTX_buffer_region] && (extensionStrLength == 20) && strncmp(extensionStr, "GL_KTX_buffer_region", extensionStrLength) == 0) { tunisGL.support[GL_KTX_buffer_region] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_MESAX_texture_stack] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_MESAX_texture_stack", extensionStrLength) == 0) { tunisGL.support[GL_MESAX_texture_stack] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_MESA_pack_invert] && (extensionStrLength == 19) && strncmp(extensionStr, "GL_MESA_pack_invert", extensionStrLength) == 0) { tunisGL.support[GL_MESA_pack_invert] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_MESA_program_binary_formats] && (extensionStrLength == 30) && strncmp(extensionStr, "GL_MESA_program_binary_formats", extensionStrLength) == 0) { tunisGL.support[GL_MESA_program_binary_formats] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_MESA_resize_buffers] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_MESA_resize_buffers", extensionStrLength) == 0) { tunisGL.support[GL_MESA_resize_buffers] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_MESA_shader_integer_functions] && (extensionStrLength == 32) && strncmp(extensionStr, "GL_MESA_shader_integer_functions", extensionStrLength) == 0) { tunisGL.support[GL_MESA_shader_integer_functions] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_MESA_tile_raster_order] && (extensionStrLength == 25) && strncmp(extensionStr, "GL_MESA_tile_raster_order", extensionStrLength) == 0) { tunisGL.support[GL_MESA_tile_raster_order] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_MESA_window_pos] && (extensionStrLength == 18) && strncmp(extensionStr, "GL_MESA_window_pos", extensionStrLength) == 0) { tunisGL.support[GL_MESA_window_pos] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_MESA_ycbcr_texture] && (extensionStrLength == 21) && strncmp(extensionStr, "GL_MESA_ycbcr_texture", extensionStrLength) == 0) { tunisGL.support[GL_MESA_ycbcr_texture] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NVX_blend_equation_advanced_multi_draw_buffers] && (extensionStrLength == 49) && strncmp(extensionStr, "GL_NVX_blend_equation_advanced_multi_draw_buffers", extensionStrLength) == 0) { tunisGL.support[GL_NVX_blend_equation_advanced_multi_draw_buffers] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NVX_conditional_render] && (extensionStrLength == 25) && strncmp(extensionStr, "GL_NVX_conditional_render", extensionStrLength) == 0) { tunisGL.support[GL_NVX_conditional_render] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NVX_gpu_memory_info] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_NVX_gpu_memory_info", extensionStrLength) == 0) { tunisGL.support[GL_NVX_gpu_memory_info] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NVX_linked_gpu_multicast] && (extensionStrLength == 27) && strncmp(extensionStr, "GL_NVX_linked_gpu_multicast", extensionStrLength) == 0) { tunisGL.support[GL_NVX_linked_gpu_multicast] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_ES1_1_compatibility] && (extensionStrLength == 25) && strncmp(extensionStr, "GL_NV_ES1_1_compatibility", extensionStrLength) == 0) { tunisGL.support[GL_NV_ES1_1_compatibility] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_ES3_1_compatibility] && (extensionStrLength == 25) && strncmp(extensionStr, "GL_NV_ES3_1_compatibility", extensionStrLength) == 0) { tunisGL.support[GL_NV_ES3_1_compatibility] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_alpha_to_coverage_dither_control] && (extensionStrLength == 38) && strncmp(extensionStr, "GL_NV_alpha_to_coverage_dither_control", extensionStrLength) == 0) { tunisGL.support[GL_NV_alpha_to_coverage_dither_control] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_bindless_multi_draw_indirect] && (extensionStrLength == 34) && strncmp(extensionStr, "GL_NV_bindless_multi_draw_indirect", extensionStrLength) == 0) { tunisGL.support[GL_NV_bindless_multi_draw_indirect] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_bindless_multi_draw_indirect_count] && (extensionStrLength == 40) && strncmp(extensionStr, "GL_NV_bindless_multi_draw_indirect_count", extensionStrLength) == 0) { tunisGL.support[GL_NV_bindless_multi_draw_indirect_count] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_bindless_texture] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_NV_bindless_texture", extensionStrLength) == 0) { tunisGL.support[GL_NV_bindless_texture] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_blend_equation_advanced] && (extensionStrLength == 29) && strncmp(extensionStr, "GL_NV_blend_equation_advanced", extensionStrLength) == 0) { tunisGL.support[GL_NV_blend_equation_advanced] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_blend_equation_advanced_coherent] && (extensionStrLength == 38) && strncmp(extensionStr, "GL_NV_blend_equation_advanced_coherent", extensionStrLength) == 0) { tunisGL.support[GL_NV_blend_equation_advanced_coherent] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_blend_minmax_factor] && (extensionStrLength == 25) && strncmp(extensionStr, "GL_NV_blend_minmax_factor", extensionStrLength) == 0) { tunisGL.support[GL_NV_blend_minmax_factor] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_blend_square] && (extensionStrLength == 18) && strncmp(extensionStr, "GL_NV_blend_square", extensionStrLength) == 0) { tunisGL.support[GL_NV_blend_square] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_clip_space_w_scaling] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_NV_clip_space_w_scaling", extensionStrLength) == 0) { tunisGL.support[GL_NV_clip_space_w_scaling] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_command_list] && (extensionStrLength == 18) && strncmp(extensionStr, "GL_NV_command_list", extensionStrLength) == 0) { tunisGL.support[GL_NV_command_list] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_compute_program5] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_NV_compute_program5", extensionStrLength) == 0) { tunisGL.support[GL_NV_compute_program5] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_compute_shader_derivatives] && (extensionStrLength == 32) && strncmp(extensionStr, "GL_NV_compute_shader_derivatives", extensionStrLength) == 0) { tunisGL.support[GL_NV_compute_shader_derivatives] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_conditional_render] && (extensionStrLength == 24) && strncmp(extensionStr, "GL_NV_conditional_render", extensionStrLength) == 0) { tunisGL.support[GL_NV_conditional_render] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_conservative_raster] && (extensionStrLength == 25) && strncmp(extensionStr, "GL_NV_conservative_raster", extensionStrLength) == 0) { tunisGL.support[GL_NV_conservative_raster] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_conservative_raster_dilate] && (extensionStrLength == 32) && strncmp(extensionStr, "GL_NV_conservative_raster_dilate", extensionStrLength) == 0) { tunisGL.support[GL_NV_conservative_raster_dilate] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_conservative_raster_pre_snap] && (extensionStrLength == 34) && strncmp(extensionStr, "GL_NV_conservative_raster_pre_snap", extensionStrLength) == 0) { tunisGL.support[GL_NV_conservative_raster_pre_snap] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_conservative_raster_pre_snap_triangles] && (extensionStrLength == 44) && strncmp(extensionStr, "GL_NV_conservative_raster_pre_snap_triangles", extensionStrLength) == 0) { tunisGL.support[GL_NV_conservative_raster_pre_snap_triangles] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_conservative_raster_underestimation] && (extensionStrLength == 41) && strncmp(extensionStr, "GL_NV_conservative_raster_underestimation", extensionStrLength) == 0) { tunisGL.support[GL_NV_conservative_raster_underestimation] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_copy_depth_to_color] && (extensionStrLength == 25) && strncmp(extensionStr, "GL_NV_copy_depth_to_color", extensionStrLength) == 0) { tunisGL.support[GL_NV_copy_depth_to_color] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_copy_image] && (extensionStrLength == 16) && strncmp(extensionStr, "GL_NV_copy_image", extensionStrLength) == 0) { tunisGL.support[GL_NV_copy_image] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_deep_texture3D] && (extensionStrLength == 20) && strncmp(extensionStr, "GL_NV_deep_texture3D", extensionStrLength) == 0) { tunisGL.support[GL_NV_deep_texture3D] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_depth_buffer_float] && (extensionStrLength == 24) && strncmp(extensionStr, "GL_NV_depth_buffer_float", extensionStrLength) == 0) { tunisGL.support[GL_NV_depth_buffer_float] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_depth_clamp] && (extensionStrLength == 17) && strncmp(extensionStr, "GL_NV_depth_clamp", extensionStrLength) == 0) { tunisGL.support[GL_NV_depth_clamp] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_draw_texture] && (extensionStrLength == 18) && strncmp(extensionStr, "GL_NV_draw_texture", extensionStrLength) == 0) { tunisGL.support[GL_NV_draw_texture] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_draw_vulkan_image] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_NV_draw_vulkan_image", extensionStrLength) == 0) { tunisGL.support[GL_NV_draw_vulkan_image] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_evaluators] && (extensionStrLength == 16) && strncmp(extensionStr, "GL_NV_evaluators", extensionStrLength) == 0) { tunisGL.support[GL_NV_evaluators] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_explicit_multisample] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_NV_explicit_multisample", extensionStrLength) == 0) { tunisGL.support[GL_NV_explicit_multisample] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_fence] && (extensionStrLength == 11) && strncmp(extensionStr, "GL_NV_fence", extensionStrLength) == 0) { tunisGL.support[GL_NV_fence] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_fill_rectangle] && (extensionStrLength == 20) && strncmp(extensionStr, "GL_NV_fill_rectangle", extensionStrLength) == 0) { tunisGL.support[GL_NV_fill_rectangle] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_float_buffer] && (extensionStrLength == 18) && strncmp(extensionStr, "GL_NV_float_buffer", extensionStrLength) == 0) { tunisGL.support[GL_NV_float_buffer] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_fog_distance] && (extensionStrLength == 18) && strncmp(extensionStr, "GL_NV_fog_distance", extensionStrLength) == 0) { tunisGL.support[GL_NV_fog_distance] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_fragment_coverage_to_color] && (extensionStrLength == 32) && strncmp(extensionStr, "GL_NV_fragment_coverage_to_color", extensionStrLength) == 0) { tunisGL.support[GL_NV_fragment_coverage_to_color] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_fragment_program] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_NV_fragment_program", extensionStrLength) == 0) { tunisGL.support[GL_NV_fragment_program] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_fragment_program2] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_NV_fragment_program2", extensionStrLength) == 0) { tunisGL.support[GL_NV_fragment_program2] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_fragment_program4] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_NV_fragment_program4", extensionStrLength) == 0) { tunisGL.support[GL_NV_fragment_program4] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_fragment_program_option] && (extensionStrLength == 29) && strncmp(extensionStr, "GL_NV_fragment_program_option", extensionStrLength) == 0) { tunisGL.support[GL_NV_fragment_program_option] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_fragment_shader_barycentric] && (extensionStrLength == 33) && strncmp(extensionStr, "GL_NV_fragment_shader_barycentric", extensionStrLength) == 0) { tunisGL.support[GL_NV_fragment_shader_barycentric] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_fragment_shader_interlock] && (extensionStrLength == 31) && strncmp(extensionStr, "GL_NV_fragment_shader_interlock", extensionStrLength) == 0) { tunisGL.support[GL_NV_fragment_shader_interlock] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_framebuffer_mixed_samples] && (extensionStrLength == 31) && strncmp(extensionStr, "GL_NV_framebuffer_mixed_samples", extensionStrLength) == 0) { tunisGL.support[GL_NV_framebuffer_mixed_samples] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_framebuffer_multisample_coverage] && (extensionStrLength == 38) && strncmp(extensionStr, "GL_NV_framebuffer_multisample_coverage", extensionStrLength) == 0) { tunisGL.support[GL_NV_framebuffer_multisample_coverage] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_geometry_program4] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_NV_geometry_program4", extensionStrLength) == 0) { tunisGL.support[GL_NV_geometry_program4] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_geometry_shader4] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_NV_geometry_shader4", extensionStrLength) == 0) { tunisGL.support[GL_NV_geometry_shader4] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_geometry_shader_passthrough] && (extensionStrLength == 33) && strncmp(extensionStr, "GL_NV_geometry_shader_passthrough", extensionStrLength) == 0) { tunisGL.support[GL_NV_geometry_shader_passthrough] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_gpu_multicast] && (extensionStrLength == 19) && strncmp(extensionStr, "GL_NV_gpu_multicast", extensionStrLength) == 0) { tunisGL.support[GL_NV_gpu_multicast] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_gpu_program4] && (extensionStrLength == 18) && strncmp(extensionStr, "GL_NV_gpu_program4", extensionStrLength) == 0) { tunisGL.support[GL_NV_gpu_program4] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_gpu_program5] && (extensionStrLength == 18) && strncmp(extensionStr, "GL_NV_gpu_program5", extensionStrLength) == 0) { tunisGL.support[GL_NV_gpu_program5] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_gpu_program5_mem_extended] && (extensionStrLength == 31) && strncmp(extensionStr, "GL_NV_gpu_program5_mem_extended", extensionStrLength) == 0) { tunisGL.support[GL_NV_gpu_program5_mem_extended] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_gpu_shader5] && (extensionStrLength == 17) && strncmp(extensionStr, "GL_NV_gpu_shader5", extensionStrLength) == 0) { tunisGL.support[GL_NV_gpu_shader5] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_half_float] && (extensionStrLength == 16) && strncmp(extensionStr, "GL_NV_half_float", extensionStrLength) == 0) { tunisGL.support[GL_NV_half_float] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_internalformat_sample_query] && (extensionStrLength == 33) && strncmp(extensionStr, "GL_NV_internalformat_sample_query", extensionStrLength) == 0) { tunisGL.support[GL_NV_internalformat_sample_query] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_light_max_exponent] && (extensionStrLength == 24) && strncmp(extensionStr, "GL_NV_light_max_exponent", extensionStrLength) == 0) { tunisGL.support[GL_NV_light_max_exponent] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_memory_attachment] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_NV_memory_attachment", extensionStrLength) == 0) { tunisGL.support[GL_NV_memory_attachment] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_mesh_shader] && (extensionStrLength == 17) && strncmp(extensionStr, "GL_NV_mesh_shader", extensionStrLength) == 0) { tunisGL.support[GL_NV_mesh_shader] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_multisample_coverage] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_NV_multisample_coverage", extensionStrLength) == 0) { tunisGL.support[GL_NV_multisample_coverage] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_multisample_filter_hint] && (extensionStrLength == 29) && strncmp(extensionStr, "GL_NV_multisample_filter_hint", extensionStrLength) == 0) { tunisGL.support[GL_NV_multisample_filter_hint] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_occlusion_query] && (extensionStrLength == 21) && strncmp(extensionStr, "GL_NV_occlusion_query", extensionStrLength) == 0) { tunisGL.support[GL_NV_occlusion_query] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_packed_depth_stencil] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_NV_packed_depth_stencil", extensionStrLength) == 0) { tunisGL.support[GL_NV_packed_depth_stencil] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_parameter_buffer_object] && (extensionStrLength == 29) && strncmp(extensionStr, "GL_NV_parameter_buffer_object", extensionStrLength) == 0) { tunisGL.support[GL_NV_parameter_buffer_object] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_parameter_buffer_object2] && (extensionStrLength == 30) && strncmp(extensionStr, "GL_NV_parameter_buffer_object2", extensionStrLength) == 0) { tunisGL.support[GL_NV_parameter_buffer_object2] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_path_rendering] && (extensionStrLength == 20) && strncmp(extensionStr, "GL_NV_path_rendering", extensionStrLength) == 0) { tunisGL.support[GL_NV_path_rendering] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_path_rendering_shared_edge] && (extensionStrLength == 32) && strncmp(extensionStr, "GL_NV_path_rendering_shared_edge", extensionStrLength) == 0) { tunisGL.support[GL_NV_path_rendering_shared_edge] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_pixel_data_range] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_NV_pixel_data_range", extensionStrLength) == 0) { tunisGL.support[GL_NV_pixel_data_range] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_point_sprite] && (extensionStrLength == 18) && strncmp(extensionStr, "GL_NV_point_sprite", extensionStrLength) == 0) { tunisGL.support[GL_NV_point_sprite] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_present_video] && (extensionStrLength == 19) && strncmp(extensionStr, "GL_NV_present_video", extensionStrLength) == 0) { tunisGL.support[GL_NV_present_video] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_primitive_restart] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_NV_primitive_restart", extensionStrLength) == 0) { tunisGL.support[GL_NV_primitive_restart] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_query_resource] && (extensionStrLength == 20) && strncmp(extensionStr, "GL_NV_query_resource", extensionStrLength) == 0) { tunisGL.support[GL_NV_query_resource] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_query_resource_tag] && (extensionStrLength == 24) && strncmp(extensionStr, "GL_NV_query_resource_tag", extensionStrLength) == 0) { tunisGL.support[GL_NV_query_resource_tag] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_register_combiners] && (extensionStrLength == 24) && strncmp(extensionStr, "GL_NV_register_combiners", extensionStrLength) == 0) { tunisGL.support[GL_NV_register_combiners] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_register_combiners2] && (extensionStrLength == 25) && strncmp(extensionStr, "GL_NV_register_combiners2", extensionStrLength) == 0) { tunisGL.support[GL_NV_register_combiners2] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_representative_fragment_test] && (extensionStrLength == 34) && strncmp(extensionStr, "GL_NV_representative_fragment_test", extensionStrLength) == 0) { tunisGL.support[GL_NV_representative_fragment_test] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_robustness_video_memory_purge] && (extensionStrLength == 35) && strncmp(extensionStr, "GL_NV_robustness_video_memory_purge", extensionStrLength) == 0) { tunisGL.support[GL_NV_robustness_video_memory_purge] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_sample_locations] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_NV_sample_locations", extensionStrLength) == 0) { tunisGL.support[GL_NV_sample_locations] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_sample_mask_override_coverage] && (extensionStrLength == 35) && strncmp(extensionStr, "GL_NV_sample_mask_override_coverage", extensionStrLength) == 0) { tunisGL.support[GL_NV_sample_mask_override_coverage] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_scissor_exclusive] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_NV_scissor_exclusive", extensionStrLength) == 0) { tunisGL.support[GL_NV_scissor_exclusive] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_shader_atomic_counters] && (extensionStrLength == 28) && strncmp(extensionStr, "GL_NV_shader_atomic_counters", extensionStrLength) == 0) { tunisGL.support[GL_NV_shader_atomic_counters] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_shader_atomic_float] && (extensionStrLength == 25) && strncmp(extensionStr, "GL_NV_shader_atomic_float", extensionStrLength) == 0) { tunisGL.support[GL_NV_shader_atomic_float] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_shader_atomic_float64] && (extensionStrLength == 27) && strncmp(extensionStr, "GL_NV_shader_atomic_float64", extensionStrLength) == 0) { tunisGL.support[GL_NV_shader_atomic_float64] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_shader_atomic_fp16_vector] && (extensionStrLength == 31) && strncmp(extensionStr, "GL_NV_shader_atomic_fp16_vector", extensionStrLength) == 0) { tunisGL.support[GL_NV_shader_atomic_fp16_vector] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_shader_atomic_int64] && (extensionStrLength == 25) && strncmp(extensionStr, "GL_NV_shader_atomic_int64", extensionStrLength) == 0) { tunisGL.support[GL_NV_shader_atomic_int64] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_shader_buffer_load] && (extensionStrLength == 24) && strncmp(extensionStr, "GL_NV_shader_buffer_load", extensionStrLength) == 0) { tunisGL.support[GL_NV_shader_buffer_load] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_shader_buffer_store] && (extensionStrLength == 25) && strncmp(extensionStr, "GL_NV_shader_buffer_store", extensionStrLength) == 0) { tunisGL.support[GL_NV_shader_buffer_store] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_shader_storage_buffer_object] && (extensionStrLength == 34) && strncmp(extensionStr, "GL_NV_shader_storage_buffer_object", extensionStrLength) == 0) { tunisGL.support[GL_NV_shader_storage_buffer_object] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_shader_texture_footprint] && (extensionStrLength == 30) && strncmp(extensionStr, "GL_NV_shader_texture_footprint", extensionStrLength) == 0) { tunisGL.support[GL_NV_shader_texture_footprint] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_shader_thread_group] && (extensionStrLength == 25) && strncmp(extensionStr, "GL_NV_shader_thread_group", extensionStrLength) == 0) { tunisGL.support[GL_NV_shader_thread_group] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_shader_thread_shuffle] && (extensionStrLength == 27) && strncmp(extensionStr, "GL_NV_shader_thread_shuffle", extensionStrLength) == 0) { tunisGL.support[GL_NV_shader_thread_shuffle] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_shading_rate_image] && (extensionStrLength == 24) && strncmp(extensionStr, "GL_NV_shading_rate_image", extensionStrLength) == 0) { tunisGL.support[GL_NV_shading_rate_image] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_stereo_view_rendering] && (extensionStrLength == 27) && strncmp(extensionStr, "GL_NV_stereo_view_rendering", extensionStrLength) == 0) { tunisGL.support[GL_NV_stereo_view_rendering] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_tessellation_program5] && (extensionStrLength == 27) && strncmp(extensionStr, "GL_NV_tessellation_program5", extensionStrLength) == 0) { tunisGL.support[GL_NV_tessellation_program5] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_texgen_emboss] && (extensionStrLength == 19) && strncmp(extensionStr, "GL_NV_texgen_emboss", extensionStrLength) == 0) { tunisGL.support[GL_NV_texgen_emboss] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_texgen_reflection] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_NV_texgen_reflection", extensionStrLength) == 0) { tunisGL.support[GL_NV_texgen_reflection] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_texture_barrier] && (extensionStrLength == 21) && strncmp(extensionStr, "GL_NV_texture_barrier", extensionStrLength) == 0) { tunisGL.support[GL_NV_texture_barrier] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_texture_compression_vtc] && (extensionStrLength == 29) && strncmp(extensionStr, "GL_NV_texture_compression_vtc", extensionStrLength) == 0) { tunisGL.support[GL_NV_texture_compression_vtc] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_texture_env_combine4] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_NV_texture_env_combine4", extensionStrLength) == 0) { tunisGL.support[GL_NV_texture_env_combine4] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_texture_expand_normal] && (extensionStrLength == 27) && strncmp(extensionStr, "GL_NV_texture_expand_normal", extensionStrLength) == 0) { tunisGL.support[GL_NV_texture_expand_normal] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_texture_multisample] && (extensionStrLength == 25) && strncmp(extensionStr, "GL_NV_texture_multisample", extensionStrLength) == 0) { tunisGL.support[GL_NV_texture_multisample] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_texture_rectangle] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_NV_texture_rectangle", extensionStrLength) == 0) { tunisGL.support[GL_NV_texture_rectangle] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_texture_rectangle_compressed] && (extensionStrLength == 34) && strncmp(extensionStr, "GL_NV_texture_rectangle_compressed", extensionStrLength) == 0) { tunisGL.support[GL_NV_texture_rectangle_compressed] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_texture_shader] && (extensionStrLength == 20) && strncmp(extensionStr, "GL_NV_texture_shader", extensionStrLength) == 0) { tunisGL.support[GL_NV_texture_shader] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_texture_shader2] && (extensionStrLength == 21) && strncmp(extensionStr, "GL_NV_texture_shader2", extensionStrLength) == 0) { tunisGL.support[GL_NV_texture_shader2] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_texture_shader3] && (extensionStrLength == 21) && strncmp(extensionStr, "GL_NV_texture_shader3", extensionStrLength) == 0) { tunisGL.support[GL_NV_texture_shader3] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_transform_feedback] && (extensionStrLength == 24) && strncmp(extensionStr, "GL_NV_transform_feedback", extensionStrLength) == 0) { tunisGL.support[GL_NV_transform_feedback] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_transform_feedback2] && (extensionStrLength == 25) && strncmp(extensionStr, "GL_NV_transform_feedback2", extensionStrLength) == 0) { tunisGL.support[GL_NV_transform_feedback2] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_uniform_buffer_unified_memory] && (extensionStrLength == 35) && strncmp(extensionStr, "GL_NV_uniform_buffer_unified_memory", extensionStrLength) == 0) { tunisGL.support[GL_NV_uniform_buffer_unified_memory] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_vdpau_interop] && (extensionStrLength == 19) && strncmp(extensionStr, "GL_NV_vdpau_interop", extensionStrLength) == 0) { tunisGL.support[GL_NV_vdpau_interop] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_vertex_array_range] && (extensionStrLength == 24) && strncmp(extensionStr, "GL_NV_vertex_array_range", extensionStrLength) == 0) { tunisGL.support[GL_NV_vertex_array_range] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_vertex_array_range2] && (extensionStrLength == 25) && strncmp(extensionStr, "GL_NV_vertex_array_range2", extensionStrLength) == 0) { tunisGL.support[GL_NV_vertex_array_range2] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_vertex_attrib_integer_64bit] && (extensionStrLength == 33) && strncmp(extensionStr, "GL_NV_vertex_attrib_integer_64bit", extensionStrLength) == 0) { tunisGL.support[GL_NV_vertex_attrib_integer_64bit] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_vertex_buffer_unified_memory] && (extensionStrLength == 34) && strncmp(extensionStr, "GL_NV_vertex_buffer_unified_memory", extensionStrLength) == 0) { tunisGL.support[GL_NV_vertex_buffer_unified_memory] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_vertex_program] && (extensionStrLength == 20) && strncmp(extensionStr, "GL_NV_vertex_program", extensionStrLength) == 0) { tunisGL.support[GL_NV_vertex_program] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_vertex_program1_1] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_NV_vertex_program1_1", extensionStrLength) == 0) { tunisGL.support[GL_NV_vertex_program1_1] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_vertex_program2] && (extensionStrLength == 21) && strncmp(extensionStr, "GL_NV_vertex_program2", extensionStrLength) == 0) { tunisGL.support[GL_NV_vertex_program2] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_vertex_program2_option] && (extensionStrLength == 28) && strncmp(extensionStr, "GL_NV_vertex_program2_option", extensionStrLength) == 0) { tunisGL.support[GL_NV_vertex_program2_option] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_vertex_program3] && (extensionStrLength == 21) && strncmp(extensionStr, "GL_NV_vertex_program3", extensionStrLength) == 0) { tunisGL.support[GL_NV_vertex_program3] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_vertex_program4] && (extensionStrLength == 21) && strncmp(extensionStr, "GL_NV_vertex_program4", extensionStrLength) == 0) { tunisGL.support[GL_NV_vertex_program4] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_video_capture] && (extensionStrLength == 19) && strncmp(extensionStr, "GL_NV_video_capture", extensionStrLength) == 0) { tunisGL.support[GL_NV_video_capture] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_viewport_array2] && (extensionStrLength == 21) && strncmp(extensionStr, "GL_NV_viewport_array2", extensionStrLength) == 0) { tunisGL.support[GL_NV_viewport_array2] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_NV_viewport_swizzle] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_NV_viewport_swizzle", extensionStrLength) == 0) { tunisGL.support[GL_NV_viewport_swizzle] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_OES_byte_coordinates] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_OES_byte_coordinates", extensionStrLength) == 0) { tunisGL.support[GL_OES_byte_coordinates] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_OES_compressed_paletted_texture] && (extensionStrLength == 34) && strncmp(extensionStr, "GL_OES_compressed_paletted_texture", extensionStrLength) == 0) { tunisGL.support[GL_OES_compressed_paletted_texture] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_OES_fixed_point] && (extensionStrLength == 18) && strncmp(extensionStr, "GL_OES_fixed_point", extensionStrLength) == 0) { tunisGL.support[GL_OES_fixed_point] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_OES_query_matrix] && (extensionStrLength == 19) && strncmp(extensionStr, "GL_OES_query_matrix", extensionStrLength) == 0) { tunisGL.support[GL_OES_query_matrix] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_OES_read_format] && (extensionStrLength == 18) && strncmp(extensionStr, "GL_OES_read_format", extensionStrLength) == 0) { tunisGL.support[GL_OES_read_format] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_OES_single_precision] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_OES_single_precision", extensionStrLength) == 0) { tunisGL.support[GL_OES_single_precision] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_OML_interlace] && (extensionStrLength == 16) && strncmp(extensionStr, "GL_OML_interlace", extensionStrLength) == 0) { tunisGL.support[GL_OML_interlace] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_OML_resample] && (extensionStrLength == 15) && strncmp(extensionStr, "GL_OML_resample", extensionStrLength) == 0) { tunisGL.support[GL_OML_resample] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_OML_subsample] && (extensionStrLength == 16) && strncmp(extensionStr, "GL_OML_subsample", extensionStrLength) == 0) { tunisGL.support[GL_OML_subsample] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_OVR_multiview] && (extensionStrLength == 16) && strncmp(extensionStr, "GL_OVR_multiview", extensionStrLength) == 0) { tunisGL.support[GL_OVR_multiview] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_OVR_multiview2] && (extensionStrLength == 17) && strncmp(extensionStr, "GL_OVR_multiview2", extensionStrLength) == 0) { tunisGL.support[GL_OVR_multiview2] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_PGI_misc_hints] && (extensionStrLength == 17) && strncmp(extensionStr, "GL_PGI_misc_hints", extensionStrLength) == 0) { tunisGL.support[GL_PGI_misc_hints] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_PGI_vertex_hints] && (extensionStrLength == 19) && strncmp(extensionStr, "GL_PGI_vertex_hints", extensionStrLength) == 0) { tunisGL.support[GL_PGI_vertex_hints] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_REND_screen_coordinates] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_REND_screen_coordinates", extensionStrLength) == 0) { tunisGL.support[GL_REND_screen_coordinates] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_S3_s3tc] && (extensionStrLength == 10) && strncmp(extensionStr, "GL_S3_s3tc", extensionStrLength) == 0) { tunisGL.support[GL_S3_s3tc] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_SGIS_detail_texture] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_SGIS_detail_texture", extensionStrLength) == 0) { tunisGL.support[GL_SGIS_detail_texture] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_SGIS_fog_function] && (extensionStrLength == 20) && strncmp(extensionStr, "GL_SGIS_fog_function", extensionStrLength) == 0) { tunisGL.support[GL_SGIS_fog_function] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_SGIS_generate_mipmap] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_SGIS_generate_mipmap", extensionStrLength) == 0) { tunisGL.support[GL_SGIS_generate_mipmap] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_SGIS_multisample] && (extensionStrLength == 19) && strncmp(extensionStr, "GL_SGIS_multisample", extensionStrLength) == 0) { tunisGL.support[GL_SGIS_multisample] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_SGIS_pixel_texture] && (extensionStrLength == 21) && strncmp(extensionStr, "GL_SGIS_pixel_texture", extensionStrLength) == 0) { tunisGL.support[GL_SGIS_pixel_texture] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_SGIS_point_line_texgen] && (extensionStrLength == 25) && strncmp(extensionStr, "GL_SGIS_point_line_texgen", extensionStrLength) == 0) { tunisGL.support[GL_SGIS_point_line_texgen] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_SGIS_point_parameters] && (extensionStrLength == 24) && strncmp(extensionStr, "GL_SGIS_point_parameters", extensionStrLength) == 0) { tunisGL.support[GL_SGIS_point_parameters] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_SGIS_sharpen_texture] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_SGIS_sharpen_texture", extensionStrLength) == 0) { tunisGL.support[GL_SGIS_sharpen_texture] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_SGIS_texture4D] && (extensionStrLength == 17) && strncmp(extensionStr, "GL_SGIS_texture4D", extensionStrLength) == 0) { tunisGL.support[GL_SGIS_texture4D] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_SGIS_texture_border_clamp] && (extensionStrLength == 28) && strncmp(extensionStr, "GL_SGIS_texture_border_clamp", extensionStrLength) == 0) { tunisGL.support[GL_SGIS_texture_border_clamp] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_SGIS_texture_color_mask] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_SGIS_texture_color_mask", extensionStrLength) == 0) { tunisGL.support[GL_SGIS_texture_color_mask] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_SGIS_texture_edge_clamp] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_SGIS_texture_edge_clamp", extensionStrLength) == 0) { tunisGL.support[GL_SGIS_texture_edge_clamp] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_SGIS_texture_filter4] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_SGIS_texture_filter4", extensionStrLength) == 0) { tunisGL.support[GL_SGIS_texture_filter4] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_SGIS_texture_lod] && (extensionStrLength == 19) && strncmp(extensionStr, "GL_SGIS_texture_lod", extensionStrLength) == 0) { tunisGL.support[GL_SGIS_texture_lod] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_SGIS_texture_select] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_SGIS_texture_select", extensionStrLength) == 0) { tunisGL.support[GL_SGIS_texture_select] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_SGIX_async] && (extensionStrLength == 13) && strncmp(extensionStr, "GL_SGIX_async", extensionStrLength) == 0) { tunisGL.support[GL_SGIX_async] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_SGIX_async_histogram] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_SGIX_async_histogram", extensionStrLength) == 0) { tunisGL.support[GL_SGIX_async_histogram] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_SGIX_async_pixel] && (extensionStrLength == 19) && strncmp(extensionStr, "GL_SGIX_async_pixel", extensionStrLength) == 0) { tunisGL.support[GL_SGIX_async_pixel] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_SGIX_blend_alpha_minmax] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_SGIX_blend_alpha_minmax", extensionStrLength) == 0) { tunisGL.support[GL_SGIX_blend_alpha_minmax] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_SGIX_calligraphic_fragment] && (extensionStrLength == 29) && strncmp(extensionStr, "GL_SGIX_calligraphic_fragment", extensionStrLength) == 0) { tunisGL.support[GL_SGIX_calligraphic_fragment] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_SGIX_clipmap] && (extensionStrLength == 15) && strncmp(extensionStr, "GL_SGIX_clipmap", extensionStrLength) == 0) { tunisGL.support[GL_SGIX_clipmap] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_SGIX_convolution_accuracy] && (extensionStrLength == 28) && strncmp(extensionStr, "GL_SGIX_convolution_accuracy", extensionStrLength) == 0) { tunisGL.support[GL_SGIX_convolution_accuracy] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_SGIX_depth_pass_instrument] && (extensionStrLength == 29) && strncmp(extensionStr, "GL_SGIX_depth_pass_instrument", extensionStrLength) == 0) { tunisGL.support[GL_SGIX_depth_pass_instrument] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_SGIX_depth_texture] && (extensionStrLength == 21) && strncmp(extensionStr, "GL_SGIX_depth_texture", extensionStrLength) == 0) { tunisGL.support[GL_SGIX_depth_texture] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_SGIX_flush_raster] && (extensionStrLength == 20) && strncmp(extensionStr, "GL_SGIX_flush_raster", extensionStrLength) == 0) { tunisGL.support[GL_SGIX_flush_raster] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_SGIX_fog_offset] && (extensionStrLength == 18) && strncmp(extensionStr, "GL_SGIX_fog_offset", extensionStrLength) == 0) { tunisGL.support[GL_SGIX_fog_offset] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_SGIX_fragment_lighting] && (extensionStrLength == 25) && strncmp(extensionStr, "GL_SGIX_fragment_lighting", extensionStrLength) == 0) { tunisGL.support[GL_SGIX_fragment_lighting] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_SGIX_framezoom] && (extensionStrLength == 17) && strncmp(extensionStr, "GL_SGIX_framezoom", extensionStrLength) == 0) { tunisGL.support[GL_SGIX_framezoom] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_SGIX_igloo_interface] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_SGIX_igloo_interface", extensionStrLength) == 0) { tunisGL.support[GL_SGIX_igloo_interface] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_SGIX_instruments] && (extensionStrLength == 19) && strncmp(extensionStr, "GL_SGIX_instruments", extensionStrLength) == 0) { tunisGL.support[GL_SGIX_instruments] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_SGIX_interlace] && (extensionStrLength == 17) && strncmp(extensionStr, "GL_SGIX_interlace", extensionStrLength) == 0) { tunisGL.support[GL_SGIX_interlace] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_SGIX_ir_instrument1] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_SGIX_ir_instrument1", extensionStrLength) == 0) { tunisGL.support[GL_SGIX_ir_instrument1] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_SGIX_list_priority] && (extensionStrLength == 21) && strncmp(extensionStr, "GL_SGIX_list_priority", extensionStrLength) == 0) { tunisGL.support[GL_SGIX_list_priority] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_SGIX_pixel_texture] && (extensionStrLength == 21) && strncmp(extensionStr, "GL_SGIX_pixel_texture", extensionStrLength) == 0) { tunisGL.support[GL_SGIX_pixel_texture] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_SGIX_pixel_tiles] && (extensionStrLength == 19) && strncmp(extensionStr, "GL_SGIX_pixel_tiles", extensionStrLength) == 0) { tunisGL.support[GL_SGIX_pixel_tiles] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_SGIX_polynomial_ffd] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_SGIX_polynomial_ffd", extensionStrLength) == 0) { tunisGL.support[GL_SGIX_polynomial_ffd] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_SGIX_reference_plane] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_SGIX_reference_plane", extensionStrLength) == 0) { tunisGL.support[GL_SGIX_reference_plane] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_SGIX_resample] && (extensionStrLength == 16) && strncmp(extensionStr, "GL_SGIX_resample", extensionStrLength) == 0) { tunisGL.support[GL_SGIX_resample] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_SGIX_scalebias_hint] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_SGIX_scalebias_hint", extensionStrLength) == 0) { tunisGL.support[GL_SGIX_scalebias_hint] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_SGIX_shadow] && (extensionStrLength == 14) && strncmp(extensionStr, "GL_SGIX_shadow", extensionStrLength) == 0) { tunisGL.support[GL_SGIX_shadow] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_SGIX_shadow_ambient] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_SGIX_shadow_ambient", extensionStrLength) == 0) { tunisGL.support[GL_SGIX_shadow_ambient] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_SGIX_sprite] && (extensionStrLength == 14) && strncmp(extensionStr, "GL_SGIX_sprite", extensionStrLength) == 0) { tunisGL.support[GL_SGIX_sprite] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_SGIX_subsample] && (extensionStrLength == 17) && strncmp(extensionStr, "GL_SGIX_subsample", extensionStrLength) == 0) { tunisGL.support[GL_SGIX_subsample] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_SGIX_tag_sample_buffer] && (extensionStrLength == 25) && strncmp(extensionStr, "GL_SGIX_tag_sample_buffer", extensionStrLength) == 0) { tunisGL.support[GL_SGIX_tag_sample_buffer] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_SGIX_texture_add_env] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_SGIX_texture_add_env", extensionStrLength) == 0) { tunisGL.support[GL_SGIX_texture_add_env] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_SGIX_texture_coordinate_clamp] && (extensionStrLength == 32) && strncmp(extensionStr, "GL_SGIX_texture_coordinate_clamp", extensionStrLength) == 0) { tunisGL.support[GL_SGIX_texture_coordinate_clamp] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_SGIX_texture_lod_bias] && (extensionStrLength == 24) && strncmp(extensionStr, "GL_SGIX_texture_lod_bias", extensionStrLength) == 0) { tunisGL.support[GL_SGIX_texture_lod_bias] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_SGIX_texture_multi_buffer] && (extensionStrLength == 28) && strncmp(extensionStr, "GL_SGIX_texture_multi_buffer", extensionStrLength) == 0) { tunisGL.support[GL_SGIX_texture_multi_buffer] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_SGIX_texture_scale_bias] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_SGIX_texture_scale_bias", extensionStrLength) == 0) { tunisGL.support[GL_SGIX_texture_scale_bias] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_SGIX_vertex_preclip] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_SGIX_vertex_preclip", extensionStrLength) == 0) { tunisGL.support[GL_SGIX_vertex_preclip] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_SGIX_ycrcb] && (extensionStrLength == 13) && strncmp(extensionStr, "GL_SGIX_ycrcb", extensionStrLength) == 0) { tunisGL.support[GL_SGIX_ycrcb] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_SGIX_ycrcb_subsample] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_SGIX_ycrcb_subsample", extensionStrLength) == 0) { tunisGL.support[GL_SGIX_ycrcb_subsample] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_SGIX_ycrcba] && (extensionStrLength == 14) && strncmp(extensionStr, "GL_SGIX_ycrcba", extensionStrLength) == 0) { tunisGL.support[GL_SGIX_ycrcba] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_SGI_color_matrix] && (extensionStrLength == 19) && strncmp(extensionStr, "GL_SGI_color_matrix", extensionStrLength) == 0) { tunisGL.support[GL_SGI_color_matrix] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_SGI_color_table] && (extensionStrLength == 18) && strncmp(extensionStr, "GL_SGI_color_table", extensionStrLength) == 0) { tunisGL.support[GL_SGI_color_table] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_SGI_texture_color_table] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_SGI_texture_color_table", extensionStrLength) == 0) { tunisGL.support[GL_SGI_texture_color_table] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_SUNX_constant_data] && (extensionStrLength == 21) && strncmp(extensionStr, "GL_SUNX_constant_data", extensionStrLength) == 0) { tunisGL.support[GL_SUNX_constant_data] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_SUN_convolution_border_modes] && (extensionStrLength == 31) && strncmp(extensionStr, "GL_SUN_convolution_border_modes", extensionStrLength) == 0) { tunisGL.support[GL_SUN_convolution_border_modes] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_SUN_global_alpha] && (extensionStrLength == 19) && strncmp(extensionStr, "GL_SUN_global_alpha", extensionStrLength) == 0) { tunisGL.support[GL_SUN_global_alpha] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_SUN_mesh_array] && (extensionStrLength == 17) && strncmp(extensionStr, "GL_SUN_mesh_array", extensionStrLength) == 0) { tunisGL.support[GL_SUN_mesh_array] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_SUN_slice_accum] && (extensionStrLength == 18) && strncmp(extensionStr, "GL_SUN_slice_accum", extensionStrLength) == 0) { tunisGL.support[GL_SUN_slice_accum] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_SUN_triangle_list] && (extensionStrLength == 20) && strncmp(extensionStr, "GL_SUN_triangle_list", extensionStrLength) == 0) { tunisGL.support[GL_SUN_triangle_list] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_SUN_vertex] && (extensionStrLength == 13) && strncmp(extensionStr, "GL_SUN_vertex", extensionStrLength) == 0) { tunisGL.support[GL_SUN_vertex] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_WIN_phong_shading] && (extensionStrLength == 20) && strncmp(extensionStr, "GL_WIN_phong_shading", extensionStrLength) == 0) { tunisGL.support[GL_WIN_phong_shading] = KHRONOS_TRUE; return; }
        if (!tunisGL.support[GL_WIN_specular_fog] && (extensionStrLength == 19) && strncmp(extensionStr, "GL_WIN_specular_fog", extensionStrLength) == 0) { tunisGL.support[GL_WIN_specular_fog] = KHRONOS_TRUE; return; }

    }
#if !defined(NDEBUG)
    fprintf(stderr, "tunisGLInit() : Found unwrangled extension: %.*s\n", (int)extensionStrLength, extensionStr);
#endif
}

khronos_int8_t tunisGLInit(void) {
    khronos_int8_t  isGLES = KHRONOS_FALSE;
    const char*     version = NULL;
    khronos_int32_t versionMajor = -1;
    khronos_int32_t versionMinor = -1;

#if !defined(NDEBUG)
    clock_t start = clock();
#endif

#if !defined(__EMSCRIPTEN__)
    if (s_tunisGLLib == NULL)
    {
#if defined(_WIN32)
    #if !defined(IS_UWP)
        s_tunisGLLib = LoadLibraryA(TEXT("opengl32.dll"));
    #endif
#else
        s_tunisGLLib = dlopen("libGL.so.1", RTLD_LAZY | RTLD_GLOBAL);
        if (s_tunisGLLib == NULL) s_tunisGLLib = dlopen("libGLESv3.so", RTLD_LAZY | RTLD_GLOBAL);
        if (s_tunisGLLib == NULL) s_tunisGLLib = dlopen("libGLESv2.so", RTLD_LAZY | RTLD_GLOBAL);
        if (s_tunisGLLib == NULL) s_tunisGLLib = dlopen(0, RTLD_LAZY | RTLD_GLOBAL);
#endif
    }
#endif

    memset(&tunisGL, 0, sizeof(TunisGLConfig));

    tunisGL.tunisAccum = (void (KHRONOS_APIENTRY *)(GLenum, GLfloat))tunisGLGetProcAddress("glAccum");
    tunisGL.tunisAccumxOES = (void (KHRONOS_APIENTRY *)(GLenum, GLfixed))tunisGLGetProcAddress("glAccumxOES");
    tunisGL.tunisAcquireKeyedMutexWin32EXT = (GLboolean(KHRONOS_APIENTRY *)(GLuint, GLuint64, GLuint))tunisGLGetProcAddress("glAcquireKeyedMutexWin32EXT");
    tunisGL.tunisActiveProgramEXT = (void (KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glActiveProgramEXT");
    tunisGL.tunisActiveShaderProgram = (void (KHRONOS_APIENTRY *)(GLuint, GLuint))tunisGLGetProcAddress("glActiveShaderProgram");
    tunisGL.tunisActiveShaderProgramEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLuint))tunisGLGetProcAddress("glActiveShaderProgramEXT");
    tunisGL.tunisActiveStencilFaceEXT = (void (KHRONOS_APIENTRY *)(GLenum))tunisGLGetProcAddress("glActiveStencilFaceEXT");
    tunisGL.tunisActiveTexture = (void (KHRONOS_APIENTRY *)(GLenum))tunisGLGetProcAddress("glActiveTexture");
    tunisGL.tunisActiveTextureARB = (void (KHRONOS_APIENTRY *)(GLenum))tunisGLGetProcAddress("glActiveTextureARB");
    tunisGL.tunisActiveVaryingNV = (void (KHRONOS_APIENTRY *)(GLuint, const GLchar *))tunisGLGetProcAddress("glActiveVaryingNV");
    tunisGL.tunisAlphaFragmentOp1ATI = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLuint, GLuint, GLuint, GLuint))tunisGLGetProcAddress("glAlphaFragmentOp1ATI");
    tunisGL.tunisAlphaFragmentOp2ATI = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint))tunisGLGetProcAddress("glAlphaFragmentOp2ATI");
    tunisGL.tunisAlphaFragmentOp3ATI = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint))tunisGLGetProcAddress("glAlphaFragmentOp3ATI");
    tunisGL.tunisAlphaFunc = (void (KHRONOS_APIENTRY *)(GLenum, GLfloat))tunisGLGetProcAddress("glAlphaFunc");
    tunisGL.tunisAlphaFuncQCOM = (void (KHRONOS_APIENTRY *)(GLenum, GLclampf))tunisGLGetProcAddress("glAlphaFuncQCOM");
    tunisGL.tunisAlphaFuncx = (void (KHRONOS_APIENTRY *)(GLenum, GLfixed))tunisGLGetProcAddress("glAlphaFuncx");
    tunisGL.tunisAlphaFuncxOES = (void (KHRONOS_APIENTRY *)(GLenum, GLfixed))tunisGLGetProcAddress("glAlphaFuncxOES");
    tunisGL.tunisAlphaToCoverageDitherControlNV = (void (KHRONOS_APIENTRY *)(GLenum))tunisGLGetProcAddress("glAlphaToCoverageDitherControlNV");
    tunisGL.tunisApplyFramebufferAttachmentCMAAINTEL = (void (KHRONOS_APIENTRY *)(void))tunisGLGetProcAddress("glApplyFramebufferAttachmentCMAAINTEL");
    tunisGL.tunisApplyTextureEXT = (void (KHRONOS_APIENTRY *)(GLenum))tunisGLGetProcAddress("glApplyTextureEXT");
    tunisGL.tunisAreProgramsResidentNV = (GLboolean(KHRONOS_APIENTRY *)(GLsizei, const GLuint *, GLboolean *))tunisGLGetProcAddress("glAreProgramsResidentNV");
    tunisGL.tunisAreTexturesResident = (GLboolean(KHRONOS_APIENTRY *)(GLsizei, const GLuint *, GLboolean *))tunisGLGetProcAddress("glAreTexturesResident");
    tunisGL.tunisAreTexturesResidentEXT = (GLboolean(KHRONOS_APIENTRY *)(GLsizei, const GLuint *, GLboolean *))tunisGLGetProcAddress("glAreTexturesResidentEXT");
    tunisGL.tunisArrayElement = (void (KHRONOS_APIENTRY *)(GLint))tunisGLGetProcAddress("glArrayElement");
    tunisGL.tunisArrayElementEXT = (void (KHRONOS_APIENTRY *)(GLint))tunisGLGetProcAddress("glArrayElementEXT");
    tunisGL.tunisArrayObjectATI = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLenum, GLsizei, GLuint, GLuint))tunisGLGetProcAddress("glArrayObjectATI");
    tunisGL.tunisAsyncMarkerSGIX = (void (KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glAsyncMarkerSGIX");
    tunisGL.tunisAttachObjectARB = (void (KHRONOS_APIENTRY *)(GLhandleARB, GLhandleARB))tunisGLGetProcAddress("glAttachObjectARB");
    tunisGL.tunisAttachShader = (void (KHRONOS_APIENTRY *)(GLuint, GLuint))tunisGLGetProcAddress("glAttachShader");
    tunisGL.tunisBegin = (void (KHRONOS_APIENTRY *)(GLenum))tunisGLGetProcAddress("glBegin");
    tunisGL.tunisBeginConditionalRender = (void (KHRONOS_APIENTRY *)(GLuint, GLenum))tunisGLGetProcAddress("glBeginConditionalRender");
    tunisGL.tunisBeginConditionalRenderNV = (void (KHRONOS_APIENTRY *)(GLuint, GLenum))tunisGLGetProcAddress("glBeginConditionalRenderNV");
    tunisGL.tunisBeginConditionalRenderNVX = (void (KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glBeginConditionalRenderNVX");
    tunisGL.tunisBeginFragmentShaderATI = (void (KHRONOS_APIENTRY *)(void))tunisGLGetProcAddress("glBeginFragmentShaderATI");
    tunisGL.tunisBeginOcclusionQueryNV = (void (KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glBeginOcclusionQueryNV");
    tunisGL.tunisBeginPerfMonitorAMD = (void (KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glBeginPerfMonitorAMD");
    tunisGL.tunisBeginPerfQueryINTEL = (void (KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glBeginPerfQueryINTEL");
    tunisGL.tunisBeginQuery = (void (KHRONOS_APIENTRY *)(GLenum, GLuint))tunisGLGetProcAddress("glBeginQuery");
    tunisGL.tunisBeginQueryARB = (void (KHRONOS_APIENTRY *)(GLenum, GLuint))tunisGLGetProcAddress("glBeginQueryARB");
    tunisGL.tunisBeginQueryEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLuint))tunisGLGetProcAddress("glBeginQueryEXT");
    tunisGL.tunisBeginQueryIndexed = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLuint))tunisGLGetProcAddress("glBeginQueryIndexed");
    tunisGL.tunisBeginTransformFeedback = (void (KHRONOS_APIENTRY *)(GLenum))tunisGLGetProcAddress("glBeginTransformFeedback");
    tunisGL.tunisBeginTransformFeedbackEXT = (void (KHRONOS_APIENTRY *)(GLenum))tunisGLGetProcAddress("glBeginTransformFeedbackEXT");
    tunisGL.tunisBeginTransformFeedbackNV = (void (KHRONOS_APIENTRY *)(GLenum))tunisGLGetProcAddress("glBeginTransformFeedbackNV");
    tunisGL.tunisBeginVertexShaderEXT = (void (KHRONOS_APIENTRY *)(void))tunisGLGetProcAddress("glBeginVertexShaderEXT");
    tunisGL.tunisBeginVideoCaptureNV = (void (KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glBeginVideoCaptureNV");
    tunisGL.tunisBindAttribLocation = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, const GLchar *))tunisGLGetProcAddress("glBindAttribLocation");
    tunisGL.tunisBindAttribLocationARB = (void (KHRONOS_APIENTRY *)(GLhandleARB, GLuint, const GLcharARB *))tunisGLGetProcAddress("glBindAttribLocationARB");
    tunisGL.tunisBindBuffer = (void (KHRONOS_APIENTRY *)(GLenum, GLuint))tunisGLGetProcAddress("glBindBuffer");
    tunisGL.tunisBindBufferARB = (void (KHRONOS_APIENTRY *)(GLenum, GLuint))tunisGLGetProcAddress("glBindBufferARB");
    tunisGL.tunisBindBufferBase = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLuint))tunisGLGetProcAddress("glBindBufferBase");
    tunisGL.tunisBindBufferBaseEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLuint))tunisGLGetProcAddress("glBindBufferBaseEXT");
    tunisGL.tunisBindBufferBaseNV = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLuint))tunisGLGetProcAddress("glBindBufferBaseNV");
    tunisGL.tunisBindBufferOffsetEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLuint, GLintptr))tunisGLGetProcAddress("glBindBufferOffsetEXT");
    tunisGL.tunisBindBufferOffsetNV = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLuint, GLintptr))tunisGLGetProcAddress("glBindBufferOffsetNV");
    tunisGL.tunisBindBufferRange = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLuint, GLintptr, GLsizeiptr))tunisGLGetProcAddress("glBindBufferRange");
    tunisGL.tunisBindBufferRangeEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLuint, GLintptr, GLsizeiptr))tunisGLGetProcAddress("glBindBufferRangeEXT");
    tunisGL.tunisBindBufferRangeNV = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLuint, GLintptr, GLsizeiptr))tunisGLGetProcAddress("glBindBufferRangeNV");
    tunisGL.tunisBindBuffersBase = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLsizei, const GLuint *))tunisGLGetProcAddress("glBindBuffersBase");
    tunisGL.tunisBindBuffersRange = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLsizei, const GLuint *, const GLintptr *, const GLsizeiptr *))tunisGLGetProcAddress("glBindBuffersRange");
    tunisGL.tunisBindFragDataLocation = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, const GLchar *))tunisGLGetProcAddress("glBindFragDataLocation");
    tunisGL.tunisBindFragDataLocationEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, const GLchar *))tunisGLGetProcAddress("glBindFragDataLocationEXT");
    tunisGL.tunisBindFragDataLocationIndexed = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLuint, const GLchar *))tunisGLGetProcAddress("glBindFragDataLocationIndexed");
    tunisGL.tunisBindFragDataLocationIndexedEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLuint, const GLchar *))tunisGLGetProcAddress("glBindFragDataLocationIndexedEXT");
    tunisGL.tunisBindFragmentShaderATI = (void (KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glBindFragmentShaderATI");
    tunisGL.tunisBindFramebuffer = (void (KHRONOS_APIENTRY *)(GLenum, GLuint))tunisGLGetProcAddress("glBindFramebuffer");
    tunisGL.tunisBindFramebufferEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLuint))tunisGLGetProcAddress("glBindFramebufferEXT");
    tunisGL.tunisBindFramebufferOES = (void (KHRONOS_APIENTRY *)(GLenum, GLuint))tunisGLGetProcAddress("glBindFramebufferOES");
    tunisGL.tunisBindImageTexture = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLint, GLboolean, GLint, GLenum, GLenum))tunisGLGetProcAddress("glBindImageTexture");
    tunisGL.tunisBindImageTextureEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLint, GLboolean, GLint, GLenum, GLint))tunisGLGetProcAddress("glBindImageTextureEXT");
    tunisGL.tunisBindImageTextures = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, const GLuint *))tunisGLGetProcAddress("glBindImageTextures");
    tunisGL.tunisBindLightParameterEXT = (GLuint(KHRONOS_APIENTRY *)(GLenum, GLenum))tunisGLGetProcAddress("glBindLightParameterEXT");
    tunisGL.tunisBindMaterialParameterEXT = (GLuint(KHRONOS_APIENTRY *)(GLenum, GLenum))tunisGLGetProcAddress("glBindMaterialParameterEXT");
    tunisGL.tunisBindMultiTextureEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLuint))tunisGLGetProcAddress("glBindMultiTextureEXT");
    tunisGL.tunisBindParameterEXT = (GLuint(KHRONOS_APIENTRY *)(GLenum))tunisGLGetProcAddress("glBindParameterEXT");
    tunisGL.tunisBindProgramARB = (void (KHRONOS_APIENTRY *)(GLenum, GLuint))tunisGLGetProcAddress("glBindProgramARB");
    tunisGL.tunisBindProgramNV = (void (KHRONOS_APIENTRY *)(GLenum, GLuint))tunisGLGetProcAddress("glBindProgramNV");
    tunisGL.tunisBindProgramPipeline = (void (KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glBindProgramPipeline");
    tunisGL.tunisBindProgramPipelineEXT = (void (KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glBindProgramPipelineEXT");
    tunisGL.tunisBindRenderbuffer = (void (KHRONOS_APIENTRY *)(GLenum, GLuint))tunisGLGetProcAddress("glBindRenderbuffer");
    tunisGL.tunisBindRenderbufferEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLuint))tunisGLGetProcAddress("glBindRenderbufferEXT");
    tunisGL.tunisBindRenderbufferOES = (void (KHRONOS_APIENTRY *)(GLenum, GLuint))tunisGLGetProcAddress("glBindRenderbufferOES");
    tunisGL.tunisBindSampler = (void (KHRONOS_APIENTRY *)(GLuint, GLuint))tunisGLGetProcAddress("glBindSampler");
    tunisGL.tunisBindSamplers = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, const GLuint *))tunisGLGetProcAddress("glBindSamplers");
    tunisGL.tunisBindShadingRateImageNV = (void (KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glBindShadingRateImageNV");
    tunisGL.tunisBindTexGenParameterEXT = (GLuint(KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum))tunisGLGetProcAddress("glBindTexGenParameterEXT");
    tunisGL.tunisBindTexture = (void (KHRONOS_APIENTRY *)(GLenum, GLuint))tunisGLGetProcAddress("glBindTexture");
    tunisGL.tunisBindTextureEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLuint))tunisGLGetProcAddress("glBindTextureEXT");
    tunisGL.tunisBindTextureUnit = (void (KHRONOS_APIENTRY *)(GLuint, GLuint))tunisGLGetProcAddress("glBindTextureUnit");
    tunisGL.tunisBindTextureUnitParameterEXT = (GLuint(KHRONOS_APIENTRY *)(GLenum, GLenum))tunisGLGetProcAddress("glBindTextureUnitParameterEXT");
    tunisGL.tunisBindTextures = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, const GLuint *))tunisGLGetProcAddress("glBindTextures");
    tunisGL.tunisBindTransformFeedback = (void (KHRONOS_APIENTRY *)(GLenum, GLuint))tunisGLGetProcAddress("glBindTransformFeedback");
    tunisGL.tunisBindTransformFeedbackNV = (void (KHRONOS_APIENTRY *)(GLenum, GLuint))tunisGLGetProcAddress("glBindTransformFeedbackNV");
    tunisGL.tunisBindVertexArray = (void (KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glBindVertexArray");
    tunisGL.tunisBindVertexArrayAPPLE = (void (KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glBindVertexArrayAPPLE");
    tunisGL.tunisBindVertexArrayOES = (void (KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glBindVertexArrayOES");
    tunisGL.tunisBindVertexBuffer = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLintptr, GLsizei))tunisGLGetProcAddress("glBindVertexBuffer");
    tunisGL.tunisBindVertexBuffers = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, const GLuint *, const GLintptr *, const GLsizei *))tunisGLGetProcAddress("glBindVertexBuffers");
    tunisGL.tunisBindVertexShaderEXT = (void (KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glBindVertexShaderEXT");
    tunisGL.tunisBindVideoCaptureStreamBufferNV = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLenum, GLintptrARB))tunisGLGetProcAddress("glBindVideoCaptureStreamBufferNV");
    tunisGL.tunisBindVideoCaptureStreamTextureNV = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLenum, GLenum, GLuint))tunisGLGetProcAddress("glBindVideoCaptureStreamTextureNV");
    tunisGL.tunisBinormal3bEXT = (void (KHRONOS_APIENTRY *)(GLbyte, GLbyte, GLbyte))tunisGLGetProcAddress("glBinormal3bEXT");
    tunisGL.tunisBinormal3bvEXT = (void (KHRONOS_APIENTRY *)(const GLbyte *))tunisGLGetProcAddress("glBinormal3bvEXT");
    tunisGL.tunisBinormal3dEXT = (void (KHRONOS_APIENTRY *)(GLdouble, GLdouble, GLdouble))tunisGLGetProcAddress("glBinormal3dEXT");
    tunisGL.tunisBinormal3dvEXT = (void (KHRONOS_APIENTRY *)(const GLdouble *))tunisGLGetProcAddress("glBinormal3dvEXT");
    tunisGL.tunisBinormal3fEXT = (void (KHRONOS_APIENTRY *)(GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glBinormal3fEXT");
    tunisGL.tunisBinormal3fvEXT = (void (KHRONOS_APIENTRY *)(const GLfloat *))tunisGLGetProcAddress("glBinormal3fvEXT");
    tunisGL.tunisBinormal3iEXT = (void (KHRONOS_APIENTRY *)(GLint, GLint, GLint))tunisGLGetProcAddress("glBinormal3iEXT");
    tunisGL.tunisBinormal3ivEXT = (void (KHRONOS_APIENTRY *)(const GLint *))tunisGLGetProcAddress("glBinormal3ivEXT");
    tunisGL.tunisBinormal3sEXT = (void (KHRONOS_APIENTRY *)(GLshort, GLshort, GLshort))tunisGLGetProcAddress("glBinormal3sEXT");
    tunisGL.tunisBinormal3svEXT = (void (KHRONOS_APIENTRY *)(const GLshort *))tunisGLGetProcAddress("glBinormal3svEXT");
    tunisGL.tunisBinormalPointerEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, const void *))tunisGLGetProcAddress("glBinormalPointerEXT");
    tunisGL.tunisBitmap = (void (KHRONOS_APIENTRY *)(GLsizei, GLsizei, GLfloat, GLfloat, GLfloat, GLfloat, const GLubyte *))tunisGLGetProcAddress("glBitmap");
    tunisGL.tunisBitmapxOES = (void (KHRONOS_APIENTRY *)(GLsizei, GLsizei, GLfixed, GLfixed, GLfixed, GLfixed, const GLubyte *))tunisGLGetProcAddress("glBitmapxOES");
    tunisGL.tunisBlendBarrier = (void (KHRONOS_APIENTRY *)(void))tunisGLGetProcAddress("glBlendBarrier");
    tunisGL.tunisBlendBarrierKHR = (void (KHRONOS_APIENTRY *)(void))tunisGLGetProcAddress("glBlendBarrierKHR");
    tunisGL.tunisBlendBarrierNV = (void (KHRONOS_APIENTRY *)(void))tunisGLGetProcAddress("glBlendBarrierNV");
    tunisGL.tunisBlendColor = (void (KHRONOS_APIENTRY *)(GLfloat, GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glBlendColor");
    tunisGL.tunisBlendColorEXT = (void (KHRONOS_APIENTRY *)(GLfloat, GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glBlendColorEXT");
    tunisGL.tunisBlendColorxOES = (void (KHRONOS_APIENTRY *)(GLfixed, GLfixed, GLfixed, GLfixed))tunisGLGetProcAddress("glBlendColorxOES");
    tunisGL.tunisBlendEquation = (void (KHRONOS_APIENTRY *)(GLenum))tunisGLGetProcAddress("glBlendEquation");
    tunisGL.tunisBlendEquationEXT = (void (KHRONOS_APIENTRY *)(GLenum))tunisGLGetProcAddress("glBlendEquationEXT");
    tunisGL.tunisBlendEquationIndexedAMD = (void (KHRONOS_APIENTRY *)(GLuint, GLenum))tunisGLGetProcAddress("glBlendEquationIndexedAMD");
    tunisGL.tunisBlendEquationOES = (void (KHRONOS_APIENTRY *)(GLenum))tunisGLGetProcAddress("glBlendEquationOES");
    tunisGL.tunisBlendEquationSeparate = (void (KHRONOS_APIENTRY *)(GLenum, GLenum))tunisGLGetProcAddress("glBlendEquationSeparate");
    tunisGL.tunisBlendEquationSeparateEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum))tunisGLGetProcAddress("glBlendEquationSeparateEXT");
    tunisGL.tunisBlendEquationSeparateIndexedAMD = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLenum))tunisGLGetProcAddress("glBlendEquationSeparateIndexedAMD");
    tunisGL.tunisBlendEquationSeparateOES = (void (KHRONOS_APIENTRY *)(GLenum, GLenum))tunisGLGetProcAddress("glBlendEquationSeparateOES");
    tunisGL.tunisBlendEquationSeparatei = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLenum))tunisGLGetProcAddress("glBlendEquationSeparatei");
    tunisGL.tunisBlendEquationSeparateiARB = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLenum))tunisGLGetProcAddress("glBlendEquationSeparateiARB");
    tunisGL.tunisBlendEquationSeparateiEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLenum))tunisGLGetProcAddress("glBlendEquationSeparateiEXT");
    tunisGL.tunisBlendEquationSeparateiOES = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLenum))tunisGLGetProcAddress("glBlendEquationSeparateiOES");
    tunisGL.tunisBlendEquationi = (void (KHRONOS_APIENTRY *)(GLuint, GLenum))tunisGLGetProcAddress("glBlendEquationi");
    tunisGL.tunisBlendEquationiARB = (void (KHRONOS_APIENTRY *)(GLuint, GLenum))tunisGLGetProcAddress("glBlendEquationiARB");
    tunisGL.tunisBlendEquationiEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum))tunisGLGetProcAddress("glBlendEquationiEXT");
    tunisGL.tunisBlendEquationiOES = (void (KHRONOS_APIENTRY *)(GLuint, GLenum))tunisGLGetProcAddress("glBlendEquationiOES");
    tunisGL.tunisBlendFunc = (void (KHRONOS_APIENTRY *)(GLenum, GLenum))tunisGLGetProcAddress("glBlendFunc");
    tunisGL.tunisBlendFuncIndexedAMD = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLenum))tunisGLGetProcAddress("glBlendFuncIndexedAMD");
    tunisGL.tunisBlendFuncSeparate = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLenum))tunisGLGetProcAddress("glBlendFuncSeparate");
    tunisGL.tunisBlendFuncSeparateEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLenum))tunisGLGetProcAddress("glBlendFuncSeparateEXT");
    tunisGL.tunisBlendFuncSeparateINGR = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLenum))tunisGLGetProcAddress("glBlendFuncSeparateINGR");
    tunisGL.tunisBlendFuncSeparateIndexedAMD = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLenum, GLenum, GLenum))tunisGLGetProcAddress("glBlendFuncSeparateIndexedAMD");
    tunisGL.tunisBlendFuncSeparateOES = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLenum))tunisGLGetProcAddress("glBlendFuncSeparateOES");
    tunisGL.tunisBlendFuncSeparatei = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLenum, GLenum, GLenum))tunisGLGetProcAddress("glBlendFuncSeparatei");
    tunisGL.tunisBlendFuncSeparateiARB = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLenum, GLenum, GLenum))tunisGLGetProcAddress("glBlendFuncSeparateiARB");
    tunisGL.tunisBlendFuncSeparateiEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLenum, GLenum, GLenum))tunisGLGetProcAddress("glBlendFuncSeparateiEXT");
    tunisGL.tunisBlendFuncSeparateiOES = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLenum, GLenum, GLenum))tunisGLGetProcAddress("glBlendFuncSeparateiOES");
    tunisGL.tunisBlendFunci = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLenum))tunisGLGetProcAddress("glBlendFunci");
    tunisGL.tunisBlendFunciARB = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLenum))tunisGLGetProcAddress("glBlendFunciARB");
    tunisGL.tunisBlendFunciEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLenum))tunisGLGetProcAddress("glBlendFunciEXT");
    tunisGL.tunisBlendFunciOES = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLenum))tunisGLGetProcAddress("glBlendFunciOES");
    tunisGL.tunisBlendParameteriNV = (void (KHRONOS_APIENTRY *)(GLenum, GLint))tunisGLGetProcAddress("glBlendParameteriNV");
    tunisGL.tunisBlitFramebuffer = (void (KHRONOS_APIENTRY *)(GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLbitfield, GLenum))tunisGLGetProcAddress("glBlitFramebuffer");
    tunisGL.tunisBlitFramebufferANGLE = (void (KHRONOS_APIENTRY *)(GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLbitfield, GLenum))tunisGLGetProcAddress("glBlitFramebufferANGLE");
    tunisGL.tunisBlitFramebufferEXT = (void (KHRONOS_APIENTRY *)(GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLbitfield, GLenum))tunisGLGetProcAddress("glBlitFramebufferEXT");
    tunisGL.tunisBlitFramebufferNV = (void (KHRONOS_APIENTRY *)(GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLbitfield, GLenum))tunisGLGetProcAddress("glBlitFramebufferNV");
    tunisGL.tunisBlitNamedFramebuffer = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLbitfield, GLenum))tunisGLGetProcAddress("glBlitNamedFramebuffer");
    tunisGL.tunisBufferAddressRangeNV = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLuint64EXT, GLsizeiptr))tunisGLGetProcAddress("glBufferAddressRangeNV");
    tunisGL.tunisBufferAttachMemoryNV = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLuint64))tunisGLGetProcAddress("glBufferAttachMemoryNV");
    tunisGL.tunisBufferData = (void (KHRONOS_APIENTRY *)(GLenum, GLsizeiptr, const void *, GLenum))tunisGLGetProcAddress("glBufferData");
    tunisGL.tunisBufferDataARB = (void (KHRONOS_APIENTRY *)(GLenum, GLsizeiptrARB, const void *, GLenum))tunisGLGetProcAddress("glBufferDataARB");
    tunisGL.tunisBufferPageCommitmentARB = (void (KHRONOS_APIENTRY *)(GLenum, GLintptr, GLsizeiptr, GLboolean))tunisGLGetProcAddress("glBufferPageCommitmentARB");
    tunisGL.tunisBufferParameteriAPPLE = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint))tunisGLGetProcAddress("glBufferParameteriAPPLE");
    tunisGL.tunisBufferRegionEnabled = (GLuint(KHRONOS_APIENTRY *)(void))tunisGLGetProcAddress("glBufferRegionEnabled");
    tunisGL.tunisBufferStorage = (void (KHRONOS_APIENTRY *)(GLenum, GLsizeiptr, const void *, GLbitfield))tunisGLGetProcAddress("glBufferStorage");
    tunisGL.tunisBufferStorageEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLsizeiptr, const void *, GLbitfield))tunisGLGetProcAddress("glBufferStorageEXT");
    tunisGL.tunisBufferStorageExternalEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLintptr, GLsizeiptr, GLeglClientBufferEXT, GLbitfield))tunisGLGetProcAddress("glBufferStorageExternalEXT");
    tunisGL.tunisBufferStorageMemEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLsizeiptr, GLuint, GLuint64))tunisGLGetProcAddress("glBufferStorageMemEXT");
    tunisGL.tunisBufferSubData = (void (KHRONOS_APIENTRY *)(GLenum, GLintptr, GLsizeiptr, const void *))tunisGLGetProcAddress("glBufferSubData");
    tunisGL.tunisBufferSubDataARB = (void (KHRONOS_APIENTRY *)(GLenum, GLintptrARB, GLsizeiptrARB, const void *))tunisGLGetProcAddress("glBufferSubDataARB");
    tunisGL.tunisCallCommandListNV = (void (KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glCallCommandListNV");
    tunisGL.tunisCallList = (void (KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glCallList");
    tunisGL.tunisCallLists = (void (KHRONOS_APIENTRY *)(GLsizei, GLenum, const void *))tunisGLGetProcAddress("glCallLists");
    tunisGL.tunisCheckFramebufferStatus = (GLenum(KHRONOS_APIENTRY *)(GLenum))tunisGLGetProcAddress("glCheckFramebufferStatus");
    tunisGL.tunisCheckFramebufferStatusEXT = (GLenum(KHRONOS_APIENTRY *)(GLenum))tunisGLGetProcAddress("glCheckFramebufferStatusEXT");
    tunisGL.tunisCheckFramebufferStatusOES = (GLenum(KHRONOS_APIENTRY *)(GLenum))tunisGLGetProcAddress("glCheckFramebufferStatusOES");
    tunisGL.tunisCheckNamedFramebufferStatus = (GLenum(KHRONOS_APIENTRY *)(GLuint, GLenum))tunisGLGetProcAddress("glCheckNamedFramebufferStatus");
    tunisGL.tunisCheckNamedFramebufferStatusEXT = (GLenum(KHRONOS_APIENTRY *)(GLuint, GLenum))tunisGLGetProcAddress("glCheckNamedFramebufferStatusEXT");
    tunisGL.tunisClampColor = (void (KHRONOS_APIENTRY *)(GLenum, GLenum))tunisGLGetProcAddress("glClampColor");
    tunisGL.tunisClampColorARB = (void (KHRONOS_APIENTRY *)(GLenum, GLenum))tunisGLGetProcAddress("glClampColorARB");
    tunisGL.tunisClear = (void (KHRONOS_APIENTRY *)(GLbitfield))tunisGLGetProcAddress("glClear");
    tunisGL.tunisClearAccum = (void (KHRONOS_APIENTRY *)(GLfloat, GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glClearAccum");
    tunisGL.tunisClearAccumxOES = (void (KHRONOS_APIENTRY *)(GLfixed, GLfixed, GLfixed, GLfixed))tunisGLGetProcAddress("glClearAccumxOES");
    tunisGL.tunisClearBufferData = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLenum, const void *))tunisGLGetProcAddress("glClearBufferData");
    tunisGL.tunisClearBufferSubData = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLintptr, GLsizeiptr, GLenum, GLenum, const void *))tunisGLGetProcAddress("glClearBufferSubData");
    tunisGL.tunisClearBufferfi = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLfloat, GLint))tunisGLGetProcAddress("glClearBufferfi");
    tunisGL.tunisClearBufferfv = (void (KHRONOS_APIENTRY *)(GLenum, GLint, const GLfloat *))tunisGLGetProcAddress("glClearBufferfv");
    tunisGL.tunisClearBufferiv = (void (KHRONOS_APIENTRY *)(GLenum, GLint, const GLint *))tunisGLGetProcAddress("glClearBufferiv");
    tunisGL.tunisClearBufferuiv = (void (KHRONOS_APIENTRY *)(GLenum, GLint, const GLuint *))tunisGLGetProcAddress("glClearBufferuiv");
    tunisGL.tunisClearColor = (void (KHRONOS_APIENTRY *)(GLfloat, GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glClearColor");
    tunisGL.tunisClearColorIiEXT = (void (KHRONOS_APIENTRY *)(GLint, GLint, GLint, GLint))tunisGLGetProcAddress("glClearColorIiEXT");
    tunisGL.tunisClearColorIuiEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLuint, GLuint))tunisGLGetProcAddress("glClearColorIuiEXT");
    tunisGL.tunisClearColorx = (void (KHRONOS_APIENTRY *)(GLfixed, GLfixed, GLfixed, GLfixed))tunisGLGetProcAddress("glClearColorx");
    tunisGL.tunisClearColorxOES = (void (KHRONOS_APIENTRY *)(GLfixed, GLfixed, GLfixed, GLfixed))tunisGLGetProcAddress("glClearColorxOES");
    tunisGL.tunisClearDepth = (void (KHRONOS_APIENTRY *)(GLdouble))tunisGLGetProcAddress("glClearDepth");
    tunisGL.tunisClearDepthdNV = (void (KHRONOS_APIENTRY *)(GLdouble))tunisGLGetProcAddress("glClearDepthdNV");
    tunisGL.tunisClearDepthf = (void (KHRONOS_APIENTRY *)(GLfloat))tunisGLGetProcAddress("glClearDepthf");
    tunisGL.tunisClearDepthfOES = (void (KHRONOS_APIENTRY *)(GLclampf))tunisGLGetProcAddress("glClearDepthfOES");
    tunisGL.tunisClearDepthx = (void (KHRONOS_APIENTRY *)(GLfixed))tunisGLGetProcAddress("glClearDepthx");
    tunisGL.tunisClearDepthxOES = (void (KHRONOS_APIENTRY *)(GLfixed))tunisGLGetProcAddress("glClearDepthxOES");
    tunisGL.tunisClearIndex = (void (KHRONOS_APIENTRY *)(GLfloat))tunisGLGetProcAddress("glClearIndex");
    tunisGL.tunisClearNamedBufferData = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLenum, GLenum, const void *))tunisGLGetProcAddress("glClearNamedBufferData");
    tunisGL.tunisClearNamedBufferDataEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLenum, GLenum, const void *))tunisGLGetProcAddress("glClearNamedBufferDataEXT");
    tunisGL.tunisClearNamedBufferSubData = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLintptr, GLsizeiptr, GLenum, GLenum, const void *))tunisGLGetProcAddress("glClearNamedBufferSubData");
    tunisGL.tunisClearNamedBufferSubDataEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLsizeiptr, GLsizeiptr, GLenum, GLenum, const void *))tunisGLGetProcAddress("glClearNamedBufferSubDataEXT");
    tunisGL.tunisClearNamedFramebufferfi = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint, GLfloat, GLint))tunisGLGetProcAddress("glClearNamedFramebufferfi");
    tunisGL.tunisClearNamedFramebufferfv = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint, const GLfloat *))tunisGLGetProcAddress("glClearNamedFramebufferfv");
    tunisGL.tunisClearNamedFramebufferiv = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint, const GLint *))tunisGLGetProcAddress("glClearNamedFramebufferiv");
    tunisGL.tunisClearNamedFramebufferuiv = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint, const GLuint *))tunisGLGetProcAddress("glClearNamedFramebufferuiv");
    tunisGL.tunisClearPixelLocalStorageuiEXT = (void (KHRONOS_APIENTRY *)(GLsizei, GLsizei, const GLuint *))tunisGLGetProcAddress("glClearPixelLocalStorageuiEXT");
    tunisGL.tunisClearStencil = (void (KHRONOS_APIENTRY *)(GLint))tunisGLGetProcAddress("glClearStencil");
    tunisGL.tunisClearTexImage = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLenum, GLenum, const void *))tunisGLGetProcAddress("glClearTexImage");
    tunisGL.tunisClearTexImageEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLenum, GLenum, const void *))tunisGLGetProcAddress("glClearTexImageEXT");
    tunisGL.tunisClearTexSubImage = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, const void *))tunisGLGetProcAddress("glClearTexSubImage");
    tunisGL.tunisClearTexSubImageEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, const void *))tunisGLGetProcAddress("glClearTexSubImageEXT");
    tunisGL.tunisClientActiveTexture = (void (KHRONOS_APIENTRY *)(GLenum))tunisGLGetProcAddress("glClientActiveTexture");
    tunisGL.tunisClientActiveTextureARB = (void (KHRONOS_APIENTRY *)(GLenum))tunisGLGetProcAddress("glClientActiveTextureARB");
    tunisGL.tunisClientActiveVertexStreamATI = (void (KHRONOS_APIENTRY *)(GLenum))tunisGLGetProcAddress("glClientActiveVertexStreamATI");
    tunisGL.tunisClientAttribDefaultEXT = (void (KHRONOS_APIENTRY *)(GLbitfield))tunisGLGetProcAddress("glClientAttribDefaultEXT");
    tunisGL.tunisClientWaitSync = (GLenum(KHRONOS_APIENTRY *)(GLsync, GLbitfield, GLuint64))tunisGLGetProcAddress("glClientWaitSync");
    tunisGL.tunisClientWaitSyncAPPLE = (GLenum(KHRONOS_APIENTRY *)(GLsync, GLbitfield, GLuint64))tunisGLGetProcAddress("glClientWaitSyncAPPLE");
    tunisGL.tunisClipControl = (void (KHRONOS_APIENTRY *)(GLenum, GLenum))tunisGLGetProcAddress("glClipControl");
    tunisGL.tunisClipControlEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum))tunisGLGetProcAddress("glClipControlEXT");
    tunisGL.tunisClipPlane = (void (KHRONOS_APIENTRY *)(GLenum, const GLdouble *))tunisGLGetProcAddress("glClipPlane");
    tunisGL.tunisClipPlanef = (void (KHRONOS_APIENTRY *)(GLenum, const GLfloat *))tunisGLGetProcAddress("glClipPlanef");
    tunisGL.tunisClipPlanefIMG = (void (KHRONOS_APIENTRY *)(GLenum, const GLfloat *))tunisGLGetProcAddress("glClipPlanefIMG");
    tunisGL.tunisClipPlanefOES = (void (KHRONOS_APIENTRY *)(GLenum, const GLfloat *))tunisGLGetProcAddress("glClipPlanefOES");
    tunisGL.tunisClipPlanex = (void (KHRONOS_APIENTRY *)(GLenum, const GLfixed *))tunisGLGetProcAddress("glClipPlanex");
    tunisGL.tunisClipPlanexIMG = (void (KHRONOS_APIENTRY *)(GLenum, const GLfixed *))tunisGLGetProcAddress("glClipPlanexIMG");
    tunisGL.tunisClipPlanexOES = (void (KHRONOS_APIENTRY *)(GLenum, const GLfixed *))tunisGLGetProcAddress("glClipPlanexOES");
    tunisGL.tunisColor3b = (void (KHRONOS_APIENTRY *)(GLbyte, GLbyte, GLbyte))tunisGLGetProcAddress("glColor3b");
    tunisGL.tunisColor3bv = (void (KHRONOS_APIENTRY *)(const GLbyte *))tunisGLGetProcAddress("glColor3bv");
    tunisGL.tunisColor3d = (void (KHRONOS_APIENTRY *)(GLdouble, GLdouble, GLdouble))tunisGLGetProcAddress("glColor3d");
    tunisGL.tunisColor3dv = (void (KHRONOS_APIENTRY *)(const GLdouble *))tunisGLGetProcAddress("glColor3dv");
    tunisGL.tunisColor3f = (void (KHRONOS_APIENTRY *)(GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glColor3f");
    tunisGL.tunisColor3fVertex3fSUN = (void (KHRONOS_APIENTRY *)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glColor3fVertex3fSUN");
    tunisGL.tunisColor3fVertex3fvSUN = (void (KHRONOS_APIENTRY *)(const GLfloat *, const GLfloat *))tunisGLGetProcAddress("glColor3fVertex3fvSUN");
    tunisGL.tunisColor3fv = (void (KHRONOS_APIENTRY *)(const GLfloat *))tunisGLGetProcAddress("glColor3fv");
    tunisGL.tunisColor3hNV = (void (KHRONOS_APIENTRY *)(GLhalfNV, GLhalfNV, GLhalfNV))tunisGLGetProcAddress("glColor3hNV");
    tunisGL.tunisColor3hvNV = (void (KHRONOS_APIENTRY *)(const GLhalfNV *))tunisGLGetProcAddress("glColor3hvNV");
    tunisGL.tunisColor3i = (void (KHRONOS_APIENTRY *)(GLint, GLint, GLint))tunisGLGetProcAddress("glColor3i");
    tunisGL.tunisColor3iv = (void (KHRONOS_APIENTRY *)(const GLint *))tunisGLGetProcAddress("glColor3iv");
    tunisGL.tunisColor3s = (void (KHRONOS_APIENTRY *)(GLshort, GLshort, GLshort))tunisGLGetProcAddress("glColor3s");
    tunisGL.tunisColor3sv = (void (KHRONOS_APIENTRY *)(const GLshort *))tunisGLGetProcAddress("glColor3sv");
    tunisGL.tunisColor3ub = (void (KHRONOS_APIENTRY *)(GLubyte, GLubyte, GLubyte))tunisGLGetProcAddress("glColor3ub");
    tunisGL.tunisColor3ubv = (void (KHRONOS_APIENTRY *)(const GLubyte *))tunisGLGetProcAddress("glColor3ubv");
    tunisGL.tunisColor3ui = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLuint))tunisGLGetProcAddress("glColor3ui");
    tunisGL.tunisColor3uiv = (void (KHRONOS_APIENTRY *)(const GLuint *))tunisGLGetProcAddress("glColor3uiv");
    tunisGL.tunisColor3us = (void (KHRONOS_APIENTRY *)(GLushort, GLushort, GLushort))tunisGLGetProcAddress("glColor3us");
    tunisGL.tunisColor3usv = (void (KHRONOS_APIENTRY *)(const GLushort *))tunisGLGetProcAddress("glColor3usv");
    tunisGL.tunisColor3xOES = (void (KHRONOS_APIENTRY *)(GLfixed, GLfixed, GLfixed))tunisGLGetProcAddress("glColor3xOES");
    tunisGL.tunisColor3xvOES = (void (KHRONOS_APIENTRY *)(const GLfixed *))tunisGLGetProcAddress("glColor3xvOES");
    tunisGL.tunisColor4b = (void (KHRONOS_APIENTRY *)(GLbyte, GLbyte, GLbyte, GLbyte))tunisGLGetProcAddress("glColor4b");
    tunisGL.tunisColor4bv = (void (KHRONOS_APIENTRY *)(const GLbyte *))tunisGLGetProcAddress("glColor4bv");
    tunisGL.tunisColor4d = (void (KHRONOS_APIENTRY *)(GLdouble, GLdouble, GLdouble, GLdouble))tunisGLGetProcAddress("glColor4d");
    tunisGL.tunisColor4dv = (void (KHRONOS_APIENTRY *)(const GLdouble *))tunisGLGetProcAddress("glColor4dv");
    tunisGL.tunisColor4f = (void (KHRONOS_APIENTRY *)(GLfloat, GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glColor4f");
    tunisGL.tunisColor4fNormal3fVertex3fSUN = (void (KHRONOS_APIENTRY *)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glColor4fNormal3fVertex3fSUN");
    tunisGL.tunisColor4fNormal3fVertex3fvSUN = (void (KHRONOS_APIENTRY *)(const GLfloat *, const GLfloat *, const GLfloat *))tunisGLGetProcAddress("glColor4fNormal3fVertex3fvSUN");
    tunisGL.tunisColor4fv = (void (KHRONOS_APIENTRY *)(const GLfloat *))tunisGLGetProcAddress("glColor4fv");
    tunisGL.tunisColor4hNV = (void (KHRONOS_APIENTRY *)(GLhalfNV, GLhalfNV, GLhalfNV, GLhalfNV))tunisGLGetProcAddress("glColor4hNV");
    tunisGL.tunisColor4hvNV = (void (KHRONOS_APIENTRY *)(const GLhalfNV *))tunisGLGetProcAddress("glColor4hvNV");
    tunisGL.tunisColor4i = (void (KHRONOS_APIENTRY *)(GLint, GLint, GLint, GLint))tunisGLGetProcAddress("glColor4i");
    tunisGL.tunisColor4iv = (void (KHRONOS_APIENTRY *)(const GLint *))tunisGLGetProcAddress("glColor4iv");
    tunisGL.tunisColor4s = (void (KHRONOS_APIENTRY *)(GLshort, GLshort, GLshort, GLshort))tunisGLGetProcAddress("glColor4s");
    tunisGL.tunisColor4sv = (void (KHRONOS_APIENTRY *)(const GLshort *))tunisGLGetProcAddress("glColor4sv");
    tunisGL.tunisColor4ub = (void (KHRONOS_APIENTRY *)(GLubyte, GLubyte, GLubyte, GLubyte))tunisGLGetProcAddress("glColor4ub");
    tunisGL.tunisColor4ubVertex2fSUN = (void (KHRONOS_APIENTRY *)(GLubyte, GLubyte, GLubyte, GLubyte, GLfloat, GLfloat))tunisGLGetProcAddress("glColor4ubVertex2fSUN");
    tunisGL.tunisColor4ubVertex2fvSUN = (void (KHRONOS_APIENTRY *)(const GLubyte *, const GLfloat *))tunisGLGetProcAddress("glColor4ubVertex2fvSUN");
    tunisGL.tunisColor4ubVertex3fSUN = (void (KHRONOS_APIENTRY *)(GLubyte, GLubyte, GLubyte, GLubyte, GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glColor4ubVertex3fSUN");
    tunisGL.tunisColor4ubVertex3fvSUN = (void (KHRONOS_APIENTRY *)(const GLubyte *, const GLfloat *))tunisGLGetProcAddress("glColor4ubVertex3fvSUN");
    tunisGL.tunisColor4ubv = (void (KHRONOS_APIENTRY *)(const GLubyte *))tunisGLGetProcAddress("glColor4ubv");
    tunisGL.tunisColor4ui = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLuint, GLuint))tunisGLGetProcAddress("glColor4ui");
    tunisGL.tunisColor4uiv = (void (KHRONOS_APIENTRY *)(const GLuint *))tunisGLGetProcAddress("glColor4uiv");
    tunisGL.tunisColor4us = (void (KHRONOS_APIENTRY *)(GLushort, GLushort, GLushort, GLushort))tunisGLGetProcAddress("glColor4us");
    tunisGL.tunisColor4usv = (void (KHRONOS_APIENTRY *)(const GLushort *))tunisGLGetProcAddress("glColor4usv");
    tunisGL.tunisColor4x = (void (KHRONOS_APIENTRY *)(GLfixed, GLfixed, GLfixed, GLfixed))tunisGLGetProcAddress("glColor4x");
    tunisGL.tunisColor4xOES = (void (KHRONOS_APIENTRY *)(GLfixed, GLfixed, GLfixed, GLfixed))tunisGLGetProcAddress("glColor4xOES");
    tunisGL.tunisColor4xvOES = (void (KHRONOS_APIENTRY *)(const GLfixed *))tunisGLGetProcAddress("glColor4xvOES");
    tunisGL.tunisColorFormatNV = (void (KHRONOS_APIENTRY *)(GLint, GLenum, GLsizei))tunisGLGetProcAddress("glColorFormatNV");
    tunisGL.tunisColorFragmentOp1ATI = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint))tunisGLGetProcAddress("glColorFragmentOp1ATI");
    tunisGL.tunisColorFragmentOp2ATI = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint))tunisGLGetProcAddress("glColorFragmentOp2ATI");
    tunisGL.tunisColorFragmentOp3ATI = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint))tunisGLGetProcAddress("glColorFragmentOp3ATI");
    tunisGL.tunisColorMask = (void (KHRONOS_APIENTRY *)(GLboolean, GLboolean, GLboolean, GLboolean))tunisGLGetProcAddress("glColorMask");
    tunisGL.tunisColorMaskIndexedEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLboolean, GLboolean, GLboolean, GLboolean))tunisGLGetProcAddress("glColorMaskIndexedEXT");
    tunisGL.tunisColorMaski = (void (KHRONOS_APIENTRY *)(GLuint, GLboolean, GLboolean, GLboolean, GLboolean))tunisGLGetProcAddress("glColorMaski");
    tunisGL.tunisColorMaskiEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLboolean, GLboolean, GLboolean, GLboolean))tunisGLGetProcAddress("glColorMaskiEXT");
    tunisGL.tunisColorMaskiOES = (void (KHRONOS_APIENTRY *)(GLuint, GLboolean, GLboolean, GLboolean, GLboolean))tunisGLGetProcAddress("glColorMaskiOES");
    tunisGL.tunisColorMaterial = (void (KHRONOS_APIENTRY *)(GLenum, GLenum))tunisGLGetProcAddress("glColorMaterial");
    tunisGL.tunisColorP3ui = (void (KHRONOS_APIENTRY *)(GLenum, GLuint))tunisGLGetProcAddress("glColorP3ui");
    tunisGL.tunisColorP3uiv = (void (KHRONOS_APIENTRY *)(GLenum, const GLuint *))tunisGLGetProcAddress("glColorP3uiv");
    tunisGL.tunisColorP4ui = (void (KHRONOS_APIENTRY *)(GLenum, GLuint))tunisGLGetProcAddress("glColorP4ui");
    tunisGL.tunisColorP4uiv = (void (KHRONOS_APIENTRY *)(GLenum, const GLuint *))tunisGLGetProcAddress("glColorP4uiv");
    tunisGL.tunisColorPointer = (void (KHRONOS_APIENTRY *)(GLint, GLenum, GLsizei, const void *))tunisGLGetProcAddress("glColorPointer");
    tunisGL.tunisColorPointerEXT = (void (KHRONOS_APIENTRY *)(GLint, GLenum, GLsizei, GLsizei, const void *))tunisGLGetProcAddress("glColorPointerEXT");
    tunisGL.tunisColorPointerListIBM = (void (KHRONOS_APIENTRY *)(GLint, GLenum, GLint, const void **, GLint))tunisGLGetProcAddress("glColorPointerListIBM");
    tunisGL.tunisColorPointervINTEL = (void (KHRONOS_APIENTRY *)(GLint, GLenum, const void **))tunisGLGetProcAddress("glColorPointervINTEL");
    tunisGL.tunisColorSubTable = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLsizei, GLenum, GLenum, const void *))tunisGLGetProcAddress("glColorSubTable");
    tunisGL.tunisColorSubTableEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLsizei, GLenum, GLenum, const void *))tunisGLGetProcAddress("glColorSubTableEXT");
    tunisGL.tunisColorTable = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLsizei, GLenum, GLenum, const void *))tunisGLGetProcAddress("glColorTable");
    tunisGL.tunisColorTableEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLsizei, GLenum, GLenum, const void *))tunisGLGetProcAddress("glColorTableEXT");
    tunisGL.tunisColorTableParameterfv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const GLfloat *))tunisGLGetProcAddress("glColorTableParameterfv");
    tunisGL.tunisColorTableParameterfvSGI = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const GLfloat *))tunisGLGetProcAddress("glColorTableParameterfvSGI");
    tunisGL.tunisColorTableParameteriv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const GLint *))tunisGLGetProcAddress("glColorTableParameteriv");
    tunisGL.tunisColorTableParameterivSGI = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const GLint *))tunisGLGetProcAddress("glColorTableParameterivSGI");
    tunisGL.tunisColorTableSGI = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLsizei, GLenum, GLenum, const void *))tunisGLGetProcAddress("glColorTableSGI");
    tunisGL.tunisCombinerInputNV = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLenum, GLenum, GLenum))tunisGLGetProcAddress("glCombinerInputNV");
    tunisGL.tunisCombinerOutputNV = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLenum, GLenum, GLenum, GLenum, GLboolean, GLboolean, GLboolean))tunisGLGetProcAddress("glCombinerOutputNV");
    tunisGL.tunisCombinerParameterfNV = (void (KHRONOS_APIENTRY *)(GLenum, GLfloat))tunisGLGetProcAddress("glCombinerParameterfNV");
    tunisGL.tunisCombinerParameterfvNV = (void (KHRONOS_APIENTRY *)(GLenum, const GLfloat *))tunisGLGetProcAddress("glCombinerParameterfvNV");
    tunisGL.tunisCombinerParameteriNV = (void (KHRONOS_APIENTRY *)(GLenum, GLint))tunisGLGetProcAddress("glCombinerParameteriNV");
    tunisGL.tunisCombinerParameterivNV = (void (KHRONOS_APIENTRY *)(GLenum, const GLint *))tunisGLGetProcAddress("glCombinerParameterivNV");
    tunisGL.tunisCombinerStageParameterfvNV = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const GLfloat *))tunisGLGetProcAddress("glCombinerStageParameterfvNV");
    tunisGL.tunisCommandListSegmentsNV = (void (KHRONOS_APIENTRY *)(GLuint, GLuint))tunisGLGetProcAddress("glCommandListSegmentsNV");
    tunisGL.tunisCompileCommandListNV = (void (KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glCompileCommandListNV");
    tunisGL.tunisCompileShader = (void (KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glCompileShader");
    tunisGL.tunisCompileShaderARB = (void (KHRONOS_APIENTRY *)(GLhandleARB))tunisGLGetProcAddress("glCompileShaderARB");
    tunisGL.tunisCompileShaderIncludeARB = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, const GLchar *const*, const GLint *))tunisGLGetProcAddress("glCompileShaderIncludeARB");
    tunisGL.tunisCompressedMultiTexImage1DEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint, GLenum, GLsizei, GLint, GLsizei, const void *))tunisGLGetProcAddress("glCompressedMultiTexImage1DEXT");
    tunisGL.tunisCompressedMultiTexImage2DEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint, GLenum, GLsizei, GLsizei, GLint, GLsizei, const void *))tunisGLGetProcAddress("glCompressedMultiTexImage2DEXT");
    tunisGL.tunisCompressedMultiTexImage3DEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLsizei, const void *))tunisGLGetProcAddress("glCompressedMultiTexImage3DEXT");
    tunisGL.tunisCompressedMultiTexSubImage1DEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint, GLint, GLsizei, GLenum, GLsizei, const void *))tunisGLGetProcAddress("glCompressedMultiTexSubImage1DEXT");
    tunisGL.tunisCompressedMultiTexSubImage2DEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLsizei, const void *))tunisGLGetProcAddress("glCompressedMultiTexSubImage2DEXT");
    tunisGL.tunisCompressedMultiTexSubImage3DEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, const void *))tunisGLGetProcAddress("glCompressedMultiTexSubImage3DEXT");
    tunisGL.tunisCompressedTexImage1D = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLenum, GLsizei, GLint, GLsizei, const void *))tunisGLGetProcAddress("glCompressedTexImage1D");
    tunisGL.tunisCompressedTexImage1DARB = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLenum, GLsizei, GLint, GLsizei, const void *))tunisGLGetProcAddress("glCompressedTexImage1DARB");
    tunisGL.tunisCompressedTexImage2D = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLenum, GLsizei, GLsizei, GLint, GLsizei, const void *))tunisGLGetProcAddress("glCompressedTexImage2D");
    tunisGL.tunisCompressedTexImage2DARB = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLenum, GLsizei, GLsizei, GLint, GLsizei, const void *))tunisGLGetProcAddress("glCompressedTexImage2DARB");
    tunisGL.tunisCompressedTexImage3D = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLsizei, const void *))tunisGLGetProcAddress("glCompressedTexImage3D");
    tunisGL.tunisCompressedTexImage3DARB = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLsizei, const void *))tunisGLGetProcAddress("glCompressedTexImage3DARB");
    tunisGL.tunisCompressedTexImage3DOES = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLsizei, const void *))tunisGLGetProcAddress("glCompressedTexImage3DOES");
    tunisGL.tunisCompressedTexSubImage1D = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLint, GLsizei, GLenum, GLsizei, const void *))tunisGLGetProcAddress("glCompressedTexSubImage1D");
    tunisGL.tunisCompressedTexSubImage1DARB = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLint, GLsizei, GLenum, GLsizei, const void *))tunisGLGetProcAddress("glCompressedTexSubImage1DARB");
    tunisGL.tunisCompressedTexSubImage2D = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLsizei, const void *))tunisGLGetProcAddress("glCompressedTexSubImage2D");
    tunisGL.tunisCompressedTexSubImage2DARB = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLsizei, const void *))tunisGLGetProcAddress("glCompressedTexSubImage2DARB");
    tunisGL.tunisCompressedTexSubImage3D = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, const void *))tunisGLGetProcAddress("glCompressedTexSubImage3D");
    tunisGL.tunisCompressedTexSubImage3DARB = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, const void *))tunisGLGetProcAddress("glCompressedTexSubImage3DARB");
    tunisGL.tunisCompressedTexSubImage3DOES = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, const void *))tunisGLGetProcAddress("glCompressedTexSubImage3DOES");
    tunisGL.tunisCompressedTextureImage1DEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint, GLenum, GLsizei, GLint, GLsizei, const void *))tunisGLGetProcAddress("glCompressedTextureImage1DEXT");
    tunisGL.tunisCompressedTextureImage2DEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint, GLenum, GLsizei, GLsizei, GLint, GLsizei, const void *))tunisGLGetProcAddress("glCompressedTextureImage2DEXT");
    tunisGL.tunisCompressedTextureImage3DEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLsizei, const void *))tunisGLGetProcAddress("glCompressedTextureImage3DEXT");
    tunisGL.tunisCompressedTextureSubImage1D = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLint, GLsizei, GLenum, GLsizei, const void *))tunisGLGetProcAddress("glCompressedTextureSubImage1D");
    tunisGL.tunisCompressedTextureSubImage1DEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint, GLint, GLsizei, GLenum, GLsizei, const void *))tunisGLGetProcAddress("glCompressedTextureSubImage1DEXT");
    tunisGL.tunisCompressedTextureSubImage2D = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLsizei, const void *))tunisGLGetProcAddress("glCompressedTextureSubImage2D");
    tunisGL.tunisCompressedTextureSubImage2DEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLsizei, const void *))tunisGLGetProcAddress("glCompressedTextureSubImage2DEXT");
    tunisGL.tunisCompressedTextureSubImage3D = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, const void *))tunisGLGetProcAddress("glCompressedTextureSubImage3D");
    tunisGL.tunisCompressedTextureSubImage3DEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, const void *))tunisGLGetProcAddress("glCompressedTextureSubImage3DEXT");
    tunisGL.tunisConservativeRasterParameterfNV = (void (KHRONOS_APIENTRY *)(GLenum, GLfloat))tunisGLGetProcAddress("glConservativeRasterParameterfNV");
    tunisGL.tunisConservativeRasterParameteriNV = (void (KHRONOS_APIENTRY *)(GLenum, GLint))tunisGLGetProcAddress("glConservativeRasterParameteriNV");
    tunisGL.tunisConvolutionFilter1D = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLsizei, GLenum, GLenum, const void *))tunisGLGetProcAddress("glConvolutionFilter1D");
    tunisGL.tunisConvolutionFilter1DEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLsizei, GLenum, GLenum, const void *))tunisGLGetProcAddress("glConvolutionFilter1DEXT");
    tunisGL.tunisConvolutionFilter2D = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLsizei, GLsizei, GLenum, GLenum, const void *))tunisGLGetProcAddress("glConvolutionFilter2D");
    tunisGL.tunisConvolutionFilter2DEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLsizei, GLsizei, GLenum, GLenum, const void *))tunisGLGetProcAddress("glConvolutionFilter2DEXT");
    tunisGL.tunisConvolutionParameterf = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfloat))tunisGLGetProcAddress("glConvolutionParameterf");
    tunisGL.tunisConvolutionParameterfEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfloat))tunisGLGetProcAddress("glConvolutionParameterfEXT");
    tunisGL.tunisConvolutionParameterfv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const GLfloat *))tunisGLGetProcAddress("glConvolutionParameterfv");
    tunisGL.tunisConvolutionParameterfvEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const GLfloat *))tunisGLGetProcAddress("glConvolutionParameterfvEXT");
    tunisGL.tunisConvolutionParameteri = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint))tunisGLGetProcAddress("glConvolutionParameteri");
    tunisGL.tunisConvolutionParameteriEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint))tunisGLGetProcAddress("glConvolutionParameteriEXT");
    tunisGL.tunisConvolutionParameteriv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const GLint *))tunisGLGetProcAddress("glConvolutionParameteriv");
    tunisGL.tunisConvolutionParameterivEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const GLint *))tunisGLGetProcAddress("glConvolutionParameterivEXT");
    tunisGL.tunisConvolutionParameterxOES = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfixed))tunisGLGetProcAddress("glConvolutionParameterxOES");
    tunisGL.tunisConvolutionParameterxvOES = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const GLfixed *))tunisGLGetProcAddress("glConvolutionParameterxvOES");
    tunisGL.tunisCopyBufferSubData = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLintptr, GLintptr, GLsizeiptr))tunisGLGetProcAddress("glCopyBufferSubData");
    tunisGL.tunisCopyBufferSubDataNV = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLintptr, GLintptr, GLsizeiptr))tunisGLGetProcAddress("glCopyBufferSubDataNV");
    tunisGL.tunisCopyColorSubTable = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLint, GLint, GLsizei))tunisGLGetProcAddress("glCopyColorSubTable");
    tunisGL.tunisCopyColorSubTableEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLint, GLint, GLsizei))tunisGLGetProcAddress("glCopyColorSubTableEXT");
    tunisGL.tunisCopyColorTable = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint, GLint, GLsizei))tunisGLGetProcAddress("glCopyColorTable");
    tunisGL.tunisCopyColorTableSGI = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint, GLint, GLsizei))tunisGLGetProcAddress("glCopyColorTableSGI");
    tunisGL.tunisCopyConvolutionFilter1D = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint, GLint, GLsizei))tunisGLGetProcAddress("glCopyConvolutionFilter1D");
    tunisGL.tunisCopyConvolutionFilter1DEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint, GLint, GLsizei))tunisGLGetProcAddress("glCopyConvolutionFilter1DEXT");
    tunisGL.tunisCopyConvolutionFilter2D = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint, GLint, GLsizei, GLsizei))tunisGLGetProcAddress("glCopyConvolutionFilter2D");
    tunisGL.tunisCopyConvolutionFilter2DEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint, GLint, GLsizei, GLsizei))tunisGLGetProcAddress("glCopyConvolutionFilter2DEXT");
    tunisGL.tunisCopyImageSubData = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint, GLint, GLint, GLint, GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei))tunisGLGetProcAddress("glCopyImageSubData");
    tunisGL.tunisCopyImageSubDataEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint, GLint, GLint, GLint, GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei))tunisGLGetProcAddress("glCopyImageSubDataEXT");
    tunisGL.tunisCopyImageSubDataNV = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint, GLint, GLint, GLint, GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei))tunisGLGetProcAddress("glCopyImageSubDataNV");
    tunisGL.tunisCopyImageSubDataOES = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint, GLint, GLint, GLint, GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei))tunisGLGetProcAddress("glCopyImageSubDataOES");
    tunisGL.tunisCopyMultiTexImage1DEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLint))tunisGLGetProcAddress("glCopyMultiTexImage1DEXT");
    tunisGL.tunisCopyMultiTexImage2DEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLsizei, GLint))tunisGLGetProcAddress("glCopyMultiTexImage2DEXT");
    tunisGL.tunisCopyMultiTexSubImage1DEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint, GLint, GLint, GLint, GLsizei))tunisGLGetProcAddress("glCopyMultiTexSubImage1DEXT");
    tunisGL.tunisCopyMultiTexSubImage2DEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei))tunisGLGetProcAddress("glCopyMultiTexSubImage2DEXT");
    tunisGL.tunisCopyMultiTexSubImage3DEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei))tunisGLGetProcAddress("glCopyMultiTexSubImage3DEXT");
    tunisGL.tunisCopyNamedBufferSubData = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLintptr, GLintptr, GLsizeiptr))tunisGLGetProcAddress("glCopyNamedBufferSubData");
    tunisGL.tunisCopyPathNV = (void (KHRONOS_APIENTRY *)(GLuint, GLuint))tunisGLGetProcAddress("glCopyPathNV");
    tunisGL.tunisCopyPixels = (void (KHRONOS_APIENTRY *)(GLint, GLint, GLsizei, GLsizei, GLenum))tunisGLGetProcAddress("glCopyPixels");
    tunisGL.tunisCopyTexImage1D = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLint))tunisGLGetProcAddress("glCopyTexImage1D");
    tunisGL.tunisCopyTexImage1DEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLint))tunisGLGetProcAddress("glCopyTexImage1DEXT");
    tunisGL.tunisCopyTexImage2D = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLsizei, GLint))tunisGLGetProcAddress("glCopyTexImage2D");
    tunisGL.tunisCopyTexImage2DEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLsizei, GLint))tunisGLGetProcAddress("glCopyTexImage2DEXT");
    tunisGL.tunisCopyTexSubImage1D = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLint, GLint, GLint, GLsizei))tunisGLGetProcAddress("glCopyTexSubImage1D");
    tunisGL.tunisCopyTexSubImage1DEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLint, GLint, GLint, GLsizei))tunisGLGetProcAddress("glCopyTexSubImage1DEXT");
    tunisGL.tunisCopyTexSubImage2D = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei))tunisGLGetProcAddress("glCopyTexSubImage2D");
    tunisGL.tunisCopyTexSubImage2DEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei))tunisGLGetProcAddress("glCopyTexSubImage2DEXT");
    tunisGL.tunisCopyTexSubImage3D = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei))tunisGLGetProcAddress("glCopyTexSubImage3D");
    tunisGL.tunisCopyTexSubImage3DEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei))tunisGLGetProcAddress("glCopyTexSubImage3DEXT");
    tunisGL.tunisCopyTexSubImage3DOES = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei))tunisGLGetProcAddress("glCopyTexSubImage3DOES");
    tunisGL.tunisCopyTextureImage1DEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLint))tunisGLGetProcAddress("glCopyTextureImage1DEXT");
    tunisGL.tunisCopyTextureImage2DEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLsizei, GLint))tunisGLGetProcAddress("glCopyTextureImage2DEXT");
    tunisGL.tunisCopyTextureLevelsAPPLE = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLint, GLsizei))tunisGLGetProcAddress("glCopyTextureLevelsAPPLE");
    tunisGL.tunisCopyTextureSubImage1D = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLint, GLint, GLint, GLsizei))tunisGLGetProcAddress("glCopyTextureSubImage1D");
    tunisGL.tunisCopyTextureSubImage1DEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei))tunisGLGetProcAddress("glCopyTextureSubImage1DEXT");
    tunisGL.tunisCopyTextureSubImage2D = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei))tunisGLGetProcAddress("glCopyTextureSubImage2D");
    tunisGL.tunisCopyTextureSubImage2DEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei))tunisGLGetProcAddress("glCopyTextureSubImage2DEXT");
    tunisGL.tunisCopyTextureSubImage3D = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei))tunisGLGetProcAddress("glCopyTextureSubImage3D");
    tunisGL.tunisCopyTextureSubImage3DEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei))tunisGLGetProcAddress("glCopyTextureSubImage3DEXT");
    tunisGL.tunisCoverFillPathInstancedNV = (void (KHRONOS_APIENTRY *)(GLsizei, GLenum, const void *, GLuint, GLenum, GLenum, const GLfloat *))tunisGLGetProcAddress("glCoverFillPathInstancedNV");
    tunisGL.tunisCoverFillPathNV = (void (KHRONOS_APIENTRY *)(GLuint, GLenum))tunisGLGetProcAddress("glCoverFillPathNV");
    tunisGL.tunisCoverStrokePathInstancedNV = (void (KHRONOS_APIENTRY *)(GLsizei, GLenum, const void *, GLuint, GLenum, GLenum, const GLfloat *))tunisGLGetProcAddress("glCoverStrokePathInstancedNV");
    tunisGL.tunisCoverStrokePathNV = (void (KHRONOS_APIENTRY *)(GLuint, GLenum))tunisGLGetProcAddress("glCoverStrokePathNV");
    tunisGL.tunisCoverageMaskNV = (void (KHRONOS_APIENTRY *)(GLboolean))tunisGLGetProcAddress("glCoverageMaskNV");
    tunisGL.tunisCoverageModulationNV = (void (KHRONOS_APIENTRY *)(GLenum))tunisGLGetProcAddress("glCoverageModulationNV");
    tunisGL.tunisCoverageModulationTableNV = (void (KHRONOS_APIENTRY *)(GLsizei, const GLfloat *))tunisGLGetProcAddress("glCoverageModulationTableNV");
    tunisGL.tunisCoverageOperationNV = (void (KHRONOS_APIENTRY *)(GLenum))tunisGLGetProcAddress("glCoverageOperationNV");
    tunisGL.tunisCreateBuffers = (void (KHRONOS_APIENTRY *)(GLsizei, GLuint *))tunisGLGetProcAddress("glCreateBuffers");
    tunisGL.tunisCreateCommandListsNV = (void (KHRONOS_APIENTRY *)(GLsizei, GLuint *))tunisGLGetProcAddress("glCreateCommandListsNV");
    tunisGL.tunisCreateFramebuffers = (void (KHRONOS_APIENTRY *)(GLsizei, GLuint *))tunisGLGetProcAddress("glCreateFramebuffers");
    tunisGL.tunisCreateMemoryObjectsEXT = (void (KHRONOS_APIENTRY *)(GLsizei, GLuint *))tunisGLGetProcAddress("glCreateMemoryObjectsEXT");
    tunisGL.tunisCreatePerfQueryINTEL = (void (KHRONOS_APIENTRY *)(GLuint, GLuint *))tunisGLGetProcAddress("glCreatePerfQueryINTEL");
    tunisGL.tunisCreateProgram = (GLuint(KHRONOS_APIENTRY *)(void))tunisGLGetProcAddress("glCreateProgram");
    tunisGL.tunisCreateProgramObjectARB = (GLhandleARB(KHRONOS_APIENTRY *)(void))tunisGLGetProcAddress("glCreateProgramObjectARB");
    tunisGL.tunisCreateProgramPipelines = (void (KHRONOS_APIENTRY *)(GLsizei, GLuint *))tunisGLGetProcAddress("glCreateProgramPipelines");
    tunisGL.tunisCreateQueries = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLuint *))tunisGLGetProcAddress("glCreateQueries");
    tunisGL.tunisCreateRenderbuffers = (void (KHRONOS_APIENTRY *)(GLsizei, GLuint *))tunisGLGetProcAddress("glCreateRenderbuffers");
    tunisGL.tunisCreateSamplers = (void (KHRONOS_APIENTRY *)(GLsizei, GLuint *))tunisGLGetProcAddress("glCreateSamplers");
    tunisGL.tunisCreateShader = (GLuint(KHRONOS_APIENTRY *)(GLenum))tunisGLGetProcAddress("glCreateShader");
    tunisGL.tunisCreateShaderObjectARB = (GLhandleARB(KHRONOS_APIENTRY *)(GLenum))tunisGLGetProcAddress("glCreateShaderObjectARB");
    tunisGL.tunisCreateShaderProgramEXT = (GLuint(KHRONOS_APIENTRY *)(GLenum, const GLchar *))tunisGLGetProcAddress("glCreateShaderProgramEXT");
    tunisGL.tunisCreateShaderProgramv = (GLuint(KHRONOS_APIENTRY *)(GLenum, GLsizei, const GLchar *const*))tunisGLGetProcAddress("glCreateShaderProgramv");
    tunisGL.tunisCreateShaderProgramvEXT = (GLuint(KHRONOS_APIENTRY *)(GLenum, GLsizei, const GLchar **))tunisGLGetProcAddress("glCreateShaderProgramvEXT");
    tunisGL.tunisCreateStatesNV = (void (KHRONOS_APIENTRY *)(GLsizei, GLuint *))tunisGLGetProcAddress("glCreateStatesNV");
    tunisGL.tunisCreateSyncFromCLeventARB = (GLsync(KHRONOS_APIENTRY *)(struct _cl_context *, struct _cl_event *, GLbitfield))tunisGLGetProcAddress("glCreateSyncFromCLeventARB");
    tunisGL.tunisCreateTextures = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLuint *))tunisGLGetProcAddress("glCreateTextures");
    tunisGL.tunisCreateTransformFeedbacks = (void (KHRONOS_APIENTRY *)(GLsizei, GLuint *))tunisGLGetProcAddress("glCreateTransformFeedbacks");
    tunisGL.tunisCreateVertexArrays = (void (KHRONOS_APIENTRY *)(GLsizei, GLuint *))tunisGLGetProcAddress("glCreateVertexArrays");
    tunisGL.tunisCullFace = (void (KHRONOS_APIENTRY *)(GLenum))tunisGLGetProcAddress("glCullFace");
    tunisGL.tunisCullParameterdvEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLdouble *))tunisGLGetProcAddress("glCullParameterdvEXT");
    tunisGL.tunisCullParameterfvEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLfloat *))tunisGLGetProcAddress("glCullParameterfvEXT");
    tunisGL.tunisCurrentPaletteMatrixARB = (void (KHRONOS_APIENTRY *)(GLint))tunisGLGetProcAddress("glCurrentPaletteMatrixARB");
    tunisGL.tunisCurrentPaletteMatrixOES = (void (KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glCurrentPaletteMatrixOES");
    tunisGL.tunisDebugMessageCallback = (void (KHRONOS_APIENTRY *)(GLDEBUGPROC, const void *))tunisGLGetProcAddress("glDebugMessageCallback");
    tunisGL.tunisDebugMessageCallbackAMD = (void (KHRONOS_APIENTRY *)(GLDEBUGPROCAMD, void *))tunisGLGetProcAddress("glDebugMessageCallbackAMD");
    tunisGL.tunisDebugMessageCallbackARB = (void (KHRONOS_APIENTRY *)(GLDEBUGPROCARB, const void *))tunisGLGetProcAddress("glDebugMessageCallbackARB");
    tunisGL.tunisDebugMessageCallbackKHR = (void (KHRONOS_APIENTRY *)(GLDEBUGPROCKHR, const void *))tunisGLGetProcAddress("glDebugMessageCallbackKHR");
    tunisGL.tunisDebugMessageControl = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLsizei, const GLuint *, GLboolean))tunisGLGetProcAddress("glDebugMessageControl");
    tunisGL.tunisDebugMessageControlARB = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLsizei, const GLuint *, GLboolean))tunisGLGetProcAddress("glDebugMessageControlARB");
    tunisGL.tunisDebugMessageControlKHR = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLsizei, const GLuint *, GLboolean))tunisGLGetProcAddress("glDebugMessageControlKHR");
    tunisGL.tunisDebugMessageEnableAMD = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLsizei, const GLuint *, GLboolean))tunisGLGetProcAddress("glDebugMessageEnableAMD");
    tunisGL.tunisDebugMessageInsert = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLuint, GLenum, GLsizei, const GLchar *))tunisGLGetProcAddress("glDebugMessageInsert");
    tunisGL.tunisDebugMessageInsertAMD = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLuint, GLsizei, const GLchar *))tunisGLGetProcAddress("glDebugMessageInsertAMD");
    tunisGL.tunisDebugMessageInsertARB = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLuint, GLenum, GLsizei, const GLchar *))tunisGLGetProcAddress("glDebugMessageInsertARB");
    tunisGL.tunisDebugMessageInsertKHR = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLuint, GLenum, GLsizei, const GLchar *))tunisGLGetProcAddress("glDebugMessageInsertKHR");
    tunisGL.tunisDeformSGIX = (void (KHRONOS_APIENTRY *)(GLbitfield))tunisGLGetProcAddress("glDeformSGIX");
    tunisGL.tunisDeformationMap3dSGIX = (void (KHRONOS_APIENTRY *)(GLenum, GLdouble, GLdouble, GLint, GLint, GLdouble, GLdouble, GLint, GLint, GLdouble, GLdouble, GLint, GLint, const GLdouble *))tunisGLGetProcAddress("glDeformationMap3dSGIX");
    tunisGL.tunisDeformationMap3fSGIX = (void (KHRONOS_APIENTRY *)(GLenum, GLfloat, GLfloat, GLint, GLint, GLfloat, GLfloat, GLint, GLint, GLfloat, GLfloat, GLint, GLint, const GLfloat *))tunisGLGetProcAddress("glDeformationMap3fSGIX");
    tunisGL.tunisDeleteAsyncMarkersSGIX = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei))tunisGLGetProcAddress("glDeleteAsyncMarkersSGIX");
    tunisGL.tunisDeleteBufferRegion = (void (KHRONOS_APIENTRY *)(GLenum))tunisGLGetProcAddress("glDeleteBufferRegion");
    tunisGL.tunisDeleteBuffers = (void (KHRONOS_APIENTRY *)(GLsizei, const GLuint *))tunisGLGetProcAddress("glDeleteBuffers");
    tunisGL.tunisDeleteBuffersARB = (void (KHRONOS_APIENTRY *)(GLsizei, const GLuint *))tunisGLGetProcAddress("glDeleteBuffersARB");
    tunisGL.tunisDeleteCommandListsNV = (void (KHRONOS_APIENTRY *)(GLsizei, const GLuint *))tunisGLGetProcAddress("glDeleteCommandListsNV");
    tunisGL.tunisDeleteFencesAPPLE = (void (KHRONOS_APIENTRY *)(GLsizei, const GLuint *))tunisGLGetProcAddress("glDeleteFencesAPPLE");
    tunisGL.tunisDeleteFencesNV = (void (KHRONOS_APIENTRY *)(GLsizei, const GLuint *))tunisGLGetProcAddress("glDeleteFencesNV");
    tunisGL.tunisDeleteFragmentShaderATI = (void (KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glDeleteFragmentShaderATI");
    tunisGL.tunisDeleteFramebuffers = (void (KHRONOS_APIENTRY *)(GLsizei, const GLuint *))tunisGLGetProcAddress("glDeleteFramebuffers");
    tunisGL.tunisDeleteFramebuffersEXT = (void (KHRONOS_APIENTRY *)(GLsizei, const GLuint *))tunisGLGetProcAddress("glDeleteFramebuffersEXT");
    tunisGL.tunisDeleteFramebuffersOES = (void (KHRONOS_APIENTRY *)(GLsizei, const GLuint *))tunisGLGetProcAddress("glDeleteFramebuffersOES");
    tunisGL.tunisDeleteLists = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei))tunisGLGetProcAddress("glDeleteLists");
    tunisGL.tunisDeleteMemoryObjectsEXT = (void (KHRONOS_APIENTRY *)(GLsizei, const GLuint *))tunisGLGetProcAddress("glDeleteMemoryObjectsEXT");
    tunisGL.tunisDeleteNamedStringARB = (void (KHRONOS_APIENTRY *)(GLint, const GLchar *))tunisGLGetProcAddress("glDeleteNamedStringARB");
    tunisGL.tunisDeleteNamesAMD = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, const GLuint *))tunisGLGetProcAddress("glDeleteNamesAMD");
    tunisGL.tunisDeleteObjectARB = (void (KHRONOS_APIENTRY *)(GLhandleARB))tunisGLGetProcAddress("glDeleteObjectARB");
    tunisGL.tunisDeleteOcclusionQueriesNV = (void (KHRONOS_APIENTRY *)(GLsizei, const GLuint *))tunisGLGetProcAddress("glDeleteOcclusionQueriesNV");
    tunisGL.tunisDeletePathsNV = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei))tunisGLGetProcAddress("glDeletePathsNV");
    tunisGL.tunisDeletePerfMonitorsAMD = (void (KHRONOS_APIENTRY *)(GLsizei, GLuint *))tunisGLGetProcAddress("glDeletePerfMonitorsAMD");
    tunisGL.tunisDeletePerfQueryINTEL = (void (KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glDeletePerfQueryINTEL");
    tunisGL.tunisDeleteProgram = (void (KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glDeleteProgram");
    tunisGL.tunisDeleteProgramPipelines = (void (KHRONOS_APIENTRY *)(GLsizei, const GLuint *))tunisGLGetProcAddress("glDeleteProgramPipelines");
    tunisGL.tunisDeleteProgramPipelinesEXT = (void (KHRONOS_APIENTRY *)(GLsizei, const GLuint *))tunisGLGetProcAddress("glDeleteProgramPipelinesEXT");
    tunisGL.tunisDeleteProgramsARB = (void (KHRONOS_APIENTRY *)(GLsizei, const GLuint *))tunisGLGetProcAddress("glDeleteProgramsARB");
    tunisGL.tunisDeleteProgramsNV = (void (KHRONOS_APIENTRY *)(GLsizei, const GLuint *))tunisGLGetProcAddress("glDeleteProgramsNV");
    tunisGL.tunisDeleteQueries = (void (KHRONOS_APIENTRY *)(GLsizei, const GLuint *))tunisGLGetProcAddress("glDeleteQueries");
    tunisGL.tunisDeleteQueriesARB = (void (KHRONOS_APIENTRY *)(GLsizei, const GLuint *))tunisGLGetProcAddress("glDeleteQueriesARB");
    tunisGL.tunisDeleteQueriesEXT = (void (KHRONOS_APIENTRY *)(GLsizei, const GLuint *))tunisGLGetProcAddress("glDeleteQueriesEXT");
    tunisGL.tunisDeleteQueryResourceTagNV = (void (KHRONOS_APIENTRY *)(GLsizei, const GLint *))tunisGLGetProcAddress("glDeleteQueryResourceTagNV");
    tunisGL.tunisDeleteRenderbuffers = (void (KHRONOS_APIENTRY *)(GLsizei, const GLuint *))tunisGLGetProcAddress("glDeleteRenderbuffers");
    tunisGL.tunisDeleteRenderbuffersEXT = (void (KHRONOS_APIENTRY *)(GLsizei, const GLuint *))tunisGLGetProcAddress("glDeleteRenderbuffersEXT");
    tunisGL.tunisDeleteRenderbuffersOES = (void (KHRONOS_APIENTRY *)(GLsizei, const GLuint *))tunisGLGetProcAddress("glDeleteRenderbuffersOES");
    tunisGL.tunisDeleteSamplers = (void (KHRONOS_APIENTRY *)(GLsizei, const GLuint *))tunisGLGetProcAddress("glDeleteSamplers");
    tunisGL.tunisDeleteSemaphoresEXT = (void (KHRONOS_APIENTRY *)(GLsizei, const GLuint *))tunisGLGetProcAddress("glDeleteSemaphoresEXT");
    tunisGL.tunisDeleteShader = (void (KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glDeleteShader");
    tunisGL.tunisDeleteStatesNV = (void (KHRONOS_APIENTRY *)(GLsizei, const GLuint *))tunisGLGetProcAddress("glDeleteStatesNV");
    tunisGL.tunisDeleteSync = (void (KHRONOS_APIENTRY *)(GLsync))tunisGLGetProcAddress("glDeleteSync");
    tunisGL.tunisDeleteSyncAPPLE = (void (KHRONOS_APIENTRY *)(GLsync))tunisGLGetProcAddress("glDeleteSyncAPPLE");
    tunisGL.tunisDeleteTextures = (void (KHRONOS_APIENTRY *)(GLsizei, const GLuint *))tunisGLGetProcAddress("glDeleteTextures");
    tunisGL.tunisDeleteTexturesEXT = (void (KHRONOS_APIENTRY *)(GLsizei, const GLuint *))tunisGLGetProcAddress("glDeleteTexturesEXT");
    tunisGL.tunisDeleteTransformFeedbacks = (void (KHRONOS_APIENTRY *)(GLsizei, const GLuint *))tunisGLGetProcAddress("glDeleteTransformFeedbacks");
    tunisGL.tunisDeleteTransformFeedbacksNV = (void (KHRONOS_APIENTRY *)(GLsizei, const GLuint *))tunisGLGetProcAddress("glDeleteTransformFeedbacksNV");
    tunisGL.tunisDeleteVertexArrays = (void (KHRONOS_APIENTRY *)(GLsizei, const GLuint *))tunisGLGetProcAddress("glDeleteVertexArrays");
    tunisGL.tunisDeleteVertexArraysAPPLE = (void (KHRONOS_APIENTRY *)(GLsizei, const GLuint *))tunisGLGetProcAddress("glDeleteVertexArraysAPPLE");
    tunisGL.tunisDeleteVertexArraysOES = (void (KHRONOS_APIENTRY *)(GLsizei, const GLuint *))tunisGLGetProcAddress("glDeleteVertexArraysOES");
    tunisGL.tunisDeleteVertexShaderEXT = (void (KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glDeleteVertexShaderEXT");
    tunisGL.tunisDepthBoundsEXT = (void (KHRONOS_APIENTRY *)(GLclampd, GLclampd))tunisGLGetProcAddress("glDepthBoundsEXT");
    tunisGL.tunisDepthBoundsdNV = (void (KHRONOS_APIENTRY *)(GLdouble, GLdouble))tunisGLGetProcAddress("glDepthBoundsdNV");
    tunisGL.tunisDepthFunc = (void (KHRONOS_APIENTRY *)(GLenum))tunisGLGetProcAddress("glDepthFunc");
    tunisGL.tunisDepthMask = (void (KHRONOS_APIENTRY *)(GLboolean))tunisGLGetProcAddress("glDepthMask");
    tunisGL.tunisDepthRange = (void (KHRONOS_APIENTRY *)(GLdouble, GLdouble))tunisGLGetProcAddress("glDepthRange");
    tunisGL.tunisDepthRangeArrayfvNV = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, const GLfloat *))tunisGLGetProcAddress("glDepthRangeArrayfvNV");
    tunisGL.tunisDepthRangeArrayfvOES = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, const GLfloat *))tunisGLGetProcAddress("glDepthRangeArrayfvOES");
    tunisGL.tunisDepthRangeArrayv = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, const GLdouble *))tunisGLGetProcAddress("glDepthRangeArrayv");
    tunisGL.tunisDepthRangeIndexed = (void (KHRONOS_APIENTRY *)(GLuint, GLdouble, GLdouble))tunisGLGetProcAddress("glDepthRangeIndexed");
    tunisGL.tunisDepthRangeIndexedfNV = (void (KHRONOS_APIENTRY *)(GLuint, GLfloat, GLfloat))tunisGLGetProcAddress("glDepthRangeIndexedfNV");
    tunisGL.tunisDepthRangeIndexedfOES = (void (KHRONOS_APIENTRY *)(GLuint, GLfloat, GLfloat))tunisGLGetProcAddress("glDepthRangeIndexedfOES");
    tunisGL.tunisDepthRangedNV = (void (KHRONOS_APIENTRY *)(GLdouble, GLdouble))tunisGLGetProcAddress("glDepthRangedNV");
    tunisGL.tunisDepthRangef = (void (KHRONOS_APIENTRY *)(GLfloat, GLfloat))tunisGLGetProcAddress("glDepthRangef");
    tunisGL.tunisDepthRangefOES = (void (KHRONOS_APIENTRY *)(GLclampf, GLclampf))tunisGLGetProcAddress("glDepthRangefOES");
    tunisGL.tunisDepthRangex = (void (KHRONOS_APIENTRY *)(GLfixed, GLfixed))tunisGLGetProcAddress("glDepthRangex");
    tunisGL.tunisDepthRangexOES = (void (KHRONOS_APIENTRY *)(GLfixed, GLfixed))tunisGLGetProcAddress("glDepthRangexOES");
    tunisGL.tunisDetachObjectARB = (void (KHRONOS_APIENTRY *)(GLhandleARB, GLhandleARB))tunisGLGetProcAddress("glDetachObjectARB");
    tunisGL.tunisDetachShader = (void (KHRONOS_APIENTRY *)(GLuint, GLuint))tunisGLGetProcAddress("glDetachShader");
    tunisGL.tunisDetailTexFuncSGIS = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, const GLfloat *))tunisGLGetProcAddress("glDetailTexFuncSGIS");
    tunisGL.tunisDisable = (void (KHRONOS_APIENTRY *)(GLenum))tunisGLGetProcAddress("glDisable");
    tunisGL.tunisDisableClientState = (void (KHRONOS_APIENTRY *)(GLenum))tunisGLGetProcAddress("glDisableClientState");
    tunisGL.tunisDisableClientStateIndexedEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLuint))tunisGLGetProcAddress("glDisableClientStateIndexedEXT");
    tunisGL.tunisDisableClientStateiEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLuint))tunisGLGetProcAddress("glDisableClientStateiEXT");
    tunisGL.tunisDisableDriverControlQCOM = (void (KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glDisableDriverControlQCOM");
    tunisGL.tunisDisableIndexedEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLuint))tunisGLGetProcAddress("glDisableIndexedEXT");
    tunisGL.tunisDisableVariantClientStateEXT = (void (KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glDisableVariantClientStateEXT");
    tunisGL.tunisDisableVertexArrayAttrib = (void (KHRONOS_APIENTRY *)(GLuint, GLuint))tunisGLGetProcAddress("glDisableVertexArrayAttrib");
    tunisGL.tunisDisableVertexArrayAttribEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLuint))tunisGLGetProcAddress("glDisableVertexArrayAttribEXT");
    tunisGL.tunisDisableVertexArrayEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum))tunisGLGetProcAddress("glDisableVertexArrayEXT");
    tunisGL.tunisDisableVertexAttribAPPLE = (void (KHRONOS_APIENTRY *)(GLuint, GLenum))tunisGLGetProcAddress("glDisableVertexAttribAPPLE");
    tunisGL.tunisDisableVertexAttribArray = (void (KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glDisableVertexAttribArray");
    tunisGL.tunisDisableVertexAttribArrayARB = (void (KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glDisableVertexAttribArrayARB");
    tunisGL.tunisDisablei = (void (KHRONOS_APIENTRY *)(GLenum, GLuint))tunisGLGetProcAddress("glDisablei");
    tunisGL.tunisDisableiEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLuint))tunisGLGetProcAddress("glDisableiEXT");
    tunisGL.tunisDisableiNV = (void (KHRONOS_APIENTRY *)(GLenum, GLuint))tunisGLGetProcAddress("glDisableiNV");
    tunisGL.tunisDisableiOES = (void (KHRONOS_APIENTRY *)(GLenum, GLuint))tunisGLGetProcAddress("glDisableiOES");
    tunisGL.tunisDiscardFramebufferEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, const GLenum *))tunisGLGetProcAddress("glDiscardFramebufferEXT");
    tunisGL.tunisDispatchCompute = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLuint))tunisGLGetProcAddress("glDispatchCompute");
    tunisGL.tunisDispatchComputeGroupSizeARB = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLuint, GLuint, GLuint, GLuint))tunisGLGetProcAddress("glDispatchComputeGroupSizeARB");
    tunisGL.tunisDispatchComputeIndirect = (void (KHRONOS_APIENTRY *)(GLintptr))tunisGLGetProcAddress("glDispatchComputeIndirect");
    tunisGL.tunisDrawArrays = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLsizei))tunisGLGetProcAddress("glDrawArrays");
    tunisGL.tunisDrawArraysEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLsizei))tunisGLGetProcAddress("glDrawArraysEXT");
    tunisGL.tunisDrawArraysIndirect = (void (KHRONOS_APIENTRY *)(GLenum, const void *))tunisGLGetProcAddress("glDrawArraysIndirect");
    tunisGL.tunisDrawArraysInstanced = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLsizei, GLsizei))tunisGLGetProcAddress("glDrawArraysInstanced");
    tunisGL.tunisDrawArraysInstancedANGLE = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLsizei, GLsizei))tunisGLGetProcAddress("glDrawArraysInstancedANGLE");
    tunisGL.tunisDrawArraysInstancedARB = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLsizei, GLsizei))tunisGLGetProcAddress("glDrawArraysInstancedARB");
    tunisGL.tunisDrawArraysInstancedBaseInstance = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLsizei, GLsizei, GLuint))tunisGLGetProcAddress("glDrawArraysInstancedBaseInstance");
    tunisGL.tunisDrawArraysInstancedBaseInstanceEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLsizei, GLsizei, GLuint))tunisGLGetProcAddress("glDrawArraysInstancedBaseInstanceEXT");
    tunisGL.tunisDrawArraysInstancedEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLsizei, GLsizei))tunisGLGetProcAddress("glDrawArraysInstancedEXT");
    tunisGL.tunisDrawArraysInstancedNV = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLsizei, GLsizei))tunisGLGetProcAddress("glDrawArraysInstancedNV");
    tunisGL.tunisDrawBuffer = (void (KHRONOS_APIENTRY *)(GLenum))tunisGLGetProcAddress("glDrawBuffer");
    tunisGL.tunisDrawBufferRegion = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLint, GLsizei, GLsizei, GLint, GLint))tunisGLGetProcAddress("glDrawBufferRegion");
    tunisGL.tunisDrawBuffers = (void (KHRONOS_APIENTRY *)(GLsizei, const GLenum *))tunisGLGetProcAddress("glDrawBuffers");
    tunisGL.tunisDrawBuffersARB = (void (KHRONOS_APIENTRY *)(GLsizei, const GLenum *))tunisGLGetProcAddress("glDrawBuffersARB");
    tunisGL.tunisDrawBuffersATI = (void (KHRONOS_APIENTRY *)(GLsizei, const GLenum *))tunisGLGetProcAddress("glDrawBuffersATI");
    tunisGL.tunisDrawBuffersEXT = (void (KHRONOS_APIENTRY *)(GLsizei, const GLenum *))tunisGLGetProcAddress("glDrawBuffersEXT");
    tunisGL.tunisDrawBuffersIndexedEXT = (void (KHRONOS_APIENTRY *)(GLint, const GLenum *, const GLint *))tunisGLGetProcAddress("glDrawBuffersIndexedEXT");
    tunisGL.tunisDrawBuffersNV = (void (KHRONOS_APIENTRY *)(GLsizei, const GLenum *))tunisGLGetProcAddress("glDrawBuffersNV");
    tunisGL.tunisDrawCommandsAddressNV = (void (KHRONOS_APIENTRY *)(GLenum, const GLuint64 *, const GLsizei *, GLuint))tunisGLGetProcAddress("glDrawCommandsAddressNV");
    tunisGL.tunisDrawCommandsNV = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, const GLintptr *, const GLsizei *, GLuint))tunisGLGetProcAddress("glDrawCommandsNV");
    tunisGL.tunisDrawCommandsStatesAddressNV = (void (KHRONOS_APIENTRY *)(const GLuint64 *, const GLsizei *, const GLuint *, const GLuint *, GLuint))tunisGLGetProcAddress("glDrawCommandsStatesAddressNV");
    tunisGL.tunisDrawCommandsStatesNV = (void (KHRONOS_APIENTRY *)(GLuint, const GLintptr *, const GLsizei *, const GLuint *, const GLuint *, GLuint))tunisGLGetProcAddress("glDrawCommandsStatesNV");
    tunisGL.tunisDrawElementArrayAPPLE = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLsizei))tunisGLGetProcAddress("glDrawElementArrayAPPLE");
    tunisGL.tunisDrawElementArrayATI = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei))tunisGLGetProcAddress("glDrawElementArrayATI");
    tunisGL.tunisDrawElements = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLenum, const void *))tunisGLGetProcAddress("glDrawElements");
    tunisGL.tunisDrawElementsBaseVertex = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLenum, const void *, GLint))tunisGLGetProcAddress("glDrawElementsBaseVertex");
    tunisGL.tunisDrawElementsBaseVertexEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLenum, const void *, GLint))tunisGLGetProcAddress("glDrawElementsBaseVertexEXT");
    tunisGL.tunisDrawElementsBaseVertexOES = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLenum, const void *, GLint))tunisGLGetProcAddress("glDrawElementsBaseVertexOES");
    tunisGL.tunisDrawElementsIndirect = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const void *))tunisGLGetProcAddress("glDrawElementsIndirect");
    tunisGL.tunisDrawElementsInstanced = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLenum, const void *, GLsizei))tunisGLGetProcAddress("glDrawElementsInstanced");
    tunisGL.tunisDrawElementsInstancedANGLE = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLenum, const void *, GLsizei))tunisGLGetProcAddress("glDrawElementsInstancedANGLE");
    tunisGL.tunisDrawElementsInstancedARB = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLenum, const void *, GLsizei))tunisGLGetProcAddress("glDrawElementsInstancedARB");
    tunisGL.tunisDrawElementsInstancedBaseInstance = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLenum, const void *, GLsizei, GLuint))tunisGLGetProcAddress("glDrawElementsInstancedBaseInstance");
    tunisGL.tunisDrawElementsInstancedBaseInstanceEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLenum, const void *, GLsizei, GLuint))tunisGLGetProcAddress("glDrawElementsInstancedBaseInstanceEXT");
    tunisGL.tunisDrawElementsInstancedBaseVertex = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLenum, const void *, GLsizei, GLint))tunisGLGetProcAddress("glDrawElementsInstancedBaseVertex");
    tunisGL.tunisDrawElementsInstancedBaseVertexBaseInstance = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLenum, const void *, GLsizei, GLint, GLuint))tunisGLGetProcAddress("glDrawElementsInstancedBaseVertexBaseInstance");
    tunisGL.tunisDrawElementsInstancedBaseVertexBaseInstanceEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLenum, const void *, GLsizei, GLint, GLuint))tunisGLGetProcAddress("glDrawElementsInstancedBaseVertexBaseInstanceEXT");
    tunisGL.tunisDrawElementsInstancedBaseVertexEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLenum, const void *, GLsizei, GLint))tunisGLGetProcAddress("glDrawElementsInstancedBaseVertexEXT");
    tunisGL.tunisDrawElementsInstancedBaseVertexOES = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLenum, const void *, GLsizei, GLint))tunisGLGetProcAddress("glDrawElementsInstancedBaseVertexOES");
    tunisGL.tunisDrawElementsInstancedEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLenum, const void *, GLsizei))tunisGLGetProcAddress("glDrawElementsInstancedEXT");
    tunisGL.tunisDrawElementsInstancedNV = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLenum, const void *, GLsizei))tunisGLGetProcAddress("glDrawElementsInstancedNV");
    tunisGL.tunisDrawMeshArraysSUN = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLsizei, GLsizei))tunisGLGetProcAddress("glDrawMeshArraysSUN");
    tunisGL.tunisDrawMeshTasksIndirectNV = (void (KHRONOS_APIENTRY *)(GLintptr))tunisGLGetProcAddress("glDrawMeshTasksIndirectNV");
    tunisGL.tunisDrawMeshTasksNV = (void (KHRONOS_APIENTRY *)(GLuint, GLuint))tunisGLGetProcAddress("glDrawMeshTasksNV");
    tunisGL.tunisDrawPixels = (void (KHRONOS_APIENTRY *)(GLsizei, GLsizei, GLenum, GLenum, const void *))tunisGLGetProcAddress("glDrawPixels");
    tunisGL.tunisDrawRangeElementArrayAPPLE = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLuint, GLint, GLsizei))tunisGLGetProcAddress("glDrawRangeElementArrayAPPLE");
    tunisGL.tunisDrawRangeElementArrayATI = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLuint, GLsizei))tunisGLGetProcAddress("glDrawRangeElementArrayATI");
    tunisGL.tunisDrawRangeElements = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLuint, GLsizei, GLenum, const void *))tunisGLGetProcAddress("glDrawRangeElements");
    tunisGL.tunisDrawRangeElementsBaseVertex = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLuint, GLsizei, GLenum, const void *, GLint))tunisGLGetProcAddress("glDrawRangeElementsBaseVertex");
    tunisGL.tunisDrawRangeElementsBaseVertexEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLuint, GLsizei, GLenum, const void *, GLint))tunisGLGetProcAddress("glDrawRangeElementsBaseVertexEXT");
    tunisGL.tunisDrawRangeElementsBaseVertexOES = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLuint, GLsizei, GLenum, const void *, GLint))tunisGLGetProcAddress("glDrawRangeElementsBaseVertexOES");
    tunisGL.tunisDrawRangeElementsEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLuint, GLsizei, GLenum, const void *))tunisGLGetProcAddress("glDrawRangeElementsEXT");
    tunisGL.tunisDrawTexfOES = (void (KHRONOS_APIENTRY *)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glDrawTexfOES");
    tunisGL.tunisDrawTexfvOES = (void (KHRONOS_APIENTRY *)(const GLfloat *))tunisGLGetProcAddress("glDrawTexfvOES");
    tunisGL.tunisDrawTexiOES = (void (KHRONOS_APIENTRY *)(GLint, GLint, GLint, GLint, GLint))tunisGLGetProcAddress("glDrawTexiOES");
    tunisGL.tunisDrawTexivOES = (void (KHRONOS_APIENTRY *)(const GLint *))tunisGLGetProcAddress("glDrawTexivOES");
    tunisGL.tunisDrawTexsOES = (void (KHRONOS_APIENTRY *)(GLshort, GLshort, GLshort, GLshort, GLshort))tunisGLGetProcAddress("glDrawTexsOES");
    tunisGL.tunisDrawTexsvOES = (void (KHRONOS_APIENTRY *)(const GLshort *))tunisGLGetProcAddress("glDrawTexsvOES");
    tunisGL.tunisDrawTextureNV = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glDrawTextureNV");
    tunisGL.tunisDrawTexxOES = (void (KHRONOS_APIENTRY *)(GLfixed, GLfixed, GLfixed, GLfixed, GLfixed))tunisGLGetProcAddress("glDrawTexxOES");
    tunisGL.tunisDrawTexxvOES = (void (KHRONOS_APIENTRY *)(const GLfixed *))tunisGLGetProcAddress("glDrawTexxvOES");
    tunisGL.tunisDrawTransformFeedback = (void (KHRONOS_APIENTRY *)(GLenum, GLuint))tunisGLGetProcAddress("glDrawTransformFeedback");
    tunisGL.tunisDrawTransformFeedbackEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLuint))tunisGLGetProcAddress("glDrawTransformFeedbackEXT");
    tunisGL.tunisDrawTransformFeedbackInstanced = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLsizei))tunisGLGetProcAddress("glDrawTransformFeedbackInstanced");
    tunisGL.tunisDrawTransformFeedbackInstancedEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLsizei))tunisGLGetProcAddress("glDrawTransformFeedbackInstancedEXT");
    tunisGL.tunisDrawTransformFeedbackNV = (void (KHRONOS_APIENTRY *)(GLenum, GLuint))tunisGLGetProcAddress("glDrawTransformFeedbackNV");
    tunisGL.tunisDrawTransformFeedbackStream = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLuint))tunisGLGetProcAddress("glDrawTransformFeedbackStream");
    tunisGL.tunisDrawTransformFeedbackStreamInstanced = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLuint, GLsizei))tunisGLGetProcAddress("glDrawTransformFeedbackStreamInstanced");
    tunisGL.tunisDrawVkImageNV = (void (KHRONOS_APIENTRY *)(GLuint64, GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glDrawVkImageNV");
    tunisGL.tunisEGLImageTargetRenderbufferStorageOES = (void (KHRONOS_APIENTRY *)(GLenum, GLeglImageOES))tunisGLGetProcAddress("glEGLImageTargetRenderbufferStorageOES");
    tunisGL.tunisEGLImageTargetTexStorageEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLeglImageOES, const GLint* ))tunisGLGetProcAddress("glEGLImageTargetTexStorageEXT");
    tunisGL.tunisEGLImageTargetTexture2DOES = (void (KHRONOS_APIENTRY *)(GLenum, GLeglImageOES))tunisGLGetProcAddress("glEGLImageTargetTexture2DOES");
    tunisGL.tunisEGLImageTargetTextureStorageEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLeglImageOES, const GLint* ))tunisGLGetProcAddress("glEGLImageTargetTextureStorageEXT");
    tunisGL.tunisEdgeFlag = (void (KHRONOS_APIENTRY *)(GLboolean))tunisGLGetProcAddress("glEdgeFlag");
    tunisGL.tunisEdgeFlagFormatNV = (void (KHRONOS_APIENTRY *)(GLsizei))tunisGLGetProcAddress("glEdgeFlagFormatNV");
    tunisGL.tunisEdgeFlagPointer = (void (KHRONOS_APIENTRY *)(GLsizei, const void *))tunisGLGetProcAddress("glEdgeFlagPointer");
    tunisGL.tunisEdgeFlagPointerEXT = (void (KHRONOS_APIENTRY *)(GLsizei, GLsizei, const GLboolean *))tunisGLGetProcAddress("glEdgeFlagPointerEXT");
    tunisGL.tunisEdgeFlagPointerListIBM = (void (KHRONOS_APIENTRY *)(GLint, const GLboolean **, GLint))tunisGLGetProcAddress("glEdgeFlagPointerListIBM");
    tunisGL.tunisEdgeFlagv = (void (KHRONOS_APIENTRY *)(const GLboolean *))tunisGLGetProcAddress("glEdgeFlagv");
    tunisGL.tunisElementPointerAPPLE = (void (KHRONOS_APIENTRY *)(GLenum, const void *))tunisGLGetProcAddress("glElementPointerAPPLE");
    tunisGL.tunisElementPointerATI = (void (KHRONOS_APIENTRY *)(GLenum, const void *))tunisGLGetProcAddress("glElementPointerATI");
    tunisGL.tunisEnable = (void (KHRONOS_APIENTRY *)(GLenum))tunisGLGetProcAddress("glEnable");
    tunisGL.tunisEnableClientState = (void (KHRONOS_APIENTRY *)(GLenum))tunisGLGetProcAddress("glEnableClientState");
    tunisGL.tunisEnableClientStateIndexedEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLuint))tunisGLGetProcAddress("glEnableClientStateIndexedEXT");
    tunisGL.tunisEnableClientStateiEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLuint))tunisGLGetProcAddress("glEnableClientStateiEXT");
    tunisGL.tunisEnableDriverControlQCOM = (void (KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glEnableDriverControlQCOM");
    tunisGL.tunisEnableIndexedEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLuint))tunisGLGetProcAddress("glEnableIndexedEXT");
    tunisGL.tunisEnableVariantClientStateEXT = (void (KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glEnableVariantClientStateEXT");
    tunisGL.tunisEnableVertexArrayAttrib = (void (KHRONOS_APIENTRY *)(GLuint, GLuint))tunisGLGetProcAddress("glEnableVertexArrayAttrib");
    tunisGL.tunisEnableVertexArrayAttribEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLuint))tunisGLGetProcAddress("glEnableVertexArrayAttribEXT");
    tunisGL.tunisEnableVertexArrayEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum))tunisGLGetProcAddress("glEnableVertexArrayEXT");
    tunisGL.tunisEnableVertexAttribAPPLE = (void (KHRONOS_APIENTRY *)(GLuint, GLenum))tunisGLGetProcAddress("glEnableVertexAttribAPPLE");
    tunisGL.tunisEnableVertexAttribArray = (void (KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glEnableVertexAttribArray");
    tunisGL.tunisEnableVertexAttribArrayARB = (void (KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glEnableVertexAttribArrayARB");
    tunisGL.tunisEnablei = (void (KHRONOS_APIENTRY *)(GLenum, GLuint))tunisGLGetProcAddress("glEnablei");
    tunisGL.tunisEnableiEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLuint))tunisGLGetProcAddress("glEnableiEXT");
    tunisGL.tunisEnableiNV = (void (KHRONOS_APIENTRY *)(GLenum, GLuint))tunisGLGetProcAddress("glEnableiNV");
    tunisGL.tunisEnableiOES = (void (KHRONOS_APIENTRY *)(GLenum, GLuint))tunisGLGetProcAddress("glEnableiOES");
    tunisGL.tunisEnd = (void (KHRONOS_APIENTRY *)(void))tunisGLGetProcAddress("glEnd");
    tunisGL.tunisEndConditionalRender = (void (KHRONOS_APIENTRY *)(void))tunisGLGetProcAddress("glEndConditionalRender");
    tunisGL.tunisEndConditionalRenderNV = (void (KHRONOS_APIENTRY *)(void))tunisGLGetProcAddress("glEndConditionalRenderNV");
    tunisGL.tunisEndConditionalRenderNVX = (void (KHRONOS_APIENTRY *)(void))tunisGLGetProcAddress("glEndConditionalRenderNVX");
    tunisGL.tunisEndFragmentShaderATI = (void (KHRONOS_APIENTRY *)(void))tunisGLGetProcAddress("glEndFragmentShaderATI");
    tunisGL.tunisEndList = (void (KHRONOS_APIENTRY *)(void))tunisGLGetProcAddress("glEndList");
    tunisGL.tunisEndOcclusionQueryNV = (void (KHRONOS_APIENTRY *)(void))tunisGLGetProcAddress("glEndOcclusionQueryNV");
    tunisGL.tunisEndPerfMonitorAMD = (void (KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glEndPerfMonitorAMD");
    tunisGL.tunisEndPerfQueryINTEL = (void (KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glEndPerfQueryINTEL");
    tunisGL.tunisEndQuery = (void (KHRONOS_APIENTRY *)(GLenum))tunisGLGetProcAddress("glEndQuery");
    tunisGL.tunisEndQueryARB = (void (KHRONOS_APIENTRY *)(GLenum))tunisGLGetProcAddress("glEndQueryARB");
    tunisGL.tunisEndQueryEXT = (void (KHRONOS_APIENTRY *)(GLenum))tunisGLGetProcAddress("glEndQueryEXT");
    tunisGL.tunisEndQueryIndexed = (void (KHRONOS_APIENTRY *)(GLenum, GLuint))tunisGLGetProcAddress("glEndQueryIndexed");
    tunisGL.tunisEndTilingQCOM = (void (KHRONOS_APIENTRY *)(GLbitfield))tunisGLGetProcAddress("glEndTilingQCOM");
    tunisGL.tunisEndTransformFeedback = (void (KHRONOS_APIENTRY *)(void))tunisGLGetProcAddress("glEndTransformFeedback");
    tunisGL.tunisEndTransformFeedbackEXT = (void (KHRONOS_APIENTRY *)(void))tunisGLGetProcAddress("glEndTransformFeedbackEXT");
    tunisGL.tunisEndTransformFeedbackNV = (void (KHRONOS_APIENTRY *)(void))tunisGLGetProcAddress("glEndTransformFeedbackNV");
    tunisGL.tunisEndVertexShaderEXT = (void (KHRONOS_APIENTRY *)(void))tunisGLGetProcAddress("glEndVertexShaderEXT");
    tunisGL.tunisEndVideoCaptureNV = (void (KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glEndVideoCaptureNV");
    tunisGL.tunisEvalCoord1d = (void (KHRONOS_APIENTRY *)(GLdouble))tunisGLGetProcAddress("glEvalCoord1d");
    tunisGL.tunisEvalCoord1dv = (void (KHRONOS_APIENTRY *)(const GLdouble *))tunisGLGetProcAddress("glEvalCoord1dv");
    tunisGL.tunisEvalCoord1f = (void (KHRONOS_APIENTRY *)(GLfloat))tunisGLGetProcAddress("glEvalCoord1f");
    tunisGL.tunisEvalCoord1fv = (void (KHRONOS_APIENTRY *)(const GLfloat *))tunisGLGetProcAddress("glEvalCoord1fv");
    tunisGL.tunisEvalCoord1xOES = (void (KHRONOS_APIENTRY *)(GLfixed))tunisGLGetProcAddress("glEvalCoord1xOES");
    tunisGL.tunisEvalCoord1xvOES = (void (KHRONOS_APIENTRY *)(const GLfixed *))tunisGLGetProcAddress("glEvalCoord1xvOES");
    tunisGL.tunisEvalCoord2d = (void (KHRONOS_APIENTRY *)(GLdouble, GLdouble))tunisGLGetProcAddress("glEvalCoord2d");
    tunisGL.tunisEvalCoord2dv = (void (KHRONOS_APIENTRY *)(const GLdouble *))tunisGLGetProcAddress("glEvalCoord2dv");
    tunisGL.tunisEvalCoord2f = (void (KHRONOS_APIENTRY *)(GLfloat, GLfloat))tunisGLGetProcAddress("glEvalCoord2f");
    tunisGL.tunisEvalCoord2fv = (void (KHRONOS_APIENTRY *)(const GLfloat *))tunisGLGetProcAddress("glEvalCoord2fv");
    tunisGL.tunisEvalCoord2xOES = (void (KHRONOS_APIENTRY *)(GLfixed, GLfixed))tunisGLGetProcAddress("glEvalCoord2xOES");
    tunisGL.tunisEvalCoord2xvOES = (void (KHRONOS_APIENTRY *)(const GLfixed *))tunisGLGetProcAddress("glEvalCoord2xvOES");
    tunisGL.tunisEvalMapsNV = (void (KHRONOS_APIENTRY *)(GLenum, GLenum))tunisGLGetProcAddress("glEvalMapsNV");
    tunisGL.tunisEvalMesh1 = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLint))tunisGLGetProcAddress("glEvalMesh1");
    tunisGL.tunisEvalMesh2 = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLint, GLint, GLint))tunisGLGetProcAddress("glEvalMesh2");
    tunisGL.tunisEvalPoint1 = (void (KHRONOS_APIENTRY *)(GLint))tunisGLGetProcAddress("glEvalPoint1");
    tunisGL.tunisEvalPoint2 = (void (KHRONOS_APIENTRY *)(GLint, GLint))tunisGLGetProcAddress("glEvalPoint2");
    tunisGL.tunisEvaluateDepthValuesARB = (void (KHRONOS_APIENTRY *)(void))tunisGLGetProcAddress("glEvaluateDepthValuesARB");
    tunisGL.tunisExecuteProgramNV = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, const GLfloat *))tunisGLGetProcAddress("glExecuteProgramNV");
    tunisGL.tunisExtGetBufferPointervQCOM = (void (KHRONOS_APIENTRY *)(GLenum, void **))tunisGLGetProcAddress("glExtGetBufferPointervQCOM");
    tunisGL.tunisExtGetBuffersQCOM = (void (KHRONOS_APIENTRY *)(GLuint *, GLint, GLint *))tunisGLGetProcAddress("glExtGetBuffersQCOM");
    tunisGL.tunisExtGetFramebuffersQCOM = (void (KHRONOS_APIENTRY *)(GLuint *, GLint, GLint *))tunisGLGetProcAddress("glExtGetFramebuffersQCOM");
    tunisGL.tunisExtGetProgramBinarySourceQCOM = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLchar *, GLint *))tunisGLGetProcAddress("glExtGetProgramBinarySourceQCOM");
    tunisGL.tunisExtGetProgramsQCOM = (void (KHRONOS_APIENTRY *)(GLuint *, GLint, GLint *))tunisGLGetProcAddress("glExtGetProgramsQCOM");
    tunisGL.tunisExtGetRenderbuffersQCOM = (void (KHRONOS_APIENTRY *)(GLuint *, GLint, GLint *))tunisGLGetProcAddress("glExtGetRenderbuffersQCOM");
    tunisGL.tunisExtGetShadersQCOM = (void (KHRONOS_APIENTRY *)(GLuint *, GLint, GLint *))tunisGLGetProcAddress("glExtGetShadersQCOM");
    tunisGL.tunisExtGetTexLevelParameterivQCOM = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint, GLenum, GLint *))tunisGLGetProcAddress("glExtGetTexLevelParameterivQCOM");
    tunisGL.tunisExtGetTexSubImageQCOM = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, void *))tunisGLGetProcAddress("glExtGetTexSubImageQCOM");
    tunisGL.tunisExtGetTexturesQCOM = (void (KHRONOS_APIENTRY *)(GLuint *, GLint, GLint *))tunisGLGetProcAddress("glExtGetTexturesQCOM");
    tunisGL.tunisExtIsProgramBinaryQCOM = (GLboolean(KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glExtIsProgramBinaryQCOM");
    tunisGL.tunisExtTexObjectStateOverrideiQCOM = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint))tunisGLGetProcAddress("glExtTexObjectStateOverrideiQCOM");
    tunisGL.tunisExtractComponentEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLuint))tunisGLGetProcAddress("glExtractComponentEXT");
    tunisGL.tunisFeedbackBuffer = (void (KHRONOS_APIENTRY *)(GLsizei, GLenum, GLfloat *))tunisGLGetProcAddress("glFeedbackBuffer");
    tunisGL.tunisFeedbackBufferxOES = (void (KHRONOS_APIENTRY *)(GLsizei, GLenum, const GLfixed *))tunisGLGetProcAddress("glFeedbackBufferxOES");
    tunisGL.tunisFenceSync = (GLsync(KHRONOS_APIENTRY *)(GLenum, GLbitfield))tunisGLGetProcAddress("glFenceSync");
    tunisGL.tunisFenceSyncAPPLE = (GLsync(KHRONOS_APIENTRY *)(GLenum, GLbitfield))tunisGLGetProcAddress("glFenceSyncAPPLE");
    tunisGL.tunisFinalCombinerInputNV = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLenum))tunisGLGetProcAddress("glFinalCombinerInputNV");
    tunisGL.tunisFinish = (void (KHRONOS_APIENTRY *)(void))tunisGLGetProcAddress("glFinish");
    tunisGL.tunisFinishAsyncSGIX = (GLint(KHRONOS_APIENTRY *)(GLuint *))tunisGLGetProcAddress("glFinishAsyncSGIX");
    tunisGL.tunisFinishFenceAPPLE = (void (KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glFinishFenceAPPLE");
    tunisGL.tunisFinishFenceNV = (void (KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glFinishFenceNV");
    tunisGL.tunisFinishObjectAPPLE = (void (KHRONOS_APIENTRY *)(GLenum, GLint))tunisGLGetProcAddress("glFinishObjectAPPLE");
    tunisGL.tunisFinishTextureSUNX = (void (KHRONOS_APIENTRY *)(void))tunisGLGetProcAddress("glFinishTextureSUNX");
    tunisGL.tunisFlush = (void (KHRONOS_APIENTRY *)(void))tunisGLGetProcAddress("glFlush");
    tunisGL.tunisFlushMappedBufferRange = (void (KHRONOS_APIENTRY *)(GLenum, GLintptr, GLsizeiptr))tunisGLGetProcAddress("glFlushMappedBufferRange");
    tunisGL.tunisFlushMappedBufferRangeAPPLE = (void (KHRONOS_APIENTRY *)(GLenum, GLintptr, GLsizeiptr))tunisGLGetProcAddress("glFlushMappedBufferRangeAPPLE");
    tunisGL.tunisFlushMappedBufferRangeEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLintptr, GLsizeiptr))tunisGLGetProcAddress("glFlushMappedBufferRangeEXT");
    tunisGL.tunisFlushMappedNamedBufferRange = (void (KHRONOS_APIENTRY *)(GLuint, GLintptr, GLsizeiptr))tunisGLGetProcAddress("glFlushMappedNamedBufferRange");
    tunisGL.tunisFlushMappedNamedBufferRangeEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLintptr, GLsizeiptr))tunisGLGetProcAddress("glFlushMappedNamedBufferRangeEXT");
    tunisGL.tunisFlushPixelDataRangeNV = (void (KHRONOS_APIENTRY *)(GLenum))tunisGLGetProcAddress("glFlushPixelDataRangeNV");
    tunisGL.tunisFlushRasterSGIX = (void (KHRONOS_APIENTRY *)(void))tunisGLGetProcAddress("glFlushRasterSGIX");
    tunisGL.tunisFlushStaticDataIBM = (void (KHRONOS_APIENTRY *)(GLenum))tunisGLGetProcAddress("glFlushStaticDataIBM");
    tunisGL.tunisFlushVertexArrayRangeAPPLE = (void (KHRONOS_APIENTRY *)(GLsizei, void *))tunisGLGetProcAddress("glFlushVertexArrayRangeAPPLE");
    tunisGL.tunisFlushVertexArrayRangeNV = (void (KHRONOS_APIENTRY *)(void))tunisGLGetProcAddress("glFlushVertexArrayRangeNV");
    tunisGL.tunisFogCoordFormatNV = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei))tunisGLGetProcAddress("glFogCoordFormatNV");
    tunisGL.tunisFogCoordPointer = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, const void *))tunisGLGetProcAddress("glFogCoordPointer");
    tunisGL.tunisFogCoordPointerEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, const void *))tunisGLGetProcAddress("glFogCoordPointerEXT");
    tunisGL.tunisFogCoordPointerListIBM = (void (KHRONOS_APIENTRY *)(GLenum, GLint, const void **, GLint))tunisGLGetProcAddress("glFogCoordPointerListIBM");
    tunisGL.tunisFogCoordd = (void (KHRONOS_APIENTRY *)(GLdouble))tunisGLGetProcAddress("glFogCoordd");
    tunisGL.tunisFogCoorddEXT = (void (KHRONOS_APIENTRY *)(GLdouble))tunisGLGetProcAddress("glFogCoorddEXT");
    tunisGL.tunisFogCoorddv = (void (KHRONOS_APIENTRY *)(const GLdouble *))tunisGLGetProcAddress("glFogCoorddv");
    tunisGL.tunisFogCoorddvEXT = (void (KHRONOS_APIENTRY *)(const GLdouble *))tunisGLGetProcAddress("glFogCoorddvEXT");
    tunisGL.tunisFogCoordf = (void (KHRONOS_APIENTRY *)(GLfloat))tunisGLGetProcAddress("glFogCoordf");
    tunisGL.tunisFogCoordfEXT = (void (KHRONOS_APIENTRY *)(GLfloat))tunisGLGetProcAddress("glFogCoordfEXT");
    tunisGL.tunisFogCoordfv = (void (KHRONOS_APIENTRY *)(const GLfloat *))tunisGLGetProcAddress("glFogCoordfv");
    tunisGL.tunisFogCoordfvEXT = (void (KHRONOS_APIENTRY *)(const GLfloat *))tunisGLGetProcAddress("glFogCoordfvEXT");
    tunisGL.tunisFogCoordhNV = (void (KHRONOS_APIENTRY *)(GLhalfNV))tunisGLGetProcAddress("glFogCoordhNV");
    tunisGL.tunisFogCoordhvNV = (void (KHRONOS_APIENTRY *)(const GLhalfNV *))tunisGLGetProcAddress("glFogCoordhvNV");
    tunisGL.tunisFogFuncSGIS = (void (KHRONOS_APIENTRY *)(GLsizei, const GLfloat *))tunisGLGetProcAddress("glFogFuncSGIS");
    tunisGL.tunisFogf = (void (KHRONOS_APIENTRY *)(GLenum, GLfloat))tunisGLGetProcAddress("glFogf");
    tunisGL.tunisFogfv = (void (KHRONOS_APIENTRY *)(GLenum, const GLfloat *))tunisGLGetProcAddress("glFogfv");
    tunisGL.tunisFogi = (void (KHRONOS_APIENTRY *)(GLenum, GLint))tunisGLGetProcAddress("glFogi");
    tunisGL.tunisFogiv = (void (KHRONOS_APIENTRY *)(GLenum, const GLint *))tunisGLGetProcAddress("glFogiv");
    tunisGL.tunisFogx = (void (KHRONOS_APIENTRY *)(GLenum, GLfixed))tunisGLGetProcAddress("glFogx");
    tunisGL.tunisFogxOES = (void (KHRONOS_APIENTRY *)(GLenum, GLfixed))tunisGLGetProcAddress("glFogxOES");
    tunisGL.tunisFogxv = (void (KHRONOS_APIENTRY *)(GLenum, const GLfixed *))tunisGLGetProcAddress("glFogxv");
    tunisGL.tunisFogxvOES = (void (KHRONOS_APIENTRY *)(GLenum, const GLfixed *))tunisGLGetProcAddress("glFogxvOES");
    tunisGL.tunisFragmentColorMaterialSGIX = (void (KHRONOS_APIENTRY *)(GLenum, GLenum))tunisGLGetProcAddress("glFragmentColorMaterialSGIX");
    tunisGL.tunisFragmentCoverageColorNV = (void (KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glFragmentCoverageColorNV");
    tunisGL.tunisFragmentLightModelfSGIX = (void (KHRONOS_APIENTRY *)(GLenum, GLfloat))tunisGLGetProcAddress("glFragmentLightModelfSGIX");
    tunisGL.tunisFragmentLightModelfvSGIX = (void (KHRONOS_APIENTRY *)(GLenum, const GLfloat *))tunisGLGetProcAddress("glFragmentLightModelfvSGIX");
    tunisGL.tunisFragmentLightModeliSGIX = (void (KHRONOS_APIENTRY *)(GLenum, GLint))tunisGLGetProcAddress("glFragmentLightModeliSGIX");
    tunisGL.tunisFragmentLightModelivSGIX = (void (KHRONOS_APIENTRY *)(GLenum, const GLint *))tunisGLGetProcAddress("glFragmentLightModelivSGIX");
    tunisGL.tunisFragmentLightfSGIX = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfloat))tunisGLGetProcAddress("glFragmentLightfSGIX");
    tunisGL.tunisFragmentLightfvSGIX = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const GLfloat *))tunisGLGetProcAddress("glFragmentLightfvSGIX");
    tunisGL.tunisFragmentLightiSGIX = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint))tunisGLGetProcAddress("glFragmentLightiSGIX");
    tunisGL.tunisFragmentLightivSGIX = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const GLint *))tunisGLGetProcAddress("glFragmentLightivSGIX");
    tunisGL.tunisFragmentMaterialfSGIX = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfloat))tunisGLGetProcAddress("glFragmentMaterialfSGIX");
    tunisGL.tunisFragmentMaterialfvSGIX = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const GLfloat *))tunisGLGetProcAddress("glFragmentMaterialfvSGIX");
    tunisGL.tunisFragmentMaterialiSGIX = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint))tunisGLGetProcAddress("glFragmentMaterialiSGIX");
    tunisGL.tunisFragmentMaterialivSGIX = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const GLint *))tunisGLGetProcAddress("glFragmentMaterialivSGIX");
    tunisGL.tunisFrameTerminatorGREMEDY = (void (KHRONOS_APIENTRY *)(void))tunisGLGetProcAddress("glFrameTerminatorGREMEDY");
    tunisGL.tunisFrameZoomSGIX = (void (KHRONOS_APIENTRY *)(GLint))tunisGLGetProcAddress("glFrameZoomSGIX");
    tunisGL.tunisFramebufferDrawBufferEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum))tunisGLGetProcAddress("glFramebufferDrawBufferEXT");
    tunisGL.tunisFramebufferDrawBuffersEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, const GLenum *))tunisGLGetProcAddress("glFramebufferDrawBuffersEXT");
    tunisGL.tunisFramebufferFetchBarrierEXT = (void (KHRONOS_APIENTRY *)(void))tunisGLGetProcAddress("glFramebufferFetchBarrierEXT");
    tunisGL.tunisFramebufferFetchBarrierQCOM = (void (KHRONOS_APIENTRY *)(void))tunisGLGetProcAddress("glFramebufferFetchBarrierQCOM");
    tunisGL.tunisFramebufferFoveationConfigQCOM = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLuint, GLuint, GLuint *))tunisGLGetProcAddress("glFramebufferFoveationConfigQCOM");
    tunisGL.tunisFramebufferFoveationParametersQCOM = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glFramebufferFoveationParametersQCOM");
    tunisGL.tunisFramebufferParameteri = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint))tunisGLGetProcAddress("glFramebufferParameteri");
    tunisGL.tunisFramebufferPixelLocalStorageSizeEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei))tunisGLGetProcAddress("glFramebufferPixelLocalStorageSizeEXT");
    tunisGL.tunisFramebufferReadBufferEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum))tunisGLGetProcAddress("glFramebufferReadBufferEXT");
    tunisGL.tunisFramebufferRenderbuffer = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLuint))tunisGLGetProcAddress("glFramebufferRenderbuffer");
    tunisGL.tunisFramebufferRenderbufferEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLuint))tunisGLGetProcAddress("glFramebufferRenderbufferEXT");
    tunisGL.tunisFramebufferRenderbufferOES = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLuint))tunisGLGetProcAddress("glFramebufferRenderbufferOES");
    tunisGL.tunisFramebufferSampleLocationsfvARB = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLsizei, const GLfloat *))tunisGLGetProcAddress("glFramebufferSampleLocationsfvARB");
    tunisGL.tunisFramebufferSampleLocationsfvNV = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLsizei, const GLfloat *))tunisGLGetProcAddress("glFramebufferSampleLocationsfvNV");
    tunisGL.tunisFramebufferSamplePositionsfvAMD = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLuint, const GLfloat *))tunisGLGetProcAddress("glFramebufferSamplePositionsfvAMD");
    tunisGL.tunisFramebufferTexture = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLuint, GLint))tunisGLGetProcAddress("glFramebufferTexture");
    tunisGL.tunisFramebufferTexture1D = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLuint, GLint))tunisGLGetProcAddress("glFramebufferTexture1D");
    tunisGL.tunisFramebufferTexture1DEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLuint, GLint))tunisGLGetProcAddress("glFramebufferTexture1DEXT");
    tunisGL.tunisFramebufferTexture2D = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLuint, GLint))tunisGLGetProcAddress("glFramebufferTexture2D");
    tunisGL.tunisFramebufferTexture2DDownsampleIMG = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLuint, GLint, GLint, GLint))tunisGLGetProcAddress("glFramebufferTexture2DDownsampleIMG");
    tunisGL.tunisFramebufferTexture2DEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLuint, GLint))tunisGLGetProcAddress("glFramebufferTexture2DEXT");
    tunisGL.tunisFramebufferTexture2DMultisampleEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLuint, GLint, GLsizei))tunisGLGetProcAddress("glFramebufferTexture2DMultisampleEXT");
    tunisGL.tunisFramebufferTexture2DMultisampleIMG = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLuint, GLint, GLsizei))tunisGLGetProcAddress("glFramebufferTexture2DMultisampleIMG");
    tunisGL.tunisFramebufferTexture2DOES = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLuint, GLint))tunisGLGetProcAddress("glFramebufferTexture2DOES");
    tunisGL.tunisFramebufferTexture3D = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLuint, GLint, GLint))tunisGLGetProcAddress("glFramebufferTexture3D");
    tunisGL.tunisFramebufferTexture3DEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLuint, GLint, GLint))tunisGLGetProcAddress("glFramebufferTexture3DEXT");
    tunisGL.tunisFramebufferTexture3DOES = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLuint, GLint, GLint))tunisGLGetProcAddress("glFramebufferTexture3DOES");
    tunisGL.tunisFramebufferTextureARB = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLuint, GLint))tunisGLGetProcAddress("glFramebufferTextureARB");
    tunisGL.tunisFramebufferTextureEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLuint, GLint))tunisGLGetProcAddress("glFramebufferTextureEXT");
    tunisGL.tunisFramebufferTextureFaceARB = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLuint, GLint, GLenum))tunisGLGetProcAddress("glFramebufferTextureFaceARB");
    tunisGL.tunisFramebufferTextureFaceEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLuint, GLint, GLenum))tunisGLGetProcAddress("glFramebufferTextureFaceEXT");
    tunisGL.tunisFramebufferTextureLayer = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLuint, GLint, GLint))tunisGLGetProcAddress("glFramebufferTextureLayer");
    tunisGL.tunisFramebufferTextureLayerARB = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLuint, GLint, GLint))tunisGLGetProcAddress("glFramebufferTextureLayerARB");
    tunisGL.tunisFramebufferTextureLayerDownsampleIMG = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLuint, GLint, GLint, GLint, GLint))tunisGLGetProcAddress("glFramebufferTextureLayerDownsampleIMG");
    tunisGL.tunisFramebufferTextureLayerEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLuint, GLint, GLint))tunisGLGetProcAddress("glFramebufferTextureLayerEXT");
    tunisGL.tunisFramebufferTextureMultisampleMultiviewOVR = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLuint, GLint, GLsizei, GLint, GLsizei))tunisGLGetProcAddress("glFramebufferTextureMultisampleMultiviewOVR");
    tunisGL.tunisFramebufferTextureMultiviewOVR = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLuint, GLint, GLint, GLsizei))tunisGLGetProcAddress("glFramebufferTextureMultiviewOVR");
    tunisGL.tunisFramebufferTextureOES = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLuint, GLint))tunisGLGetProcAddress("glFramebufferTextureOES");
    tunisGL.tunisFreeObjectBufferATI = (void (KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glFreeObjectBufferATI");
    tunisGL.tunisFrontFace = (void (KHRONOS_APIENTRY *)(GLenum))tunisGLGetProcAddress("glFrontFace");
    tunisGL.tunisFrustum = (void (KHRONOS_APIENTRY *)(GLdouble, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble))tunisGLGetProcAddress("glFrustum");
    tunisGL.tunisFrustumf = (void (KHRONOS_APIENTRY *)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glFrustumf");
    tunisGL.tunisFrustumfOES = (void (KHRONOS_APIENTRY *)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glFrustumfOES");
    tunisGL.tunisFrustumx = (void (KHRONOS_APIENTRY *)(GLfixed, GLfixed, GLfixed, GLfixed, GLfixed, GLfixed))tunisGLGetProcAddress("glFrustumx");
    tunisGL.tunisFrustumxOES = (void (KHRONOS_APIENTRY *)(GLfixed, GLfixed, GLfixed, GLfixed, GLfixed, GLfixed))tunisGLGetProcAddress("glFrustumxOES");
    tunisGL.tunisGenAsyncMarkersSGIX = (GLuint(KHRONOS_APIENTRY *)(GLsizei))tunisGLGetProcAddress("glGenAsyncMarkersSGIX");
    tunisGL.tunisGenBuffers = (void (KHRONOS_APIENTRY *)(GLsizei, GLuint *))tunisGLGetProcAddress("glGenBuffers");
    tunisGL.tunisGenBuffersARB = (void (KHRONOS_APIENTRY *)(GLsizei, GLuint *))tunisGLGetProcAddress("glGenBuffersARB");
    tunisGL.tunisGenFencesAPPLE = (void (KHRONOS_APIENTRY *)(GLsizei, GLuint *))tunisGLGetProcAddress("glGenFencesAPPLE");
    tunisGL.tunisGenFencesNV = (void (KHRONOS_APIENTRY *)(GLsizei, GLuint *))tunisGLGetProcAddress("glGenFencesNV");
    tunisGL.tunisGenFragmentShadersATI = (GLuint(KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glGenFragmentShadersATI");
    tunisGL.tunisGenFramebuffers = (void (KHRONOS_APIENTRY *)(GLsizei, GLuint *))tunisGLGetProcAddress("glGenFramebuffers");
    tunisGL.tunisGenFramebuffersEXT = (void (KHRONOS_APIENTRY *)(GLsizei, GLuint *))tunisGLGetProcAddress("glGenFramebuffersEXT");
    tunisGL.tunisGenFramebuffersOES = (void (KHRONOS_APIENTRY *)(GLsizei, GLuint *))tunisGLGetProcAddress("glGenFramebuffersOES");
    tunisGL.tunisGenLists = (GLuint(KHRONOS_APIENTRY *)(GLsizei))tunisGLGetProcAddress("glGenLists");
    tunisGL.tunisGenNamesAMD = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLuint *))tunisGLGetProcAddress("glGenNamesAMD");
    tunisGL.tunisGenOcclusionQueriesNV = (void (KHRONOS_APIENTRY *)(GLsizei, GLuint *))tunisGLGetProcAddress("glGenOcclusionQueriesNV");
    tunisGL.tunisGenPathsNV = (GLuint(KHRONOS_APIENTRY *)(GLsizei))tunisGLGetProcAddress("glGenPathsNV");
    tunisGL.tunisGenPerfMonitorsAMD = (void (KHRONOS_APIENTRY *)(GLsizei, GLuint *))tunisGLGetProcAddress("glGenPerfMonitorsAMD");
    tunisGL.tunisGenProgramPipelines = (void (KHRONOS_APIENTRY *)(GLsizei, GLuint *))tunisGLGetProcAddress("glGenProgramPipelines");
    tunisGL.tunisGenProgramPipelinesEXT = (void (KHRONOS_APIENTRY *)(GLsizei, GLuint *))tunisGLGetProcAddress("glGenProgramPipelinesEXT");
    tunisGL.tunisGenProgramsARB = (void (KHRONOS_APIENTRY *)(GLsizei, GLuint *))tunisGLGetProcAddress("glGenProgramsARB");
    tunisGL.tunisGenProgramsNV = (void (KHRONOS_APIENTRY *)(GLsizei, GLuint *))tunisGLGetProcAddress("glGenProgramsNV");
    tunisGL.tunisGenQueries = (void (KHRONOS_APIENTRY *)(GLsizei, GLuint *))tunisGLGetProcAddress("glGenQueries");
    tunisGL.tunisGenQueriesARB = (void (KHRONOS_APIENTRY *)(GLsizei, GLuint *))tunisGLGetProcAddress("glGenQueriesARB");
    tunisGL.tunisGenQueriesEXT = (void (KHRONOS_APIENTRY *)(GLsizei, GLuint *))tunisGLGetProcAddress("glGenQueriesEXT");
    tunisGL.tunisGenQueryResourceTagNV = (void (KHRONOS_APIENTRY *)(GLsizei, GLint *))tunisGLGetProcAddress("glGenQueryResourceTagNV");
    tunisGL.tunisGenRenderbuffers = (void (KHRONOS_APIENTRY *)(GLsizei, GLuint *))tunisGLGetProcAddress("glGenRenderbuffers");
    tunisGL.tunisGenRenderbuffersEXT = (void (KHRONOS_APIENTRY *)(GLsizei, GLuint *))tunisGLGetProcAddress("glGenRenderbuffersEXT");
    tunisGL.tunisGenRenderbuffersOES = (void (KHRONOS_APIENTRY *)(GLsizei, GLuint *))tunisGLGetProcAddress("glGenRenderbuffersOES");
    tunisGL.tunisGenSamplers = (void (KHRONOS_APIENTRY *)(GLsizei, GLuint *))tunisGLGetProcAddress("glGenSamplers");
    tunisGL.tunisGenSemaphoresEXT = (void (KHRONOS_APIENTRY *)(GLsizei, GLuint *))tunisGLGetProcAddress("glGenSemaphoresEXT");
    tunisGL.tunisGenSymbolsEXT = (GLuint(KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLuint))tunisGLGetProcAddress("glGenSymbolsEXT");
    tunisGL.tunisGenTextures = (void (KHRONOS_APIENTRY *)(GLsizei, GLuint *))tunisGLGetProcAddress("glGenTextures");
    tunisGL.tunisGenTexturesEXT = (void (KHRONOS_APIENTRY *)(GLsizei, GLuint *))tunisGLGetProcAddress("glGenTexturesEXT");
    tunisGL.tunisGenTransformFeedbacks = (void (KHRONOS_APIENTRY *)(GLsizei, GLuint *))tunisGLGetProcAddress("glGenTransformFeedbacks");
    tunisGL.tunisGenTransformFeedbacksNV = (void (KHRONOS_APIENTRY *)(GLsizei, GLuint *))tunisGLGetProcAddress("glGenTransformFeedbacksNV");
    tunisGL.tunisGenVertexArrays = (void (KHRONOS_APIENTRY *)(GLsizei, GLuint *))tunisGLGetProcAddress("glGenVertexArrays");
    tunisGL.tunisGenVertexArraysAPPLE = (void (KHRONOS_APIENTRY *)(GLsizei, GLuint *))tunisGLGetProcAddress("glGenVertexArraysAPPLE");
    tunisGL.tunisGenVertexArraysOES = (void (KHRONOS_APIENTRY *)(GLsizei, GLuint *))tunisGLGetProcAddress("glGenVertexArraysOES");
    tunisGL.tunisGenVertexShadersEXT = (GLuint(KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glGenVertexShadersEXT");
    tunisGL.tunisGenerateMipmap = (void (KHRONOS_APIENTRY *)(GLenum))tunisGLGetProcAddress("glGenerateMipmap");
    tunisGL.tunisGenerateMipmapEXT = (void (KHRONOS_APIENTRY *)(GLenum))tunisGLGetProcAddress("glGenerateMipmapEXT");
    tunisGL.tunisGenerateMipmapOES = (void (KHRONOS_APIENTRY *)(GLenum))tunisGLGetProcAddress("glGenerateMipmapOES");
    tunisGL.tunisGenerateMultiTexMipmapEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum))tunisGLGetProcAddress("glGenerateMultiTexMipmapEXT");
    tunisGL.tunisGenerateTextureMipmap = (void (KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glGenerateTextureMipmap");
    tunisGL.tunisGenerateTextureMipmapEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum))tunisGLGetProcAddress("glGenerateTextureMipmapEXT");
    tunisGL.tunisGetActiveAtomicCounterBufferiv = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLenum, GLint *))tunisGLGetProcAddress("glGetActiveAtomicCounterBufferiv");
    tunisGL.tunisGetActiveAttrib = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLsizei, GLsizei *, GLint *, GLenum *, GLchar *))tunisGLGetProcAddress("glGetActiveAttrib");
    tunisGL.tunisGetActiveAttribARB = (void (KHRONOS_APIENTRY *)(GLhandleARB, GLuint, GLsizei, GLsizei *, GLint *, GLenum *, GLcharARB *))tunisGLGetProcAddress("glGetActiveAttribARB");
    tunisGL.tunisGetActiveSubroutineName = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLuint, GLsizei, GLsizei *, GLchar *))tunisGLGetProcAddress("glGetActiveSubroutineName");
    tunisGL.tunisGetActiveSubroutineUniformName = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLuint, GLsizei, GLsizei *, GLchar *))tunisGLGetProcAddress("glGetActiveSubroutineUniformName");
    tunisGL.tunisGetActiveSubroutineUniformiv = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLuint, GLenum, GLint *))tunisGLGetProcAddress("glGetActiveSubroutineUniformiv");
    tunisGL.tunisGetActiveUniform = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLsizei, GLsizei *, GLint *, GLenum *, GLchar *))tunisGLGetProcAddress("glGetActiveUniform");
    tunisGL.tunisGetActiveUniformARB = (void (KHRONOS_APIENTRY *)(GLhandleARB, GLuint, GLsizei, GLsizei *, GLint *, GLenum *, GLcharARB *))tunisGLGetProcAddress("glGetActiveUniformARB");
    tunisGL.tunisGetActiveUniformBlockName = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLsizei, GLsizei *, GLchar *))tunisGLGetProcAddress("glGetActiveUniformBlockName");
    tunisGL.tunisGetActiveUniformBlockiv = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLenum, GLint *))tunisGLGetProcAddress("glGetActiveUniformBlockiv");
    tunisGL.tunisGetActiveUniformName = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLsizei, GLsizei *, GLchar *))tunisGLGetProcAddress("glGetActiveUniformName");
    tunisGL.tunisGetActiveUniformsiv = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, const GLuint *, GLenum, GLint *))tunisGLGetProcAddress("glGetActiveUniformsiv");
    tunisGL.tunisGetActiveVaryingNV = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLsizei, GLsizei *, GLsizei *, GLenum *, GLchar *))tunisGLGetProcAddress("glGetActiveVaryingNV");
    tunisGL.tunisGetArrayObjectfvATI = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfloat *))tunisGLGetProcAddress("glGetArrayObjectfvATI");
    tunisGL.tunisGetArrayObjectivATI = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint *))tunisGLGetProcAddress("glGetArrayObjectivATI");
    tunisGL.tunisGetAttachedObjectsARB = (void (KHRONOS_APIENTRY *)(GLhandleARB, GLsizei, GLsizei *, GLhandleARB *))tunisGLGetProcAddress("glGetAttachedObjectsARB");
    tunisGL.tunisGetAttachedShaders = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, GLsizei *, GLuint *))tunisGLGetProcAddress("glGetAttachedShaders");
    tunisGL.tunisGetAttribLocation = (GLint(KHRONOS_APIENTRY *)(GLuint, const GLchar *))tunisGLGetProcAddress("glGetAttribLocation");
    tunisGL.tunisGetAttribLocationARB = (GLint(KHRONOS_APIENTRY *)(GLhandleARB, const GLcharARB *))tunisGLGetProcAddress("glGetAttribLocationARB");
    tunisGL.tunisGetBooleanIndexedvEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLboolean *))tunisGLGetProcAddress("glGetBooleanIndexedvEXT");
    tunisGL.tunisGetBooleani_v = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLboolean *))tunisGLGetProcAddress("glGetBooleani_v");
    tunisGL.tunisGetBooleanv = (void (KHRONOS_APIENTRY *)(GLenum, GLboolean *))tunisGLGetProcAddress("glGetBooleanv");
    tunisGL.tunisGetBufferParameteri64v = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint64 *))tunisGLGetProcAddress("glGetBufferParameteri64v");
    tunisGL.tunisGetBufferParameteriv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint *))tunisGLGetProcAddress("glGetBufferParameteriv");
    tunisGL.tunisGetBufferParameterivARB = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint *))tunisGLGetProcAddress("glGetBufferParameterivARB");
    tunisGL.tunisGetBufferParameterui64vNV = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLuint64EXT *))tunisGLGetProcAddress("glGetBufferParameterui64vNV");
    tunisGL.tunisGetBufferPointerv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, void **))tunisGLGetProcAddress("glGetBufferPointerv");
    tunisGL.tunisGetBufferPointervARB = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, void **))tunisGLGetProcAddress("glGetBufferPointervARB");
    tunisGL.tunisGetBufferPointervOES = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, void **))tunisGLGetProcAddress("glGetBufferPointervOES");
    tunisGL.tunisGetBufferSubData = (void (KHRONOS_APIENTRY *)(GLenum, GLintptr, GLsizeiptr, void *))tunisGLGetProcAddress("glGetBufferSubData");
    tunisGL.tunisGetBufferSubDataARB = (void (KHRONOS_APIENTRY *)(GLenum, GLintptrARB, GLsizeiptrARB, void *))tunisGLGetProcAddress("glGetBufferSubDataARB");
    tunisGL.tunisGetClipPlane = (void (KHRONOS_APIENTRY *)(GLenum, GLdouble *))tunisGLGetProcAddress("glGetClipPlane");
    tunisGL.tunisGetClipPlanef = (void (KHRONOS_APIENTRY *)(GLenum, GLfloat *))tunisGLGetProcAddress("glGetClipPlanef");
    tunisGL.tunisGetClipPlanefOES = (void (KHRONOS_APIENTRY *)(GLenum, GLfloat *))tunisGLGetProcAddress("glGetClipPlanefOES");
    tunisGL.tunisGetClipPlanex = (void (KHRONOS_APIENTRY *)(GLenum, GLfixed *))tunisGLGetProcAddress("glGetClipPlanex");
    tunisGL.tunisGetClipPlanexOES = (void (KHRONOS_APIENTRY *)(GLenum, GLfixed *))tunisGLGetProcAddress("glGetClipPlanexOES");
    tunisGL.tunisGetColorTable = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, void *))tunisGLGetProcAddress("glGetColorTable");
    tunisGL.tunisGetColorTableEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, void *))tunisGLGetProcAddress("glGetColorTableEXT");
    tunisGL.tunisGetColorTableParameterfv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfloat *))tunisGLGetProcAddress("glGetColorTableParameterfv");
    tunisGL.tunisGetColorTableParameterfvEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfloat *))tunisGLGetProcAddress("glGetColorTableParameterfvEXT");
    tunisGL.tunisGetColorTableParameterfvSGI = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfloat *))tunisGLGetProcAddress("glGetColorTableParameterfvSGI");
    tunisGL.tunisGetColorTableParameteriv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint *))tunisGLGetProcAddress("glGetColorTableParameteriv");
    tunisGL.tunisGetColorTableParameterivEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint *))tunisGLGetProcAddress("glGetColorTableParameterivEXT");
    tunisGL.tunisGetColorTableParameterivSGI = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint *))tunisGLGetProcAddress("glGetColorTableParameterivSGI");
    tunisGL.tunisGetColorTableSGI = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, void *))tunisGLGetProcAddress("glGetColorTableSGI");
    tunisGL.tunisGetCombinerInputParameterfvNV = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLenum, GLfloat *))tunisGLGetProcAddress("glGetCombinerInputParameterfvNV");
    tunisGL.tunisGetCombinerInputParameterivNV = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLenum, GLint *))tunisGLGetProcAddress("glGetCombinerInputParameterivNV");
    tunisGL.tunisGetCombinerOutputParameterfvNV = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLfloat *))tunisGLGetProcAddress("glGetCombinerOutputParameterfvNV");
    tunisGL.tunisGetCombinerOutputParameterivNV = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLint *))tunisGLGetProcAddress("glGetCombinerOutputParameterivNV");
    tunisGL.tunisGetCombinerStageParameterfvNV = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfloat *))tunisGLGetProcAddress("glGetCombinerStageParameterfvNV");
    tunisGL.tunisGetCommandHeaderNV = (GLuint(KHRONOS_APIENTRY *)(GLenum, GLuint))tunisGLGetProcAddress("glGetCommandHeaderNV");
    tunisGL.tunisGetCompressedMultiTexImageEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint, void *))tunisGLGetProcAddress("glGetCompressedMultiTexImageEXT");
    tunisGL.tunisGetCompressedTexImage = (void (KHRONOS_APIENTRY *)(GLenum, GLint, void *))tunisGLGetProcAddress("glGetCompressedTexImage");
    tunisGL.tunisGetCompressedTexImageARB = (void (KHRONOS_APIENTRY *)(GLenum, GLint, void *))tunisGLGetProcAddress("glGetCompressedTexImageARB");
    tunisGL.tunisGetCompressedTextureImage = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, void *))tunisGLGetProcAddress("glGetCompressedTextureImage");
    tunisGL.tunisGetCompressedTextureImageEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint, void *))tunisGLGetProcAddress("glGetCompressedTextureImageEXT");
    tunisGL.tunisGetCompressedTextureSubImage = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLsizei, void *))tunisGLGetProcAddress("glGetCompressedTextureSubImage");
    tunisGL.tunisGetConvolutionFilter = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, void *))tunisGLGetProcAddress("glGetConvolutionFilter");
    tunisGL.tunisGetConvolutionFilterEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, void *))tunisGLGetProcAddress("glGetConvolutionFilterEXT");
    tunisGL.tunisGetConvolutionParameterfv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfloat *))tunisGLGetProcAddress("glGetConvolutionParameterfv");
    tunisGL.tunisGetConvolutionParameterfvEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfloat *))tunisGLGetProcAddress("glGetConvolutionParameterfvEXT");
    tunisGL.tunisGetConvolutionParameteriv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint *))tunisGLGetProcAddress("glGetConvolutionParameteriv");
    tunisGL.tunisGetConvolutionParameterivEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint *))tunisGLGetProcAddress("glGetConvolutionParameterivEXT");
    tunisGL.tunisGetConvolutionParameterxvOES = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfixed *))tunisGLGetProcAddress("glGetConvolutionParameterxvOES");
    tunisGL.tunisGetCoverageModulationTableNV = (void (KHRONOS_APIENTRY *)(GLsizei, GLfloat *))tunisGLGetProcAddress("glGetCoverageModulationTableNV");
    tunisGL.tunisGetDebugMessageLog = (GLuint(KHRONOS_APIENTRY *)(GLuint, GLsizei, GLenum *, GLenum *, GLuint *, GLenum *, GLsizei *, GLchar *))tunisGLGetProcAddress("glGetDebugMessageLog");
    tunisGL.tunisGetDebugMessageLogAMD = (GLuint(KHRONOS_APIENTRY *)(GLuint, GLsizei, GLenum *, GLuint *, GLuint *, GLsizei *, GLchar *))tunisGLGetProcAddress("glGetDebugMessageLogAMD");
    tunisGL.tunisGetDebugMessageLogARB = (GLuint(KHRONOS_APIENTRY *)(GLuint, GLsizei, GLenum *, GLenum *, GLuint *, GLenum *, GLsizei *, GLchar *))tunisGLGetProcAddress("glGetDebugMessageLogARB");
    tunisGL.tunisGetDebugMessageLogKHR = (GLuint(KHRONOS_APIENTRY *)(GLuint, GLsizei, GLenum *, GLenum *, GLuint *, GLenum *, GLsizei *, GLchar *))tunisGLGetProcAddress("glGetDebugMessageLogKHR");
    tunisGL.tunisGetDetailTexFuncSGIS = (void (KHRONOS_APIENTRY *)(GLenum, GLfloat *))tunisGLGetProcAddress("glGetDetailTexFuncSGIS");
    tunisGL.tunisGetDoubleIndexedvEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLdouble *))tunisGLGetProcAddress("glGetDoubleIndexedvEXT");
    tunisGL.tunisGetDoublei_v = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLdouble *))tunisGLGetProcAddress("glGetDoublei_v");
    tunisGL.tunisGetDoublei_vEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLdouble *))tunisGLGetProcAddress("glGetDoublei_vEXT");
    tunisGL.tunisGetDoublev = (void (KHRONOS_APIENTRY *)(GLenum, GLdouble *))tunisGLGetProcAddress("glGetDoublev");
    tunisGL.tunisGetDriverControlStringQCOM = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, GLsizei *, GLchar *))tunisGLGetProcAddress("glGetDriverControlStringQCOM");
    tunisGL.tunisGetDriverControlsQCOM = (void (KHRONOS_APIENTRY *)(GLint *, GLsizei, GLuint *))tunisGLGetProcAddress("glGetDriverControlsQCOM");
    tunisGL.tunisGetError = (GLenum(KHRONOS_APIENTRY *)(void))tunisGLGetProcAddress("glGetError");
    tunisGL.tunisGetFenceivNV = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint *))tunisGLGetProcAddress("glGetFenceivNV");
    tunisGL.tunisGetFinalCombinerInputParameterfvNV = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfloat *))tunisGLGetProcAddress("glGetFinalCombinerInputParameterfvNV");
    tunisGL.tunisGetFinalCombinerInputParameterivNV = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint *))tunisGLGetProcAddress("glGetFinalCombinerInputParameterivNV");
    tunisGL.tunisGetFirstPerfQueryIdINTEL = (void (KHRONOS_APIENTRY *)(GLuint *))tunisGLGetProcAddress("glGetFirstPerfQueryIdINTEL");
    tunisGL.tunisGetFixedv = (void (KHRONOS_APIENTRY *)(GLenum, GLfixed *))tunisGLGetProcAddress("glGetFixedv");
    tunisGL.tunisGetFixedvOES = (void (KHRONOS_APIENTRY *)(GLenum, GLfixed *))tunisGLGetProcAddress("glGetFixedvOES");
    tunisGL.tunisGetFloatIndexedvEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLfloat *))tunisGLGetProcAddress("glGetFloatIndexedvEXT");
    tunisGL.tunisGetFloati_v = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLfloat *))tunisGLGetProcAddress("glGetFloati_v");
    tunisGL.tunisGetFloati_vEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLfloat *))tunisGLGetProcAddress("glGetFloati_vEXT");
    tunisGL.tunisGetFloati_vNV = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLfloat *))tunisGLGetProcAddress("glGetFloati_vNV");
    tunisGL.tunisGetFloati_vOES = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLfloat *))tunisGLGetProcAddress("glGetFloati_vOES");
    tunisGL.tunisGetFloatv = (void (KHRONOS_APIENTRY *)(GLenum, GLfloat *))tunisGLGetProcAddress("glGetFloatv");
    tunisGL.tunisGetFogFuncSGIS = (void (KHRONOS_APIENTRY *)(GLfloat *))tunisGLGetProcAddress("glGetFogFuncSGIS");
    tunisGL.tunisGetFragDataIndex = (GLint(KHRONOS_APIENTRY *)(GLuint, const GLchar *))tunisGLGetProcAddress("glGetFragDataIndex");
    tunisGL.tunisGetFragDataIndexEXT = (GLint(KHRONOS_APIENTRY *)(GLuint, const GLchar *))tunisGLGetProcAddress("glGetFragDataIndexEXT");
    tunisGL.tunisGetFragDataLocation = (GLint(KHRONOS_APIENTRY *)(GLuint, const GLchar *))tunisGLGetProcAddress("glGetFragDataLocation");
    tunisGL.tunisGetFragDataLocationEXT = (GLint(KHRONOS_APIENTRY *)(GLuint, const GLchar *))tunisGLGetProcAddress("glGetFragDataLocationEXT");
    tunisGL.tunisGetFragmentLightfvSGIX = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfloat *))tunisGLGetProcAddress("glGetFragmentLightfvSGIX");
    tunisGL.tunisGetFragmentLightivSGIX = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint *))tunisGLGetProcAddress("glGetFragmentLightivSGIX");
    tunisGL.tunisGetFragmentMaterialfvSGIX = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfloat *))tunisGLGetProcAddress("glGetFragmentMaterialfvSGIX");
    tunisGL.tunisGetFragmentMaterialivSGIX = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint *))tunisGLGetProcAddress("glGetFragmentMaterialivSGIX");
    tunisGL.tunisGetFramebufferAttachmentParameteriv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLint *))tunisGLGetProcAddress("glGetFramebufferAttachmentParameteriv");
    tunisGL.tunisGetFramebufferAttachmentParameterivEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLint *))tunisGLGetProcAddress("glGetFramebufferAttachmentParameterivEXT");
    tunisGL.tunisGetFramebufferAttachmentParameterivOES = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLint *))tunisGLGetProcAddress("glGetFramebufferAttachmentParameterivOES");
    tunisGL.tunisGetFramebufferParameterfvAMD = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLuint, GLuint, GLsizei, GLfloat *))tunisGLGetProcAddress("glGetFramebufferParameterfvAMD");
    tunisGL.tunisGetFramebufferParameteriv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint *))tunisGLGetProcAddress("glGetFramebufferParameteriv");
    tunisGL.tunisGetFramebufferParameterivEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint *))tunisGLGetProcAddress("glGetFramebufferParameterivEXT");
    tunisGL.tunisGetFramebufferPixelLocalStorageSizeEXT = (GLsizei(KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glGetFramebufferPixelLocalStorageSizeEXT");
    tunisGL.tunisGetGraphicsResetStatus = (GLenum(KHRONOS_APIENTRY *)(void))tunisGLGetProcAddress("glGetGraphicsResetStatus");
    tunisGL.tunisGetGraphicsResetStatusARB = (GLenum(KHRONOS_APIENTRY *)(void))tunisGLGetProcAddress("glGetGraphicsResetStatusARB");
    tunisGL.tunisGetGraphicsResetStatusEXT = (GLenum(KHRONOS_APIENTRY *)(void))tunisGLGetProcAddress("glGetGraphicsResetStatusEXT");
    tunisGL.tunisGetGraphicsResetStatusKHR = (GLenum(KHRONOS_APIENTRY *)(void))tunisGLGetProcAddress("glGetGraphicsResetStatusKHR");
    tunisGL.tunisGetHandleARB = (GLhandleARB(KHRONOS_APIENTRY *)(GLenum))tunisGLGetProcAddress("glGetHandleARB");
    tunisGL.tunisGetHistogram = (void (KHRONOS_APIENTRY *)(GLenum, GLboolean, GLenum, GLenum, void *))tunisGLGetProcAddress("glGetHistogram");
    tunisGL.tunisGetHistogramEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLboolean, GLenum, GLenum, void *))tunisGLGetProcAddress("glGetHistogramEXT");
    tunisGL.tunisGetHistogramParameterfv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfloat *))tunisGLGetProcAddress("glGetHistogramParameterfv");
    tunisGL.tunisGetHistogramParameterfvEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfloat *))tunisGLGetProcAddress("glGetHistogramParameterfvEXT");
    tunisGL.tunisGetHistogramParameteriv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint *))tunisGLGetProcAddress("glGetHistogramParameteriv");
    tunisGL.tunisGetHistogramParameterivEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint *))tunisGLGetProcAddress("glGetHistogramParameterivEXT");
    tunisGL.tunisGetHistogramParameterxvOES = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfixed *))tunisGLGetProcAddress("glGetHistogramParameterxvOES");
    tunisGL.tunisGetImageHandleARB = (GLuint64(KHRONOS_APIENTRY *)(GLuint, GLint, GLboolean, GLint, GLenum))tunisGLGetProcAddress("glGetImageHandleARB");
    tunisGL.tunisGetImageHandleNV = (GLuint64(KHRONOS_APIENTRY *)(GLuint, GLint, GLboolean, GLint, GLenum))tunisGLGetProcAddress("glGetImageHandleNV");
    tunisGL.tunisGetImageTransformParameterfvHP = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfloat *))tunisGLGetProcAddress("glGetImageTransformParameterfvHP");
    tunisGL.tunisGetImageTransformParameterivHP = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint *))tunisGLGetProcAddress("glGetImageTransformParameterivHP");
    tunisGL.tunisGetInfoLogARB = (void (KHRONOS_APIENTRY *)(GLhandleARB, GLsizei, GLsizei *, GLcharARB *))tunisGLGetProcAddress("glGetInfoLogARB");
    tunisGL.tunisGetInstrumentsSGIX = (GLint(KHRONOS_APIENTRY *)(void))tunisGLGetProcAddress("glGetInstrumentsSGIX");
    tunisGL.tunisGetInteger64i_v = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLint64 *))tunisGLGetProcAddress("glGetInteger64i_v");
    tunisGL.tunisGetInteger64v = (void (KHRONOS_APIENTRY *)(GLenum, GLint64 *))tunisGLGetProcAddress("glGetInteger64v");
    tunisGL.tunisGetInteger64vAPPLE = (void (KHRONOS_APIENTRY *)(GLenum, GLint64 *))tunisGLGetProcAddress("glGetInteger64vAPPLE");
    tunisGL.tunisGetIntegerIndexedvEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLint *))tunisGLGetProcAddress("glGetIntegerIndexedvEXT");
    tunisGL.tunisGetIntegeri_v = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLint *))tunisGLGetProcAddress("glGetIntegeri_v");
    tunisGL.tunisGetIntegeri_vEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLint *))tunisGLGetProcAddress("glGetIntegeri_vEXT");
    tunisGL.tunisGetIntegerui64i_vNV = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLuint64EXT *))tunisGLGetProcAddress("glGetIntegerui64i_vNV");
    tunisGL.tunisGetIntegerui64vNV = (void (KHRONOS_APIENTRY *)(GLenum, GLuint64EXT *))tunisGLGetProcAddress("glGetIntegerui64vNV");
    tunisGL.tunisGetIntegerv = (void (KHRONOS_APIENTRY *)(GLenum, GLint *))tunisGLGetProcAddress("glGetIntegerv");
    tunisGL.tunisGetInternalformatSampleivNV = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLsizei, GLenum, GLsizei, GLint *))tunisGLGetProcAddress("glGetInternalformatSampleivNV");
    tunisGL.tunisGetInternalformati64v = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLsizei, GLint64 *))tunisGLGetProcAddress("glGetInternalformati64v");
    tunisGL.tunisGetInternalformativ = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLsizei, GLint *))tunisGLGetProcAddress("glGetInternalformativ");
    tunisGL.tunisGetInvariantBooleanvEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLboolean *))tunisGLGetProcAddress("glGetInvariantBooleanvEXT");
    tunisGL.tunisGetInvariantFloatvEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLfloat *))tunisGLGetProcAddress("glGetInvariantFloatvEXT");
    tunisGL.tunisGetInvariantIntegervEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint *))tunisGLGetProcAddress("glGetInvariantIntegervEXT");
    tunisGL.tunisGetLightfv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfloat *))tunisGLGetProcAddress("glGetLightfv");
    tunisGL.tunisGetLightiv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint *))tunisGLGetProcAddress("glGetLightiv");
    tunisGL.tunisGetLightxOES = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfixed *))tunisGLGetProcAddress("glGetLightxOES");
    tunisGL.tunisGetLightxv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfixed *))tunisGLGetProcAddress("glGetLightxv");
    tunisGL.tunisGetLightxvOES = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfixed *))tunisGLGetProcAddress("glGetLightxvOES");
    tunisGL.tunisGetListParameterfvSGIX = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLfloat *))tunisGLGetProcAddress("glGetListParameterfvSGIX");
    tunisGL.tunisGetListParameterivSGIX = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint *))tunisGLGetProcAddress("glGetListParameterivSGIX");
    tunisGL.tunisGetLocalConstantBooleanvEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLboolean *))tunisGLGetProcAddress("glGetLocalConstantBooleanvEXT");
    tunisGL.tunisGetLocalConstantFloatvEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLfloat *))tunisGLGetProcAddress("glGetLocalConstantFloatvEXT");
    tunisGL.tunisGetLocalConstantIntegervEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint *))tunisGLGetProcAddress("glGetLocalConstantIntegervEXT");
    tunisGL.tunisGetMapAttribParameterfvNV = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLenum, GLfloat *))tunisGLGetProcAddress("glGetMapAttribParameterfvNV");
    tunisGL.tunisGetMapAttribParameterivNV = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLenum, GLint *))tunisGLGetProcAddress("glGetMapAttribParameterivNV");
    tunisGL.tunisGetMapControlPointsNV = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLenum, GLsizei, GLsizei, GLboolean, void *))tunisGLGetProcAddress("glGetMapControlPointsNV");
    tunisGL.tunisGetMapParameterfvNV = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfloat *))tunisGLGetProcAddress("glGetMapParameterfvNV");
    tunisGL.tunisGetMapParameterivNV = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint *))tunisGLGetProcAddress("glGetMapParameterivNV");
    tunisGL.tunisGetMapdv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLdouble *))tunisGLGetProcAddress("glGetMapdv");
    tunisGL.tunisGetMapfv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfloat *))tunisGLGetProcAddress("glGetMapfv");
    tunisGL.tunisGetMapiv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint *))tunisGLGetProcAddress("glGetMapiv");
    tunisGL.tunisGetMapxvOES = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfixed *))tunisGLGetProcAddress("glGetMapxvOES");
    tunisGL.tunisGetMaterialfv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfloat *))tunisGLGetProcAddress("glGetMaterialfv");
    tunisGL.tunisGetMaterialiv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint *))tunisGLGetProcAddress("glGetMaterialiv");
    tunisGL.tunisGetMaterialxOES = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfixed))tunisGLGetProcAddress("glGetMaterialxOES");
    tunisGL.tunisGetMaterialxv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfixed *))tunisGLGetProcAddress("glGetMaterialxv");
    tunisGL.tunisGetMaterialxvOES = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfixed *))tunisGLGetProcAddress("glGetMaterialxvOES");
    tunisGL.tunisGetMemoryObjectDetachedResourcesuivNV = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint, GLsizei, GLuint *))tunisGLGetProcAddress("glGetMemoryObjectDetachedResourcesuivNV");
    tunisGL.tunisGetMemoryObjectParameterivEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint *))tunisGLGetProcAddress("glGetMemoryObjectParameterivEXT");
    tunisGL.tunisGetMinmax = (void (KHRONOS_APIENTRY *)(GLenum, GLboolean, GLenum, GLenum, void *))tunisGLGetProcAddress("glGetMinmax");
    tunisGL.tunisGetMinmaxEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLboolean, GLenum, GLenum, void *))tunisGLGetProcAddress("glGetMinmaxEXT");
    tunisGL.tunisGetMinmaxParameterfv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfloat *))tunisGLGetProcAddress("glGetMinmaxParameterfv");
    tunisGL.tunisGetMinmaxParameterfvEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfloat *))tunisGLGetProcAddress("glGetMinmaxParameterfvEXT");
    tunisGL.tunisGetMinmaxParameteriv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint *))tunisGLGetProcAddress("glGetMinmaxParameteriv");
    tunisGL.tunisGetMinmaxParameterivEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint *))tunisGLGetProcAddress("glGetMinmaxParameterivEXT");
    tunisGL.tunisGetMultiTexEnvfvEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLfloat *))tunisGLGetProcAddress("glGetMultiTexEnvfvEXT");
    tunisGL.tunisGetMultiTexEnvivEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLint *))tunisGLGetProcAddress("glGetMultiTexEnvivEXT");
    tunisGL.tunisGetMultiTexGendvEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLdouble *))tunisGLGetProcAddress("glGetMultiTexGendvEXT");
    tunisGL.tunisGetMultiTexGenfvEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLfloat *))tunisGLGetProcAddress("glGetMultiTexGenfvEXT");
    tunisGL.tunisGetMultiTexGenivEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLint *))tunisGLGetProcAddress("glGetMultiTexGenivEXT");
    tunisGL.tunisGetMultiTexImageEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint, GLenum, GLenum, void *))tunisGLGetProcAddress("glGetMultiTexImageEXT");
    tunisGL.tunisGetMultiTexLevelParameterfvEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint, GLenum, GLfloat *))tunisGLGetProcAddress("glGetMultiTexLevelParameterfvEXT");
    tunisGL.tunisGetMultiTexLevelParameterivEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint, GLenum, GLint *))tunisGLGetProcAddress("glGetMultiTexLevelParameterivEXT");
    tunisGL.tunisGetMultiTexParameterIivEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLint *))tunisGLGetProcAddress("glGetMultiTexParameterIivEXT");
    tunisGL.tunisGetMultiTexParameterIuivEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLuint *))tunisGLGetProcAddress("glGetMultiTexParameterIuivEXT");
    tunisGL.tunisGetMultiTexParameterfvEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLfloat *))tunisGLGetProcAddress("glGetMultiTexParameterfvEXT");
    tunisGL.tunisGetMultiTexParameterivEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLint *))tunisGLGetProcAddress("glGetMultiTexParameterivEXT");
    tunisGL.tunisGetMultisamplefv = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLfloat *))tunisGLGetProcAddress("glGetMultisamplefv");
    tunisGL.tunisGetMultisamplefvNV = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLfloat *))tunisGLGetProcAddress("glGetMultisamplefvNV");
    tunisGL.tunisGetNamedBufferParameteri64v = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint64 *))tunisGLGetProcAddress("glGetNamedBufferParameteri64v");
    tunisGL.tunisGetNamedBufferParameteriv = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint *))tunisGLGetProcAddress("glGetNamedBufferParameteriv");
    tunisGL.tunisGetNamedBufferParameterivEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint *))tunisGLGetProcAddress("glGetNamedBufferParameterivEXT");
    tunisGL.tunisGetNamedBufferParameterui64vNV = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLuint64EXT *))tunisGLGetProcAddress("glGetNamedBufferParameterui64vNV");
    tunisGL.tunisGetNamedBufferPointerv = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, void **))tunisGLGetProcAddress("glGetNamedBufferPointerv");
    tunisGL.tunisGetNamedBufferPointervEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, void **))tunisGLGetProcAddress("glGetNamedBufferPointervEXT");
    tunisGL.tunisGetNamedBufferSubData = (void (KHRONOS_APIENTRY *)(GLuint, GLintptr, GLsizeiptr, void *))tunisGLGetProcAddress("glGetNamedBufferSubData");
    tunisGL.tunisGetNamedBufferSubDataEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLintptr, GLsizeiptr, void *))tunisGLGetProcAddress("glGetNamedBufferSubDataEXT");
    tunisGL.tunisGetNamedFramebufferAttachmentParameteriv = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLenum, GLint *))tunisGLGetProcAddress("glGetNamedFramebufferAttachmentParameteriv");
    tunisGL.tunisGetNamedFramebufferAttachmentParameterivEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLenum, GLint *))tunisGLGetProcAddress("glGetNamedFramebufferAttachmentParameterivEXT");
    tunisGL.tunisGetNamedFramebufferParameterfvAMD = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLuint, GLuint, GLsizei, GLfloat *))tunisGLGetProcAddress("glGetNamedFramebufferParameterfvAMD");
    tunisGL.tunisGetNamedFramebufferParameteriv = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint *))tunisGLGetProcAddress("glGetNamedFramebufferParameteriv");
    tunisGL.tunisGetNamedFramebufferParameterivEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint *))tunisGLGetProcAddress("glGetNamedFramebufferParameterivEXT");
    tunisGL.tunisGetNamedProgramLocalParameterIivEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLuint, GLint *))tunisGLGetProcAddress("glGetNamedProgramLocalParameterIivEXT");
    tunisGL.tunisGetNamedProgramLocalParameterIuivEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLuint, GLuint *))tunisGLGetProcAddress("glGetNamedProgramLocalParameterIuivEXT");
    tunisGL.tunisGetNamedProgramLocalParameterdvEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLuint, GLdouble *))tunisGLGetProcAddress("glGetNamedProgramLocalParameterdvEXT");
    tunisGL.tunisGetNamedProgramLocalParameterfvEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLuint, GLfloat *))tunisGLGetProcAddress("glGetNamedProgramLocalParameterfvEXT");
    tunisGL.tunisGetNamedProgramStringEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLenum, void *))tunisGLGetProcAddress("glGetNamedProgramStringEXT");
    tunisGL.tunisGetNamedProgramivEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLenum, GLint *))tunisGLGetProcAddress("glGetNamedProgramivEXT");
    tunisGL.tunisGetNamedRenderbufferParameteriv = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint *))tunisGLGetProcAddress("glGetNamedRenderbufferParameteriv");
    tunisGL.tunisGetNamedRenderbufferParameterivEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint *))tunisGLGetProcAddress("glGetNamedRenderbufferParameterivEXT");
    tunisGL.tunisGetNamedStringARB = (void (KHRONOS_APIENTRY *)(GLint, const GLchar *, GLsizei, GLint *, GLchar *))tunisGLGetProcAddress("glGetNamedStringARB");
    tunisGL.tunisGetNamedStringivARB = (void (KHRONOS_APIENTRY *)(GLint, const GLchar *, GLenum, GLint *))tunisGLGetProcAddress("glGetNamedStringivARB");
    tunisGL.tunisGetNextPerfQueryIdINTEL = (void (KHRONOS_APIENTRY *)(GLuint, GLuint *))tunisGLGetProcAddress("glGetNextPerfQueryIdINTEL");
    tunisGL.tunisGetObjectBufferfvATI = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLfloat *))tunisGLGetProcAddress("glGetObjectBufferfvATI");
    tunisGL.tunisGetObjectBufferivATI = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint *))tunisGLGetProcAddress("glGetObjectBufferivATI");
    tunisGL.tunisGetObjectLabel = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLsizei, GLsizei *, GLchar *))tunisGLGetProcAddress("glGetObjectLabel");
    tunisGL.tunisGetObjectLabelEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLsizei, GLsizei *, GLchar *))tunisGLGetProcAddress("glGetObjectLabelEXT");
    tunisGL.tunisGetObjectLabelKHR = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLsizei, GLsizei *, GLchar *))tunisGLGetProcAddress("glGetObjectLabelKHR");
    tunisGL.tunisGetObjectParameterfvARB = (void (KHRONOS_APIENTRY *)(GLhandleARB, GLenum, GLfloat *))tunisGLGetProcAddress("glGetObjectParameterfvARB");
    tunisGL.tunisGetObjectParameterivAPPLE = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLenum, GLint *))tunisGLGetProcAddress("glGetObjectParameterivAPPLE");
    tunisGL.tunisGetObjectParameterivARB = (void (KHRONOS_APIENTRY *)(GLhandleARB, GLenum, GLint *))tunisGLGetProcAddress("glGetObjectParameterivARB");
    tunisGL.tunisGetObjectPtrLabel = (void (KHRONOS_APIENTRY *)(const void *, GLsizei, GLsizei *, GLchar *))tunisGLGetProcAddress("glGetObjectPtrLabel");
    tunisGL.tunisGetObjectPtrLabelKHR = (void (KHRONOS_APIENTRY *)(const void *, GLsizei, GLsizei *, GLchar *))tunisGLGetProcAddress("glGetObjectPtrLabelKHR");
    tunisGL.tunisGetOcclusionQueryivNV = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint *))tunisGLGetProcAddress("glGetOcclusionQueryivNV");
    tunisGL.tunisGetOcclusionQueryuivNV = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLuint *))tunisGLGetProcAddress("glGetOcclusionQueryuivNV");
    tunisGL.tunisGetPathColorGenfvNV = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfloat *))tunisGLGetProcAddress("glGetPathColorGenfvNV");
    tunisGL.tunisGetPathColorGenivNV = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint *))tunisGLGetProcAddress("glGetPathColorGenivNV");
    tunisGL.tunisGetPathCommandsNV = (void (KHRONOS_APIENTRY *)(GLuint, GLubyte *))tunisGLGetProcAddress("glGetPathCommandsNV");
    tunisGL.tunisGetPathCoordsNV = (void (KHRONOS_APIENTRY *)(GLuint, GLfloat *))tunisGLGetProcAddress("glGetPathCoordsNV");
    tunisGL.tunisGetPathDashArrayNV = (void (KHRONOS_APIENTRY *)(GLuint, GLfloat *))tunisGLGetProcAddress("glGetPathDashArrayNV");
    tunisGL.tunisGetPathLengthNV = (GLfloat(KHRONOS_APIENTRY *)(GLuint, GLsizei, GLsizei))tunisGLGetProcAddress("glGetPathLengthNV");
    tunisGL.tunisGetPathMetricRangeNV = (void (KHRONOS_APIENTRY *)(GLbitfield, GLuint, GLsizei, GLsizei, GLfloat *))tunisGLGetProcAddress("glGetPathMetricRangeNV");
    tunisGL.tunisGetPathMetricsNV = (void (KHRONOS_APIENTRY *)(GLbitfield, GLsizei, GLenum, const void *, GLuint, GLsizei, GLfloat *))tunisGLGetProcAddress("glGetPathMetricsNV");
    tunisGL.tunisGetPathParameterfvNV = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLfloat *))tunisGLGetProcAddress("glGetPathParameterfvNV");
    tunisGL.tunisGetPathParameterivNV = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint *))tunisGLGetProcAddress("glGetPathParameterivNV");
    tunisGL.tunisGetPathSpacingNV = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLenum, const void *, GLuint, GLfloat, GLfloat, GLenum, GLfloat *))tunisGLGetProcAddress("glGetPathSpacingNV");
    tunisGL.tunisGetPathTexGenfvNV = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfloat *))tunisGLGetProcAddress("glGetPathTexGenfvNV");
    tunisGL.tunisGetPathTexGenivNV = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint *))tunisGLGetProcAddress("glGetPathTexGenivNV");
    tunisGL.tunisGetPerfCounterInfoINTEL = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLuint, GLchar *, GLuint, GLchar *, GLuint *, GLuint *, GLuint *, GLuint *, GLuint64 *))tunisGLGetProcAddress("glGetPerfCounterInfoINTEL");
    tunisGL.tunisGetPerfMonitorCounterDataAMD = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLsizei, GLuint *, GLint *))tunisGLGetProcAddress("glGetPerfMonitorCounterDataAMD");
    tunisGL.tunisGetPerfMonitorCounterInfoAMD = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLenum, void *))tunisGLGetProcAddress("glGetPerfMonitorCounterInfoAMD");
    tunisGL.tunisGetPerfMonitorCounterStringAMD = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLsizei, GLsizei *, GLchar *))tunisGLGetProcAddress("glGetPerfMonitorCounterStringAMD");
    tunisGL.tunisGetPerfMonitorCountersAMD = (void (KHRONOS_APIENTRY *)(GLuint, GLint *, GLint *, GLsizei, GLuint *))tunisGLGetProcAddress("glGetPerfMonitorCountersAMD");
    tunisGL.tunisGetPerfMonitorGroupStringAMD = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, GLsizei *, GLchar *))tunisGLGetProcAddress("glGetPerfMonitorGroupStringAMD");
    tunisGL.tunisGetPerfMonitorGroupsAMD = (void (KHRONOS_APIENTRY *)(GLint *, GLsizei, GLuint *))tunisGLGetProcAddress("glGetPerfMonitorGroupsAMD");
    tunisGL.tunisGetPerfQueryDataINTEL = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLsizei, void *, GLuint *))tunisGLGetProcAddress("glGetPerfQueryDataINTEL");
    tunisGL.tunisGetPerfQueryIdByNameINTEL = (void (KHRONOS_APIENTRY *)(GLchar *, GLuint *))tunisGLGetProcAddress("glGetPerfQueryIdByNameINTEL");
    tunisGL.tunisGetPerfQueryInfoINTEL = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLchar *, GLuint *, GLuint *, GLuint *, GLuint *))tunisGLGetProcAddress("glGetPerfQueryInfoINTEL");
    tunisGL.tunisGetPixelMapfv = (void (KHRONOS_APIENTRY *)(GLenum, GLfloat *))tunisGLGetProcAddress("glGetPixelMapfv");
    tunisGL.tunisGetPixelMapuiv = (void (KHRONOS_APIENTRY *)(GLenum, GLuint *))tunisGLGetProcAddress("glGetPixelMapuiv");
    tunisGL.tunisGetPixelMapusv = (void (KHRONOS_APIENTRY *)(GLenum, GLushort *))tunisGLGetProcAddress("glGetPixelMapusv");
    tunisGL.tunisGetPixelMapxv = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLfixed *))tunisGLGetProcAddress("glGetPixelMapxv");
    tunisGL.tunisGetPixelTexGenParameterfvSGIS = (void (KHRONOS_APIENTRY *)(GLenum, GLfloat *))tunisGLGetProcAddress("glGetPixelTexGenParameterfvSGIS");
    tunisGL.tunisGetPixelTexGenParameterivSGIS = (void (KHRONOS_APIENTRY *)(GLenum, GLint *))tunisGLGetProcAddress("glGetPixelTexGenParameterivSGIS");
    tunisGL.tunisGetPixelTransformParameterfvEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfloat *))tunisGLGetProcAddress("glGetPixelTransformParameterfvEXT");
    tunisGL.tunisGetPixelTransformParameterivEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint *))tunisGLGetProcAddress("glGetPixelTransformParameterivEXT");
    tunisGL.tunisGetPointerIndexedvEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, void **))tunisGLGetProcAddress("glGetPointerIndexedvEXT");
    tunisGL.tunisGetPointeri_vEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, void **))tunisGLGetProcAddress("glGetPointeri_vEXT");
    tunisGL.tunisGetPointerv = (void (KHRONOS_APIENTRY *)(GLenum, void **))tunisGLGetProcAddress("glGetPointerv");
    tunisGL.tunisGetPointervEXT = (void (KHRONOS_APIENTRY *)(GLenum, void **))tunisGLGetProcAddress("glGetPointervEXT");
    tunisGL.tunisGetPointervKHR = (void (KHRONOS_APIENTRY *)(GLenum, void **))tunisGLGetProcAddress("glGetPointervKHR");
    tunisGL.tunisGetPolygonStipple = (void (KHRONOS_APIENTRY *)(GLubyte *))tunisGLGetProcAddress("glGetPolygonStipple");
    tunisGL.tunisGetProgramBinary = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, GLsizei *, GLenum *, void *))tunisGLGetProcAddress("glGetProgramBinary");
    tunisGL.tunisGetProgramBinaryOES = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, GLsizei *, GLenum *, void *))tunisGLGetProcAddress("glGetProgramBinaryOES");
    tunisGL.tunisGetProgramEnvParameterIivNV = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLint *))tunisGLGetProcAddress("glGetProgramEnvParameterIivNV");
    tunisGL.tunisGetProgramEnvParameterIuivNV = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLuint *))tunisGLGetProcAddress("glGetProgramEnvParameterIuivNV");
    tunisGL.tunisGetProgramEnvParameterdvARB = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLdouble *))tunisGLGetProcAddress("glGetProgramEnvParameterdvARB");
    tunisGL.tunisGetProgramEnvParameterfvARB = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLfloat *))tunisGLGetProcAddress("glGetProgramEnvParameterfvARB");
    tunisGL.tunisGetProgramInfoLog = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, GLsizei *, GLchar *))tunisGLGetProcAddress("glGetProgramInfoLog");
    tunisGL.tunisGetProgramInterfaceiv = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLenum, GLint *))tunisGLGetProcAddress("glGetProgramInterfaceiv");
    tunisGL.tunisGetProgramLocalParameterIivNV = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLint *))tunisGLGetProcAddress("glGetProgramLocalParameterIivNV");
    tunisGL.tunisGetProgramLocalParameterIuivNV = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLuint *))tunisGLGetProcAddress("glGetProgramLocalParameterIuivNV");
    tunisGL.tunisGetProgramLocalParameterdvARB = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLdouble *))tunisGLGetProcAddress("glGetProgramLocalParameterdvARB");
    tunisGL.tunisGetProgramLocalParameterfvARB = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLfloat *))tunisGLGetProcAddress("glGetProgramLocalParameterfvARB");
    tunisGL.tunisGetProgramNamedParameterdvNV = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, const GLubyte *, GLdouble *))tunisGLGetProcAddress("glGetProgramNamedParameterdvNV");
    tunisGL.tunisGetProgramNamedParameterfvNV = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, const GLubyte *, GLfloat *))tunisGLGetProcAddress("glGetProgramNamedParameterfvNV");
    tunisGL.tunisGetProgramParameterdvNV = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLenum, GLdouble *))tunisGLGetProcAddress("glGetProgramParameterdvNV");
    tunisGL.tunisGetProgramParameterfvNV = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLenum, GLfloat *))tunisGLGetProcAddress("glGetProgramParameterfvNV");
    tunisGL.tunisGetProgramPipelineInfoLog = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, GLsizei *, GLchar *))tunisGLGetProcAddress("glGetProgramPipelineInfoLog");
    tunisGL.tunisGetProgramPipelineInfoLogEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, GLsizei *, GLchar *))tunisGLGetProcAddress("glGetProgramPipelineInfoLogEXT");
    tunisGL.tunisGetProgramPipelineiv = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint *))tunisGLGetProcAddress("glGetProgramPipelineiv");
    tunisGL.tunisGetProgramPipelineivEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint *))tunisGLGetProcAddress("glGetProgramPipelineivEXT");
    tunisGL.tunisGetProgramResourceIndex = (GLuint(KHRONOS_APIENTRY *)(GLuint, GLenum, const GLchar *))tunisGLGetProcAddress("glGetProgramResourceIndex");
    tunisGL.tunisGetProgramResourceLocation = (GLint(KHRONOS_APIENTRY *)(GLuint, GLenum, const GLchar *))tunisGLGetProcAddress("glGetProgramResourceLocation");
    tunisGL.tunisGetProgramResourceLocationIndex = (GLint(KHRONOS_APIENTRY *)(GLuint, GLenum, const GLchar *))tunisGLGetProcAddress("glGetProgramResourceLocationIndex");
    tunisGL.tunisGetProgramResourceLocationIndexEXT = (GLint(KHRONOS_APIENTRY *)(GLuint, GLenum, const GLchar *))tunisGLGetProcAddress("glGetProgramResourceLocationIndexEXT");
    tunisGL.tunisGetProgramResourceName = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLuint, GLsizei, GLsizei *, GLchar *))tunisGLGetProcAddress("glGetProgramResourceName");
    tunisGL.tunisGetProgramResourcefvNV = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLuint, GLsizei, const GLenum *, GLsizei, GLsizei *, GLfloat *))tunisGLGetProcAddress("glGetProgramResourcefvNV");
    tunisGL.tunisGetProgramResourceiv = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLuint, GLsizei, const GLenum *, GLsizei, GLsizei *, GLint *))tunisGLGetProcAddress("glGetProgramResourceiv");
    tunisGL.tunisGetProgramStageiv = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLenum, GLint *))tunisGLGetProcAddress("glGetProgramStageiv");
    tunisGL.tunisGetProgramStringARB = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, void *))tunisGLGetProcAddress("glGetProgramStringARB");
    tunisGL.tunisGetProgramStringNV = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLubyte *))tunisGLGetProcAddress("glGetProgramStringNV");
    tunisGL.tunisGetProgramSubroutineParameteruivNV = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLuint *))tunisGLGetProcAddress("glGetProgramSubroutineParameteruivNV");
    tunisGL.tunisGetProgramiv = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint *))tunisGLGetProcAddress("glGetProgramiv");
    tunisGL.tunisGetProgramivARB = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint *))tunisGLGetProcAddress("glGetProgramivARB");
    tunisGL.tunisGetProgramivNV = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint *))tunisGLGetProcAddress("glGetProgramivNV");
    tunisGL.tunisGetQueryBufferObjecti64v = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLenum, GLintptr))tunisGLGetProcAddress("glGetQueryBufferObjecti64v");
    tunisGL.tunisGetQueryBufferObjectiv = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLenum, GLintptr))tunisGLGetProcAddress("glGetQueryBufferObjectiv");
    tunisGL.tunisGetQueryBufferObjectui64v = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLenum, GLintptr))tunisGLGetProcAddress("glGetQueryBufferObjectui64v");
    tunisGL.tunisGetQueryBufferObjectuiv = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLenum, GLintptr))tunisGLGetProcAddress("glGetQueryBufferObjectuiv");
    tunisGL.tunisGetQueryIndexediv = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLenum, GLint *))tunisGLGetProcAddress("glGetQueryIndexediv");
    tunisGL.tunisGetQueryObjecti64v = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint64 *))tunisGLGetProcAddress("glGetQueryObjecti64v");
    tunisGL.tunisGetQueryObjecti64vEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint64 *))tunisGLGetProcAddress("glGetQueryObjecti64vEXT");
    tunisGL.tunisGetQueryObjectiv = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint *))tunisGLGetProcAddress("glGetQueryObjectiv");
    tunisGL.tunisGetQueryObjectivARB = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint *))tunisGLGetProcAddress("glGetQueryObjectivARB");
    tunisGL.tunisGetQueryObjectivEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint *))tunisGLGetProcAddress("glGetQueryObjectivEXT");
    tunisGL.tunisGetQueryObjectui64v = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLuint64 *))tunisGLGetProcAddress("glGetQueryObjectui64v");
    tunisGL.tunisGetQueryObjectui64vEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLuint64 *))tunisGLGetProcAddress("glGetQueryObjectui64vEXT");
    tunisGL.tunisGetQueryObjectuiv = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLuint *))tunisGLGetProcAddress("glGetQueryObjectuiv");
    tunisGL.tunisGetQueryObjectuivARB = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLuint *))tunisGLGetProcAddress("glGetQueryObjectuivARB");
    tunisGL.tunisGetQueryObjectuivEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLuint *))tunisGLGetProcAddress("glGetQueryObjectuivEXT");
    tunisGL.tunisGetQueryiv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint *))tunisGLGetProcAddress("glGetQueryiv");
    tunisGL.tunisGetQueryivARB = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint *))tunisGLGetProcAddress("glGetQueryivARB");
    tunisGL.tunisGetQueryivEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint *))tunisGLGetProcAddress("glGetQueryivEXT");
    tunisGL.tunisGetRenderbufferParameteriv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint *))tunisGLGetProcAddress("glGetRenderbufferParameteriv");
    tunisGL.tunisGetRenderbufferParameterivEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint *))tunisGLGetProcAddress("glGetRenderbufferParameterivEXT");
    tunisGL.tunisGetRenderbufferParameterivOES = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint *))tunisGLGetProcAddress("glGetRenderbufferParameterivOES");
    tunisGL.tunisGetSamplerParameterIiv = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint *))tunisGLGetProcAddress("glGetSamplerParameterIiv");
    tunisGL.tunisGetSamplerParameterIivEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint *))tunisGLGetProcAddress("glGetSamplerParameterIivEXT");
    tunisGL.tunisGetSamplerParameterIivOES = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint *))tunisGLGetProcAddress("glGetSamplerParameterIivOES");
    tunisGL.tunisGetSamplerParameterIuiv = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLuint *))tunisGLGetProcAddress("glGetSamplerParameterIuiv");
    tunisGL.tunisGetSamplerParameterIuivEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLuint *))tunisGLGetProcAddress("glGetSamplerParameterIuivEXT");
    tunisGL.tunisGetSamplerParameterIuivOES = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLuint *))tunisGLGetProcAddress("glGetSamplerParameterIuivOES");
    tunisGL.tunisGetSamplerParameterfv = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLfloat *))tunisGLGetProcAddress("glGetSamplerParameterfv");
    tunisGL.tunisGetSamplerParameteriv = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint *))tunisGLGetProcAddress("glGetSamplerParameteriv");
    tunisGL.tunisGetSemaphoreParameterui64vEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLuint64 *))tunisGLGetProcAddress("glGetSemaphoreParameterui64vEXT");
    tunisGL.tunisGetSeparableFilter = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, void *, void *, void *))tunisGLGetProcAddress("glGetSeparableFilter");
    tunisGL.tunisGetSeparableFilterEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, void *, void *, void *))tunisGLGetProcAddress("glGetSeparableFilterEXT");
    tunisGL.tunisGetShaderInfoLog = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, GLsizei *, GLchar *))tunisGLGetProcAddress("glGetShaderInfoLog");
    tunisGL.tunisGetShaderPrecisionFormat = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint *, GLint *))tunisGLGetProcAddress("glGetShaderPrecisionFormat");
    tunisGL.tunisGetShaderSource = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, GLsizei *, GLchar *))tunisGLGetProcAddress("glGetShaderSource");
    tunisGL.tunisGetShaderSourceARB = (void (KHRONOS_APIENTRY *)(GLhandleARB, GLsizei, GLsizei *, GLcharARB *))tunisGLGetProcAddress("glGetShaderSourceARB");
    tunisGL.tunisGetShaderiv = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint *))tunisGLGetProcAddress("glGetShaderiv");
    tunisGL.tunisGetShadingRateImagePaletteNV = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLenum *))tunisGLGetProcAddress("glGetShadingRateImagePaletteNV");
    tunisGL.tunisGetShadingRateSampleLocationivNV = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLuint, GLint *))tunisGLGetProcAddress("glGetShadingRateSampleLocationivNV");
    tunisGL.tunisGetSharpenTexFuncSGIS = (void (KHRONOS_APIENTRY *)(GLenum, GLfloat *))tunisGLGetProcAddress("glGetSharpenTexFuncSGIS");
    tunisGL.tunisGetStageIndexNV = (GLushort(KHRONOS_APIENTRY *)(GLenum))tunisGLGetProcAddress("glGetStageIndexNV");
    tunisGL.tunisGetString = (const GLubyte *(KHRONOS_APIENTRY *)(GLenum))tunisGLGetProcAddress("glGetString");
    tunisGL.tunisGetStringi = (const GLubyte *(KHRONOS_APIENTRY *)(GLenum, GLuint))tunisGLGetProcAddress("glGetStringi");
    tunisGL.tunisGetSubroutineIndex = (GLuint(KHRONOS_APIENTRY *)(GLuint, GLenum, const GLchar *))tunisGLGetProcAddress("glGetSubroutineIndex");
    tunisGL.tunisGetSubroutineUniformLocation = (GLint(KHRONOS_APIENTRY *)(GLuint, GLenum, const GLchar *))tunisGLGetProcAddress("glGetSubroutineUniformLocation");
    tunisGL.tunisGetSynciv = (void (KHRONOS_APIENTRY *)(GLsync, GLenum, GLsizei, GLsizei *, GLint *))tunisGLGetProcAddress("glGetSynciv");
    tunisGL.tunisGetSyncivAPPLE = (void (KHRONOS_APIENTRY *)(GLsync, GLenum, GLsizei, GLsizei *, GLint *))tunisGLGetProcAddress("glGetSyncivAPPLE");
    tunisGL.tunisGetTexBumpParameterfvATI = (void (KHRONOS_APIENTRY *)(GLenum, GLfloat *))tunisGLGetProcAddress("glGetTexBumpParameterfvATI");
    tunisGL.tunisGetTexBumpParameterivATI = (void (KHRONOS_APIENTRY *)(GLenum, GLint *))tunisGLGetProcAddress("glGetTexBumpParameterivATI");
    tunisGL.tunisGetTexEnvfv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfloat *))tunisGLGetProcAddress("glGetTexEnvfv");
    tunisGL.tunisGetTexEnviv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint *))tunisGLGetProcAddress("glGetTexEnviv");
    tunisGL.tunisGetTexEnvxv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfixed *))tunisGLGetProcAddress("glGetTexEnvxv");
    tunisGL.tunisGetTexEnvxvOES = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfixed *))tunisGLGetProcAddress("glGetTexEnvxvOES");
    tunisGL.tunisGetTexFilterFuncSGIS = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfloat *))tunisGLGetProcAddress("glGetTexFilterFuncSGIS");
    tunisGL.tunisGetTexGendv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLdouble *))tunisGLGetProcAddress("glGetTexGendv");
    tunisGL.tunisGetTexGenfv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfloat *))tunisGLGetProcAddress("glGetTexGenfv");
    tunisGL.tunisGetTexGenfvOES = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfloat *))tunisGLGetProcAddress("glGetTexGenfvOES");
    tunisGL.tunisGetTexGeniv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint *))tunisGLGetProcAddress("glGetTexGeniv");
    tunisGL.tunisGetTexGenivOES = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint *))tunisGLGetProcAddress("glGetTexGenivOES");
    tunisGL.tunisGetTexGenxvOES = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfixed *))tunisGLGetProcAddress("glGetTexGenxvOES");
    tunisGL.tunisGetTexImage = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLenum, GLenum, void *))tunisGLGetProcAddress("glGetTexImage");
    tunisGL.tunisGetTexLevelParameterfv = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLenum, GLfloat *))tunisGLGetProcAddress("glGetTexLevelParameterfv");
    tunisGL.tunisGetTexLevelParameteriv = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLenum, GLint *))tunisGLGetProcAddress("glGetTexLevelParameteriv");
    tunisGL.tunisGetTexLevelParameterxvOES = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLenum, GLfixed *))tunisGLGetProcAddress("glGetTexLevelParameterxvOES");
    tunisGL.tunisGetTexParameterIiv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint *))tunisGLGetProcAddress("glGetTexParameterIiv");
    tunisGL.tunisGetTexParameterIivEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint *))tunisGLGetProcAddress("glGetTexParameterIivEXT");
    tunisGL.tunisGetTexParameterIivOES = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint *))tunisGLGetProcAddress("glGetTexParameterIivOES");
    tunisGL.tunisGetTexParameterIuiv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLuint *))tunisGLGetProcAddress("glGetTexParameterIuiv");
    tunisGL.tunisGetTexParameterIuivEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLuint *))tunisGLGetProcAddress("glGetTexParameterIuivEXT");
    tunisGL.tunisGetTexParameterIuivOES = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLuint *))tunisGLGetProcAddress("glGetTexParameterIuivOES");
    tunisGL.tunisGetTexParameterPointervAPPLE = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, void **))tunisGLGetProcAddress("glGetTexParameterPointervAPPLE");
    tunisGL.tunisGetTexParameterfv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfloat *))tunisGLGetProcAddress("glGetTexParameterfv");
    tunisGL.tunisGetTexParameteriv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint *))tunisGLGetProcAddress("glGetTexParameteriv");
    tunisGL.tunisGetTexParameterxv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfixed *))tunisGLGetProcAddress("glGetTexParameterxv");
    tunisGL.tunisGetTexParameterxvOES = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfixed *))tunisGLGetProcAddress("glGetTexParameterxvOES");
    tunisGL.tunisGetTextureHandleARB = (GLuint64(KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glGetTextureHandleARB");
    tunisGL.tunisGetTextureHandleIMG = (GLuint64(KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glGetTextureHandleIMG");
    tunisGL.tunisGetTextureHandleNV = (GLuint64(KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glGetTextureHandleNV");
    tunisGL.tunisGetTextureImage = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLenum, GLenum, GLsizei, void *))tunisGLGetProcAddress("glGetTextureImage");
    tunisGL.tunisGetTextureImageEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint, GLenum, GLenum, void *))tunisGLGetProcAddress("glGetTextureImageEXT");
    tunisGL.tunisGetTextureLevelParameterfv = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLenum, GLfloat *))tunisGLGetProcAddress("glGetTextureLevelParameterfv");
    tunisGL.tunisGetTextureLevelParameterfvEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint, GLenum, GLfloat *))tunisGLGetProcAddress("glGetTextureLevelParameterfvEXT");
    tunisGL.tunisGetTextureLevelParameteriv = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLenum, GLint *))tunisGLGetProcAddress("glGetTextureLevelParameteriv");
    tunisGL.tunisGetTextureLevelParameterivEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint, GLenum, GLint *))tunisGLGetProcAddress("glGetTextureLevelParameterivEXT");
    tunisGL.tunisGetTextureParameterIiv = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint *))tunisGLGetProcAddress("glGetTextureParameterIiv");
    tunisGL.tunisGetTextureParameterIivEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLenum, GLint *))tunisGLGetProcAddress("glGetTextureParameterIivEXT");
    tunisGL.tunisGetTextureParameterIuiv = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLuint *))tunisGLGetProcAddress("glGetTextureParameterIuiv");
    tunisGL.tunisGetTextureParameterIuivEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLenum, GLuint *))tunisGLGetProcAddress("glGetTextureParameterIuivEXT");
    tunisGL.tunisGetTextureParameterfv = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLfloat *))tunisGLGetProcAddress("glGetTextureParameterfv");
    tunisGL.tunisGetTextureParameterfvEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLenum, GLfloat *))tunisGLGetProcAddress("glGetTextureParameterfvEXT");
    tunisGL.tunisGetTextureParameteriv = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint *))tunisGLGetProcAddress("glGetTextureParameteriv");
    tunisGL.tunisGetTextureParameterivEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLenum, GLint *))tunisGLGetProcAddress("glGetTextureParameterivEXT");
    tunisGL.tunisGetTextureSamplerHandleARB = (GLuint64(KHRONOS_APIENTRY *)(GLuint, GLuint))tunisGLGetProcAddress("glGetTextureSamplerHandleARB");
    tunisGL.tunisGetTextureSamplerHandleIMG = (GLuint64(KHRONOS_APIENTRY *)(GLuint, GLuint))tunisGLGetProcAddress("glGetTextureSamplerHandleIMG");
    tunisGL.tunisGetTextureSamplerHandleNV = (GLuint64(KHRONOS_APIENTRY *)(GLuint, GLuint))tunisGLGetProcAddress("glGetTextureSamplerHandleNV");
    tunisGL.tunisGetTextureSubImage = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, GLsizei, void *))tunisGLGetProcAddress("glGetTextureSubImage");
    tunisGL.tunisGetTrackMatrixivNV = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLenum, GLint *))tunisGLGetProcAddress("glGetTrackMatrixivNV");
    tunisGL.tunisGetTransformFeedbackVarying = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLsizei, GLsizei *, GLsizei *, GLenum *, GLchar *))tunisGLGetProcAddress("glGetTransformFeedbackVarying");
    tunisGL.tunisGetTransformFeedbackVaryingEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLsizei, GLsizei *, GLsizei *, GLenum *, GLchar *))tunisGLGetProcAddress("glGetTransformFeedbackVaryingEXT");
    tunisGL.tunisGetTransformFeedbackVaryingNV = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLint *))tunisGLGetProcAddress("glGetTransformFeedbackVaryingNV");
    tunisGL.tunisGetTransformFeedbacki64_v = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLuint, GLint64 *))tunisGLGetProcAddress("glGetTransformFeedbacki64_v");
    tunisGL.tunisGetTransformFeedbacki_v = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLuint, GLint *))tunisGLGetProcAddress("glGetTransformFeedbacki_v");
    tunisGL.tunisGetTransformFeedbackiv = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint *))tunisGLGetProcAddress("glGetTransformFeedbackiv");
    tunisGL.tunisGetTranslatedShaderSourceANGLE = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, GLsizei *, GLchar *))tunisGLGetProcAddress("glGetTranslatedShaderSourceANGLE");
    tunisGL.tunisGetUniformBlockIndex = (GLuint(KHRONOS_APIENTRY *)(GLuint, const GLchar *))tunisGLGetProcAddress("glGetUniformBlockIndex");
    tunisGL.tunisGetUniformBufferSizeEXT = (GLint(KHRONOS_APIENTRY *)(GLuint, GLint))tunisGLGetProcAddress("glGetUniformBufferSizeEXT");
    tunisGL.tunisGetUniformIndices = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, const GLchar *const*, GLuint *))tunisGLGetProcAddress("glGetUniformIndices");
    tunisGL.tunisGetUniformLocation = (GLint(KHRONOS_APIENTRY *)(GLuint, const GLchar *))tunisGLGetProcAddress("glGetUniformLocation");
    tunisGL.tunisGetUniformLocationARB = (GLint(KHRONOS_APIENTRY *)(GLhandleARB, const GLcharARB *))tunisGLGetProcAddress("glGetUniformLocationARB");
    tunisGL.tunisGetUniformOffsetEXT = (GLintptr(KHRONOS_APIENTRY *)(GLuint, GLint))tunisGLGetProcAddress("glGetUniformOffsetEXT");
    tunisGL.tunisGetUniformSubroutineuiv = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLuint *))tunisGLGetProcAddress("glGetUniformSubroutineuiv");
    tunisGL.tunisGetUniformdv = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLdouble *))tunisGLGetProcAddress("glGetUniformdv");
    tunisGL.tunisGetUniformfv = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLfloat *))tunisGLGetProcAddress("glGetUniformfv");
    tunisGL.tunisGetUniformfvARB = (void (KHRONOS_APIENTRY *)(GLhandleARB, GLint, GLfloat *))tunisGLGetProcAddress("glGetUniformfvARB");
    tunisGL.tunisGetUniformi64vARB = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLint64 *))tunisGLGetProcAddress("glGetUniformi64vARB");
    tunisGL.tunisGetUniformi64vNV = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLint64EXT *))tunisGLGetProcAddress("glGetUniformi64vNV");
    tunisGL.tunisGetUniformiv = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLint *))tunisGLGetProcAddress("glGetUniformiv");
    tunisGL.tunisGetUniformivARB = (void (KHRONOS_APIENTRY *)(GLhandleARB, GLint, GLint *))tunisGLGetProcAddress("glGetUniformivARB");
    tunisGL.tunisGetUniformui64vARB = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLuint64 *))tunisGLGetProcAddress("glGetUniformui64vARB");
    tunisGL.tunisGetUniformui64vNV = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLuint64EXT *))tunisGLGetProcAddress("glGetUniformui64vNV");
    tunisGL.tunisGetUniformuiv = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLuint *))tunisGLGetProcAddress("glGetUniformuiv");
    tunisGL.tunisGetUniformuivEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLuint *))tunisGLGetProcAddress("glGetUniformuivEXT");
    tunisGL.tunisGetUnsignedBytei_vEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLubyte *))tunisGLGetProcAddress("glGetUnsignedBytei_vEXT");
    tunisGL.tunisGetUnsignedBytevEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLubyte *))tunisGLGetProcAddress("glGetUnsignedBytevEXT");
    tunisGL.tunisGetVariantArrayObjectfvATI = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLfloat *))tunisGLGetProcAddress("glGetVariantArrayObjectfvATI");
    tunisGL.tunisGetVariantArrayObjectivATI = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint *))tunisGLGetProcAddress("glGetVariantArrayObjectivATI");
    tunisGL.tunisGetVariantBooleanvEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLboolean *))tunisGLGetProcAddress("glGetVariantBooleanvEXT");
    tunisGL.tunisGetVariantFloatvEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLfloat *))tunisGLGetProcAddress("glGetVariantFloatvEXT");
    tunisGL.tunisGetVariantIntegervEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint *))tunisGLGetProcAddress("glGetVariantIntegervEXT");
    tunisGL.tunisGetVariantPointervEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, void **))tunisGLGetProcAddress("glGetVariantPointervEXT");
    tunisGL.tunisGetVaryingLocationNV = (GLint(KHRONOS_APIENTRY *)(GLuint, const GLchar *))tunisGLGetProcAddress("glGetVaryingLocationNV");
    tunisGL.tunisGetVertexArrayIndexed64iv = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLenum, GLint64 *))tunisGLGetProcAddress("glGetVertexArrayIndexed64iv");
    tunisGL.tunisGetVertexArrayIndexediv = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLenum, GLint *))tunisGLGetProcAddress("glGetVertexArrayIndexediv");
    tunisGL.tunisGetVertexArrayIntegeri_vEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLenum, GLint *))tunisGLGetProcAddress("glGetVertexArrayIntegeri_vEXT");
    tunisGL.tunisGetVertexArrayIntegervEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint *))tunisGLGetProcAddress("glGetVertexArrayIntegervEXT");
    tunisGL.tunisGetVertexArrayPointeri_vEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLenum, void **))tunisGLGetProcAddress("glGetVertexArrayPointeri_vEXT");
    tunisGL.tunisGetVertexArrayPointervEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, void **))tunisGLGetProcAddress("glGetVertexArrayPointervEXT");
    tunisGL.tunisGetVertexArrayiv = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint *))tunisGLGetProcAddress("glGetVertexArrayiv");
    tunisGL.tunisGetVertexAttribArrayObjectfvATI = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLfloat *))tunisGLGetProcAddress("glGetVertexAttribArrayObjectfvATI");
    tunisGL.tunisGetVertexAttribArrayObjectivATI = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint *))tunisGLGetProcAddress("glGetVertexAttribArrayObjectivATI");
    tunisGL.tunisGetVertexAttribIiv = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint *))tunisGLGetProcAddress("glGetVertexAttribIiv");
    tunisGL.tunisGetVertexAttribIivEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint *))tunisGLGetProcAddress("glGetVertexAttribIivEXT");
    tunisGL.tunisGetVertexAttribIuiv = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLuint *))tunisGLGetProcAddress("glGetVertexAttribIuiv");
    tunisGL.tunisGetVertexAttribIuivEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLuint *))tunisGLGetProcAddress("glGetVertexAttribIuivEXT");
    tunisGL.tunisGetVertexAttribLdv = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLdouble *))tunisGLGetProcAddress("glGetVertexAttribLdv");
    tunisGL.tunisGetVertexAttribLdvEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLdouble *))tunisGLGetProcAddress("glGetVertexAttribLdvEXT");
    tunisGL.tunisGetVertexAttribLi64vNV = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint64EXT *))tunisGLGetProcAddress("glGetVertexAttribLi64vNV");
    tunisGL.tunisGetVertexAttribLui64vARB = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLuint64EXT *))tunisGLGetProcAddress("glGetVertexAttribLui64vARB");
    tunisGL.tunisGetVertexAttribLui64vNV = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLuint64EXT *))tunisGLGetProcAddress("glGetVertexAttribLui64vNV");
    tunisGL.tunisGetVertexAttribPointerv = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, void **))tunisGLGetProcAddress("glGetVertexAttribPointerv");
    tunisGL.tunisGetVertexAttribPointervARB = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, void **))tunisGLGetProcAddress("glGetVertexAttribPointervARB");
    tunisGL.tunisGetVertexAttribPointervNV = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, void **))tunisGLGetProcAddress("glGetVertexAttribPointervNV");
    tunisGL.tunisGetVertexAttribdv = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLdouble *))tunisGLGetProcAddress("glGetVertexAttribdv");
    tunisGL.tunisGetVertexAttribdvARB = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLdouble *))tunisGLGetProcAddress("glGetVertexAttribdvARB");
    tunisGL.tunisGetVertexAttribdvNV = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLdouble *))tunisGLGetProcAddress("glGetVertexAttribdvNV");
    tunisGL.tunisGetVertexAttribfv = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLfloat *))tunisGLGetProcAddress("glGetVertexAttribfv");
    tunisGL.tunisGetVertexAttribfvARB = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLfloat *))tunisGLGetProcAddress("glGetVertexAttribfvARB");
    tunisGL.tunisGetVertexAttribfvNV = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLfloat *))tunisGLGetProcAddress("glGetVertexAttribfvNV");
    tunisGL.tunisGetVertexAttribiv = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint *))tunisGLGetProcAddress("glGetVertexAttribiv");
    tunisGL.tunisGetVertexAttribivARB = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint *))tunisGLGetProcAddress("glGetVertexAttribivARB");
    tunisGL.tunisGetVertexAttribivNV = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint *))tunisGLGetProcAddress("glGetVertexAttribivNV");
    tunisGL.tunisGetVideoCaptureStreamdvNV = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLenum, GLdouble *))tunisGLGetProcAddress("glGetVideoCaptureStreamdvNV");
    tunisGL.tunisGetVideoCaptureStreamfvNV = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLenum, GLfloat *))tunisGLGetProcAddress("glGetVideoCaptureStreamfvNV");
    tunisGL.tunisGetVideoCaptureStreamivNV = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLenum, GLint *))tunisGLGetProcAddress("glGetVideoCaptureStreamivNV");
    tunisGL.tunisGetVideoCaptureivNV = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint *))tunisGLGetProcAddress("glGetVideoCaptureivNV");
    tunisGL.tunisGetVideoi64vNV = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint64EXT *))tunisGLGetProcAddress("glGetVideoi64vNV");
    tunisGL.tunisGetVideoivNV = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint *))tunisGLGetProcAddress("glGetVideoivNV");
    tunisGL.tunisGetVideoui64vNV = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLuint64EXT *))tunisGLGetProcAddress("glGetVideoui64vNV");
    tunisGL.tunisGetVideouivNV = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLuint *))tunisGLGetProcAddress("glGetVideouivNV");
    tunisGL.tunisGetVkProcAddrNV = (GLVULKANPROCNV(KHRONOS_APIENTRY *)(const GLchar *))tunisGLGetProcAddress("glGetVkProcAddrNV");
    tunisGL.tunisGetnColorTable = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLsizei, void *))tunisGLGetProcAddress("glGetnColorTable");
    tunisGL.tunisGetnColorTableARB = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLsizei, void *))tunisGLGetProcAddress("glGetnColorTableARB");
    tunisGL.tunisGetnCompressedTexImage = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLsizei, void *))tunisGLGetProcAddress("glGetnCompressedTexImage");
    tunisGL.tunisGetnCompressedTexImageARB = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLsizei, void *))tunisGLGetProcAddress("glGetnCompressedTexImageARB");
    tunisGL.tunisGetnConvolutionFilter = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLsizei, void *))tunisGLGetProcAddress("glGetnConvolutionFilter");
    tunisGL.tunisGetnConvolutionFilterARB = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLsizei, void *))tunisGLGetProcAddress("glGetnConvolutionFilterARB");
    tunisGL.tunisGetnHistogram = (void (KHRONOS_APIENTRY *)(GLenum, GLboolean, GLenum, GLenum, GLsizei, void *))tunisGLGetProcAddress("glGetnHistogram");
    tunisGL.tunisGetnHistogramARB = (void (KHRONOS_APIENTRY *)(GLenum, GLboolean, GLenum, GLenum, GLsizei, void *))tunisGLGetProcAddress("glGetnHistogramARB");
    tunisGL.tunisGetnMapdv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLsizei, GLdouble *))tunisGLGetProcAddress("glGetnMapdv");
    tunisGL.tunisGetnMapdvARB = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLsizei, GLdouble *))tunisGLGetProcAddress("glGetnMapdvARB");
    tunisGL.tunisGetnMapfv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLsizei, GLfloat *))tunisGLGetProcAddress("glGetnMapfv");
    tunisGL.tunisGetnMapfvARB = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLsizei, GLfloat *))tunisGLGetProcAddress("glGetnMapfvARB");
    tunisGL.tunisGetnMapiv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLsizei, GLint *))tunisGLGetProcAddress("glGetnMapiv");
    tunisGL.tunisGetnMapivARB = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLsizei, GLint *))tunisGLGetProcAddress("glGetnMapivARB");
    tunisGL.tunisGetnMinmax = (void (KHRONOS_APIENTRY *)(GLenum, GLboolean, GLenum, GLenum, GLsizei, void *))tunisGLGetProcAddress("glGetnMinmax");
    tunisGL.tunisGetnMinmaxARB = (void (KHRONOS_APIENTRY *)(GLenum, GLboolean, GLenum, GLenum, GLsizei, void *))tunisGLGetProcAddress("glGetnMinmaxARB");
    tunisGL.tunisGetnPixelMapfv = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLfloat *))tunisGLGetProcAddress("glGetnPixelMapfv");
    tunisGL.tunisGetnPixelMapfvARB = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLfloat *))tunisGLGetProcAddress("glGetnPixelMapfvARB");
    tunisGL.tunisGetnPixelMapuiv = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLuint *))tunisGLGetProcAddress("glGetnPixelMapuiv");
    tunisGL.tunisGetnPixelMapuivARB = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLuint *))tunisGLGetProcAddress("glGetnPixelMapuivARB");
    tunisGL.tunisGetnPixelMapusv = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLushort *))tunisGLGetProcAddress("glGetnPixelMapusv");
    tunisGL.tunisGetnPixelMapusvARB = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLushort *))tunisGLGetProcAddress("glGetnPixelMapusvARB");
    tunisGL.tunisGetnPolygonStipple = (void (KHRONOS_APIENTRY *)(GLsizei, GLubyte *))tunisGLGetProcAddress("glGetnPolygonStipple");
    tunisGL.tunisGetnPolygonStippleARB = (void (KHRONOS_APIENTRY *)(GLsizei, GLubyte *))tunisGLGetProcAddress("glGetnPolygonStippleARB");
    tunisGL.tunisGetnSeparableFilter = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLsizei, void *, GLsizei, void *, void *))tunisGLGetProcAddress("glGetnSeparableFilter");
    tunisGL.tunisGetnSeparableFilterARB = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLsizei, void *, GLsizei, void *, void *))tunisGLGetProcAddress("glGetnSeparableFilterARB");
    tunisGL.tunisGetnTexImage = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLenum, GLenum, GLsizei, void *))tunisGLGetProcAddress("glGetnTexImage");
    tunisGL.tunisGetnTexImageARB = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLenum, GLenum, GLsizei, void *))tunisGLGetProcAddress("glGetnTexImageARB");
    tunisGL.tunisGetnUniformdv = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, GLdouble *))tunisGLGetProcAddress("glGetnUniformdv");
    tunisGL.tunisGetnUniformdvARB = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, GLdouble *))tunisGLGetProcAddress("glGetnUniformdvARB");
    tunisGL.tunisGetnUniformfv = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, GLfloat *))tunisGLGetProcAddress("glGetnUniformfv");
    tunisGL.tunisGetnUniformfvARB = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, GLfloat *))tunisGLGetProcAddress("glGetnUniformfvARB");
    tunisGL.tunisGetnUniformfvEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, GLfloat *))tunisGLGetProcAddress("glGetnUniformfvEXT");
    tunisGL.tunisGetnUniformfvKHR = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, GLfloat *))tunisGLGetProcAddress("glGetnUniformfvKHR");
    tunisGL.tunisGetnUniformi64vARB = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, GLint64 *))tunisGLGetProcAddress("glGetnUniformi64vARB");
    tunisGL.tunisGetnUniformiv = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, GLint *))tunisGLGetProcAddress("glGetnUniformiv");
    tunisGL.tunisGetnUniformivARB = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, GLint *))tunisGLGetProcAddress("glGetnUniformivARB");
    tunisGL.tunisGetnUniformivEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, GLint *))tunisGLGetProcAddress("glGetnUniformivEXT");
    tunisGL.tunisGetnUniformivKHR = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, GLint *))tunisGLGetProcAddress("glGetnUniformivKHR");
    tunisGL.tunisGetnUniformui64vARB = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, GLuint64 *))tunisGLGetProcAddress("glGetnUniformui64vARB");
    tunisGL.tunisGetnUniformuiv = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, GLuint *))tunisGLGetProcAddress("glGetnUniformuiv");
    tunisGL.tunisGetnUniformuivARB = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, GLuint *))tunisGLGetProcAddress("glGetnUniformuivARB");
    tunisGL.tunisGetnUniformuivKHR = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, GLuint *))tunisGLGetProcAddress("glGetnUniformuivKHR");
    tunisGL.tunisGlobalAlphaFactorbSUN = (void (KHRONOS_APIENTRY *)(GLbyte))tunisGLGetProcAddress("glGlobalAlphaFactorbSUN");
    tunisGL.tunisGlobalAlphaFactordSUN = (void (KHRONOS_APIENTRY *)(GLdouble))tunisGLGetProcAddress("glGlobalAlphaFactordSUN");
    tunisGL.tunisGlobalAlphaFactorfSUN = (void (KHRONOS_APIENTRY *)(GLfloat))tunisGLGetProcAddress("glGlobalAlphaFactorfSUN");
    tunisGL.tunisGlobalAlphaFactoriSUN = (void (KHRONOS_APIENTRY *)(GLint))tunisGLGetProcAddress("glGlobalAlphaFactoriSUN");
    tunisGL.tunisGlobalAlphaFactorsSUN = (void (KHRONOS_APIENTRY *)(GLshort))tunisGLGetProcAddress("glGlobalAlphaFactorsSUN");
    tunisGL.tunisGlobalAlphaFactorubSUN = (void (KHRONOS_APIENTRY *)(GLubyte))tunisGLGetProcAddress("glGlobalAlphaFactorubSUN");
    tunisGL.tunisGlobalAlphaFactoruiSUN = (void (KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glGlobalAlphaFactoruiSUN");
    tunisGL.tunisGlobalAlphaFactorusSUN = (void (KHRONOS_APIENTRY *)(GLushort))tunisGLGetProcAddress("glGlobalAlphaFactorusSUN");
    tunisGL.tunisHint = (void (KHRONOS_APIENTRY *)(GLenum, GLenum))tunisGLGetProcAddress("glHint");
    tunisGL.tunisHintPGI = (void (KHRONOS_APIENTRY *)(GLenum, GLint))tunisGLGetProcAddress("glHintPGI");
    tunisGL.tunisHistogram = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLenum, GLboolean))tunisGLGetProcAddress("glHistogram");
    tunisGL.tunisHistogramEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLenum, GLboolean))tunisGLGetProcAddress("glHistogramEXT");
    tunisGL.tunisIglooInterfaceSGIX = (void (KHRONOS_APIENTRY *)(GLenum, const void *))tunisGLGetProcAddress("glIglooInterfaceSGIX");
    tunisGL.tunisImageTransformParameterfHP = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfloat))tunisGLGetProcAddress("glImageTransformParameterfHP");
    tunisGL.tunisImageTransformParameterfvHP = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const GLfloat *))tunisGLGetProcAddress("glImageTransformParameterfvHP");
    tunisGL.tunisImageTransformParameteriHP = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint))tunisGLGetProcAddress("glImageTransformParameteriHP");
    tunisGL.tunisImageTransformParameterivHP = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const GLint *))tunisGLGetProcAddress("glImageTransformParameterivHP");
    tunisGL.tunisImportMemoryFdEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLuint64, GLenum, GLint))tunisGLGetProcAddress("glImportMemoryFdEXT");
    tunisGL.tunisImportMemoryWin32HandleEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLuint64, GLenum, void *))tunisGLGetProcAddress("glImportMemoryWin32HandleEXT");
    tunisGL.tunisImportMemoryWin32NameEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLuint64, GLenum, const void *))tunisGLGetProcAddress("glImportMemoryWin32NameEXT");
    tunisGL.tunisImportSemaphoreFdEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint))tunisGLGetProcAddress("glImportSemaphoreFdEXT");
    tunisGL.tunisImportSemaphoreWin32HandleEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, void *))tunisGLGetProcAddress("glImportSemaphoreWin32HandleEXT");
    tunisGL.tunisImportSemaphoreWin32NameEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, const void *))tunisGLGetProcAddress("glImportSemaphoreWin32NameEXT");
    tunisGL.tunisImportSyncEXT = (GLsync(KHRONOS_APIENTRY *)(GLenum, GLintptr, GLbitfield))tunisGLGetProcAddress("glImportSyncEXT");
    tunisGL.tunisIndexFormatNV = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei))tunisGLGetProcAddress("glIndexFormatNV");
    tunisGL.tunisIndexFuncEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLclampf))tunisGLGetProcAddress("glIndexFuncEXT");
    tunisGL.tunisIndexMask = (void (KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glIndexMask");
    tunisGL.tunisIndexMaterialEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum))tunisGLGetProcAddress("glIndexMaterialEXT");
    tunisGL.tunisIndexPointer = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, const void *))tunisGLGetProcAddress("glIndexPointer");
    tunisGL.tunisIndexPointerEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLsizei, const void *))tunisGLGetProcAddress("glIndexPointerEXT");
    tunisGL.tunisIndexPointerListIBM = (void (KHRONOS_APIENTRY *)(GLenum, GLint, const void **, GLint))tunisGLGetProcAddress("glIndexPointerListIBM");
    tunisGL.tunisIndexd = (void (KHRONOS_APIENTRY *)(GLdouble))tunisGLGetProcAddress("glIndexd");
    tunisGL.tunisIndexdv = (void (KHRONOS_APIENTRY *)(const GLdouble *))tunisGLGetProcAddress("glIndexdv");
    tunisGL.tunisIndexf = (void (KHRONOS_APIENTRY *)(GLfloat))tunisGLGetProcAddress("glIndexf");
    tunisGL.tunisIndexfv = (void (KHRONOS_APIENTRY *)(const GLfloat *))tunisGLGetProcAddress("glIndexfv");
    tunisGL.tunisIndexi = (void (KHRONOS_APIENTRY *)(GLint))tunisGLGetProcAddress("glIndexi");
    tunisGL.tunisIndexiv = (void (KHRONOS_APIENTRY *)(const GLint *))tunisGLGetProcAddress("glIndexiv");
    tunisGL.tunisIndexs = (void (KHRONOS_APIENTRY *)(GLshort))tunisGLGetProcAddress("glIndexs");
    tunisGL.tunisIndexsv = (void (KHRONOS_APIENTRY *)(const GLshort *))tunisGLGetProcAddress("glIndexsv");
    tunisGL.tunisIndexub = (void (KHRONOS_APIENTRY *)(GLubyte))tunisGLGetProcAddress("glIndexub");
    tunisGL.tunisIndexubv = (void (KHRONOS_APIENTRY *)(const GLubyte *))tunisGLGetProcAddress("glIndexubv");
    tunisGL.tunisIndexxOES = (void (KHRONOS_APIENTRY *)(GLfixed))tunisGLGetProcAddress("glIndexxOES");
    tunisGL.tunisIndexxvOES = (void (KHRONOS_APIENTRY *)(const GLfixed *))tunisGLGetProcAddress("glIndexxvOES");
    tunisGL.tunisInitNames = (void (KHRONOS_APIENTRY *)(void))tunisGLGetProcAddress("glInitNames");
    tunisGL.tunisInsertComponentEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLuint))tunisGLGetProcAddress("glInsertComponentEXT");
    tunisGL.tunisInsertEventMarkerEXT = (void (KHRONOS_APIENTRY *)(GLsizei, const GLchar *))tunisGLGetProcAddress("glInsertEventMarkerEXT");
    tunisGL.tunisInstrumentsBufferSGIX = (void (KHRONOS_APIENTRY *)(GLsizei, GLint *))tunisGLGetProcAddress("glInstrumentsBufferSGIX");
    tunisGL.tunisInterleavedArrays = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, const void *))tunisGLGetProcAddress("glInterleavedArrays");
    tunisGL.tunisInterpolatePathsNV = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLuint, GLfloat))tunisGLGetProcAddress("glInterpolatePathsNV");
    tunisGL.tunisInvalidateBufferData = (void (KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glInvalidateBufferData");
    tunisGL.tunisInvalidateBufferSubData = (void (KHRONOS_APIENTRY *)(GLuint, GLintptr, GLsizeiptr))tunisGLGetProcAddress("glInvalidateBufferSubData");
    tunisGL.tunisInvalidateFramebuffer = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, const GLenum *))tunisGLGetProcAddress("glInvalidateFramebuffer");
    tunisGL.tunisInvalidateNamedFramebufferData = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, const GLenum *))tunisGLGetProcAddress("glInvalidateNamedFramebufferData");
    tunisGL.tunisInvalidateNamedFramebufferSubData = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, const GLenum *, GLint, GLint, GLsizei, GLsizei))tunisGLGetProcAddress("glInvalidateNamedFramebufferSubData");
    tunisGL.tunisInvalidateSubFramebuffer = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, const GLenum *, GLint, GLint, GLsizei, GLsizei))tunisGLGetProcAddress("glInvalidateSubFramebuffer");
    tunisGL.tunisInvalidateTexImage = (void (KHRONOS_APIENTRY *)(GLuint, GLint))tunisGLGetProcAddress("glInvalidateTexImage");
    tunisGL.tunisInvalidateTexSubImage = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei))tunisGLGetProcAddress("glInvalidateTexSubImage");
    tunisGL.tunisIsAsyncMarkerSGIX = (GLboolean(KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glIsAsyncMarkerSGIX");
    tunisGL.tunisIsBuffer = (GLboolean(KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glIsBuffer");
    tunisGL.tunisIsBufferARB = (GLboolean(KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glIsBufferARB");
    tunisGL.tunisIsBufferResidentNV = (GLboolean(KHRONOS_APIENTRY *)(GLenum))tunisGLGetProcAddress("glIsBufferResidentNV");
    tunisGL.tunisIsCommandListNV = (GLboolean(KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glIsCommandListNV");
    tunisGL.tunisIsEnabled = (GLboolean(KHRONOS_APIENTRY *)(GLenum))tunisGLGetProcAddress("glIsEnabled");
    tunisGL.tunisIsEnabledIndexedEXT = (GLboolean(KHRONOS_APIENTRY *)(GLenum, GLuint))tunisGLGetProcAddress("glIsEnabledIndexedEXT");
    tunisGL.tunisIsEnabledi = (GLboolean(KHRONOS_APIENTRY *)(GLenum, GLuint))tunisGLGetProcAddress("glIsEnabledi");
    tunisGL.tunisIsEnablediEXT = (GLboolean(KHRONOS_APIENTRY *)(GLenum, GLuint))tunisGLGetProcAddress("glIsEnablediEXT");
    tunisGL.tunisIsEnablediNV = (GLboolean(KHRONOS_APIENTRY *)(GLenum, GLuint))tunisGLGetProcAddress("glIsEnablediNV");
    tunisGL.tunisIsEnablediOES = (GLboolean(KHRONOS_APIENTRY *)(GLenum, GLuint))tunisGLGetProcAddress("glIsEnablediOES");
    tunisGL.tunisIsFenceAPPLE = (GLboolean(KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glIsFenceAPPLE");
    tunisGL.tunisIsFenceNV = (GLboolean(KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glIsFenceNV");
    tunisGL.tunisIsFramebuffer = (GLboolean(KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glIsFramebuffer");
    tunisGL.tunisIsFramebufferEXT = (GLboolean(KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glIsFramebufferEXT");
    tunisGL.tunisIsFramebufferOES = (GLboolean(KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glIsFramebufferOES");
    tunisGL.tunisIsImageHandleResidentARB = (GLboolean(KHRONOS_APIENTRY *)(GLuint64))tunisGLGetProcAddress("glIsImageHandleResidentARB");
    tunisGL.tunisIsImageHandleResidentNV = (GLboolean(KHRONOS_APIENTRY *)(GLuint64))tunisGLGetProcAddress("glIsImageHandleResidentNV");
    tunisGL.tunisIsList = (GLboolean(KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glIsList");
    tunisGL.tunisIsMemoryObjectEXT = (GLboolean(KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glIsMemoryObjectEXT");
    tunisGL.tunisIsNameAMD = (GLboolean(KHRONOS_APIENTRY *)(GLenum, GLuint))tunisGLGetProcAddress("glIsNameAMD");
    tunisGL.tunisIsNamedBufferResidentNV = (GLboolean(KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glIsNamedBufferResidentNV");
    tunisGL.tunisIsNamedStringARB = (GLboolean(KHRONOS_APIENTRY *)(GLint, const GLchar *))tunisGLGetProcAddress("glIsNamedStringARB");
    tunisGL.tunisIsObjectBufferATI = (GLboolean(KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glIsObjectBufferATI");
    tunisGL.tunisIsOcclusionQueryNV = (GLboolean(KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glIsOcclusionQueryNV");
    tunisGL.tunisIsPathNV = (GLboolean(KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glIsPathNV");
    tunisGL.tunisIsPointInFillPathNV = (GLboolean(KHRONOS_APIENTRY *)(GLuint, GLuint, GLfloat, GLfloat))tunisGLGetProcAddress("glIsPointInFillPathNV");
    tunisGL.tunisIsPointInStrokePathNV = (GLboolean(KHRONOS_APIENTRY *)(GLuint, GLfloat, GLfloat))tunisGLGetProcAddress("glIsPointInStrokePathNV");
    tunisGL.tunisIsProgram = (GLboolean(KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glIsProgram");
    tunisGL.tunisIsProgramARB = (GLboolean(KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glIsProgramARB");
    tunisGL.tunisIsProgramNV = (GLboolean(KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glIsProgramNV");
    tunisGL.tunisIsProgramPipeline = (GLboolean(KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glIsProgramPipeline");
    tunisGL.tunisIsProgramPipelineEXT = (GLboolean(KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glIsProgramPipelineEXT");
    tunisGL.tunisIsQuery = (GLboolean(KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glIsQuery");
    tunisGL.tunisIsQueryARB = (GLboolean(KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glIsQueryARB");
    tunisGL.tunisIsQueryEXT = (GLboolean(KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glIsQueryEXT");
    tunisGL.tunisIsRenderbuffer = (GLboolean(KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glIsRenderbuffer");
    tunisGL.tunisIsRenderbufferEXT = (GLboolean(KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glIsRenderbufferEXT");
    tunisGL.tunisIsRenderbufferOES = (GLboolean(KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glIsRenderbufferOES");
    tunisGL.tunisIsSampler = (GLboolean(KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glIsSampler");
    tunisGL.tunisIsSemaphoreEXT = (GLboolean(KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glIsSemaphoreEXT");
    tunisGL.tunisIsShader = (GLboolean(KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glIsShader");
    tunisGL.tunisIsStateNV = (GLboolean(KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glIsStateNV");
    tunisGL.tunisIsSync = (GLboolean(KHRONOS_APIENTRY *)(GLsync))tunisGLGetProcAddress("glIsSync");
    tunisGL.tunisIsSyncAPPLE = (GLboolean(KHRONOS_APIENTRY *)(GLsync))tunisGLGetProcAddress("glIsSyncAPPLE");
    tunisGL.tunisIsTexture = (GLboolean(KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glIsTexture");
    tunisGL.tunisIsTextureEXT = (GLboolean(KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glIsTextureEXT");
    tunisGL.tunisIsTextureHandleResidentARB = (GLboolean(KHRONOS_APIENTRY *)(GLuint64))tunisGLGetProcAddress("glIsTextureHandleResidentARB");
    tunisGL.tunisIsTextureHandleResidentNV = (GLboolean(KHRONOS_APIENTRY *)(GLuint64))tunisGLGetProcAddress("glIsTextureHandleResidentNV");
    tunisGL.tunisIsTransformFeedback = (GLboolean(KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glIsTransformFeedback");
    tunisGL.tunisIsTransformFeedbackNV = (GLboolean(KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glIsTransformFeedbackNV");
    tunisGL.tunisIsVariantEnabledEXT = (GLboolean(KHRONOS_APIENTRY *)(GLuint, GLenum))tunisGLGetProcAddress("glIsVariantEnabledEXT");
    tunisGL.tunisIsVertexArray = (GLboolean(KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glIsVertexArray");
    tunisGL.tunisIsVertexArrayAPPLE = (GLboolean(KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glIsVertexArrayAPPLE");
    tunisGL.tunisIsVertexArrayOES = (GLboolean(KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glIsVertexArrayOES");
    tunisGL.tunisIsVertexAttribEnabledAPPLE = (GLboolean(KHRONOS_APIENTRY *)(GLuint, GLenum))tunisGLGetProcAddress("glIsVertexAttribEnabledAPPLE");
    tunisGL.tunisLGPUCopyImageSubDataNVX = (void (KHRONOS_APIENTRY *)(GLuint, GLbitfield, GLuint, GLenum, GLint, GLint, GLint, GLint, GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei))tunisGLGetProcAddress("glLGPUCopyImageSubDataNVX");
    tunisGL.tunisLGPUInterlockNVX = (void (KHRONOS_APIENTRY *)(void))tunisGLGetProcAddress("glLGPUInterlockNVX");
    tunisGL.tunisLGPUNamedBufferSubDataNVX = (void (KHRONOS_APIENTRY *)(GLbitfield, GLuint, GLintptr, GLsizeiptr, const void *))tunisGLGetProcAddress("glLGPUNamedBufferSubDataNVX");
    tunisGL.tunisLabelObjectEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLsizei, const GLchar *))tunisGLGetProcAddress("glLabelObjectEXT");
    tunisGL.tunisLightEnviSGIX = (void (KHRONOS_APIENTRY *)(GLenum, GLint))tunisGLGetProcAddress("glLightEnviSGIX");
    tunisGL.tunisLightModelf = (void (KHRONOS_APIENTRY *)(GLenum, GLfloat))tunisGLGetProcAddress("glLightModelf");
    tunisGL.tunisLightModelfv = (void (KHRONOS_APIENTRY *)(GLenum, const GLfloat *))tunisGLGetProcAddress("glLightModelfv");
    tunisGL.tunisLightModeli = (void (KHRONOS_APIENTRY *)(GLenum, GLint))tunisGLGetProcAddress("glLightModeli");
    tunisGL.tunisLightModeliv = (void (KHRONOS_APIENTRY *)(GLenum, const GLint *))tunisGLGetProcAddress("glLightModeliv");
    tunisGL.tunisLightModelx = (void (KHRONOS_APIENTRY *)(GLenum, GLfixed))tunisGLGetProcAddress("glLightModelx");
    tunisGL.tunisLightModelxOES = (void (KHRONOS_APIENTRY *)(GLenum, GLfixed))tunisGLGetProcAddress("glLightModelxOES");
    tunisGL.tunisLightModelxv = (void (KHRONOS_APIENTRY *)(GLenum, const GLfixed *))tunisGLGetProcAddress("glLightModelxv");
    tunisGL.tunisLightModelxvOES = (void (KHRONOS_APIENTRY *)(GLenum, const GLfixed *))tunisGLGetProcAddress("glLightModelxvOES");
    tunisGL.tunisLightf = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfloat))tunisGLGetProcAddress("glLightf");
    tunisGL.tunisLightfv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const GLfloat *))tunisGLGetProcAddress("glLightfv");
    tunisGL.tunisLighti = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint))tunisGLGetProcAddress("glLighti");
    tunisGL.tunisLightiv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const GLint *))tunisGLGetProcAddress("glLightiv");
    tunisGL.tunisLightx = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfixed))tunisGLGetProcAddress("glLightx");
    tunisGL.tunisLightxOES = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfixed))tunisGLGetProcAddress("glLightxOES");
    tunisGL.tunisLightxv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const GLfixed *))tunisGLGetProcAddress("glLightxv");
    tunisGL.tunisLightxvOES = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const GLfixed *))tunisGLGetProcAddress("glLightxvOES");
    tunisGL.tunisLineStipple = (void (KHRONOS_APIENTRY *)(GLint, GLushort))tunisGLGetProcAddress("glLineStipple");
    tunisGL.tunisLineWidth = (void (KHRONOS_APIENTRY *)(GLfloat))tunisGLGetProcAddress("glLineWidth");
    tunisGL.tunisLineWidthx = (void (KHRONOS_APIENTRY *)(GLfixed))tunisGLGetProcAddress("glLineWidthx");
    tunisGL.tunisLineWidthxOES = (void (KHRONOS_APIENTRY *)(GLfixed))tunisGLGetProcAddress("glLineWidthxOES");
    tunisGL.tunisLinkProgram = (void (KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glLinkProgram");
    tunisGL.tunisLinkProgramARB = (void (KHRONOS_APIENTRY *)(GLhandleARB))tunisGLGetProcAddress("glLinkProgramARB");
    tunisGL.tunisListBase = (void (KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glListBase");
    tunisGL.tunisListDrawCommandsStatesClientNV = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, const void **, const GLsizei *, const GLuint *, const GLuint *, GLuint))tunisGLGetProcAddress("glListDrawCommandsStatesClientNV");
    tunisGL.tunisListParameterfSGIX = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLfloat))tunisGLGetProcAddress("glListParameterfSGIX");
    tunisGL.tunisListParameterfvSGIX = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, const GLfloat *))tunisGLGetProcAddress("glListParameterfvSGIX");
    tunisGL.tunisListParameteriSGIX = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint))tunisGLGetProcAddress("glListParameteriSGIX");
    tunisGL.tunisListParameterivSGIX = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, const GLint *))tunisGLGetProcAddress("glListParameterivSGIX");
    tunisGL.tunisLoadIdentity = (void (KHRONOS_APIENTRY *)(void))tunisGLGetProcAddress("glLoadIdentity");
    tunisGL.tunisLoadIdentityDeformationMapSGIX = (void (KHRONOS_APIENTRY *)(GLbitfield))tunisGLGetProcAddress("glLoadIdentityDeformationMapSGIX");
    tunisGL.tunisLoadMatrixd = (void (KHRONOS_APIENTRY *)(const GLdouble *))tunisGLGetProcAddress("glLoadMatrixd");
    tunisGL.tunisLoadMatrixf = (void (KHRONOS_APIENTRY *)(const GLfloat *))tunisGLGetProcAddress("glLoadMatrixf");
    tunisGL.tunisLoadMatrixx = (void (KHRONOS_APIENTRY *)(const GLfixed *))tunisGLGetProcAddress("glLoadMatrixx");
    tunisGL.tunisLoadMatrixxOES = (void (KHRONOS_APIENTRY *)(const GLfixed *))tunisGLGetProcAddress("glLoadMatrixxOES");
    tunisGL.tunisLoadName = (void (KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glLoadName");
    tunisGL.tunisLoadPaletteFromModelViewMatrixOES = (void (KHRONOS_APIENTRY *)(void))tunisGLGetProcAddress("glLoadPaletteFromModelViewMatrixOES");
    tunisGL.tunisLoadProgramNV = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLsizei, const GLubyte *))tunisGLGetProcAddress("glLoadProgramNV");
    tunisGL.tunisLoadTransposeMatrixd = (void (KHRONOS_APIENTRY *)(const GLdouble *))tunisGLGetProcAddress("glLoadTransposeMatrixd");
    tunisGL.tunisLoadTransposeMatrixdARB = (void (KHRONOS_APIENTRY *)(const GLdouble *))tunisGLGetProcAddress("glLoadTransposeMatrixdARB");
    tunisGL.tunisLoadTransposeMatrixf = (void (KHRONOS_APIENTRY *)(const GLfloat *))tunisGLGetProcAddress("glLoadTransposeMatrixf");
    tunisGL.tunisLoadTransposeMatrixfARB = (void (KHRONOS_APIENTRY *)(const GLfloat *))tunisGLGetProcAddress("glLoadTransposeMatrixfARB");
    tunisGL.tunisLoadTransposeMatrixxOES = (void (KHRONOS_APIENTRY *)(const GLfixed *))tunisGLGetProcAddress("glLoadTransposeMatrixxOES");
    tunisGL.tunisLockArraysEXT = (void (KHRONOS_APIENTRY *)(GLint, GLsizei))tunisGLGetProcAddress("glLockArraysEXT");
    tunisGL.tunisLogicOp = (void (KHRONOS_APIENTRY *)(GLenum))tunisGLGetProcAddress("glLogicOp");
    tunisGL.tunisMakeBufferNonResidentNV = (void (KHRONOS_APIENTRY *)(GLenum))tunisGLGetProcAddress("glMakeBufferNonResidentNV");
    tunisGL.tunisMakeBufferResidentNV = (void (KHRONOS_APIENTRY *)(GLenum, GLenum))tunisGLGetProcAddress("glMakeBufferResidentNV");
    tunisGL.tunisMakeImageHandleNonResidentARB = (void (KHRONOS_APIENTRY *)(GLuint64))tunisGLGetProcAddress("glMakeImageHandleNonResidentARB");
    tunisGL.tunisMakeImageHandleNonResidentNV = (void (KHRONOS_APIENTRY *)(GLuint64))tunisGLGetProcAddress("glMakeImageHandleNonResidentNV");
    tunisGL.tunisMakeImageHandleResidentARB = (void (KHRONOS_APIENTRY *)(GLuint64, GLenum))tunisGLGetProcAddress("glMakeImageHandleResidentARB");
    tunisGL.tunisMakeImageHandleResidentNV = (void (KHRONOS_APIENTRY *)(GLuint64, GLenum))tunisGLGetProcAddress("glMakeImageHandleResidentNV");
    tunisGL.tunisMakeNamedBufferNonResidentNV = (void (KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glMakeNamedBufferNonResidentNV");
    tunisGL.tunisMakeNamedBufferResidentNV = (void (KHRONOS_APIENTRY *)(GLuint, GLenum))tunisGLGetProcAddress("glMakeNamedBufferResidentNV");
    tunisGL.tunisMakeTextureHandleNonResidentARB = (void (KHRONOS_APIENTRY *)(GLuint64))tunisGLGetProcAddress("glMakeTextureHandleNonResidentARB");
    tunisGL.tunisMakeTextureHandleNonResidentNV = (void (KHRONOS_APIENTRY *)(GLuint64))tunisGLGetProcAddress("glMakeTextureHandleNonResidentNV");
    tunisGL.tunisMakeTextureHandleResidentARB = (void (KHRONOS_APIENTRY *)(GLuint64))tunisGLGetProcAddress("glMakeTextureHandleResidentARB");
    tunisGL.tunisMakeTextureHandleResidentNV = (void (KHRONOS_APIENTRY *)(GLuint64))tunisGLGetProcAddress("glMakeTextureHandleResidentNV");
    tunisGL.tunisMap1d = (void (KHRONOS_APIENTRY *)(GLenum, GLdouble, GLdouble, GLint, GLint, const GLdouble *))tunisGLGetProcAddress("glMap1d");
    tunisGL.tunisMap1f = (void (KHRONOS_APIENTRY *)(GLenum, GLfloat, GLfloat, GLint, GLint, const GLfloat *))tunisGLGetProcAddress("glMap1f");
    tunisGL.tunisMap1xOES = (void (KHRONOS_APIENTRY *)(GLenum, GLfixed, GLfixed, GLint, GLint, GLfixed))tunisGLGetProcAddress("glMap1xOES");
    tunisGL.tunisMap2d = (void (KHRONOS_APIENTRY *)(GLenum, GLdouble, GLdouble, GLint, GLint, GLdouble, GLdouble, GLint, GLint, const GLdouble *))tunisGLGetProcAddress("glMap2d");
    tunisGL.tunisMap2f = (void (KHRONOS_APIENTRY *)(GLenum, GLfloat, GLfloat, GLint, GLint, GLfloat, GLfloat, GLint, GLint, const GLfloat *))tunisGLGetProcAddress("glMap2f");
    tunisGL.tunisMap2xOES = (void (KHRONOS_APIENTRY *)(GLenum, GLfixed, GLfixed, GLint, GLint, GLfixed, GLfixed, GLint, GLint, GLfixed))tunisGLGetProcAddress("glMap2xOES");
    tunisGL.tunisMapBuffer = (void *(KHRONOS_APIENTRY *)(GLenum, GLenum))tunisGLGetProcAddress("glMapBuffer");
    tunisGL.tunisMapBufferARB = (void *(KHRONOS_APIENTRY *)(GLenum, GLenum))tunisGLGetProcAddress("glMapBufferARB");
    tunisGL.tunisMapBufferOES = (void *(KHRONOS_APIENTRY *)(GLenum, GLenum))tunisGLGetProcAddress("glMapBufferOES");
    tunisGL.tunisMapBufferRange = (void *(KHRONOS_APIENTRY *)(GLenum, GLintptr, GLsizeiptr, GLbitfield))tunisGLGetProcAddress("glMapBufferRange");
    tunisGL.tunisMapBufferRangeEXT = (void *(KHRONOS_APIENTRY *)(GLenum, GLintptr, GLsizeiptr, GLbitfield))tunisGLGetProcAddress("glMapBufferRangeEXT");
    tunisGL.tunisMapControlPointsNV = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLenum, GLsizei, GLsizei, GLint, GLint, GLboolean, const void *))tunisGLGetProcAddress("glMapControlPointsNV");
    tunisGL.tunisMapGrid1d = (void (KHRONOS_APIENTRY *)(GLint, GLdouble, GLdouble))tunisGLGetProcAddress("glMapGrid1d");
    tunisGL.tunisMapGrid1f = (void (KHRONOS_APIENTRY *)(GLint, GLfloat, GLfloat))tunisGLGetProcAddress("glMapGrid1f");
    tunisGL.tunisMapGrid1xOES = (void (KHRONOS_APIENTRY *)(GLint, GLfixed, GLfixed))tunisGLGetProcAddress("glMapGrid1xOES");
    tunisGL.tunisMapGrid2d = (void (KHRONOS_APIENTRY *)(GLint, GLdouble, GLdouble, GLint, GLdouble, GLdouble))tunisGLGetProcAddress("glMapGrid2d");
    tunisGL.tunisMapGrid2f = (void (KHRONOS_APIENTRY *)(GLint, GLfloat, GLfloat, GLint, GLfloat, GLfloat))tunisGLGetProcAddress("glMapGrid2f");
    tunisGL.tunisMapGrid2xOES = (void (KHRONOS_APIENTRY *)(GLint, GLfixed, GLfixed, GLfixed, GLfixed))tunisGLGetProcAddress("glMapGrid2xOES");
    tunisGL.tunisMapNamedBuffer = (void *(KHRONOS_APIENTRY *)(GLuint, GLenum))tunisGLGetProcAddress("glMapNamedBuffer");
    tunisGL.tunisMapNamedBufferEXT = (void *(KHRONOS_APIENTRY *)(GLuint, GLenum))tunisGLGetProcAddress("glMapNamedBufferEXT");
    tunisGL.tunisMapNamedBufferRange = (void *(KHRONOS_APIENTRY *)(GLuint, GLintptr, GLsizeiptr, GLbitfield))tunisGLGetProcAddress("glMapNamedBufferRange");
    tunisGL.tunisMapNamedBufferRangeEXT = (void *(KHRONOS_APIENTRY *)(GLuint, GLintptr, GLsizeiptr, GLbitfield))tunisGLGetProcAddress("glMapNamedBufferRangeEXT");
    tunisGL.tunisMapObjectBufferATI = (void *(KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glMapObjectBufferATI");
    tunisGL.tunisMapParameterfvNV = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const GLfloat *))tunisGLGetProcAddress("glMapParameterfvNV");
    tunisGL.tunisMapParameterivNV = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const GLint *))tunisGLGetProcAddress("glMapParameterivNV");
    tunisGL.tunisMapTexture2DINTEL = (void *(KHRONOS_APIENTRY *)(GLuint, GLint, GLbitfield, GLint *, GLenum *))tunisGLGetProcAddress("glMapTexture2DINTEL");
    tunisGL.tunisMapVertexAttrib1dAPPLE = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLdouble, GLdouble, GLint, GLint, const GLdouble *))tunisGLGetProcAddress("glMapVertexAttrib1dAPPLE");
    tunisGL.tunisMapVertexAttrib1fAPPLE = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLfloat, GLfloat, GLint, GLint, const GLfloat *))tunisGLGetProcAddress("glMapVertexAttrib1fAPPLE");
    tunisGL.tunisMapVertexAttrib2dAPPLE = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLdouble, GLdouble, GLint, GLint, GLdouble, GLdouble, GLint, GLint, const GLdouble *))tunisGLGetProcAddress("glMapVertexAttrib2dAPPLE");
    tunisGL.tunisMapVertexAttrib2fAPPLE = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLfloat, GLfloat, GLint, GLint, GLfloat, GLfloat, GLint, GLint, const GLfloat *))tunisGLGetProcAddress("glMapVertexAttrib2fAPPLE");
    tunisGL.tunisMaterialf = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfloat))tunisGLGetProcAddress("glMaterialf");
    tunisGL.tunisMaterialfv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const GLfloat *))tunisGLGetProcAddress("glMaterialfv");
    tunisGL.tunisMateriali = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint))tunisGLGetProcAddress("glMateriali");
    tunisGL.tunisMaterialiv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const GLint *))tunisGLGetProcAddress("glMaterialiv");
    tunisGL.tunisMaterialx = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfixed))tunisGLGetProcAddress("glMaterialx");
    tunisGL.tunisMaterialxOES = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfixed))tunisGLGetProcAddress("glMaterialxOES");
    tunisGL.tunisMaterialxv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const GLfixed *))tunisGLGetProcAddress("glMaterialxv");
    tunisGL.tunisMaterialxvOES = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const GLfixed *))tunisGLGetProcAddress("glMaterialxvOES");
    tunisGL.tunisMatrixFrustumEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble))tunisGLGetProcAddress("glMatrixFrustumEXT");
    tunisGL.tunisMatrixIndexPointerARB = (void (KHRONOS_APIENTRY *)(GLint, GLenum, GLsizei, const void *))tunisGLGetProcAddress("glMatrixIndexPointerARB");
    tunisGL.tunisMatrixIndexPointerOES = (void (KHRONOS_APIENTRY *)(GLint, GLenum, GLsizei, const void *))tunisGLGetProcAddress("glMatrixIndexPointerOES");
    tunisGL.tunisMatrixIndexubvARB = (void (KHRONOS_APIENTRY *)(GLint, const GLubyte *))tunisGLGetProcAddress("glMatrixIndexubvARB");
    tunisGL.tunisMatrixIndexuivARB = (void (KHRONOS_APIENTRY *)(GLint, const GLuint *))tunisGLGetProcAddress("glMatrixIndexuivARB");
    tunisGL.tunisMatrixIndexusvARB = (void (KHRONOS_APIENTRY *)(GLint, const GLushort *))tunisGLGetProcAddress("glMatrixIndexusvARB");
    tunisGL.tunisMatrixLoad3x2fNV = (void (KHRONOS_APIENTRY *)(GLenum, const GLfloat *))tunisGLGetProcAddress("glMatrixLoad3x2fNV");
    tunisGL.tunisMatrixLoad3x3fNV = (void (KHRONOS_APIENTRY *)(GLenum, const GLfloat *))tunisGLGetProcAddress("glMatrixLoad3x3fNV");
    tunisGL.tunisMatrixLoadIdentityEXT = (void (KHRONOS_APIENTRY *)(GLenum))tunisGLGetProcAddress("glMatrixLoadIdentityEXT");
    tunisGL.tunisMatrixLoadTranspose3x3fNV = (void (KHRONOS_APIENTRY *)(GLenum, const GLfloat *))tunisGLGetProcAddress("glMatrixLoadTranspose3x3fNV");
    tunisGL.tunisMatrixLoadTransposedEXT = (void (KHRONOS_APIENTRY *)(GLenum, const GLdouble *))tunisGLGetProcAddress("glMatrixLoadTransposedEXT");
    tunisGL.tunisMatrixLoadTransposefEXT = (void (KHRONOS_APIENTRY *)(GLenum, const GLfloat *))tunisGLGetProcAddress("glMatrixLoadTransposefEXT");
    tunisGL.tunisMatrixLoaddEXT = (void (KHRONOS_APIENTRY *)(GLenum, const GLdouble *))tunisGLGetProcAddress("glMatrixLoaddEXT");
    tunisGL.tunisMatrixLoadfEXT = (void (KHRONOS_APIENTRY *)(GLenum, const GLfloat *))tunisGLGetProcAddress("glMatrixLoadfEXT");
    tunisGL.tunisMatrixMode = (void (KHRONOS_APIENTRY *)(GLenum))tunisGLGetProcAddress("glMatrixMode");
    tunisGL.tunisMatrixMult3x2fNV = (void (KHRONOS_APIENTRY *)(GLenum, const GLfloat *))tunisGLGetProcAddress("glMatrixMult3x2fNV");
    tunisGL.tunisMatrixMult3x3fNV = (void (KHRONOS_APIENTRY *)(GLenum, const GLfloat *))tunisGLGetProcAddress("glMatrixMult3x3fNV");
    tunisGL.tunisMatrixMultTranspose3x3fNV = (void (KHRONOS_APIENTRY *)(GLenum, const GLfloat *))tunisGLGetProcAddress("glMatrixMultTranspose3x3fNV");
    tunisGL.tunisMatrixMultTransposedEXT = (void (KHRONOS_APIENTRY *)(GLenum, const GLdouble *))tunisGLGetProcAddress("glMatrixMultTransposedEXT");
    tunisGL.tunisMatrixMultTransposefEXT = (void (KHRONOS_APIENTRY *)(GLenum, const GLfloat *))tunisGLGetProcAddress("glMatrixMultTransposefEXT");
    tunisGL.tunisMatrixMultdEXT = (void (KHRONOS_APIENTRY *)(GLenum, const GLdouble *))tunisGLGetProcAddress("glMatrixMultdEXT");
    tunisGL.tunisMatrixMultfEXT = (void (KHRONOS_APIENTRY *)(GLenum, const GLfloat *))tunisGLGetProcAddress("glMatrixMultfEXT");
    tunisGL.tunisMatrixOrthoEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble))tunisGLGetProcAddress("glMatrixOrthoEXT");
    tunisGL.tunisMatrixPopEXT = (void (KHRONOS_APIENTRY *)(GLenum))tunisGLGetProcAddress("glMatrixPopEXT");
    tunisGL.tunisMatrixPushEXT = (void (KHRONOS_APIENTRY *)(GLenum))tunisGLGetProcAddress("glMatrixPushEXT");
    tunisGL.tunisMatrixRotatedEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLdouble, GLdouble, GLdouble, GLdouble))tunisGLGetProcAddress("glMatrixRotatedEXT");
    tunisGL.tunisMatrixRotatefEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLfloat, GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glMatrixRotatefEXT");
    tunisGL.tunisMatrixScaledEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLdouble, GLdouble, GLdouble))tunisGLGetProcAddress("glMatrixScaledEXT");
    tunisGL.tunisMatrixScalefEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glMatrixScalefEXT");
    tunisGL.tunisMatrixTranslatedEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLdouble, GLdouble, GLdouble))tunisGLGetProcAddress("glMatrixTranslatedEXT");
    tunisGL.tunisMatrixTranslatefEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glMatrixTranslatefEXT");
    tunisGL.tunisMaxShaderCompilerThreadsARB = (void (KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glMaxShaderCompilerThreadsARB");
    tunisGL.tunisMaxShaderCompilerThreadsKHR = (void (KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glMaxShaderCompilerThreadsKHR");
    tunisGL.tunisMemoryBarrier = (void (KHRONOS_APIENTRY *)(GLbitfield))tunisGLGetProcAddress("glMemoryBarrier");
    tunisGL.tunisMemoryBarrierByRegion = (void (KHRONOS_APIENTRY *)(GLbitfield))tunisGLGetProcAddress("glMemoryBarrierByRegion");
    tunisGL.tunisMemoryBarrierEXT = (void (KHRONOS_APIENTRY *)(GLbitfield))tunisGLGetProcAddress("glMemoryBarrierEXT");
    tunisGL.tunisMemoryObjectParameterivEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, const GLint *))tunisGLGetProcAddress("glMemoryObjectParameterivEXT");
    tunisGL.tunisMinSampleShading = (void (KHRONOS_APIENTRY *)(GLfloat))tunisGLGetProcAddress("glMinSampleShading");
    tunisGL.tunisMinSampleShadingARB = (void (KHRONOS_APIENTRY *)(GLfloat))tunisGLGetProcAddress("glMinSampleShadingARB");
    tunisGL.tunisMinSampleShadingOES = (void (KHRONOS_APIENTRY *)(GLfloat))tunisGLGetProcAddress("glMinSampleShadingOES");
    tunisGL.tunisMinmax = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLboolean))tunisGLGetProcAddress("glMinmax");
    tunisGL.tunisMinmaxEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLboolean))tunisGLGetProcAddress("glMinmaxEXT");
    tunisGL.tunisMultMatrixd = (void (KHRONOS_APIENTRY *)(const GLdouble *))tunisGLGetProcAddress("glMultMatrixd");
    tunisGL.tunisMultMatrixf = (void (KHRONOS_APIENTRY *)(const GLfloat *))tunisGLGetProcAddress("glMultMatrixf");
    tunisGL.tunisMultMatrixx = (void (KHRONOS_APIENTRY *)(const GLfixed *))tunisGLGetProcAddress("glMultMatrixx");
    tunisGL.tunisMultMatrixxOES = (void (KHRONOS_APIENTRY *)(const GLfixed *))tunisGLGetProcAddress("glMultMatrixxOES");
    tunisGL.tunisMultTransposeMatrixd = (void (KHRONOS_APIENTRY *)(const GLdouble *))tunisGLGetProcAddress("glMultTransposeMatrixd");
    tunisGL.tunisMultTransposeMatrixdARB = (void (KHRONOS_APIENTRY *)(const GLdouble *))tunisGLGetProcAddress("glMultTransposeMatrixdARB");
    tunisGL.tunisMultTransposeMatrixf = (void (KHRONOS_APIENTRY *)(const GLfloat *))tunisGLGetProcAddress("glMultTransposeMatrixf");
    tunisGL.tunisMultTransposeMatrixfARB = (void (KHRONOS_APIENTRY *)(const GLfloat *))tunisGLGetProcAddress("glMultTransposeMatrixfARB");
    tunisGL.tunisMultTransposeMatrixxOES = (void (KHRONOS_APIENTRY *)(const GLfixed *))tunisGLGetProcAddress("glMultTransposeMatrixxOES");
    tunisGL.tunisMultiDrawArrays = (void (KHRONOS_APIENTRY *)(GLenum, const GLint *, const GLsizei *, GLsizei))tunisGLGetProcAddress("glMultiDrawArrays");
    tunisGL.tunisMultiDrawArraysEXT = (void (KHRONOS_APIENTRY *)(GLenum, const GLint *, const GLsizei *, GLsizei))tunisGLGetProcAddress("glMultiDrawArraysEXT");
    tunisGL.tunisMultiDrawArraysIndirect = (void (KHRONOS_APIENTRY *)(GLenum, const void *, GLsizei, GLsizei))tunisGLGetProcAddress("glMultiDrawArraysIndirect");
    tunisGL.tunisMultiDrawArraysIndirectAMD = (void (KHRONOS_APIENTRY *)(GLenum, const void *, GLsizei, GLsizei))tunisGLGetProcAddress("glMultiDrawArraysIndirectAMD");
    tunisGL.tunisMultiDrawArraysIndirectBindlessCountNV = (void (KHRONOS_APIENTRY *)(GLenum, const void *, GLsizei, GLsizei, GLsizei, GLint))tunisGLGetProcAddress("glMultiDrawArraysIndirectBindlessCountNV");
    tunisGL.tunisMultiDrawArraysIndirectBindlessNV = (void (KHRONOS_APIENTRY *)(GLenum, const void *, GLsizei, GLsizei, GLint))tunisGLGetProcAddress("glMultiDrawArraysIndirectBindlessNV");
    tunisGL.tunisMultiDrawArraysIndirectCount = (void (KHRONOS_APIENTRY *)(GLenum, const void *, GLintptr, GLsizei, GLsizei))tunisGLGetProcAddress("glMultiDrawArraysIndirectCount");
    tunisGL.tunisMultiDrawArraysIndirectCountARB = (void (KHRONOS_APIENTRY *)(GLenum, const void *, GLintptr, GLsizei, GLsizei))tunisGLGetProcAddress("glMultiDrawArraysIndirectCountARB");
    tunisGL.tunisMultiDrawArraysIndirectEXT = (void (KHRONOS_APIENTRY *)(GLenum, const void *, GLsizei, GLsizei))tunisGLGetProcAddress("glMultiDrawArraysIndirectEXT");
    tunisGL.tunisMultiDrawElementArrayAPPLE = (void (KHRONOS_APIENTRY *)(GLenum, const GLint *, const GLsizei *, GLsizei))tunisGLGetProcAddress("glMultiDrawElementArrayAPPLE");
    tunisGL.tunisMultiDrawElements = (void (KHRONOS_APIENTRY *)(GLenum, const GLsizei *, GLenum, const void *const*, GLsizei))tunisGLGetProcAddress("glMultiDrawElements");
    tunisGL.tunisMultiDrawElementsBaseVertex = (void (KHRONOS_APIENTRY *)(GLenum, const GLsizei *, GLenum, const void *const*, GLsizei, const GLint *))tunisGLGetProcAddress("glMultiDrawElementsBaseVertex");
    tunisGL.tunisMultiDrawElementsBaseVertexEXT = (void (KHRONOS_APIENTRY *)(GLenum, const GLsizei *, GLenum, const void *const*, GLsizei, const GLint *))tunisGLGetProcAddress("glMultiDrawElementsBaseVertexEXT");
    tunisGL.tunisMultiDrawElementsEXT = (void (KHRONOS_APIENTRY *)(GLenum, const GLsizei *, GLenum, const void *const*, GLsizei))tunisGLGetProcAddress("glMultiDrawElementsEXT");
    tunisGL.tunisMultiDrawElementsIndirect = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const void *, GLsizei, GLsizei))tunisGLGetProcAddress("glMultiDrawElementsIndirect");
    tunisGL.tunisMultiDrawElementsIndirectAMD = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const void *, GLsizei, GLsizei))tunisGLGetProcAddress("glMultiDrawElementsIndirectAMD");
    tunisGL.tunisMultiDrawElementsIndirectBindlessCountNV = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const void *, GLsizei, GLsizei, GLsizei, GLint))tunisGLGetProcAddress("glMultiDrawElementsIndirectBindlessCountNV");
    tunisGL.tunisMultiDrawElementsIndirectBindlessNV = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const void *, GLsizei, GLsizei, GLint))tunisGLGetProcAddress("glMultiDrawElementsIndirectBindlessNV");
    tunisGL.tunisMultiDrawElementsIndirectCount = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const void *, GLintptr, GLsizei, GLsizei))tunisGLGetProcAddress("glMultiDrawElementsIndirectCount");
    tunisGL.tunisMultiDrawElementsIndirectCountARB = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const void *, GLintptr, GLsizei, GLsizei))tunisGLGetProcAddress("glMultiDrawElementsIndirectCountARB");
    tunisGL.tunisMultiDrawElementsIndirectEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const void *, GLsizei, GLsizei))tunisGLGetProcAddress("glMultiDrawElementsIndirectEXT");
    tunisGL.tunisMultiDrawMeshTasksIndirectCountNV = (void (KHRONOS_APIENTRY *)(GLintptr, GLintptr, GLsizei, GLsizei))tunisGLGetProcAddress("glMultiDrawMeshTasksIndirectCountNV");
    tunisGL.tunisMultiDrawMeshTasksIndirectNV = (void (KHRONOS_APIENTRY *)(GLintptr, GLsizei, GLsizei))tunisGLGetProcAddress("glMultiDrawMeshTasksIndirectNV");
    tunisGL.tunisMultiDrawRangeElementArrayAPPLE = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLuint, const GLint *, const GLsizei *, GLsizei))tunisGLGetProcAddress("glMultiDrawRangeElementArrayAPPLE");
    tunisGL.tunisMultiModeDrawArraysIBM = (void (KHRONOS_APIENTRY *)(const GLenum *, const GLint *, const GLsizei *, GLsizei, GLint))tunisGLGetProcAddress("glMultiModeDrawArraysIBM");
    tunisGL.tunisMultiModeDrawElementsIBM = (void (KHRONOS_APIENTRY *)(const GLenum *, const GLsizei *, GLenum, const void *const*, GLsizei, GLint))tunisGLGetProcAddress("glMultiModeDrawElementsIBM");
    tunisGL.tunisMultiTexBufferEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLuint))tunisGLGetProcAddress("glMultiTexBufferEXT");
    tunisGL.tunisMultiTexCoord1bOES = (void (KHRONOS_APIENTRY *)(GLenum, GLbyte))tunisGLGetProcAddress("glMultiTexCoord1bOES");
    tunisGL.tunisMultiTexCoord1bvOES = (void (KHRONOS_APIENTRY *)(GLenum, const GLbyte *))tunisGLGetProcAddress("glMultiTexCoord1bvOES");
    tunisGL.tunisMultiTexCoord1d = (void (KHRONOS_APIENTRY *)(GLenum, GLdouble))tunisGLGetProcAddress("glMultiTexCoord1d");
    tunisGL.tunisMultiTexCoord1dARB = (void (KHRONOS_APIENTRY *)(GLenum, GLdouble))tunisGLGetProcAddress("glMultiTexCoord1dARB");
    tunisGL.tunisMultiTexCoord1dv = (void (KHRONOS_APIENTRY *)(GLenum, const GLdouble *))tunisGLGetProcAddress("glMultiTexCoord1dv");
    tunisGL.tunisMultiTexCoord1dvARB = (void (KHRONOS_APIENTRY *)(GLenum, const GLdouble *))tunisGLGetProcAddress("glMultiTexCoord1dvARB");
    tunisGL.tunisMultiTexCoord1f = (void (KHRONOS_APIENTRY *)(GLenum, GLfloat))tunisGLGetProcAddress("glMultiTexCoord1f");
    tunisGL.tunisMultiTexCoord1fARB = (void (KHRONOS_APIENTRY *)(GLenum, GLfloat))tunisGLGetProcAddress("glMultiTexCoord1fARB");
    tunisGL.tunisMultiTexCoord1fv = (void (KHRONOS_APIENTRY *)(GLenum, const GLfloat *))tunisGLGetProcAddress("glMultiTexCoord1fv");
    tunisGL.tunisMultiTexCoord1fvARB = (void (KHRONOS_APIENTRY *)(GLenum, const GLfloat *))tunisGLGetProcAddress("glMultiTexCoord1fvARB");
    tunisGL.tunisMultiTexCoord1hNV = (void (KHRONOS_APIENTRY *)(GLenum, GLhalfNV))tunisGLGetProcAddress("glMultiTexCoord1hNV");
    tunisGL.tunisMultiTexCoord1hvNV = (void (KHRONOS_APIENTRY *)(GLenum, const GLhalfNV *))tunisGLGetProcAddress("glMultiTexCoord1hvNV");
    tunisGL.tunisMultiTexCoord1i = (void (KHRONOS_APIENTRY *)(GLenum, GLint))tunisGLGetProcAddress("glMultiTexCoord1i");
    tunisGL.tunisMultiTexCoord1iARB = (void (KHRONOS_APIENTRY *)(GLenum, GLint))tunisGLGetProcAddress("glMultiTexCoord1iARB");
    tunisGL.tunisMultiTexCoord1iv = (void (KHRONOS_APIENTRY *)(GLenum, const GLint *))tunisGLGetProcAddress("glMultiTexCoord1iv");
    tunisGL.tunisMultiTexCoord1ivARB = (void (KHRONOS_APIENTRY *)(GLenum, const GLint *))tunisGLGetProcAddress("glMultiTexCoord1ivARB");
    tunisGL.tunisMultiTexCoord1s = (void (KHRONOS_APIENTRY *)(GLenum, GLshort))tunisGLGetProcAddress("glMultiTexCoord1s");
    tunisGL.tunisMultiTexCoord1sARB = (void (KHRONOS_APIENTRY *)(GLenum, GLshort))tunisGLGetProcAddress("glMultiTexCoord1sARB");
    tunisGL.tunisMultiTexCoord1sv = (void (KHRONOS_APIENTRY *)(GLenum, const GLshort *))tunisGLGetProcAddress("glMultiTexCoord1sv");
    tunisGL.tunisMultiTexCoord1svARB = (void (KHRONOS_APIENTRY *)(GLenum, const GLshort *))tunisGLGetProcAddress("glMultiTexCoord1svARB");
    tunisGL.tunisMultiTexCoord1xOES = (void (KHRONOS_APIENTRY *)(GLenum, GLfixed))tunisGLGetProcAddress("glMultiTexCoord1xOES");
    tunisGL.tunisMultiTexCoord1xvOES = (void (KHRONOS_APIENTRY *)(GLenum, const GLfixed *))tunisGLGetProcAddress("glMultiTexCoord1xvOES");
    tunisGL.tunisMultiTexCoord2bOES = (void (KHRONOS_APIENTRY *)(GLenum, GLbyte, GLbyte))tunisGLGetProcAddress("glMultiTexCoord2bOES");
    tunisGL.tunisMultiTexCoord2bvOES = (void (KHRONOS_APIENTRY *)(GLenum, const GLbyte *))tunisGLGetProcAddress("glMultiTexCoord2bvOES");
    tunisGL.tunisMultiTexCoord2d = (void (KHRONOS_APIENTRY *)(GLenum, GLdouble, GLdouble))tunisGLGetProcAddress("glMultiTexCoord2d");
    tunisGL.tunisMultiTexCoord2dARB = (void (KHRONOS_APIENTRY *)(GLenum, GLdouble, GLdouble))tunisGLGetProcAddress("glMultiTexCoord2dARB");
    tunisGL.tunisMultiTexCoord2dv = (void (KHRONOS_APIENTRY *)(GLenum, const GLdouble *))tunisGLGetProcAddress("glMultiTexCoord2dv");
    tunisGL.tunisMultiTexCoord2dvARB = (void (KHRONOS_APIENTRY *)(GLenum, const GLdouble *))tunisGLGetProcAddress("glMultiTexCoord2dvARB");
    tunisGL.tunisMultiTexCoord2f = (void (KHRONOS_APIENTRY *)(GLenum, GLfloat, GLfloat))tunisGLGetProcAddress("glMultiTexCoord2f");
    tunisGL.tunisMultiTexCoord2fARB = (void (KHRONOS_APIENTRY *)(GLenum, GLfloat, GLfloat))tunisGLGetProcAddress("glMultiTexCoord2fARB");
    tunisGL.tunisMultiTexCoord2fv = (void (KHRONOS_APIENTRY *)(GLenum, const GLfloat *))tunisGLGetProcAddress("glMultiTexCoord2fv");
    tunisGL.tunisMultiTexCoord2fvARB = (void (KHRONOS_APIENTRY *)(GLenum, const GLfloat *))tunisGLGetProcAddress("glMultiTexCoord2fvARB");
    tunisGL.tunisMultiTexCoord2hNV = (void (KHRONOS_APIENTRY *)(GLenum, GLhalfNV, GLhalfNV))tunisGLGetProcAddress("glMultiTexCoord2hNV");
    tunisGL.tunisMultiTexCoord2hvNV = (void (KHRONOS_APIENTRY *)(GLenum, const GLhalfNV *))tunisGLGetProcAddress("glMultiTexCoord2hvNV");
    tunisGL.tunisMultiTexCoord2i = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLint))tunisGLGetProcAddress("glMultiTexCoord2i");
    tunisGL.tunisMultiTexCoord2iARB = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLint))tunisGLGetProcAddress("glMultiTexCoord2iARB");
    tunisGL.tunisMultiTexCoord2iv = (void (KHRONOS_APIENTRY *)(GLenum, const GLint *))tunisGLGetProcAddress("glMultiTexCoord2iv");
    tunisGL.tunisMultiTexCoord2ivARB = (void (KHRONOS_APIENTRY *)(GLenum, const GLint *))tunisGLGetProcAddress("glMultiTexCoord2ivARB");
    tunisGL.tunisMultiTexCoord2s = (void (KHRONOS_APIENTRY *)(GLenum, GLshort, GLshort))tunisGLGetProcAddress("glMultiTexCoord2s");
    tunisGL.tunisMultiTexCoord2sARB = (void (KHRONOS_APIENTRY *)(GLenum, GLshort, GLshort))tunisGLGetProcAddress("glMultiTexCoord2sARB");
    tunisGL.tunisMultiTexCoord2sv = (void (KHRONOS_APIENTRY *)(GLenum, const GLshort *))tunisGLGetProcAddress("glMultiTexCoord2sv");
    tunisGL.tunisMultiTexCoord2svARB = (void (KHRONOS_APIENTRY *)(GLenum, const GLshort *))tunisGLGetProcAddress("glMultiTexCoord2svARB");
    tunisGL.tunisMultiTexCoord2xOES = (void (KHRONOS_APIENTRY *)(GLenum, GLfixed, GLfixed))tunisGLGetProcAddress("glMultiTexCoord2xOES");
    tunisGL.tunisMultiTexCoord2xvOES = (void (KHRONOS_APIENTRY *)(GLenum, const GLfixed *))tunisGLGetProcAddress("glMultiTexCoord2xvOES");
    tunisGL.tunisMultiTexCoord3bOES = (void (KHRONOS_APIENTRY *)(GLenum, GLbyte, GLbyte, GLbyte))tunisGLGetProcAddress("glMultiTexCoord3bOES");
    tunisGL.tunisMultiTexCoord3bvOES = (void (KHRONOS_APIENTRY *)(GLenum, const GLbyte *))tunisGLGetProcAddress("glMultiTexCoord3bvOES");
    tunisGL.tunisMultiTexCoord3d = (void (KHRONOS_APIENTRY *)(GLenum, GLdouble, GLdouble, GLdouble))tunisGLGetProcAddress("glMultiTexCoord3d");
    tunisGL.tunisMultiTexCoord3dARB = (void (KHRONOS_APIENTRY *)(GLenum, GLdouble, GLdouble, GLdouble))tunisGLGetProcAddress("glMultiTexCoord3dARB");
    tunisGL.tunisMultiTexCoord3dv = (void (KHRONOS_APIENTRY *)(GLenum, const GLdouble *))tunisGLGetProcAddress("glMultiTexCoord3dv");
    tunisGL.tunisMultiTexCoord3dvARB = (void (KHRONOS_APIENTRY *)(GLenum, const GLdouble *))tunisGLGetProcAddress("glMultiTexCoord3dvARB");
    tunisGL.tunisMultiTexCoord3f = (void (KHRONOS_APIENTRY *)(GLenum, GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glMultiTexCoord3f");
    tunisGL.tunisMultiTexCoord3fARB = (void (KHRONOS_APIENTRY *)(GLenum, GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glMultiTexCoord3fARB");
    tunisGL.tunisMultiTexCoord3fv = (void (KHRONOS_APIENTRY *)(GLenum, const GLfloat *))tunisGLGetProcAddress("glMultiTexCoord3fv");
    tunisGL.tunisMultiTexCoord3fvARB = (void (KHRONOS_APIENTRY *)(GLenum, const GLfloat *))tunisGLGetProcAddress("glMultiTexCoord3fvARB");
    tunisGL.tunisMultiTexCoord3hNV = (void (KHRONOS_APIENTRY *)(GLenum, GLhalfNV, GLhalfNV, GLhalfNV))tunisGLGetProcAddress("glMultiTexCoord3hNV");
    tunisGL.tunisMultiTexCoord3hvNV = (void (KHRONOS_APIENTRY *)(GLenum, const GLhalfNV *))tunisGLGetProcAddress("glMultiTexCoord3hvNV");
    tunisGL.tunisMultiTexCoord3i = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLint, GLint))tunisGLGetProcAddress("glMultiTexCoord3i");
    tunisGL.tunisMultiTexCoord3iARB = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLint, GLint))tunisGLGetProcAddress("glMultiTexCoord3iARB");
    tunisGL.tunisMultiTexCoord3iv = (void (KHRONOS_APIENTRY *)(GLenum, const GLint *))tunisGLGetProcAddress("glMultiTexCoord3iv");
    tunisGL.tunisMultiTexCoord3ivARB = (void (KHRONOS_APIENTRY *)(GLenum, const GLint *))tunisGLGetProcAddress("glMultiTexCoord3ivARB");
    tunisGL.tunisMultiTexCoord3s = (void (KHRONOS_APIENTRY *)(GLenum, GLshort, GLshort, GLshort))tunisGLGetProcAddress("glMultiTexCoord3s");
    tunisGL.tunisMultiTexCoord3sARB = (void (KHRONOS_APIENTRY *)(GLenum, GLshort, GLshort, GLshort))tunisGLGetProcAddress("glMultiTexCoord3sARB");
    tunisGL.tunisMultiTexCoord3sv = (void (KHRONOS_APIENTRY *)(GLenum, const GLshort *))tunisGLGetProcAddress("glMultiTexCoord3sv");
    tunisGL.tunisMultiTexCoord3svARB = (void (KHRONOS_APIENTRY *)(GLenum, const GLshort *))tunisGLGetProcAddress("glMultiTexCoord3svARB");
    tunisGL.tunisMultiTexCoord3xOES = (void (KHRONOS_APIENTRY *)(GLenum, GLfixed, GLfixed, GLfixed))tunisGLGetProcAddress("glMultiTexCoord3xOES");
    tunisGL.tunisMultiTexCoord3xvOES = (void (KHRONOS_APIENTRY *)(GLenum, const GLfixed *))tunisGLGetProcAddress("glMultiTexCoord3xvOES");
    tunisGL.tunisMultiTexCoord4bOES = (void (KHRONOS_APIENTRY *)(GLenum, GLbyte, GLbyte, GLbyte, GLbyte))tunisGLGetProcAddress("glMultiTexCoord4bOES");
    tunisGL.tunisMultiTexCoord4bvOES = (void (KHRONOS_APIENTRY *)(GLenum, const GLbyte *))tunisGLGetProcAddress("glMultiTexCoord4bvOES");
    tunisGL.tunisMultiTexCoord4d = (void (KHRONOS_APIENTRY *)(GLenum, GLdouble, GLdouble, GLdouble, GLdouble))tunisGLGetProcAddress("glMultiTexCoord4d");
    tunisGL.tunisMultiTexCoord4dARB = (void (KHRONOS_APIENTRY *)(GLenum, GLdouble, GLdouble, GLdouble, GLdouble))tunisGLGetProcAddress("glMultiTexCoord4dARB");
    tunisGL.tunisMultiTexCoord4dv = (void (KHRONOS_APIENTRY *)(GLenum, const GLdouble *))tunisGLGetProcAddress("glMultiTexCoord4dv");
    tunisGL.tunisMultiTexCoord4dvARB = (void (KHRONOS_APIENTRY *)(GLenum, const GLdouble *))tunisGLGetProcAddress("glMultiTexCoord4dvARB");
    tunisGL.tunisMultiTexCoord4f = (void (KHRONOS_APIENTRY *)(GLenum, GLfloat, GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glMultiTexCoord4f");
    tunisGL.tunisMultiTexCoord4fARB = (void (KHRONOS_APIENTRY *)(GLenum, GLfloat, GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glMultiTexCoord4fARB");
    tunisGL.tunisMultiTexCoord4fv = (void (KHRONOS_APIENTRY *)(GLenum, const GLfloat *))tunisGLGetProcAddress("glMultiTexCoord4fv");
    tunisGL.tunisMultiTexCoord4fvARB = (void (KHRONOS_APIENTRY *)(GLenum, const GLfloat *))tunisGLGetProcAddress("glMultiTexCoord4fvARB");
    tunisGL.tunisMultiTexCoord4hNV = (void (KHRONOS_APIENTRY *)(GLenum, GLhalfNV, GLhalfNV, GLhalfNV, GLhalfNV))tunisGLGetProcAddress("glMultiTexCoord4hNV");
    tunisGL.tunisMultiTexCoord4hvNV = (void (KHRONOS_APIENTRY *)(GLenum, const GLhalfNV *))tunisGLGetProcAddress("glMultiTexCoord4hvNV");
    tunisGL.tunisMultiTexCoord4i = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLint, GLint, GLint))tunisGLGetProcAddress("glMultiTexCoord4i");
    tunisGL.tunisMultiTexCoord4iARB = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLint, GLint, GLint))tunisGLGetProcAddress("glMultiTexCoord4iARB");
    tunisGL.tunisMultiTexCoord4iv = (void (KHRONOS_APIENTRY *)(GLenum, const GLint *))tunisGLGetProcAddress("glMultiTexCoord4iv");
    tunisGL.tunisMultiTexCoord4ivARB = (void (KHRONOS_APIENTRY *)(GLenum, const GLint *))tunisGLGetProcAddress("glMultiTexCoord4ivARB");
    tunisGL.tunisMultiTexCoord4s = (void (KHRONOS_APIENTRY *)(GLenum, GLshort, GLshort, GLshort, GLshort))tunisGLGetProcAddress("glMultiTexCoord4s");
    tunisGL.tunisMultiTexCoord4sARB = (void (KHRONOS_APIENTRY *)(GLenum, GLshort, GLshort, GLshort, GLshort))tunisGLGetProcAddress("glMultiTexCoord4sARB");
    tunisGL.tunisMultiTexCoord4sv = (void (KHRONOS_APIENTRY *)(GLenum, const GLshort *))tunisGLGetProcAddress("glMultiTexCoord4sv");
    tunisGL.tunisMultiTexCoord4svARB = (void (KHRONOS_APIENTRY *)(GLenum, const GLshort *))tunisGLGetProcAddress("glMultiTexCoord4svARB");
    tunisGL.tunisMultiTexCoord4x = (void (KHRONOS_APIENTRY *)(GLenum, GLfixed, GLfixed, GLfixed, GLfixed))tunisGLGetProcAddress("glMultiTexCoord4x");
    tunisGL.tunisMultiTexCoord4xOES = (void (KHRONOS_APIENTRY *)(GLenum, GLfixed, GLfixed, GLfixed, GLfixed))tunisGLGetProcAddress("glMultiTexCoord4xOES");
    tunisGL.tunisMultiTexCoord4xvOES = (void (KHRONOS_APIENTRY *)(GLenum, const GLfixed *))tunisGLGetProcAddress("glMultiTexCoord4xvOES");
    tunisGL.tunisMultiTexCoordP1ui = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLuint))tunisGLGetProcAddress("glMultiTexCoordP1ui");
    tunisGL.tunisMultiTexCoordP1uiv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const GLuint *))tunisGLGetProcAddress("glMultiTexCoordP1uiv");
    tunisGL.tunisMultiTexCoordP2ui = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLuint))tunisGLGetProcAddress("glMultiTexCoordP2ui");
    tunisGL.tunisMultiTexCoordP2uiv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const GLuint *))tunisGLGetProcAddress("glMultiTexCoordP2uiv");
    tunisGL.tunisMultiTexCoordP3ui = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLuint))tunisGLGetProcAddress("glMultiTexCoordP3ui");
    tunisGL.tunisMultiTexCoordP3uiv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const GLuint *))tunisGLGetProcAddress("glMultiTexCoordP3uiv");
    tunisGL.tunisMultiTexCoordP4ui = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLuint))tunisGLGetProcAddress("glMultiTexCoordP4ui");
    tunisGL.tunisMultiTexCoordP4uiv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const GLuint *))tunisGLGetProcAddress("glMultiTexCoordP4uiv");
    tunisGL.tunisMultiTexCoordPointerEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLenum, GLsizei, const void *))tunisGLGetProcAddress("glMultiTexCoordPointerEXT");
    tunisGL.tunisMultiTexEnvfEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLfloat))tunisGLGetProcAddress("glMultiTexEnvfEXT");
    tunisGL.tunisMultiTexEnvfvEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, const GLfloat *))tunisGLGetProcAddress("glMultiTexEnvfvEXT");
    tunisGL.tunisMultiTexEnviEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLint))tunisGLGetProcAddress("glMultiTexEnviEXT");
    tunisGL.tunisMultiTexEnvivEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, const GLint *))tunisGLGetProcAddress("glMultiTexEnvivEXT");
    tunisGL.tunisMultiTexGendEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLdouble))tunisGLGetProcAddress("glMultiTexGendEXT");
    tunisGL.tunisMultiTexGendvEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, const GLdouble *))tunisGLGetProcAddress("glMultiTexGendvEXT");
    tunisGL.tunisMultiTexGenfEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLfloat))tunisGLGetProcAddress("glMultiTexGenfEXT");
    tunisGL.tunisMultiTexGenfvEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, const GLfloat *))tunisGLGetProcAddress("glMultiTexGenfvEXT");
    tunisGL.tunisMultiTexGeniEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLint))tunisGLGetProcAddress("glMultiTexGeniEXT");
    tunisGL.tunisMultiTexGenivEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, const GLint *))tunisGLGetProcAddress("glMultiTexGenivEXT");
    tunisGL.tunisMultiTexImage1DEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint, GLint, GLsizei, GLint, GLenum, GLenum, const void *))tunisGLGetProcAddress("glMultiTexImage1DEXT");
    tunisGL.tunisMultiTexImage2DEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint, GLint, GLsizei, GLsizei, GLint, GLenum, GLenum, const void *))tunisGLGetProcAddress("glMultiTexImage2DEXT");
    tunisGL.tunisMultiTexImage3DEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint, GLint, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, const void *))tunisGLGetProcAddress("glMultiTexImage3DEXT");
    tunisGL.tunisMultiTexParameterIivEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, const GLint *))tunisGLGetProcAddress("glMultiTexParameterIivEXT");
    tunisGL.tunisMultiTexParameterIuivEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, const GLuint *))tunisGLGetProcAddress("glMultiTexParameterIuivEXT");
    tunisGL.tunisMultiTexParameterfEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLfloat))tunisGLGetProcAddress("glMultiTexParameterfEXT");
    tunisGL.tunisMultiTexParameterfvEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, const GLfloat *))tunisGLGetProcAddress("glMultiTexParameterfvEXT");
    tunisGL.tunisMultiTexParameteriEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLint))tunisGLGetProcAddress("glMultiTexParameteriEXT");
    tunisGL.tunisMultiTexParameterivEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, const GLint *))tunisGLGetProcAddress("glMultiTexParameterivEXT");
    tunisGL.tunisMultiTexRenderbufferEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLuint))tunisGLGetProcAddress("glMultiTexRenderbufferEXT");
    tunisGL.tunisMultiTexSubImage1DEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint, GLint, GLsizei, GLenum, GLenum, const void *))tunisGLGetProcAddress("glMultiTexSubImage1DEXT");
    tunisGL.tunisMultiTexSubImage2DEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, const void *))tunisGLGetProcAddress("glMultiTexSubImage2DEXT");
    tunisGL.tunisMultiTexSubImage3DEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, const void *))tunisGLGetProcAddress("glMultiTexSubImage3DEXT");
    tunisGL.tunisMulticastBarrierNV = (void (KHRONOS_APIENTRY *)(void))tunisGLGetProcAddress("glMulticastBarrierNV");
    tunisGL.tunisMulticastBlitFramebufferNV = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLbitfield, GLenum))tunisGLGetProcAddress("glMulticastBlitFramebufferNV");
    tunisGL.tunisMulticastBufferSubDataNV = (void (KHRONOS_APIENTRY *)(GLbitfield, GLuint, GLintptr, GLsizeiptr, const void *))tunisGLGetProcAddress("glMulticastBufferSubDataNV");
    tunisGL.tunisMulticastCopyBufferSubDataNV = (void (KHRONOS_APIENTRY *)(GLuint, GLbitfield, GLuint, GLuint, GLintptr, GLintptr, GLsizeiptr))tunisGLGetProcAddress("glMulticastCopyBufferSubDataNV");
    tunisGL.tunisMulticastCopyImageSubDataNV = (void (KHRONOS_APIENTRY *)(GLuint, GLbitfield, GLuint, GLenum, GLint, GLint, GLint, GLint, GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei))tunisGLGetProcAddress("glMulticastCopyImageSubDataNV");
    tunisGL.tunisMulticastFramebufferSampleLocationsfvNV = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLuint, GLsizei, const GLfloat *))tunisGLGetProcAddress("glMulticastFramebufferSampleLocationsfvNV");
    tunisGL.tunisMulticastGetQueryObjecti64vNV = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLenum, GLint64 *))tunisGLGetProcAddress("glMulticastGetQueryObjecti64vNV");
    tunisGL.tunisMulticastGetQueryObjectivNV = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLenum, GLint *))tunisGLGetProcAddress("glMulticastGetQueryObjectivNV");
    tunisGL.tunisMulticastGetQueryObjectui64vNV = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLenum, GLuint64 *))tunisGLGetProcAddress("glMulticastGetQueryObjectui64vNV");
    tunisGL.tunisMulticastGetQueryObjectuivNV = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLenum, GLuint *))tunisGLGetProcAddress("glMulticastGetQueryObjectuivNV");
    tunisGL.tunisMulticastWaitSyncNV = (void (KHRONOS_APIENTRY *)(GLuint, GLbitfield))tunisGLGetProcAddress("glMulticastWaitSyncNV");
    tunisGL.tunisNamedBufferAttachMemoryNV = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLuint64))tunisGLGetProcAddress("glNamedBufferAttachMemoryNV");
    tunisGL.tunisNamedBufferData = (void (KHRONOS_APIENTRY *)(GLuint, GLsizeiptr, const void *, GLenum))tunisGLGetProcAddress("glNamedBufferData");
    tunisGL.tunisNamedBufferDataEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLsizeiptr, const void *, GLenum))tunisGLGetProcAddress("glNamedBufferDataEXT");
    tunisGL.tunisNamedBufferPageCommitmentARB = (void (KHRONOS_APIENTRY *)(GLuint, GLintptr, GLsizeiptr, GLboolean))tunisGLGetProcAddress("glNamedBufferPageCommitmentARB");
    tunisGL.tunisNamedBufferPageCommitmentEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLintptr, GLsizeiptr, GLboolean))tunisGLGetProcAddress("glNamedBufferPageCommitmentEXT");
    tunisGL.tunisNamedBufferStorage = (void (KHRONOS_APIENTRY *)(GLuint, GLsizeiptr, const void *, GLbitfield))tunisGLGetProcAddress("glNamedBufferStorage");
    tunisGL.tunisNamedBufferStorageEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLsizeiptr, const void *, GLbitfield))tunisGLGetProcAddress("glNamedBufferStorageEXT");
    tunisGL.tunisNamedBufferStorageExternalEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLintptr, GLsizeiptr, GLeglClientBufferEXT, GLbitfield))tunisGLGetProcAddress("glNamedBufferStorageExternalEXT");
    tunisGL.tunisNamedBufferStorageMemEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLsizeiptr, GLuint, GLuint64))tunisGLGetProcAddress("glNamedBufferStorageMemEXT");
    tunisGL.tunisNamedBufferSubData = (void (KHRONOS_APIENTRY *)(GLuint, GLintptr, GLsizeiptr, const void *))tunisGLGetProcAddress("glNamedBufferSubData");
    tunisGL.tunisNamedBufferSubDataEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLintptr, GLsizeiptr, const void *))tunisGLGetProcAddress("glNamedBufferSubDataEXT");
    tunisGL.tunisNamedCopyBufferSubDataEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLintptr, GLintptr, GLsizeiptr))tunisGLGetProcAddress("glNamedCopyBufferSubDataEXT");
    tunisGL.tunisNamedFramebufferDrawBuffer = (void (KHRONOS_APIENTRY *)(GLuint, GLenum))tunisGLGetProcAddress("glNamedFramebufferDrawBuffer");
    tunisGL.tunisNamedFramebufferDrawBuffers = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, const GLenum *))tunisGLGetProcAddress("glNamedFramebufferDrawBuffers");
    tunisGL.tunisNamedFramebufferParameteri = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint))tunisGLGetProcAddress("glNamedFramebufferParameteri");
    tunisGL.tunisNamedFramebufferParameteriEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint))tunisGLGetProcAddress("glNamedFramebufferParameteriEXT");
    tunisGL.tunisNamedFramebufferReadBuffer = (void (KHRONOS_APIENTRY *)(GLuint, GLenum))tunisGLGetProcAddress("glNamedFramebufferReadBuffer");
    tunisGL.tunisNamedFramebufferRenderbuffer = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLenum, GLuint))tunisGLGetProcAddress("glNamedFramebufferRenderbuffer");
    tunisGL.tunisNamedFramebufferRenderbufferEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLenum, GLuint))tunisGLGetProcAddress("glNamedFramebufferRenderbufferEXT");
    tunisGL.tunisNamedFramebufferSampleLocationsfvARB = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLsizei, const GLfloat *))tunisGLGetProcAddress("glNamedFramebufferSampleLocationsfvARB");
    tunisGL.tunisNamedFramebufferSampleLocationsfvNV = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLsizei, const GLfloat *))tunisGLGetProcAddress("glNamedFramebufferSampleLocationsfvNV");
    tunisGL.tunisNamedFramebufferSamplePositionsfvAMD = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLuint, const GLfloat *))tunisGLGetProcAddress("glNamedFramebufferSamplePositionsfvAMD");
    tunisGL.tunisNamedFramebufferTexture = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLuint, GLint))tunisGLGetProcAddress("glNamedFramebufferTexture");
    tunisGL.tunisNamedFramebufferTexture1DEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLenum, GLuint, GLint))tunisGLGetProcAddress("glNamedFramebufferTexture1DEXT");
    tunisGL.tunisNamedFramebufferTexture2DEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLenum, GLuint, GLint))tunisGLGetProcAddress("glNamedFramebufferTexture2DEXT");
    tunisGL.tunisNamedFramebufferTexture3DEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLenum, GLuint, GLint, GLint))tunisGLGetProcAddress("glNamedFramebufferTexture3DEXT");
    tunisGL.tunisNamedFramebufferTextureEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLuint, GLint))tunisGLGetProcAddress("glNamedFramebufferTextureEXT");
    tunisGL.tunisNamedFramebufferTextureFaceEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLuint, GLint, GLenum))tunisGLGetProcAddress("glNamedFramebufferTextureFaceEXT");
    tunisGL.tunisNamedFramebufferTextureLayer = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLuint, GLint, GLint))tunisGLGetProcAddress("glNamedFramebufferTextureLayer");
    tunisGL.tunisNamedFramebufferTextureLayerEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLuint, GLint, GLint))tunisGLGetProcAddress("glNamedFramebufferTextureLayerEXT");
    tunisGL.tunisNamedProgramLocalParameter4dEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLuint, GLdouble, GLdouble, GLdouble, GLdouble))tunisGLGetProcAddress("glNamedProgramLocalParameter4dEXT");
    tunisGL.tunisNamedProgramLocalParameter4dvEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLuint, const GLdouble *))tunisGLGetProcAddress("glNamedProgramLocalParameter4dvEXT");
    tunisGL.tunisNamedProgramLocalParameter4fEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLuint, GLfloat, GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glNamedProgramLocalParameter4fEXT");
    tunisGL.tunisNamedProgramLocalParameter4fvEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLuint, const GLfloat *))tunisGLGetProcAddress("glNamedProgramLocalParameter4fvEXT");
    tunisGL.tunisNamedProgramLocalParameterI4iEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLuint, GLint, GLint, GLint, GLint))tunisGLGetProcAddress("glNamedProgramLocalParameterI4iEXT");
    tunisGL.tunisNamedProgramLocalParameterI4ivEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLuint, const GLint *))tunisGLGetProcAddress("glNamedProgramLocalParameterI4ivEXT");
    tunisGL.tunisNamedProgramLocalParameterI4uiEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLuint, GLuint, GLuint, GLuint, GLuint))tunisGLGetProcAddress("glNamedProgramLocalParameterI4uiEXT");
    tunisGL.tunisNamedProgramLocalParameterI4uivEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLuint, const GLuint *))tunisGLGetProcAddress("glNamedProgramLocalParameterI4uivEXT");
    tunisGL.tunisNamedProgramLocalParameters4fvEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLuint, GLsizei, const GLfloat *))tunisGLGetProcAddress("glNamedProgramLocalParameters4fvEXT");
    tunisGL.tunisNamedProgramLocalParametersI4ivEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLuint, GLsizei, const GLint *))tunisGLGetProcAddress("glNamedProgramLocalParametersI4ivEXT");
    tunisGL.tunisNamedProgramLocalParametersI4uivEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLuint, GLsizei, const GLuint *))tunisGLGetProcAddress("glNamedProgramLocalParametersI4uivEXT");
    tunisGL.tunisNamedProgramStringEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLenum, GLsizei, const void *))tunisGLGetProcAddress("glNamedProgramStringEXT");
    tunisGL.tunisNamedRenderbufferStorage = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLsizei, GLsizei))tunisGLGetProcAddress("glNamedRenderbufferStorage");
    tunisGL.tunisNamedRenderbufferStorageEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLsizei, GLsizei))tunisGLGetProcAddress("glNamedRenderbufferStorageEXT");
    tunisGL.tunisNamedRenderbufferStorageMultisample = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, GLenum, GLsizei, GLsizei))tunisGLGetProcAddress("glNamedRenderbufferStorageMultisample");
    tunisGL.tunisNamedRenderbufferStorageMultisampleAdvancedAMD = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, GLsizei, GLenum, GLsizei, GLsizei))tunisGLGetProcAddress("glNamedRenderbufferStorageMultisampleAdvancedAMD");
    tunisGL.tunisNamedRenderbufferStorageMultisampleCoverageEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, GLsizei, GLenum, GLsizei, GLsizei))tunisGLGetProcAddress("glNamedRenderbufferStorageMultisampleCoverageEXT");
    tunisGL.tunisNamedRenderbufferStorageMultisampleEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, GLenum, GLsizei, GLsizei))tunisGLGetProcAddress("glNamedRenderbufferStorageMultisampleEXT");
    tunisGL.tunisNamedStringARB = (void (KHRONOS_APIENTRY *)(GLenum, GLint, const GLchar *, GLint, const GLchar *))tunisGLGetProcAddress("glNamedStringARB");
    tunisGL.tunisNewBufferRegion = (GLuint(KHRONOS_APIENTRY *)(GLenum))tunisGLGetProcAddress("glNewBufferRegion");
    tunisGL.tunisNewList = (void (KHRONOS_APIENTRY *)(GLuint, GLenum))tunisGLGetProcAddress("glNewList");
    tunisGL.tunisNewObjectBufferATI = (GLuint(KHRONOS_APIENTRY *)(GLsizei, const void *, GLenum))tunisGLGetProcAddress("glNewObjectBufferATI");
    tunisGL.tunisNormal3b = (void (KHRONOS_APIENTRY *)(GLbyte, GLbyte, GLbyte))tunisGLGetProcAddress("glNormal3b");
    tunisGL.tunisNormal3bv = (void (KHRONOS_APIENTRY *)(const GLbyte *))tunisGLGetProcAddress("glNormal3bv");
    tunisGL.tunisNormal3d = (void (KHRONOS_APIENTRY *)(GLdouble, GLdouble, GLdouble))tunisGLGetProcAddress("glNormal3d");
    tunisGL.tunisNormal3dv = (void (KHRONOS_APIENTRY *)(const GLdouble *))tunisGLGetProcAddress("glNormal3dv");
    tunisGL.tunisNormal3f = (void (KHRONOS_APIENTRY *)(GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glNormal3f");
    tunisGL.tunisNormal3fVertex3fSUN = (void (KHRONOS_APIENTRY *)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glNormal3fVertex3fSUN");
    tunisGL.tunisNormal3fVertex3fvSUN = (void (KHRONOS_APIENTRY *)(const GLfloat *, const GLfloat *))tunisGLGetProcAddress("glNormal3fVertex3fvSUN");
    tunisGL.tunisNormal3fv = (void (KHRONOS_APIENTRY *)(const GLfloat *))tunisGLGetProcAddress("glNormal3fv");
    tunisGL.tunisNormal3hNV = (void (KHRONOS_APIENTRY *)(GLhalfNV, GLhalfNV, GLhalfNV))tunisGLGetProcAddress("glNormal3hNV");
    tunisGL.tunisNormal3hvNV = (void (KHRONOS_APIENTRY *)(const GLhalfNV *))tunisGLGetProcAddress("glNormal3hvNV");
    tunisGL.tunisNormal3i = (void (KHRONOS_APIENTRY *)(GLint, GLint, GLint))tunisGLGetProcAddress("glNormal3i");
    tunisGL.tunisNormal3iv = (void (KHRONOS_APIENTRY *)(const GLint *))tunisGLGetProcAddress("glNormal3iv");
    tunisGL.tunisNormal3s = (void (KHRONOS_APIENTRY *)(GLshort, GLshort, GLshort))tunisGLGetProcAddress("glNormal3s");
    tunisGL.tunisNormal3sv = (void (KHRONOS_APIENTRY *)(const GLshort *))tunisGLGetProcAddress("glNormal3sv");
    tunisGL.tunisNormal3x = (void (KHRONOS_APIENTRY *)(GLfixed, GLfixed, GLfixed))tunisGLGetProcAddress("glNormal3x");
    tunisGL.tunisNormal3xOES = (void (KHRONOS_APIENTRY *)(GLfixed, GLfixed, GLfixed))tunisGLGetProcAddress("glNormal3xOES");
    tunisGL.tunisNormal3xvOES = (void (KHRONOS_APIENTRY *)(const GLfixed *))tunisGLGetProcAddress("glNormal3xvOES");
    tunisGL.tunisNormalFormatNV = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei))tunisGLGetProcAddress("glNormalFormatNV");
    tunisGL.tunisNormalP3ui = (void (KHRONOS_APIENTRY *)(GLenum, GLuint))tunisGLGetProcAddress("glNormalP3ui");
    tunisGL.tunisNormalP3uiv = (void (KHRONOS_APIENTRY *)(GLenum, const GLuint *))tunisGLGetProcAddress("glNormalP3uiv");
    tunisGL.tunisNormalPointer = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, const void *))tunisGLGetProcAddress("glNormalPointer");
    tunisGL.tunisNormalPointerEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLsizei, const void *))tunisGLGetProcAddress("glNormalPointerEXT");
    tunisGL.tunisNormalPointerListIBM = (void (KHRONOS_APIENTRY *)(GLenum, GLint, const void **, GLint))tunisGLGetProcAddress("glNormalPointerListIBM");
    tunisGL.tunisNormalPointervINTEL = (void (KHRONOS_APIENTRY *)(GLenum, const void **))tunisGLGetProcAddress("glNormalPointervINTEL");
    tunisGL.tunisNormalStream3bATI = (void (KHRONOS_APIENTRY *)(GLenum, GLbyte, GLbyte, GLbyte))tunisGLGetProcAddress("glNormalStream3bATI");
    tunisGL.tunisNormalStream3bvATI = (void (KHRONOS_APIENTRY *)(GLenum, const GLbyte *))tunisGLGetProcAddress("glNormalStream3bvATI");
    tunisGL.tunisNormalStream3dATI = (void (KHRONOS_APIENTRY *)(GLenum, GLdouble, GLdouble, GLdouble))tunisGLGetProcAddress("glNormalStream3dATI");
    tunisGL.tunisNormalStream3dvATI = (void (KHRONOS_APIENTRY *)(GLenum, const GLdouble *))tunisGLGetProcAddress("glNormalStream3dvATI");
    tunisGL.tunisNormalStream3fATI = (void (KHRONOS_APIENTRY *)(GLenum, GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glNormalStream3fATI");
    tunisGL.tunisNormalStream3fvATI = (void (KHRONOS_APIENTRY *)(GLenum, const GLfloat *))tunisGLGetProcAddress("glNormalStream3fvATI");
    tunisGL.tunisNormalStream3iATI = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLint, GLint))tunisGLGetProcAddress("glNormalStream3iATI");
    tunisGL.tunisNormalStream3ivATI = (void (KHRONOS_APIENTRY *)(GLenum, const GLint *))tunisGLGetProcAddress("glNormalStream3ivATI");
    tunisGL.tunisNormalStream3sATI = (void (KHRONOS_APIENTRY *)(GLenum, GLshort, GLshort, GLshort))tunisGLGetProcAddress("glNormalStream3sATI");
    tunisGL.tunisNormalStream3svATI = (void (KHRONOS_APIENTRY *)(GLenum, const GLshort *))tunisGLGetProcAddress("glNormalStream3svATI");
    tunisGL.tunisObjectLabel = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLsizei, const GLchar *))tunisGLGetProcAddress("glObjectLabel");
    tunisGL.tunisObjectLabelKHR = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLsizei, const GLchar *))tunisGLGetProcAddress("glObjectLabelKHR");
    tunisGL.tunisObjectPtrLabel = (void (KHRONOS_APIENTRY *)(const void *, GLsizei, const GLchar *))tunisGLGetProcAddress("glObjectPtrLabel");
    tunisGL.tunisObjectPtrLabelKHR = (void (KHRONOS_APIENTRY *)(const void *, GLsizei, const GLchar *))tunisGLGetProcAddress("glObjectPtrLabelKHR");
    tunisGL.tunisObjectPurgeableAPPLE = (GLenum(KHRONOS_APIENTRY *)(GLenum, GLuint, GLenum))tunisGLGetProcAddress("glObjectPurgeableAPPLE");
    tunisGL.tunisObjectUnpurgeableAPPLE = (GLenum(KHRONOS_APIENTRY *)(GLenum, GLuint, GLenum))tunisGLGetProcAddress("glObjectUnpurgeableAPPLE");
    tunisGL.tunisOrtho = (void (KHRONOS_APIENTRY *)(GLdouble, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble))tunisGLGetProcAddress("glOrtho");
    tunisGL.tunisOrthof = (void (KHRONOS_APIENTRY *)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glOrthof");
    tunisGL.tunisOrthofOES = (void (KHRONOS_APIENTRY *)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glOrthofOES");
    tunisGL.tunisOrthox = (void (KHRONOS_APIENTRY *)(GLfixed, GLfixed, GLfixed, GLfixed, GLfixed, GLfixed))tunisGLGetProcAddress("glOrthox");
    tunisGL.tunisOrthoxOES = (void (KHRONOS_APIENTRY *)(GLfixed, GLfixed, GLfixed, GLfixed, GLfixed, GLfixed))tunisGLGetProcAddress("glOrthoxOES");
    tunisGL.tunisPNTrianglesfATI = (void (KHRONOS_APIENTRY *)(GLenum, GLfloat))tunisGLGetProcAddress("glPNTrianglesfATI");
    tunisGL.tunisPNTrianglesiATI = (void (KHRONOS_APIENTRY *)(GLenum, GLint))tunisGLGetProcAddress("glPNTrianglesiATI");
    tunisGL.tunisPassTexCoordATI = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLenum))tunisGLGetProcAddress("glPassTexCoordATI");
    tunisGL.tunisPassThrough = (void (KHRONOS_APIENTRY *)(GLfloat))tunisGLGetProcAddress("glPassThrough");
    tunisGL.tunisPassThroughxOES = (void (KHRONOS_APIENTRY *)(GLfixed))tunisGLGetProcAddress("glPassThroughxOES");
    tunisGL.tunisPatchParameterfv = (void (KHRONOS_APIENTRY *)(GLenum, const GLfloat *))tunisGLGetProcAddress("glPatchParameterfv");
    tunisGL.tunisPatchParameteri = (void (KHRONOS_APIENTRY *)(GLenum, GLint))tunisGLGetProcAddress("glPatchParameteri");
    tunisGL.tunisPatchParameteriEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLint))tunisGLGetProcAddress("glPatchParameteriEXT");
    tunisGL.tunisPatchParameteriOES = (void (KHRONOS_APIENTRY *)(GLenum, GLint))tunisGLGetProcAddress("glPatchParameteriOES");
    tunisGL.tunisPathColorGenNV = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, const GLfloat *))tunisGLGetProcAddress("glPathColorGenNV");
    tunisGL.tunisPathCommandsNV = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, const GLubyte *, GLsizei, GLenum, const void *))tunisGLGetProcAddress("glPathCommandsNV");
    tunisGL.tunisPathCoordsNV = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, GLenum, const void *))tunisGLGetProcAddress("glPathCoordsNV");
    tunisGL.tunisPathCoverDepthFuncNV = (void (KHRONOS_APIENTRY *)(GLenum))tunisGLGetProcAddress("glPathCoverDepthFuncNV");
    tunisGL.tunisPathDashArrayNV = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, const GLfloat *))tunisGLGetProcAddress("glPathDashArrayNV");
    tunisGL.tunisPathFogGenNV = (void (KHRONOS_APIENTRY *)(GLenum))tunisGLGetProcAddress("glPathFogGenNV");
    tunisGL.tunisPathGlyphIndexArrayNV = (GLenum(KHRONOS_APIENTRY *)(GLuint, GLenum, const void *, GLbitfield, GLuint, GLsizei, GLuint, GLfloat))tunisGLGetProcAddress("glPathGlyphIndexArrayNV");
    tunisGL.tunisPathGlyphIndexRangeNV = (GLenum(KHRONOS_APIENTRY *)(GLenum, const void *, GLbitfield, GLuint, GLfloat, GLuint[2]))tunisGLGetProcAddress("glPathGlyphIndexRangeNV");
    tunisGL.tunisPathGlyphRangeNV = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, const void *, GLbitfield, GLuint, GLsizei, GLenum, GLuint, GLfloat))tunisGLGetProcAddress("glPathGlyphRangeNV");
    tunisGL.tunisPathGlyphsNV = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, const void *, GLbitfield, GLsizei, GLenum, const void *, GLenum, GLuint, GLfloat))tunisGLGetProcAddress("glPathGlyphsNV");
    tunisGL.tunisPathMemoryGlyphIndexArrayNV = (GLenum(KHRONOS_APIENTRY *)(GLuint, GLenum, GLsizeiptr, const void *, GLsizei, GLuint, GLsizei, GLuint, GLfloat))tunisGLGetProcAddress("glPathMemoryGlyphIndexArrayNV");
    tunisGL.tunisPathParameterfNV = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLfloat))tunisGLGetProcAddress("glPathParameterfNV");
    tunisGL.tunisPathParameterfvNV = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, const GLfloat *))tunisGLGetProcAddress("glPathParameterfvNV");
    tunisGL.tunisPathParameteriNV = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint))tunisGLGetProcAddress("glPathParameteriNV");
    tunisGL.tunisPathParameterivNV = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, const GLint *))tunisGLGetProcAddress("glPathParameterivNV");
    tunisGL.tunisPathStencilDepthOffsetNV = (void (KHRONOS_APIENTRY *)(GLfloat, GLfloat))tunisGLGetProcAddress("glPathStencilDepthOffsetNV");
    tunisGL.tunisPathStencilFuncNV = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLuint))tunisGLGetProcAddress("glPathStencilFuncNV");
    tunisGL.tunisPathStringNV = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLsizei, const void *))tunisGLGetProcAddress("glPathStringNV");
    tunisGL.tunisPathSubCommandsNV = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, GLsizei, GLsizei, const GLubyte *, GLsizei, GLenum, const void *))tunisGLGetProcAddress("glPathSubCommandsNV");
    tunisGL.tunisPathSubCoordsNV = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, GLsizei, GLenum, const void *))tunisGLGetProcAddress("glPathSubCoordsNV");
    tunisGL.tunisPathTexGenNV = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint, const GLfloat *))tunisGLGetProcAddress("glPathTexGenNV");
    tunisGL.tunisPauseTransformFeedback = (void (KHRONOS_APIENTRY *)(void))tunisGLGetProcAddress("glPauseTransformFeedback");
    tunisGL.tunisPauseTransformFeedbackNV = (void (KHRONOS_APIENTRY *)(void))tunisGLGetProcAddress("glPauseTransformFeedbackNV");
    tunisGL.tunisPixelDataRangeNV = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, const void *))tunisGLGetProcAddress("glPixelDataRangeNV");
    tunisGL.tunisPixelMapfv = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, const GLfloat *))tunisGLGetProcAddress("glPixelMapfv");
    tunisGL.tunisPixelMapuiv = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, const GLuint *))tunisGLGetProcAddress("glPixelMapuiv");
    tunisGL.tunisPixelMapusv = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, const GLushort *))tunisGLGetProcAddress("glPixelMapusv");
    tunisGL.tunisPixelMapx = (void (KHRONOS_APIENTRY *)(GLenum, GLint, const GLfixed *))tunisGLGetProcAddress("glPixelMapx");
    tunisGL.tunisPixelStoref = (void (KHRONOS_APIENTRY *)(GLenum, GLfloat))tunisGLGetProcAddress("glPixelStoref");
    tunisGL.tunisPixelStorei = (void (KHRONOS_APIENTRY *)(GLenum, GLint))tunisGLGetProcAddress("glPixelStorei");
    tunisGL.tunisPixelStorex = (void (KHRONOS_APIENTRY *)(GLenum, GLfixed))tunisGLGetProcAddress("glPixelStorex");
    tunisGL.tunisPixelTexGenParameterfSGIS = (void (KHRONOS_APIENTRY *)(GLenum, GLfloat))tunisGLGetProcAddress("glPixelTexGenParameterfSGIS");
    tunisGL.tunisPixelTexGenParameterfvSGIS = (void (KHRONOS_APIENTRY *)(GLenum, const GLfloat *))tunisGLGetProcAddress("glPixelTexGenParameterfvSGIS");
    tunisGL.tunisPixelTexGenParameteriSGIS = (void (KHRONOS_APIENTRY *)(GLenum, GLint))tunisGLGetProcAddress("glPixelTexGenParameteriSGIS");
    tunisGL.tunisPixelTexGenParameterivSGIS = (void (KHRONOS_APIENTRY *)(GLenum, const GLint *))tunisGLGetProcAddress("glPixelTexGenParameterivSGIS");
    tunisGL.tunisPixelTexGenSGIX = (void (KHRONOS_APIENTRY *)(GLenum))tunisGLGetProcAddress("glPixelTexGenSGIX");
    tunisGL.tunisPixelTransferf = (void (KHRONOS_APIENTRY *)(GLenum, GLfloat))tunisGLGetProcAddress("glPixelTransferf");
    tunisGL.tunisPixelTransferi = (void (KHRONOS_APIENTRY *)(GLenum, GLint))tunisGLGetProcAddress("glPixelTransferi");
    tunisGL.tunisPixelTransferxOES = (void (KHRONOS_APIENTRY *)(GLenum, GLfixed))tunisGLGetProcAddress("glPixelTransferxOES");
    tunisGL.tunisPixelTransformParameterfEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfloat))tunisGLGetProcAddress("glPixelTransformParameterfEXT");
    tunisGL.tunisPixelTransformParameterfvEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const GLfloat *))tunisGLGetProcAddress("glPixelTransformParameterfvEXT");
    tunisGL.tunisPixelTransformParameteriEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint))tunisGLGetProcAddress("glPixelTransformParameteriEXT");
    tunisGL.tunisPixelTransformParameterivEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const GLint *))tunisGLGetProcAddress("glPixelTransformParameterivEXT");
    tunisGL.tunisPixelZoom = (void (KHRONOS_APIENTRY *)(GLfloat, GLfloat))tunisGLGetProcAddress("glPixelZoom");
    tunisGL.tunisPixelZoomxOES = (void (KHRONOS_APIENTRY *)(GLfixed, GLfixed))tunisGLGetProcAddress("glPixelZoomxOES");
    tunisGL.tunisPointAlongPathNV = (GLboolean(KHRONOS_APIENTRY *)(GLuint, GLsizei, GLsizei, GLfloat, GLfloat *, GLfloat *, GLfloat *, GLfloat *))tunisGLGetProcAddress("glPointAlongPathNV");
    tunisGL.tunisPointParameterf = (void (KHRONOS_APIENTRY *)(GLenum, GLfloat))tunisGLGetProcAddress("glPointParameterf");
    tunisGL.tunisPointParameterfARB = (void (KHRONOS_APIENTRY *)(GLenum, GLfloat))tunisGLGetProcAddress("glPointParameterfARB");
    tunisGL.tunisPointParameterfEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLfloat))tunisGLGetProcAddress("glPointParameterfEXT");
    tunisGL.tunisPointParameterfSGIS = (void (KHRONOS_APIENTRY *)(GLenum, GLfloat))tunisGLGetProcAddress("glPointParameterfSGIS");
    tunisGL.tunisPointParameterfv = (void (KHRONOS_APIENTRY *)(GLenum, const GLfloat *))tunisGLGetProcAddress("glPointParameterfv");
    tunisGL.tunisPointParameterfvARB = (void (KHRONOS_APIENTRY *)(GLenum, const GLfloat *))tunisGLGetProcAddress("glPointParameterfvARB");
    tunisGL.tunisPointParameterfvEXT = (void (KHRONOS_APIENTRY *)(GLenum, const GLfloat *))tunisGLGetProcAddress("glPointParameterfvEXT");
    tunisGL.tunisPointParameterfvSGIS = (void (KHRONOS_APIENTRY *)(GLenum, const GLfloat *))tunisGLGetProcAddress("glPointParameterfvSGIS");
    tunisGL.tunisPointParameteri = (void (KHRONOS_APIENTRY *)(GLenum, GLint))tunisGLGetProcAddress("glPointParameteri");
    tunisGL.tunisPointParameteriNV = (void (KHRONOS_APIENTRY *)(GLenum, GLint))tunisGLGetProcAddress("glPointParameteriNV");
    tunisGL.tunisPointParameteriv = (void (KHRONOS_APIENTRY *)(GLenum, const GLint *))tunisGLGetProcAddress("glPointParameteriv");
    tunisGL.tunisPointParameterivNV = (void (KHRONOS_APIENTRY *)(GLenum, const GLint *))tunisGLGetProcAddress("glPointParameterivNV");
    tunisGL.tunisPointParameterx = (void (KHRONOS_APIENTRY *)(GLenum, GLfixed))tunisGLGetProcAddress("glPointParameterx");
    tunisGL.tunisPointParameterxOES = (void (KHRONOS_APIENTRY *)(GLenum, GLfixed))tunisGLGetProcAddress("glPointParameterxOES");
    tunisGL.tunisPointParameterxv = (void (KHRONOS_APIENTRY *)(GLenum, const GLfixed *))tunisGLGetProcAddress("glPointParameterxv");
    tunisGL.tunisPointParameterxvOES = (void (KHRONOS_APIENTRY *)(GLenum, const GLfixed *))tunisGLGetProcAddress("glPointParameterxvOES");
    tunisGL.tunisPointSize = (void (KHRONOS_APIENTRY *)(GLfloat))tunisGLGetProcAddress("glPointSize");
    tunisGL.tunisPointSizePointerOES = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, const void *))tunisGLGetProcAddress("glPointSizePointerOES");
    tunisGL.tunisPointSizex = (void (KHRONOS_APIENTRY *)(GLfixed))tunisGLGetProcAddress("glPointSizex");
    tunisGL.tunisPointSizexOES = (void (KHRONOS_APIENTRY *)(GLfixed))tunisGLGetProcAddress("glPointSizexOES");
    tunisGL.tunisPollAsyncSGIX = (GLint(KHRONOS_APIENTRY *)(GLuint *))tunisGLGetProcAddress("glPollAsyncSGIX");
    tunisGL.tunisPollInstrumentsSGIX = (GLint(KHRONOS_APIENTRY *)(GLint *))tunisGLGetProcAddress("glPollInstrumentsSGIX");
    tunisGL.tunisPolygonMode = (void (KHRONOS_APIENTRY *)(GLenum, GLenum))tunisGLGetProcAddress("glPolygonMode");
    tunisGL.tunisPolygonModeNV = (void (KHRONOS_APIENTRY *)(GLenum, GLenum))tunisGLGetProcAddress("glPolygonModeNV");
    tunisGL.tunisPolygonOffset = (void (KHRONOS_APIENTRY *)(GLfloat, GLfloat))tunisGLGetProcAddress("glPolygonOffset");
    tunisGL.tunisPolygonOffsetClamp = (void (KHRONOS_APIENTRY *)(GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glPolygonOffsetClamp");
    tunisGL.tunisPolygonOffsetClampEXT = (void (KHRONOS_APIENTRY *)(GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glPolygonOffsetClampEXT");
    tunisGL.tunisPolygonOffsetEXT = (void (KHRONOS_APIENTRY *)(GLfloat, GLfloat))tunisGLGetProcAddress("glPolygonOffsetEXT");
    tunisGL.tunisPolygonOffsetx = (void (KHRONOS_APIENTRY *)(GLfixed, GLfixed))tunisGLGetProcAddress("glPolygonOffsetx");
    tunisGL.tunisPolygonOffsetxOES = (void (KHRONOS_APIENTRY *)(GLfixed, GLfixed))tunisGLGetProcAddress("glPolygonOffsetxOES");
    tunisGL.tunisPolygonStipple = (void (KHRONOS_APIENTRY *)(const GLubyte *))tunisGLGetProcAddress("glPolygonStipple");
    tunisGL.tunisPopAttrib = (void (KHRONOS_APIENTRY *)(void))tunisGLGetProcAddress("glPopAttrib");
    tunisGL.tunisPopClientAttrib = (void (KHRONOS_APIENTRY *)(void))tunisGLGetProcAddress("glPopClientAttrib");
    tunisGL.tunisPopDebugGroup = (void (KHRONOS_APIENTRY *)(void))tunisGLGetProcAddress("glPopDebugGroup");
    tunisGL.tunisPopDebugGroupKHR = (void (KHRONOS_APIENTRY *)(void))tunisGLGetProcAddress("glPopDebugGroupKHR");
    tunisGL.tunisPopGroupMarkerEXT = (void (KHRONOS_APIENTRY *)(void))tunisGLGetProcAddress("glPopGroupMarkerEXT");
    tunisGL.tunisPopMatrix = (void (KHRONOS_APIENTRY *)(void))tunisGLGetProcAddress("glPopMatrix");
    tunisGL.tunisPopName = (void (KHRONOS_APIENTRY *)(void))tunisGLGetProcAddress("glPopName");
    tunisGL.tunisPresentFrameDualFillNV = (void (KHRONOS_APIENTRY *)(GLuint, GLuint64EXT, GLuint, GLuint, GLenum, GLenum, GLuint, GLenum, GLuint, GLenum, GLuint, GLenum, GLuint))tunisGLGetProcAddress("glPresentFrameDualFillNV");
    tunisGL.tunisPresentFrameKeyedNV = (void (KHRONOS_APIENTRY *)(GLuint, GLuint64EXT, GLuint, GLuint, GLenum, GLenum, GLuint, GLuint, GLenum, GLuint, GLuint))tunisGLGetProcAddress("glPresentFrameKeyedNV");
    tunisGL.tunisPrimitiveBoundingBox = (void (KHRONOS_APIENTRY *)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glPrimitiveBoundingBox");
    tunisGL.tunisPrimitiveBoundingBoxARB = (void (KHRONOS_APIENTRY *)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glPrimitiveBoundingBoxARB");
    tunisGL.tunisPrimitiveBoundingBoxEXT = (void (KHRONOS_APIENTRY *)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glPrimitiveBoundingBoxEXT");
    tunisGL.tunisPrimitiveBoundingBoxOES = (void (KHRONOS_APIENTRY *)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glPrimitiveBoundingBoxOES");
    tunisGL.tunisPrimitiveRestartIndex = (void (KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glPrimitiveRestartIndex");
    tunisGL.tunisPrimitiveRestartIndexNV = (void (KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glPrimitiveRestartIndexNV");
    tunisGL.tunisPrimitiveRestartNV = (void (KHRONOS_APIENTRY *)(void))tunisGLGetProcAddress("glPrimitiveRestartNV");
    tunisGL.tunisPrioritizeTextures = (void (KHRONOS_APIENTRY *)(GLsizei, const GLuint *, const GLfloat *))tunisGLGetProcAddress("glPrioritizeTextures");
    tunisGL.tunisPrioritizeTexturesEXT = (void (KHRONOS_APIENTRY *)(GLsizei, const GLuint *, const GLclampf *))tunisGLGetProcAddress("glPrioritizeTexturesEXT");
    tunisGL.tunisPrioritizeTexturesxOES = (void (KHRONOS_APIENTRY *)(GLsizei, const GLuint *, const GLfixed *))tunisGLGetProcAddress("glPrioritizeTexturesxOES");
    tunisGL.tunisProgramBinary = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, const void *, GLsizei))tunisGLGetProcAddress("glProgramBinary");
    tunisGL.tunisProgramBinaryOES = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, const void *, GLint))tunisGLGetProcAddress("glProgramBinaryOES");
    tunisGL.tunisProgramBufferParametersIivNV = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLuint, GLsizei, const GLint *))tunisGLGetProcAddress("glProgramBufferParametersIivNV");
    tunisGL.tunisProgramBufferParametersIuivNV = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLuint, GLsizei, const GLuint *))tunisGLGetProcAddress("glProgramBufferParametersIuivNV");
    tunisGL.tunisProgramBufferParametersfvNV = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLuint, GLsizei, const GLfloat *))tunisGLGetProcAddress("glProgramBufferParametersfvNV");
    tunisGL.tunisProgramEnvParameter4dARB = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLdouble, GLdouble, GLdouble, GLdouble))tunisGLGetProcAddress("glProgramEnvParameter4dARB");
    tunisGL.tunisProgramEnvParameter4dvARB = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, const GLdouble *))tunisGLGetProcAddress("glProgramEnvParameter4dvARB");
    tunisGL.tunisProgramEnvParameter4fARB = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLfloat, GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glProgramEnvParameter4fARB");
    tunisGL.tunisProgramEnvParameter4fvARB = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, const GLfloat *))tunisGLGetProcAddress("glProgramEnvParameter4fvARB");
    tunisGL.tunisProgramEnvParameterI4iNV = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLint, GLint, GLint, GLint))tunisGLGetProcAddress("glProgramEnvParameterI4iNV");
    tunisGL.tunisProgramEnvParameterI4ivNV = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, const GLint *))tunisGLGetProcAddress("glProgramEnvParameterI4ivNV");
    tunisGL.tunisProgramEnvParameterI4uiNV = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLuint, GLuint, GLuint, GLuint))tunisGLGetProcAddress("glProgramEnvParameterI4uiNV");
    tunisGL.tunisProgramEnvParameterI4uivNV = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, const GLuint *))tunisGLGetProcAddress("glProgramEnvParameterI4uivNV");
    tunisGL.tunisProgramEnvParameters4fvEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLsizei, const GLfloat *))tunisGLGetProcAddress("glProgramEnvParameters4fvEXT");
    tunisGL.tunisProgramEnvParametersI4ivNV = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLsizei, const GLint *))tunisGLGetProcAddress("glProgramEnvParametersI4ivNV");
    tunisGL.tunisProgramEnvParametersI4uivNV = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLsizei, const GLuint *))tunisGLGetProcAddress("glProgramEnvParametersI4uivNV");
    tunisGL.tunisProgramLocalParameter4dARB = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLdouble, GLdouble, GLdouble, GLdouble))tunisGLGetProcAddress("glProgramLocalParameter4dARB");
    tunisGL.tunisProgramLocalParameter4dvARB = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, const GLdouble *))tunisGLGetProcAddress("glProgramLocalParameter4dvARB");
    tunisGL.tunisProgramLocalParameter4fARB = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLfloat, GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glProgramLocalParameter4fARB");
    tunisGL.tunisProgramLocalParameter4fvARB = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, const GLfloat *))tunisGLGetProcAddress("glProgramLocalParameter4fvARB");
    tunisGL.tunisProgramLocalParameterI4iNV = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLint, GLint, GLint, GLint))tunisGLGetProcAddress("glProgramLocalParameterI4iNV");
    tunisGL.tunisProgramLocalParameterI4ivNV = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, const GLint *))tunisGLGetProcAddress("glProgramLocalParameterI4ivNV");
    tunisGL.tunisProgramLocalParameterI4uiNV = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLuint, GLuint, GLuint, GLuint))tunisGLGetProcAddress("glProgramLocalParameterI4uiNV");
    tunisGL.tunisProgramLocalParameterI4uivNV = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, const GLuint *))tunisGLGetProcAddress("glProgramLocalParameterI4uivNV");
    tunisGL.tunisProgramLocalParameters4fvEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLsizei, const GLfloat *))tunisGLGetProcAddress("glProgramLocalParameters4fvEXT");
    tunisGL.tunisProgramLocalParametersI4ivNV = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLsizei, const GLint *))tunisGLGetProcAddress("glProgramLocalParametersI4ivNV");
    tunisGL.tunisProgramLocalParametersI4uivNV = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLsizei, const GLuint *))tunisGLGetProcAddress("glProgramLocalParametersI4uivNV");
    tunisGL.tunisProgramNamedParameter4dNV = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, const GLubyte *, GLdouble, GLdouble, GLdouble, GLdouble))tunisGLGetProcAddress("glProgramNamedParameter4dNV");
    tunisGL.tunisProgramNamedParameter4dvNV = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, const GLubyte *, const GLdouble *))tunisGLGetProcAddress("glProgramNamedParameter4dvNV");
    tunisGL.tunisProgramNamedParameter4fNV = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, const GLubyte *, GLfloat, GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glProgramNamedParameter4fNV");
    tunisGL.tunisProgramNamedParameter4fvNV = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, const GLubyte *, const GLfloat *))tunisGLGetProcAddress("glProgramNamedParameter4fvNV");
    tunisGL.tunisProgramParameter4dNV = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLdouble, GLdouble, GLdouble, GLdouble))tunisGLGetProcAddress("glProgramParameter4dNV");
    tunisGL.tunisProgramParameter4dvNV = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, const GLdouble *))tunisGLGetProcAddress("glProgramParameter4dvNV");
    tunisGL.tunisProgramParameter4fNV = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLfloat, GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glProgramParameter4fNV");
    tunisGL.tunisProgramParameter4fvNV = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, const GLfloat *))tunisGLGetProcAddress("glProgramParameter4fvNV");
    tunisGL.tunisProgramParameteri = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint))tunisGLGetProcAddress("glProgramParameteri");
    tunisGL.tunisProgramParameteriARB = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint))tunisGLGetProcAddress("glProgramParameteriARB");
    tunisGL.tunisProgramParameteriEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint))tunisGLGetProcAddress("glProgramParameteriEXT");
    tunisGL.tunisProgramParameters4dvNV = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLsizei, const GLdouble *))tunisGLGetProcAddress("glProgramParameters4dvNV");
    tunisGL.tunisProgramParameters4fvNV = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLsizei, const GLfloat *))tunisGLGetProcAddress("glProgramParameters4fvNV");
    tunisGL.tunisProgramPathFragmentInputGenNV = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLenum, GLint, const GLfloat *))tunisGLGetProcAddress("glProgramPathFragmentInputGenNV");
    tunisGL.tunisProgramStringARB = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLsizei, const void *))tunisGLGetProcAddress("glProgramStringARB");
    tunisGL.tunisProgramSubroutineParametersuivNV = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, const GLuint *))tunisGLGetProcAddress("glProgramSubroutineParametersuivNV");
    tunisGL.tunisProgramUniform1d = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLdouble))tunisGLGetProcAddress("glProgramUniform1d");
    tunisGL.tunisProgramUniform1dEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLdouble))tunisGLGetProcAddress("glProgramUniform1dEXT");
    tunisGL.tunisProgramUniform1dv = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, const GLdouble *))tunisGLGetProcAddress("glProgramUniform1dv");
    tunisGL.tunisProgramUniform1dvEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, const GLdouble *))tunisGLGetProcAddress("glProgramUniform1dvEXT");
    tunisGL.tunisProgramUniform1f = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLfloat))tunisGLGetProcAddress("glProgramUniform1f");
    tunisGL.tunisProgramUniform1fEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLfloat))tunisGLGetProcAddress("glProgramUniform1fEXT");
    tunisGL.tunisProgramUniform1fv = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, const GLfloat *))tunisGLGetProcAddress("glProgramUniform1fv");
    tunisGL.tunisProgramUniform1fvEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, const GLfloat *))tunisGLGetProcAddress("glProgramUniform1fvEXT");
    tunisGL.tunisProgramUniform1i = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLint))tunisGLGetProcAddress("glProgramUniform1i");
    tunisGL.tunisProgramUniform1i64ARB = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLint64))tunisGLGetProcAddress("glProgramUniform1i64ARB");
    tunisGL.tunisProgramUniform1i64NV = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLint64EXT))tunisGLGetProcAddress("glProgramUniform1i64NV");
    tunisGL.tunisProgramUniform1i64vARB = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, const GLint64 *))tunisGLGetProcAddress("glProgramUniform1i64vARB");
    tunisGL.tunisProgramUniform1i64vNV = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, const GLint64EXT *))tunisGLGetProcAddress("glProgramUniform1i64vNV");
    tunisGL.tunisProgramUniform1iEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLint))tunisGLGetProcAddress("glProgramUniform1iEXT");
    tunisGL.tunisProgramUniform1iv = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, const GLint *))tunisGLGetProcAddress("glProgramUniform1iv");
    tunisGL.tunisProgramUniform1ivEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, const GLint *))tunisGLGetProcAddress("glProgramUniform1ivEXT");
    tunisGL.tunisProgramUniform1ui = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLuint))tunisGLGetProcAddress("glProgramUniform1ui");
    tunisGL.tunisProgramUniform1ui64ARB = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLuint64))tunisGLGetProcAddress("glProgramUniform1ui64ARB");
    tunisGL.tunisProgramUniform1ui64NV = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLuint64EXT))tunisGLGetProcAddress("glProgramUniform1ui64NV");
    tunisGL.tunisProgramUniform1ui64vARB = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, const GLuint64 *))tunisGLGetProcAddress("glProgramUniform1ui64vARB");
    tunisGL.tunisProgramUniform1ui64vNV = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, const GLuint64EXT *))tunisGLGetProcAddress("glProgramUniform1ui64vNV");
    tunisGL.tunisProgramUniform1uiEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLuint))tunisGLGetProcAddress("glProgramUniform1uiEXT");
    tunisGL.tunisProgramUniform1uiv = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, const GLuint *))tunisGLGetProcAddress("glProgramUniform1uiv");
    tunisGL.tunisProgramUniform1uivEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, const GLuint *))tunisGLGetProcAddress("glProgramUniform1uivEXT");
    tunisGL.tunisProgramUniform2d = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLdouble, GLdouble))tunisGLGetProcAddress("glProgramUniform2d");
    tunisGL.tunisProgramUniform2dEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLdouble, GLdouble))tunisGLGetProcAddress("glProgramUniform2dEXT");
    tunisGL.tunisProgramUniform2dv = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, const GLdouble *))tunisGLGetProcAddress("glProgramUniform2dv");
    tunisGL.tunisProgramUniform2dvEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, const GLdouble *))tunisGLGetProcAddress("glProgramUniform2dvEXT");
    tunisGL.tunisProgramUniform2f = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLfloat, GLfloat))tunisGLGetProcAddress("glProgramUniform2f");
    tunisGL.tunisProgramUniform2fEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLfloat, GLfloat))tunisGLGetProcAddress("glProgramUniform2fEXT");
    tunisGL.tunisProgramUniform2fv = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, const GLfloat *))tunisGLGetProcAddress("glProgramUniform2fv");
    tunisGL.tunisProgramUniform2fvEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, const GLfloat *))tunisGLGetProcAddress("glProgramUniform2fvEXT");
    tunisGL.tunisProgramUniform2i = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLint, GLint))tunisGLGetProcAddress("glProgramUniform2i");
    tunisGL.tunisProgramUniform2i64ARB = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLint64, GLint64))tunisGLGetProcAddress("glProgramUniform2i64ARB");
    tunisGL.tunisProgramUniform2i64NV = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLint64EXT, GLint64EXT))tunisGLGetProcAddress("glProgramUniform2i64NV");
    tunisGL.tunisProgramUniform2i64vARB = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, const GLint64 *))tunisGLGetProcAddress("glProgramUniform2i64vARB");
    tunisGL.tunisProgramUniform2i64vNV = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, const GLint64EXT *))tunisGLGetProcAddress("glProgramUniform2i64vNV");
    tunisGL.tunisProgramUniform2iEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLint, GLint))tunisGLGetProcAddress("glProgramUniform2iEXT");
    tunisGL.tunisProgramUniform2iv = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, const GLint *))tunisGLGetProcAddress("glProgramUniform2iv");
    tunisGL.tunisProgramUniform2ivEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, const GLint *))tunisGLGetProcAddress("glProgramUniform2ivEXT");
    tunisGL.tunisProgramUniform2ui = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLuint, GLuint))tunisGLGetProcAddress("glProgramUniform2ui");
    tunisGL.tunisProgramUniform2ui64ARB = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLuint64, GLuint64))tunisGLGetProcAddress("glProgramUniform2ui64ARB");
    tunisGL.tunisProgramUniform2ui64NV = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLuint64EXT, GLuint64EXT))tunisGLGetProcAddress("glProgramUniform2ui64NV");
    tunisGL.tunisProgramUniform2ui64vARB = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, const GLuint64 *))tunisGLGetProcAddress("glProgramUniform2ui64vARB");
    tunisGL.tunisProgramUniform2ui64vNV = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, const GLuint64EXT *))tunisGLGetProcAddress("glProgramUniform2ui64vNV");
    tunisGL.tunisProgramUniform2uiEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLuint, GLuint))tunisGLGetProcAddress("glProgramUniform2uiEXT");
    tunisGL.tunisProgramUniform2uiv = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, const GLuint *))tunisGLGetProcAddress("glProgramUniform2uiv");
    tunisGL.tunisProgramUniform2uivEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, const GLuint *))tunisGLGetProcAddress("glProgramUniform2uivEXT");
    tunisGL.tunisProgramUniform3d = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLdouble, GLdouble, GLdouble))tunisGLGetProcAddress("glProgramUniform3d");
    tunisGL.tunisProgramUniform3dEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLdouble, GLdouble, GLdouble))tunisGLGetProcAddress("glProgramUniform3dEXT");
    tunisGL.tunisProgramUniform3dv = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, const GLdouble *))tunisGLGetProcAddress("glProgramUniform3dv");
    tunisGL.tunisProgramUniform3dvEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, const GLdouble *))tunisGLGetProcAddress("glProgramUniform3dvEXT");
    tunisGL.tunisProgramUniform3f = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glProgramUniform3f");
    tunisGL.tunisProgramUniform3fEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glProgramUniform3fEXT");
    tunisGL.tunisProgramUniform3fv = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, const GLfloat *))tunisGLGetProcAddress("glProgramUniform3fv");
    tunisGL.tunisProgramUniform3fvEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, const GLfloat *))tunisGLGetProcAddress("glProgramUniform3fvEXT");
    tunisGL.tunisProgramUniform3i = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLint, GLint, GLint))tunisGLGetProcAddress("glProgramUniform3i");
    tunisGL.tunisProgramUniform3i64ARB = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLint64, GLint64, GLint64))tunisGLGetProcAddress("glProgramUniform3i64ARB");
    tunisGL.tunisProgramUniform3i64NV = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLint64EXT, GLint64EXT, GLint64EXT))tunisGLGetProcAddress("glProgramUniform3i64NV");
    tunisGL.tunisProgramUniform3i64vARB = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, const GLint64 *))tunisGLGetProcAddress("glProgramUniform3i64vARB");
    tunisGL.tunisProgramUniform3i64vNV = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, const GLint64EXT *))tunisGLGetProcAddress("glProgramUniform3i64vNV");
    tunisGL.tunisProgramUniform3iEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLint, GLint, GLint))tunisGLGetProcAddress("glProgramUniform3iEXT");
    tunisGL.tunisProgramUniform3iv = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, const GLint *))tunisGLGetProcAddress("glProgramUniform3iv");
    tunisGL.tunisProgramUniform3ivEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, const GLint *))tunisGLGetProcAddress("glProgramUniform3ivEXT");
    tunisGL.tunisProgramUniform3ui = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLuint, GLuint, GLuint))tunisGLGetProcAddress("glProgramUniform3ui");
    tunisGL.tunisProgramUniform3ui64ARB = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLuint64, GLuint64, GLuint64))tunisGLGetProcAddress("glProgramUniform3ui64ARB");
    tunisGL.tunisProgramUniform3ui64NV = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLuint64EXT, GLuint64EXT, GLuint64EXT))tunisGLGetProcAddress("glProgramUniform3ui64NV");
    tunisGL.tunisProgramUniform3ui64vARB = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, const GLuint64 *))tunisGLGetProcAddress("glProgramUniform3ui64vARB");
    tunisGL.tunisProgramUniform3ui64vNV = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, const GLuint64EXT *))tunisGLGetProcAddress("glProgramUniform3ui64vNV");
    tunisGL.tunisProgramUniform3uiEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLuint, GLuint, GLuint))tunisGLGetProcAddress("glProgramUniform3uiEXT");
    tunisGL.tunisProgramUniform3uiv = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, const GLuint *))tunisGLGetProcAddress("glProgramUniform3uiv");
    tunisGL.tunisProgramUniform3uivEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, const GLuint *))tunisGLGetProcAddress("glProgramUniform3uivEXT");
    tunisGL.tunisProgramUniform4d = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLdouble, GLdouble, GLdouble, GLdouble))tunisGLGetProcAddress("glProgramUniform4d");
    tunisGL.tunisProgramUniform4dEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLdouble, GLdouble, GLdouble, GLdouble))tunisGLGetProcAddress("glProgramUniform4dEXT");
    tunisGL.tunisProgramUniform4dv = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, const GLdouble *))tunisGLGetProcAddress("glProgramUniform4dv");
    tunisGL.tunisProgramUniform4dvEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, const GLdouble *))tunisGLGetProcAddress("glProgramUniform4dvEXT");
    tunisGL.tunisProgramUniform4f = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLfloat, GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glProgramUniform4f");
    tunisGL.tunisProgramUniform4fEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLfloat, GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glProgramUniform4fEXT");
    tunisGL.tunisProgramUniform4fv = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, const GLfloat *))tunisGLGetProcAddress("glProgramUniform4fv");
    tunisGL.tunisProgramUniform4fvEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, const GLfloat *))tunisGLGetProcAddress("glProgramUniform4fvEXT");
    tunisGL.tunisProgramUniform4i = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLint, GLint, GLint, GLint))tunisGLGetProcAddress("glProgramUniform4i");
    tunisGL.tunisProgramUniform4i64ARB = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLint64, GLint64, GLint64, GLint64))tunisGLGetProcAddress("glProgramUniform4i64ARB");
    tunisGL.tunisProgramUniform4i64NV = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLint64EXT, GLint64EXT, GLint64EXT, GLint64EXT))tunisGLGetProcAddress("glProgramUniform4i64NV");
    tunisGL.tunisProgramUniform4i64vARB = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, const GLint64 *))tunisGLGetProcAddress("glProgramUniform4i64vARB");
    tunisGL.tunisProgramUniform4i64vNV = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, const GLint64EXT *))tunisGLGetProcAddress("glProgramUniform4i64vNV");
    tunisGL.tunisProgramUniform4iEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLint, GLint, GLint, GLint))tunisGLGetProcAddress("glProgramUniform4iEXT");
    tunisGL.tunisProgramUniform4iv = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, const GLint *))tunisGLGetProcAddress("glProgramUniform4iv");
    tunisGL.tunisProgramUniform4ivEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, const GLint *))tunisGLGetProcAddress("glProgramUniform4ivEXT");
    tunisGL.tunisProgramUniform4ui = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLuint, GLuint, GLuint, GLuint))tunisGLGetProcAddress("glProgramUniform4ui");
    tunisGL.tunisProgramUniform4ui64ARB = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLuint64, GLuint64, GLuint64, GLuint64))tunisGLGetProcAddress("glProgramUniform4ui64ARB");
    tunisGL.tunisProgramUniform4ui64NV = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLuint64EXT, GLuint64EXT, GLuint64EXT, GLuint64EXT))tunisGLGetProcAddress("glProgramUniform4ui64NV");
    tunisGL.tunisProgramUniform4ui64vARB = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, const GLuint64 *))tunisGLGetProcAddress("glProgramUniform4ui64vARB");
    tunisGL.tunisProgramUniform4ui64vNV = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, const GLuint64EXT *))tunisGLGetProcAddress("glProgramUniform4ui64vNV");
    tunisGL.tunisProgramUniform4uiEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLuint, GLuint, GLuint, GLuint))tunisGLGetProcAddress("glProgramUniform4uiEXT");
    tunisGL.tunisProgramUniform4uiv = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, const GLuint *))tunisGLGetProcAddress("glProgramUniform4uiv");
    tunisGL.tunisProgramUniform4uivEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, const GLuint *))tunisGLGetProcAddress("glProgramUniform4uivEXT");
    tunisGL.tunisProgramUniformHandleui64ARB = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLuint64))tunisGLGetProcAddress("glProgramUniformHandleui64ARB");
    tunisGL.tunisProgramUniformHandleui64IMG = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLuint64))tunisGLGetProcAddress("glProgramUniformHandleui64IMG");
    tunisGL.tunisProgramUniformHandleui64NV = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLuint64))tunisGLGetProcAddress("glProgramUniformHandleui64NV");
    tunisGL.tunisProgramUniformHandleui64vARB = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, const GLuint64 *))tunisGLGetProcAddress("glProgramUniformHandleui64vARB");
    tunisGL.tunisProgramUniformHandleui64vIMG = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, const GLuint64 *))tunisGLGetProcAddress("glProgramUniformHandleui64vIMG");
    tunisGL.tunisProgramUniformHandleui64vNV = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, const GLuint64 *))tunisGLGetProcAddress("glProgramUniformHandleui64vNV");
    tunisGL.tunisProgramUniformMatrix2dv = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *))tunisGLGetProcAddress("glProgramUniformMatrix2dv");
    tunisGL.tunisProgramUniformMatrix2dvEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *))tunisGLGetProcAddress("glProgramUniformMatrix2dvEXT");
    tunisGL.tunisProgramUniformMatrix2fv = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *))tunisGLGetProcAddress("glProgramUniformMatrix2fv");
    tunisGL.tunisProgramUniformMatrix2fvEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *))tunisGLGetProcAddress("glProgramUniformMatrix2fvEXT");
    tunisGL.tunisProgramUniformMatrix2x3dv = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *))tunisGLGetProcAddress("glProgramUniformMatrix2x3dv");
    tunisGL.tunisProgramUniformMatrix2x3dvEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *))tunisGLGetProcAddress("glProgramUniformMatrix2x3dvEXT");
    tunisGL.tunisProgramUniformMatrix2x3fv = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *))tunisGLGetProcAddress("glProgramUniformMatrix2x3fv");
    tunisGL.tunisProgramUniformMatrix2x3fvEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *))tunisGLGetProcAddress("glProgramUniformMatrix2x3fvEXT");
    tunisGL.tunisProgramUniformMatrix2x4dv = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *))tunisGLGetProcAddress("glProgramUniformMatrix2x4dv");
    tunisGL.tunisProgramUniformMatrix2x4dvEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *))tunisGLGetProcAddress("glProgramUniformMatrix2x4dvEXT");
    tunisGL.tunisProgramUniformMatrix2x4fv = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *))tunisGLGetProcAddress("glProgramUniformMatrix2x4fv");
    tunisGL.tunisProgramUniformMatrix2x4fvEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *))tunisGLGetProcAddress("glProgramUniformMatrix2x4fvEXT");
    tunisGL.tunisProgramUniformMatrix3dv = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *))tunisGLGetProcAddress("glProgramUniformMatrix3dv");
    tunisGL.tunisProgramUniformMatrix3dvEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *))tunisGLGetProcAddress("glProgramUniformMatrix3dvEXT");
    tunisGL.tunisProgramUniformMatrix3fv = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *))tunisGLGetProcAddress("glProgramUniformMatrix3fv");
    tunisGL.tunisProgramUniformMatrix3fvEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *))tunisGLGetProcAddress("glProgramUniformMatrix3fvEXT");
    tunisGL.tunisProgramUniformMatrix3x2dv = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *))tunisGLGetProcAddress("glProgramUniformMatrix3x2dv");
    tunisGL.tunisProgramUniformMatrix3x2dvEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *))tunisGLGetProcAddress("glProgramUniformMatrix3x2dvEXT");
    tunisGL.tunisProgramUniformMatrix3x2fv = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *))tunisGLGetProcAddress("glProgramUniformMatrix3x2fv");
    tunisGL.tunisProgramUniformMatrix3x2fvEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *))tunisGLGetProcAddress("glProgramUniformMatrix3x2fvEXT");
    tunisGL.tunisProgramUniformMatrix3x4dv = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *))tunisGLGetProcAddress("glProgramUniformMatrix3x4dv");
    tunisGL.tunisProgramUniformMatrix3x4dvEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *))tunisGLGetProcAddress("glProgramUniformMatrix3x4dvEXT");
    tunisGL.tunisProgramUniformMatrix3x4fv = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *))tunisGLGetProcAddress("glProgramUniformMatrix3x4fv");
    tunisGL.tunisProgramUniformMatrix3x4fvEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *))tunisGLGetProcAddress("glProgramUniformMatrix3x4fvEXT");
    tunisGL.tunisProgramUniformMatrix4dv = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *))tunisGLGetProcAddress("glProgramUniformMatrix4dv");
    tunisGL.tunisProgramUniformMatrix4dvEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *))tunisGLGetProcAddress("glProgramUniformMatrix4dvEXT");
    tunisGL.tunisProgramUniformMatrix4fv = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *))tunisGLGetProcAddress("glProgramUniformMatrix4fv");
    tunisGL.tunisProgramUniformMatrix4fvEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *))tunisGLGetProcAddress("glProgramUniformMatrix4fvEXT");
    tunisGL.tunisProgramUniformMatrix4x2dv = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *))tunisGLGetProcAddress("glProgramUniformMatrix4x2dv");
    tunisGL.tunisProgramUniformMatrix4x2dvEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *))tunisGLGetProcAddress("glProgramUniformMatrix4x2dvEXT");
    tunisGL.tunisProgramUniformMatrix4x2fv = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *))tunisGLGetProcAddress("glProgramUniformMatrix4x2fv");
    tunisGL.tunisProgramUniformMatrix4x2fvEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *))tunisGLGetProcAddress("glProgramUniformMatrix4x2fvEXT");
    tunisGL.tunisProgramUniformMatrix4x3dv = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *))tunisGLGetProcAddress("glProgramUniformMatrix4x3dv");
    tunisGL.tunisProgramUniformMatrix4x3dvEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *))tunisGLGetProcAddress("glProgramUniformMatrix4x3dvEXT");
    tunisGL.tunisProgramUniformMatrix4x3fv = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *))tunisGLGetProcAddress("glProgramUniformMatrix4x3fv");
    tunisGL.tunisProgramUniformMatrix4x3fvEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *))tunisGLGetProcAddress("glProgramUniformMatrix4x3fvEXT");
    tunisGL.tunisProgramUniformui64NV = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLuint64EXT))tunisGLGetProcAddress("glProgramUniformui64NV");
    tunisGL.tunisProgramUniformui64vNV = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, const GLuint64EXT *))tunisGLGetProcAddress("glProgramUniformui64vNV");
    tunisGL.tunisProgramVertexLimitNV = (void (KHRONOS_APIENTRY *)(GLenum, GLint))tunisGLGetProcAddress("glProgramVertexLimitNV");
    tunisGL.tunisProvokingVertex = (void (KHRONOS_APIENTRY *)(GLenum))tunisGLGetProcAddress("glProvokingVertex");
    tunisGL.tunisProvokingVertexEXT = (void (KHRONOS_APIENTRY *)(GLenum))tunisGLGetProcAddress("glProvokingVertexEXT");
    tunisGL.tunisPushAttrib = (void (KHRONOS_APIENTRY *)(GLbitfield))tunisGLGetProcAddress("glPushAttrib");
    tunisGL.tunisPushClientAttrib = (void (KHRONOS_APIENTRY *)(GLbitfield))tunisGLGetProcAddress("glPushClientAttrib");
    tunisGL.tunisPushClientAttribDefaultEXT = (void (KHRONOS_APIENTRY *)(GLbitfield))tunisGLGetProcAddress("glPushClientAttribDefaultEXT");
    tunisGL.tunisPushDebugGroup = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLsizei, const GLchar *))tunisGLGetProcAddress("glPushDebugGroup");
    tunisGL.tunisPushDebugGroupKHR = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLsizei, const GLchar *))tunisGLGetProcAddress("glPushDebugGroupKHR");
    tunisGL.tunisPushGroupMarkerEXT = (void (KHRONOS_APIENTRY *)(GLsizei, const GLchar *))tunisGLGetProcAddress("glPushGroupMarkerEXT");
    tunisGL.tunisPushMatrix = (void (KHRONOS_APIENTRY *)(void))tunisGLGetProcAddress("glPushMatrix");
    tunisGL.tunisPushName = (void (KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glPushName");
    tunisGL.tunisQueryCounter = (void (KHRONOS_APIENTRY *)(GLuint, GLenum))tunisGLGetProcAddress("glQueryCounter");
    tunisGL.tunisQueryCounterEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum))tunisGLGetProcAddress("glQueryCounterEXT");
    tunisGL.tunisQueryMatrixxOES = (GLbitfield(KHRONOS_APIENTRY *)(GLfixed *, GLint *))tunisGLGetProcAddress("glQueryMatrixxOES");
    tunisGL.tunisQueryObjectParameteruiAMD = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLenum, GLuint))tunisGLGetProcAddress("glQueryObjectParameteruiAMD");
    tunisGL.tunisQueryResourceNV = (GLint(KHRONOS_APIENTRY *)(GLenum, GLint, GLuint, GLint *))tunisGLGetProcAddress("glQueryResourceNV");
    tunisGL.tunisQueryResourceTagNV = (void (KHRONOS_APIENTRY *)(GLint, const GLchar *))tunisGLGetProcAddress("glQueryResourceTagNV");
    tunisGL.tunisRasterPos2d = (void (KHRONOS_APIENTRY *)(GLdouble, GLdouble))tunisGLGetProcAddress("glRasterPos2d");
    tunisGL.tunisRasterPos2dv = (void (KHRONOS_APIENTRY *)(const GLdouble *))tunisGLGetProcAddress("glRasterPos2dv");
    tunisGL.tunisRasterPos2f = (void (KHRONOS_APIENTRY *)(GLfloat, GLfloat))tunisGLGetProcAddress("glRasterPos2f");
    tunisGL.tunisRasterPos2fv = (void (KHRONOS_APIENTRY *)(const GLfloat *))tunisGLGetProcAddress("glRasterPos2fv");
    tunisGL.tunisRasterPos2i = (void (KHRONOS_APIENTRY *)(GLint, GLint))tunisGLGetProcAddress("glRasterPos2i");
    tunisGL.tunisRasterPos2iv = (void (KHRONOS_APIENTRY *)(const GLint *))tunisGLGetProcAddress("glRasterPos2iv");
    tunisGL.tunisRasterPos2s = (void (KHRONOS_APIENTRY *)(GLshort, GLshort))tunisGLGetProcAddress("glRasterPos2s");
    tunisGL.tunisRasterPos2sv = (void (KHRONOS_APIENTRY *)(const GLshort *))tunisGLGetProcAddress("glRasterPos2sv");
    tunisGL.tunisRasterPos2xOES = (void (KHRONOS_APIENTRY *)(GLfixed, GLfixed))tunisGLGetProcAddress("glRasterPos2xOES");
    tunisGL.tunisRasterPos2xvOES = (void (KHRONOS_APIENTRY *)(const GLfixed *))tunisGLGetProcAddress("glRasterPos2xvOES");
    tunisGL.tunisRasterPos3d = (void (KHRONOS_APIENTRY *)(GLdouble, GLdouble, GLdouble))tunisGLGetProcAddress("glRasterPos3d");
    tunisGL.tunisRasterPos3dv = (void (KHRONOS_APIENTRY *)(const GLdouble *))tunisGLGetProcAddress("glRasterPos3dv");
    tunisGL.tunisRasterPos3f = (void (KHRONOS_APIENTRY *)(GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glRasterPos3f");
    tunisGL.tunisRasterPos3fv = (void (KHRONOS_APIENTRY *)(const GLfloat *))tunisGLGetProcAddress("glRasterPos3fv");
    tunisGL.tunisRasterPos3i = (void (KHRONOS_APIENTRY *)(GLint, GLint, GLint))tunisGLGetProcAddress("glRasterPos3i");
    tunisGL.tunisRasterPos3iv = (void (KHRONOS_APIENTRY *)(const GLint *))tunisGLGetProcAddress("glRasterPos3iv");
    tunisGL.tunisRasterPos3s = (void (KHRONOS_APIENTRY *)(GLshort, GLshort, GLshort))tunisGLGetProcAddress("glRasterPos3s");
    tunisGL.tunisRasterPos3sv = (void (KHRONOS_APIENTRY *)(const GLshort *))tunisGLGetProcAddress("glRasterPos3sv");
    tunisGL.tunisRasterPos3xOES = (void (KHRONOS_APIENTRY *)(GLfixed, GLfixed, GLfixed))tunisGLGetProcAddress("glRasterPos3xOES");
    tunisGL.tunisRasterPos3xvOES = (void (KHRONOS_APIENTRY *)(const GLfixed *))tunisGLGetProcAddress("glRasterPos3xvOES");
    tunisGL.tunisRasterPos4d = (void (KHRONOS_APIENTRY *)(GLdouble, GLdouble, GLdouble, GLdouble))tunisGLGetProcAddress("glRasterPos4d");
    tunisGL.tunisRasterPos4dv = (void (KHRONOS_APIENTRY *)(const GLdouble *))tunisGLGetProcAddress("glRasterPos4dv");
    tunisGL.tunisRasterPos4f = (void (KHRONOS_APIENTRY *)(GLfloat, GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glRasterPos4f");
    tunisGL.tunisRasterPos4fv = (void (KHRONOS_APIENTRY *)(const GLfloat *))tunisGLGetProcAddress("glRasterPos4fv");
    tunisGL.tunisRasterPos4i = (void (KHRONOS_APIENTRY *)(GLint, GLint, GLint, GLint))tunisGLGetProcAddress("glRasterPos4i");
    tunisGL.tunisRasterPos4iv = (void (KHRONOS_APIENTRY *)(const GLint *))tunisGLGetProcAddress("glRasterPos4iv");
    tunisGL.tunisRasterPos4s = (void (KHRONOS_APIENTRY *)(GLshort, GLshort, GLshort, GLshort))tunisGLGetProcAddress("glRasterPos4s");
    tunisGL.tunisRasterPos4sv = (void (KHRONOS_APIENTRY *)(const GLshort *))tunisGLGetProcAddress("glRasterPos4sv");
    tunisGL.tunisRasterPos4xOES = (void (KHRONOS_APIENTRY *)(GLfixed, GLfixed, GLfixed, GLfixed))tunisGLGetProcAddress("glRasterPos4xOES");
    tunisGL.tunisRasterPos4xvOES = (void (KHRONOS_APIENTRY *)(const GLfixed *))tunisGLGetProcAddress("glRasterPos4xvOES");
    tunisGL.tunisRasterSamplesEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLboolean))tunisGLGetProcAddress("glRasterSamplesEXT");
    tunisGL.tunisReadBuffer = (void (KHRONOS_APIENTRY *)(GLenum))tunisGLGetProcAddress("glReadBuffer");
    tunisGL.tunisReadBufferIndexedEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLint))tunisGLGetProcAddress("glReadBufferIndexedEXT");
    tunisGL.tunisReadBufferNV = (void (KHRONOS_APIENTRY *)(GLenum))tunisGLGetProcAddress("glReadBufferNV");
    tunisGL.tunisReadBufferRegion = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLint, GLsizei, GLsizei))tunisGLGetProcAddress("glReadBufferRegion");
    tunisGL.tunisReadInstrumentsSGIX = (void (KHRONOS_APIENTRY *)(GLint))tunisGLGetProcAddress("glReadInstrumentsSGIX");
    tunisGL.tunisReadPixels = (void (KHRONOS_APIENTRY *)(GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, void *))tunisGLGetProcAddress("glReadPixels");
    tunisGL.tunisReadnPixels = (void (KHRONOS_APIENTRY *)(GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, GLsizei, void *))tunisGLGetProcAddress("glReadnPixels");
    tunisGL.tunisReadnPixelsARB = (void (KHRONOS_APIENTRY *)(GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, GLsizei, void *))tunisGLGetProcAddress("glReadnPixelsARB");
    tunisGL.tunisReadnPixelsEXT = (void (KHRONOS_APIENTRY *)(GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, GLsizei, void *))tunisGLGetProcAddress("glReadnPixelsEXT");
    tunisGL.tunisReadnPixelsKHR = (void (KHRONOS_APIENTRY *)(GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, GLsizei, void *))tunisGLGetProcAddress("glReadnPixelsKHR");
    tunisGL.tunisRectd = (void (KHRONOS_APIENTRY *)(GLdouble, GLdouble, GLdouble, GLdouble))tunisGLGetProcAddress("glRectd");
    tunisGL.tunisRectdv = (void (KHRONOS_APIENTRY *)(const GLdouble *, const GLdouble *))tunisGLGetProcAddress("glRectdv");
    tunisGL.tunisRectf = (void (KHRONOS_APIENTRY *)(GLfloat, GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glRectf");
    tunisGL.tunisRectfv = (void (KHRONOS_APIENTRY *)(const GLfloat *, const GLfloat *))tunisGLGetProcAddress("glRectfv");
    tunisGL.tunisRecti = (void (KHRONOS_APIENTRY *)(GLint, GLint, GLint, GLint))tunisGLGetProcAddress("glRecti");
    tunisGL.tunisRectiv = (void (KHRONOS_APIENTRY *)(const GLint *, const GLint *))tunisGLGetProcAddress("glRectiv");
    tunisGL.tunisRects = (void (KHRONOS_APIENTRY *)(GLshort, GLshort, GLshort, GLshort))tunisGLGetProcAddress("glRects");
    tunisGL.tunisRectsv = (void (KHRONOS_APIENTRY *)(const GLshort *, const GLshort *))tunisGLGetProcAddress("glRectsv");
    tunisGL.tunisRectxOES = (void (KHRONOS_APIENTRY *)(GLfixed, GLfixed, GLfixed, GLfixed))tunisGLGetProcAddress("glRectxOES");
    tunisGL.tunisRectxvOES = (void (KHRONOS_APIENTRY *)(const GLfixed *, const GLfixed *))tunisGLGetProcAddress("glRectxvOES");
    tunisGL.tunisReferencePlaneSGIX = (void (KHRONOS_APIENTRY *)(const GLdouble *))tunisGLGetProcAddress("glReferencePlaneSGIX");
    tunisGL.tunisReleaseKeyedMutexWin32EXT = (GLboolean(KHRONOS_APIENTRY *)(GLuint, GLuint64))tunisGLGetProcAddress("glReleaseKeyedMutexWin32EXT");
    tunisGL.tunisReleaseShaderCompiler = (void (KHRONOS_APIENTRY *)(void))tunisGLGetProcAddress("glReleaseShaderCompiler");
    tunisGL.tunisRenderGpuMaskNV = (void (KHRONOS_APIENTRY *)(GLbitfield))tunisGLGetProcAddress("glRenderGpuMaskNV");
    tunisGL.tunisRenderMode = (GLint(KHRONOS_APIENTRY *)(GLenum))tunisGLGetProcAddress("glRenderMode");
    tunisGL.tunisRenderbufferStorage = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLsizei, GLsizei))tunisGLGetProcAddress("glRenderbufferStorage");
    tunisGL.tunisRenderbufferStorageEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLsizei, GLsizei))tunisGLGetProcAddress("glRenderbufferStorageEXT");
    tunisGL.tunisRenderbufferStorageMultisample = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLenum, GLsizei, GLsizei))tunisGLGetProcAddress("glRenderbufferStorageMultisample");
    tunisGL.tunisRenderbufferStorageMultisampleANGLE = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLenum, GLsizei, GLsizei))tunisGLGetProcAddress("glRenderbufferStorageMultisampleANGLE");
    tunisGL.tunisRenderbufferStorageMultisampleAPPLE = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLenum, GLsizei, GLsizei))tunisGLGetProcAddress("glRenderbufferStorageMultisampleAPPLE");
    tunisGL.tunisRenderbufferStorageMultisampleAdvancedAMD = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLsizei, GLenum, GLsizei, GLsizei))tunisGLGetProcAddress("glRenderbufferStorageMultisampleAdvancedAMD");
    tunisGL.tunisRenderbufferStorageMultisampleCoverageNV = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLsizei, GLenum, GLsizei, GLsizei))tunisGLGetProcAddress("glRenderbufferStorageMultisampleCoverageNV");
    tunisGL.tunisRenderbufferStorageMultisampleEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLenum, GLsizei, GLsizei))tunisGLGetProcAddress("glRenderbufferStorageMultisampleEXT");
    tunisGL.tunisRenderbufferStorageMultisampleIMG = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLenum, GLsizei, GLsizei))tunisGLGetProcAddress("glRenderbufferStorageMultisampleIMG");
    tunisGL.tunisRenderbufferStorageMultisampleNV = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLenum, GLsizei, GLsizei))tunisGLGetProcAddress("glRenderbufferStorageMultisampleNV");
    tunisGL.tunisRenderbufferStorageOES = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLsizei, GLsizei))tunisGLGetProcAddress("glRenderbufferStorageOES");
    tunisGL.tunisReplacementCodePointerSUN = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, const void **))tunisGLGetProcAddress("glReplacementCodePointerSUN");
    tunisGL.tunisReplacementCodeubSUN = (void (KHRONOS_APIENTRY *)(GLubyte))tunisGLGetProcAddress("glReplacementCodeubSUN");
    tunisGL.tunisReplacementCodeubvSUN = (void (KHRONOS_APIENTRY *)(const GLubyte *))tunisGLGetProcAddress("glReplacementCodeubvSUN");
    tunisGL.tunisReplacementCodeuiColor3fVertex3fSUN = (void (KHRONOS_APIENTRY *)(GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glReplacementCodeuiColor3fVertex3fSUN");
    tunisGL.tunisReplacementCodeuiColor3fVertex3fvSUN = (void (KHRONOS_APIENTRY *)(const GLuint *, const GLfloat *, const GLfloat *))tunisGLGetProcAddress("glReplacementCodeuiColor3fVertex3fvSUN");
    tunisGL.tunisReplacementCodeuiColor4fNormal3fVertex3fSUN = (void (KHRONOS_APIENTRY *)(GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glReplacementCodeuiColor4fNormal3fVertex3fSUN");
    tunisGL.tunisReplacementCodeuiColor4fNormal3fVertex3fvSUN = (void (KHRONOS_APIENTRY *)(const GLuint *, const GLfloat *, const GLfloat *, const GLfloat *))tunisGLGetProcAddress("glReplacementCodeuiColor4fNormal3fVertex3fvSUN");
    tunisGL.tunisReplacementCodeuiColor4ubVertex3fSUN = (void (KHRONOS_APIENTRY *)(GLuint, GLubyte, GLubyte, GLubyte, GLubyte, GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glReplacementCodeuiColor4ubVertex3fSUN");
    tunisGL.tunisReplacementCodeuiColor4ubVertex3fvSUN = (void (KHRONOS_APIENTRY *)(const GLuint *, const GLubyte *, const GLfloat *))tunisGLGetProcAddress("glReplacementCodeuiColor4ubVertex3fvSUN");
    tunisGL.tunisReplacementCodeuiNormal3fVertex3fSUN = (void (KHRONOS_APIENTRY *)(GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glReplacementCodeuiNormal3fVertex3fSUN");
    tunisGL.tunisReplacementCodeuiNormal3fVertex3fvSUN = (void (KHRONOS_APIENTRY *)(const GLuint *, const GLfloat *, const GLfloat *))tunisGLGetProcAddress("glReplacementCodeuiNormal3fVertex3fvSUN");
    tunisGL.tunisReplacementCodeuiSUN = (void (KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glReplacementCodeuiSUN");
    tunisGL.tunisReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN = (void (KHRONOS_APIENTRY *)(GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN");
    tunisGL.tunisReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN = (void (KHRONOS_APIENTRY *)(const GLuint *, const GLfloat *, const GLfloat *, const GLfloat *, const GLfloat *))tunisGLGetProcAddress("glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN");
    tunisGL.tunisReplacementCodeuiTexCoord2fNormal3fVertex3fSUN = (void (KHRONOS_APIENTRY *)(GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN");
    tunisGL.tunisReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN = (void (KHRONOS_APIENTRY *)(const GLuint *, const GLfloat *, const GLfloat *, const GLfloat *))tunisGLGetProcAddress("glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN");
    tunisGL.tunisReplacementCodeuiTexCoord2fVertex3fSUN = (void (KHRONOS_APIENTRY *)(GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glReplacementCodeuiTexCoord2fVertex3fSUN");
    tunisGL.tunisReplacementCodeuiTexCoord2fVertex3fvSUN = (void (KHRONOS_APIENTRY *)(const GLuint *, const GLfloat *, const GLfloat *))tunisGLGetProcAddress("glReplacementCodeuiTexCoord2fVertex3fvSUN");
    tunisGL.tunisReplacementCodeuiVertex3fSUN = (void (KHRONOS_APIENTRY *)(GLuint, GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glReplacementCodeuiVertex3fSUN");
    tunisGL.tunisReplacementCodeuiVertex3fvSUN = (void (KHRONOS_APIENTRY *)(const GLuint *, const GLfloat *))tunisGLGetProcAddress("glReplacementCodeuiVertex3fvSUN");
    tunisGL.tunisReplacementCodeuivSUN = (void (KHRONOS_APIENTRY *)(const GLuint *))tunisGLGetProcAddress("glReplacementCodeuivSUN");
    tunisGL.tunisReplacementCodeusSUN = (void (KHRONOS_APIENTRY *)(GLushort))tunisGLGetProcAddress("glReplacementCodeusSUN");
    tunisGL.tunisReplacementCodeusvSUN = (void (KHRONOS_APIENTRY *)(const GLushort *))tunisGLGetProcAddress("glReplacementCodeusvSUN");
    tunisGL.tunisRequestResidentProgramsNV = (void (KHRONOS_APIENTRY *)(GLsizei, const GLuint *))tunisGLGetProcAddress("glRequestResidentProgramsNV");
    tunisGL.tunisResetHistogram = (void (KHRONOS_APIENTRY *)(GLenum))tunisGLGetProcAddress("glResetHistogram");
    tunisGL.tunisResetHistogramEXT = (void (KHRONOS_APIENTRY *)(GLenum))tunisGLGetProcAddress("glResetHistogramEXT");
    tunisGL.tunisResetMemoryObjectParameterNV = (void (KHRONOS_APIENTRY *)(GLuint, GLenum))tunisGLGetProcAddress("glResetMemoryObjectParameterNV");
    tunisGL.tunisResetMinmax = (void (KHRONOS_APIENTRY *)(GLenum))tunisGLGetProcAddress("glResetMinmax");
    tunisGL.tunisResetMinmaxEXT = (void (KHRONOS_APIENTRY *)(GLenum))tunisGLGetProcAddress("glResetMinmaxEXT");
    tunisGL.tunisResizeBuffersMESA = (void (KHRONOS_APIENTRY *)(void))tunisGLGetProcAddress("glResizeBuffersMESA");
    tunisGL.tunisResolveDepthValuesNV = (void (KHRONOS_APIENTRY *)(void))tunisGLGetProcAddress("glResolveDepthValuesNV");
    tunisGL.tunisResolveMultisampleFramebufferAPPLE = (void (KHRONOS_APIENTRY *)(void))tunisGLGetProcAddress("glResolveMultisampleFramebufferAPPLE");
    tunisGL.tunisResumeTransformFeedback = (void (KHRONOS_APIENTRY *)(void))tunisGLGetProcAddress("glResumeTransformFeedback");
    tunisGL.tunisResumeTransformFeedbackNV = (void (KHRONOS_APIENTRY *)(void))tunisGLGetProcAddress("glResumeTransformFeedbackNV");
    tunisGL.tunisRotated = (void (KHRONOS_APIENTRY *)(GLdouble, GLdouble, GLdouble, GLdouble))tunisGLGetProcAddress("glRotated");
    tunisGL.tunisRotatef = (void (KHRONOS_APIENTRY *)(GLfloat, GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glRotatef");
    tunisGL.tunisRotatex = (void (KHRONOS_APIENTRY *)(GLfixed, GLfixed, GLfixed, GLfixed))tunisGLGetProcAddress("glRotatex");
    tunisGL.tunisRotatexOES = (void (KHRONOS_APIENTRY *)(GLfixed, GLfixed, GLfixed, GLfixed))tunisGLGetProcAddress("glRotatexOES");
    tunisGL.tunisSampleCoverage = (void (KHRONOS_APIENTRY *)(GLfloat, GLboolean))tunisGLGetProcAddress("glSampleCoverage");
    tunisGL.tunisSampleCoverageARB = (void (KHRONOS_APIENTRY *)(GLfloat, GLboolean))tunisGLGetProcAddress("glSampleCoverageARB");
    tunisGL.tunisSampleCoveragex = (void (KHRONOS_APIENTRY *)(GLclampx, GLboolean))tunisGLGetProcAddress("glSampleCoveragex");
    tunisGL.tunisSampleCoveragexOES = (void (KHRONOS_APIENTRY *)(GLclampx, GLboolean))tunisGLGetProcAddress("glSampleCoveragexOES");
    tunisGL.tunisSampleMapATI = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLenum))tunisGLGetProcAddress("glSampleMapATI");
    tunisGL.tunisSampleMaskEXT = (void (KHRONOS_APIENTRY *)(GLclampf, GLboolean))tunisGLGetProcAddress("glSampleMaskEXT");
    tunisGL.tunisSampleMaskIndexedNV = (void (KHRONOS_APIENTRY *)(GLuint, GLbitfield))tunisGLGetProcAddress("glSampleMaskIndexedNV");
    tunisGL.tunisSampleMaskSGIS = (void (KHRONOS_APIENTRY *)(GLclampf, GLboolean))tunisGLGetProcAddress("glSampleMaskSGIS");
    tunisGL.tunisSampleMaski = (void (KHRONOS_APIENTRY *)(GLuint, GLbitfield))tunisGLGetProcAddress("glSampleMaski");
    tunisGL.tunisSamplePatternEXT = (void (KHRONOS_APIENTRY *)(GLenum))tunisGLGetProcAddress("glSamplePatternEXT");
    tunisGL.tunisSamplePatternSGIS = (void (KHRONOS_APIENTRY *)(GLenum))tunisGLGetProcAddress("glSamplePatternSGIS");
    tunisGL.tunisSamplerParameterIiv = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, const GLint *))tunisGLGetProcAddress("glSamplerParameterIiv");
    tunisGL.tunisSamplerParameterIivEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, const GLint *))tunisGLGetProcAddress("glSamplerParameterIivEXT");
    tunisGL.tunisSamplerParameterIivOES = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, const GLint *))tunisGLGetProcAddress("glSamplerParameterIivOES");
    tunisGL.tunisSamplerParameterIuiv = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, const GLuint *))tunisGLGetProcAddress("glSamplerParameterIuiv");
    tunisGL.tunisSamplerParameterIuivEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, const GLuint *))tunisGLGetProcAddress("glSamplerParameterIuivEXT");
    tunisGL.tunisSamplerParameterIuivOES = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, const GLuint *))tunisGLGetProcAddress("glSamplerParameterIuivOES");
    tunisGL.tunisSamplerParameterf = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLfloat))tunisGLGetProcAddress("glSamplerParameterf");
    tunisGL.tunisSamplerParameterfv = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, const GLfloat *))tunisGLGetProcAddress("glSamplerParameterfv");
    tunisGL.tunisSamplerParameteri = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint))tunisGLGetProcAddress("glSamplerParameteri");
    tunisGL.tunisSamplerParameteriv = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, const GLint *))tunisGLGetProcAddress("glSamplerParameteriv");
    tunisGL.tunisScaled = (void (KHRONOS_APIENTRY *)(GLdouble, GLdouble, GLdouble))tunisGLGetProcAddress("glScaled");
    tunisGL.tunisScalef = (void (KHRONOS_APIENTRY *)(GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glScalef");
    tunisGL.tunisScalex = (void (KHRONOS_APIENTRY *)(GLfixed, GLfixed, GLfixed))tunisGLGetProcAddress("glScalex");
    tunisGL.tunisScalexOES = (void (KHRONOS_APIENTRY *)(GLfixed, GLfixed, GLfixed))tunisGLGetProcAddress("glScalexOES");
    tunisGL.tunisScissor = (void (KHRONOS_APIENTRY *)(GLint, GLint, GLsizei, GLsizei))tunisGLGetProcAddress("glScissor");
    tunisGL.tunisScissorArrayv = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, const GLint *))tunisGLGetProcAddress("glScissorArrayv");
    tunisGL.tunisScissorArrayvNV = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, const GLint *))tunisGLGetProcAddress("glScissorArrayvNV");
    tunisGL.tunisScissorArrayvOES = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, const GLint *))tunisGLGetProcAddress("glScissorArrayvOES");
    tunisGL.tunisScissorExclusiveArrayvNV = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, const GLint *))tunisGLGetProcAddress("glScissorExclusiveArrayvNV");
    tunisGL.tunisScissorExclusiveNV = (void (KHRONOS_APIENTRY *)(GLint, GLint, GLsizei, GLsizei))tunisGLGetProcAddress("glScissorExclusiveNV");
    tunisGL.tunisScissorIndexed = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLint, GLsizei, GLsizei))tunisGLGetProcAddress("glScissorIndexed");
    tunisGL.tunisScissorIndexedNV = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLint, GLsizei, GLsizei))tunisGLGetProcAddress("glScissorIndexedNV");
    tunisGL.tunisScissorIndexedOES = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLint, GLsizei, GLsizei))tunisGLGetProcAddress("glScissorIndexedOES");
    tunisGL.tunisScissorIndexedv = (void (KHRONOS_APIENTRY *)(GLuint, const GLint *))tunisGLGetProcAddress("glScissorIndexedv");
    tunisGL.tunisScissorIndexedvNV = (void (KHRONOS_APIENTRY *)(GLuint, const GLint *))tunisGLGetProcAddress("glScissorIndexedvNV");
    tunisGL.tunisScissorIndexedvOES = (void (KHRONOS_APIENTRY *)(GLuint, const GLint *))tunisGLGetProcAddress("glScissorIndexedvOES");
    tunisGL.tunisSecondaryColor3b = (void (KHRONOS_APIENTRY *)(GLbyte, GLbyte, GLbyte))tunisGLGetProcAddress("glSecondaryColor3b");
    tunisGL.tunisSecondaryColor3bEXT = (void (KHRONOS_APIENTRY *)(GLbyte, GLbyte, GLbyte))tunisGLGetProcAddress("glSecondaryColor3bEXT");
    tunisGL.tunisSecondaryColor3bv = (void (KHRONOS_APIENTRY *)(const GLbyte *))tunisGLGetProcAddress("glSecondaryColor3bv");
    tunisGL.tunisSecondaryColor3bvEXT = (void (KHRONOS_APIENTRY *)(const GLbyte *))tunisGLGetProcAddress("glSecondaryColor3bvEXT");
    tunisGL.tunisSecondaryColor3d = (void (KHRONOS_APIENTRY *)(GLdouble, GLdouble, GLdouble))tunisGLGetProcAddress("glSecondaryColor3d");
    tunisGL.tunisSecondaryColor3dEXT = (void (KHRONOS_APIENTRY *)(GLdouble, GLdouble, GLdouble))tunisGLGetProcAddress("glSecondaryColor3dEXT");
    tunisGL.tunisSecondaryColor3dv = (void (KHRONOS_APIENTRY *)(const GLdouble *))tunisGLGetProcAddress("glSecondaryColor3dv");
    tunisGL.tunisSecondaryColor3dvEXT = (void (KHRONOS_APIENTRY *)(const GLdouble *))tunisGLGetProcAddress("glSecondaryColor3dvEXT");
    tunisGL.tunisSecondaryColor3f = (void (KHRONOS_APIENTRY *)(GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glSecondaryColor3f");
    tunisGL.tunisSecondaryColor3fEXT = (void (KHRONOS_APIENTRY *)(GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glSecondaryColor3fEXT");
    tunisGL.tunisSecondaryColor3fv = (void (KHRONOS_APIENTRY *)(const GLfloat *))tunisGLGetProcAddress("glSecondaryColor3fv");
    tunisGL.tunisSecondaryColor3fvEXT = (void (KHRONOS_APIENTRY *)(const GLfloat *))tunisGLGetProcAddress("glSecondaryColor3fvEXT");
    tunisGL.tunisSecondaryColor3hNV = (void (KHRONOS_APIENTRY *)(GLhalfNV, GLhalfNV, GLhalfNV))tunisGLGetProcAddress("glSecondaryColor3hNV");
    tunisGL.tunisSecondaryColor3hvNV = (void (KHRONOS_APIENTRY *)(const GLhalfNV *))tunisGLGetProcAddress("glSecondaryColor3hvNV");
    tunisGL.tunisSecondaryColor3i = (void (KHRONOS_APIENTRY *)(GLint, GLint, GLint))tunisGLGetProcAddress("glSecondaryColor3i");
    tunisGL.tunisSecondaryColor3iEXT = (void (KHRONOS_APIENTRY *)(GLint, GLint, GLint))tunisGLGetProcAddress("glSecondaryColor3iEXT");
    tunisGL.tunisSecondaryColor3iv = (void (KHRONOS_APIENTRY *)(const GLint *))tunisGLGetProcAddress("glSecondaryColor3iv");
    tunisGL.tunisSecondaryColor3ivEXT = (void (KHRONOS_APIENTRY *)(const GLint *))tunisGLGetProcAddress("glSecondaryColor3ivEXT");
    tunisGL.tunisSecondaryColor3s = (void (KHRONOS_APIENTRY *)(GLshort, GLshort, GLshort))tunisGLGetProcAddress("glSecondaryColor3s");
    tunisGL.tunisSecondaryColor3sEXT = (void (KHRONOS_APIENTRY *)(GLshort, GLshort, GLshort))tunisGLGetProcAddress("glSecondaryColor3sEXT");
    tunisGL.tunisSecondaryColor3sv = (void (KHRONOS_APIENTRY *)(const GLshort *))tunisGLGetProcAddress("glSecondaryColor3sv");
    tunisGL.tunisSecondaryColor3svEXT = (void (KHRONOS_APIENTRY *)(const GLshort *))tunisGLGetProcAddress("glSecondaryColor3svEXT");
    tunisGL.tunisSecondaryColor3ub = (void (KHRONOS_APIENTRY *)(GLubyte, GLubyte, GLubyte))tunisGLGetProcAddress("glSecondaryColor3ub");
    tunisGL.tunisSecondaryColor3ubEXT = (void (KHRONOS_APIENTRY *)(GLubyte, GLubyte, GLubyte))tunisGLGetProcAddress("glSecondaryColor3ubEXT");
    tunisGL.tunisSecondaryColor3ubv = (void (KHRONOS_APIENTRY *)(const GLubyte *))tunisGLGetProcAddress("glSecondaryColor3ubv");
    tunisGL.tunisSecondaryColor3ubvEXT = (void (KHRONOS_APIENTRY *)(const GLubyte *))tunisGLGetProcAddress("glSecondaryColor3ubvEXT");
    tunisGL.tunisSecondaryColor3ui = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLuint))tunisGLGetProcAddress("glSecondaryColor3ui");
    tunisGL.tunisSecondaryColor3uiEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLuint))tunisGLGetProcAddress("glSecondaryColor3uiEXT");
    tunisGL.tunisSecondaryColor3uiv = (void (KHRONOS_APIENTRY *)(const GLuint *))tunisGLGetProcAddress("glSecondaryColor3uiv");
    tunisGL.tunisSecondaryColor3uivEXT = (void (KHRONOS_APIENTRY *)(const GLuint *))tunisGLGetProcAddress("glSecondaryColor3uivEXT");
    tunisGL.tunisSecondaryColor3us = (void (KHRONOS_APIENTRY *)(GLushort, GLushort, GLushort))tunisGLGetProcAddress("glSecondaryColor3us");
    tunisGL.tunisSecondaryColor3usEXT = (void (KHRONOS_APIENTRY *)(GLushort, GLushort, GLushort))tunisGLGetProcAddress("glSecondaryColor3usEXT");
    tunisGL.tunisSecondaryColor3usv = (void (KHRONOS_APIENTRY *)(const GLushort *))tunisGLGetProcAddress("glSecondaryColor3usv");
    tunisGL.tunisSecondaryColor3usvEXT = (void (KHRONOS_APIENTRY *)(const GLushort *))tunisGLGetProcAddress("glSecondaryColor3usvEXT");
    tunisGL.tunisSecondaryColorFormatNV = (void (KHRONOS_APIENTRY *)(GLint, GLenum, GLsizei))tunisGLGetProcAddress("glSecondaryColorFormatNV");
    tunisGL.tunisSecondaryColorP3ui = (void (KHRONOS_APIENTRY *)(GLenum, GLuint))tunisGLGetProcAddress("glSecondaryColorP3ui");
    tunisGL.tunisSecondaryColorP3uiv = (void (KHRONOS_APIENTRY *)(GLenum, const GLuint *))tunisGLGetProcAddress("glSecondaryColorP3uiv");
    tunisGL.tunisSecondaryColorPointer = (void (KHRONOS_APIENTRY *)(GLint, GLenum, GLsizei, const void *))tunisGLGetProcAddress("glSecondaryColorPointer");
    tunisGL.tunisSecondaryColorPointerEXT = (void (KHRONOS_APIENTRY *)(GLint, GLenum, GLsizei, const void *))tunisGLGetProcAddress("glSecondaryColorPointerEXT");
    tunisGL.tunisSecondaryColorPointerListIBM = (void (KHRONOS_APIENTRY *)(GLint, GLenum, GLint, const void **, GLint))tunisGLGetProcAddress("glSecondaryColorPointerListIBM");
    tunisGL.tunisSelectBuffer = (void (KHRONOS_APIENTRY *)(GLsizei, GLuint *))tunisGLGetProcAddress("glSelectBuffer");
    tunisGL.tunisSelectPerfMonitorCountersAMD = (void (KHRONOS_APIENTRY *)(GLuint, GLboolean, GLuint, GLint, GLuint *))tunisGLGetProcAddress("glSelectPerfMonitorCountersAMD");
    tunisGL.tunisSemaphoreParameterui64vEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, const GLuint64 *))tunisGLGetProcAddress("glSemaphoreParameterui64vEXT");
    tunisGL.tunisSeparableFilter2D = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLsizei, GLsizei, GLenum, GLenum, const void *, const void *))tunisGLGetProcAddress("glSeparableFilter2D");
    tunisGL.tunisSeparableFilter2DEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLsizei, GLsizei, GLenum, GLenum, const void *, const void *))tunisGLGetProcAddress("glSeparableFilter2DEXT");
    tunisGL.tunisSetFenceAPPLE = (void (KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glSetFenceAPPLE");
    tunisGL.tunisSetFenceNV = (void (KHRONOS_APIENTRY *)(GLuint, GLenum))tunisGLGetProcAddress("glSetFenceNV");
    tunisGL.tunisSetFragmentShaderConstantATI = (void (KHRONOS_APIENTRY *)(GLuint, const GLfloat *))tunisGLGetProcAddress("glSetFragmentShaderConstantATI");
    tunisGL.tunisSetInvariantEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, const void *))tunisGLGetProcAddress("glSetInvariantEXT");
    tunisGL.tunisSetLocalConstantEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, const void *))tunisGLGetProcAddress("glSetLocalConstantEXT");
    tunisGL.tunisSetMultisamplefvAMD = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, const GLfloat *))tunisGLGetProcAddress("glSetMultisamplefvAMD");
    tunisGL.tunisShadeModel = (void (KHRONOS_APIENTRY *)(GLenum))tunisGLGetProcAddress("glShadeModel");
    tunisGL.tunisShaderBinary = (void (KHRONOS_APIENTRY *)(GLsizei, const GLuint *, GLenum, const void *, GLsizei))tunisGLGetProcAddress("glShaderBinary");
    tunisGL.tunisShaderOp1EXT = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLuint))tunisGLGetProcAddress("glShaderOp1EXT");
    tunisGL.tunisShaderOp2EXT = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLuint, GLuint))tunisGLGetProcAddress("glShaderOp2EXT");
    tunisGL.tunisShaderOp3EXT = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLuint, GLuint, GLuint))tunisGLGetProcAddress("glShaderOp3EXT");
    tunisGL.tunisShaderSource = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, const GLchar *const*, const GLint *))tunisGLGetProcAddress("glShaderSource");
    tunisGL.tunisShaderSourceARB = (void (KHRONOS_APIENTRY *)(GLhandleARB, GLsizei, const GLcharARB **, const GLint *))tunisGLGetProcAddress("glShaderSourceARB");
    tunisGL.tunisShaderStorageBlockBinding = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLuint))tunisGLGetProcAddress("glShaderStorageBlockBinding");
    tunisGL.tunisShadingRateImageBarrierNV = (void (KHRONOS_APIENTRY *)(GLboolean))tunisGLGetProcAddress("glShadingRateImageBarrierNV");
    tunisGL.tunisShadingRateImagePaletteNV = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLsizei, const GLenum *))tunisGLGetProcAddress("glShadingRateImagePaletteNV");
    tunisGL.tunisShadingRateSampleOrderCustomNV = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, const GLint *))tunisGLGetProcAddress("glShadingRateSampleOrderCustomNV");
    tunisGL.tunisShadingRateSampleOrderNV = (void (KHRONOS_APIENTRY *)(GLenum))tunisGLGetProcAddress("glShadingRateSampleOrderNV");
    tunisGL.tunisSharpenTexFuncSGIS = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, const GLfloat *))tunisGLGetProcAddress("glSharpenTexFuncSGIS");
    tunisGL.tunisSignalSemaphoreEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, const GLuint *, GLuint, const GLuint *, const GLenum *))tunisGLGetProcAddress("glSignalSemaphoreEXT");
    tunisGL.tunisSignalVkFenceNV = (void (KHRONOS_APIENTRY *)(GLuint64))tunisGLGetProcAddress("glSignalVkFenceNV");
    tunisGL.tunisSignalVkSemaphoreNV = (void (KHRONOS_APIENTRY *)(GLuint64))tunisGLGetProcAddress("glSignalVkSemaphoreNV");
    tunisGL.tunisSpecializeShader = (void (KHRONOS_APIENTRY *)(GLuint, const GLchar *, GLuint, const GLuint *, const GLuint *))tunisGLGetProcAddress("glSpecializeShader");
    tunisGL.tunisSpecializeShaderARB = (void (KHRONOS_APIENTRY *)(GLuint, const GLchar *, GLuint, const GLuint *, const GLuint *))tunisGLGetProcAddress("glSpecializeShaderARB");
    tunisGL.tunisSpriteParameterfSGIX = (void (KHRONOS_APIENTRY *)(GLenum, GLfloat))tunisGLGetProcAddress("glSpriteParameterfSGIX");
    tunisGL.tunisSpriteParameterfvSGIX = (void (KHRONOS_APIENTRY *)(GLenum, const GLfloat *))tunisGLGetProcAddress("glSpriteParameterfvSGIX");
    tunisGL.tunisSpriteParameteriSGIX = (void (KHRONOS_APIENTRY *)(GLenum, GLint))tunisGLGetProcAddress("glSpriteParameteriSGIX");
    tunisGL.tunisSpriteParameterivSGIX = (void (KHRONOS_APIENTRY *)(GLenum, const GLint *))tunisGLGetProcAddress("glSpriteParameterivSGIX");
    tunisGL.tunisStartInstrumentsSGIX = (void (KHRONOS_APIENTRY *)(void))tunisGLGetProcAddress("glStartInstrumentsSGIX");
    tunisGL.tunisStartTilingQCOM = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLuint, GLuint, GLbitfield))tunisGLGetProcAddress("glStartTilingQCOM");
    tunisGL.tunisStateCaptureNV = (void (KHRONOS_APIENTRY *)(GLuint, GLenum))tunisGLGetProcAddress("glStateCaptureNV");
    tunisGL.tunisStencilClearTagEXT = (void (KHRONOS_APIENTRY *)(GLsizei, GLuint))tunisGLGetProcAddress("glStencilClearTagEXT");
    tunisGL.tunisStencilFillPathInstancedNV = (void (KHRONOS_APIENTRY *)(GLsizei, GLenum, const void *, GLuint, GLenum, GLuint, GLenum, const GLfloat *))tunisGLGetProcAddress("glStencilFillPathInstancedNV");
    tunisGL.tunisStencilFillPathNV = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLuint))tunisGLGetProcAddress("glStencilFillPathNV");
    tunisGL.tunisStencilFunc = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLuint))tunisGLGetProcAddress("glStencilFunc");
    tunisGL.tunisStencilFuncSeparate = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint, GLuint))tunisGLGetProcAddress("glStencilFuncSeparate");
    tunisGL.tunisStencilFuncSeparateATI = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint, GLuint))tunisGLGetProcAddress("glStencilFuncSeparateATI");
    tunisGL.tunisStencilMask = (void (KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glStencilMask");
    tunisGL.tunisStencilMaskSeparate = (void (KHRONOS_APIENTRY *)(GLenum, GLuint))tunisGLGetProcAddress("glStencilMaskSeparate");
    tunisGL.tunisStencilOp = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum))tunisGLGetProcAddress("glStencilOp");
    tunisGL.tunisStencilOpSeparate = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLenum))tunisGLGetProcAddress("glStencilOpSeparate");
    tunisGL.tunisStencilOpSeparateATI = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLenum))tunisGLGetProcAddress("glStencilOpSeparateATI");
    tunisGL.tunisStencilOpValueAMD = (void (KHRONOS_APIENTRY *)(GLenum, GLuint))tunisGLGetProcAddress("glStencilOpValueAMD");
    tunisGL.tunisStencilStrokePathInstancedNV = (void (KHRONOS_APIENTRY *)(GLsizei, GLenum, const void *, GLuint, GLint, GLuint, GLenum, const GLfloat *))tunisGLGetProcAddress("glStencilStrokePathInstancedNV");
    tunisGL.tunisStencilStrokePathNV = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLuint))tunisGLGetProcAddress("glStencilStrokePathNV");
    tunisGL.tunisStencilThenCoverFillPathInstancedNV = (void (KHRONOS_APIENTRY *)(GLsizei, GLenum, const void *, GLuint, GLenum, GLuint, GLenum, GLenum, const GLfloat *))tunisGLGetProcAddress("glStencilThenCoverFillPathInstancedNV");
    tunisGL.tunisStencilThenCoverFillPathNV = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLuint, GLenum))tunisGLGetProcAddress("glStencilThenCoverFillPathNV");
    tunisGL.tunisStencilThenCoverStrokePathInstancedNV = (void (KHRONOS_APIENTRY *)(GLsizei, GLenum, const void *, GLuint, GLint, GLuint, GLenum, GLenum, const GLfloat *))tunisGLGetProcAddress("glStencilThenCoverStrokePathInstancedNV");
    tunisGL.tunisStencilThenCoverStrokePathNV = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLuint, GLenum))tunisGLGetProcAddress("glStencilThenCoverStrokePathNV");
    tunisGL.tunisStopInstrumentsSGIX = (void (KHRONOS_APIENTRY *)(GLint))tunisGLGetProcAddress("glStopInstrumentsSGIX");
    tunisGL.tunisStringMarkerGREMEDY = (void (KHRONOS_APIENTRY *)(GLsizei, const void *))tunisGLGetProcAddress("glStringMarkerGREMEDY");
    tunisGL.tunisSubpixelPrecisionBiasNV = (void (KHRONOS_APIENTRY *)(GLuint, GLuint))tunisGLGetProcAddress("glSubpixelPrecisionBiasNV");
    tunisGL.tunisSwizzleEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLenum, GLenum, GLenum, GLenum))tunisGLGetProcAddress("glSwizzleEXT");
    tunisGL.tunisSyncTextureINTEL = (void (KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glSyncTextureINTEL");
    tunisGL.tunisTagSampleBufferSGIX = (void (KHRONOS_APIENTRY *)(void))tunisGLGetProcAddress("glTagSampleBufferSGIX");
    tunisGL.tunisTangent3bEXT = (void (KHRONOS_APIENTRY *)(GLbyte, GLbyte, GLbyte))tunisGLGetProcAddress("glTangent3bEXT");
    tunisGL.tunisTangent3bvEXT = (void (KHRONOS_APIENTRY *)(const GLbyte *))tunisGLGetProcAddress("glTangent3bvEXT");
    tunisGL.tunisTangent3dEXT = (void (KHRONOS_APIENTRY *)(GLdouble, GLdouble, GLdouble))tunisGLGetProcAddress("glTangent3dEXT");
    tunisGL.tunisTangent3dvEXT = (void (KHRONOS_APIENTRY *)(const GLdouble *))tunisGLGetProcAddress("glTangent3dvEXT");
    tunisGL.tunisTangent3fEXT = (void (KHRONOS_APIENTRY *)(GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glTangent3fEXT");
    tunisGL.tunisTangent3fvEXT = (void (KHRONOS_APIENTRY *)(const GLfloat *))tunisGLGetProcAddress("glTangent3fvEXT");
    tunisGL.tunisTangent3iEXT = (void (KHRONOS_APIENTRY *)(GLint, GLint, GLint))tunisGLGetProcAddress("glTangent3iEXT");
    tunisGL.tunisTangent3ivEXT = (void (KHRONOS_APIENTRY *)(const GLint *))tunisGLGetProcAddress("glTangent3ivEXT");
    tunisGL.tunisTangent3sEXT = (void (KHRONOS_APIENTRY *)(GLshort, GLshort, GLshort))tunisGLGetProcAddress("glTangent3sEXT");
    tunisGL.tunisTangent3svEXT = (void (KHRONOS_APIENTRY *)(const GLshort *))tunisGLGetProcAddress("glTangent3svEXT");
    tunisGL.tunisTangentPointerEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, const void *))tunisGLGetProcAddress("glTangentPointerEXT");
    tunisGL.tunisTbufferMask3DFX = (void (KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glTbufferMask3DFX");
    tunisGL.tunisTessellationFactorAMD = (void (KHRONOS_APIENTRY *)(GLfloat))tunisGLGetProcAddress("glTessellationFactorAMD");
    tunisGL.tunisTessellationModeAMD = (void (KHRONOS_APIENTRY *)(GLenum))tunisGLGetProcAddress("glTessellationModeAMD");
    tunisGL.tunisTestFenceAPPLE = (GLboolean(KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glTestFenceAPPLE");
    tunisGL.tunisTestFenceNV = (GLboolean(KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glTestFenceNV");
    tunisGL.tunisTestObjectAPPLE = (GLboolean(KHRONOS_APIENTRY *)(GLenum, GLuint))tunisGLGetProcAddress("glTestObjectAPPLE");
    tunisGL.tunisTexAttachMemoryNV = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLuint64))tunisGLGetProcAddress("glTexAttachMemoryNV");
    tunisGL.tunisTexBuffer = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLuint))tunisGLGetProcAddress("glTexBuffer");
    tunisGL.tunisTexBufferARB = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLuint))tunisGLGetProcAddress("glTexBufferARB");
    tunisGL.tunisTexBufferEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLuint))tunisGLGetProcAddress("glTexBufferEXT");
    tunisGL.tunisTexBufferOES = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLuint))tunisGLGetProcAddress("glTexBufferOES");
    tunisGL.tunisTexBufferRange = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLuint, GLintptr, GLsizeiptr))tunisGLGetProcAddress("glTexBufferRange");
    tunisGL.tunisTexBufferRangeEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLuint, GLintptr, GLsizeiptr))tunisGLGetProcAddress("glTexBufferRangeEXT");
    tunisGL.tunisTexBufferRangeOES = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLuint, GLintptr, GLsizeiptr))tunisGLGetProcAddress("glTexBufferRangeOES");
    tunisGL.tunisTexBumpParameterfvATI = (void (KHRONOS_APIENTRY *)(GLenum, const GLfloat *))tunisGLGetProcAddress("glTexBumpParameterfvATI");
    tunisGL.tunisTexBumpParameterivATI = (void (KHRONOS_APIENTRY *)(GLenum, const GLint *))tunisGLGetProcAddress("glTexBumpParameterivATI");
    tunisGL.tunisTexCoord1bOES = (void (KHRONOS_APIENTRY *)(GLbyte))tunisGLGetProcAddress("glTexCoord1bOES");
    tunisGL.tunisTexCoord1bvOES = (void (KHRONOS_APIENTRY *)(const GLbyte *))tunisGLGetProcAddress("glTexCoord1bvOES");
    tunisGL.tunisTexCoord1d = (void (KHRONOS_APIENTRY *)(GLdouble))tunisGLGetProcAddress("glTexCoord1d");
    tunisGL.tunisTexCoord1dv = (void (KHRONOS_APIENTRY *)(const GLdouble *))tunisGLGetProcAddress("glTexCoord1dv");
    tunisGL.tunisTexCoord1f = (void (KHRONOS_APIENTRY *)(GLfloat))tunisGLGetProcAddress("glTexCoord1f");
    tunisGL.tunisTexCoord1fv = (void (KHRONOS_APIENTRY *)(const GLfloat *))tunisGLGetProcAddress("glTexCoord1fv");
    tunisGL.tunisTexCoord1hNV = (void (KHRONOS_APIENTRY *)(GLhalfNV))tunisGLGetProcAddress("glTexCoord1hNV");
    tunisGL.tunisTexCoord1hvNV = (void (KHRONOS_APIENTRY *)(const GLhalfNV *))tunisGLGetProcAddress("glTexCoord1hvNV");
    tunisGL.tunisTexCoord1i = (void (KHRONOS_APIENTRY *)(GLint))tunisGLGetProcAddress("glTexCoord1i");
    tunisGL.tunisTexCoord1iv = (void (KHRONOS_APIENTRY *)(const GLint *))tunisGLGetProcAddress("glTexCoord1iv");
    tunisGL.tunisTexCoord1s = (void (KHRONOS_APIENTRY *)(GLshort))tunisGLGetProcAddress("glTexCoord1s");
    tunisGL.tunisTexCoord1sv = (void (KHRONOS_APIENTRY *)(const GLshort *))tunisGLGetProcAddress("glTexCoord1sv");
    tunisGL.tunisTexCoord1xOES = (void (KHRONOS_APIENTRY *)(GLfixed))tunisGLGetProcAddress("glTexCoord1xOES");
    tunisGL.tunisTexCoord1xvOES = (void (KHRONOS_APIENTRY *)(const GLfixed *))tunisGLGetProcAddress("glTexCoord1xvOES");
    tunisGL.tunisTexCoord2bOES = (void (KHRONOS_APIENTRY *)(GLbyte, GLbyte))tunisGLGetProcAddress("glTexCoord2bOES");
    tunisGL.tunisTexCoord2bvOES = (void (KHRONOS_APIENTRY *)(const GLbyte *))tunisGLGetProcAddress("glTexCoord2bvOES");
    tunisGL.tunisTexCoord2d = (void (KHRONOS_APIENTRY *)(GLdouble, GLdouble))tunisGLGetProcAddress("glTexCoord2d");
    tunisGL.tunisTexCoord2dv = (void (KHRONOS_APIENTRY *)(const GLdouble *))tunisGLGetProcAddress("glTexCoord2dv");
    tunisGL.tunisTexCoord2f = (void (KHRONOS_APIENTRY *)(GLfloat, GLfloat))tunisGLGetProcAddress("glTexCoord2f");
    tunisGL.tunisTexCoord2fColor3fVertex3fSUN = (void (KHRONOS_APIENTRY *)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glTexCoord2fColor3fVertex3fSUN");
    tunisGL.tunisTexCoord2fColor3fVertex3fvSUN = (void (KHRONOS_APIENTRY *)(const GLfloat *, const GLfloat *, const GLfloat *))tunisGLGetProcAddress("glTexCoord2fColor3fVertex3fvSUN");
    tunisGL.tunisTexCoord2fColor4fNormal3fVertex3fSUN = (void (KHRONOS_APIENTRY *)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glTexCoord2fColor4fNormal3fVertex3fSUN");
    tunisGL.tunisTexCoord2fColor4fNormal3fVertex3fvSUN = (void (KHRONOS_APIENTRY *)(const GLfloat *, const GLfloat *, const GLfloat *, const GLfloat *))tunisGLGetProcAddress("glTexCoord2fColor4fNormal3fVertex3fvSUN");
    tunisGL.tunisTexCoord2fColor4ubVertex3fSUN = (void (KHRONOS_APIENTRY *)(GLfloat, GLfloat, GLubyte, GLubyte, GLubyte, GLubyte, GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glTexCoord2fColor4ubVertex3fSUN");
    tunisGL.tunisTexCoord2fColor4ubVertex3fvSUN = (void (KHRONOS_APIENTRY *)(const GLfloat *, const GLubyte *, const GLfloat *))tunisGLGetProcAddress("glTexCoord2fColor4ubVertex3fvSUN");
    tunisGL.tunisTexCoord2fNormal3fVertex3fSUN = (void (KHRONOS_APIENTRY *)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glTexCoord2fNormal3fVertex3fSUN");
    tunisGL.tunisTexCoord2fNormal3fVertex3fvSUN = (void (KHRONOS_APIENTRY *)(const GLfloat *, const GLfloat *, const GLfloat *))tunisGLGetProcAddress("glTexCoord2fNormal3fVertex3fvSUN");
    tunisGL.tunisTexCoord2fVertex3fSUN = (void (KHRONOS_APIENTRY *)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glTexCoord2fVertex3fSUN");
    tunisGL.tunisTexCoord2fVertex3fvSUN = (void (KHRONOS_APIENTRY *)(const GLfloat *, const GLfloat *))tunisGLGetProcAddress("glTexCoord2fVertex3fvSUN");
    tunisGL.tunisTexCoord2fv = (void (KHRONOS_APIENTRY *)(const GLfloat *))tunisGLGetProcAddress("glTexCoord2fv");
    tunisGL.tunisTexCoord2hNV = (void (KHRONOS_APIENTRY *)(GLhalfNV, GLhalfNV))tunisGLGetProcAddress("glTexCoord2hNV");
    tunisGL.tunisTexCoord2hvNV = (void (KHRONOS_APIENTRY *)(const GLhalfNV *))tunisGLGetProcAddress("glTexCoord2hvNV");
    tunisGL.tunisTexCoord2i = (void (KHRONOS_APIENTRY *)(GLint, GLint))tunisGLGetProcAddress("glTexCoord2i");
    tunisGL.tunisTexCoord2iv = (void (KHRONOS_APIENTRY *)(const GLint *))tunisGLGetProcAddress("glTexCoord2iv");
    tunisGL.tunisTexCoord2s = (void (KHRONOS_APIENTRY *)(GLshort, GLshort))tunisGLGetProcAddress("glTexCoord2s");
    tunisGL.tunisTexCoord2sv = (void (KHRONOS_APIENTRY *)(const GLshort *))tunisGLGetProcAddress("glTexCoord2sv");
    tunisGL.tunisTexCoord2xOES = (void (KHRONOS_APIENTRY *)(GLfixed, GLfixed))tunisGLGetProcAddress("glTexCoord2xOES");
    tunisGL.tunisTexCoord2xvOES = (void (KHRONOS_APIENTRY *)(const GLfixed *))tunisGLGetProcAddress("glTexCoord2xvOES");
    tunisGL.tunisTexCoord3bOES = (void (KHRONOS_APIENTRY *)(GLbyte, GLbyte, GLbyte))tunisGLGetProcAddress("glTexCoord3bOES");
    tunisGL.tunisTexCoord3bvOES = (void (KHRONOS_APIENTRY *)(const GLbyte *))tunisGLGetProcAddress("glTexCoord3bvOES");
    tunisGL.tunisTexCoord3d = (void (KHRONOS_APIENTRY *)(GLdouble, GLdouble, GLdouble))tunisGLGetProcAddress("glTexCoord3d");
    tunisGL.tunisTexCoord3dv = (void (KHRONOS_APIENTRY *)(const GLdouble *))tunisGLGetProcAddress("glTexCoord3dv");
    tunisGL.tunisTexCoord3f = (void (KHRONOS_APIENTRY *)(GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glTexCoord3f");
    tunisGL.tunisTexCoord3fv = (void (KHRONOS_APIENTRY *)(const GLfloat *))tunisGLGetProcAddress("glTexCoord3fv");
    tunisGL.tunisTexCoord3hNV = (void (KHRONOS_APIENTRY *)(GLhalfNV, GLhalfNV, GLhalfNV))tunisGLGetProcAddress("glTexCoord3hNV");
    tunisGL.tunisTexCoord3hvNV = (void (KHRONOS_APIENTRY *)(const GLhalfNV *))tunisGLGetProcAddress("glTexCoord3hvNV");
    tunisGL.tunisTexCoord3i = (void (KHRONOS_APIENTRY *)(GLint, GLint, GLint))tunisGLGetProcAddress("glTexCoord3i");
    tunisGL.tunisTexCoord3iv = (void (KHRONOS_APIENTRY *)(const GLint *))tunisGLGetProcAddress("glTexCoord3iv");
    tunisGL.tunisTexCoord3s = (void (KHRONOS_APIENTRY *)(GLshort, GLshort, GLshort))tunisGLGetProcAddress("glTexCoord3s");
    tunisGL.tunisTexCoord3sv = (void (KHRONOS_APIENTRY *)(const GLshort *))tunisGLGetProcAddress("glTexCoord3sv");
    tunisGL.tunisTexCoord3xOES = (void (KHRONOS_APIENTRY *)(GLfixed, GLfixed, GLfixed))tunisGLGetProcAddress("glTexCoord3xOES");
    tunisGL.tunisTexCoord3xvOES = (void (KHRONOS_APIENTRY *)(const GLfixed *))tunisGLGetProcAddress("glTexCoord3xvOES");
    tunisGL.tunisTexCoord4bOES = (void (KHRONOS_APIENTRY *)(GLbyte, GLbyte, GLbyte, GLbyte))tunisGLGetProcAddress("glTexCoord4bOES");
    tunisGL.tunisTexCoord4bvOES = (void (KHRONOS_APIENTRY *)(const GLbyte *))tunisGLGetProcAddress("glTexCoord4bvOES");
    tunisGL.tunisTexCoord4d = (void (KHRONOS_APIENTRY *)(GLdouble, GLdouble, GLdouble, GLdouble))tunisGLGetProcAddress("glTexCoord4d");
    tunisGL.tunisTexCoord4dv = (void (KHRONOS_APIENTRY *)(const GLdouble *))tunisGLGetProcAddress("glTexCoord4dv");
    tunisGL.tunisTexCoord4f = (void (KHRONOS_APIENTRY *)(GLfloat, GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glTexCoord4f");
    tunisGL.tunisTexCoord4fColor4fNormal3fVertex4fSUN = (void (KHRONOS_APIENTRY *)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glTexCoord4fColor4fNormal3fVertex4fSUN");
    tunisGL.tunisTexCoord4fColor4fNormal3fVertex4fvSUN = (void (KHRONOS_APIENTRY *)(const GLfloat *, const GLfloat *, const GLfloat *, const GLfloat *))tunisGLGetProcAddress("glTexCoord4fColor4fNormal3fVertex4fvSUN");
    tunisGL.tunisTexCoord4fVertex4fSUN = (void (KHRONOS_APIENTRY *)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glTexCoord4fVertex4fSUN");
    tunisGL.tunisTexCoord4fVertex4fvSUN = (void (KHRONOS_APIENTRY *)(const GLfloat *, const GLfloat *))tunisGLGetProcAddress("glTexCoord4fVertex4fvSUN");
    tunisGL.tunisTexCoord4fv = (void (KHRONOS_APIENTRY *)(const GLfloat *))tunisGLGetProcAddress("glTexCoord4fv");
    tunisGL.tunisTexCoord4hNV = (void (KHRONOS_APIENTRY *)(GLhalfNV, GLhalfNV, GLhalfNV, GLhalfNV))tunisGLGetProcAddress("glTexCoord4hNV");
    tunisGL.tunisTexCoord4hvNV = (void (KHRONOS_APIENTRY *)(const GLhalfNV *))tunisGLGetProcAddress("glTexCoord4hvNV");
    tunisGL.tunisTexCoord4i = (void (KHRONOS_APIENTRY *)(GLint, GLint, GLint, GLint))tunisGLGetProcAddress("glTexCoord4i");
    tunisGL.tunisTexCoord4iv = (void (KHRONOS_APIENTRY *)(const GLint *))tunisGLGetProcAddress("glTexCoord4iv");
    tunisGL.tunisTexCoord4s = (void (KHRONOS_APIENTRY *)(GLshort, GLshort, GLshort, GLshort))tunisGLGetProcAddress("glTexCoord4s");
    tunisGL.tunisTexCoord4sv = (void (KHRONOS_APIENTRY *)(const GLshort *))tunisGLGetProcAddress("glTexCoord4sv");
    tunisGL.tunisTexCoord4xOES = (void (KHRONOS_APIENTRY *)(GLfixed, GLfixed, GLfixed, GLfixed))tunisGLGetProcAddress("glTexCoord4xOES");
    tunisGL.tunisTexCoord4xvOES = (void (KHRONOS_APIENTRY *)(const GLfixed *))tunisGLGetProcAddress("glTexCoord4xvOES");
    tunisGL.tunisTexCoordFormatNV = (void (KHRONOS_APIENTRY *)(GLint, GLenum, GLsizei))tunisGLGetProcAddress("glTexCoordFormatNV");
    tunisGL.tunisTexCoordP1ui = (void (KHRONOS_APIENTRY *)(GLenum, GLuint))tunisGLGetProcAddress("glTexCoordP1ui");
    tunisGL.tunisTexCoordP1uiv = (void (KHRONOS_APIENTRY *)(GLenum, const GLuint *))tunisGLGetProcAddress("glTexCoordP1uiv");
    tunisGL.tunisTexCoordP2ui = (void (KHRONOS_APIENTRY *)(GLenum, GLuint))tunisGLGetProcAddress("glTexCoordP2ui");
    tunisGL.tunisTexCoordP2uiv = (void (KHRONOS_APIENTRY *)(GLenum, const GLuint *))tunisGLGetProcAddress("glTexCoordP2uiv");
    tunisGL.tunisTexCoordP3ui = (void (KHRONOS_APIENTRY *)(GLenum, GLuint))tunisGLGetProcAddress("glTexCoordP3ui");
    tunisGL.tunisTexCoordP3uiv = (void (KHRONOS_APIENTRY *)(GLenum, const GLuint *))tunisGLGetProcAddress("glTexCoordP3uiv");
    tunisGL.tunisTexCoordP4ui = (void (KHRONOS_APIENTRY *)(GLenum, GLuint))tunisGLGetProcAddress("glTexCoordP4ui");
    tunisGL.tunisTexCoordP4uiv = (void (KHRONOS_APIENTRY *)(GLenum, const GLuint *))tunisGLGetProcAddress("glTexCoordP4uiv");
    tunisGL.tunisTexCoordPointer = (void (KHRONOS_APIENTRY *)(GLint, GLenum, GLsizei, const void *))tunisGLGetProcAddress("glTexCoordPointer");
    tunisGL.tunisTexCoordPointerEXT = (void (KHRONOS_APIENTRY *)(GLint, GLenum, GLsizei, GLsizei, const void *))tunisGLGetProcAddress("glTexCoordPointerEXT");
    tunisGL.tunisTexCoordPointerListIBM = (void (KHRONOS_APIENTRY *)(GLint, GLenum, GLint, const void **, GLint))tunisGLGetProcAddress("glTexCoordPointerListIBM");
    tunisGL.tunisTexCoordPointervINTEL = (void (KHRONOS_APIENTRY *)(GLint, GLenum, const void **))tunisGLGetProcAddress("glTexCoordPointervINTEL");
    tunisGL.tunisTexEnvf = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfloat))tunisGLGetProcAddress("glTexEnvf");
    tunisGL.tunisTexEnvfv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const GLfloat *))tunisGLGetProcAddress("glTexEnvfv");
    tunisGL.tunisTexEnvi = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint))tunisGLGetProcAddress("glTexEnvi");
    tunisGL.tunisTexEnviv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const GLint *))tunisGLGetProcAddress("glTexEnviv");
    tunisGL.tunisTexEnvx = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfixed))tunisGLGetProcAddress("glTexEnvx");
    tunisGL.tunisTexEnvxOES = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfixed))tunisGLGetProcAddress("glTexEnvxOES");
    tunisGL.tunisTexEnvxv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const GLfixed *))tunisGLGetProcAddress("glTexEnvxv");
    tunisGL.tunisTexEnvxvOES = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const GLfixed *))tunisGLGetProcAddress("glTexEnvxvOES");
    tunisGL.tunisTexFilterFuncSGIS = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLsizei, const GLfloat *))tunisGLGetProcAddress("glTexFilterFuncSGIS");
    tunisGL.tunisTexGend = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLdouble))tunisGLGetProcAddress("glTexGend");
    tunisGL.tunisTexGendv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const GLdouble *))tunisGLGetProcAddress("glTexGendv");
    tunisGL.tunisTexGenf = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfloat))tunisGLGetProcAddress("glTexGenf");
    tunisGL.tunisTexGenfOES = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfloat))tunisGLGetProcAddress("glTexGenfOES");
    tunisGL.tunisTexGenfv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const GLfloat *))tunisGLGetProcAddress("glTexGenfv");
    tunisGL.tunisTexGenfvOES = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const GLfloat *))tunisGLGetProcAddress("glTexGenfvOES");
    tunisGL.tunisTexGeni = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint))tunisGLGetProcAddress("glTexGeni");
    tunisGL.tunisTexGeniOES = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint))tunisGLGetProcAddress("glTexGeniOES");
    tunisGL.tunisTexGeniv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const GLint *))tunisGLGetProcAddress("glTexGeniv");
    tunisGL.tunisTexGenivOES = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const GLint *))tunisGLGetProcAddress("glTexGenivOES");
    tunisGL.tunisTexGenxOES = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfixed))tunisGLGetProcAddress("glTexGenxOES");
    tunisGL.tunisTexGenxvOES = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const GLfixed *))tunisGLGetProcAddress("glTexGenxvOES");
    tunisGL.tunisTexImage1D = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLint, GLsizei, GLint, GLenum, GLenum, const void *))tunisGLGetProcAddress("glTexImage1D");
    tunisGL.tunisTexImage2D = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLint, GLsizei, GLsizei, GLint, GLenum, GLenum, const void *))tunisGLGetProcAddress("glTexImage2D");
    tunisGL.tunisTexImage2DMultisample = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLboolean))tunisGLGetProcAddress("glTexImage2DMultisample");
    tunisGL.tunisTexImage2DMultisampleCoverageNV = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLsizei, GLint, GLsizei, GLsizei, GLboolean))tunisGLGetProcAddress("glTexImage2DMultisampleCoverageNV");
    tunisGL.tunisTexImage3D = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLint, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, const void *))tunisGLGetProcAddress("glTexImage3D");
    tunisGL.tunisTexImage3DEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, const void *))tunisGLGetProcAddress("glTexImage3DEXT");
    tunisGL.tunisTexImage3DMultisample = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean))tunisGLGetProcAddress("glTexImage3DMultisample");
    tunisGL.tunisTexImage3DMultisampleCoverageNV = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLsizei, GLint, GLsizei, GLsizei, GLsizei, GLboolean))tunisGLGetProcAddress("glTexImage3DMultisampleCoverageNV");
    tunisGL.tunisTexImage3DOES = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, const void *))tunisGLGetProcAddress("glTexImage3DOES");
    tunisGL.tunisTexImage4DSGIS = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, const void *))tunisGLGetProcAddress("glTexImage4DSGIS");
    tunisGL.tunisTexPageCommitmentARB = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLboolean))tunisGLGetProcAddress("glTexPageCommitmentARB");
    tunisGL.tunisTexPageCommitmentEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLboolean))tunisGLGetProcAddress("glTexPageCommitmentEXT");
    tunisGL.tunisTexParameterIiv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const GLint *))tunisGLGetProcAddress("glTexParameterIiv");
    tunisGL.tunisTexParameterIivEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const GLint *))tunisGLGetProcAddress("glTexParameterIivEXT");
    tunisGL.tunisTexParameterIivOES = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const GLint *))tunisGLGetProcAddress("glTexParameterIivOES");
    tunisGL.tunisTexParameterIuiv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const GLuint *))tunisGLGetProcAddress("glTexParameterIuiv");
    tunisGL.tunisTexParameterIuivEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const GLuint *))tunisGLGetProcAddress("glTexParameterIuivEXT");
    tunisGL.tunisTexParameterIuivOES = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const GLuint *))tunisGLGetProcAddress("glTexParameterIuivOES");
    tunisGL.tunisTexParameterf = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfloat))tunisGLGetProcAddress("glTexParameterf");
    tunisGL.tunisTexParameterfv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const GLfloat *))tunisGLGetProcAddress("glTexParameterfv");
    tunisGL.tunisTexParameteri = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint))tunisGLGetProcAddress("glTexParameteri");
    tunisGL.tunisTexParameteriv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const GLint *))tunisGLGetProcAddress("glTexParameteriv");
    tunisGL.tunisTexParameterx = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfixed))tunisGLGetProcAddress("glTexParameterx");
    tunisGL.tunisTexParameterxOES = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfixed))tunisGLGetProcAddress("glTexParameterxOES");
    tunisGL.tunisTexParameterxv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const GLfixed *))tunisGLGetProcAddress("glTexParameterxv");
    tunisGL.tunisTexParameterxvOES = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const GLfixed *))tunisGLGetProcAddress("glTexParameterxvOES");
    tunisGL.tunisTexRenderbufferNV = (void (KHRONOS_APIENTRY *)(GLenum, GLuint))tunisGLGetProcAddress("glTexRenderbufferNV");
    tunisGL.tunisTexStorage1D = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLenum, GLsizei))tunisGLGetProcAddress("glTexStorage1D");
    tunisGL.tunisTexStorage1DEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLenum, GLsizei))tunisGLGetProcAddress("glTexStorage1DEXT");
    tunisGL.tunisTexStorage2D = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLenum, GLsizei, GLsizei))tunisGLGetProcAddress("glTexStorage2D");
    tunisGL.tunisTexStorage2DEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLenum, GLsizei, GLsizei))tunisGLGetProcAddress("glTexStorage2DEXT");
    tunisGL.tunisTexStorage2DMultisample = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLboolean))tunisGLGetProcAddress("glTexStorage2DMultisample");
    tunisGL.tunisTexStorage3D = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei))tunisGLGetProcAddress("glTexStorage3D");
    tunisGL.tunisTexStorage3DEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei))tunisGLGetProcAddress("glTexStorage3DEXT");
    tunisGL.tunisTexStorage3DMultisample = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean))tunisGLGetProcAddress("glTexStorage3DMultisample");
    tunisGL.tunisTexStorage3DMultisampleOES = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean))tunisGLGetProcAddress("glTexStorage3DMultisampleOES");
    tunisGL.tunisTexStorageMem1DEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLenum, GLsizei, GLuint, GLuint64))tunisGLGetProcAddress("glTexStorageMem1DEXT");
    tunisGL.tunisTexStorageMem2DEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLuint, GLuint64))tunisGLGetProcAddress("glTexStorageMem2DEXT");
    tunisGL.tunisTexStorageMem2DMultisampleEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLboolean, GLuint, GLuint64))tunisGLGetProcAddress("glTexStorageMem2DMultisampleEXT");
    tunisGL.tunisTexStorageMem3DEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLuint, GLuint64))tunisGLGetProcAddress("glTexStorageMem3DEXT");
    tunisGL.tunisTexStorageMem3DMultisampleEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean, GLuint, GLuint64))tunisGLGetProcAddress("glTexStorageMem3DMultisampleEXT");
    tunisGL.tunisTexStorageSparseAMD = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLsizei, GLsizei, GLsizei, GLsizei, GLbitfield))tunisGLGetProcAddress("glTexStorageSparseAMD");
    tunisGL.tunisTexSubImage1D = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLint, GLsizei, GLenum, GLenum, const void *))tunisGLGetProcAddress("glTexSubImage1D");
    tunisGL.tunisTexSubImage1DEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLint, GLsizei, GLenum, GLenum, const void *))tunisGLGetProcAddress("glTexSubImage1DEXT");
    tunisGL.tunisTexSubImage2D = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, const void *))tunisGLGetProcAddress("glTexSubImage2D");
    tunisGL.tunisTexSubImage2DEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, const void *))tunisGLGetProcAddress("glTexSubImage2DEXT");
    tunisGL.tunisTexSubImage3D = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, const void *))tunisGLGetProcAddress("glTexSubImage3D");
    tunisGL.tunisTexSubImage3DEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, const void *))tunisGLGetProcAddress("glTexSubImage3DEXT");
    tunisGL.tunisTexSubImage3DOES = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, const void *))tunisGLGetProcAddress("glTexSubImage3DOES");
    tunisGL.tunisTexSubImage4DSGIS = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLsizei, GLenum, GLenum, const void *))tunisGLGetProcAddress("glTexSubImage4DSGIS");
    tunisGL.tunisTextureAttachMemoryNV = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLuint64))tunisGLGetProcAddress("glTextureAttachMemoryNV");
    tunisGL.tunisTextureBarrier = (void (KHRONOS_APIENTRY *)(void))tunisGLGetProcAddress("glTextureBarrier");
    tunisGL.tunisTextureBarrierNV = (void (KHRONOS_APIENTRY *)(void))tunisGLGetProcAddress("glTextureBarrierNV");
    tunisGL.tunisTextureBuffer = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLuint))tunisGLGetProcAddress("glTextureBuffer");
    tunisGL.tunisTextureBufferEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLenum, GLuint))tunisGLGetProcAddress("glTextureBufferEXT");
    tunisGL.tunisTextureBufferRange = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLuint, GLintptr, GLsizeiptr))tunisGLGetProcAddress("glTextureBufferRange");
    tunisGL.tunisTextureBufferRangeEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLenum, GLuint, GLintptr, GLsizeiptr))tunisGLGetProcAddress("glTextureBufferRangeEXT");
    tunisGL.tunisTextureColorMaskSGIS = (void (KHRONOS_APIENTRY *)(GLboolean, GLboolean, GLboolean, GLboolean))tunisGLGetProcAddress("glTextureColorMaskSGIS");
    tunisGL.tunisTextureFoveationParametersQCOM = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glTextureFoveationParametersQCOM");
    tunisGL.tunisTextureImage1DEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint, GLint, GLsizei, GLint, GLenum, GLenum, const void *))tunisGLGetProcAddress("glTextureImage1DEXT");
    tunisGL.tunisTextureImage2DEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint, GLint, GLsizei, GLsizei, GLint, GLenum, GLenum, const void *))tunisGLGetProcAddress("glTextureImage2DEXT");
    tunisGL.tunisTextureImage2DMultisampleCoverageNV = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLsizei, GLsizei, GLint, GLsizei, GLsizei, GLboolean))tunisGLGetProcAddress("glTextureImage2DMultisampleCoverageNV");
    tunisGL.tunisTextureImage2DMultisampleNV = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLsizei, GLint, GLsizei, GLsizei, GLboolean))tunisGLGetProcAddress("glTextureImage2DMultisampleNV");
    tunisGL.tunisTextureImage3DEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint, GLint, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, const void *))tunisGLGetProcAddress("glTextureImage3DEXT");
    tunisGL.tunisTextureImage3DMultisampleCoverageNV = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLsizei, GLsizei, GLint, GLsizei, GLsizei, GLsizei, GLboolean))tunisGLGetProcAddress("glTextureImage3DMultisampleCoverageNV");
    tunisGL.tunisTextureImage3DMultisampleNV = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLsizei, GLint, GLsizei, GLsizei, GLsizei, GLboolean))tunisGLGetProcAddress("glTextureImage3DMultisampleNV");
    tunisGL.tunisTextureLightEXT = (void (KHRONOS_APIENTRY *)(GLenum))tunisGLGetProcAddress("glTextureLightEXT");
    tunisGL.tunisTextureMaterialEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum))tunisGLGetProcAddress("glTextureMaterialEXT");
    tunisGL.tunisTextureNormalEXT = (void (KHRONOS_APIENTRY *)(GLenum))tunisGLGetProcAddress("glTextureNormalEXT");
    tunisGL.tunisTexturePageCommitmentEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLboolean))tunisGLGetProcAddress("glTexturePageCommitmentEXT");
    tunisGL.tunisTextureParameterIiv = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, const GLint *))tunisGLGetProcAddress("glTextureParameterIiv");
    tunisGL.tunisTextureParameterIivEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLenum, const GLint *))tunisGLGetProcAddress("glTextureParameterIivEXT");
    tunisGL.tunisTextureParameterIuiv = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, const GLuint *))tunisGLGetProcAddress("glTextureParameterIuiv");
    tunisGL.tunisTextureParameterIuivEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLenum, const GLuint *))tunisGLGetProcAddress("glTextureParameterIuivEXT");
    tunisGL.tunisTextureParameterf = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLfloat))tunisGLGetProcAddress("glTextureParameterf");
    tunisGL.tunisTextureParameterfEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLenum, GLfloat))tunisGLGetProcAddress("glTextureParameterfEXT");
    tunisGL.tunisTextureParameterfv = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, const GLfloat *))tunisGLGetProcAddress("glTextureParameterfv");
    tunisGL.tunisTextureParameterfvEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLenum, const GLfloat *))tunisGLGetProcAddress("glTextureParameterfvEXT");
    tunisGL.tunisTextureParameteri = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint))tunisGLGetProcAddress("glTextureParameteri");
    tunisGL.tunisTextureParameteriEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLenum, GLint))tunisGLGetProcAddress("glTextureParameteriEXT");
    tunisGL.tunisTextureParameteriv = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, const GLint *))tunisGLGetProcAddress("glTextureParameteriv");
    tunisGL.tunisTextureParameterivEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLenum, const GLint *))tunisGLGetProcAddress("glTextureParameterivEXT");
    tunisGL.tunisTextureRangeAPPLE = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, const void *))tunisGLGetProcAddress("glTextureRangeAPPLE");
    tunisGL.tunisTextureRenderbufferEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLuint))tunisGLGetProcAddress("glTextureRenderbufferEXT");
    tunisGL.tunisTextureStorage1D = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, GLenum, GLsizei))tunisGLGetProcAddress("glTextureStorage1D");
    tunisGL.tunisTextureStorage1DEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLsizei, GLenum, GLsizei))tunisGLGetProcAddress("glTextureStorage1DEXT");
    tunisGL.tunisTextureStorage2D = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, GLenum, GLsizei, GLsizei))tunisGLGetProcAddress("glTextureStorage2D");
    tunisGL.tunisTextureStorage2DEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLsizei, GLenum, GLsizei, GLsizei))tunisGLGetProcAddress("glTextureStorage2DEXT");
    tunisGL.tunisTextureStorage2DMultisample = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLboolean))tunisGLGetProcAddress("glTextureStorage2DMultisample");
    tunisGL.tunisTextureStorage2DMultisampleEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLboolean))tunisGLGetProcAddress("glTextureStorage2DMultisampleEXT");
    tunisGL.tunisTextureStorage3D = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLsizei))tunisGLGetProcAddress("glTextureStorage3D");
    tunisGL.tunisTextureStorage3DEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei))tunisGLGetProcAddress("glTextureStorage3DEXT");
    tunisGL.tunisTextureStorage3DMultisample = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean))tunisGLGetProcAddress("glTextureStorage3DMultisample");
    tunisGL.tunisTextureStorage3DMultisampleEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean))tunisGLGetProcAddress("glTextureStorage3DMultisampleEXT");
    tunisGL.tunisTextureStorageMem1DEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, GLenum, GLsizei, GLuint, GLuint64))tunisGLGetProcAddress("glTextureStorageMem1DEXT");
    tunisGL.tunisTextureStorageMem2DEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLuint, GLuint64))tunisGLGetProcAddress("glTextureStorageMem2DEXT");
    tunisGL.tunisTextureStorageMem2DMultisampleEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLboolean, GLuint, GLuint64))tunisGLGetProcAddress("glTextureStorageMem2DMultisampleEXT");
    tunisGL.tunisTextureStorageMem3DEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLuint, GLuint64))tunisGLGetProcAddress("glTextureStorageMem3DEXT");
    tunisGL.tunisTextureStorageMem3DMultisampleEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean, GLuint, GLuint64))tunisGLGetProcAddress("glTextureStorageMem3DMultisampleEXT");
    tunisGL.tunisTextureStorageSparseAMD = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLenum, GLsizei, GLsizei, GLsizei, GLsizei, GLbitfield))tunisGLGetProcAddress("glTextureStorageSparseAMD");
    tunisGL.tunisTextureSubImage1D = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLint, GLsizei, GLenum, GLenum, const void *))tunisGLGetProcAddress("glTextureSubImage1D");
    tunisGL.tunisTextureSubImage1DEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint, GLint, GLsizei, GLenum, GLenum, const void *))tunisGLGetProcAddress("glTextureSubImage1DEXT");
    tunisGL.tunisTextureSubImage2D = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, const void *))tunisGLGetProcAddress("glTextureSubImage2D");
    tunisGL.tunisTextureSubImage2DEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, const void *))tunisGLGetProcAddress("glTextureSubImage2DEXT");
    tunisGL.tunisTextureSubImage3D = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, const void *))tunisGLGetProcAddress("glTextureSubImage3D");
    tunisGL.tunisTextureSubImage3DEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, const void *))tunisGLGetProcAddress("glTextureSubImage3DEXT");
    tunisGL.tunisTextureView = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLuint, GLenum, GLuint, GLuint, GLuint, GLuint))tunisGLGetProcAddress("glTextureView");
    tunisGL.tunisTextureViewEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLuint, GLenum, GLuint, GLuint, GLuint, GLuint))tunisGLGetProcAddress("glTextureViewEXT");
    tunisGL.tunisTextureViewOES = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLuint, GLenum, GLuint, GLuint, GLuint, GLuint))tunisGLGetProcAddress("glTextureViewOES");
    tunisGL.tunisTrackMatrixNV = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLenum, GLenum))tunisGLGetProcAddress("glTrackMatrixNV");
    tunisGL.tunisTransformFeedbackAttribsNV = (void (KHRONOS_APIENTRY *)(GLsizei, const GLint *, GLenum))tunisGLGetProcAddress("glTransformFeedbackAttribsNV");
    tunisGL.tunisTransformFeedbackBufferBase = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLuint))tunisGLGetProcAddress("glTransformFeedbackBufferBase");
    tunisGL.tunisTransformFeedbackBufferRange = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLuint, GLintptr, GLsizeiptr))tunisGLGetProcAddress("glTransformFeedbackBufferRange");
    tunisGL.tunisTransformFeedbackStreamAttribsNV = (void (KHRONOS_APIENTRY *)(GLsizei, const GLint *, GLsizei, const GLint *, GLenum))tunisGLGetProcAddress("glTransformFeedbackStreamAttribsNV");
    tunisGL.tunisTransformFeedbackVaryings = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, const GLchar *const*, GLenum))tunisGLGetProcAddress("glTransformFeedbackVaryings");
    tunisGL.tunisTransformFeedbackVaryingsEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, const GLchar *const*, GLenum))tunisGLGetProcAddress("glTransformFeedbackVaryingsEXT");
    tunisGL.tunisTransformFeedbackVaryingsNV = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, const GLint *, GLenum))tunisGLGetProcAddress("glTransformFeedbackVaryingsNV");
    tunisGL.tunisTransformPathNV = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLenum, const GLfloat *))tunisGLGetProcAddress("glTransformPathNV");
    tunisGL.tunisTranslated = (void (KHRONOS_APIENTRY *)(GLdouble, GLdouble, GLdouble))tunisGLGetProcAddress("glTranslated");
    tunisGL.tunisTranslatef = (void (KHRONOS_APIENTRY *)(GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glTranslatef");
    tunisGL.tunisTranslatex = (void (KHRONOS_APIENTRY *)(GLfixed, GLfixed, GLfixed))tunisGLGetProcAddress("glTranslatex");
    tunisGL.tunisTranslatexOES = (void (KHRONOS_APIENTRY *)(GLfixed, GLfixed, GLfixed))tunisGLGetProcAddress("glTranslatexOES");
    tunisGL.tunisUniform1d = (void (KHRONOS_APIENTRY *)(GLint, GLdouble))tunisGLGetProcAddress("glUniform1d");
    tunisGL.tunisUniform1dv = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, const GLdouble *))tunisGLGetProcAddress("glUniform1dv");
    tunisGL.tunisUniform1f = (void (KHRONOS_APIENTRY *)(GLint, GLfloat))tunisGLGetProcAddress("glUniform1f");
    tunisGL.tunisUniform1fARB = (void (KHRONOS_APIENTRY *)(GLint, GLfloat))tunisGLGetProcAddress("glUniform1fARB");
    tunisGL.tunisUniform1fv = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, const GLfloat *))tunisGLGetProcAddress("glUniform1fv");
    tunisGL.tunisUniform1fvARB = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, const GLfloat *))tunisGLGetProcAddress("glUniform1fvARB");
    tunisGL.tunisUniform1i = (void (KHRONOS_APIENTRY *)(GLint, GLint))tunisGLGetProcAddress("glUniform1i");
    tunisGL.tunisUniform1i64ARB = (void (KHRONOS_APIENTRY *)(GLint, GLint64))tunisGLGetProcAddress("glUniform1i64ARB");
    tunisGL.tunisUniform1i64NV = (void (KHRONOS_APIENTRY *)(GLint, GLint64EXT))tunisGLGetProcAddress("glUniform1i64NV");
    tunisGL.tunisUniform1i64vARB = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, const GLint64 *))tunisGLGetProcAddress("glUniform1i64vARB");
    tunisGL.tunisUniform1i64vNV = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, const GLint64EXT *))tunisGLGetProcAddress("glUniform1i64vNV");
    tunisGL.tunisUniform1iARB = (void (KHRONOS_APIENTRY *)(GLint, GLint))tunisGLGetProcAddress("glUniform1iARB");
    tunisGL.tunisUniform1iv = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, const GLint *))tunisGLGetProcAddress("glUniform1iv");
    tunisGL.tunisUniform1ivARB = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, const GLint *))tunisGLGetProcAddress("glUniform1ivARB");
    tunisGL.tunisUniform1ui = (void (KHRONOS_APIENTRY *)(GLint, GLuint))tunisGLGetProcAddress("glUniform1ui");
    tunisGL.tunisUniform1ui64ARB = (void (KHRONOS_APIENTRY *)(GLint, GLuint64))tunisGLGetProcAddress("glUniform1ui64ARB");
    tunisGL.tunisUniform1ui64NV = (void (KHRONOS_APIENTRY *)(GLint, GLuint64EXT))tunisGLGetProcAddress("glUniform1ui64NV");
    tunisGL.tunisUniform1ui64vARB = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, const GLuint64 *))tunisGLGetProcAddress("glUniform1ui64vARB");
    tunisGL.tunisUniform1ui64vNV = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, const GLuint64EXT *))tunisGLGetProcAddress("glUniform1ui64vNV");
    tunisGL.tunisUniform1uiEXT = (void (KHRONOS_APIENTRY *)(GLint, GLuint))tunisGLGetProcAddress("glUniform1uiEXT");
    tunisGL.tunisUniform1uiv = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, const GLuint *))tunisGLGetProcAddress("glUniform1uiv");
    tunisGL.tunisUniform1uivEXT = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, const GLuint *))tunisGLGetProcAddress("glUniform1uivEXT");
    tunisGL.tunisUniform2d = (void (KHRONOS_APIENTRY *)(GLint, GLdouble, GLdouble))tunisGLGetProcAddress("glUniform2d");
    tunisGL.tunisUniform2dv = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, const GLdouble *))tunisGLGetProcAddress("glUniform2dv");
    tunisGL.tunisUniform2f = (void (KHRONOS_APIENTRY *)(GLint, GLfloat, GLfloat))tunisGLGetProcAddress("glUniform2f");
    tunisGL.tunisUniform2fARB = (void (KHRONOS_APIENTRY *)(GLint, GLfloat, GLfloat))tunisGLGetProcAddress("glUniform2fARB");
    tunisGL.tunisUniform2fv = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, const GLfloat *))tunisGLGetProcAddress("glUniform2fv");
    tunisGL.tunisUniform2fvARB = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, const GLfloat *))tunisGLGetProcAddress("glUniform2fvARB");
    tunisGL.tunisUniform2i = (void (KHRONOS_APIENTRY *)(GLint, GLint, GLint))tunisGLGetProcAddress("glUniform2i");
    tunisGL.tunisUniform2i64ARB = (void (KHRONOS_APIENTRY *)(GLint, GLint64, GLint64))tunisGLGetProcAddress("glUniform2i64ARB");
    tunisGL.tunisUniform2i64NV = (void (KHRONOS_APIENTRY *)(GLint, GLint64EXT, GLint64EXT))tunisGLGetProcAddress("glUniform2i64NV");
    tunisGL.tunisUniform2i64vARB = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, const GLint64 *))tunisGLGetProcAddress("glUniform2i64vARB");
    tunisGL.tunisUniform2i64vNV = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, const GLint64EXT *))tunisGLGetProcAddress("glUniform2i64vNV");
    tunisGL.tunisUniform2iARB = (void (KHRONOS_APIENTRY *)(GLint, GLint, GLint))tunisGLGetProcAddress("glUniform2iARB");
    tunisGL.tunisUniform2iv = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, const GLint *))tunisGLGetProcAddress("glUniform2iv");
    tunisGL.tunisUniform2ivARB = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, const GLint *))tunisGLGetProcAddress("glUniform2ivARB");
    tunisGL.tunisUniform2ui = (void (KHRONOS_APIENTRY *)(GLint, GLuint, GLuint))tunisGLGetProcAddress("glUniform2ui");
    tunisGL.tunisUniform2ui64ARB = (void (KHRONOS_APIENTRY *)(GLint, GLuint64, GLuint64))tunisGLGetProcAddress("glUniform2ui64ARB");
    tunisGL.tunisUniform2ui64NV = (void (KHRONOS_APIENTRY *)(GLint, GLuint64EXT, GLuint64EXT))tunisGLGetProcAddress("glUniform2ui64NV");
    tunisGL.tunisUniform2ui64vARB = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, const GLuint64 *))tunisGLGetProcAddress("glUniform2ui64vARB");
    tunisGL.tunisUniform2ui64vNV = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, const GLuint64EXT *))tunisGLGetProcAddress("glUniform2ui64vNV");
    tunisGL.tunisUniform2uiEXT = (void (KHRONOS_APIENTRY *)(GLint, GLuint, GLuint))tunisGLGetProcAddress("glUniform2uiEXT");
    tunisGL.tunisUniform2uiv = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, const GLuint *))tunisGLGetProcAddress("glUniform2uiv");
    tunisGL.tunisUniform2uivEXT = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, const GLuint *))tunisGLGetProcAddress("glUniform2uivEXT");
    tunisGL.tunisUniform3d = (void (KHRONOS_APIENTRY *)(GLint, GLdouble, GLdouble, GLdouble))tunisGLGetProcAddress("glUniform3d");
    tunisGL.tunisUniform3dv = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, const GLdouble *))tunisGLGetProcAddress("glUniform3dv");
    tunisGL.tunisUniform3f = (void (KHRONOS_APIENTRY *)(GLint, GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glUniform3f");
    tunisGL.tunisUniform3fARB = (void (KHRONOS_APIENTRY *)(GLint, GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glUniform3fARB");
    tunisGL.tunisUniform3fv = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, const GLfloat *))tunisGLGetProcAddress("glUniform3fv");
    tunisGL.tunisUniform3fvARB = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, const GLfloat *))tunisGLGetProcAddress("glUniform3fvARB");
    tunisGL.tunisUniform3i = (void (KHRONOS_APIENTRY *)(GLint, GLint, GLint, GLint))tunisGLGetProcAddress("glUniform3i");
    tunisGL.tunisUniform3i64ARB = (void (KHRONOS_APIENTRY *)(GLint, GLint64, GLint64, GLint64))tunisGLGetProcAddress("glUniform3i64ARB");
    tunisGL.tunisUniform3i64NV = (void (KHRONOS_APIENTRY *)(GLint, GLint64EXT, GLint64EXT, GLint64EXT))tunisGLGetProcAddress("glUniform3i64NV");
    tunisGL.tunisUniform3i64vARB = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, const GLint64 *))tunisGLGetProcAddress("glUniform3i64vARB");
    tunisGL.tunisUniform3i64vNV = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, const GLint64EXT *))tunisGLGetProcAddress("glUniform3i64vNV");
    tunisGL.tunisUniform3iARB = (void (KHRONOS_APIENTRY *)(GLint, GLint, GLint, GLint))tunisGLGetProcAddress("glUniform3iARB");
    tunisGL.tunisUniform3iv = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, const GLint *))tunisGLGetProcAddress("glUniform3iv");
    tunisGL.tunisUniform3ivARB = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, const GLint *))tunisGLGetProcAddress("glUniform3ivARB");
    tunisGL.tunisUniform3ui = (void (KHRONOS_APIENTRY *)(GLint, GLuint, GLuint, GLuint))tunisGLGetProcAddress("glUniform3ui");
    tunisGL.tunisUniform3ui64ARB = (void (KHRONOS_APIENTRY *)(GLint, GLuint64, GLuint64, GLuint64))tunisGLGetProcAddress("glUniform3ui64ARB");
    tunisGL.tunisUniform3ui64NV = (void (KHRONOS_APIENTRY *)(GLint, GLuint64EXT, GLuint64EXT, GLuint64EXT))tunisGLGetProcAddress("glUniform3ui64NV");
    tunisGL.tunisUniform3ui64vARB = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, const GLuint64 *))tunisGLGetProcAddress("glUniform3ui64vARB");
    tunisGL.tunisUniform3ui64vNV = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, const GLuint64EXT *))tunisGLGetProcAddress("glUniform3ui64vNV");
    tunisGL.tunisUniform3uiEXT = (void (KHRONOS_APIENTRY *)(GLint, GLuint, GLuint, GLuint))tunisGLGetProcAddress("glUniform3uiEXT");
    tunisGL.tunisUniform3uiv = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, const GLuint *))tunisGLGetProcAddress("glUniform3uiv");
    tunisGL.tunisUniform3uivEXT = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, const GLuint *))tunisGLGetProcAddress("glUniform3uivEXT");
    tunisGL.tunisUniform4d = (void (KHRONOS_APIENTRY *)(GLint, GLdouble, GLdouble, GLdouble, GLdouble))tunisGLGetProcAddress("glUniform4d");
    tunisGL.tunisUniform4dv = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, const GLdouble *))tunisGLGetProcAddress("glUniform4dv");
    tunisGL.tunisUniform4f = (void (KHRONOS_APIENTRY *)(GLint, GLfloat, GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glUniform4f");
    tunisGL.tunisUniform4fARB = (void (KHRONOS_APIENTRY *)(GLint, GLfloat, GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glUniform4fARB");
    tunisGL.tunisUniform4fv = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, const GLfloat *))tunisGLGetProcAddress("glUniform4fv");
    tunisGL.tunisUniform4fvARB = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, const GLfloat *))tunisGLGetProcAddress("glUniform4fvARB");
    tunisGL.tunisUniform4i = (void (KHRONOS_APIENTRY *)(GLint, GLint, GLint, GLint, GLint))tunisGLGetProcAddress("glUniform4i");
    tunisGL.tunisUniform4i64ARB = (void (KHRONOS_APIENTRY *)(GLint, GLint64, GLint64, GLint64, GLint64))tunisGLGetProcAddress("glUniform4i64ARB");
    tunisGL.tunisUniform4i64NV = (void (KHRONOS_APIENTRY *)(GLint, GLint64EXT, GLint64EXT, GLint64EXT, GLint64EXT))tunisGLGetProcAddress("glUniform4i64NV");
    tunisGL.tunisUniform4i64vARB = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, const GLint64 *))tunisGLGetProcAddress("glUniform4i64vARB");
    tunisGL.tunisUniform4i64vNV = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, const GLint64EXT *))tunisGLGetProcAddress("glUniform4i64vNV");
    tunisGL.tunisUniform4iARB = (void (KHRONOS_APIENTRY *)(GLint, GLint, GLint, GLint, GLint))tunisGLGetProcAddress("glUniform4iARB");
    tunisGL.tunisUniform4iv = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, const GLint *))tunisGLGetProcAddress("glUniform4iv");
    tunisGL.tunisUniform4ivARB = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, const GLint *))tunisGLGetProcAddress("glUniform4ivARB");
    tunisGL.tunisUniform4ui = (void (KHRONOS_APIENTRY *)(GLint, GLuint, GLuint, GLuint, GLuint))tunisGLGetProcAddress("glUniform4ui");
    tunisGL.tunisUniform4ui64ARB = (void (KHRONOS_APIENTRY *)(GLint, GLuint64, GLuint64, GLuint64, GLuint64))tunisGLGetProcAddress("glUniform4ui64ARB");
    tunisGL.tunisUniform4ui64NV = (void (KHRONOS_APIENTRY *)(GLint, GLuint64EXT, GLuint64EXT, GLuint64EXT, GLuint64EXT))tunisGLGetProcAddress("glUniform4ui64NV");
    tunisGL.tunisUniform4ui64vARB = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, const GLuint64 *))tunisGLGetProcAddress("glUniform4ui64vARB");
    tunisGL.tunisUniform4ui64vNV = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, const GLuint64EXT *))tunisGLGetProcAddress("glUniform4ui64vNV");
    tunisGL.tunisUniform4uiEXT = (void (KHRONOS_APIENTRY *)(GLint, GLuint, GLuint, GLuint, GLuint))tunisGLGetProcAddress("glUniform4uiEXT");
    tunisGL.tunisUniform4uiv = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, const GLuint *))tunisGLGetProcAddress("glUniform4uiv");
    tunisGL.tunisUniform4uivEXT = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, const GLuint *))tunisGLGetProcAddress("glUniform4uivEXT");
    tunisGL.tunisUniformBlockBinding = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLuint))tunisGLGetProcAddress("glUniformBlockBinding");
    tunisGL.tunisUniformBufferEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLuint))tunisGLGetProcAddress("glUniformBufferEXT");
    tunisGL.tunisUniformHandleui64ARB = (void (KHRONOS_APIENTRY *)(GLint, GLuint64))tunisGLGetProcAddress("glUniformHandleui64ARB");
    tunisGL.tunisUniformHandleui64IMG = (void (KHRONOS_APIENTRY *)(GLint, GLuint64))tunisGLGetProcAddress("glUniformHandleui64IMG");
    tunisGL.tunisUniformHandleui64NV = (void (KHRONOS_APIENTRY *)(GLint, GLuint64))tunisGLGetProcAddress("glUniformHandleui64NV");
    tunisGL.tunisUniformHandleui64vARB = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, const GLuint64 *))tunisGLGetProcAddress("glUniformHandleui64vARB");
    tunisGL.tunisUniformHandleui64vIMG = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, const GLuint64 *))tunisGLGetProcAddress("glUniformHandleui64vIMG");
    tunisGL.tunisUniformHandleui64vNV = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, const GLuint64 *))tunisGLGetProcAddress("glUniformHandleui64vNV");
    tunisGL.tunisUniformMatrix2dv = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, GLboolean, const GLdouble *))tunisGLGetProcAddress("glUniformMatrix2dv");
    tunisGL.tunisUniformMatrix2fv = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, GLboolean, const GLfloat *))tunisGLGetProcAddress("glUniformMatrix2fv");
    tunisGL.tunisUniformMatrix2fvARB = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, GLboolean, const GLfloat *))tunisGLGetProcAddress("glUniformMatrix2fvARB");
    tunisGL.tunisUniformMatrix2x3dv = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, GLboolean, const GLdouble *))tunisGLGetProcAddress("glUniformMatrix2x3dv");
    tunisGL.tunisUniformMatrix2x3fv = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, GLboolean, const GLfloat *))tunisGLGetProcAddress("glUniformMatrix2x3fv");
    tunisGL.tunisUniformMatrix2x3fvNV = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, GLboolean, const GLfloat *))tunisGLGetProcAddress("glUniformMatrix2x3fvNV");
    tunisGL.tunisUniformMatrix2x4dv = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, GLboolean, const GLdouble *))tunisGLGetProcAddress("glUniformMatrix2x4dv");
    tunisGL.tunisUniformMatrix2x4fv = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, GLboolean, const GLfloat *))tunisGLGetProcAddress("glUniformMatrix2x4fv");
    tunisGL.tunisUniformMatrix2x4fvNV = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, GLboolean, const GLfloat *))tunisGLGetProcAddress("glUniformMatrix2x4fvNV");
    tunisGL.tunisUniformMatrix3dv = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, GLboolean, const GLdouble *))tunisGLGetProcAddress("glUniformMatrix3dv");
    tunisGL.tunisUniformMatrix3fv = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, GLboolean, const GLfloat *))tunisGLGetProcAddress("glUniformMatrix3fv");
    tunisGL.tunisUniformMatrix3fvARB = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, GLboolean, const GLfloat *))tunisGLGetProcAddress("glUniformMatrix3fvARB");
    tunisGL.tunisUniformMatrix3x2dv = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, GLboolean, const GLdouble *))tunisGLGetProcAddress("glUniformMatrix3x2dv");
    tunisGL.tunisUniformMatrix3x2fv = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, GLboolean, const GLfloat *))tunisGLGetProcAddress("glUniformMatrix3x2fv");
    tunisGL.tunisUniformMatrix3x2fvNV = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, GLboolean, const GLfloat *))tunisGLGetProcAddress("glUniformMatrix3x2fvNV");
    tunisGL.tunisUniformMatrix3x4dv = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, GLboolean, const GLdouble *))tunisGLGetProcAddress("glUniformMatrix3x4dv");
    tunisGL.tunisUniformMatrix3x4fv = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, GLboolean, const GLfloat *))tunisGLGetProcAddress("glUniformMatrix3x4fv");
    tunisGL.tunisUniformMatrix3x4fvNV = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, GLboolean, const GLfloat *))tunisGLGetProcAddress("glUniformMatrix3x4fvNV");
    tunisGL.tunisUniformMatrix4dv = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, GLboolean, const GLdouble *))tunisGLGetProcAddress("glUniformMatrix4dv");
    tunisGL.tunisUniformMatrix4fv = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, GLboolean, const GLfloat *))tunisGLGetProcAddress("glUniformMatrix4fv");
    tunisGL.tunisUniformMatrix4fvARB = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, GLboolean, const GLfloat *))tunisGLGetProcAddress("glUniformMatrix4fvARB");
    tunisGL.tunisUniformMatrix4x2dv = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, GLboolean, const GLdouble *))tunisGLGetProcAddress("glUniformMatrix4x2dv");
    tunisGL.tunisUniformMatrix4x2fv = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, GLboolean, const GLfloat *))tunisGLGetProcAddress("glUniformMatrix4x2fv");
    tunisGL.tunisUniformMatrix4x2fvNV = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, GLboolean, const GLfloat *))tunisGLGetProcAddress("glUniformMatrix4x2fvNV");
    tunisGL.tunisUniformMatrix4x3dv = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, GLboolean, const GLdouble *))tunisGLGetProcAddress("glUniformMatrix4x3dv");
    tunisGL.tunisUniformMatrix4x3fv = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, GLboolean, const GLfloat *))tunisGLGetProcAddress("glUniformMatrix4x3fv");
    tunisGL.tunisUniformMatrix4x3fvNV = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, GLboolean, const GLfloat *))tunisGLGetProcAddress("glUniformMatrix4x3fvNV");
    tunisGL.tunisUniformSubroutinesuiv = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, const GLuint *))tunisGLGetProcAddress("glUniformSubroutinesuiv");
    tunisGL.tunisUniformui64NV = (void (KHRONOS_APIENTRY *)(GLint, GLuint64EXT))tunisGLGetProcAddress("glUniformui64NV");
    tunisGL.tunisUniformui64vNV = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, const GLuint64EXT *))tunisGLGetProcAddress("glUniformui64vNV");
    tunisGL.tunisUnlockArraysEXT = (void (KHRONOS_APIENTRY *)(void))tunisGLGetProcAddress("glUnlockArraysEXT");
    tunisGL.tunisUnmapBuffer = (GLboolean(KHRONOS_APIENTRY *)(GLenum))tunisGLGetProcAddress("glUnmapBuffer");
    tunisGL.tunisUnmapBufferARB = (GLboolean(KHRONOS_APIENTRY *)(GLenum))tunisGLGetProcAddress("glUnmapBufferARB");
    tunisGL.tunisUnmapBufferOES = (GLboolean(KHRONOS_APIENTRY *)(GLenum))tunisGLGetProcAddress("glUnmapBufferOES");
    tunisGL.tunisUnmapNamedBuffer = (GLboolean(KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glUnmapNamedBuffer");
    tunisGL.tunisUnmapNamedBufferEXT = (GLboolean(KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glUnmapNamedBufferEXT");
    tunisGL.tunisUnmapObjectBufferATI = (void (KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glUnmapObjectBufferATI");
    tunisGL.tunisUnmapTexture2DINTEL = (void (KHRONOS_APIENTRY *)(GLuint, GLint))tunisGLGetProcAddress("glUnmapTexture2DINTEL");
    tunisGL.tunisUpdateObjectBufferATI = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLsizei, const void *, GLenum))tunisGLGetProcAddress("glUpdateObjectBufferATI");
    tunisGL.tunisUseProgram = (void (KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glUseProgram");
    tunisGL.tunisUseProgramObjectARB = (void (KHRONOS_APIENTRY *)(GLhandleARB))tunisGLGetProcAddress("glUseProgramObjectARB");
    tunisGL.tunisUseProgramStages = (void (KHRONOS_APIENTRY *)(GLuint, GLbitfield, GLuint))tunisGLGetProcAddress("glUseProgramStages");
    tunisGL.tunisUseProgramStagesEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLbitfield, GLuint))tunisGLGetProcAddress("glUseProgramStagesEXT");
    tunisGL.tunisUseShaderProgramEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLuint))tunisGLGetProcAddress("glUseShaderProgramEXT");
    tunisGL.tunisVDPAUFiniNV = (void (KHRONOS_APIENTRY *)(void))tunisGLGetProcAddress("glVDPAUFiniNV");
    tunisGL.tunisVDPAUGetSurfaceivNV = (void (KHRONOS_APIENTRY *)(GLvdpauSurfaceNV, GLenum, GLsizei, GLsizei *, GLint *))tunisGLGetProcAddress("glVDPAUGetSurfaceivNV");
    tunisGL.tunisVDPAUInitNV = (void (KHRONOS_APIENTRY *)(const void *, const void *))tunisGLGetProcAddress("glVDPAUInitNV");
    tunisGL.tunisVDPAUIsSurfaceNV = (GLboolean(KHRONOS_APIENTRY *)(GLvdpauSurfaceNV))tunisGLGetProcAddress("glVDPAUIsSurfaceNV");
    tunisGL.tunisVDPAUMapSurfacesNV = (void (KHRONOS_APIENTRY *)(GLsizei, const GLvdpauSurfaceNV *))tunisGLGetProcAddress("glVDPAUMapSurfacesNV");
    tunisGL.tunisVDPAURegisterOutputSurfaceNV = (GLvdpauSurfaceNV(KHRONOS_APIENTRY *)(const void *, GLenum, GLsizei, const GLuint *))tunisGLGetProcAddress("glVDPAURegisterOutputSurfaceNV");
    tunisGL.tunisVDPAURegisterVideoSurfaceNV = (GLvdpauSurfaceNV(KHRONOS_APIENTRY *)(const void *, GLenum, GLsizei, const GLuint *))tunisGLGetProcAddress("glVDPAURegisterVideoSurfaceNV");
    tunisGL.tunisVDPAUSurfaceAccessNV = (void (KHRONOS_APIENTRY *)(GLvdpauSurfaceNV, GLenum))tunisGLGetProcAddress("glVDPAUSurfaceAccessNV");
    tunisGL.tunisVDPAUUnmapSurfacesNV = (void (KHRONOS_APIENTRY *)(GLsizei, const GLvdpauSurfaceNV *))tunisGLGetProcAddress("glVDPAUUnmapSurfacesNV");
    tunisGL.tunisVDPAUUnregisterSurfaceNV = (void (KHRONOS_APIENTRY *)(GLvdpauSurfaceNV))tunisGLGetProcAddress("glVDPAUUnregisterSurfaceNV");
    tunisGL.tunisValidateProgram = (void (KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glValidateProgram");
    tunisGL.tunisValidateProgramARB = (void (KHRONOS_APIENTRY *)(GLhandleARB))tunisGLGetProcAddress("glValidateProgramARB");
    tunisGL.tunisValidateProgramPipeline = (void (KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glValidateProgramPipeline");
    tunisGL.tunisValidateProgramPipelineEXT = (void (KHRONOS_APIENTRY *)(GLuint))tunisGLGetProcAddress("glValidateProgramPipelineEXT");
    tunisGL.tunisVariantArrayObjectATI = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLsizei, GLuint, GLuint))tunisGLGetProcAddress("glVariantArrayObjectATI");
    tunisGL.tunisVariantPointerEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLuint, const void *))tunisGLGetProcAddress("glVariantPointerEXT");
    tunisGL.tunisVariantbvEXT = (void (KHRONOS_APIENTRY *)(GLuint, const GLbyte *))tunisGLGetProcAddress("glVariantbvEXT");
    tunisGL.tunisVariantdvEXT = (void (KHRONOS_APIENTRY *)(GLuint, const GLdouble *))tunisGLGetProcAddress("glVariantdvEXT");
    tunisGL.tunisVariantfvEXT = (void (KHRONOS_APIENTRY *)(GLuint, const GLfloat *))tunisGLGetProcAddress("glVariantfvEXT");
    tunisGL.tunisVariantivEXT = (void (KHRONOS_APIENTRY *)(GLuint, const GLint *))tunisGLGetProcAddress("glVariantivEXT");
    tunisGL.tunisVariantsvEXT = (void (KHRONOS_APIENTRY *)(GLuint, const GLshort *))tunisGLGetProcAddress("glVariantsvEXT");
    tunisGL.tunisVariantubvEXT = (void (KHRONOS_APIENTRY *)(GLuint, const GLubyte *))tunisGLGetProcAddress("glVariantubvEXT");
    tunisGL.tunisVariantuivEXT = (void (KHRONOS_APIENTRY *)(GLuint, const GLuint *))tunisGLGetProcAddress("glVariantuivEXT");
    tunisGL.tunisVariantusvEXT = (void (KHRONOS_APIENTRY *)(GLuint, const GLushort *))tunisGLGetProcAddress("glVariantusvEXT");
    tunisGL.tunisVertex2bOES = (void (KHRONOS_APIENTRY *)(GLbyte, GLbyte))tunisGLGetProcAddress("glVertex2bOES");
    tunisGL.tunisVertex2bvOES = (void (KHRONOS_APIENTRY *)(const GLbyte *))tunisGLGetProcAddress("glVertex2bvOES");
    tunisGL.tunisVertex2d = (void (KHRONOS_APIENTRY *)(GLdouble, GLdouble))tunisGLGetProcAddress("glVertex2d");
    tunisGL.tunisVertex2dv = (void (KHRONOS_APIENTRY *)(const GLdouble *))tunisGLGetProcAddress("glVertex2dv");
    tunisGL.tunisVertex2f = (void (KHRONOS_APIENTRY *)(GLfloat, GLfloat))tunisGLGetProcAddress("glVertex2f");
    tunisGL.tunisVertex2fv = (void (KHRONOS_APIENTRY *)(const GLfloat *))tunisGLGetProcAddress("glVertex2fv");
    tunisGL.tunisVertex2hNV = (void (KHRONOS_APIENTRY *)(GLhalfNV, GLhalfNV))tunisGLGetProcAddress("glVertex2hNV");
    tunisGL.tunisVertex2hvNV = (void (KHRONOS_APIENTRY *)(const GLhalfNV *))tunisGLGetProcAddress("glVertex2hvNV");
    tunisGL.tunisVertex2i = (void (KHRONOS_APIENTRY *)(GLint, GLint))tunisGLGetProcAddress("glVertex2i");
    tunisGL.tunisVertex2iv = (void (KHRONOS_APIENTRY *)(const GLint *))tunisGLGetProcAddress("glVertex2iv");
    tunisGL.tunisVertex2s = (void (KHRONOS_APIENTRY *)(GLshort, GLshort))tunisGLGetProcAddress("glVertex2s");
    tunisGL.tunisVertex2sv = (void (KHRONOS_APIENTRY *)(const GLshort *))tunisGLGetProcAddress("glVertex2sv");
    tunisGL.tunisVertex2xOES = (void (KHRONOS_APIENTRY *)(GLfixed))tunisGLGetProcAddress("glVertex2xOES");
    tunisGL.tunisVertex2xvOES = (void (KHRONOS_APIENTRY *)(const GLfixed *))tunisGLGetProcAddress("glVertex2xvOES");
    tunisGL.tunisVertex3bOES = (void (KHRONOS_APIENTRY *)(GLbyte, GLbyte, GLbyte))tunisGLGetProcAddress("glVertex3bOES");
    tunisGL.tunisVertex3bvOES = (void (KHRONOS_APIENTRY *)(const GLbyte *))tunisGLGetProcAddress("glVertex3bvOES");
    tunisGL.tunisVertex3d = (void (KHRONOS_APIENTRY *)(GLdouble, GLdouble, GLdouble))tunisGLGetProcAddress("glVertex3d");
    tunisGL.tunisVertex3dv = (void (KHRONOS_APIENTRY *)(const GLdouble *))tunisGLGetProcAddress("glVertex3dv");
    tunisGL.tunisVertex3f = (void (KHRONOS_APIENTRY *)(GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glVertex3f");
    tunisGL.tunisVertex3fv = (void (KHRONOS_APIENTRY *)(const GLfloat *))tunisGLGetProcAddress("glVertex3fv");
    tunisGL.tunisVertex3hNV = (void (KHRONOS_APIENTRY *)(GLhalfNV, GLhalfNV, GLhalfNV))tunisGLGetProcAddress("glVertex3hNV");
    tunisGL.tunisVertex3hvNV = (void (KHRONOS_APIENTRY *)(const GLhalfNV *))tunisGLGetProcAddress("glVertex3hvNV");
    tunisGL.tunisVertex3i = (void (KHRONOS_APIENTRY *)(GLint, GLint, GLint))tunisGLGetProcAddress("glVertex3i");
    tunisGL.tunisVertex3iv = (void (KHRONOS_APIENTRY *)(const GLint *))tunisGLGetProcAddress("glVertex3iv");
    tunisGL.tunisVertex3s = (void (KHRONOS_APIENTRY *)(GLshort, GLshort, GLshort))tunisGLGetProcAddress("glVertex3s");
    tunisGL.tunisVertex3sv = (void (KHRONOS_APIENTRY *)(const GLshort *))tunisGLGetProcAddress("glVertex3sv");
    tunisGL.tunisVertex3xOES = (void (KHRONOS_APIENTRY *)(GLfixed, GLfixed))tunisGLGetProcAddress("glVertex3xOES");
    tunisGL.tunisVertex3xvOES = (void (KHRONOS_APIENTRY *)(const GLfixed *))tunisGLGetProcAddress("glVertex3xvOES");
    tunisGL.tunisVertex4bOES = (void (KHRONOS_APIENTRY *)(GLbyte, GLbyte, GLbyte, GLbyte))tunisGLGetProcAddress("glVertex4bOES");
    tunisGL.tunisVertex4bvOES = (void (KHRONOS_APIENTRY *)(const GLbyte *))tunisGLGetProcAddress("glVertex4bvOES");
    tunisGL.tunisVertex4d = (void (KHRONOS_APIENTRY *)(GLdouble, GLdouble, GLdouble, GLdouble))tunisGLGetProcAddress("glVertex4d");
    tunisGL.tunisVertex4dv = (void (KHRONOS_APIENTRY *)(const GLdouble *))tunisGLGetProcAddress("glVertex4dv");
    tunisGL.tunisVertex4f = (void (KHRONOS_APIENTRY *)(GLfloat, GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glVertex4f");
    tunisGL.tunisVertex4fv = (void (KHRONOS_APIENTRY *)(const GLfloat *))tunisGLGetProcAddress("glVertex4fv");
    tunisGL.tunisVertex4hNV = (void (KHRONOS_APIENTRY *)(GLhalfNV, GLhalfNV, GLhalfNV, GLhalfNV))tunisGLGetProcAddress("glVertex4hNV");
    tunisGL.tunisVertex4hvNV = (void (KHRONOS_APIENTRY *)(const GLhalfNV *))tunisGLGetProcAddress("glVertex4hvNV");
    tunisGL.tunisVertex4i = (void (KHRONOS_APIENTRY *)(GLint, GLint, GLint, GLint))tunisGLGetProcAddress("glVertex4i");
    tunisGL.tunisVertex4iv = (void (KHRONOS_APIENTRY *)(const GLint *))tunisGLGetProcAddress("glVertex4iv");
    tunisGL.tunisVertex4s = (void (KHRONOS_APIENTRY *)(GLshort, GLshort, GLshort, GLshort))tunisGLGetProcAddress("glVertex4s");
    tunisGL.tunisVertex4sv = (void (KHRONOS_APIENTRY *)(const GLshort *))tunisGLGetProcAddress("glVertex4sv");
    tunisGL.tunisVertex4xOES = (void (KHRONOS_APIENTRY *)(GLfixed, GLfixed, GLfixed))tunisGLGetProcAddress("glVertex4xOES");
    tunisGL.tunisVertex4xvOES = (void (KHRONOS_APIENTRY *)(const GLfixed *))tunisGLGetProcAddress("glVertex4xvOES");
    tunisGL.tunisVertexArrayAttribBinding = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLuint))tunisGLGetProcAddress("glVertexArrayAttribBinding");
    tunisGL.tunisVertexArrayAttribFormat = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLint, GLenum, GLboolean, GLuint))tunisGLGetProcAddress("glVertexArrayAttribFormat");
    tunisGL.tunisVertexArrayAttribIFormat = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLint, GLenum, GLuint))tunisGLGetProcAddress("glVertexArrayAttribIFormat");
    tunisGL.tunisVertexArrayAttribLFormat = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLint, GLenum, GLuint))tunisGLGetProcAddress("glVertexArrayAttribLFormat");
    tunisGL.tunisVertexArrayBindVertexBufferEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLuint, GLintptr, GLsizei))tunisGLGetProcAddress("glVertexArrayBindVertexBufferEXT");
    tunisGL.tunisVertexArrayBindingDivisor = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLuint))tunisGLGetProcAddress("glVertexArrayBindingDivisor");
    tunisGL.tunisVertexArrayColorOffsetEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLint, GLenum, GLsizei, GLintptr))tunisGLGetProcAddress("glVertexArrayColorOffsetEXT");
    tunisGL.tunisVertexArrayEdgeFlagOffsetEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLsizei, GLintptr))tunisGLGetProcAddress("glVertexArrayEdgeFlagOffsetEXT");
    tunisGL.tunisVertexArrayElementBuffer = (void (KHRONOS_APIENTRY *)(GLuint, GLuint))tunisGLGetProcAddress("glVertexArrayElementBuffer");
    tunisGL.tunisVertexArrayFogCoordOffsetEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLenum, GLsizei, GLintptr))tunisGLGetProcAddress("glVertexArrayFogCoordOffsetEXT");
    tunisGL.tunisVertexArrayIndexOffsetEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLenum, GLsizei, GLintptr))tunisGLGetProcAddress("glVertexArrayIndexOffsetEXT");
    tunisGL.tunisVertexArrayMultiTexCoordOffsetEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLenum, GLint, GLenum, GLsizei, GLintptr))tunisGLGetProcAddress("glVertexArrayMultiTexCoordOffsetEXT");
    tunisGL.tunisVertexArrayNormalOffsetEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLenum, GLsizei, GLintptr))tunisGLGetProcAddress("glVertexArrayNormalOffsetEXT");
    tunisGL.tunisVertexArrayParameteriAPPLE = (void (KHRONOS_APIENTRY *)(GLenum, GLint))tunisGLGetProcAddress("glVertexArrayParameteriAPPLE");
    tunisGL.tunisVertexArrayRangeAPPLE = (void (KHRONOS_APIENTRY *)(GLsizei, void *))tunisGLGetProcAddress("glVertexArrayRangeAPPLE");
    tunisGL.tunisVertexArrayRangeNV = (void (KHRONOS_APIENTRY *)(GLsizei, const void *))tunisGLGetProcAddress("glVertexArrayRangeNV");
    tunisGL.tunisVertexArraySecondaryColorOffsetEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLint, GLenum, GLsizei, GLintptr))tunisGLGetProcAddress("glVertexArraySecondaryColorOffsetEXT");
    tunisGL.tunisVertexArrayTexCoordOffsetEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLint, GLenum, GLsizei, GLintptr))tunisGLGetProcAddress("glVertexArrayTexCoordOffsetEXT");
    tunisGL.tunisVertexArrayVertexAttribBindingEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLuint))tunisGLGetProcAddress("glVertexArrayVertexAttribBindingEXT");
    tunisGL.tunisVertexArrayVertexAttribDivisorEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLuint))tunisGLGetProcAddress("glVertexArrayVertexAttribDivisorEXT");
    tunisGL.tunisVertexArrayVertexAttribFormatEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLint, GLenum, GLboolean, GLuint))tunisGLGetProcAddress("glVertexArrayVertexAttribFormatEXT");
    tunisGL.tunisVertexArrayVertexAttribIFormatEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLint, GLenum, GLuint))tunisGLGetProcAddress("glVertexArrayVertexAttribIFormatEXT");
    tunisGL.tunisVertexArrayVertexAttribIOffsetEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLuint, GLint, GLenum, GLsizei, GLintptr))tunisGLGetProcAddress("glVertexArrayVertexAttribIOffsetEXT");
    tunisGL.tunisVertexArrayVertexAttribLFormatEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLint, GLenum, GLuint))tunisGLGetProcAddress("glVertexArrayVertexAttribLFormatEXT");
    tunisGL.tunisVertexArrayVertexAttribLOffsetEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLuint, GLint, GLenum, GLsizei, GLintptr))tunisGLGetProcAddress("glVertexArrayVertexAttribLOffsetEXT");
    tunisGL.tunisVertexArrayVertexAttribOffsetEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLuint, GLint, GLenum, GLboolean, GLsizei, GLintptr))tunisGLGetProcAddress("glVertexArrayVertexAttribOffsetEXT");
    tunisGL.tunisVertexArrayVertexBindingDivisorEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLuint))tunisGLGetProcAddress("glVertexArrayVertexBindingDivisorEXT");
    tunisGL.tunisVertexArrayVertexBuffer = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLuint, GLintptr, GLsizei))tunisGLGetProcAddress("glVertexArrayVertexBuffer");
    tunisGL.tunisVertexArrayVertexBuffers = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLsizei, const GLuint *, const GLintptr *, const GLsizei *))tunisGLGetProcAddress("glVertexArrayVertexBuffers");
    tunisGL.tunisVertexArrayVertexOffsetEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLint, GLenum, GLsizei, GLintptr))tunisGLGetProcAddress("glVertexArrayVertexOffsetEXT");
    tunisGL.tunisVertexAttrib1d = (void (KHRONOS_APIENTRY *)(GLuint, GLdouble))tunisGLGetProcAddress("glVertexAttrib1d");
    tunisGL.tunisVertexAttrib1dARB = (void (KHRONOS_APIENTRY *)(GLuint, GLdouble))tunisGLGetProcAddress("glVertexAttrib1dARB");
    tunisGL.tunisVertexAttrib1dNV = (void (KHRONOS_APIENTRY *)(GLuint, GLdouble))tunisGLGetProcAddress("glVertexAttrib1dNV");
    tunisGL.tunisVertexAttrib1dv = (void (KHRONOS_APIENTRY *)(GLuint, const GLdouble *))tunisGLGetProcAddress("glVertexAttrib1dv");
    tunisGL.tunisVertexAttrib1dvARB = (void (KHRONOS_APIENTRY *)(GLuint, const GLdouble *))tunisGLGetProcAddress("glVertexAttrib1dvARB");
    tunisGL.tunisVertexAttrib1dvNV = (void (KHRONOS_APIENTRY *)(GLuint, const GLdouble *))tunisGLGetProcAddress("glVertexAttrib1dvNV");
    tunisGL.tunisVertexAttrib1f = (void (KHRONOS_APIENTRY *)(GLuint, GLfloat))tunisGLGetProcAddress("glVertexAttrib1f");
    tunisGL.tunisVertexAttrib1fARB = (void (KHRONOS_APIENTRY *)(GLuint, GLfloat))tunisGLGetProcAddress("glVertexAttrib1fARB");
    tunisGL.tunisVertexAttrib1fNV = (void (KHRONOS_APIENTRY *)(GLuint, GLfloat))tunisGLGetProcAddress("glVertexAttrib1fNV");
    tunisGL.tunisVertexAttrib1fv = (void (KHRONOS_APIENTRY *)(GLuint, const GLfloat *))tunisGLGetProcAddress("glVertexAttrib1fv");
    tunisGL.tunisVertexAttrib1fvARB = (void (KHRONOS_APIENTRY *)(GLuint, const GLfloat *))tunisGLGetProcAddress("glVertexAttrib1fvARB");
    tunisGL.tunisVertexAttrib1fvNV = (void (KHRONOS_APIENTRY *)(GLuint, const GLfloat *))tunisGLGetProcAddress("glVertexAttrib1fvNV");
    tunisGL.tunisVertexAttrib1hNV = (void (KHRONOS_APIENTRY *)(GLuint, GLhalfNV))tunisGLGetProcAddress("glVertexAttrib1hNV");
    tunisGL.tunisVertexAttrib1hvNV = (void (KHRONOS_APIENTRY *)(GLuint, const GLhalfNV *))tunisGLGetProcAddress("glVertexAttrib1hvNV");
    tunisGL.tunisVertexAttrib1s = (void (KHRONOS_APIENTRY *)(GLuint, GLshort))tunisGLGetProcAddress("glVertexAttrib1s");
    tunisGL.tunisVertexAttrib1sARB = (void (KHRONOS_APIENTRY *)(GLuint, GLshort))tunisGLGetProcAddress("glVertexAttrib1sARB");
    tunisGL.tunisVertexAttrib1sNV = (void (KHRONOS_APIENTRY *)(GLuint, GLshort))tunisGLGetProcAddress("glVertexAttrib1sNV");
    tunisGL.tunisVertexAttrib1sv = (void (KHRONOS_APIENTRY *)(GLuint, const GLshort *))tunisGLGetProcAddress("glVertexAttrib1sv");
    tunisGL.tunisVertexAttrib1svARB = (void (KHRONOS_APIENTRY *)(GLuint, const GLshort *))tunisGLGetProcAddress("glVertexAttrib1svARB");
    tunisGL.tunisVertexAttrib1svNV = (void (KHRONOS_APIENTRY *)(GLuint, const GLshort *))tunisGLGetProcAddress("glVertexAttrib1svNV");
    tunisGL.tunisVertexAttrib2d = (void (KHRONOS_APIENTRY *)(GLuint, GLdouble, GLdouble))tunisGLGetProcAddress("glVertexAttrib2d");
    tunisGL.tunisVertexAttrib2dARB = (void (KHRONOS_APIENTRY *)(GLuint, GLdouble, GLdouble))tunisGLGetProcAddress("glVertexAttrib2dARB");
    tunisGL.tunisVertexAttrib2dNV = (void (KHRONOS_APIENTRY *)(GLuint, GLdouble, GLdouble))tunisGLGetProcAddress("glVertexAttrib2dNV");
    tunisGL.tunisVertexAttrib2dv = (void (KHRONOS_APIENTRY *)(GLuint, const GLdouble *))tunisGLGetProcAddress("glVertexAttrib2dv");
    tunisGL.tunisVertexAttrib2dvARB = (void (KHRONOS_APIENTRY *)(GLuint, const GLdouble *))tunisGLGetProcAddress("glVertexAttrib2dvARB");
    tunisGL.tunisVertexAttrib2dvNV = (void (KHRONOS_APIENTRY *)(GLuint, const GLdouble *))tunisGLGetProcAddress("glVertexAttrib2dvNV");
    tunisGL.tunisVertexAttrib2f = (void (KHRONOS_APIENTRY *)(GLuint, GLfloat, GLfloat))tunisGLGetProcAddress("glVertexAttrib2f");
    tunisGL.tunisVertexAttrib2fARB = (void (KHRONOS_APIENTRY *)(GLuint, GLfloat, GLfloat))tunisGLGetProcAddress("glVertexAttrib2fARB");
    tunisGL.tunisVertexAttrib2fNV = (void (KHRONOS_APIENTRY *)(GLuint, GLfloat, GLfloat))tunisGLGetProcAddress("glVertexAttrib2fNV");
    tunisGL.tunisVertexAttrib2fv = (void (KHRONOS_APIENTRY *)(GLuint, const GLfloat *))tunisGLGetProcAddress("glVertexAttrib2fv");
    tunisGL.tunisVertexAttrib2fvARB = (void (KHRONOS_APIENTRY *)(GLuint, const GLfloat *))tunisGLGetProcAddress("glVertexAttrib2fvARB");
    tunisGL.tunisVertexAttrib2fvNV = (void (KHRONOS_APIENTRY *)(GLuint, const GLfloat *))tunisGLGetProcAddress("glVertexAttrib2fvNV");
    tunisGL.tunisVertexAttrib2hNV = (void (KHRONOS_APIENTRY *)(GLuint, GLhalfNV, GLhalfNV))tunisGLGetProcAddress("glVertexAttrib2hNV");
    tunisGL.tunisVertexAttrib2hvNV = (void (KHRONOS_APIENTRY *)(GLuint, const GLhalfNV *))tunisGLGetProcAddress("glVertexAttrib2hvNV");
    tunisGL.tunisVertexAttrib2s = (void (KHRONOS_APIENTRY *)(GLuint, GLshort, GLshort))tunisGLGetProcAddress("glVertexAttrib2s");
    tunisGL.tunisVertexAttrib2sARB = (void (KHRONOS_APIENTRY *)(GLuint, GLshort, GLshort))tunisGLGetProcAddress("glVertexAttrib2sARB");
    tunisGL.tunisVertexAttrib2sNV = (void (KHRONOS_APIENTRY *)(GLuint, GLshort, GLshort))tunisGLGetProcAddress("glVertexAttrib2sNV");
    tunisGL.tunisVertexAttrib2sv = (void (KHRONOS_APIENTRY *)(GLuint, const GLshort *))tunisGLGetProcAddress("glVertexAttrib2sv");
    tunisGL.tunisVertexAttrib2svARB = (void (KHRONOS_APIENTRY *)(GLuint, const GLshort *))tunisGLGetProcAddress("glVertexAttrib2svARB");
    tunisGL.tunisVertexAttrib2svNV = (void (KHRONOS_APIENTRY *)(GLuint, const GLshort *))tunisGLGetProcAddress("glVertexAttrib2svNV");
    tunisGL.tunisVertexAttrib3d = (void (KHRONOS_APIENTRY *)(GLuint, GLdouble, GLdouble, GLdouble))tunisGLGetProcAddress("glVertexAttrib3d");
    tunisGL.tunisVertexAttrib3dARB = (void (KHRONOS_APIENTRY *)(GLuint, GLdouble, GLdouble, GLdouble))tunisGLGetProcAddress("glVertexAttrib3dARB");
    tunisGL.tunisVertexAttrib3dNV = (void (KHRONOS_APIENTRY *)(GLuint, GLdouble, GLdouble, GLdouble))tunisGLGetProcAddress("glVertexAttrib3dNV");
    tunisGL.tunisVertexAttrib3dv = (void (KHRONOS_APIENTRY *)(GLuint, const GLdouble *))tunisGLGetProcAddress("glVertexAttrib3dv");
    tunisGL.tunisVertexAttrib3dvARB = (void (KHRONOS_APIENTRY *)(GLuint, const GLdouble *))tunisGLGetProcAddress("glVertexAttrib3dvARB");
    tunisGL.tunisVertexAttrib3dvNV = (void (KHRONOS_APIENTRY *)(GLuint, const GLdouble *))tunisGLGetProcAddress("glVertexAttrib3dvNV");
    tunisGL.tunisVertexAttrib3f = (void (KHRONOS_APIENTRY *)(GLuint, GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glVertexAttrib3f");
    tunisGL.tunisVertexAttrib3fARB = (void (KHRONOS_APIENTRY *)(GLuint, GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glVertexAttrib3fARB");
    tunisGL.tunisVertexAttrib3fNV = (void (KHRONOS_APIENTRY *)(GLuint, GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glVertexAttrib3fNV");
    tunisGL.tunisVertexAttrib3fv = (void (KHRONOS_APIENTRY *)(GLuint, const GLfloat *))tunisGLGetProcAddress("glVertexAttrib3fv");
    tunisGL.tunisVertexAttrib3fvARB = (void (KHRONOS_APIENTRY *)(GLuint, const GLfloat *))tunisGLGetProcAddress("glVertexAttrib3fvARB");
    tunisGL.tunisVertexAttrib3fvNV = (void (KHRONOS_APIENTRY *)(GLuint, const GLfloat *))tunisGLGetProcAddress("glVertexAttrib3fvNV");
    tunisGL.tunisVertexAttrib3hNV = (void (KHRONOS_APIENTRY *)(GLuint, GLhalfNV, GLhalfNV, GLhalfNV))tunisGLGetProcAddress("glVertexAttrib3hNV");
    tunisGL.tunisVertexAttrib3hvNV = (void (KHRONOS_APIENTRY *)(GLuint, const GLhalfNV *))tunisGLGetProcAddress("glVertexAttrib3hvNV");
    tunisGL.tunisVertexAttrib3s = (void (KHRONOS_APIENTRY *)(GLuint, GLshort, GLshort, GLshort))tunisGLGetProcAddress("glVertexAttrib3s");
    tunisGL.tunisVertexAttrib3sARB = (void (KHRONOS_APIENTRY *)(GLuint, GLshort, GLshort, GLshort))tunisGLGetProcAddress("glVertexAttrib3sARB");
    tunisGL.tunisVertexAttrib3sNV = (void (KHRONOS_APIENTRY *)(GLuint, GLshort, GLshort, GLshort))tunisGLGetProcAddress("glVertexAttrib3sNV");
    tunisGL.tunisVertexAttrib3sv = (void (KHRONOS_APIENTRY *)(GLuint, const GLshort *))tunisGLGetProcAddress("glVertexAttrib3sv");
    tunisGL.tunisVertexAttrib3svARB = (void (KHRONOS_APIENTRY *)(GLuint, const GLshort *))tunisGLGetProcAddress("glVertexAttrib3svARB");
    tunisGL.tunisVertexAttrib3svNV = (void (KHRONOS_APIENTRY *)(GLuint, const GLshort *))tunisGLGetProcAddress("glVertexAttrib3svNV");
    tunisGL.tunisVertexAttrib4Nbv = (void (KHRONOS_APIENTRY *)(GLuint, const GLbyte *))tunisGLGetProcAddress("glVertexAttrib4Nbv");
    tunisGL.tunisVertexAttrib4NbvARB = (void (KHRONOS_APIENTRY *)(GLuint, const GLbyte *))tunisGLGetProcAddress("glVertexAttrib4NbvARB");
    tunisGL.tunisVertexAttrib4Niv = (void (KHRONOS_APIENTRY *)(GLuint, const GLint *))tunisGLGetProcAddress("glVertexAttrib4Niv");
    tunisGL.tunisVertexAttrib4NivARB = (void (KHRONOS_APIENTRY *)(GLuint, const GLint *))tunisGLGetProcAddress("glVertexAttrib4NivARB");
    tunisGL.tunisVertexAttrib4Nsv = (void (KHRONOS_APIENTRY *)(GLuint, const GLshort *))tunisGLGetProcAddress("glVertexAttrib4Nsv");
    tunisGL.tunisVertexAttrib4NsvARB = (void (KHRONOS_APIENTRY *)(GLuint, const GLshort *))tunisGLGetProcAddress("glVertexAttrib4NsvARB");
    tunisGL.tunisVertexAttrib4Nub = (void (KHRONOS_APIENTRY *)(GLuint, GLubyte, GLubyte, GLubyte, GLubyte))tunisGLGetProcAddress("glVertexAttrib4Nub");
    tunisGL.tunisVertexAttrib4NubARB = (void (KHRONOS_APIENTRY *)(GLuint, GLubyte, GLubyte, GLubyte, GLubyte))tunisGLGetProcAddress("glVertexAttrib4NubARB");
    tunisGL.tunisVertexAttrib4Nubv = (void (KHRONOS_APIENTRY *)(GLuint, const GLubyte *))tunisGLGetProcAddress("glVertexAttrib4Nubv");
    tunisGL.tunisVertexAttrib4NubvARB = (void (KHRONOS_APIENTRY *)(GLuint, const GLubyte *))tunisGLGetProcAddress("glVertexAttrib4NubvARB");
    tunisGL.tunisVertexAttrib4Nuiv = (void (KHRONOS_APIENTRY *)(GLuint, const GLuint *))tunisGLGetProcAddress("glVertexAttrib4Nuiv");
    tunisGL.tunisVertexAttrib4NuivARB = (void (KHRONOS_APIENTRY *)(GLuint, const GLuint *))tunisGLGetProcAddress("glVertexAttrib4NuivARB");
    tunisGL.tunisVertexAttrib4Nusv = (void (KHRONOS_APIENTRY *)(GLuint, const GLushort *))tunisGLGetProcAddress("glVertexAttrib4Nusv");
    tunisGL.tunisVertexAttrib4NusvARB = (void (KHRONOS_APIENTRY *)(GLuint, const GLushort *))tunisGLGetProcAddress("glVertexAttrib4NusvARB");
    tunisGL.tunisVertexAttrib4bv = (void (KHRONOS_APIENTRY *)(GLuint, const GLbyte *))tunisGLGetProcAddress("glVertexAttrib4bv");
    tunisGL.tunisVertexAttrib4bvARB = (void (KHRONOS_APIENTRY *)(GLuint, const GLbyte *))tunisGLGetProcAddress("glVertexAttrib4bvARB");
    tunisGL.tunisVertexAttrib4d = (void (KHRONOS_APIENTRY *)(GLuint, GLdouble, GLdouble, GLdouble, GLdouble))tunisGLGetProcAddress("glVertexAttrib4d");
    tunisGL.tunisVertexAttrib4dARB = (void (KHRONOS_APIENTRY *)(GLuint, GLdouble, GLdouble, GLdouble, GLdouble))tunisGLGetProcAddress("glVertexAttrib4dARB");
    tunisGL.tunisVertexAttrib4dNV = (void (KHRONOS_APIENTRY *)(GLuint, GLdouble, GLdouble, GLdouble, GLdouble))tunisGLGetProcAddress("glVertexAttrib4dNV");
    tunisGL.tunisVertexAttrib4dv = (void (KHRONOS_APIENTRY *)(GLuint, const GLdouble *))tunisGLGetProcAddress("glVertexAttrib4dv");
    tunisGL.tunisVertexAttrib4dvARB = (void (KHRONOS_APIENTRY *)(GLuint, const GLdouble *))tunisGLGetProcAddress("glVertexAttrib4dvARB");
    tunisGL.tunisVertexAttrib4dvNV = (void (KHRONOS_APIENTRY *)(GLuint, const GLdouble *))tunisGLGetProcAddress("glVertexAttrib4dvNV");
    tunisGL.tunisVertexAttrib4f = (void (KHRONOS_APIENTRY *)(GLuint, GLfloat, GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glVertexAttrib4f");
    tunisGL.tunisVertexAttrib4fARB = (void (KHRONOS_APIENTRY *)(GLuint, GLfloat, GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glVertexAttrib4fARB");
    tunisGL.tunisVertexAttrib4fNV = (void (KHRONOS_APIENTRY *)(GLuint, GLfloat, GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glVertexAttrib4fNV");
    tunisGL.tunisVertexAttrib4fv = (void (KHRONOS_APIENTRY *)(GLuint, const GLfloat *))tunisGLGetProcAddress("glVertexAttrib4fv");
    tunisGL.tunisVertexAttrib4fvARB = (void (KHRONOS_APIENTRY *)(GLuint, const GLfloat *))tunisGLGetProcAddress("glVertexAttrib4fvARB");
    tunisGL.tunisVertexAttrib4fvNV = (void (KHRONOS_APIENTRY *)(GLuint, const GLfloat *))tunisGLGetProcAddress("glVertexAttrib4fvNV");
    tunisGL.tunisVertexAttrib4hNV = (void (KHRONOS_APIENTRY *)(GLuint, GLhalfNV, GLhalfNV, GLhalfNV, GLhalfNV))tunisGLGetProcAddress("glVertexAttrib4hNV");
    tunisGL.tunisVertexAttrib4hvNV = (void (KHRONOS_APIENTRY *)(GLuint, const GLhalfNV *))tunisGLGetProcAddress("glVertexAttrib4hvNV");
    tunisGL.tunisVertexAttrib4iv = (void (KHRONOS_APIENTRY *)(GLuint, const GLint *))tunisGLGetProcAddress("glVertexAttrib4iv");
    tunisGL.tunisVertexAttrib4ivARB = (void (KHRONOS_APIENTRY *)(GLuint, const GLint *))tunisGLGetProcAddress("glVertexAttrib4ivARB");
    tunisGL.tunisVertexAttrib4s = (void (KHRONOS_APIENTRY *)(GLuint, GLshort, GLshort, GLshort, GLshort))tunisGLGetProcAddress("glVertexAttrib4s");
    tunisGL.tunisVertexAttrib4sARB = (void (KHRONOS_APIENTRY *)(GLuint, GLshort, GLshort, GLshort, GLshort))tunisGLGetProcAddress("glVertexAttrib4sARB");
    tunisGL.tunisVertexAttrib4sNV = (void (KHRONOS_APIENTRY *)(GLuint, GLshort, GLshort, GLshort, GLshort))tunisGLGetProcAddress("glVertexAttrib4sNV");
    tunisGL.tunisVertexAttrib4sv = (void (KHRONOS_APIENTRY *)(GLuint, const GLshort *))tunisGLGetProcAddress("glVertexAttrib4sv");
    tunisGL.tunisVertexAttrib4svARB = (void (KHRONOS_APIENTRY *)(GLuint, const GLshort *))tunisGLGetProcAddress("glVertexAttrib4svARB");
    tunisGL.tunisVertexAttrib4svNV = (void (KHRONOS_APIENTRY *)(GLuint, const GLshort *))tunisGLGetProcAddress("glVertexAttrib4svNV");
    tunisGL.tunisVertexAttrib4ubNV = (void (KHRONOS_APIENTRY *)(GLuint, GLubyte, GLubyte, GLubyte, GLubyte))tunisGLGetProcAddress("glVertexAttrib4ubNV");
    tunisGL.tunisVertexAttrib4ubv = (void (KHRONOS_APIENTRY *)(GLuint, const GLubyte *))tunisGLGetProcAddress("glVertexAttrib4ubv");
    tunisGL.tunisVertexAttrib4ubvARB = (void (KHRONOS_APIENTRY *)(GLuint, const GLubyte *))tunisGLGetProcAddress("glVertexAttrib4ubvARB");
    tunisGL.tunisVertexAttrib4ubvNV = (void (KHRONOS_APIENTRY *)(GLuint, const GLubyte *))tunisGLGetProcAddress("glVertexAttrib4ubvNV");
    tunisGL.tunisVertexAttrib4uiv = (void (KHRONOS_APIENTRY *)(GLuint, const GLuint *))tunisGLGetProcAddress("glVertexAttrib4uiv");
    tunisGL.tunisVertexAttrib4uivARB = (void (KHRONOS_APIENTRY *)(GLuint, const GLuint *))tunisGLGetProcAddress("glVertexAttrib4uivARB");
    tunisGL.tunisVertexAttrib4usv = (void (KHRONOS_APIENTRY *)(GLuint, const GLushort *))tunisGLGetProcAddress("glVertexAttrib4usv");
    tunisGL.tunisVertexAttrib4usvARB = (void (KHRONOS_APIENTRY *)(GLuint, const GLushort *))tunisGLGetProcAddress("glVertexAttrib4usvARB");
    tunisGL.tunisVertexAttribArrayObjectATI = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLenum, GLboolean, GLsizei, GLuint, GLuint))tunisGLGetProcAddress("glVertexAttribArrayObjectATI");
    tunisGL.tunisVertexAttribBinding = (void (KHRONOS_APIENTRY *)(GLuint, GLuint))tunisGLGetProcAddress("glVertexAttribBinding");
    tunisGL.tunisVertexAttribDivisor = (void (KHRONOS_APIENTRY *)(GLuint, GLuint))tunisGLGetProcAddress("glVertexAttribDivisor");
    tunisGL.tunisVertexAttribDivisorANGLE = (void (KHRONOS_APIENTRY *)(GLuint, GLuint))tunisGLGetProcAddress("glVertexAttribDivisorANGLE");
    tunisGL.tunisVertexAttribDivisorARB = (void (KHRONOS_APIENTRY *)(GLuint, GLuint))tunisGLGetProcAddress("glVertexAttribDivisorARB");
    tunisGL.tunisVertexAttribDivisorEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLuint))tunisGLGetProcAddress("glVertexAttribDivisorEXT");
    tunisGL.tunisVertexAttribDivisorNV = (void (KHRONOS_APIENTRY *)(GLuint, GLuint))tunisGLGetProcAddress("glVertexAttribDivisorNV");
    tunisGL.tunisVertexAttribFormat = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLenum, GLboolean, GLuint))tunisGLGetProcAddress("glVertexAttribFormat");
    tunisGL.tunisVertexAttribFormatNV = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLenum, GLboolean, GLsizei))tunisGLGetProcAddress("glVertexAttribFormatNV");
    tunisGL.tunisVertexAttribI1i = (void (KHRONOS_APIENTRY *)(GLuint, GLint))tunisGLGetProcAddress("glVertexAttribI1i");
    tunisGL.tunisVertexAttribI1iEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint))tunisGLGetProcAddress("glVertexAttribI1iEXT");
    tunisGL.tunisVertexAttribI1iv = (void (KHRONOS_APIENTRY *)(GLuint, const GLint *))tunisGLGetProcAddress("glVertexAttribI1iv");
    tunisGL.tunisVertexAttribI1ivEXT = (void (KHRONOS_APIENTRY *)(GLuint, const GLint *))tunisGLGetProcAddress("glVertexAttribI1ivEXT");
    tunisGL.tunisVertexAttribI1ui = (void (KHRONOS_APIENTRY *)(GLuint, GLuint))tunisGLGetProcAddress("glVertexAttribI1ui");
    tunisGL.tunisVertexAttribI1uiEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLuint))tunisGLGetProcAddress("glVertexAttribI1uiEXT");
    tunisGL.tunisVertexAttribI1uiv = (void (KHRONOS_APIENTRY *)(GLuint, const GLuint *))tunisGLGetProcAddress("glVertexAttribI1uiv");
    tunisGL.tunisVertexAttribI1uivEXT = (void (KHRONOS_APIENTRY *)(GLuint, const GLuint *))tunisGLGetProcAddress("glVertexAttribI1uivEXT");
    tunisGL.tunisVertexAttribI2i = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLint))tunisGLGetProcAddress("glVertexAttribI2i");
    tunisGL.tunisVertexAttribI2iEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLint))tunisGLGetProcAddress("glVertexAttribI2iEXT");
    tunisGL.tunisVertexAttribI2iv = (void (KHRONOS_APIENTRY *)(GLuint, const GLint *))tunisGLGetProcAddress("glVertexAttribI2iv");
    tunisGL.tunisVertexAttribI2ivEXT = (void (KHRONOS_APIENTRY *)(GLuint, const GLint *))tunisGLGetProcAddress("glVertexAttribI2ivEXT");
    tunisGL.tunisVertexAttribI2ui = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLuint))tunisGLGetProcAddress("glVertexAttribI2ui");
    tunisGL.tunisVertexAttribI2uiEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLuint))tunisGLGetProcAddress("glVertexAttribI2uiEXT");
    tunisGL.tunisVertexAttribI2uiv = (void (KHRONOS_APIENTRY *)(GLuint, const GLuint *))tunisGLGetProcAddress("glVertexAttribI2uiv");
    tunisGL.tunisVertexAttribI2uivEXT = (void (KHRONOS_APIENTRY *)(GLuint, const GLuint *))tunisGLGetProcAddress("glVertexAttribI2uivEXT");
    tunisGL.tunisVertexAttribI3i = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLint, GLint))tunisGLGetProcAddress("glVertexAttribI3i");
    tunisGL.tunisVertexAttribI3iEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLint, GLint))tunisGLGetProcAddress("glVertexAttribI3iEXT");
    tunisGL.tunisVertexAttribI3iv = (void (KHRONOS_APIENTRY *)(GLuint, const GLint *))tunisGLGetProcAddress("glVertexAttribI3iv");
    tunisGL.tunisVertexAttribI3ivEXT = (void (KHRONOS_APIENTRY *)(GLuint, const GLint *))tunisGLGetProcAddress("glVertexAttribI3ivEXT");
    tunisGL.tunisVertexAttribI3ui = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLuint, GLuint))tunisGLGetProcAddress("glVertexAttribI3ui");
    tunisGL.tunisVertexAttribI3uiEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLuint, GLuint))tunisGLGetProcAddress("glVertexAttribI3uiEXT");
    tunisGL.tunisVertexAttribI3uiv = (void (KHRONOS_APIENTRY *)(GLuint, const GLuint *))tunisGLGetProcAddress("glVertexAttribI3uiv");
    tunisGL.tunisVertexAttribI3uivEXT = (void (KHRONOS_APIENTRY *)(GLuint, const GLuint *))tunisGLGetProcAddress("glVertexAttribI3uivEXT");
    tunisGL.tunisVertexAttribI4bv = (void (KHRONOS_APIENTRY *)(GLuint, const GLbyte *))tunisGLGetProcAddress("glVertexAttribI4bv");
    tunisGL.tunisVertexAttribI4bvEXT = (void (KHRONOS_APIENTRY *)(GLuint, const GLbyte *))tunisGLGetProcAddress("glVertexAttribI4bvEXT");
    tunisGL.tunisVertexAttribI4i = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLint, GLint, GLint))tunisGLGetProcAddress("glVertexAttribI4i");
    tunisGL.tunisVertexAttribI4iEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLint, GLint, GLint))tunisGLGetProcAddress("glVertexAttribI4iEXT");
    tunisGL.tunisVertexAttribI4iv = (void (KHRONOS_APIENTRY *)(GLuint, const GLint *))tunisGLGetProcAddress("glVertexAttribI4iv");
    tunisGL.tunisVertexAttribI4ivEXT = (void (KHRONOS_APIENTRY *)(GLuint, const GLint *))tunisGLGetProcAddress("glVertexAttribI4ivEXT");
    tunisGL.tunisVertexAttribI4sv = (void (KHRONOS_APIENTRY *)(GLuint, const GLshort *))tunisGLGetProcAddress("glVertexAttribI4sv");
    tunisGL.tunisVertexAttribI4svEXT = (void (KHRONOS_APIENTRY *)(GLuint, const GLshort *))tunisGLGetProcAddress("glVertexAttribI4svEXT");
    tunisGL.tunisVertexAttribI4ubv = (void (KHRONOS_APIENTRY *)(GLuint, const GLubyte *))tunisGLGetProcAddress("glVertexAttribI4ubv");
    tunisGL.tunisVertexAttribI4ubvEXT = (void (KHRONOS_APIENTRY *)(GLuint, const GLubyte *))tunisGLGetProcAddress("glVertexAttribI4ubvEXT");
    tunisGL.tunisVertexAttribI4ui = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLuint, GLuint, GLuint))tunisGLGetProcAddress("glVertexAttribI4ui");
    tunisGL.tunisVertexAttribI4uiEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLuint, GLuint, GLuint))tunisGLGetProcAddress("glVertexAttribI4uiEXT");
    tunisGL.tunisVertexAttribI4uiv = (void (KHRONOS_APIENTRY *)(GLuint, const GLuint *))tunisGLGetProcAddress("glVertexAttribI4uiv");
    tunisGL.tunisVertexAttribI4uivEXT = (void (KHRONOS_APIENTRY *)(GLuint, const GLuint *))tunisGLGetProcAddress("glVertexAttribI4uivEXT");
    tunisGL.tunisVertexAttribI4usv = (void (KHRONOS_APIENTRY *)(GLuint, const GLushort *))tunisGLGetProcAddress("glVertexAttribI4usv");
    tunisGL.tunisVertexAttribI4usvEXT = (void (KHRONOS_APIENTRY *)(GLuint, const GLushort *))tunisGLGetProcAddress("glVertexAttribI4usvEXT");
    tunisGL.tunisVertexAttribIFormat = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLenum, GLuint))tunisGLGetProcAddress("glVertexAttribIFormat");
    tunisGL.tunisVertexAttribIFormatNV = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLenum, GLsizei))tunisGLGetProcAddress("glVertexAttribIFormatNV");
    tunisGL.tunisVertexAttribIPointer = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLenum, GLsizei, const void *))tunisGLGetProcAddress("glVertexAttribIPointer");
    tunisGL.tunisVertexAttribIPointerEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLenum, GLsizei, const void *))tunisGLGetProcAddress("glVertexAttribIPointerEXT");
    tunisGL.tunisVertexAttribL1d = (void (KHRONOS_APIENTRY *)(GLuint, GLdouble))tunisGLGetProcAddress("glVertexAttribL1d");
    tunisGL.tunisVertexAttribL1dEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLdouble))tunisGLGetProcAddress("glVertexAttribL1dEXT");
    tunisGL.tunisVertexAttribL1dv = (void (KHRONOS_APIENTRY *)(GLuint, const GLdouble *))tunisGLGetProcAddress("glVertexAttribL1dv");
    tunisGL.tunisVertexAttribL1dvEXT = (void (KHRONOS_APIENTRY *)(GLuint, const GLdouble *))tunisGLGetProcAddress("glVertexAttribL1dvEXT");
    tunisGL.tunisVertexAttribL1i64NV = (void (KHRONOS_APIENTRY *)(GLuint, GLint64EXT))tunisGLGetProcAddress("glVertexAttribL1i64NV");
    tunisGL.tunisVertexAttribL1i64vNV = (void (KHRONOS_APIENTRY *)(GLuint, const GLint64EXT *))tunisGLGetProcAddress("glVertexAttribL1i64vNV");
    tunisGL.tunisVertexAttribL1ui64ARB = (void (KHRONOS_APIENTRY *)(GLuint, GLuint64EXT))tunisGLGetProcAddress("glVertexAttribL1ui64ARB");
    tunisGL.tunisVertexAttribL1ui64NV = (void (KHRONOS_APIENTRY *)(GLuint, GLuint64EXT))tunisGLGetProcAddress("glVertexAttribL1ui64NV");
    tunisGL.tunisVertexAttribL1ui64vARB = (void (KHRONOS_APIENTRY *)(GLuint, const GLuint64EXT *))tunisGLGetProcAddress("glVertexAttribL1ui64vARB");
    tunisGL.tunisVertexAttribL1ui64vNV = (void (KHRONOS_APIENTRY *)(GLuint, const GLuint64EXT *))tunisGLGetProcAddress("glVertexAttribL1ui64vNV");
    tunisGL.tunisVertexAttribL2d = (void (KHRONOS_APIENTRY *)(GLuint, GLdouble, GLdouble))tunisGLGetProcAddress("glVertexAttribL2d");
    tunisGL.tunisVertexAttribL2dEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLdouble, GLdouble))tunisGLGetProcAddress("glVertexAttribL2dEXT");
    tunisGL.tunisVertexAttribL2dv = (void (KHRONOS_APIENTRY *)(GLuint, const GLdouble *))tunisGLGetProcAddress("glVertexAttribL2dv");
    tunisGL.tunisVertexAttribL2dvEXT = (void (KHRONOS_APIENTRY *)(GLuint, const GLdouble *))tunisGLGetProcAddress("glVertexAttribL2dvEXT");
    tunisGL.tunisVertexAttribL2i64NV = (void (KHRONOS_APIENTRY *)(GLuint, GLint64EXT, GLint64EXT))tunisGLGetProcAddress("glVertexAttribL2i64NV");
    tunisGL.tunisVertexAttribL2i64vNV = (void (KHRONOS_APIENTRY *)(GLuint, const GLint64EXT *))tunisGLGetProcAddress("glVertexAttribL2i64vNV");
    tunisGL.tunisVertexAttribL2ui64NV = (void (KHRONOS_APIENTRY *)(GLuint, GLuint64EXT, GLuint64EXT))tunisGLGetProcAddress("glVertexAttribL2ui64NV");
    tunisGL.tunisVertexAttribL2ui64vNV = (void (KHRONOS_APIENTRY *)(GLuint, const GLuint64EXT *))tunisGLGetProcAddress("glVertexAttribL2ui64vNV");
    tunisGL.tunisVertexAttribL3d = (void (KHRONOS_APIENTRY *)(GLuint, GLdouble, GLdouble, GLdouble))tunisGLGetProcAddress("glVertexAttribL3d");
    tunisGL.tunisVertexAttribL3dEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLdouble, GLdouble, GLdouble))tunisGLGetProcAddress("glVertexAttribL3dEXT");
    tunisGL.tunisVertexAttribL3dv = (void (KHRONOS_APIENTRY *)(GLuint, const GLdouble *))tunisGLGetProcAddress("glVertexAttribL3dv");
    tunisGL.tunisVertexAttribL3dvEXT = (void (KHRONOS_APIENTRY *)(GLuint, const GLdouble *))tunisGLGetProcAddress("glVertexAttribL3dvEXT");
    tunisGL.tunisVertexAttribL3i64NV = (void (KHRONOS_APIENTRY *)(GLuint, GLint64EXT, GLint64EXT, GLint64EXT))tunisGLGetProcAddress("glVertexAttribL3i64NV");
    tunisGL.tunisVertexAttribL3i64vNV = (void (KHRONOS_APIENTRY *)(GLuint, const GLint64EXT *))tunisGLGetProcAddress("glVertexAttribL3i64vNV");
    tunisGL.tunisVertexAttribL3ui64NV = (void (KHRONOS_APIENTRY *)(GLuint, GLuint64EXT, GLuint64EXT, GLuint64EXT))tunisGLGetProcAddress("glVertexAttribL3ui64NV");
    tunisGL.tunisVertexAttribL3ui64vNV = (void (KHRONOS_APIENTRY *)(GLuint, const GLuint64EXT *))tunisGLGetProcAddress("glVertexAttribL3ui64vNV");
    tunisGL.tunisVertexAttribL4d = (void (KHRONOS_APIENTRY *)(GLuint, GLdouble, GLdouble, GLdouble, GLdouble))tunisGLGetProcAddress("glVertexAttribL4d");
    tunisGL.tunisVertexAttribL4dEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLdouble, GLdouble, GLdouble, GLdouble))tunisGLGetProcAddress("glVertexAttribL4dEXT");
    tunisGL.tunisVertexAttribL4dv = (void (KHRONOS_APIENTRY *)(GLuint, const GLdouble *))tunisGLGetProcAddress("glVertexAttribL4dv");
    tunisGL.tunisVertexAttribL4dvEXT = (void (KHRONOS_APIENTRY *)(GLuint, const GLdouble *))tunisGLGetProcAddress("glVertexAttribL4dvEXT");
    tunisGL.tunisVertexAttribL4i64NV = (void (KHRONOS_APIENTRY *)(GLuint, GLint64EXT, GLint64EXT, GLint64EXT, GLint64EXT))tunisGLGetProcAddress("glVertexAttribL4i64NV");
    tunisGL.tunisVertexAttribL4i64vNV = (void (KHRONOS_APIENTRY *)(GLuint, const GLint64EXT *))tunisGLGetProcAddress("glVertexAttribL4i64vNV");
    tunisGL.tunisVertexAttribL4ui64NV = (void (KHRONOS_APIENTRY *)(GLuint, GLuint64EXT, GLuint64EXT, GLuint64EXT, GLuint64EXT))tunisGLGetProcAddress("glVertexAttribL4ui64NV");
    tunisGL.tunisVertexAttribL4ui64vNV = (void (KHRONOS_APIENTRY *)(GLuint, const GLuint64EXT *))tunisGLGetProcAddress("glVertexAttribL4ui64vNV");
    tunisGL.tunisVertexAttribLFormat = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLenum, GLuint))tunisGLGetProcAddress("glVertexAttribLFormat");
    tunisGL.tunisVertexAttribLFormatNV = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLenum, GLsizei))tunisGLGetProcAddress("glVertexAttribLFormatNV");
    tunisGL.tunisVertexAttribLPointer = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLenum, GLsizei, const void *))tunisGLGetProcAddress("glVertexAttribLPointer");
    tunisGL.tunisVertexAttribLPointerEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLenum, GLsizei, const void *))tunisGLGetProcAddress("glVertexAttribLPointerEXT");
    tunisGL.tunisVertexAttribP1ui = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLboolean, GLuint))tunisGLGetProcAddress("glVertexAttribP1ui");
    tunisGL.tunisVertexAttribP1uiv = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLboolean, const GLuint *))tunisGLGetProcAddress("glVertexAttribP1uiv");
    tunisGL.tunisVertexAttribP2ui = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLboolean, GLuint))tunisGLGetProcAddress("glVertexAttribP2ui");
    tunisGL.tunisVertexAttribP2uiv = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLboolean, const GLuint *))tunisGLGetProcAddress("glVertexAttribP2uiv");
    tunisGL.tunisVertexAttribP3ui = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLboolean, GLuint))tunisGLGetProcAddress("glVertexAttribP3ui");
    tunisGL.tunisVertexAttribP3uiv = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLboolean, const GLuint *))tunisGLGetProcAddress("glVertexAttribP3uiv");
    tunisGL.tunisVertexAttribP4ui = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLboolean, GLuint))tunisGLGetProcAddress("glVertexAttribP4ui");
    tunisGL.tunisVertexAttribP4uiv = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLboolean, const GLuint *))tunisGLGetProcAddress("glVertexAttribP4uiv");
    tunisGL.tunisVertexAttribParameteriAMD = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint))tunisGLGetProcAddress("glVertexAttribParameteriAMD");
    tunisGL.tunisVertexAttribPointer = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLenum, GLboolean, GLsizei, const void *))tunisGLGetProcAddress("glVertexAttribPointer");
    tunisGL.tunisVertexAttribPointerARB = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLenum, GLboolean, GLsizei, const void *))tunisGLGetProcAddress("glVertexAttribPointerARB");
    tunisGL.tunisVertexAttribPointerNV = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLenum, GLsizei, const void *))tunisGLGetProcAddress("glVertexAttribPointerNV");
    tunisGL.tunisVertexAttribs1dvNV = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, const GLdouble *))tunisGLGetProcAddress("glVertexAttribs1dvNV");
    tunisGL.tunisVertexAttribs1fvNV = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, const GLfloat *))tunisGLGetProcAddress("glVertexAttribs1fvNV");
    tunisGL.tunisVertexAttribs1hvNV = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, const GLhalfNV *))tunisGLGetProcAddress("glVertexAttribs1hvNV");
    tunisGL.tunisVertexAttribs1svNV = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, const GLshort *))tunisGLGetProcAddress("glVertexAttribs1svNV");
    tunisGL.tunisVertexAttribs2dvNV = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, const GLdouble *))tunisGLGetProcAddress("glVertexAttribs2dvNV");
    tunisGL.tunisVertexAttribs2fvNV = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, const GLfloat *))tunisGLGetProcAddress("glVertexAttribs2fvNV");
    tunisGL.tunisVertexAttribs2hvNV = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, const GLhalfNV *))tunisGLGetProcAddress("glVertexAttribs2hvNV");
    tunisGL.tunisVertexAttribs2svNV = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, const GLshort *))tunisGLGetProcAddress("glVertexAttribs2svNV");
    tunisGL.tunisVertexAttribs3dvNV = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, const GLdouble *))tunisGLGetProcAddress("glVertexAttribs3dvNV");
    tunisGL.tunisVertexAttribs3fvNV = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, const GLfloat *))tunisGLGetProcAddress("glVertexAttribs3fvNV");
    tunisGL.tunisVertexAttribs3hvNV = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, const GLhalfNV *))tunisGLGetProcAddress("glVertexAttribs3hvNV");
    tunisGL.tunisVertexAttribs3svNV = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, const GLshort *))tunisGLGetProcAddress("glVertexAttribs3svNV");
    tunisGL.tunisVertexAttribs4dvNV = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, const GLdouble *))tunisGLGetProcAddress("glVertexAttribs4dvNV");
    tunisGL.tunisVertexAttribs4fvNV = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, const GLfloat *))tunisGLGetProcAddress("glVertexAttribs4fvNV");
    tunisGL.tunisVertexAttribs4hvNV = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, const GLhalfNV *))tunisGLGetProcAddress("glVertexAttribs4hvNV");
    tunisGL.tunisVertexAttribs4svNV = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, const GLshort *))tunisGLGetProcAddress("glVertexAttribs4svNV");
    tunisGL.tunisVertexAttribs4ubvNV = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, const GLubyte *))tunisGLGetProcAddress("glVertexAttribs4ubvNV");
    tunisGL.tunisVertexBindingDivisor = (void (KHRONOS_APIENTRY *)(GLuint, GLuint))tunisGLGetProcAddress("glVertexBindingDivisor");
    tunisGL.tunisVertexBlendARB = (void (KHRONOS_APIENTRY *)(GLint))tunisGLGetProcAddress("glVertexBlendARB");
    tunisGL.tunisVertexBlendEnvfATI = (void (KHRONOS_APIENTRY *)(GLenum, GLfloat))tunisGLGetProcAddress("glVertexBlendEnvfATI");
    tunisGL.tunisVertexBlendEnviATI = (void (KHRONOS_APIENTRY *)(GLenum, GLint))tunisGLGetProcAddress("glVertexBlendEnviATI");
    tunisGL.tunisVertexFormatNV = (void (KHRONOS_APIENTRY *)(GLint, GLenum, GLsizei))tunisGLGetProcAddress("glVertexFormatNV");
    tunisGL.tunisVertexP2ui = (void (KHRONOS_APIENTRY *)(GLenum, GLuint))tunisGLGetProcAddress("glVertexP2ui");
    tunisGL.tunisVertexP2uiv = (void (KHRONOS_APIENTRY *)(GLenum, const GLuint *))tunisGLGetProcAddress("glVertexP2uiv");
    tunisGL.tunisVertexP3ui = (void (KHRONOS_APIENTRY *)(GLenum, GLuint))tunisGLGetProcAddress("glVertexP3ui");
    tunisGL.tunisVertexP3uiv = (void (KHRONOS_APIENTRY *)(GLenum, const GLuint *))tunisGLGetProcAddress("glVertexP3uiv");
    tunisGL.tunisVertexP4ui = (void (KHRONOS_APIENTRY *)(GLenum, GLuint))tunisGLGetProcAddress("glVertexP4ui");
    tunisGL.tunisVertexP4uiv = (void (KHRONOS_APIENTRY *)(GLenum, const GLuint *))tunisGLGetProcAddress("glVertexP4uiv");
    tunisGL.tunisVertexPointer = (void (KHRONOS_APIENTRY *)(GLint, GLenum, GLsizei, const void *))tunisGLGetProcAddress("glVertexPointer");
    tunisGL.tunisVertexPointerEXT = (void (KHRONOS_APIENTRY *)(GLint, GLenum, GLsizei, GLsizei, const void *))tunisGLGetProcAddress("glVertexPointerEXT");
    tunisGL.tunisVertexPointerListIBM = (void (KHRONOS_APIENTRY *)(GLint, GLenum, GLint, const void **, GLint))tunisGLGetProcAddress("glVertexPointerListIBM");
    tunisGL.tunisVertexPointervINTEL = (void (KHRONOS_APIENTRY *)(GLint, GLenum, const void **))tunisGLGetProcAddress("glVertexPointervINTEL");
    tunisGL.tunisVertexStream1dATI = (void (KHRONOS_APIENTRY *)(GLenum, GLdouble))tunisGLGetProcAddress("glVertexStream1dATI");
    tunisGL.tunisVertexStream1dvATI = (void (KHRONOS_APIENTRY *)(GLenum, const GLdouble *))tunisGLGetProcAddress("glVertexStream1dvATI");
    tunisGL.tunisVertexStream1fATI = (void (KHRONOS_APIENTRY *)(GLenum, GLfloat))tunisGLGetProcAddress("glVertexStream1fATI");
    tunisGL.tunisVertexStream1fvATI = (void (KHRONOS_APIENTRY *)(GLenum, const GLfloat *))tunisGLGetProcAddress("glVertexStream1fvATI");
    tunisGL.tunisVertexStream1iATI = (void (KHRONOS_APIENTRY *)(GLenum, GLint))tunisGLGetProcAddress("glVertexStream1iATI");
    tunisGL.tunisVertexStream1ivATI = (void (KHRONOS_APIENTRY *)(GLenum, const GLint *))tunisGLGetProcAddress("glVertexStream1ivATI");
    tunisGL.tunisVertexStream1sATI = (void (KHRONOS_APIENTRY *)(GLenum, GLshort))tunisGLGetProcAddress("glVertexStream1sATI");
    tunisGL.tunisVertexStream1svATI = (void (KHRONOS_APIENTRY *)(GLenum, const GLshort *))tunisGLGetProcAddress("glVertexStream1svATI");
    tunisGL.tunisVertexStream2dATI = (void (KHRONOS_APIENTRY *)(GLenum, GLdouble, GLdouble))tunisGLGetProcAddress("glVertexStream2dATI");
    tunisGL.tunisVertexStream2dvATI = (void (KHRONOS_APIENTRY *)(GLenum, const GLdouble *))tunisGLGetProcAddress("glVertexStream2dvATI");
    tunisGL.tunisVertexStream2fATI = (void (KHRONOS_APIENTRY *)(GLenum, GLfloat, GLfloat))tunisGLGetProcAddress("glVertexStream2fATI");
    tunisGL.tunisVertexStream2fvATI = (void (KHRONOS_APIENTRY *)(GLenum, const GLfloat *))tunisGLGetProcAddress("glVertexStream2fvATI");
    tunisGL.tunisVertexStream2iATI = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLint))tunisGLGetProcAddress("glVertexStream2iATI");
    tunisGL.tunisVertexStream2ivATI = (void (KHRONOS_APIENTRY *)(GLenum, const GLint *))tunisGLGetProcAddress("glVertexStream2ivATI");
    tunisGL.tunisVertexStream2sATI = (void (KHRONOS_APIENTRY *)(GLenum, GLshort, GLshort))tunisGLGetProcAddress("glVertexStream2sATI");
    tunisGL.tunisVertexStream2svATI = (void (KHRONOS_APIENTRY *)(GLenum, const GLshort *))tunisGLGetProcAddress("glVertexStream2svATI");
    tunisGL.tunisVertexStream3dATI = (void (KHRONOS_APIENTRY *)(GLenum, GLdouble, GLdouble, GLdouble))tunisGLGetProcAddress("glVertexStream3dATI");
    tunisGL.tunisVertexStream3dvATI = (void (KHRONOS_APIENTRY *)(GLenum, const GLdouble *))tunisGLGetProcAddress("glVertexStream3dvATI");
    tunisGL.tunisVertexStream3fATI = (void (KHRONOS_APIENTRY *)(GLenum, GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glVertexStream3fATI");
    tunisGL.tunisVertexStream3fvATI = (void (KHRONOS_APIENTRY *)(GLenum, const GLfloat *))tunisGLGetProcAddress("glVertexStream3fvATI");
    tunisGL.tunisVertexStream3iATI = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLint, GLint))tunisGLGetProcAddress("glVertexStream3iATI");
    tunisGL.tunisVertexStream3ivATI = (void (KHRONOS_APIENTRY *)(GLenum, const GLint *))tunisGLGetProcAddress("glVertexStream3ivATI");
    tunisGL.tunisVertexStream3sATI = (void (KHRONOS_APIENTRY *)(GLenum, GLshort, GLshort, GLshort))tunisGLGetProcAddress("glVertexStream3sATI");
    tunisGL.tunisVertexStream3svATI = (void (KHRONOS_APIENTRY *)(GLenum, const GLshort *))tunisGLGetProcAddress("glVertexStream3svATI");
    tunisGL.tunisVertexStream4dATI = (void (KHRONOS_APIENTRY *)(GLenum, GLdouble, GLdouble, GLdouble, GLdouble))tunisGLGetProcAddress("glVertexStream4dATI");
    tunisGL.tunisVertexStream4dvATI = (void (KHRONOS_APIENTRY *)(GLenum, const GLdouble *))tunisGLGetProcAddress("glVertexStream4dvATI");
    tunisGL.tunisVertexStream4fATI = (void (KHRONOS_APIENTRY *)(GLenum, GLfloat, GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glVertexStream4fATI");
    tunisGL.tunisVertexStream4fvATI = (void (KHRONOS_APIENTRY *)(GLenum, const GLfloat *))tunisGLGetProcAddress("glVertexStream4fvATI");
    tunisGL.tunisVertexStream4iATI = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLint, GLint, GLint))tunisGLGetProcAddress("glVertexStream4iATI");
    tunisGL.tunisVertexStream4ivATI = (void (KHRONOS_APIENTRY *)(GLenum, const GLint *))tunisGLGetProcAddress("glVertexStream4ivATI");
    tunisGL.tunisVertexStream4sATI = (void (KHRONOS_APIENTRY *)(GLenum, GLshort, GLshort, GLshort, GLshort))tunisGLGetProcAddress("glVertexStream4sATI");
    tunisGL.tunisVertexStream4svATI = (void (KHRONOS_APIENTRY *)(GLenum, const GLshort *))tunisGLGetProcAddress("glVertexStream4svATI");
    tunisGL.tunisVertexWeightPointerEXT = (void (KHRONOS_APIENTRY *)(GLint, GLenum, GLsizei, const void *))tunisGLGetProcAddress("glVertexWeightPointerEXT");
    tunisGL.tunisVertexWeightfEXT = (void (KHRONOS_APIENTRY *)(GLfloat))tunisGLGetProcAddress("glVertexWeightfEXT");
    tunisGL.tunisVertexWeightfvEXT = (void (KHRONOS_APIENTRY *)(const GLfloat *))tunisGLGetProcAddress("glVertexWeightfvEXT");
    tunisGL.tunisVertexWeighthNV = (void (KHRONOS_APIENTRY *)(GLhalfNV))tunisGLGetProcAddress("glVertexWeighthNV");
    tunisGL.tunisVertexWeighthvNV = (void (KHRONOS_APIENTRY *)(const GLhalfNV *))tunisGLGetProcAddress("glVertexWeighthvNV");
    tunisGL.tunisVideoCaptureNV = (GLenum(KHRONOS_APIENTRY *)(GLuint, GLuint *, GLuint64EXT *))tunisGLGetProcAddress("glVideoCaptureNV");
    tunisGL.tunisVideoCaptureStreamParameterdvNV = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLenum, const GLdouble *))tunisGLGetProcAddress("glVideoCaptureStreamParameterdvNV");
    tunisGL.tunisVideoCaptureStreamParameterfvNV = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLenum, const GLfloat *))tunisGLGetProcAddress("glVideoCaptureStreamParameterfvNV");
    tunisGL.tunisVideoCaptureStreamParameterivNV = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLenum, const GLint *))tunisGLGetProcAddress("glVideoCaptureStreamParameterivNV");
    tunisGL.tunisViewport = (void (KHRONOS_APIENTRY *)(GLint, GLint, GLsizei, GLsizei))tunisGLGetProcAddress("glViewport");
    tunisGL.tunisViewportArrayv = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, const GLfloat *))tunisGLGetProcAddress("glViewportArrayv");
    tunisGL.tunisViewportArrayvNV = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, const GLfloat *))tunisGLGetProcAddress("glViewportArrayvNV");
    tunisGL.tunisViewportArrayvOES = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, const GLfloat *))tunisGLGetProcAddress("glViewportArrayvOES");
    tunisGL.tunisViewportIndexedf = (void (KHRONOS_APIENTRY *)(GLuint, GLfloat, GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glViewportIndexedf");
    tunisGL.tunisViewportIndexedfNV = (void (KHRONOS_APIENTRY *)(GLuint, GLfloat, GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glViewportIndexedfNV");
    tunisGL.tunisViewportIndexedfOES = (void (KHRONOS_APIENTRY *)(GLuint, GLfloat, GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glViewportIndexedfOES");
    tunisGL.tunisViewportIndexedfv = (void (KHRONOS_APIENTRY *)(GLuint, const GLfloat *))tunisGLGetProcAddress("glViewportIndexedfv");
    tunisGL.tunisViewportIndexedfvNV = (void (KHRONOS_APIENTRY *)(GLuint, const GLfloat *))tunisGLGetProcAddress("glViewportIndexedfvNV");
    tunisGL.tunisViewportIndexedfvOES = (void (KHRONOS_APIENTRY *)(GLuint, const GLfloat *))tunisGLGetProcAddress("glViewportIndexedfvOES");
    tunisGL.tunisViewportPositionWScaleNV = (void (KHRONOS_APIENTRY *)(GLuint, GLfloat, GLfloat))tunisGLGetProcAddress("glViewportPositionWScaleNV");
    tunisGL.tunisViewportSwizzleNV = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLenum, GLenum, GLenum))tunisGLGetProcAddress("glViewportSwizzleNV");
    tunisGL.tunisWaitSemaphoreEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, const GLuint *, GLuint, const GLuint *, const GLenum *))tunisGLGetProcAddress("glWaitSemaphoreEXT");
    tunisGL.tunisWaitSync = (void (KHRONOS_APIENTRY *)(GLsync, GLbitfield, GLuint64))tunisGLGetProcAddress("glWaitSync");
    tunisGL.tunisWaitSyncAPPLE = (void (KHRONOS_APIENTRY *)(GLsync, GLbitfield, GLuint64))tunisGLGetProcAddress("glWaitSyncAPPLE");
    tunisGL.tunisWaitVkSemaphoreNV = (void (KHRONOS_APIENTRY *)(GLuint64))tunisGLGetProcAddress("glWaitVkSemaphoreNV");
    tunisGL.tunisWeightPathsNV = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, const GLuint *, const GLfloat *))tunisGLGetProcAddress("glWeightPathsNV");
    tunisGL.tunisWeightPointerARB = (void (KHRONOS_APIENTRY *)(GLint, GLenum, GLsizei, const void *))tunisGLGetProcAddress("glWeightPointerARB");
    tunisGL.tunisWeightPointerOES = (void (KHRONOS_APIENTRY *)(GLint, GLenum, GLsizei, const void *))tunisGLGetProcAddress("glWeightPointerOES");
    tunisGL.tunisWeightbvARB = (void (KHRONOS_APIENTRY *)(GLint, const GLbyte *))tunisGLGetProcAddress("glWeightbvARB");
    tunisGL.tunisWeightdvARB = (void (KHRONOS_APIENTRY *)(GLint, const GLdouble *))tunisGLGetProcAddress("glWeightdvARB");
    tunisGL.tunisWeightfvARB = (void (KHRONOS_APIENTRY *)(GLint, const GLfloat *))tunisGLGetProcAddress("glWeightfvARB");
    tunisGL.tunisWeightivARB = (void (KHRONOS_APIENTRY *)(GLint, const GLint *))tunisGLGetProcAddress("glWeightivARB");
    tunisGL.tunisWeightsvARB = (void (KHRONOS_APIENTRY *)(GLint, const GLshort *))tunisGLGetProcAddress("glWeightsvARB");
    tunisGL.tunisWeightubvARB = (void (KHRONOS_APIENTRY *)(GLint, const GLubyte *))tunisGLGetProcAddress("glWeightubvARB");
    tunisGL.tunisWeightuivARB = (void (KHRONOS_APIENTRY *)(GLint, const GLuint *))tunisGLGetProcAddress("glWeightuivARB");
    tunisGL.tunisWeightusvARB = (void (KHRONOS_APIENTRY *)(GLint, const GLushort *))tunisGLGetProcAddress("glWeightusvARB");
    tunisGL.tunisWindowPos2d = (void (KHRONOS_APIENTRY *)(GLdouble, GLdouble))tunisGLGetProcAddress("glWindowPos2d");
    tunisGL.tunisWindowPos2dARB = (void (KHRONOS_APIENTRY *)(GLdouble, GLdouble))tunisGLGetProcAddress("glWindowPos2dARB");
    tunisGL.tunisWindowPos2dMESA = (void (KHRONOS_APIENTRY *)(GLdouble, GLdouble))tunisGLGetProcAddress("glWindowPos2dMESA");
    tunisGL.tunisWindowPos2dv = (void (KHRONOS_APIENTRY *)(const GLdouble *))tunisGLGetProcAddress("glWindowPos2dv");
    tunisGL.tunisWindowPos2dvARB = (void (KHRONOS_APIENTRY *)(const GLdouble *))tunisGLGetProcAddress("glWindowPos2dvARB");
    tunisGL.tunisWindowPos2dvMESA = (void (KHRONOS_APIENTRY *)(const GLdouble *))tunisGLGetProcAddress("glWindowPos2dvMESA");
    tunisGL.tunisWindowPos2f = (void (KHRONOS_APIENTRY *)(GLfloat, GLfloat))tunisGLGetProcAddress("glWindowPos2f");
    tunisGL.tunisWindowPos2fARB = (void (KHRONOS_APIENTRY *)(GLfloat, GLfloat))tunisGLGetProcAddress("glWindowPos2fARB");
    tunisGL.tunisWindowPos2fMESA = (void (KHRONOS_APIENTRY *)(GLfloat, GLfloat))tunisGLGetProcAddress("glWindowPos2fMESA");
    tunisGL.tunisWindowPos2fv = (void (KHRONOS_APIENTRY *)(const GLfloat *))tunisGLGetProcAddress("glWindowPos2fv");
    tunisGL.tunisWindowPos2fvARB = (void (KHRONOS_APIENTRY *)(const GLfloat *))tunisGLGetProcAddress("glWindowPos2fvARB");
    tunisGL.tunisWindowPos2fvMESA = (void (KHRONOS_APIENTRY *)(const GLfloat *))tunisGLGetProcAddress("glWindowPos2fvMESA");
    tunisGL.tunisWindowPos2i = (void (KHRONOS_APIENTRY *)(GLint, GLint))tunisGLGetProcAddress("glWindowPos2i");
    tunisGL.tunisWindowPos2iARB = (void (KHRONOS_APIENTRY *)(GLint, GLint))tunisGLGetProcAddress("glWindowPos2iARB");
    tunisGL.tunisWindowPos2iMESA = (void (KHRONOS_APIENTRY *)(GLint, GLint))tunisGLGetProcAddress("glWindowPos2iMESA");
    tunisGL.tunisWindowPos2iv = (void (KHRONOS_APIENTRY *)(const GLint *))tunisGLGetProcAddress("glWindowPos2iv");
    tunisGL.tunisWindowPos2ivARB = (void (KHRONOS_APIENTRY *)(const GLint *))tunisGLGetProcAddress("glWindowPos2ivARB");
    tunisGL.tunisWindowPos2ivMESA = (void (KHRONOS_APIENTRY *)(const GLint *))tunisGLGetProcAddress("glWindowPos2ivMESA");
    tunisGL.tunisWindowPos2s = (void (KHRONOS_APIENTRY *)(GLshort, GLshort))tunisGLGetProcAddress("glWindowPos2s");
    tunisGL.tunisWindowPos2sARB = (void (KHRONOS_APIENTRY *)(GLshort, GLshort))tunisGLGetProcAddress("glWindowPos2sARB");
    tunisGL.tunisWindowPos2sMESA = (void (KHRONOS_APIENTRY *)(GLshort, GLshort))tunisGLGetProcAddress("glWindowPos2sMESA");
    tunisGL.tunisWindowPos2sv = (void (KHRONOS_APIENTRY *)(const GLshort *))tunisGLGetProcAddress("glWindowPos2sv");
    tunisGL.tunisWindowPos2svARB = (void (KHRONOS_APIENTRY *)(const GLshort *))tunisGLGetProcAddress("glWindowPos2svARB");
    tunisGL.tunisWindowPos2svMESA = (void (KHRONOS_APIENTRY *)(const GLshort *))tunisGLGetProcAddress("glWindowPos2svMESA");
    tunisGL.tunisWindowPos3d = (void (KHRONOS_APIENTRY *)(GLdouble, GLdouble, GLdouble))tunisGLGetProcAddress("glWindowPos3d");
    tunisGL.tunisWindowPos3dARB = (void (KHRONOS_APIENTRY *)(GLdouble, GLdouble, GLdouble))tunisGLGetProcAddress("glWindowPos3dARB");
    tunisGL.tunisWindowPos3dMESA = (void (KHRONOS_APIENTRY *)(GLdouble, GLdouble, GLdouble))tunisGLGetProcAddress("glWindowPos3dMESA");
    tunisGL.tunisWindowPos3dv = (void (KHRONOS_APIENTRY *)(const GLdouble *))tunisGLGetProcAddress("glWindowPos3dv");
    tunisGL.tunisWindowPos3dvARB = (void (KHRONOS_APIENTRY *)(const GLdouble *))tunisGLGetProcAddress("glWindowPos3dvARB");
    tunisGL.tunisWindowPos3dvMESA = (void (KHRONOS_APIENTRY *)(const GLdouble *))tunisGLGetProcAddress("glWindowPos3dvMESA");
    tunisGL.tunisWindowPos3f = (void (KHRONOS_APIENTRY *)(GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glWindowPos3f");
    tunisGL.tunisWindowPos3fARB = (void (KHRONOS_APIENTRY *)(GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glWindowPos3fARB");
    tunisGL.tunisWindowPos3fMESA = (void (KHRONOS_APIENTRY *)(GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glWindowPos3fMESA");
    tunisGL.tunisWindowPos3fv = (void (KHRONOS_APIENTRY *)(const GLfloat *))tunisGLGetProcAddress("glWindowPos3fv");
    tunisGL.tunisWindowPos3fvARB = (void (KHRONOS_APIENTRY *)(const GLfloat *))tunisGLGetProcAddress("glWindowPos3fvARB");
    tunisGL.tunisWindowPos3fvMESA = (void (KHRONOS_APIENTRY *)(const GLfloat *))tunisGLGetProcAddress("glWindowPos3fvMESA");
    tunisGL.tunisWindowPos3i = (void (KHRONOS_APIENTRY *)(GLint, GLint, GLint))tunisGLGetProcAddress("glWindowPos3i");
    tunisGL.tunisWindowPos3iARB = (void (KHRONOS_APIENTRY *)(GLint, GLint, GLint))tunisGLGetProcAddress("glWindowPos3iARB");
    tunisGL.tunisWindowPos3iMESA = (void (KHRONOS_APIENTRY *)(GLint, GLint, GLint))tunisGLGetProcAddress("glWindowPos3iMESA");
    tunisGL.tunisWindowPos3iv = (void (KHRONOS_APIENTRY *)(const GLint *))tunisGLGetProcAddress("glWindowPos3iv");
    tunisGL.tunisWindowPos3ivARB = (void (KHRONOS_APIENTRY *)(const GLint *))tunisGLGetProcAddress("glWindowPos3ivARB");
    tunisGL.tunisWindowPos3ivMESA = (void (KHRONOS_APIENTRY *)(const GLint *))tunisGLGetProcAddress("glWindowPos3ivMESA");
    tunisGL.tunisWindowPos3s = (void (KHRONOS_APIENTRY *)(GLshort, GLshort, GLshort))tunisGLGetProcAddress("glWindowPos3s");
    tunisGL.tunisWindowPos3sARB = (void (KHRONOS_APIENTRY *)(GLshort, GLshort, GLshort))tunisGLGetProcAddress("glWindowPos3sARB");
    tunisGL.tunisWindowPos3sMESA = (void (KHRONOS_APIENTRY *)(GLshort, GLshort, GLshort))tunisGLGetProcAddress("glWindowPos3sMESA");
    tunisGL.tunisWindowPos3sv = (void (KHRONOS_APIENTRY *)(const GLshort *))tunisGLGetProcAddress("glWindowPos3sv");
    tunisGL.tunisWindowPos3svARB = (void (KHRONOS_APIENTRY *)(const GLshort *))tunisGLGetProcAddress("glWindowPos3svARB");
    tunisGL.tunisWindowPos3svMESA = (void (KHRONOS_APIENTRY *)(const GLshort *))tunisGLGetProcAddress("glWindowPos3svMESA");
    tunisGL.tunisWindowPos4dMESA = (void (KHRONOS_APIENTRY *)(GLdouble, GLdouble, GLdouble, GLdouble))tunisGLGetProcAddress("glWindowPos4dMESA");
    tunisGL.tunisWindowPos4dvMESA = (void (KHRONOS_APIENTRY *)(const GLdouble *))tunisGLGetProcAddress("glWindowPos4dvMESA");
    tunisGL.tunisWindowPos4fMESA = (void (KHRONOS_APIENTRY *)(GLfloat, GLfloat, GLfloat, GLfloat))tunisGLGetProcAddress("glWindowPos4fMESA");
    tunisGL.tunisWindowPos4fvMESA = (void (KHRONOS_APIENTRY *)(const GLfloat *))tunisGLGetProcAddress("glWindowPos4fvMESA");
    tunisGL.tunisWindowPos4iMESA = (void (KHRONOS_APIENTRY *)(GLint, GLint, GLint, GLint))tunisGLGetProcAddress("glWindowPos4iMESA");
    tunisGL.tunisWindowPos4ivMESA = (void (KHRONOS_APIENTRY *)(const GLint *))tunisGLGetProcAddress("glWindowPos4ivMESA");
    tunisGL.tunisWindowPos4sMESA = (void (KHRONOS_APIENTRY *)(GLshort, GLshort, GLshort, GLshort))tunisGLGetProcAddress("glWindowPos4sMESA");
    tunisGL.tunisWindowPos4svMESA = (void (KHRONOS_APIENTRY *)(const GLshort *))tunisGLGetProcAddress("glWindowPos4svMESA");
    tunisGL.tunisWindowRectanglesEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, const GLint *))tunisGLGetProcAddress("glWindowRectanglesEXT");
    tunisGL.tunisWriteMaskEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLenum, GLenum, GLenum, GLenum))tunisGLGetProcAddress("glWriteMaskEXT");

    if (!tunisGL.tunisGetError) {
        fprintf(stderr, "Could not find 'glGetError'\n");
        return KHRONOS_FALSE;
    }

    if (!tunisGL.tunisGetString) {
        fprintf(stderr, "Could not find 'glGetString'\n");
        return KHRONOS_FALSE;
    }

    version  = (const char*)tunisGL.tunisGetString(GL_VERSION);

    if(!version) {
        fprintf(stderr, "tunisGLInit() : Missing GL context. Make sure your context is created and made current prior to calling tunisGLInit.\n");
        return KHRONOS_FALSE;
    }

    if ((TUNIS_SSCANF(version, "OpenGL ES %d.%d",    &versionMajor, &versionMinor) == 2) ||
        (TUNIS_SSCANF(version, "OpenGL ES-CM %d.%d", &versionMajor, &versionMinor) == 2)) {
        isGLES = KHRONOS_TRUE;
    } else if (TUNIS_SSCANF(version, "%d.%d", &versionMajor, &versionMinor) != 2) {
        fprintf(stderr, "tunisGLInit() : Could not determine OpenGL/OpenGLES version.\n");
        return KHRONOS_FALSE;
    }

    if(isGLES) {
        tunisGL.support[GL_VERSION_ES_CM_1_0] = ((versionMajor > 1) || ((versionMajor == 1) && (versionMinor >= 0)));
        tunisGL.support[GL_ES_VERSION_2_0] = ((versionMajor > 2) || ((versionMajor == 2) && (versionMinor >= 0)));
        tunisGL.support[GL_ES_VERSION_3_0] = ((versionMajor > 3) || ((versionMajor == 3) && (versionMinor >= 0)));
        tunisGL.support[GL_ES_VERSION_3_1] = ((versionMajor > 3) || ((versionMajor == 3) && (versionMinor >= 1)));
        tunisGL.support[GL_ES_VERSION_3_2] = ((versionMajor > 3) || ((versionMajor == 3) && (versionMinor >= 2)));
        tunisGL.support[GL_SC_VERSION_2_0] = ((versionMajor > 2) || ((versionMajor == 2) && (versionMinor >= 0)));

    } else {
        tunisGL.support[GL_VERSION_1_0] = ((versionMajor > 1) || ((versionMajor == 1) && (versionMinor >= 0)));
        tunisGL.support[GL_VERSION_1_1] = ((versionMajor > 1) || ((versionMajor == 1) && (versionMinor >= 1)));
        tunisGL.support[GL_VERSION_1_2] = ((versionMajor > 1) || ((versionMajor == 1) && (versionMinor >= 2)));
        tunisGL.support[GL_VERSION_1_3] = ((versionMajor > 1) || ((versionMajor == 1) && (versionMinor >= 3)));
        tunisGL.support[GL_VERSION_1_4] = ((versionMajor > 1) || ((versionMajor == 1) && (versionMinor >= 4)));
        tunisGL.support[GL_VERSION_1_5] = ((versionMajor > 1) || ((versionMajor == 1) && (versionMinor >= 5)));
        tunisGL.support[GL_VERSION_2_0] = ((versionMajor > 2) || ((versionMajor == 2) && (versionMinor >= 0)));
        tunisGL.support[GL_VERSION_2_1] = ((versionMajor > 2) || ((versionMajor == 2) && (versionMinor >= 1)));
        tunisGL.support[GL_VERSION_3_0] = ((versionMajor > 3) || ((versionMajor == 3) && (versionMinor >= 0)));
        tunisGL.support[GL_VERSION_3_1] = ((versionMajor > 3) || ((versionMajor == 3) && (versionMinor >= 1)));
        tunisGL.support[GL_VERSION_3_2] = ((versionMajor > 3) || ((versionMajor == 3) && (versionMinor >= 2)));
        tunisGL.support[GL_VERSION_3_3] = ((versionMajor > 3) || ((versionMajor == 3) && (versionMinor >= 3)));
        tunisGL.support[GL_VERSION_4_0] = ((versionMajor > 4) || ((versionMajor == 4) && (versionMinor >= 0)));
        tunisGL.support[GL_VERSION_4_1] = ((versionMajor > 4) || ((versionMajor == 4) && (versionMinor >= 1)));
        tunisGL.support[GL_VERSION_4_2] = ((versionMajor > 4) || ((versionMajor == 4) && (versionMinor >= 2)));
        tunisGL.support[GL_VERSION_4_3] = ((versionMajor > 4) || ((versionMajor == 4) && (versionMinor >= 3)));
        tunisGL.support[GL_VERSION_4_4] = ((versionMajor > 4) || ((versionMajor == 4) && (versionMinor >= 4)));
        tunisGL.support[GL_VERSION_4_5] = ((versionMajor > 4) || ((versionMajor == 4) && (versionMinor >= 5)));
        tunisGL.support[GL_VERSION_4_6] = ((versionMajor > 4) || ((versionMajor == 4) && (versionMinor >= 6)));

    }

    if (tunisGL.support[GL_VERSION_3_0] || tunisGL.support[GL_ES_VERSION_3_0]) {
        khronos_int32_t i = 0;
        khronos_int32_t nExtensionsCount = 0;
        tunisGL.tunisGetIntegerv(GL_NUM_EXTENSIONS, &nExtensionsCount);
        while(i < nExtensionsCount)
        {
            const char* extensionStr = (const char*)tunisGL.tunisGetStringi(GL_EXTENSIONS, i++);
            tunisGLAddExtension(isGLES, extensionStr, strlen(extensionStr));
        }
    } else {
        const char* extensionsStr = (const char*)tunisGL.tunisGetString(GL_EXTENSIONS);
        while (extensionsStr) {
            const char* spacerPos = strchr(extensionsStr, ' ');
            khronos_usize_t extensionsStrLength = spacerPos ? (khronos_usize_t)(spacerPos++ - extensionsStr) : strlen(extensionsStr);
            tunisGLAddExtension(isGLES, extensionsStr, extensionsStrLength);
            extensionsStr = spacerPos;
        }
    }

#if !defined(NDEBUG)
    {
        clock_t end = clock();
        double elapsed_time = (end-start)/(double)CLOCKS_PER_SEC*1000.0;
        fprintf(stderr, "tunisGLInit() : elapsed time: %.2fms\n", elapsed_time );
    }
#endif

    return KHRONOS_TRUE;
}

void tunisGLShutdown(void) {
    memset(&tunisGL, 0, sizeof(TunisGLConfig));

#if !defined(__EMSCRIPTEN__)
    if (s_tunisGLLib)
    {
#if defined(_WIN32)
        FreeLibrary(s_tunisGLLib);
#else
        dlclose(s_tunisGLLib);
#endif
        s_tunisGLLib = NULL;
    }
#endif

}

void _tunisGLCheckError(const char* fileName, int lineNumber) {
    GLenum eErrorID = tunisGL.tunisGetError();
    if (eErrorID != GL_NO_ERROR) {
        do {
            static const char* errMsg[] = {
                "GL_INVALID_ENUM: An unacceptable value is specified for an enumerated argument.",
                "GL_INVALID_VALUE: A numeric argument is out of range.",
                "GL_INVALID_OPERATION: The specified operation is not allowed in the current state.",
                "GL_STACK_OVERFLOW: This function caused a stack overflow.",
                "GL_STACK_UNDERFLOW: This function would cause a stack underflow.",
                "GL_OUT_OF_MEMORY: There is not enough memory left to execute the command.",
                "GL_INVALID_FRAMEBUFFER_OPERATION: The command is trying to render to or read from the framebuffer while the currently bound framebuffer is not framebuffer complete.",
                "GL_CONTEXT_LOST: The context has been lost, due to a graphics card reset."
            };

            khronos_usize_t errorIndex = eErrorID - GL_INVALID_ENUM;
            if (errorIndex > sizeof(errMsg)) {
                fprintf(stderr, "tunisGLCheckError : file %s, line %d : Unknown error 0x%X\n", fileName, lineNumber, eErrorID);
            } else {
                fprintf(stderr, "tunisGLCheckError : file %s, line %d : %s\n", fileName, lineNumber, errMsg[errorIndex]);
            }
        } while((eErrorID = tunisGL.tunisGetError()) != GL_NO_ERROR);
    }
}

#if defined(HAVE_WINAPIFAMILY)
    #if !WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP) && WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP)
        #undef IS_UWP
    #endif
#endif

#if defined(__cplusplus)
} /* extern "C" */
#endif

#endif /* TUNIS_IMPLEMENTATION */

#endif /* _TUNIS_GL_H_ */

